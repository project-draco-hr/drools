{
  try {
    ruleNestingLevel++;
    int _type=MODULE;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      int cnt1=0;
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if (((LA1_0 >= 'A' && LA1_0 <= 'Z'))) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            matchRange('A','Z');
            if (failed)             return;
          }
        break;
default :
      if (cnt1 >= 1)       break loop1;
    if (backtracking > 0) {
      failed=true;
      return;
    }
  EarlyExitException eee=new EarlyExitException(1,input);
throw eee;
}
cnt1++;
}
 while (true);
match("::");
if (failed) return;
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
