{
  try {
    ruleNestingLevel++;
    int _type=MISC;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
    int alt20=19;
switch (input.LA(1)) {
case '!':
      alt20=1;
    break;
case '@':
  alt20=2;
break;
case '$':
alt20=3;
break;
case '%':
alt20=4;
break;
case '^':
alt20=5;
break;
case '*':
alt20=6;
break;
case '_':
alt20=7;
break;
case '-':
alt20=8;
break;
case '+':
alt20=9;
break;
case '?':
alt20=10;
break;
case ',':
alt20=11;
break;
case '=':
alt20=12;
break;
case '/':
alt20=13;
break;
case '\'':
alt20=14;
break;
case '\\':
alt20=15;
break;
case '<':
int LA20_16=input.LA(2);
if ((LA20_16 == '=')) {
alt20=18;
}
 else {
alt20=16;
}
break;
case '>':
int LA20_17=input.LA(2);
if ((LA20_17 == '=')) {
alt20=19;
}
 else {
alt20=17;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("743:1: MISC : ( '!' | '@' | '$' | '%' | '^' | '*' | '_' | '-' | '+' | '?' | ',' | '=' | '/' | '\\'' | '\\\\' | '<' | '>' | '<=' | '>=' );",20,0,input);
throw nvae;
}
switch (alt20) {
case 1:
{
match('!');
if (failed) return;
}
break;
case 2:
{
match('@');
if (failed) return;
}
break;
case 3:
{
match('$');
if (failed) return;
}
break;
case 4:
{
match('%');
if (failed) return;
}
break;
case 5:
{
match('^');
if (failed) return;
}
break;
case 6:
{
match('*');
if (failed) return;
}
break;
case 7:
{
match('_');
if (failed) return;
}
break;
case 8:
{
match('-');
if (failed) return;
}
break;
case 9:
{
match('+');
if (failed) return;
}
break;
case 10:
{
match('?');
if (failed) return;
}
break;
case 11:
{
match(',');
if (failed) return;
}
break;
case 12:
{
match('=');
if (failed) return;
}
break;
case 13:
{
match('/');
if (failed) return;
}
break;
case 14:
{
match('\'');
if (failed) return;
}
break;
case 15:
{
match('\\');
if (failed) return;
}
break;
case 16:
{
match('<');
if (failed) return;
}
break;
case 17:
{
match('>');
if (failed) return;
}
break;
case 18:
{
match("<=");
if (failed) return;
}
break;
case 19:
{
match(">=");
if (failed) return;
}
break;
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
