{
  try {
    ruleNestingLevel++;
    int _type=SYMBOL;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      int alt20=2;
      int LA20_0=input.LA(1);
      if (((LA20_0 >= '\u0000' && LA20_0 <= '\b') || (LA20_0 >= '\u000B' && LA20_0 <= '\f') || (LA20_0 >= '\u000E' && LA20_0 <= '\u001F')|| LA20_0 == '!' || LA20_0 == '#' || LA20_0 == '%' || LA20_0 == '\'' || (LA20_0 >= '*' && LA20_0 <= ':') || (LA20_0 >= '<' && LA20_0 <= '>') || (LA20_0 >= '@' && LA20_0 <= '{') || LA20_0 == '}' || (LA20_0 >= '\u007F' && LA20_0 <= '\uFFFE'))) {
        alt20=1;
      }
 else       if ((LA20_0 == '$')) {
        alt20=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("733:4: ( (~ (' '|'\\t'|'\\n'|'\\r'|'\"'|'('|')'|';'|'&'|'|'|'~'|'?'|'$')) | ( '$' ~ ('?'|' '|'\\t'|'\\n'|'\\r'|'\"'|'('|')'|';'|'&'|'|'|'~'|'<')) )",20,0,input);
        throw nvae;
      }
switch (alt20) {
case 1:
{
{
            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\b') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\u001F')|| input.LA(1) == '!' || input.LA(1) == '#' || input.LA(1) == '%' || input.LA(1) == '\'' || (input.LA(1) >= '*' && input.LA(1) <= ':') || (input.LA(1) >= '<' && input.LA(1) <= '>') || (input.LA(1) >= '@' && input.LA(1) <= '{') || input.LA(1) == '}' || (input.LA(1) >= '\u007F' && input.LA(1) <= '\uFFFE')) {
              input.consume();
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        }
      break;
case 2:
{
{
        match('$');
        if (failed)         return;
        if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\b') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\u001F')|| input.LA(1) == '!' || (input.LA(1) >= '#' && input.LA(1) <= '%') || input.LA(1) == '\'' || (input.LA(1) >= '*' && input.LA(1) <= ':') || (input.LA(1) >= '=' && input.LA(1) <= '>') || (input.LA(1) >= '@' && input.LA(1) <= '{') || input.LA(1) == '}' || (input.LA(1) >= '\u007F' && input.LA(1) <= '\uFFFE')) {
          input.consume();
          failed=false;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return;
          }
          MismatchedSetException mse=new MismatchedSetException(null,input);
          recover(mse);
          throw mse;
        }
      }
    }
  break;
}
loop21: do {
int alt21=2;
int LA21_0=input.LA(1);
if (((LA21_0 >= '\u0000' && LA21_0 <= '\b') || (LA21_0 >= '\u000B' && LA21_0 <= '\f') || (LA21_0 >= '\u000E' && LA21_0 <= '\u001F')|| LA21_0 == '!' || (LA21_0 >= '#' && LA21_0 <= '%') || LA21_0 == '\'' || (LA21_0 >= '*' && LA21_0 <= ':') || (LA21_0 >= '=' && LA21_0 <= '>') || (LA21_0 >= '@' && LA21_0 <= '{') || LA21_0 == '}' || (LA21_0 >= '\u007F' && LA21_0 <= '\uFFFE'))) {
  alt21=1;
}
switch (alt21) {
case 1:
{
    if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\b') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\u001F')|| input.LA(1) == '!' || (input.LA(1) >= '#' && input.LA(1) <= '%') || input.LA(1) == '\'' || (input.LA(1) >= '*' && input.LA(1) <= ':') || (input.LA(1) >= '=' && input.LA(1) <= '>') || (input.LA(1) >= '@' && input.LA(1) <= '{') || input.LA(1) == '}' || (input.LA(1) >= '\u007F' && input.LA(1) <= '\uFFFE')) {
      input.consume();
      failed=false;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return;
      }
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
break;
default :
break loop21;
}
}
 while (true);
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
