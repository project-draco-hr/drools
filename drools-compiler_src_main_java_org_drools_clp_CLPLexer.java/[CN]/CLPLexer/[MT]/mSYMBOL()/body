{
  try {
    ruleNestingLevel++;
    int _type=SYMBOL;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      int cnt20=0;
      loop20:       do {
        int alt20=2;
        int LA20_0=input.LA(1);
        if (((LA20_0 >= '\u0000' && LA20_0 <= '\u001F') || LA20_0 == '!' || (LA20_0 >= '#' && LA20_0 <= '%') || LA20_0 == '\'' || (LA20_0 >= '*' && LA20_0 <= '>') || (LA20_0 >= '@' && LA20_0 <= '{') || LA20_0 == '}' || (LA20_0 >= '\u007F' && LA20_0 <= '\uFFFE'))) {
          alt20=1;
        }
switch (alt20) {
case 1:
{
            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\u001F') || input.LA(1) == '!' || (input.LA(1) >= '#' && input.LA(1) <= '%') || input.LA(1) == '\'' || (input.LA(1) >= '*' && input.LA(1) <= '>') || (input.LA(1) >= '@' && input.LA(1) <= '{') || input.LA(1) == '}' || (input.LA(1) >= '\u007F' && input.LA(1) <= '\uFFFE')) {
              input.consume();
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        break;
default :
      if (cnt20 >= 1)       break loop20;
    if (backtracking > 0) {
      failed=true;
      return;
    }
  EarlyExitException eee=new EarlyExitException(20,input);
throw eee;
}
cnt20++;
}
 while (true);
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
