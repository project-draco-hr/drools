{
  try {
    ruleNestingLevel++;
    int _type=C_STYLE_SINGLE_LINE_COMMENT;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      match("//");
      if (failed)       return;
      loop17:       do {
        int alt17=2;
        int LA17_0=input.LA(1);
        if ((LA17_0 == '\r')) {
          alt17=2;
        }
 else         if ((LA17_0 == '\n')) {
          alt17=2;
        }
 else         if (((LA17_0 >= '\u0000' && LA17_0 <= '\t') || (LA17_0 >= '\u000B' && LA17_0 <= '\f') || (LA17_0 >= '\u000E' && LA17_0 <= '\uFFFE'))) {
          alt17=1;
        }
switch (alt17) {
case 1:
{
            matchAny();
            if (failed)             return;
          }
        break;
default :
      break loop17;
  }
}
 while (true);
mEOL();
if (failed) return;
if (backtracking == 0) {
  _channel=HIDDEN;
}
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
  emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
