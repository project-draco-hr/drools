{
  int alt23=37;
  alt23=dfa23.predict(input);
switch (alt23) {
case 1:
{
      mT40();
      if (failed)       return;
    }
  break;
case 2:
{
  mT41();
  if (failed)   return;
}
break;
case 3:
{
mT42();
if (failed) return;
}
break;
case 4:
{
mT43();
if (failed) return;
}
break;
case 5:
{
mT44();
if (failed) return;
}
break;
case 6:
{
mT45();
if (failed) return;
}
break;
case 7:
{
mDEFRULE();
if (failed) return;
}
break;
case 8:
{
mOR();
if (failed) return;
}
break;
case 9:
{
mAND();
if (failed) return;
}
break;
case 10:
{
mNOT();
if (failed) return;
}
break;
case 11:
{
mEXISTS();
if (failed) return;
}
break;
case 12:
{
mTEST();
if (failed) return;
}
break;
case 13:
{
mNULL();
if (failed) return;
}
break;
case 14:
{
mMODULE();
if (failed) return;
}
break;
case 15:
{
mWS();
if (failed) return;
}
break;
case 16:
{
mDECLARE();
if (failed) return;
}
break;
case 17:
{
mSALIENCE();
if (failed) return;
}
break;
case 18:
{
mINT();
if (failed) return;
}
break;
case 19:
{
mFLOAT();
if (failed) return;
}
break;
case 20:
{
mSTRING();
if (failed) return;
}
break;
case 21:
{
mBOOL();
if (failed) return;
}
break;
case 22:
{
mVAR();
if (failed) return;
}
break;
case 23:
{
mID();
if (failed) return;
}
break;
case 24:
{
mSH_STYLE_SINGLE_LINE_COMMENT();
if (failed) return;
}
break;
case 25:
{
mC_STYLE_SINGLE_LINE_COMMENT();
if (failed) return;
}
break;
case 26:
{
mLEFT_PAREN();
if (failed) return;
}
break;
case 27:
{
mRIGHT_PAREN();
if (failed) return;
}
break;
case 28:
{
mLEFT_SQUARE();
if (failed) return;
}
break;
case 29:
{
mRIGHT_SQUARE();
if (failed) return;
}
break;
case 30:
{
mLEFT_CURLY();
if (failed) return;
}
break;
case 31:
{
mRIGHT_CURLY();
if (failed) return;
}
break;
case 32:
{
mTILDE();
if (failed) return;
}
break;
case 33:
{
mAMPERSAND();
if (failed) return;
}
break;
case 34:
{
mPIPE();
if (failed) return;
}
break;
case 35:
{
mMULTI_LINE_COMMENT();
if (failed) return;
}
break;
case 36:
{
mMISC();
if (failed) return;
}
break;
case 37:
{
mSYMBOL();
if (failed) return;
}
break;
}
}
