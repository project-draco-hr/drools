{
  try {
    ClassBuilder builder=new ClassBuilderFactory().getBeanClassBuilder();
    ClassDefinition classDef=new ClassDefinition("org.drools.TestClass4",null,new String[]{});
    FieldDefinition long1Def=new FieldDefinition("longAttr1","long",true);
    FieldDefinition long2Def=new FieldDefinition("longAttr2","long",true);
    FieldDefinition doubleDef=new FieldDefinition("doubleAttr","double",true);
    FieldDefinition intDef=new FieldDefinition("intAttr","int",true);
    FieldDefinition strDef=new FieldDefinition("stringAttr","java.lang.String",true);
    FieldDefinition dateDef=new FieldDefinition("dateAttr","java.util.Date",true);
    FieldDefinition str2Def=new FieldDefinition("stringAttr2","java.lang.String");
    classDef.addField(long1Def);
    classDef.addField(long2Def);
    classDef.addField(doubleDef);
    classDef.addField(intDef);
    classDef.addField(strDef);
    classDef.addField(dateDef);
    classDef.addField(str2Def);
    Class clazz=build(builder,classDef);
    long1Def.setReadWriteAccessor(store.getAccessor(clazz,long1Def.getName(),classLoader));
    long2Def.setReadWriteAccessor(store.getAccessor(clazz,long2Def.getName(),classLoader));
    doubleDef.setReadWriteAccessor(store.getAccessor(clazz,doubleDef.getName(),classLoader));
    intDef.setReadWriteAccessor(store.getAccessor(clazz,intDef.getName(),classLoader));
    strDef.setReadWriteAccessor(store.getAccessor(clazz,strDef.getName(),classLoader));
    dateDef.setReadWriteAccessor(store.getAccessor(clazz,dateDef.getName(),classLoader));
    str2Def.setReadWriteAccessor(store.getAccessor(clazz,str2Def.getName(),classLoader));
    Object x=clazz.newInstance();
    long1Def.setValue(x,new Long(20));
    long2Def.setValue(x,new Long(30));
    doubleDef.setValue(x,new Double(50.0));
    intDef.setValue(x,new Integer(10));
    strDef.setValue(x,"abc");
    dateDef.setValue(x,new Date(1000));
    str2Def.setValue(x,"instance1");
    String result=x.toString();
    assertTrue(result.contains(long1Def.getName()));
    assertTrue(result.contains(long2Def.getName()));
    assertTrue(result.contains(doubleDef.getName()));
    assertTrue(result.contains(intDef.getName()));
    assertTrue(result.contains(strDef.getName()));
    assertTrue(result.contains(dateDef.getName()));
    assertTrue(result.contains(str2Def.getName()));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Exception not expected");
  }
}
