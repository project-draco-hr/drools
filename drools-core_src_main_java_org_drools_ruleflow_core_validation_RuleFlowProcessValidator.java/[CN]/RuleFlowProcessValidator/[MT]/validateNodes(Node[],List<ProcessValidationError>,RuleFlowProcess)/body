{
  for (int i=0; i < nodes.length; i++) {
    final Node node=nodes[i];
    if (node instanceof StartNode) {
      final StartNode startNode=(StartNode)node;
      startNodeFound=true;
      if (startNode.getTo() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Start node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection."));
      }
    }
 else     if (node instanceof EndNode) {
      final EndNode endNode=(EndNode)node;
      endNodeFound=true;
      if (endNode.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"End node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
    }
 else     if (node instanceof RuleSetNode) {
      final RuleSetNode ruleSetNode=(RuleSetNode)node;
      if (ruleSetNode.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"RuleSet node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
      if (ruleSetNode.getTo() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"RuleSet node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection."));
      }
      final String ruleFlowGroup=ruleSetNode.getRuleFlowGroup();
      if (ruleFlowGroup == null || "".equals(ruleFlowGroup)) {
        errors.add(new ProcessValidationErrorImpl(process,"RuleSet node '" + node.getName() + "' ["+ node.getId()+ "] has no ruleflow-group."));
      }
    }
 else     if (node instanceof Split) {
      final Split split=(Split)node;
      if (split.getType() == Split.TYPE_UNDEFINED) {
        errors.add(new ProcessValidationErrorImpl(process,"Split node '" + node.getName() + "' ["+ node.getId()+ "] has no type."));
      }
      if (split.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Split node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
      if (split.getDefaultOutgoingConnections().size() < 2) {
        errors.add(new ProcessValidationErrorImpl(process,"Split node '" + node.getName() + "' ["+ node.getId()+ "] does not have more than one outgoing connection: "+ split.getOutgoingConnections().size()+ "."));
      }
      if (split.getType() == Split.TYPE_XOR || split.getType() == Split.TYPE_OR) {
        for (final Iterator<Connection> it=split.getDefaultOutgoingConnections().iterator(); it.hasNext(); ) {
          final Connection connection=it.next();
          if (split.getConstraint(connection) == null) {
            errors.add(new ProcessValidationErrorImpl(process,"Split node '" + node.getName() + "' ["+ node.getId()+ "] does not have a constraint for "+ connection.toString()+ "."));
          }
        }
      }
    }
 else     if (node instanceof Join) {
      final Join join=(Join)node;
      if (join.getType() == Join.TYPE_UNDEFINED) {
        errors.add(new ProcessValidationErrorImpl(process,"Join node '" + node.getName() + "' ["+ node.getId()+ "] has no type."));
      }
      if (join.getDefaultIncomingConnections().size() < 2) {
        errors.add(new ProcessValidationErrorImpl(process,"Join node '" + node.getName() + "' ["+ node.getId()+ "] does not have more than one incoming connection: "+ join.getIncomingConnections().size()+ "."));
      }
      if (join.getTo() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Join node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection."));
      }
      if (join.getType() == Join.TYPE_N_OF_M) {
        String n=join.getN();
        if (!n.startsWith("#{") || !n.endsWith("}")) {
          try {
            new Integer(n);
          }
 catch (          NumberFormatException e) {
            errors.add(new ProcessValidationErrorImpl(process,"Join node '" + node.getName() + "' ["+ node.getId()+ "] has illegal n value: "+ n));
          }
        }
      }
    }
 else     if (node instanceof MilestoneNode) {
      final MilestoneNode milestone=(MilestoneNode)node;
      if (milestone.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Milestone node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
      if (milestone.getTo() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Milestone node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection."));
      }
      if (milestone.getConstraint() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Milestone node '" + node.getName() + "' ["+ node.getId()+ "] has no constraint."));
      }
    }
 else     if (node instanceof StateNode) {
      final StateNode stateNode=(StateNode)node;
      if (stateNode.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"State node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
    }
 else     if (node instanceof SubProcessNode) {
      final SubProcessNode subProcess=(SubProcessNode)node;
      if (subProcess.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"SubProcess node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
      if (subProcess.getTo() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"SubProcess node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection."));
      }
      if (subProcess.getProcessId() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"SubProcess node '" + node.getName() + "' ["+ node.getId()+ "] has no process id."));
      }
    }
 else     if (node instanceof ActionNode) {
      final ActionNode actionNode=(ActionNode)node;
      if (actionNode.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Action node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
      if (actionNode.getTo() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Action node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection."));
      }
      if (actionNode.getAction() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Action node '" + node.getName() + "' ["+ node.getId()+ "] has no action."));
      }
 else {
        if (actionNode.getAction() instanceof DroolsConsequenceAction) {
          DroolsConsequenceAction droolsAction=(DroolsConsequenceAction)actionNode.getAction();
          String actionString=droolsAction.getConsequence();
          if (actionString == null) {
            errors.add(new ProcessValidationErrorImpl(process,"Action node '" + node.getName() + "' ["+ node.getId()+ "] has empty action."));
          }
 else           if ("mvel".equals(droolsAction.getDialect())) {
            try {
              ExpressionCompiler compiler=new ExpressionCompiler(actionString);
              compiler.setVerifying(true);
              ParserContext parserContext=new ParserContext();
              compiler.compile(parserContext);
              List<ErrorDetail> mvelErrors=parserContext.getErrorList();
              if (mvelErrors != null) {
                for (Iterator<ErrorDetail> iterator=mvelErrors.iterator(); iterator.hasNext(); ) {
                  ErrorDetail error=iterator.next();
                  errors.add(new ProcessValidationErrorImpl(process,"Action node '" + node.getName() + "' ["+ node.getId()+ "] has invalid action: "+ error.getMessage()+ "."));
                }
              }
            }
 catch (            Throwable t) {
              errors.add(new ProcessValidationErrorImpl(process,"Action node '" + node.getName() + "' ["+ node.getId()+ "] has invalid action: "+ t.getMessage()+ "."));
            }
          }
        }
      }
    }
 else     if (node instanceof WorkItemNode) {
      final WorkItemNode workItemNode=(WorkItemNode)node;
      if (workItemNode.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"WorkItem node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
      if (workItemNode.getTo() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"WorkItem node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection."));
      }
      if (workItemNode.getWork() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"WorkItem node '" + node.getName() + "' ["+ node.getId()+ "] has no work specified."));
      }
 else {
        Work work=workItemNode.getWork();
        if (work.getName() == null) {
          errors.add(new ProcessValidationErrorImpl(process,"WorkItem node '" + node.getName() + "' ["+ node.getId()+ "] has no work name."));
        }
      }
    }
 else     if (node instanceof ForEachNode) {
      final ForEachNode forEachNode=(ForEachNode)node;
      String variableName=forEachNode.getVariableName();
      if (variableName == null || "".equals(variableName)) {
        errors.add(new ProcessValidationErrorImpl(process,"ForEach node '" + node.getName() + "' ["+ node.getId()+ "] has no variable name"));
      }
      String collectionExpression=forEachNode.getCollectionExpression();
      if (collectionExpression == null || "".equals(collectionExpression)) {
        errors.add(new ProcessValidationErrorImpl(process,"ForEach node '" + node.getName() + "' ["+ node.getId()+ "] has no collection expression"));
      }
      if (forEachNode.getIncomingConnections(org.drools.workflow.core.Node.CONNECTION_DEFAULT_TYPE).size() == 0) {
        errors.add(new ProcessValidationErrorImpl(process,"ForEach node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection"));
      }
      if (forEachNode.getOutgoingConnections(org.drools.workflow.core.Node.CONNECTION_DEFAULT_TYPE).size() == 0) {
        errors.add(new ProcessValidationErrorImpl(process,"ForEach node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection"));
      }
      if (forEachNode.getLinkedIncomingNode(org.drools.workflow.core.Node.CONNECTION_DEFAULT_TYPE) == null) {
        errors.add(new ProcessValidationErrorImpl(process,"ForEach node '" + node.getName() + "' ["+ node.getId()+ "] has no linked start node"));
      }
      if (forEachNode.getLinkedOutgoingNode(org.drools.workflow.core.Node.CONNECTION_DEFAULT_TYPE) == null) {
        errors.add(new ProcessValidationErrorImpl(process,"ForEach node '" + node.getName() + "' ["+ node.getId()+ "] has no linked end node"));
      }
      validateNodes(forEachNode.getNodes(),errors,process);
    }
 else     if (node instanceof CompositeNode) {
      final CompositeNode compositeNode=(CompositeNode)node;
      for (      Map.Entry<String,NodeAndType> inType : compositeNode.getLinkedIncomingNodes().entrySet()) {
        if (compositeNode.getIncomingConnections(inType.getKey()).size() == 0) {
          errors.add(new ProcessValidationErrorImpl(process,"Composite node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection for type "+ inType.getKey()));
        }
        if (inType.getValue().getNode() == null) {
          errors.add(new ProcessValidationErrorImpl(process,"Composite node '" + node.getName() + "' ["+ node.getId()+ "] has invalid linked incoming node for type "+ inType.getKey()));
        }
      }
      for (      Map.Entry<String,NodeAndType> outType : compositeNode.getLinkedOutgoingNodes().entrySet()) {
        if (compositeNode.getOutgoingConnections(outType.getKey()).size() == 0) {
          errors.add(new ProcessValidationErrorImpl(process,"Composite node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection for type "+ outType.getKey()));
        }
        if (outType.getValue().getNode() == null) {
          errors.add(new ProcessValidationErrorImpl(process,"Composite node '" + node.getName() + "' ["+ node.getId()+ "] has invalid linked outgoing node for type "+ outType.getKey()));
        }
      }
      validateNodes(compositeNode.getNodes(),errors,process);
    }
 else     if (node instanceof EventNode) {
      final EventNode eventNode=(EventNode)node;
      if (eventNode.getEventFilters().size() == 0) {
        errors.add(new ProcessValidationErrorImpl(process,"Event node '" + node.getName() + "' ["+ node.getId()+ "] should specify an event type"));
      }
      if (eventNode.getOutgoingConnections(org.drools.workflow.core.Node.CONNECTION_DEFAULT_TYPE).size() == 0) {
        errors.add(new ProcessValidationErrorImpl(process,"Event node '" + node.getName() + "' ["+ node.getId()+ "] has no outgoing connection"));
      }
    }
 else     if (node instanceof FaultNode) {
      endNodeFound=true;
      final FaultNode faultNode=(FaultNode)node;
      if (faultNode.getFrom() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Fault node '" + node.getName() + "' ["+ node.getId()+ "] has no incoming connection."));
      }
      if (faultNode.getFaultName() == null) {
        errors.add(new ProcessValidationErrorImpl(process,"Fault node '" + node.getName() + "' ["+ node.getId()+ "] has no fault name."));
      }
    }
  }
}
