{
  String str="package org.drools.compiler.test\n" + "import \n" + Message.class.getCanonicalName() + ";"+ "rule R1 no-loop when\n"+ "    $s : String( )"+ "    $m : Message( )\n"+ "then\n"+ "    modify($m) { setMessage($s) };\n"+ "end\n";
  KieServices ks=KieServices.Factory.get();
  KieFileSystem kfs=ks.newKieFileSystem();
  kfs.write("src/main/resources/r0.drl",str);
  KieBuilder kieBuilder=ks.newKieBuilder(kfs).buildAll();
  Results results=kieBuilder.getResults();
  if (results.hasMessages(org.kie.api.builder.Message.Level.ERROR)) {
    throw new RuntimeException(results.getMessages().toString());
  }
  KieContainer kieContainer=ks.newKieContainer(ks.getRepository().getDefaultReleaseId());
  KieBaseConfiguration kieBaseConf=ks.newKieBaseConfiguration();
  kieBaseConf.setOption(SequentialOption.YES);
  StatelessKieSession sequentialKsession=kieContainer.newKieBase(kieBaseConf).newStatelessKieSession();
  List result=(List)sequentialKsession.execute(CommandFactory.newInsertElements(Arrays.asList("test",new Message())));
  assertEquals(2,result.size());
  StatelessKieSession ksession=kieContainer.getKieBase().newStatelessKieSession();
  result=(List)ksession.execute(CommandFactory.newInsertElements(Arrays.asList("test",new Message())));
  assertEquals(2,result.size());
}
