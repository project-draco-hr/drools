{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Restrictions.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Find redundant VariableRestriction"));
  Collection<? extends Object> data=getTestData(this.getClass().getResourceAsStream("SubsumptionVariableRestrictionTest.drl"));
  AnalyticsResult result=AnalyticsDataFactory.getAnalyticsResult();
  session.setGlobal("result",result);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<String,Set<String>> map=createRedundancyMap(sessionResult.iterateObjects());
  assertTrue(TestBase.mapContains(map,"Redundant 1a","Redundant 1b"));
  assertTrue(TestBase.mapContains(map,"Redundant 1b","Redundant 1a"));
  assertTrue(TestBase.mapContains(map,"Redundant 2a","Redundant 2a"));
  if (!map.isEmpty()) {
    fail("More redundancies than was expected.");
  }
}
