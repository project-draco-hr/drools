{
  when(constraint.isAllowedCachedLeft(any(ContextEntry.class),any(InternalFactHandle.class))).thenReturn(false);
  when(constraint.isAllowedCachedRight(any(LeftTupleImpl.class),any(ContextEntry.class))).thenReturn(false);
  final Cheese cheddar=new Cheese("cheddar",10);
  final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.insert(cheddar);
  final LeftTupleImpl tuple1=new LeftTupleImpl(f0,this.node,true);
  this.node.assertLeftTuple(tuple1,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  assertLength(0,this.sink.getRetracted());
  assertEquals(new LeftTupleImpl(f0,this.sink,true),((Object[])this.sink.getAsserted().get(0))[0]);
  final Cheese brie=new Cheese("brie",10);
  final DefaultFactHandle f1=(DefaultFactHandle)this.workingMemory.insert(brie);
  this.node.assertObject(f1,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  assertLength(0,this.sink.getRetracted());
  final DefaultFactHandle f2=(DefaultFactHandle)this.workingMemory.insert(new Cheese("gouda",10));
  final LeftTupleImpl tuple2=new LeftTupleImpl(f2,this.node,true);
  this.node.assertLeftTuple(tuple2,this.context,this.workingMemory);
  assertLength(2,this.sink.getAsserted());
  assertLength(0,this.sink.getRetracted());
}
