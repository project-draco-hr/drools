{
  FactHandleImpl f0=new FactHandleImpl(0);
  String string0="string1";
  this.workingMemory.putObject(f0,string0);
  this.node.assertObject(string0,f0,this.context,this.workingMemory);
  FactHandleImpl f1=new FactHandleImpl(1);
  this.workingMemory.putObject(f1,"string2");
  ReteTuple tuple1=new ReteTuple(9,f1,this.workingMemory);
  this.node.assertTuple(tuple1,this.context,this.workingMemory);
  assertLength(0,this.sink.getAsserted());
  assertLength(0,this.sink.getRetracted());
  this.node.retractObject(f0,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  Object[] list=(Object[])this.sink.getAsserted().get(0);
  assertSame(tuple1,list[0]);
  assertLength(0,this.sink.getRetracted());
  this.node.assertObject(string0,f0,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  FactHandleImpl f2=new FactHandleImpl(2);
  this.workingMemory.putObject(f2,"string2");
  ReteTuple tuple2=new ReteTuple(9,f2,this.workingMemory);
  this.node.assertTuple(tuple2,this.context,this.workingMemory);
  this.node.retractObject(f0,this.context,this.workingMemory);
  assertLength(3,this.sink.getAsserted());
  this.node.assertObject(string0,f0,this.context,this.workingMemory);
  this.node.retractTuples(tuple1.getKey(),this.context,this.workingMemory);
  assertLength(1,this.sink.getRetracted());
  this.node.retractObject(f0,this.context,this.workingMemory);
  this.node.retractTuples(tuple2.getKey(),this.context,this.workingMemory);
  assertLength(2,this.sink.getRetracted());
  list=(Object[])this.sink.getRetracted().get(0);
  assertSame(tuple1.getKey(),list[0]);
  list=(Object[])this.sink.getRetracted().get(1);
  assertSame(tuple2.getKey(),list[0]);
}
