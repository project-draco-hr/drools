{
  this.rule=new Rule("test-rule");
  this.context=new PropagationContextImpl(PropagationContext.ASSERTION,null,null);
  this.workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  ObjectType stringObjectType=new ClassObjectType(String.class);
  Extractor stringExtractor=new Extractor(){
    public Object getValue(    Object object){
      return object;
    }
  }
;
  Declaration string1Declaration=new Declaration(0,"string1",stringObjectType,stringExtractor,3);
  Declaration string2Declaration=new Declaration(0,"string2",stringObjectType,stringExtractor,9);
  PredicateExpressionConstraint checkString=new PredicateExpressionConstraint(){
    public boolean isAllowed(    Object object,    FactHandle handle,    Declaration declaration,    Declaration[] declarations,    Tuple tuple){
      String string1=(String)object;
      String string2=(String)tuple.get(declarations[0]);
      return "string1string2".equals(string1 + string2);
    }
  }
;
  PredicateConstraint constraint=new PredicateConstraint(checkString,string1Declaration,new Declaration[]{string2Declaration});
  this.node=new NotNode(15,new MockTupleSource(5),new MockObjectSource(8),3,new BetaNodeBinder(constraint));
  this.sink=new MockTupleSink();
  this.node.addTupleSink(this.sink);
  this.memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
}
