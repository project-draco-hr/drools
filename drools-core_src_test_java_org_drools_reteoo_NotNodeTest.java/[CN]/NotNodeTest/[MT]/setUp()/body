{
  this.rule=new Rule("test-rule");
  this.context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  this.workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  PredicateExpression evaluator=new PredicateExpression(){
    public boolean evaluate(    Tuple tuple,    FactHandle handle,    Declaration declaration,    Declaration[] declarations,    WorkingMemory workingMemory){
      return NotNodeTest.this.allowed;
    }
  }
;
  PredicateConstraint constraint=new PredicateConstraint(evaluator,null,new Declaration[]{});
  this.node=new NotNode(15,new MockTupleSource(5),new MockObjectSource(8),1,new BetaNodeBinder(constraint));
  this.ria=new RightInputAdapterNode(2,0,this.node);
  this.ria.attach();
  this.sink=new MockObjectSink();
  this.ria.addObjectSink(this.sink);
  this.memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
}
