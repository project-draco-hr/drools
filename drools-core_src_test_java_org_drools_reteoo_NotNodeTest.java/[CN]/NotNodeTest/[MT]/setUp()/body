{
  this.rule=new Rule("test-rule");
  this.context=new PropagationContextImpl(PropagationContext.ASSERTION,null,null);
  this.workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  FieldExtractor priceExtractor=new ClassFieldExtractor(Cheese.class,Cheese.getIndex(Cheese.class,"price"));
  Declaration string1Declaration=new Declaration(0,"cheese1",priceExtractor,3);
  Declaration string2Declaration=new Declaration(0,"cheese2",priceExtractor,9);
  PredicateEvaluator evaluator=new PredicateEvaluator(){
    public boolean evaluate(    Tuple tuple,    Object object,    FactHandle handle,    Declaration declaration,    Declaration[] declarations){
      int price1=((Integer)tuple.get(declarations[0])).intValue();
      int price2=((Integer)declaration.getValue(object)).intValue();
      return price1 == price2;
    }
  }
;
  PredicateConstraint constraint=new PredicateConstraint(evaluator,string2Declaration,new Declaration[]{string1Declaration});
  this.node=new NotNode(15,new MockTupleSource(5),new MockObjectSource(8),3,new BetaNodeBinder(constraint));
  this.sink=new MockTupleSink();
  this.node.addTupleSink(this.sink);
  this.memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
}
