{
  try {
    final Cheese cheddar=new Cheese("cheddar",10);
    final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.assertObject(cheddar);
    final ReteTuple tuple1=new ReteTuple(f0);
    this.node.assertTuple(tuple1,this.context,this.workingMemory);
    final Cheese brie=new Cheese("brie",10);
    final DefaultFactHandle f1=(DefaultFactHandle)this.workingMemory.assertObject(brie);
    assertEquals(0,this.memory.getRightObjectMemory().size());
    this.node.assertObject(f1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getRightObjectMemory().size());
    this.node.modifyObject(f1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getRightObjectMemory().size());
    this.node.retractObject(f1,this.context,this.workingMemory);
    assertEquals(0,this.memory.getRightObjectMemory().size());
    assertEquals(1,this.memory.getLeftTupleMemory().size());
    this.node.modifyTuple(tuple1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getLeftTupleMemory().size());
    this.node.retractTuple(tuple1,this.context,this.workingMemory);
    assertEquals(0,this.memory.getLeftTupleMemory().size());
  }
 catch (  final Exception e) {
    Assert.fail("No exception should be raised in this procedure, but got: " + e.toString());
  }
}
