{
  FactHandleImpl f0=new FactHandleImpl(0);
  workingMemory.putObject(f0,"string2");
  ReteTuple tuple1=new ReteTuple(9,f0,workingMemory);
  node.assertTuple(tuple1,context,workingMemory);
  assertLength(1,sink.getAsserted());
  FactHandleImpl f1=new FactHandleImpl(1);
  String string1="string1";
  workingMemory.putObject(f1,string1);
  node.assertObject(string1,f1,context,workingMemory);
  assertLength(1,sink.getAsserted());
  FactHandleImpl f2=new FactHandleImpl(2);
  workingMemory.putObject(f2,"string2");
  ReteTuple tuple2=new ReteTuple(9,f2,workingMemory);
  node.assertTuple(tuple2,context,workingMemory);
  assertLength(1,sink.getAsserted());
  assertEquals(2,memory.leftMemorySize());
  assertEquals(1,memory.rightMemorySize());
  FactHandleImpl f3=new FactHandleImpl(3);
  workingMemory.putObject(f3,"string3");
  ReteTuple tuple3=new ReteTuple(9,f3,workingMemory);
  node.assertTuple(tuple3,context,workingMemory);
  assertLength(2,sink.getAsserted());
  FactHandleImpl f4=new FactHandleImpl(4);
  workingMemory.putObject(f4,"string4");
  ReteTuple tuple4=new ReteTuple(9,f4,workingMemory);
  node.assertTuple(tuple4,context,workingMemory);
  assertLength(3,sink.getAsserted());
  FactHandleImpl f5=new FactHandleImpl(5);
  String string5="string1";
  workingMemory.putObject(f5,string5);
  node.assertObject(string5,f5,context,workingMemory);
  assertLength(5,sink.getAsserted());
  FactHandleImpl f6=new FactHandleImpl(6);
  String string6="string6";
  workingMemory.putObject(f6,string6);
  node.assertObject(string6,f6,context,workingMemory);
  assertLength(7,sink.getAsserted());
  assertEquals(4,memory.leftMemorySize());
  assertEquals(3,memory.rightMemorySize());
}
