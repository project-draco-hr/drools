{
  when(constraint.isAllowedCachedLeft(any(ContextEntry.class),any(InternalFactHandle.class))).thenReturn(true);
  when(constraint.isAllowedCachedRight(any(LeftTupleImpl.class),any(ContextEntry.class))).thenReturn(true);
  try {
    final Cheese cheddar=new Cheese("cheddar",10);
    final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.insert(cheddar);
    final LeftTupleImpl tuple1=new LeftTupleImpl(f0,this.node,true);
    this.node.assertLeftTuple(tuple1,this.context,this.workingMemory);
    final Cheese brie=new Cheese("brie",10);
    final DefaultFactHandle f1=(DefaultFactHandle)this.workingMemory.insert(brie);
    assertEquals(0,this.memory.getRightTupleMemory().size());
    this.node.assertObject(f1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getRightTupleMemory().size());
    this.node.retractRightTuple(f1.getFirstRightTuple(),this.context,this.workingMemory);
    this.node.assertObject(f1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getRightTupleMemory().size());
    this.node.retractRightTuple(f1.getFirstRightTuple(),this.context,this.workingMemory);
    assertEquals(0,this.memory.getRightTupleMemory().size());
    assertEquals(1,this.memory.getLeftTupleMemory().size());
    this.node.retractLeftTuple(tuple1,this.context,this.workingMemory);
    this.node.assertLeftTuple(tuple1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getLeftTupleMemory().size());
    this.node.retractLeftTuple(tuple1,this.context,this.workingMemory);
    assertEquals(0,this.memory.getLeftTupleMemory().size());
  }
 catch (  final Exception e) {
    fail("No exception should be raised in this procedure, but got: " + e.toString());
  }
}
