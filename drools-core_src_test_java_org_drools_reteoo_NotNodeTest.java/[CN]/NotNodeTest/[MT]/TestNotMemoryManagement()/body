{
  mockery.checking(new Expectations(){
{
      allowing(constraint).isAllowedCachedLeft(with(any(ContextEntry.class)),with(any(InternalFactHandle.class)));
      will(returnValue(true));
      allowing(constraint).isAllowedCachedRight(with(any(LeftTuple.class)),with(any(ContextEntry.class)));
      will(returnValue(true));
    }
  }
);
  try {
    final Cheese cheddar=new Cheese("cheddar",10);
    final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.insert(cheddar);
    final LeftTuple tuple1=new LeftTuple(f0,this.node,true);
    this.node.assertLeftTuple(tuple1,this.context,this.workingMemory);
    final Cheese brie=new Cheese("brie",10);
    final DefaultFactHandle f1=(DefaultFactHandle)this.workingMemory.insert(brie);
    assertEquals(0,this.memory.getRightTupleMemory().size());
    this.node.assertObject(f1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getRightTupleMemory().size());
    this.node.retractRightTuple(f1.firstRightTuple,this.context,this.workingMemory);
    this.node.assertObject(f1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getRightTupleMemory().size());
    this.node.retractRightTuple(f1.firstRightTuple,this.context,this.workingMemory);
    assertEquals(0,this.memory.getRightTupleMemory().size());
    assertEquals(1,this.memory.getLeftTupleMemory().size());
    this.node.retractLeftTuple(tuple1,this.context,this.workingMemory);
    this.node.assertLeftTuple(tuple1,this.context,this.workingMemory);
    assertEquals(1,this.memory.getLeftTupleMemory().size());
    this.node.retractLeftTuple(tuple1,this.context,this.workingMemory);
    assertEquals(0,this.memory.getLeftTupleMemory().size());
  }
 catch (  final Exception e) {
    Assert.fail("No exception should be raised in this procedure, but got: " + e.toString());
  }
}
