{
  mockery.checking(new Expectations(){
{
      allowing(constraint).isAllowedCachedLeft(with(any(ContextEntry.class)),with(any(InternalFactHandle.class)));
      will(returnValue(true));
      allowing(constraint).isAllowedCachedRight(with(any(LeftTuple.class)),with(any(ContextEntry.class)));
      will(returnValue(true));
    }
  }
);
  final BetaConstraints nullConstraints=EmptyBetaConstraints.getInstance();
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  BuildContext buildContext=new BuildContext(ruleBase,ruleBase.getReteooBuilder().getIdGenerator());
  final NotNode notNode=new NotNode(1,this.tupleSource,this.objectSource,nullConstraints,Behavior.EMPTY_BEHAVIOR_LIST,buildContext);
  final BetaNodeFieldConstraint[] constraints=notNode.getConstraints();
  assertEquals(0,constraints.length);
}
