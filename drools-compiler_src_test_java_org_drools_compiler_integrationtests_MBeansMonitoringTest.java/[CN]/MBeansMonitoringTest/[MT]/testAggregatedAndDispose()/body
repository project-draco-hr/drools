{
  String drl="package org.drools.compiler.integrationtests\n" + "rule ND\n" + "when\n"+ "    String() \n"+ "    not ( Double() ) \n"+ "then\n"+ "    // do nothing. \n"+ "end\n"+ "rule ND2\n"+ "salience 1\n"+ "when\n"+ "    $s : String() \n"+ "    not ( Double() ) \n"+ "then\n"+ "    try { Thread.sleep(10); } catch (Exception e) { }\n"+ "    insert( new Double(0) );\n"+ "    retract( $s );\n"+ "end\n";
  KieServices ks=KieServices.Factory.get();
  KieModuleModel kproj=ks.newKieModuleModel();
  KieBaseModel kieBaseModel1=kproj.newKieBaseModel(KBASE1).setDefault(true).setEventProcessingMode(EventProcessingOption.STREAM);
  KieSessionModel ksessionModel1=kieBaseModel1.newKieSessionModel(KSESSION1).setDefault(true).setType(KieSessionModel.KieSessionType.STATEFUL).setClockType(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
  KieBaseModel kieBaseModel2=kproj.newKieBaseModel(KBASE2).setDefault(false);
  KieSessionModel ksessionModel2=kieBaseModel2.newKieSessionModel(KSESSION2).setDefault(true).setType(KieSessionModel.KieSessionType.STATELESS);
  ReleaseId releaseId1=ks.newReleaseId("org.kie.test","mbeans","1.0.0");
  createKJar(ks,kproj,releaseId1,null,drl);
  String containerId="myContainerId";
  KieContainer kc=ks.newKieContainer(containerId,releaseId1);
  KieBase kiebase=kc.getKieBase(KBASE1);
  KieSessionConfiguration sessionConf=ks.newKieSessionConfiguration();
  sessionConf.setOption(ForceEagerActivationOption.YES);
  KieSession ksession=kc.newKieSession(KSESSION1,sessionConf);
  MBeanServer mbserver=ManagementFactory.getPlatformMBeanServer();
  KieSessionMonitoringMBean aggrMonitor=JMX.newMXBeanProxy(mbserver,DroolsManagementAgent.createObjectNameBy(containerId,KBASE1,KieSessionType.STATEFUL,KSESSION1),KieSessionMonitoringMBean.class);
  long tft=0;
  print(aggrMonitor);
  checkAgendaTotals(aggrMonitor,0,0,0);
  checkTotalFactCount(aggrMonitor,0);
  tft=checkTotalFiringTimeGEQ(aggrMonitor,tft);
  checkTotalSessions(aggrMonitor,1);
  ksession.insert("Ciao");
  ksession.fireAllRules();
  print(aggrMonitor);
  checkAgendaTotals(aggrMonitor,2,1,1);
  checkTotalFactCount(aggrMonitor,1);
  tft=checkTotalFiringTimeGEQ(aggrMonitor,tft + 1);
  checkTotalSessions(aggrMonitor,1);
  ksession.fireAllRules();
  print(aggrMonitor);
  checkAgendaTotals(aggrMonitor,2,1,1);
  checkTotalFactCount(aggrMonitor,1);
  tft=checkTotalFiringTimeGEQ(aggrMonitor,tft);
  checkTotalSessions(aggrMonitor,1);
  LOG.debug("---");
  KieSession ksession2=kc.newKieSession(KSESSION1,sessionConf);
  ksession2.insert("Ciao");
  ksession2.fireAllRules();
  print(aggrMonitor);
  checkAgendaTotals(aggrMonitor,4,2,2);
  checkTotalFactCount(aggrMonitor,2);
  tft=checkTotalFiringTimeGEQ(aggrMonitor,tft + 1);
  checkTotalSessions(aggrMonitor,2);
  ksession2.dispose();
  checkTotalSessions(aggrMonitor,1);
  checkTotalFactCount(aggrMonitor,1);
  ksession.dispose();
  checkTotalSessions(aggrMonitor,0);
  checkTotalFactCount(aggrMonitor,0);
  LOG.debug("--- NOW for the STATELESS ---");
  tft=0;
  StatelessKieSession stateless=kc.newStatelessKieSession(KSESSION2,sessionConf);
  StatelessKieSessionMonitoringMBean aggrMonitor2=JMX.newMXBeanProxy(mbserver,DroolsManagementAgent.createObjectNameBy(containerId,KBASE2,KieSessionType.STATELESS,KSESSION2),StatelessKieSessionMonitoringMBean.class);
  print(aggrMonitor2);
  checkAgendaTotals(aggrMonitor2,0,0,0);
  checkRuleRuntimeTotals(aggrMonitor2,0,0);
  tft=checkTotalFiringTimeGEQ(aggrMonitor2,tft);
  checkTotalSessions(aggrMonitor2,0);
  stateless.execute("Ciao");
  print(aggrMonitor2);
  checkAgendaTotals(aggrMonitor2,2,1,1);
  checkRuleRuntimeTotals(aggrMonitor2,2,1);
  tft=checkTotalFiringTimeGEQ(aggrMonitor2,tft + 1);
  checkTotalSessions(aggrMonitor2,1);
  stateless.execute("Ciao");
  print(aggrMonitor2);
  checkAgendaTotals(aggrMonitor2,4,2,2);
  checkRuleRuntimeTotals(aggrMonitor2,4,2);
  tft=checkTotalFiringTimeGEQ(aggrMonitor2,tft + 1);
  checkTotalSessions(aggrMonitor2,2);
  StatelessKieSession stateless2=kc.newStatelessKieSession(KSESSION2,sessionConf);
  LOG.debug(stateless + " " + stateless2);
  checkTotalSessions(aggrMonitor2,2);
  stateless2.execute("Ciao");
  print(aggrMonitor2);
  checkAgendaTotals(aggrMonitor2,6,3,3);
  checkRuleRuntimeTotals(aggrMonitor2,6,3);
  tft=checkTotalFiringTimeGEQ(aggrMonitor2,tft + 1);
  checkTotalSessions(aggrMonitor2,3);
  KieContainer kc2=ks.newKieContainer("kc2",releaseId1);
  assertEquals(5,mbserver.queryNames(new ObjectName("org.kie:kcontainerId=" + ObjectName.quote(containerId) + ",*"),null).size());
  ((InternalKieContainer)kc).dispose();
  assertEquals(0,mbserver.queryNames(new ObjectName("org.kie:kcontainerId=" + ObjectName.quote(containerId) + ",*"),null).size());
  assertEquals(1,mbserver.queryNames(new ObjectName("org.kie:kcontainerId=" + ObjectName.quote("kc2") + ",*"),null).size());
}
