{
  PackageBuilder builder=new PackageBuilder();
  Reader source=new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<process xmlns=\"http://drools.org/drools-5.0/process\"\n" + "         xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\"\n"+ "         xs:schemaLocation=\"http://drools.org/drools-5.0/process drools-processes-5.0.xsd\"\n"+ "         type=\"RuleFlow\" name=\"flow\" id=\"org.drools.timer\" package-name=\"org.drools\" version=\"1\" >\n"+ "\n"+ "  <header>\n"+ "    <globals>\n"+ "      <global identifier=\"myList\" type=\"java.util.List\" />\n"+ "    </globals>\n"+ "  </header>\n"+ "\n"+ "  <nodes>\n"+ "    <start id=\"1\" name=\"Start\" />\n"+ "    <milestone id=\"2\" name=\"Wait\" >\n"+ "      <timers>\n"+ "        <timer id=\"1\" delay=\"600\" >\n"+ "          <action type=\"expression\" dialect=\"java\" >myList.add(\"Executing timer1\");</action>\n"+ "        </timer>\n"+ "        <timer id=\"2\" delay=\"200\" >\n"+ "          <action type=\"expression\" dialect=\"java\" >myList.add(\"Executing timer2\");</action>\n"+ "        </timer>\n"+ "      </timers>\n"+ "      <constraint type=\"rule\" dialect=\"mvel\" >eval(false)</constraint>\n"+ "    </milestone>\n"+ "    <end id=\"3\" name=\"End\" />\n"+ "  </nodes>\n"+ "\n"+ "  <connections>\n"+ "    <connection from=\"1\" to=\"2\" />\n"+ "    <connection from=\"2\" to=\"3\" />\n"+ "  </connections>\n"+ "\n"+ "</process>");
  builder.addRuleFlow(source);
  Package pkg=builder.getPackage();
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(pkg);
  StatefulSession session=ruleBase.newStatefulSession();
  List<String> myList=new ArrayList<String>();
  session.setGlobal("myList",myList);
  ProcessInstance processInstance=(ProcessInstance)session.startProcess("org.drools.timer");
  assertEquals(0,myList.size());
  assertEquals(ProcessInstance.STATE_ACTIVE,processInstance.getState());
  assertEquals(2,session.getTimerManager().getTimers().size());
  session=getSerialisedStatefulSession(session);
  myList=(List<String>)session.getGlobal("myList");
  assertEquals(2,session.getTimerManager().getTimers().size());
  try {
    Thread.sleep(300);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(1,myList.size());
  assertEquals("Executing timer2",myList.get(0));
  session=getSerialisedStatefulSession(session);
  myList=(List<String>)session.getGlobal("myList");
  try {
    Thread.sleep(400);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(2,myList.size());
}
