{
  IntStream input=_input;
  int _s=s;
switch (s) {
case 0:
    int LA64_36=input.LA(1);
  int index64_36=input.index();
input.rewind();
s=-1;
if (((LA64_36 >= '\u0000' && LA64_36 <= '\uFFFF')) && ((state.tokenStartCharPositionInLine == 0))) {
s=40;
}
 else s=83;
input.seek(index64_36);
if (s >= 0) return s;
break;
case 1:
int LA64_2=input.LA(1);
int index64_2=input.index();
input.rewind();
s=-1;
if ((LA64_2 == ' ')) {
s=1;
}
 else if ((LA64_2 == '\t')) {
s=2;
}
 else if ((LA64_2 == '#') && ((state.tokenStartCharPositionInLine == 0))) {
s=40;
}
 else s=3;
input.seek(index64_2);
if (s >= 0) return s;
break;
case 2:
int LA64_1=input.LA(1);
int index64_1=input.index();
input.rewind();
s=-1;
if ((LA64_1 == ' ')) {
s=1;
}
 else if ((LA64_1 == '\t')) {
s=2;
}
 else if ((LA64_1 == '#') && ((state.tokenStartCharPositionInLine == 0))) {
s=40;
}
 else s=3;
input.seek(index64_1);
if (s >= 0) return s;
break;
case 3:
int LA64_8=input.LA(1);
s=-1;
if (((LA64_8 >= '\u0000' && LA64_8 <= '\uFFFF'))) {
s=7;
}
 else s=39;
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),64,_s,input);
error(nvae);
throw nvae;
}
