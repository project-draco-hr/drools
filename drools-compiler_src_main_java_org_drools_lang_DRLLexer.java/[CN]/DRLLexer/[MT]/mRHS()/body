{
  try {
    ruleNestingLevel++;
    int _type=RHS;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      match("then");
      if (failed)       return;
      loop1:       do {
        int alt1=2;
        alt1=dfa1.predict(input);
switch (alt1) {
case 1:
{
            matchAny();
            if (failed)             return;
          }
        break;
default :
      break loop1;
  }
}
 while (true);
if (input.LA(1) == '\n' || input.LA(1) == '\r') {
  input.consume();
  failed=false;
}
 else {
  if (backtracking > 0) {
    failed=true;
    return;
  }
  MismatchedSetException mse=new MismatchedSetException(null,input);
  recover(mse);
  throw mse;
}
loop2: do {
  int alt2=2;
  int LA2_0=input.LA(1);
  if ((LA2_0 == '\t' || LA2_0 == '\f' || LA2_0 == ' ')) {
    alt2=1;
  }
switch (alt2) {
case 1:
{
      if (input.LA(1) == '\t' || input.LA(1) == '\f' || input.LA(1) == ' ') {
        input.consume();
        failed=false;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return;
        }
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
    }
  break;
default :
break loop2;
}
}
 while (true);
match("end");
if (failed) return;
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
