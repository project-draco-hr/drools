{
  try {
    int _type=C_STYLE_SINGLE_LINE_COMMENT;
    int _channel=DEFAULT_TOKEN_CHANNEL;
{
      match("//");
      if (state.failed)       return;
      loop59:       do {
        int alt59=2;
        int LA59_0=input.LA(1);
        if (((LA59_0 >= '\u0000' && LA59_0 <= '\t') || (LA59_0 >= '\u000B' && LA59_0 <= '\f') || (LA59_0 >= '\u000E' && LA59_0 <= '\uFFFF'))) {
          alt59=1;
        }
switch (alt59) {
case 1:
{
            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\t') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\uFFFF')) {
              input.consume();
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        break;
default :
      break loop59;
  }
}
 while (true);
int alt60=2;
int LA60_0=input.LA(1);
if ((LA60_0 == '\n' || LA60_0 == '\r')) {
  alt60=2;
}
 else {
  alt60=1;
}
switch (alt60) {
case 1:
{
    match(EOF);
    if (state.failed)     return;
  }
break;
case 2:
{
mEOL();
if (state.failed) return;
}
break;
}
if (state.backtracking == 0) {
_channel=HIDDEN;
}
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
}
