{
  try {
    int _type=ID;
    int alt16=2;
    int LA16_0=input.LA(1);
    if ((LA16_0 == '$' || (LA16_0 >= 'A' && LA16_0 <= 'Z') || LA16_0 == '_' || (LA16_0 >= 'a' && LA16_0 <= 'z') || (LA16_0 >= '\u00C0' && LA16_0 <= '\u00FF'))) {
      alt16=1;
    }
 else     if ((LA16_0 == '%')) {
      alt16=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("1799:1: ID : ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' | '\\u00c0' .. '\\u00ff' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '\\u00c0' .. '\\u00ff' )* | '%' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' | '\\u00c0' .. '\\u00ff' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '\\u00c0' .. '\\u00ff' )+ '%' );",16,0,input);
      throw nvae;
    }
switch (alt16) {
case 1:
{
        if (input.LA(1) == '$' || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z') || (input.LA(1) >= '\u00C0' && input.LA(1) <= '\u00FF')) {
          input.consume();
          failed=false;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return;
          }
          MismatchedSetException mse=new MismatchedSetException(null,input);
          recover(mse);
          throw mse;
        }
        loop14:         do {
          int alt14=2;
          int LA14_0=input.LA(1);
          if (((LA14_0 >= '0' && LA14_0 <= '9') || (LA14_0 >= 'A' && LA14_0 <= 'Z') || LA14_0 == '_' || (LA14_0 >= 'a' && LA14_0 <= 'z') || (LA14_0 >= '\u00C0' && LA14_0 <= '\u00FF'))) {
            alt14=1;
          }
switch (alt14) {
case 1:
{
              if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z') || (input.LA(1) >= '\u00C0' && input.LA(1) <= '\u00FF')) {
                input.consume();
                failed=false;
              }
 else {
                if (backtracking > 0) {
                  failed=true;
                  return;
                }
                MismatchedSetException mse=new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
              }
            }
          break;
default :
        break loop14;
    }
  }
 while (true);
}
break;
case 2:
{
match('%');
if (failed) return;
if (input.LA(1) == '$' || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z') || (input.LA(1) >= '\u00C0' && input.LA(1) <= '\u00FF')) {
input.consume();
failed=false;
}
 else {
if (backtracking > 0) {
  failed=true;
  return;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
int cnt15=0;
loop15: do {
int alt15=2;
int LA15_0=input.LA(1);
if (((LA15_0 >= '0' && LA15_0 <= '9') || (LA15_0 >= 'A' && LA15_0 <= 'Z') || LA15_0 == '_' || (LA15_0 >= 'a' && LA15_0 <= 'z') || (LA15_0 >= '\u00C0' && LA15_0 <= '\u00FF'))) {
  alt15=1;
}
switch (alt15) {
case 1:
{
    if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z') || (input.LA(1) >= '\u00C0' && input.LA(1) <= '\u00FF')) {
      input.consume();
      failed=false;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return;
      }
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
break;
default :
if (cnt15 >= 1) break loop15;
if (backtracking > 0) {
failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(15,input);
throw eee;
}
cnt15++;
}
 while (true);
match('%');
if (failed) return;
if (backtracking == 0) {
text=getText().substring(1,getText().length() - 1);
}
}
break;
}
this.type=_type;
}
  finally {
}
}
