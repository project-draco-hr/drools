{
  try {
    this.ruleNestingLevel++;
    final int _type=SH_STYLE_SINGLE_LINE_COMMENT;
    final int _start=getCharIndex();
    final int _line=getLine();
    final int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      match('#');
      if (this.failed) {
        return;
      }
      loop15:       do {
        int alt15=2;
        final int LA15_0=this.input.LA(1);
        if ((LA15_0 == '\r')) {
          alt15=2;
        }
 else         if ((LA15_0 == '\n')) {
          alt15=2;
        }
 else         if (((LA15_0 >= '\u0000' && LA15_0 <= '\t') || (LA15_0 >= '\u000B' && LA15_0 <= '\f') || (LA15_0 >= '\u000E' && LA15_0 <= '\uFFFE'))) {
          alt15=1;
        }
switch (alt15) {
case 1:
{
            matchAny();
            if (this.failed) {
              return;
            }
          }
        break;
default :
      break loop15;
  }
}
 while (true);
mEOL();
if (this.failed) {
  return;
}
if (this.backtracking == 0) {
  _channel=HIDDEN;
}
}
if (this.backtracking == 0) {
if (this.token == null && this.ruleNestingLevel == 1) {
  emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
this.ruleNestingLevel--;
}
}
