{
  try {
    int _type=SH_STYLE_SINGLE_LINE_COMMENT;
    int _channel=DEFAULT_TOKEN_CHANNEL;
{
      if (!((state.tokenStartCharPositionInLine == 0))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        throw new FailedPredicateException(input,"SH_STYLE_SINGLE_LINE_COMMENT","$pos == 0");
      }
      loop57:       do {
        int alt57=2;
        int LA57_0=input.LA(1);
        if ((LA57_0 == '\t' || LA57_0 == ' ')) {
          alt57=1;
        }
switch (alt57) {
case 1:
{
            mSPACES();
            if (state.failed)             return;
          }
        break;
default :
      break loop57;
  }
}
 while (true);
match('#');
if (state.failed) return;
loop58: do {
  int alt58=2;
  int LA58_0=input.LA(1);
  if (((LA58_0 >= '\u0000' && LA58_0 <= '\t') || (LA58_0 >= '\u000B' && LA58_0 <= '\f') || (LA58_0 >= '\u000E' && LA58_0 <= '\uFFFF'))) {
    alt58=1;
  }
switch (alt58) {
case 1:
{
      if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\t') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\uFFFF')) {
        input.consume();
        state.failed=false;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
    }
  break;
default :
break loop58;
}
}
 while (true);
mEOL();
if (state.failed) return;
if (state.backtracking == 0) {
_channel=HIDDEN;
setText("//" + getText().substring(1));
}
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
}
