{
  int alt18=69;
  alt18=dfa18.predict(input);
switch (alt18) {
case 1:
{
      mT29();
      if (failed)       return;
    }
  break;
case 2:
{
  mT30();
  if (failed)   return;
}
break;
case 3:
{
mT31();
if (failed) return;
}
break;
case 4:
{
mT32();
if (failed) return;
}
break;
case 5:
{
mT33();
if (failed) return;
}
break;
case 6:
{
mT34();
if (failed) return;
}
break;
case 7:
{
mT35();
if (failed) return;
}
break;
case 8:
{
mT36();
if (failed) return;
}
break;
case 9:
{
mT37();
if (failed) return;
}
break;
case 10:
{
mT38();
if (failed) return;
}
break;
case 11:
{
mT39();
if (failed) return;
}
break;
case 12:
{
mT40();
if (failed) return;
}
break;
case 13:
{
mT41();
if (failed) return;
}
break;
case 14:
{
mT42();
if (failed) return;
}
break;
case 15:
{
mT43();
if (failed) return;
}
break;
case 16:
{
mT44();
if (failed) return;
}
break;
case 17:
{
mT45();
if (failed) return;
}
break;
case 18:
{
mT46();
if (failed) return;
}
break;
case 19:
{
mT47();
if (failed) return;
}
break;
case 20:
{
mT48();
if (failed) return;
}
break;
case 21:
{
mT49();
if (failed) return;
}
break;
case 22:
{
mT50();
if (failed) return;
}
break;
case 23:
{
mT51();
if (failed) return;
}
break;
case 24:
{
mT52();
if (failed) return;
}
break;
case 25:
{
mT53();
if (failed) return;
}
break;
case 26:
{
mT54();
if (failed) return;
}
break;
case 27:
{
mT55();
if (failed) return;
}
break;
case 28:
{
mT56();
if (failed) return;
}
break;
case 29:
{
mT57();
if (failed) return;
}
break;
case 30:
{
mT58();
if (failed) return;
}
break;
case 31:
{
mT59();
if (failed) return;
}
break;
case 32:
{
mT60();
if (failed) return;
}
break;
case 33:
{
mT61();
if (failed) return;
}
break;
case 34:
{
mT62();
if (failed) return;
}
break;
case 35:
{
mT63();
if (failed) return;
}
break;
case 36:
{
mT64();
if (failed) return;
}
break;
case 37:
{
mT65();
if (failed) return;
}
break;
case 38:
{
mT66();
if (failed) return;
}
break;
case 39:
{
mT67();
if (failed) return;
}
break;
case 40:
{
mT68();
if (failed) return;
}
break;
case 41:
{
mT69();
if (failed) return;
}
break;
case 42:
{
mT70();
if (failed) return;
}
break;
case 43:
{
mT71();
if (failed) return;
}
break;
case 44:
{
mT72();
if (failed) return;
}
break;
case 45:
{
mT73();
if (failed) return;
}
break;
case 46:
{
mT74();
if (failed) return;
}
break;
case 47:
{
mT75();
if (failed) return;
}
break;
case 48:
{
mT76();
if (failed) return;
}
break;
case 49:
{
mT77();
if (failed) return;
}
break;
case 50:
{
mWS();
if (failed) return;
}
break;
case 51:
{
mINT();
if (failed) return;
}
break;
case 52:
{
mFLOAT();
if (failed) return;
}
break;
case 53:
{
mSTRING();
if (failed) return;
}
break;
case 54:
{
mBOOL();
if (failed) return;
}
break;
case 55:
{
mRULE();
if (failed) return;
}
break;
case 56:
{
mWHEN();
if (failed) return;
}
break;
case 57:
{
mTHEN();
if (failed) return;
}
break;
case 58:
{
mEND();
if (failed) return;
}
break;
case 59:
{
mID();
if (failed) return;
}
break;
case 60:
{
mSH_STYLE_SINGLE_LINE_COMMENT();
if (failed) return;
}
break;
case 61:
{
mC_STYLE_SINGLE_LINE_COMMENT();
if (failed) return;
}
break;
case 62:
{
mLEFT_PAREN();
if (failed) return;
}
break;
case 63:
{
mRIGHT_PAREN();
if (failed) return;
}
break;
case 64:
{
mLEFT_SQUARE();
if (failed) return;
}
break;
case 65:
{
mRIGHT_SQUARE();
if (failed) return;
}
break;
case 66:
{
mLEFT_CURLY();
if (failed) return;
}
break;
case 67:
{
mRIGHT_CURLY();
if (failed) return;
}
break;
case 68:
{
mMULTI_LINE_COMMENT();
if (failed) return;
}
break;
case 69:
{
mMISC();
if (failed) return;
}
break;
}
}
