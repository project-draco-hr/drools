{
  int alt63=56;
  alt63=dfa63.predict(input);
switch (alt63) {
case 1:
{
      mWS();
      if (state.failed)       return;
    }
  break;
case 2:
{
  mFLOAT();
  if (state.failed)   return;
}
break;
case 3:
{
mHEX();
if (state.failed) return;
}
break;
case 4:
{
mDECIMAL();
if (state.failed) return;
}
break;
case 5:
{
mSTRING();
if (state.failed) return;
}
break;
case 6:
{
mTIME_INTERVAL();
if (state.failed) return;
}
break;
case 7:
{
mBOOL();
if (state.failed) return;
}
break;
case 8:
{
mNULL();
if (state.failed) return;
}
break;
case 9:
{
mAT();
if (state.failed) return;
}
break;
case 10:
{
mPLUS_ASSIGN();
if (state.failed) return;
}
break;
case 11:
{
mMINUS_ASSIGN();
if (state.failed) return;
}
break;
case 12:
{
mMULT_ASSIGN();
if (state.failed) return;
}
break;
case 13:
{
mDIV_ASSIGN();
if (state.failed) return;
}
break;
case 14:
{
mAND_ASSIGN();
if (state.failed) return;
}
break;
case 15:
{
mOR_ASSIGN();
if (state.failed) return;
}
break;
case 16:
{
mXOR_ASSIGN();
if (state.failed) return;
}
break;
case 17:
{
mMOD_ASSIGN();
if (state.failed) return;
}
break;
case 18:
{
mUNIFY();
if (state.failed) return;
}
break;
case 19:
{
mDECR();
if (state.failed) return;
}
break;
case 20:
{
mINCR();
if (state.failed) return;
}
break;
case 21:
{
mARROW();
if (state.failed) return;
}
break;
case 22:
{
mSEMICOLON();
if (state.failed) return;
}
break;
case 23:
{
mCOLON();
if (state.failed) return;
}
break;
case 24:
{
mEQUALS();
if (state.failed) return;
}
break;
case 25:
{
mNOT_EQUALS();
if (state.failed) return;
}
break;
case 26:
{
mGREATER_EQUALS();
if (state.failed) return;
}
break;
case 27:
{
mLESS_EQUALS();
if (state.failed) return;
}
break;
case 28:
{
mGREATER();
if (state.failed) return;
}
break;
case 29:
{
mLESS();
if (state.failed) return;
}
break;
case 30:
{
mEQUALS_ASSIGN();
if (state.failed) return;
}
break;
case 31:
{
mLEFT_PAREN();
if (state.failed) return;
}
break;
case 32:
{
mRIGHT_PAREN();
if (state.failed) return;
}
break;
case 33:
{
mLEFT_SQUARE();
if (state.failed) return;
}
break;
case 34:
{
mRIGHT_SQUARE();
if (state.failed) return;
}
break;
case 35:
{
mLEFT_CURLY();
if (state.failed) return;
}
break;
case 36:
{
mRIGHT_CURLY();
if (state.failed) return;
}
break;
case 37:
{
mCOMMA();
if (state.failed) return;
}
break;
case 38:
{
mDOT();
if (state.failed) return;
}
break;
case 39:
{
mDOUBLE_AMPER();
if (state.failed) return;
}
break;
case 40:
{
mDOUBLE_PIPE();
if (state.failed) return;
}
break;
case 41:
{
mQUESTION();
if (state.failed) return;
}
break;
case 42:
{
mNEGATION();
if (state.failed) return;
}
break;
case 43:
{
mTILDE();
if (state.failed) return;
}
break;
case 44:
{
mPIPE();
if (state.failed) return;
}
break;
case 45:
{
mAMPER();
if (state.failed) return;
}
break;
case 46:
{
mXOR();
if (state.failed) return;
}
break;
case 47:
{
mMOD();
if (state.failed) return;
}
break;
case 48:
{
mSTAR();
if (state.failed) return;
}
break;
case 49:
{
mMINUS();
if (state.failed) return;
}
break;
case 50:
{
mPLUS();
if (state.failed) return;
}
break;
case 51:
{
mSH_STYLE_SINGLE_LINE_COMMENT();
if (state.failed) return;
}
break;
case 52:
{
mC_STYLE_SINGLE_LINE_COMMENT();
if (state.failed) return;
}
break;
case 53:
{
mMULTI_LINE_COMMENT();
if (state.failed) return;
}
break;
case 54:
{
mID();
if (state.failed) return;
}
break;
case 55:
{
mDIV();
if (state.failed) return;
}
break;
case 56:
{
mMISC();
if (state.failed) return;
}
break;
}
}
