{
  int alt22=39;
  alt22=dfa22.predict(input);
switch (alt22) {
case 1:
{
      mWS();
      if (state.failed)       return;
    }
  break;
case 2:
{
  mFLOAT();
  if (state.failed)   return;
}
break;
case 3:
{
mINT();
if (state.failed) return;
}
break;
case 4:
{
mSTRING();
if (state.failed) return;
}
break;
case 5:
{
mBOOL();
if (state.failed) return;
}
break;
case 6:
{
mACCUMULATE();
if (state.failed) return;
}
break;
case 7:
{
mCOLLECT();
if (state.failed) return;
}
break;
case 8:
{
mFROM();
if (state.failed) return;
}
break;
case 9:
{
mNULL();
if (state.failed) return;
}
break;
case 10:
{
mOVER();
if (state.failed) return;
}
break;
case 11:
{
mTHEN();
if (state.failed) return;
}
break;
case 12:
{
mWHEN();
if (state.failed) return;
}
break;
case 13:
{
mAT();
if (state.failed) return;
}
break;
case 14:
{
mEQUALS();
if (state.failed) return;
}
break;
case 15:
{
mSEMICOLON();
if (state.failed) return;
}
break;
case 16:
{
mDOT_STAR();
if (state.failed) return;
}
break;
case 17:
{
mCOLON();
if (state.failed) return;
}
break;
case 18:
{
mEQUAL();
if (state.failed) return;
}
break;
case 19:
{
mNOT_EQUAL();
if (state.failed) return;
}
break;
case 20:
{
mGREATER();
if (state.failed) return;
}
break;
case 21:
{
mGREATER_EQUAL();
if (state.failed) return;
}
break;
case 22:
{
mLESS();
if (state.failed) return;
}
break;
case 23:
{
mLESS_EQUAL();
if (state.failed) return;
}
break;
case 24:
{
mARROW();
if (state.failed) return;
}
break;
case 25:
{
mLEFT_PAREN();
if (state.failed) return;
}
break;
case 26:
{
mRIGHT_PAREN();
if (state.failed) return;
}
break;
case 27:
{
mLEFT_SQUARE();
if (state.failed) return;
}
break;
case 28:
{
mRIGHT_SQUARE();
if (state.failed) return;
}
break;
case 29:
{
mLEFT_CURLY();
if (state.failed) return;
}
break;
case 30:
{
mRIGHT_CURLY();
if (state.failed) return;
}
break;
case 31:
{
mCOMMA();
if (state.failed) return;
}
break;
case 32:
{
mDOT();
if (state.failed) return;
}
break;
case 33:
{
mDOUBLE_AMPER();
if (state.failed) return;
}
break;
case 34:
{
mDOUBLE_PIPE();
if (state.failed) return;
}
break;
case 35:
{
mSH_STYLE_SINGLE_LINE_COMMENT();
if (state.failed) return;
}
break;
case 36:
{
mC_STYLE_SINGLE_LINE_COMMENT();
if (state.failed) return;
}
break;
case 37:
{
mMULTI_LINE_COMMENT();
if (state.failed) return;
}
break;
case 38:
{
mID();
if (state.failed) return;
}
break;
case 39:
{
mMISC();
if (state.failed) return;
}
break;
}
}
