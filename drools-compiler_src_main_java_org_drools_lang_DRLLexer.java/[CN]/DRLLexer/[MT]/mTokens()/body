{
  int alt18=81;
  alt18=dfa18.predict(input);
switch (alt18) {
case 1:
{
      mT81();
      if (failed)       return;
    }
  break;
case 2:
{
  mT82();
  if (failed)   return;
}
break;
case 3:
{
mT83();
if (failed) return;
}
break;
case 4:
{
mT84();
if (failed) return;
}
break;
case 5:
{
mT85();
if (failed) return;
}
break;
case 6:
{
mT86();
if (failed) return;
}
break;
case 7:
{
mT87();
if (failed) return;
}
break;
case 8:
{
mT88();
if (failed) return;
}
break;
case 9:
{
mT89();
if (failed) return;
}
break;
case 10:
{
mWS();
if (failed) return;
}
break;
case 11:
{
mINT();
if (failed) return;
}
break;
case 12:
{
mFLOAT();
if (failed) return;
}
break;
case 13:
{
mSTRING();
if (failed) return;
}
break;
case 14:
{
mBOOL();
if (failed) return;
}
break;
case 15:
{
mPACKAGE();
if (failed) return;
}
break;
case 16:
{
mIMPORT();
if (failed) return;
}
break;
case 17:
{
mFUNCTION();
if (failed) return;
}
break;
case 18:
{
mEVENT();
if (failed) return;
}
break;
case 19:
{
mGLOBAL();
if (failed) return;
}
break;
case 20:
{
mDECLARE();
if (failed) return;
}
break;
case 21:
{
mRULE();
if (failed) return;
}
break;
case 22:
{
mQUERY();
if (failed) return;
}
break;
case 23:
{
mTEMPLATE();
if (failed) return;
}
break;
case 24:
{
mATTRIBUTES();
if (failed) return;
}
break;
case 25:
{
mDATE_EFFECTIVE();
if (failed) return;
}
break;
case 26:
{
mDATE_EXPIRES();
if (failed) return;
}
break;
case 27:
{
mENABLED();
if (failed) return;
}
break;
case 28:
{
mSALIENCE();
if (failed) return;
}
break;
case 29:
{
mNO_LOOP();
if (failed) return;
}
break;
case 30:
{
mAUTO_FOCUS();
if (failed) return;
}
break;
case 31:
{
mACTIVATION_GROUP();
if (failed) return;
}
break;
case 32:
{
mAGENDA_GROUP();
if (failed) return;
}
break;
case 33:
{
mDIALECT();
if (failed) return;
}
break;
case 34:
{
mRULEFLOW_GROUP();
if (failed) return;
}
break;
case 35:
{
mDURATION();
if (failed) return;
}
break;
case 36:
{
mLOCK_ON_ACTIVE();
if (failed) return;
}
break;
case 37:
{
mFROM();
if (failed) return;
}
break;
case 38:
{
mACCUMULATE();
if (failed) return;
}
break;
case 39:
{
mINIT();
if (failed) return;
}
break;
case 40:
{
mACTION();
if (failed) return;
}
break;
case 41:
{
mREVERSE();
if (failed) return;
}
break;
case 42:
{
mRESULT();
if (failed) return;
}
break;
case 43:
{
mCOLLECT();
if (failed) return;
}
break;
case 44:
{
mENTRY_POINT();
if (failed) return;
}
break;
case 45:
{
mOR();
if (failed) return;
}
break;
case 46:
{
mAND();
if (failed) return;
}
break;
case 47:
{
mCONTAINS();
if (failed) return;
}
break;
case 48:
{
mEXCLUDES();
if (failed) return;
}
break;
case 49:
{
mMEMBEROF();
if (failed) return;
}
break;
case 50:
{
mMATCHES();
if (failed) return;
}
break;
case 51:
{
mSOUNDSLIKE();
if (failed) return;
}
break;
case 52:
{
mIN();
if (failed) return;
}
break;
case 53:
{
mNULL();
if (failed) return;
}
break;
case 54:
{
mEXISTS();
if (failed) return;
}
break;
case 55:
{
mNOT();
if (failed) return;
}
break;
case 56:
{
mEVAL();
if (failed) return;
}
break;
case 57:
{
mFORALL();
if (failed) return;
}
break;
case 58:
{
mWHEN();
if (failed) return;
}
break;
case 59:
{
mTHEN();
if (failed) return;
}
break;
case 60:
{
mEND();
if (failed) return;
}
break;
case 61:
{
mWITH();
if (failed) return;
}
break;
case 62:
{
mWINDOW();
if (failed) return;
}
break;
case 63:
{
mID();
if (failed) return;
}
break;
case 64:
{
mLEFT_PAREN();
if (failed) return;
}
break;
case 65:
{
mRIGHT_PAREN();
if (failed) return;
}
break;
case 66:
{
mLEFT_SQUARE();
if (failed) return;
}
break;
case 67:
{
mRIGHT_SQUARE();
if (failed) return;
}
break;
case 68:
{
mLEFT_CURLY();
if (failed) return;
}
break;
case 69:
{
mRIGHT_CURLY();
if (failed) return;
}
break;
case 70:
{
mCOMMA();
if (failed) return;
}
break;
case 71:
{
mDOT();
if (failed) return;
}
break;
case 72:
{
mDOUBLE_AMPER();
if (failed) return;
}
break;
case 73:
{
mDOUBLE_PIPE();
if (failed) return;
}
break;
case 74:
{
mTILDE();
if (failed) return;
}
break;
case 75:
{
mAT();
if (failed) return;
}
break;
case 76:
{
mEQUALS();
if (failed) return;
}
break;
case 77:
{
mCOLON();
if (failed) return;
}
break;
case 78:
{
mSH_STYLE_SINGLE_LINE_COMMENT();
if (failed) return;
}
break;
case 79:
{
mC_STYLE_SINGLE_LINE_COMMENT();
if (failed) return;
}
break;
case 80:
{
mMULTI_LINE_COMMENT();
if (failed) return;
}
break;
case 81:
{
mMISC();
if (failed) return;
}
break;
}
}
