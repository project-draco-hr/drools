{
  try {
    ruleNestingLevel++;
    int _type=CURLY_CHUNK;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      match('{');
      if (failed)       return;
      loop17:       do {
        int alt17=3;
        int LA17_0=input.LA(1);
        if ((LA17_0 == '{')) {
          alt17=1;
        }
 else         if (((LA17_0 >= '\u0000' && LA17_0 <= 'z') || LA17_0 == '|' || (LA17_0 >= '~' && LA17_0 <= '\uFFFE'))) {
          alt17=2;
        }
switch (alt17) {
case 1:
{
            mCURLY_CHUNK();
            if (failed)             return;
          }
        break;
case 2:
{
        mNO_CURLY();
        if (failed)         return;
      }
    break;
default :
  break loop17;
}
}
 while (true);
match('}');
if (failed) return;
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
