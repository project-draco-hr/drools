{
  try {
    ruleNestingLevel++;
    int _type=FLOAT;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      int alt7=2;
      int LA7_0=input.LA(1);
      if ((LA7_0 == '-')) {
        alt7=1;
      }
switch (alt7) {
case 1:
{
          match('-');
          if (failed)           return;
        }
      break;
  }
  int cnt8=0;
  loop8:   do {
    int alt8=2;
    int LA8_0=input.LA(1);
    if (((LA8_0 >= '0' && LA8_0 <= '9'))) {
      alt8=1;
    }
switch (alt8) {
case 1:
{
        matchRange('0','9');
        if (failed)         return;
      }
    break;
default :
  if (cnt8 >= 1)   break loop8;
if (backtracking > 0) {
  failed=true;
  return;
}
EarlyExitException eee=new EarlyExitException(8,input);
throw eee;
}
cnt8++;
}
 while (true);
match('.');
if (failed) return;
int cnt9=0;
loop9: do {
int alt9=2;
int LA9_0=input.LA(1);
if (((LA9_0 >= '0' && LA9_0 <= '9'))) {
alt9=1;
}
switch (alt9) {
case 1:
{
matchRange('0','9');
if (failed) return;
}
break;
default :
if (cnt9 >= 1) break loop9;
if (backtracking > 0) {
failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(9,input);
throw eee;
}
cnt9++;
}
 while (true);
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
