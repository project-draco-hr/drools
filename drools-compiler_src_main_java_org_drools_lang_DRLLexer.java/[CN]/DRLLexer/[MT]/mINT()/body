{
  try {
    ruleNestingLevel++;
    int _type=INT;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      int alt5=2;
      int LA5_0=input.LA(1);
      if ((LA5_0 == '-')) {
        alt5=1;
      }
switch (alt5) {
case 1:
{
          match('-');
          if (failed)           return;
        }
      break;
  }
  int cnt6=0;
  loop6:   do {
    int alt6=2;
    int LA6_0=input.LA(1);
    if (((LA6_0 >= '0' && LA6_0 <= '9'))) {
      alt6=1;
    }
switch (alt6) {
case 1:
{
        matchRange('0','9');
        if (failed)         return;
      }
    break;
default :
  if (cnt6 >= 1)   break loop6;
if (backtracking > 0) {
  failed=true;
  return;
}
EarlyExitException eee=new EarlyExitException(6,input);
throw eee;
}
cnt6++;
}
 while (true);
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
