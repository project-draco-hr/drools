{
  try {
    int _type=STRING;
    int alt10=2;
    int LA10_0=input.LA(1);
    if ((LA10_0 == '\"')) {
      alt10=1;
    }
 else     if ((LA10_0 == '\'')) {
      alt10=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("1717:1: STRING : ( ( '\"' ( EscapeSequence | ~ ( '\\\\' | '\"' ) )* '\"' ) | ( '\\'' ( EscapeSequence | ~ ( '\\\\' | '\\'' ) )* '\\'' ) );",10,0,input);
      throw nvae;
    }
switch (alt10) {
case 1:
{
{
          match('\"');
          if (failed)           return;
          loop8:           do {
            int alt8=3;
            int LA8_0=input.LA(1);
            if ((LA8_0 == '\\')) {
              alt8=1;
            }
 else             if (((LA8_0 >= '\u0000' && LA8_0 <= '!') || (LA8_0 >= '#' && LA8_0 <= '[') || (LA8_0 >= ']' && LA8_0 <= '\uFFFE'))) {
              alt8=2;
            }
switch (alt8) {
case 1:
{
                mEscapeSequence();
                if (failed)                 return;
              }
            break;
case 2:
{
            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFE')) {
              input.consume();
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        break;
default :
      break loop8;
  }
}
 while (true);
match('\"');
if (failed) return;
}
}
break;
case 2:
{
{
match('\'');
if (failed) return;
loop9: do {
int alt9=3;
int LA9_0=input.LA(1);
if ((LA9_0 == '\\')) {
alt9=1;
}
 else if (((LA9_0 >= '\u0000' && LA9_0 <= '&') || (LA9_0 >= '(' && LA9_0 <= '[') || (LA9_0 >= ']' && LA9_0 <= '\uFFFE'))) {
alt9=2;
}
switch (alt9) {
case 1:
{
  mEscapeSequence();
  if (failed)   return;
}
break;
case 2:
{
if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFE')) {
input.consume();
failed=false;
}
 else {
if (backtracking > 0) {
  failed=true;
  return;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
default :
break loop9;
}
}
 while (true);
match('\'');
if (failed) return;
}
}
break;
}
this.type=_type;
}
  finally {
}
}
