{
  try {
    this.ruleNestingLevel++;
    final int _type=STRING;
    final int _start=getCharIndex();
    final int _line=getLine();
    final int _charPosition=getCharPositionInLine();
    final int _channel=Token.DEFAULT_CHANNEL;
    int alt10=2;
    final int LA10_0=this.input.LA(1);
    if ((LA10_0 == '\"')) {
      alt10=1;
    }
 else     if ((LA10_0 == '\'')) {
      alt10=2;
    }
 else {
      if (this.backtracking > 0) {
        this.failed=true;
        return;
      }
      final NoViableAltException nvae=new NoViableAltException("1489:1: STRING : ( ( '\"' ( EscapeSequence | ~ ('\\\\'|'\"'))* '\"' ) | ( '\\'' ( EscapeSequence | ~ ('\\\\'|'\\''))* '\\'' ) );",10,0,this.input);
      throw nvae;
    }
switch (alt10) {
case 1:
{
{
          match('\"');
          if (this.failed) {
            return;
          }
          loop8:           do {
            int alt8=3;
            final int LA8_0=this.input.LA(1);
            if ((LA8_0 == '\\')) {
              alt8=1;
            }
 else             if (((LA8_0 >= '\u0000' && LA8_0 <= '!') || (LA8_0 >= '#' && LA8_0 <= '[') || (LA8_0 >= ']' && LA8_0 <= '\uFFFE'))) {
              alt8=2;
            }
switch (alt8) {
case 1:
{
                mEscapeSequence();
                if (this.failed) {
                  return;
                }
              }
            break;
case 2:
{
            if ((this.input.LA(1) >= '\u0000' && this.input.LA(1) <= '!') || (this.input.LA(1) >= '#' && this.input.LA(1) <= '[') || (this.input.LA(1) >= ']' && this.input.LA(1) <= '\uFFFE')) {
              this.input.consume();
              this.failed=false;
            }
 else {
              if (this.backtracking > 0) {
                this.failed=true;
                return;
              }
              final MismatchedSetException mse=new MismatchedSetException(null,this.input);
              recover(mse);
              throw mse;
            }
          }
        break;
default :
      break loop8;
  }
}
 while (true);
match('\"');
if (this.failed) {
  return;
}
}
}
break;
case 2:
{
{
match('\'');
if (this.failed) {
return;
}
loop9: do {
int alt9=3;
final int LA9_0=this.input.LA(1);
if ((LA9_0 == '\\')) {
alt9=1;
}
 else if (((LA9_0 >= '\u0000' && LA9_0 <= '&') || (LA9_0 >= '(' && LA9_0 <= '[') || (LA9_0 >= ']' && LA9_0 <= '\uFFFE'))) {
alt9=2;
}
switch (alt9) {
case 1:
{
  mEscapeSequence();
  if (this.failed) {
    return;
  }
}
break;
case 2:
{
if ((this.input.LA(1) >= '\u0000' && this.input.LA(1) <= '&') || (this.input.LA(1) >= '(' && this.input.LA(1) <= '[') || (this.input.LA(1) >= ']' && this.input.LA(1) <= '\uFFFE')) {
this.input.consume();
this.failed=false;
}
 else {
if (this.backtracking > 0) {
  this.failed=true;
  return;
}
final MismatchedSetException mse=new MismatchedSetException(null,this.input);
recover(mse);
throw mse;
}
}
break;
default :
break loop9;
}
}
 while (true);
match('\'');
if (this.failed) {
return;
}
}
}
break;
}
if (this.backtracking == 0) {
if (this.token == null && this.ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
this.ruleNestingLevel--;
}
}
