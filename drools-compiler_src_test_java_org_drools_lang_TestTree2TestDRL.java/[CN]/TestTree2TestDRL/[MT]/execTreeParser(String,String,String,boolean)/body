{
  CharStream input;
  if (isFile == true) {
    input=new ANTLRFileStream(testInput);
  }
 else {
    input=new ANTLRStringStream(testInput);
  }
  try {
    DRLLexer lexer=new DRLLexer(input);
    CommonTokenStream tokens=new CommonTokenStream(lexer);
    DRLParser parser=new DRLParser(tokens);
    parser.setTreeAdaptor(new DroolsTreeAdaptor());
    Method ruleName=Class.forName("org.drools.lang.DRLParser").getMethod(testRuleName);
    PipedInputStream pipedIn=new PipedInputStream();
    PipedOutputStream pipedOut=new PipedOutputStream();
    PipedInputStream pipedErrIn=new PipedInputStream();
    PipedOutputStream pipedErrOut=new PipedOutputStream();
    try {
      pipedOut.connect(pipedIn);
      pipedErrOut.connect(pipedErrIn);
    }
 catch (    IOException e) {
      System.err.println("connection failed...");
      System.exit(1);
    }
    PrintStream console=System.out;
    PrintStream consoleErr=System.err;
    PrintStream ps=new PrintStream(pipedOut);
    PrintStream ps2=new PrintStream(pipedErrOut);
    System.setOut(ps);
    System.setErr(ps2);
    Object ruleReturn=ruleName.invoke(parser);
    Class _return=Class.forName("org.drools.lang.DRLParser" + "$" + testRuleName + "_return");
    Method returnName=_return.getMethod("getTree");
    CommonTree tree=(CommonTree)returnName.invoke(ruleReturn);
    CommonTreeNodeStream nodes=new CommonTreeNodeStream(tree);
    nodes.setTokenStream(tokens);
    Tree2TestDRL treeParser=new Tree2TestDRL(nodes);
    Method treeRuleName=Class.forName("org.drools.lang.Tree2TestDRL").getMethod(testTreeRuleName);
    Object treeRuleReturn=treeRuleName.invoke(treeParser);
    String astString=null;
    if (treeRuleReturn != null) {
      if (treeRuleReturn.toString().indexOf(testTreeRuleName + "_return") > 0) {
        try {
          Class _treeReturn=Class.forName("org.drools.lang.Tree2TestDRL" + "$" + testTreeRuleName + "_return");
          Method[] methods=_treeReturn.getDeclaredMethods();
          for (          Method method : methods) {
            if (method.getName().equals("getTree")) {
              Method treeReturnName=_treeReturn.getMethod("getTree");
              CommonTree returnTree=(CommonTree)treeReturnName.invoke(treeRuleReturn);
              astString=returnTree.toStringTree();
            }
          }
        }
 catch (        Exception e) {
          System.err.println(e);
        }
      }
    }
    org.antlr.gunit.gUnitExecuter.StreamVacuum stdoutVacuum=new org.antlr.gunit.gUnitExecuter.StreamVacuum(pipedIn);
    org.antlr.gunit.gUnitExecuter.StreamVacuum stderrVacuum=new org.antlr.gunit.gUnitExecuter.StreamVacuum(pipedErrIn);
    ps.close();
    ps2.close();
    System.setOut(console);
    System.setErr(consoleErr);
    this.stdout=null;
    this.stderr=null;
    stdoutVacuum.start();
    stderrVacuum.start();
    stdoutVacuum.join();
    stderrVacuum.join();
    if (stderrVacuum.toString().length() > 0) {
      this.stderr=stderrVacuum.toString();
      return this.stderr;
    }
    if (parser.hasErrors()) {
      this.stderr=parser.getErrors().toString();
      return this.stderr;
    }
    if (stdoutVacuum.toString().length() > 0) {
      this.stdout=stdoutVacuum.toString();
    }
    if (astString != null) {
      return astString;
    }
    if (treeRuleReturn != null) {
      return treeRuleReturn;
    }
    if (stderrVacuum.toString().length() == 0 && stdoutVacuum.toString().length() == 0) {
      return null;
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    System.exit(1);
  }
catch (  SecurityException e) {
    e.printStackTrace();
    System.exit(1);
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
    System.exit(1);
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
    System.exit(1);
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
    System.exit(1);
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    System.exit(1);
  }
catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
  return stdout;
}
