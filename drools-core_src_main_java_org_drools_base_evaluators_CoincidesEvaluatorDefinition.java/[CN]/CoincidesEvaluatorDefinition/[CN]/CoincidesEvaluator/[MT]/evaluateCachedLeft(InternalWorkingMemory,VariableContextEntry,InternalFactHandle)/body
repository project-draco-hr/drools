{
  if (context.leftNull || context.extractor.isNullValue(workingMemory,right.getObject())) {
    return false;
  }
  long rightStartTS, rightEndTS;
  long leftStartTS, leftEndTS;
  if (context.extractor.isSelfReference()) {
    rightStartTS=((EventFactHandle)right).getStartTimestamp();
    rightEndTS=((EventFactHandle)right).getEndTimestamp();
  }
 else {
    rightStartTS=context.extractor.getLongValue(workingMemory,right.getObject());
    rightEndTS=rightStartTS;
  }
  leftStartTS=((TemporalVariableContextEntry)context).startTS;
  leftEndTS=((TemporalVariableContextEntry)context).endTS;
  long distStart=Math.abs(rightStartTS - leftStartTS);
  long distEnd=Math.abs(rightEndTS - leftEndTS);
  return this.getOperator().isNegated() ^ (distStart <= this.startDev && distEnd <= this.endDev);
}
