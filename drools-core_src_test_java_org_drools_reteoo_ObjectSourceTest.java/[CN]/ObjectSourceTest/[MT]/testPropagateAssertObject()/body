{
  Rule rule=new Rule("test-rule");
  PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  WorkingMemoryImpl workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  MockObjectSource source=new MockObjectSource(15);
  MockObjectSink sink1=new MockObjectSink();
  source.addObjectSink(sink1);
  assertLength(0,sink1.getAsserted());
  FactHandleImpl f1=(FactHandleImpl)workingMemory.assertObject(new Integer(1));
  source.propagateAssertObject(f1,context,workingMemory);
  assertLength(1,sink1.getAsserted());
  Object[] list=(Object[])sink1.getAsserted().get(0);
  assertEquals(new Integer(1),workingMemory.getObject((FactHandleImpl)list[0]));
  MockObjectSink sink2=new MockObjectSink();
  source.addObjectSink(sink2);
  FactHandleImpl f2=(FactHandleImpl)workingMemory.assertObject(new Integer(2));
  source.propagateAssertObject(f2,context,workingMemory);
  assertLength(2,sink1.getAsserted());
  assertLength(1,sink2.getAsserted());
  list=(Object[])sink1.getAsserted().get(0);
  assertEquals(new Integer(1),workingMemory.getObject((FactHandle)list[0]));
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink1.getAsserted().get(1);
  assertEquals(new Integer(2),workingMemory.getObject((FactHandle)list[0]));
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink2.getAsserted().get(0);
  assertEquals(new Integer(2),workingMemory.getObject((FactHandle)list[0]));
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
}
