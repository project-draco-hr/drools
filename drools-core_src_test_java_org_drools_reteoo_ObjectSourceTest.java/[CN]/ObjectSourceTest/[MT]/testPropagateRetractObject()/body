{
  Rule rule=new Rule("test-rule");
  PropagationContext context=new PropagationContextImpl(PropagationContext.RETRACTION,null,null);
  WorkingMemoryImpl workingMemory=new WorkingMemoryImpl(new RuleBaseImpl(new Rete()));
  MockObjectSource source=new MockObjectSource(15);
  MockObjectSink sink1=new MockObjectSink();
  source.addObjectSink(sink1);
  assertLength(0,sink1.getRetracted());
  source.propagateRetractObject(new FactHandleImpl(2),context,workingMemory);
  assertLength(1,sink1.getRetracted());
  Object[] list=(Object[])sink1.getRetracted().get(0);
  assertEquals(new FactHandleImpl(2),list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  MockObjectSink sink2=new MockObjectSink();
  source.addObjectSink(sink2);
  source.propagateRetractObject(new FactHandleImpl(3),context,workingMemory);
  assertLength(2,sink1.getRetracted());
  assertLength(1,sink2.getRetracted());
  list=(Object[])sink1.getRetracted().get(0);
  assertEquals(new FactHandleImpl(2),list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink1.getRetracted().get(1);
  assertEquals(new FactHandleImpl(3),list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink2.getRetracted().get(0);
  assertEquals(new FactHandleImpl(3),list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  try {
    sink1.setRetractionException(new RetractionException("test"));
    source.propagateRetractObject(new FactHandleImpl(3),context,workingMemory);
    fail("Should have thrown 'RetractionException'");
  }
 catch (  RetractionException e) {
  }
catch (  Exception e) {
    fail("Should have thrown 'RetractionException' and not '" + e.getClass() + "'");
  }
}
