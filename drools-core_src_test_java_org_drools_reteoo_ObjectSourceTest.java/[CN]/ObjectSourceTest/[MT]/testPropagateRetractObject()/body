{
  final Rule rule=new Rule("test-rule");
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.RETRACTION,null,null);
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(new ReteooRuleBase());
  final MockObjectSource source=new MockObjectSource(15);
  final MockObjectSink sink1=new MockObjectSink();
  source.addObjectSink(sink1);
  assertLength(0,sink1.getRetracted());
  source.propagateRetractObject(new DefaultFactHandle(2,"cheese"),context,workingMemory);
  assertLength(1,sink1.getRetracted());
  Object[] list=(Object[])sink1.getRetracted().get(0);
  assertEquals(new DefaultFactHandle(2,"cheese"),list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  final MockObjectSink sink2=new MockObjectSink();
  source.addObjectSink(sink2);
  source.propagateRetractObject(new DefaultFactHandle(3,"cheese"),context,workingMemory);
  assertLength(2,sink1.getRetracted());
  assertLength(1,sink2.getRetracted());
  list=(Object[])sink1.getRetracted().get(0);
  assertEquals(new DefaultFactHandle(2,"cheese"),list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink1.getRetracted().get(1);
  assertEquals(new DefaultFactHandle(3,"cheese"),list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink2.getRetracted().get(0);
  assertEquals(new DefaultFactHandle(3,"cheese"),list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
}
