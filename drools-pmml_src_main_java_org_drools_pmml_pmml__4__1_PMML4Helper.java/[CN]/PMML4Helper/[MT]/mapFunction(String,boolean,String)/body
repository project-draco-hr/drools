{
  String ans="(";
  if ("+".equals(functor)) {
    ans+=args[0];
    for (int j=1; j < args.length; j++) {
      ans+=" + " + args[j];
    }
  }
 else   if ("-".equals(functor)) {
    ans+=args[0];
    for (int j=1; j < args.length; j++) {
      ans+=" - " + args[j];
    }
  }
 else   if ("*".equals(functor)) {
    ans+=args[0];
    for (int j=1; j < args.length; j++) {
      ans+=" * " + args[j];
    }
  }
 else   if ("/".equals(functor)) {
    ans+=args[0];
    if (ans.length() > 1) {
      ans+=" / " + args[1];
    }
  }
 else   if ("identity".equals(functor)) {
    ans+=args[0];
  }
 else   if ("min".equals(functor)) {
    ans+=associativeNaryToBinary("Math.min",0,args);
  }
 else   if ("max".equals(functor)) {
    ans+=associativeNaryToBinary("Math.max",0,args);
  }
 else   if ("sum".equals(functor)) {
    ans+=args[0];
    for (int j=1; j < args.length; j++) {
      ans+=" + " + args[j];
    }
  }
 else   if ("median".equals(functor)) {
    if (args.length % 2 == 0) {
      ans+=" 0.5 * " + args[args.length / 2 - 1] + " + 0.5 * "+ args[args.length / 2]+ " ";
    }
 else {
      ans+=args[args.length / 2];
    }
  }
 else   if ("product".equals(functor)) {
    ans+=args[0];
    for (int j=1; j < args.length; j++) {
      ans+=" * " + args[j];
    }
  }
 else   if ("avg".equals(functor)) {
    ans+="(" + args[0];
    for (int j=1; j < args.length; j++) {
      ans+=" + " + args[j];
    }
    ans+=") / " + args.length;
  }
 else   if ("log10".equals(functor)) {
    ans+="Math.log10(" + args[0] + ")";
  }
 else   if ("ln".equals(functor)) {
    ans+="Math.log(" + args[0] + ")";
  }
 else   if ("sqrt".equals(functor)) {
    ans+="Math.sqrt(" + args[0] + ")";
  }
 else   if ("abs".equals(functor)) {
    ans+="Math.abs(" + args[0] + ")";
  }
 else   if ("exp".equals(functor)) {
    ans+="Math.exp(" + args[0] + ")";
  }
 else   if ("pow".equals(functor)) {
    if ("0".equals(args[0]) && "0".equals(args[1])) {
      ans+="1";
    }
 else {
      ans+="Math.pow(" + args[0] + ","+ args[1]+ ")";
    }
  }
 else   if ("threshold".equals(functor)) {
    ans+=args[0] + " > " + args[1]+ " ? 1 : 0";
  }
 else   if ("floor".equals(functor)) {
    ans+="Math.floor(" + args[0] + ")";
  }
 else   if ("round".equals(functor)) {
    ans+="Math.round(" + args[0] + ")";
  }
 else   if ("ceil".equals(functor)) {
    ans+="Math.ceil(" + args[0] + ")";
  }
 else   if ("uppercase".equals(functor)) {
    ans+=args[0] + ".toString().toUpperCase()";
  }
 else   if ("substring".equals(functor)) {
    int start=Integer.valueOf(args[1]) - 1;
    int len=Integer.valueOf(args[2]);
    ans+=args[0] + ".toString().substring(" + start+ ","+ (start + len)+ ")";
  }
 else   if ("trimBlanks".equals(functor)) {
    ans+=args[0] + ".toString().trim()";
  }
 else   if ("formatNumber".equals(functor)) {
    ans+="new java.util.Formatter(new StringBuilder(),java.util.Locale.getDefault()).format(" + args[0] + ","+ Double.valueOf(args[1])+ ")";
  }
 else   if ("formatDatetime".equals(functor)) {
    ans+="new java.text.SimpleDateFormat(" + posix2Java(args[1]) + ").format(new SimpleDateFormat().parse("+ args[0]+ ", java.util.Locale.ENGLISH))";
  }
 else   if ("dateDaysSinceYear".equals(functor)) {
    ans+="( (new java.text.SimpleDateFormat()).parse(" + args[0] + ").getTime()"+ " - (new java.text.SimpleDateFormat()).parse(\"01/01/"+ args[1]+ "\").getTime() ) / (1000*60*60*24)";
  }
 else   if ("dateSecondsSinceYear".equals(functor)) {
    ans+="( (new java.text.SimpleDateFormat()).parse(" + args[0] + ").getTime()"+ " - (new java.text.SimpleDateFormat()).parse(\"01/01/"+ args[1]+ "\").getTime() ) / 1000";
  }
 else   if ("dateSecondsSinceMidnight".equals(functor)) {
    ans+="(new java.text.SimpleDateFormat()).parse(" + args[0] + ").getTime() % 1000";
  }
 else   if ("equal".equals(functor)) {
    ans+=args[0] + " == " + args[1];
  }
 else   if ("notEqual".equals(functor)) {
    ans+=args[0] + " != " + args[1];
  }
 else   if ("lessThan".equals(functor)) {
    ans+=args[0] + " < " + args[1];
  }
 else   if ("lessOrEqual".equals(functor)) {
    ans+=args[0] + " <= " + args[1];
  }
 else   if ("greaterThan".equals(functor)) {
    ans+=args[0] + " > " + args[1];
  }
 else   if ("greaterOrEqual".equals(functor)) {
    ans+=args[0] + " >= " + args[1];
  }
 else   if ("isIn".equals(functor)) {
    ans+=args[0] + ".contains(" + args[1]+ ")";
  }
 else   if ("isNotIn".equals(functor)) {
    ans+="(! " + args[0] + ".contains("+ args[1]+ "))";
  }
 else   if ("not".equals(functor)) {
    ans+="( ! " + args[0] + " )";
  }
 else   if ("and".equals(functor)) {
    ans+=args[0];
    for (int j=1; j < args.length; j++) {
      ans+=" && " + args[j];
    }
  }
 else   if ("or".equals(functor)) {
    ans+=args[0];
    for (int j=1; j < args.length; j++) {
      ans+=" || " + args[j];
    }
  }
 else   if ("if".equals(functor)) {
    ans+=args[0] + " ? " + args[1]+ " : "+ (args.length > 2 ? args[2] : "null");
  }
 else {
    if (args.length == 0) {
      if (asQuery) {
        return functor + "( $" + functor+ "_return ; )";
      }
 else {
        return functor + "( )";
      }
    }
    String tmp=args[0];
    for (int j=1; j < args.length; j++) {
      tmp+=", " + args[j];
    }
    if (asQuery) {
      tmp+=", $ctx, $" + functor + "_return ; ";
    }
    return functor + "( " + tmp+ " )";
  }
  if (asQuery) {
    ans+=", $ctx, $" + functor + "_return ; ";
  }
  ans+=")";
  return ans;
}
