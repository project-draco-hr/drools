{
  String source="package org.drools.testdrl;\n" + "public class MyPojo {\n" + "    public String getUrlPath() {"+ "        return getClass().getClassLoader().getResource(\"META-INF/foo.xml\").getPath();\n"+ "    }\n"+ "}\n";
  String drl1="package org.drools.testdrl;\n" + "import org.drools.testdrl.MyPojo;\n" + "global java.util.List list;\n"+ "rule R1 when\n"+ "then\n"+ "   insert(new MyPojo());\n"+ "end\n"+ "rule R2 when\n"+ "    $m : MyPojo()\n"+ "then\n"+ "   list.add($m.getUrlPath());\n"+ "end\n";
  String foo="<xyz/>\n";
  KieServices ks=KieServices.Factory.get();
  ReleaseId releaseId=ks.newReleaseId("org.kie","test-cl","1.0.0");
  KieFileSystem kfs=ks.newKieFileSystem();
  KieModuleModel kproj=ks.newKieModuleModel();
  KieBaseModel kieBaseModel1=kproj.newKieBaseModel("testKbase").setDefault(true).addPackage("org.drools.testdrl");
  KieSessionModel ksession1=kieBaseModel1.newKieSessionModel("testKsession").setDefault(true);
  kfs.writeKModuleXML(kproj.toXML());
  kfs.write("src/main/resources/org/drools/testdrl/rules1.drl",drl1);
  kfs.write("src/main/java/org/drools/testdrl/MyPojo.java",source);
  kfs.write("src/main/resources/META-INF/foo.xml",foo);
  kfs.generateAndWritePomXML(releaseId);
  KieBuilder kieBuilder=ks.newKieBuilder(kfs);
  assertTrue(kieBuilder.buildAll().getResults().getMessages().isEmpty());
  KieContainer kieContainer=ks.newKieContainer(releaseId);
  ClassLoader classLoader=kieContainer.getClassLoader();
  URL url=classLoader.getResource("META-INF/foo.xml");
  assertNotNull(url);
  KieSession ksession=kieContainer.newKieSession("testKsession");
  List<URL> list=new ArrayList();
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  assertEquals(url.getPath(),list.get(0));
  ksession.dispose();
}
