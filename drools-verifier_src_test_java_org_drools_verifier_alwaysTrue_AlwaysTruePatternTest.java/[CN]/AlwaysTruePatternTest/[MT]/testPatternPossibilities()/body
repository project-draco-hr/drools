{
  KieSession session=getStatelessKieSession(this.getClass().getResourceAsStream("Patterns.drl"));
  VerifierReport result=VerifierReportFactory.newVerifierReport();
  Collection<Object> data=new ArrayList<Object>();
  session.setGlobal("result",result);
  Pattern pattern1=VerifierComponentMockFactory.createPattern1();
  Restriction r1=LiteralRestriction.createRestriction(pattern1,"");
  Restriction r2=LiteralRestriction.createRestriction(pattern1,"");
  Opposites o1=new Opposites(r1,r2);
  SubPattern pp1=new SubPattern(pattern1,0);
  pp1.add(r1);
  pp1.add(r2);
  Restriction r3=new VariableRestriction(pattern1);
  Restriction r4=new VariableRestriction(pattern1);
  Opposites o2=new Opposites(r1,r2);
  SubPattern pp2=new SubPattern(pattern1,1);
  pp2.add(r1);
  pp2.add(r2);
  Pattern pattern2=VerifierComponentMockFactory.createPattern2();
  Restriction r5=LiteralRestriction.createRestriction(pattern2,"");
  Restriction r6=LiteralRestriction.createRestriction(pattern2,"");
  SubPattern pp3=new SubPattern(pattern2,0);
  pp3.add(r5);
  pp3.add(r6);
  Restriction r7=new VariableRestriction(pattern2);
  Restriction r8=new VariableRestriction(pattern2);
  Opposites o4=new Opposites(r7,r8);
  SubPattern pp4=new SubPattern(pattern2,1);
  pp4.add(r7);
  pp4.add(r8);
  data.add(pattern1);
  data.add(r1);
  data.add(r2);
  data.add(r3);
  data.add(r4);
  data.add(o1);
  data.add(o2);
  data.add(pp1);
  data.add(pp2);
  data.add(pattern2);
  data.add(r5);
  data.add(r6);
  data.add(r7);
  data.add(r8);
  data.add(o4);
  data.add(pp3);
  data.add(pp4);
  for (  Object o : data) {
    session.insert(o);
  }
  session.fireAllRules(new RuleNameMatchesAgendaFilter("Pattern possibility that is always true"));
  boolean pp1true=false;
  boolean pp2true=false;
  boolean pp3true=false;
  boolean pp4true=false;
  for (  Object o : session.getObjects()) {
    if (o instanceof AlwaysTrue) {
      AlwaysTrue alwaysTrue=(AlwaysTrue)o;
      if (!pp1true) {
        pp1true=alwaysTrue.getCause().equals(pp1);
      }
      if (!pp2true) {
        pp2true=alwaysTrue.getCause().equals(pp2);
      }
      if (!pp3true) {
        pp3true=alwaysTrue.getCause().equals(pp3);
      }
      if (!pp4true) {
        pp4true=alwaysTrue.getCause().equals(pp4);
      }
    }
  }
  assertTrue(pp1true);
  assertTrue(pp2true);
  assertFalse(pp3true);
  assertTrue(pp4true);
}
