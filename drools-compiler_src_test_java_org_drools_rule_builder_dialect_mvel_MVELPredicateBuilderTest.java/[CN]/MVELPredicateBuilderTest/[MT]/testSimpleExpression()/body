{
  final Package pkg=new Package("pkg1");
  final RuleDescr ruleDescr=new RuleDescr("rule 1");
  final InstrumentedBuildContent context=new InstrumentedBuildContent(pkg,ruleDescr);
  final InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final FieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"price");
  final Pattern patternA=new Pattern(0,new ClassObjectType(int.class));
  final Pattern patternB=new Pattern(1,new ClassObjectType(int.class));
  final Declaration a=new Declaration("a",extractor,patternA);
  final Declaration b=new Declaration("b",extractor,patternB);
  final Map map=new HashMap();
  map.put("a",a);
  map.put("b",b);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  final PredicateDescr predicateDescr=new PredicateDescr();
  predicateDescr.setContent("a == b");
  final MVELPredicateBuilder builder=new MVELPredicateBuilder();
  final List[] usedIdentifiers=new ArrayList[2];
  final List list=new ArrayList();
  usedIdentifiers[1]=list;
  final Declaration[] previousDeclarations=new Declaration[]{a};
  final Declaration[] localDeclarations=new Declaration[]{b};
  final PredicateConstraint predicate=new PredicateConstraint(null,localDeclarations);
  final BuildUtils utils=new BuildUtils(new KnowledgeHelperFixer(),new DeclarationTypeFixer(),new JavaExprAnalyzer(),null,null,null);
  builder.build(context,utils,usedIdentifiers,previousDeclarations,localDeclarations,predicate,predicateDescr);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final InternalWorkingMemory wm=(InternalWorkingMemory)ruleBase.newStatefulSession();
  final Cheese stilton=new Cheese("stilton",10);
  final Cheese cheddar=new Cheese("cheddar",10);
  final InternalFactHandle f0=(InternalFactHandle)wm.assertObject(cheddar);
  final ReteTuple tuple=new ReteTuple(f0);
  final PredicateContextEntry predicateContext=new PredicateContextEntry();
  predicateContext.leftTuple=tuple;
  assertTrue(predicate.isAllowedCachedLeft(predicateContext,stilton));
  cheddar.setPrice(9);
  wm.modifyObject(f0,cheddar);
  assertFalse(predicate.isAllowedCachedLeft(predicateContext,stilton));
}
