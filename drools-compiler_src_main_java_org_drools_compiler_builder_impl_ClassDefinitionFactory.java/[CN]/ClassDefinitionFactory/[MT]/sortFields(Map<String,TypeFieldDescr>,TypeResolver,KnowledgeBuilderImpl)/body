{
  List<FieldDefinition> fieldDefs=new ArrayList<FieldDefinition>(fields.size());
  int maxDeclaredPos=0;
  BitSet occupiedPositions=new BitSet(fields.size());
  for (  TypeFieldDescr field : fields.values()) {
    String typeName=field.getPattern().getObjectType();
    String typeNameKey=typeName;
    String fullFieldType=kbuilder != null ? TypeDeclarationUtils.toBuildableType(typeNameKey,kbuilder.getRootClassLoader()) : typeNameKey;
    FieldDefinition fieldDef=new FieldDefinition(field.getFieldName(),fullFieldType);
    fieldDefs.add(fieldDef);
    fieldDef.setInherited(field.isInherited());
    fieldDef.setRecursive(field.isRecursive());
    fieldDef.setInitExpr(TypeDeclarationUtils.rewriteInitExprWithImports(field.getInitExpr(),typeResolver));
    if (field.getIndex() >= 0) {
      int pos=field.getIndex();
      occupiedPositions.set(pos);
      maxDeclaredPos=Math.max(maxDeclaredPos,pos);
      fieldDef.addMetaData("position",pos);
    }
 else {
      Position position=field.getTypedAnnotation(Position.class);
      if (position != null) {
        int pos=position.value();
        field.setIndex(pos);
        occupiedPositions.set(pos);
        maxDeclaredPos=Math.max(maxDeclaredPos,pos);
        fieldDef.addMetaData("position",pos);
      }
    }
    if (field.hasAnnotation(Key.class)) {
      fieldDef.setKey(true);
      fieldDef.addMetaData("key",null);
    }
    if (typeResolver != null) {
      for (      AnnotationDescr annotationDescr : field.getAnnotations()) {
        if (annotationDescr.getFullyQualifiedName() == null) {
          if (annotationDescr.isStrict()) {
            kbuilder.addBuilderResult(new TypeDeclarationError(field,"Unknown annotation @" + annotationDescr.getName() + " on field "+ field.getFieldName()));
          }
 else {
            continue;
          }
        }
        Annotation annotation=AnnotationFactory.buildAnnotation(typeResolver,annotationDescr);
        if (annotation != null) {
          try {
            AnnotationDefinition annotationDefinition=AnnotationDefinition.build(annotation.annotationType(),field.getAnnotation(annotationDescr.getFullyQualifiedName()).getValueMap(),typeResolver);
            fieldDef.addAnnotation(annotationDefinition);
          }
 catch (          Exception e) {
            kbuilder.addBuilderResult(new TypeDeclarationError(field,"Annotated field " + field.getFieldName() + "  - undefined property in @annotation "+ annotationDescr.getName()+ ": "+ e.getMessage()+ ";"));
          }
        }
 else {
          if (annotationDescr.isStrict()) {
            kbuilder.addBuilderResult(new TypeDeclarationError(field,"Unknown annotation @" + annotationDescr.getName() + " on field "+ field.getFieldName()));
          }
        }
      }
    }
    fieldDef.setDeclIndex(field.getIndex());
  }
  int curr=0;
  for (  FieldDefinition fieldDef : fieldDefs) {
    if (fieldDef.getDeclIndex() < 0) {
      int freePos=occupiedPositions.nextClearBit(0);
      if (freePos < maxDeclaredPos) {
        occupiedPositions.set(freePos);
      }
 else {
        freePos=maxDeclaredPos + 1;
      }
      fieldDef.setPriority(freePos * 256 + curr++);
    }
 else {
      fieldDef.setPriority(fieldDef.getDeclIndex() * 256 + curr++);
    }
  }
  Collections.sort(fieldDefs);
  return fieldDefs;
}
