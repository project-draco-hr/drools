{
  try {
    def.setClassName(concrete.getName());
    if (concrete.getSuperclass() != null) {
      def.setSuperClass(concrete.getSuperclass().getName());
    }
    ClassFieldInspector inspector=new ClassFieldInspector(concrete);
    Map<String,Method> methods=inspector.getGetterMethods();
    Map<String,Method> setters=inspector.getSetterMethods();
    int j=0;
    Map<String,TypeFieldDescr> fields=new HashMap<String,TypeFieldDescr>();
    for (    String fieldName : methods.keySet()) {
      if (asTrait && ("core".equals(fieldName) || "fields".equals(fieldName))) {
        continue;
      }
      if (!inspector.isNonGetter(fieldName) && setters.keySet().contains(fieldName)) {
        Position position=null;
        if (!concrete.isInterface()) {
          try {
            Field fld=concrete.getDeclaredField(fieldName);
            position=fld.getAnnotation(Position.class);
          }
 catch (          NoSuchFieldException nsfe) {
          }
        }
        Class ret=methods.get(fieldName).getReturnType();
        TypeFieldDescr field=new TypeFieldDescr();
        field.setFieldName(fieldName);
        field.setPattern(new PatternDescr(ret.getName()));
        field.setIndex(position != null ? position.value() : -1);
        fields.put(fieldName,field);
      }
    }
    if (!fields.isEmpty()) {
      List<FieldDefinition> fieldDefs=sortFields(fields,null,null);
      int i=0;
      for (      FieldDefinition fieldDef : fieldDefs) {
        fieldDef.setIndex(i++);
        def.addField(fieldDef);
      }
    }
    Set<String> interfaces=new HashSet<String>();
    Collections.addAll(interfaces,def.getInterfaces());
    for (    Class iKlass : ClassUtils.getAllImplementedInterfaceNames(concrete)) {
      interfaces.add(iKlass.getName());
    }
    def.setInterfaces(interfaces.toArray(new String[interfaces.size()]));
    def.setDefinedClass(concrete);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
