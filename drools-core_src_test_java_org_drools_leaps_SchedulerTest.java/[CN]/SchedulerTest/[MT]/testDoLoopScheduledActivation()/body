{
  RuleBase ruleBase=new RuleBaseImpl();
  final WorkingMemoryImpl workingMemory=(WorkingMemoryImpl)ruleBase.newWorkingMemory();
  final Agenda agenda=workingMemory.getAgenda();
  final Rule rule=new Rule("test-rule");
  final List data=new ArrayList();
  Duration duration=new Duration(){
    public long getDuration(    Tuple tuple){
      return 100;
    }
  }
;
  rule.setDuration(duration);
  rule.setConsequence(new org.drools.spi.Consequence(){
    public void invoke(    Activation activation,    WorkingMemory workingMemory){
      if (data.size() < 3) {
        PropagationContext context2=new PropagationContextImpl(0,0,rule,activation);
        FactHandleImpl tupleFactHandleIn=(FactHandleImpl)workingMemory.assertObject("tuple object in");
        FactHandleImpl[] factHandlesTupleIn=new FactHandleImpl[1];
        factHandlesTupleIn[0]=tupleFactHandleIn;
        LeapsTuple tupleIn=new LeapsTuple(factHandlesTupleIn,null,null,context2);
        ((WorkingMemoryImpl)workingMemory).assertTuple(tupleIn,rule);
      }
      data.add("tested");
    }
  }
);
  PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule,null);
  FactHandleImpl tupleFactHandle=(FactHandleImpl)workingMemory.assertObject("tuple object");
  FactHandleImpl[] factHandlesTuple=new FactHandleImpl[1];
  factHandlesTuple[0]=tupleFactHandle;
  LeapsTuple tuple=new LeapsTuple(factHandlesTuple,null,null,context);
  workingMemory.assertTuple(tuple,rule);
  assertEquals(0,data.size());
  Thread.sleep(1500);
  assertEquals(4,data.size());
}
