{
  if (!originalObject.equals(newObject)) {
    return true;
  }
  if (originalObject instanceof Question) {
    Question originalQuestion=(Question)originalObject;
    String originalAnswer;
    if (clientAnswers != null && clientAnswers.containsKey(originalQuestion.getId())) {
      originalAnswer=clientAnswers.get(originalQuestion.getId());
    }
 else {
      originalAnswer=originalQuestion.getAnswer() == null ? null : originalQuestion.getAnswer().toString();
    }
    Question newQuestion=(Question)newObject;
    String newAnswer=newQuestion.getAnswer() == null ? null : newQuestion.getAnswer().toString();
    if (originalAnswer == null ? newAnswer != null : !originalAnswer.equals(newAnswer)) {
      return true;
    }
  }
  Class<?> clazz=originalObject.getClass();
  do {
    for (    Field field : clazz.getDeclaredFields()) {
      int modifiers=field.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers)) {
        boolean answerField=field.isAnnotationPresent(Question.AnswerField.class);
        if (!answerField) {
          field.setAccessible(true);
          try {
            Object originalValue=field.get(originalObject);
            Object newValue=field.get(newObject);
            if (originalValue == null ? newValue != null : !originalValue.equals(newValue)) {
              return true;
            }
          }
 catch (          IllegalArgumentException e) {
            throw new RuntimeException(e);
          }
catch (          IllegalAccessException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
 while (clazz != null);
  return false;
}
