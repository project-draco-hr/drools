{
  RuleDescr rule=null;
  Token loc=null;
  Token ruleName=null;
  Token documentation=null;
  rule=null;
  AndDescr lhs=null;
  ColumnDescr colum=null;
  AttributeDescr module=null;
  try {
{
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rule65);
      match(input,DEFRULE,FOLLOW_DEFRULE_in_rule73);
      ruleName=(Token)input.LT(1);
      match(input,SYMBOL,FOLLOW_SYMBOL_in_rule77);
      debug("start rule: " + ruleName.getText());
      String ruleStr=ruleName.getText();
      if (ruleStr.indexOf("::") >= 0) {
        String mod=ruleStr.substring(0,ruleStr.indexOf("::") + 2);
        ruleStr=ruleStr.substring(ruleStr.indexOf("::") + 2);
        module=new AttributeDescr("agenda-group",mod);
        module.setLocation(offset(ruleName.getLine()),ruleName.getCharPositionInLine());
        module.setStartCharacter(((CommonToken)ruleName).getStartIndex());
        module.setEndCharacter(((CommonToken)ruleName).getStopIndex());
      }
      rule=new RuleDescr(ruleStr,null);
      if (module != null) {
        rule.addAttribute(module);
      }
      rule.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      rule.setStartCharacter(((CommonToken)loc).getStartIndex());
      lhs=new AndDescr();
      rule.setLhs(lhs);
      lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      lhs.setStartCharacter(((CommonToken)loc).getStartIndex());
      documentation=(Token)input.LT(1);
      match(input,STRING,FOLLOW_STRING_in_rule89);
      pushFollow(FOLLOW_ruleAttribute_in_rule95);
      ruleAttribute(rule);
      _fsp--;
      loop2:       do {
        int alt2=2;
        int LA2_0=input.LA(1);
        if ((LA2_0 == LEFT_PAREN || LA2_0 == VAR)) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            pushFollow(FOLLOW_lhs_in_rule103);
            lhs(lhs);
            _fsp--;
          }
        break;
default :
      break loop2;
  }
}
 while (true);
match(input,39,FOLLOW_39_in_rule112);
pushFollow(FOLLOW_rhs_in_rule119);
rhs(rule);
_fsp--;
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rule127);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
