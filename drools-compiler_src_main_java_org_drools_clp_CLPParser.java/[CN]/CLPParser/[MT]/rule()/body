{
  RuleDescr rule=null;
  Token loc=null;
  Token ruleName=null;
  rule=null;
  AndDescr lhs=null;
  ColumnDescr colum=null;
  ExecutionEngine engine=new BlockExecutionEngine();
  ExecutionBuildContext context=new ExecutionBuildContext(engine);
  try {
{
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rule64);
      match(input,DEFRULE,FOLLOW_DEFRULE_in_rule66);
      ruleName=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_rule74);
      debug("start rule: " + ruleName.getText());
      rule=new RuleDescr(ruleName.getText(),null);
      rule.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      rule.setStartCharacter(((CommonToken)loc).getStartIndex());
      lhs=new AndDescr();
      rule.setLhs(lhs);
      lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      lhs.setStartCharacter(((CommonToken)loc).getStartIndex());
      loop2:       do {
        int alt2=2;
        alt2=dfa2.predict(input);
switch (alt2) {
case 1:
{
            pushFollow(FOLLOW_lhs_in_rule85);
            lhs(lhs);
            _fsp--;
          }
        break;
default :
      break loop2;
  }
}
 while (true);
loop3: do {
  int alt3=2;
  int LA3_0=input.LA(1);
  if ((LA3_0 == LEFT_PAREN)) {
    alt3=1;
  }
switch (alt3) {
case 1:
{
      pushFollow(FOLLOW_function_in_rule92);
      function(context);
      _fsp--;
    }
  break;
default :
break loop3;
}
}
 while (true);
rule.setConsequence(engine);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rule101);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
