{
  RuleDescr rule=null;
  Token loc=null;
  Token ruleName=null;
  Token documentation=null;
  AttributeDescr d=null;
  rule=null;
  AndDescr lhs=null;
  ColumnDescr colum=null;
  try {
{
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rule64);
      match(input,DEFRULE,FOLLOW_DEFRULE_in_rule66);
      int alt2=2;
      int LA2_0=input.LA(1);
      if ((LA2_0 == ID)) {
        int LA2_1=input.LA(2);
        if ((LA2_1 == ID)) {
          alt2=1;
        }
      }
switch (alt2) {
case 1:
{
          pushFollow(FOLLOW_agenda_group_in_rule76);
          d=agenda_group();
          _fsp--;
          rule.addAttribute(d);
        }
      break;
  }
  ruleName=(Token)input.LT(1);
  match(input,ID,FOLLOW_ID_in_rule92);
  debug("start rule: " + ruleName.getText());
  rule=new RuleDescr(ruleName.getText(),null);
  rule.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
  rule.setStartCharacter(((CommonToken)loc).getStartIndex());
  lhs=new AndDescr();
  rule.setLhs(lhs);
  lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
  lhs.setStartCharacter(((CommonToken)loc).getStartIndex());
  documentation=(Token)input.LT(1);
  match(input,STRING,FOLLOW_STRING_in_rule105);
  loop3:   do {
    int alt3=2;
    int LA3_0=input.LA(1);
    if ((LA3_0 == LEFT_PAREN)) {
      int LA3_1=input.LA(2);
      if ((LA3_1 == DECLARE)) {
        alt3=1;
      }
    }
switch (alt3) {
case 1:
{
        pushFollow(FOLLOW_ruleAttribute_in_rule111);
        ruleAttribute(rule);
        _fsp--;
      }
    break;
default :
  break loop3;
}
}
 while (true);
loop4: do {
int alt4=2;
int LA4_0=input.LA(1);
if ((LA4_0 == LEFT_PAREN || LA4_0 == VAR)) {
alt4=1;
}
switch (alt4) {
case 1:
{
  pushFollow(FOLLOW_lhs_in_rule120);
  lhs(lhs);
  _fsp--;
}
break;
default :
break loop4;
}
}
 while (true);
pushFollow(FOLLOW_rhs_in_rule129);
rhs(rule);
_fsp--;
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rule137);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
