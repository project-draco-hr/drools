{
  InternalWorkingMemory wm=context.wm;
  InternalAgenda agenda=(InternalAgenda)wm.getAgenda();
  Map<String,ActivationGroup> activationGroups=agenda.getActivationGroupsMap();
  InternalAgendaGroup[] agendaGroups=(InternalAgendaGroup[])agenda.getAgendaGroupsMap().values().toArray(new InternalAgendaGroup[agenda.getAgendaGroupsMap().size()]);
  Arrays.sort(agendaGroups,AgendaGroupSorter.instance);
  for (  InternalAgendaGroup group : agendaGroups) {
    context.writeShort(PersisterEnums.AGENDA_GROUP);
    context.writeUTF(group.getName());
    context.writeBoolean(group.isActive());
    context.writeLong(group.getActivatedForRecency());
  }
  context.writeShort(PersisterEnums.END);
  LinkedList<AgendaGroup> focusStack=agenda.getStackList();
  for (Iterator<AgendaGroup> it=focusStack.iterator(); it.hasNext(); ) {
    AgendaGroup group=it.next();
    context.writeShort(PersisterEnums.AGENDA_GROUP);
    context.writeUTF(group.getName());
  }
  context.writeShort(PersisterEnums.END);
  context.writeShort(PersisterEnums.END);
}
