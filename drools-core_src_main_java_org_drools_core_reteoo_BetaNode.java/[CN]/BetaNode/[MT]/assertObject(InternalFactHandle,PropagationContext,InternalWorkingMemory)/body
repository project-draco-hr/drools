{
  final BetaMemory memory=(BetaMemory)getBetaMemoryFromRightInput(this,wm);
  RightTuple rightTuple=createRightTuple(factHandle,this,pctx);
  boolean stagedInsertWasEmpty=false;
  if (streamMode) {
    stagedInsertWasEmpty=memory.getSegmentMemory().getTupleQueue().isEmpty();
    int propagationType=pctx.getType() == PropagationContext.MODIFICATION ? PropagationContext.INSERTION : pctx.getType();
    memory.getSegmentMemory().getTupleQueue().add(new RightTupleEntry(rightTuple,pctx,memory,propagationType));
    if (log.isTraceEnabled()) {
      log.trace("JoinNode insert queue={} size={} pctx={} lt={}",System.identityHashCode(memory.getSegmentMemory().getTupleQueue()),memory.getSegmentMemory().getTupleQueue().size(),PhreakPropagationContext.intEnumToString(pctx),rightTuple);
    }
  }
 else {
    stagedInsertWasEmpty=memory.getStagedRightTuples().addInsert(rightTuple);
  }
  if (log.isTraceEnabled()) {
    log.trace("BetaNode insert={} stagedInsertWasEmpty={}",memory.getStagedRightTuples().insertSize(),stagedInsertWasEmpty);
  }
  if (memory.getAndIncCounter() == 0) {
    memory.linkNode(wm);
  }
 else   if (stagedInsertWasEmpty) {
    memory.setNodeDirty(wm);
  }
  if (pctx.getReaderContext() != null) {
    MarshallerReaderContext mrc=(MarshallerReaderContext)pctx.getReaderContext();
    mrc.filter.fireRNEAs(wm);
  }
}
