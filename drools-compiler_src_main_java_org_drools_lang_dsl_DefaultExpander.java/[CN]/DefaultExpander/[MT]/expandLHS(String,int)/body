{
  substitutions=new ArrayList<Map<String,String>>();
  final StringBuilder buf=new StringBuilder();
  final String[] lines=lhs.split("\n",-1);
  final String[] expanded=new String[lines.length];
  int lastExpanded=-1;
  int lastPattern=-1;
  for (int i=0; i < lines.length - 1; i++) {
    final String trimmed=lines[i].trim();
    expanded[++lastExpanded]=lines[i];
    if (trimmed.length() == 0 || trimmed.startsWith("#") || trimmed.startsWith("//")) {
    }
 else     if (trimmed.startsWith(">")) {
      expanded[lastExpanded]=lines[i].replaceFirst(">"," ");
      lastPattern=lastExpanded;
    }
 else {
      expanded[lastExpanded]=substitute(expanded[lastExpanded],this.condition,i + lineOffset,useWhen,showSteps);
      if (lines[i].equals(expanded[lastExpanded])) {
        this.addError(new ExpanderException("Unable to expand: " + lines[i].replaceAll("[\n\r]","").trim(),i + lineOffset));
      }
      if (trimmed.startsWith("-") && (!lines[i].equals(expanded[lastExpanded]))) {
        if (lastPattern >= 0) {
          ConstraintInformation c=ConstraintInformation.findConstraintInformationInPattern(expanded[lastPattern]);
          if (c.start > -1) {
            expanded[lastPattern]=expanded[lastPattern].substring(0,c.start) + c.constraints + ((c.constraints.length() == 0) ? "" : ", ")+ expanded[lastExpanded].trim()+ expanded[lastPattern].substring(c.end);
          }
 else {
            this.addError(new ExpanderException("No pattern was found to add the constraint to: " + lines[i].trim(),i + lineOffset));
          }
        }
        lastExpanded--;
      }
 else {
        lastPattern=lastExpanded;
      }
    }
  }
  for (int i=0; i <= lastExpanded; i++) {
    buf.append(expanded[i]);
    buf.append("\n");
  }
  return buf.toString();
}
