{
  GuidedDTDRLPersistence p=new GuidedDTDRLPersistence();
  String[] row=new String[]{"1","desc","a","mike","33 + 1","age > 6","stilton"};
  String[][] data=new String[1][];
  data[0]=row;
  List<BaseColumn> allColumns=new ArrayList<BaseColumn>();
  List<CompositeColumn<? extends BaseColumn>> allPatterns=new ArrayList<CompositeColumn<? extends BaseColumn>>();
  allColumns.add(new RowNumberCol52());
  allColumns.add(new DescriptionCol52());
  allColumns.add(new MetadataCol52());
  Pattern52 p1=new Pattern52();
  p1.setNegated(true);
  p1.setBoundName("p1");
  p1.setFactType("Person");
  allPatterns.add(p1);
  ConditionCol52 col=new ConditionCol52();
  col.setFactField("name");
  col.setConstraintValueType(BaseSingleFieldConstraint.TYPE_LITERAL);
  col.setOperator("==");
  p1.getChildColumns().add(col);
  allColumns.add(col);
  ConditionCol52 col2=new ConditionCol52();
  col2.setFactField("age");
  col2.setConstraintValueType(BaseSingleFieldConstraint.TYPE_RET_VALUE);
  col2.setOperator("<");
  p1.getChildColumns().add(col2);
  allColumns.add(col2);
  ConditionCol52 col3=new ConditionCol52();
  col3.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);
  p1.getChildColumns().add(col3);
  allColumns.add(col3);
  Pattern52 p2=new Pattern52();
  p2.setBoundName("c");
  p2.setFactType("Cheese");
  allPatterns.add(p2);
  ConditionCol52 col4=new ConditionCol52();
  col4.setFactField("type");
  col4.setOperator("==");
  col4.setConstraintValueType(BaseSingleFieldConstraint.TYPE_LITERAL);
  p2.getChildColumns().add(col4);
  allColumns.add(col4);
  allColumns.add(new AnalysisCol52());
  List<DTCellValue52> rowData=DataUtilities.makeDataRowList(row);
  TemplateDataProvider rowDataProvider=new GuidedDTTemplateDataProvider(allColumns,rowData);
  RuleModel rm=new RuleModel();
  p.doConditions(allColumns,allPatterns,rowDataProvider,rowData,DataUtilities.makeDataLists(data),rm);
  String drl=BRDRLPersistence.getInstance().marshal(rm);
  assertEquals(2,rm.lhs.length);
  assertEquals("Person",((FactPattern)rm.lhs[0]).getFactType());
  assertEquals("p1",((FactPattern)rm.lhs[0]).getBoundName());
  assertEquals("Cheese",((FactPattern)rm.lhs[1]).getFactType());
  assertEquals("c",((FactPattern)rm.lhs[1]).getBoundName());
  FactPattern person=(FactPattern)rm.lhs[0];
  assertEquals(3,person.getConstraintList().getConstraints().length);
  SingleFieldConstraint cons=(SingleFieldConstraint)person.getConstraint(0);
  assertEquals(BaseSingleFieldConstraint.TYPE_LITERAL,cons.getConstraintValueType());
  assertEquals("name",cons.getFieldName());
  assertEquals("==",cons.getOperator());
  assertEquals("mike",cons.getValue());
  cons=(SingleFieldConstraint)person.getConstraint(1);
  assertEquals(BaseSingleFieldConstraint.TYPE_RET_VALUE,cons.getConstraintValueType());
  assertEquals("age",cons.getFieldName());
  assertEquals("<",cons.getOperator());
  assertEquals("33 + 1",cons.getValue());
  cons=(SingleFieldConstraint)person.getConstraint(2);
  assertEquals(BaseSingleFieldConstraint.TYPE_PREDICATE,cons.getConstraintValueType());
  assertEquals("age > 6",cons.getValue());
  assertEquals(person.isNegated(),true);
  assertTrue(drl.indexOf("not Person(") > 0);
  FactPattern cheese=(FactPattern)rm.lhs[1];
  assertEquals(1,cheese.getConstraintList().getConstraints().length);
  cons=(SingleFieldConstraint)cheese.getConstraint(0);
  assertEquals("type",cons.getFieldName());
  assertEquals("==",cons.getOperator());
  assertEquals("stilton",cons.getValue());
  assertEquals(BaseSingleFieldConstraint.TYPE_LITERAL,cons.getConstraintValueType());
  assertEquals(cheese.isNegated(),false);
  assertTrue(drl.indexOf("c : Cheese(") > 0);
}
