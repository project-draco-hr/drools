{
  ResourceChangeScannerConfiguration sconf=ResourceFactory.getResourceChangeScannerService().newResourceChangeScannerConfiguration();
  sconf.setProperty("drools.resource.scanner.interval","2");
  ResourceFactory.getResourceChangeScannerService().configure(sconf);
  KnowledgeAgentConfiguration aconf=KnowledgeAgentFactory.newKnowledgeAgentConfiguration();
  aconf.setProperty("drools.agent.scanDirectories","true");
  aconf.setProperty("drools.agent.scanResources","true");
  aconf.setProperty("drools.agent.newInstance","" + newInstance);
  KnowledgeAgent kagent=KnowledgeAgentFactory.newKnowledgeAgent("test agent",kbase,aconf);
  final KnowledgeAgentEventListenerTest test=this;
  kagent.addEventListener(new KnowledgeAgentEventListener(){
    public void beforeChangeSetApplied(    BeforeChangeSetAppliedEvent event){
      beforeChangeSetApplied++;
    }
    public void afterChangeSetApplied(    AfterChangeSetAppliedEvent event){
      afterChangeSetApplied++;
synchronized (lock) {
        changeSetApplied=true;
        lock.notifyAll();
      }
    }
    public void beforeChangeSetProcessed(    BeforeChangeSetProcessedEvent event){
      beforeChangeSetProcessed++;
    }
    public void afterChangeSetProcessed(    AfterChangeSetProcessedEvent event){
      afterChangeSetProcessed++;
    }
    public void beforeResourceProcessed(    BeforeResourceProcessedEvent event){
      beforeResourceProcessed++;
    }
    public void afterResourceProcessed(    AfterResourceProcessedEvent event){
      afterResourceProcessed++;
    }
    public void knowledgeBaseUpdated(    KnowledgeBaseUpdatedEvent event){
      kbaseUpdated=true;
    }
    public void resourceCompilationFailed(    ResourceCompilationFailedEvent event){
      compilationErrors=true;
    }
  }
);
  assertEquals("test agent",kagent.getName());
  return kagent;
}
