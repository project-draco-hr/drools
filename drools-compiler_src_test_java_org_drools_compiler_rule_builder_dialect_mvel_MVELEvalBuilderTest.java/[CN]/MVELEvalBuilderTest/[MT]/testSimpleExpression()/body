{
  InternalKnowledgePackage pkg=new KnowledgePackageImpl("pkg1");
  final RuleDescr ruleDescr=new RuleDescr("rule 1");
  KnowledgeBuilderImpl pkgBuilder=new KnowledgeBuilderImpl(pkg);
  final KnowledgeBuilderConfigurationImpl conf=pkgBuilder.getBuilderConfiguration();
  DialectCompiletimeRegistry dialectRegistry=pkgBuilder.getPackageRegistry(pkg.getName()).getDialectCompiletimeRegistry();
  MVELDialect mvelDialect=(MVELDialect)dialectRegistry.getDialect("mvel");
  final InstrumentedBuildContent context=new InstrumentedBuildContent(pkgBuilder,ruleDescr,dialectRegistry,pkg,mvelDialect);
  final InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final InternalReadAccessor extractor=store.getReader(Cheese.class,"price",getClass().getClassLoader());
  final Pattern pattern=new Pattern(0,new ClassObjectType(int.class));
  final Declaration declaration=new Declaration("a",extractor,pattern);
  final Map map=new HashMap();
  map.put("a",declaration);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  final EvalDescr evalDescr=new EvalDescr();
  evalDescr.setContent("a == 10");
  final MVELEvalBuilder builder=new MVELEvalBuilder();
  final EvalCondition eval=(EvalCondition)builder.build(context,evalDescr);
  ((MVELEvalExpression)eval.getEvalExpression()).compile((MVELDialectRuntimeData)pkgBuilder.getPackageRegistry(pkg.getName()).getDialectRuntimeRegistry().getDialectData("mvel"));
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  StatefulKnowledgeSessionImpl ksession=(StatefulKnowledgeSessionImpl)kBase.newStatefulKnowledgeSession();
  MockLeftTupleSink sink=new MockLeftTupleSink();
  final Cheese cheddar=new Cheese("cheddar",10);
  final InternalFactHandle f0=(InternalFactHandle)ksession.insert(cheddar);
  final LeftTupleImpl tuple=new LeftTupleImpl(f0,sink,true);
  f0.removeLeftTuple(tuple);
  Object evalContext=eval.createContext();
  assertTrue(eval.isAllowed(tuple,ksession,evalContext));
  cheddar.setPrice(9);
  ksession.update(f0,cheddar);
  assertFalse(eval.isAllowed(tuple,ksession,evalContext));
}
