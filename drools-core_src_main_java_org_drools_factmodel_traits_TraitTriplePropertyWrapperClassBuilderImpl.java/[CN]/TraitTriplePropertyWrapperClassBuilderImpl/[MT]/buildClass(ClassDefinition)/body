{
  ClassWriter cw=new ClassWriter(0);
  FieldVisitor fv;
  MethodVisitor mv;
  long mask=TraitRegistry.getInstance().getFieldMask(trait.getName(),core.getDefinedClass().getName());
  String name=TraitFactory.getPropertyWrapperName(trait,core);
  String masterName=TraitFactory.getProxyName(trait,core);
  String internalWrapper=BuildUtils.getInternalType(name);
  String descrCore=BuildUtils.getTypeDescriptor(core.getClassName());
  cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,internalWrapper,null,"org/drools/factmodel/traits/TripleBasedStruct",new String[]{"java/io/Serializable"});
  cw.visitInnerClass("java/util/Map$Entry","java/util/Map","Entry",ACC_PUBLIC + ACC_STATIC + ACC_ABSTRACT+ ACC_INTERFACE);
  for (  FieldDefinition fld : core.getFieldsDefinitions()) {
    fv=cw.visitField(ACC_PUBLIC + ACC_STATIC,fld.getName() + "_reader","Lorg/drools/spi/InternalReadAccessor;",null,null);
    fv.visitEnd();
    fv=cw.visitField(ACC_PUBLIC + ACC_STATIC,fld.getName() + "_writer","Lorg/drools/spi/WriteAccessor;",null,null);
    fv.visitEnd();
  }
{
    fv=cw.visitField(0,"object",descrCore,null,null);
    fv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"<init>","()V",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,"org/drools/factmodel/traits/TripleBasedStruct","<init>","()V");
    mv.visitInsn(RETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"<init>","(" + descrCore + "Lorg/drools/core/util/TripleStore;)V",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,"org/drools/factmodel/traits/TripleBasedStruct","<init>","()V");
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitFieldInsn(PUTFIELD,internalWrapper,"object",descrCore);
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,2);
    mv.visitFieldInsn(PUTFIELD,internalWrapper,"store","Lorg/drools/core/util/TripleStore;");
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,2);
    mv.visitMethodInsn(INVOKEVIRTUAL,"org/drools/core/util/TripleStore","getId","()Ljava/lang/String;");
    mv.visitFieldInsn(PUTFIELD,internalWrapper,"storeId","Ljava/lang/String;");
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,internalWrapper,"initSoftFields","()V");
    mv.visitInsn(RETURN);
    mv.visitMaxs(2,3);
    mv.visitEnd();
  }
  buildInitSoftFields(cw,internalWrapper,trait,mask);
  buildClearSoftFields(cw,internalWrapper,trait,mask);
  buildSize(cw,name,core.getClassName(),trait,core,mask);
  buildIsEmpty(cw,name,core.getClassName(),trait,core,mask);
  buildGet(cw,name,core.getClassName(),trait,core,mask);
  buildPut(cw,name,core.getClassName(),trait,core,mask);
  buildClear(cw,name,core.getClassName(),trait,core,mask);
  buildRemove(cw,name,core.getClassName(),trait,core,mask);
  buildContainsKey(cw,name,core.getClassName(),trait,core,mask);
  buildContainsValue(cw,name,core.getClassName(),trait,core,mask);
  buildKeyset(cw,name,core.getClassName(),trait,core,mask);
  buildValues(cw,name,core.getClassName(),trait,core,mask);
  buildEntryset(cw,name,core.getClassName(),trait,core,mask);
  buildCommonMethods(cw,name);
  buildSpecificMethods(cw,name,core);
  buildExtensionMethods(cw,name,core);
  cw.visitEnd();
  return cw.toByteArray();
}
