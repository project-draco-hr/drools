{
  int size=0;
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,wrapperName,"store",Type.getDescriptor(TripleStore.class));
  mv.visitVarInsn(ALOAD,0);
  mv.visitLdcInsn(field.getName());
  mv.visitMethodInsn(INVOKEVIRTUAL,wrapperName,"propertyKey","(" + Type.getDescriptor(Object.class) + ")"+ Type.getDescriptor(Triple.class));
  mv.visitMethodInsn(INVOKEVIRTUAL,Type.getInternalName(TripleStore.class),"contains","(" + Type.getDescriptor(Triple.class) + ")Z");
  Label l0=new Label();
  mv.visitJumpInsn(IFNE,l0);
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,wrapperName,"store",Type.getDescriptor(TripleStore.class));
  mv.visitVarInsn(ALOAD,0);
  mv.visitLdcInsn(field.getName());
  mv.visitInsn(BuildUtils.zero(field.getTypeName()));
  if (BuildUtils.isPrimitive(field.getTypeName())) {
    TraitFactory.valueOf(mv,field.getTypeName());
    size=BuildUtils.sizeOf(field.getTypeName());
  }
 else {
    size=2;
  }
  mv.visitMethodInsn(INVOKEVIRTUAL,wrapperName,"property","(" + Type.getDescriptor(String.class) + Type.getDescriptor(Object.class)+ ")"+ Type.getDescriptor(Triple.class));
  mv.visitInsn(ICONST_1);
  mv.visitMethodInsn(INVOKEVIRTUAL,Type.getInternalName(TripleStore.class),"put","(" + Type.getDescriptor(Triple.class) + "Z)Z");
  mv.visitInsn(POP);
  mv.visitLabel(l0);
  return size;
}
