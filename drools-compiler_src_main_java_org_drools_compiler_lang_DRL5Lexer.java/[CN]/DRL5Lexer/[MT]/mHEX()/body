{
  try {
    int _type=HEX;
    int _channel=DEFAULT_TOKEN_CHANNEL;
{
      match('0');
      if (state.failed)       return;
      if (input.LA(1) == 'X' || input.LA(1) == 'x') {
        input.consume();
        state.failed=false;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      int cnt16=0;
      loop16:       while (true) {
        int alt16=2;
        int LA16_0=input.LA(1);
        if (((LA16_0 >= '0' && LA16_0 <= '9') || (LA16_0 >= 'A' && LA16_0 <= 'F') || (LA16_0 >= 'a' && LA16_0 <= 'f'))) {
          alt16=1;
        }
switch (alt16) {
case 1:
{
            if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'F') || (input.LA(1) >= 'a' && input.LA(1) <= 'f')) {
              input.consume();
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        break;
default :
      if (cnt16 >= 1)       break loop16;
    if (state.backtracking > 0) {
      state.failed=true;
      return;
    }
  EarlyExitException eee=new EarlyExitException(16,input);
throw eee;
}
cnt16++;
}
int alt17=2;
int LA17_0=input.LA(1);
if ((LA17_0 == 'I' || LA17_0 == 'L' || LA17_0 == 'l')) {
alt17=1;
}
switch (alt17) {
case 1:
{
if (input.LA(1) == 'I' || input.LA(1) == 'L' || input.LA(1) == 'l') {
input.consume();
state.failed=false;
}
 else {
if (state.backtracking > 0) {
  state.failed=true;
  return;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
}
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
}
