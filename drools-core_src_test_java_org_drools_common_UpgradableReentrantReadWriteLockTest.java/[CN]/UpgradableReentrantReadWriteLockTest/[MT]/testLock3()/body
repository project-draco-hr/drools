{
  final int THREADS=10;
  final UpgradableReentrantReadWriteLock lock=new UpgradableReentrantReadWriteLock(true);
  final CyclicBarrier sync=new CyclicBarrier(THREADS);
  final AtomicBoolean success=new AtomicBoolean(true);
  Runnable r1=new Runnable(){
    public void run(){
      try {
        lock.readLock();
        sync.await();
        lock.writeLock();
        lock.writeUnlock();
        lock.readUnlock();
      }
 catch (      Exception e) {
        e.printStackTrace();
        success.set(false);
      }
    }
  }
;
  Runnable r2=new Runnable(){
    public void run(){
      try {
        sync.await();
        lock.writeLock();
        lock.writeUnlock();
      }
 catch (      Exception e) {
        e.printStackTrace();
        success.set(false);
      }
    }
  }
;
  Thread[] threads=new Thread[THREADS];
  for (int i=0; i < THREADS; i++) {
    threads[i]=new Thread(i % 2 == 0 ? r1 : r2,"T-" + i);
    threads[i].start();
  }
  for (int i=0; i < THREADS; i++) {
    threads[i].join();
  }
  Assert.assertTrue(success.get());
}
