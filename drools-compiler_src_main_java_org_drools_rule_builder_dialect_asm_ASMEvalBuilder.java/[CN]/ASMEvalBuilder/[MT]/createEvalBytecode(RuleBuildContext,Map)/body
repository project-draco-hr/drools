{
  final InvokerDataProvider data=new InvokerContext(vars);
  final ClassGenerator generator=createInvokerClassGenerator(data,ruleContext).setInterfaces(EvalExpression.class,CompiledInvoker.class);
  generator.addMethod(ACC_PUBLIC,"createContext",generator.methodDescr(Object.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      mv.visitInsn(ACONST_NULL);
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"clone",generator.methodDescr(EvalExpression.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      mv.visitVarInsn(ALOAD,0);
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"replaceDeclaration",generator.methodDescr(null,Declaration.class,Declaration.class)).addMethod(ACC_PUBLIC,"evaluate",generator.methodDescr(Boolean.TYPE,Tuple.class,Declaration[].class,WorkingMemory.class,Object.class),new String[]{"java/lang/Exception"},new InvokerGenerator.EvaluateMethod(){
    public void body(    MethodVisitor mv){
      final Declaration[] declarations=(Declaration[])vars.get("declarations");
      final String[] declarationTypes=(String[])vars.get("declarationTypes");
      final String[] globals=(String[])vars.get("globals");
      final String[] globalTypes=(String[])vars.get("globalTypes");
      objAstorePos=5;
      int[] declarationsParamsPos=parseDeclarations(declarations,declarationTypes,2,1,3,true);
      StringBuilder evalMethodDescr=new StringBuilder("(");
      for (int i=0; i < declarations.length; i++) {
        load(declarationsParamsPos[i]);
        evalMethodDescr.append(typeDescr(declarationTypes[i]));
      }
      parseGlobals(globals,globalTypes,3,evalMethodDescr);
      evalMethodDescr.append(")Z");
      mv.visitMethodInsn(INVOKESTATIC,data.getInternalRuleClassName(),data.getMethodName(),evalMethodDescr.toString());
      mv.visitInsn(IRETURN);
    }
  }
);
  return generator.generateBytecode();
}
