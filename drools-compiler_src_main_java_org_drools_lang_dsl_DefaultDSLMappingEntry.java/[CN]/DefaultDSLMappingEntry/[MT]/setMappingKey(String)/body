{
  this.key=key;
  if (key != null) {
    final Matcher m=varFinder.matcher(key.replaceAll("\\$","\\\\\\$"));
    final StringBuffer buf=new StringBuffer();
    int counter=1;
    while (m.find()) {
      if (this.variables == Collections.EMPTY_MAP) {
        this.variables=new HashMap(2);
      }
      this.variables.put(m.group(2),new Integer(counter++));
      m.appendReplacement(buf,m.group(1) + "(.*?)");
    }
    m.appendTail(buf);
    if (buf.toString().endsWith("(.*?)")) {
      buf.append("$");
    }
    String pat=buf.toString().replaceAll("\\s+","\\\\s*");
    if (pat.trim().startsWith("-") && (!pat.trim().startsWith("-\\s*"))) {
      pat=pat.substring(0,pat.indexOf('-') + 1) + "\\s*" + pat.substring(pat.indexOf('-') + 1);
    }
    this.keyPattern=Pattern.compile(pat,Pattern.DOTALL | Pattern.MULTILINE);
  }
 else {
    this.keyPattern=null;
  }
  this.setMappingValue(this.value);
}
