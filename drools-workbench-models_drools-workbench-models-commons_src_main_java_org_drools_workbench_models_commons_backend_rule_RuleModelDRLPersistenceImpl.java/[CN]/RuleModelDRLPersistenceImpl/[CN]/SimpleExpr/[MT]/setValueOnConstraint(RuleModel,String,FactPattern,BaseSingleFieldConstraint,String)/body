{
  String type=null;
  if (value.contains("@{")) {
    con.setConstraintValueType(BaseSingleFieldConstraint.TYPE_TEMPLATE);
    con.setValue(unwrapTemplateKey(value));
  }
 else   if (value.startsWith("\"")) {
    type=DataType.TYPE_STRING;
    con.setConstraintValueType(SingleFieldConstraint.TYPE_LITERAL);
    con.setValue(value.substring(1,value.length() - 1));
  }
 else   if (value.startsWith("(")) {
    if (operator != null && operator.contains("in")) {
      value=unwrapParenthesis(value);
      type=value.startsWith("\"") ? DataType.TYPE_STRING : DataType.TYPE_NUMERIC_INTEGER;
      con.setConstraintValueType(SingleFieldConstraint.TYPE_LITERAL);
      con.setValue(value);
    }
 else {
      con.setConstraintValueType(SingleFieldConstraint.TYPE_RET_VALUE);
      con.setValue(unwrapParenthesis(value));
    }
  }
 else {
    if (!Character.isDigit(value.charAt(0))) {
      if (value.equals("true") || value.equals("false")) {
        type=DataType.TYPE_BOOLEAN;
        con.setConstraintValueType(BaseSingleFieldConstraint.TYPE_ENUM);
      }
 else       if (isEnumerationValue(m,factPattern,con)) {
        type=DataType.TYPE_COMPARABLE;
        con.setConstraintValueType(SingleFieldConstraint.TYPE_ENUM);
      }
 else       if (value.indexOf('.') > 0 && boundParams.containsKey(value.substring(0,value.indexOf('.')).trim())) {
        con.setExpressionValue(parseExpression(m,null,value,new ExpressionFormLine()));
        con.setConstraintValueType(BaseSingleFieldConstraint.TYPE_EXPR_BUILDER_VALUE);
        value="";
      }
 else       if (boundParams.containsKey(value)) {
        con.setConstraintValueType(SingleFieldConstraint.TYPE_VARIABLE);
      }
 else {
        con.setConstraintValueType(SingleFieldConstraint.TYPE_RET_VALUE);
      }
    }
 else {
      if (value.endsWith("I")) {
        type=DataType.TYPE_NUMERIC_BIGINTEGER;
        value=value.substring(0,value.length() - 1);
      }
 else       if (value.endsWith("B")) {
        type=DataType.TYPE_NUMERIC_BIGDECIMAL;
        value=value.substring(0,value.length() - 1);
      }
 else       if (value.endsWith("f")) {
        type=DataType.TYPE_NUMERIC_FLOAT;
      }
 else       if (value.endsWith("d")) {
        type=DataType.TYPE_NUMERIC_DOUBLE;
      }
 else {
        type=DataType.TYPE_NUMERIC_INTEGER;
      }
      con.setConstraintValueType(SingleFieldConstraint.TYPE_LITERAL);
    }
    con.setValue(value);
  }
  if (con instanceof SingleFieldConstraint) {
    ((SingleFieldConstraint)con).setFieldType(type);
  }
 else   if (con instanceof ConnectiveConstraint) {
    ((ConnectiveConstraint)con).setFieldType(type);
  }
  return type;
}
