{
  final Set<String> potentialOperators=new HashSet<String>();
  for (  Operator op : Operator.getAllOperators()) {
    String opString=op.getOperatorString();
    if (op.isNegated()) {
      if (expr.contains(" not " + opString)) {
        return "not " + opString;
      }
    }
    int opPos=expr.indexOf(opString);
    if (opPos >= 0 && !isInQuote(expr,opPos) && !(Character.isLetter(opString.charAt(0)) && (expr.length() == opPos + opString.length() || Character.isLetter(expr.charAt(opPos + opString.length())) || (opPos > 0 && Character.isLetter(expr.charAt(opPos - 1)))))) {
      potentialOperators.add(opString);
    }
  }
  String operator="";
  if (!potentialOperators.isEmpty()) {
    for (    String potentialOperator : potentialOperators) {
      if (potentialOperator.length() > operator.length()) {
        operator=potentialOperator;
      }
    }
  }
  if (!operator.isEmpty()) {
    return operator;
  }
  if (expr.contains(" not in ")) {
    return "not in";
  }
  if (expr.contains(" in ")) {
    return "in";
  }
  return null;
}
