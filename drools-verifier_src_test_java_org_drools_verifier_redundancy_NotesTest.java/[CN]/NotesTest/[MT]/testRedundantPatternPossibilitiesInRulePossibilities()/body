{
  KieSession session=getStatelessKieSession(this.getClass().getResourceAsStream("Notes.drl"));
  VerifierRule rule=VerifierComponentMockFactory.createRule1();
  Pattern pattern=VerifierComponentMockFactory.createPattern1();
  Collection<Object> objects=new ArrayList<Object>();
  SubPattern left=new SubPattern(pattern,0);
  SubPattern right=new SubPattern(pattern,1);
  Redundancy redundancy=new Redundancy(left,right);
  SubRule possibility=new SubRule(rule,0);
  possibility.add(left);
  possibility.add(right);
  objects.add(left);
  objects.add(right);
  objects.add(redundancy);
  objects.add(possibility);
  VerifierReport result=VerifierReportFactory.newVerifierReport();
  session.setGlobal("result",result);
  for (  Object o : objects) {
    session.insert(o);
  }
  session.fireAllRules(new RuleNameMatchesAgendaFilter("Find redundant pattern possibilities from rule possibilities"));
  Collection<VerifierMessageBase> notes=result.getBySeverity(Severity.NOTE);
  assertEquals(1,notes.size());
  VerifierMessageBase note=notes.iterator().next();
  Iterator<Cause> causes=note.getCauses().iterator();
  assertEquals(left,causes.next());
  assertEquals(right,causes.next());
}
