{
  KnowledgeBase kbase=buildKnowledgeBase(" A()  not ( B() and C() ) \n");
  ReteooWorkingMemoryInterface wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession()).session;
  ObjectTypeNode aotn=getObjectTypeNode(kbase,A.class);
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)aotn.getSinkPropagator().getSinks()[0];
  JoinNode bNode=(JoinNode)liaNode.getSinkPropagator().getSinks()[0];
  JoinNode cNode=(JoinNode)bNode.getSinkPropagator().getSinks()[0];
  RightInputAdapterNode riaNode=(RightInputAdapterNode)cNode.getSinkPropagator().getSinks()[0];
  NotNode notNode=(NotNode)liaNode.getSinkPropagator().getSinks()[1];
  RuleTerminalNode rtn1=(RuleTerminalNode)notNode.getSinkPropagator().getSinks()[0];
  wm.insert(new A());
  wm.insert(new B());
  wm.insert(new C());
  LiaNodeMemory liaMem=(LiaNodeMemory)wm.getNodeMemory(liaNode);
  SegmentMemory smem=liaMem.getSegmentMemory();
  assertEquals(liaNode,smem.getRootNode());
  assertEquals(rtn1,smem.getTipNode());
  assertNull(smem.getNext());
  assertNull(smem.getFirst());
  SegmentMemory bSmem=wm.getNodeMemory(bNode).getSegmentMemory();
  assertEquals(bNode,bSmem.getRootNode());
  assertEquals(riaNode,bSmem.getTipNode());
  BetaMemory bm=(BetaMemory)wm.getNodeMemory(notNode);
  assertEquals(bSmem,bm.getRiaRuleMemory().getSegmentMemory());
}
