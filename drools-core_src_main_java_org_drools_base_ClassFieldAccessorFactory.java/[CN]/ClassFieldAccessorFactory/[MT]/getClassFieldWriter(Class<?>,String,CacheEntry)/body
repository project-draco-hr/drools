{
  ByteArrayClassLoader byteArrayClassLoader=cache.getByteArrayClassLoader();
  Map<Class<?>,ClassFieldInspector> inspectors=cache.getInspectors();
  try {
    ClassFieldInspector inspector=inspectors.get(clazz);
    if (inspector == null) {
      inspector=new ClassFieldInspector(clazz);
      inspectors.put(clazz,inspector);
    }
    final Method setterMethod=(Method)inspector.getSetterMethods().get(fieldName);
    if (setterMethod != null) {
      final Class<?> fieldType=setterMethod.getParameterTypes()[0];
      final String className=ClassFieldAccessorFactory.BASE_PACKAGE + "/" + Type.getInternalName(clazz)+ Math.abs(System.identityHashCode(clazz))+ "$"+ setterMethod.getName();
      final byte[] bytes=dumpWriter(clazz,className,setterMethod,fieldType,clazz.isInterface());
      final Class<?> newClass=byteArrayClassLoader.defineClass(className.replace('/','.'),bytes,PROTECTION_DOMAIN);
      final Integer index=(Integer)inspector.getFieldNames().get(fieldName);
      final ValueType valueType=ValueType.determineValueType(fieldType);
      final Object[] params={index,fieldType,valueType};
      return (BaseClassFieldWriter)newClass.getConstructors()[0].newInstance(params);
    }
 else {
      throw new RuntimeDroolsException("Field/method '" + fieldName + "' not found for class '"+ clazz.getName()+ "'");
    }
  }
 catch (  final RuntimeDroolsException e) {
    throw e;
  }
catch (  final Exception e) {
    throw new RuntimeDroolsException(e);
  }
}
