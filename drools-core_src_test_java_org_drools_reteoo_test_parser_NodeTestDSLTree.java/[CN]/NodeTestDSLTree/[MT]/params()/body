{
  NodeTestDSLTree.params_return retval=new NodeTestDSLTree.params_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree VT_PARAMS16=null;
  NodeTestDSLTree.param_chunk_return param_chunk17=null;
  CommonTree VT_PARAMS16_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      _last=(CommonTree)input.LT(1);
{
        CommonTree _save_last_1=_last;
        CommonTree _first_1=null;
        CommonTree root_1=(CommonTree)adaptor.nil();
        _last=(CommonTree)input.LT(1);
        VT_PARAMS16=(CommonTree)match(input,VT_PARAMS,FOLLOW_VT_PARAMS_in_params215);
        VT_PARAMS16_tree=(CommonTree)adaptor.dupNode(VT_PARAMS16);
        root_1=(CommonTree)adaptor.becomeRoot(VT_PARAMS16_tree,root_1);
        match(input,Token.DOWN,null);
        int cnt9=0;
        loop9:         do {
          int alt9=2;
          int LA9_0=input.LA(1);
          if ((LA9_0 == VT_CHUNK)) {
            alt9=1;
          }
switch (alt9) {
case 1:
{
              _last=(CommonTree)input.LT(1);
              pushFollow(FOLLOW_param_chunk_in_params217);
              param_chunk17=param_chunk();
              state._fsp--;
              adaptor.addChild(root_1,param_chunk17.getTree());
            }
          break;
default :
        if (cnt9 >= 1)         break loop9;
      EarlyExitException eee=new EarlyExitException(9,input);
    throw eee;
}
cnt9++;
}
 while (true);
match(input,Token.UP,null);
adaptor.addChild(root_0,root_1);
_last=_save_last_1;
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
