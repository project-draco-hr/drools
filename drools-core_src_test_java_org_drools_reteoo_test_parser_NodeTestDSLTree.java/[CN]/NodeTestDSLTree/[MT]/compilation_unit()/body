{
  NodeTestDSLTree.compilation_unit_return retval=new NodeTestDSLTree.compilation_unit_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree VT_TEST_CASE1=null;
  NodeTestDSLTree.test_case_statement_return test_case_statement2=null;
  NodeTestDSLTree.import_statement_return import_statement3=null;
  NodeTestDSLTree.setup_return setup4=null;
  NodeTestDSLTree.teardown_return teardown5=null;
  NodeTestDSLTree.test_return test6=null;
  CommonTree VT_TEST_CASE1_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      _last=(CommonTree)input.LT(1);
{
        CommonTree _save_last_1=_last;
        CommonTree _first_1=null;
        CommonTree root_1=(CommonTree)adaptor.nil();
        _last=(CommonTree)input.LT(1);
        VT_TEST_CASE1=(CommonTree)match(input,VT_TEST_CASE,FOLLOW_VT_TEST_CASE_in_compilation_unit50);
        VT_TEST_CASE1_tree=(CommonTree)adaptor.dupNode(VT_TEST_CASE1);
        root_1=(CommonTree)adaptor.becomeRoot(VT_TEST_CASE1_tree,root_1);
        match(input,Token.DOWN,null);
        _last=(CommonTree)input.LT(1);
        pushFollow(FOLLOW_test_case_statement_in_compilation_unit52);
        test_case_statement2=test_case_statement();
        state._fsp--;
        adaptor.addChild(root_1,test_case_statement2.getTree());
        loop1:         do {
          int alt1=2;
          int LA1_0=input.LA(1);
          if ((LA1_0 == VK_IMPORT)) {
            alt1=1;
          }
switch (alt1) {
case 1:
{
              _last=(CommonTree)input.LT(1);
              pushFollow(FOLLOW_import_statement_in_compilation_unit54);
              import_statement3=import_statement();
              state._fsp--;
              adaptor.addChild(root_1,import_statement3.getTree());
            }
          break;
default :
        break loop1;
    }
  }
 while (true);
  int alt2=2;
  int LA2_0=input.LA(1);
  if ((LA2_0 == VK_SETUP)) {
    alt2=1;
  }
switch (alt2) {
case 1:
{
      _last=(CommonTree)input.LT(1);
      pushFollow(FOLLOW_setup_in_compilation_unit57);
      setup4=setup();
      state._fsp--;
      adaptor.addChild(root_1,setup4.getTree());
    }
  break;
}
int alt3=2;
int LA3_0=input.LA(1);
if ((LA3_0 == VK_TEARDOWN)) {
alt3=1;
}
switch (alt3) {
case 1:
{
  _last=(CommonTree)input.LT(1);
  pushFollow(FOLLOW_teardown_in_compilation_unit60);
  teardown5=teardown();
  state._fsp--;
  adaptor.addChild(root_1,teardown5.getTree());
}
break;
}
loop4: do {
int alt4=2;
int LA4_0=input.LA(1);
if ((LA4_0 == VK_TEST)) {
alt4=1;
}
switch (alt4) {
case 1:
{
_last=(CommonTree)input.LT(1);
pushFollow(FOLLOW_test_in_compilation_unit63);
test6=test();
state._fsp--;
adaptor.addChild(root_1,test6.getTree());
}
break;
default :
break loop4;
}
}
 while (true);
match(input,Token.UP,null);
adaptor.addChild(root_0,root_1);
_last=_save_last_1;
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
