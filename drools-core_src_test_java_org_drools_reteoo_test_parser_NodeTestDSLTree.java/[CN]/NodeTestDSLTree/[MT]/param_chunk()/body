{
  NodeTestDSLTree.param_chunk_return retval=new NodeTestDSLTree.param_chunk_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree VT_CHUNK18=null;
  CommonTree VT_CHUNK18_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      _last=(CommonTree)input.LT(1);
      VT_CHUNK18=(CommonTree)match(input,VT_CHUNK,FOLLOW_VT_CHUNK_in_param_chunk233);
      VT_CHUNK18_tree=(CommonTree)adaptor.dupNode(VT_CHUNK18);
      adaptor.addChild(root_0,VT_CHUNK18_tree);
    }
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
