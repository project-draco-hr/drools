{
  BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  memory.add(leftTuple);
  BetaNodeBinder binder=getJoinNodeBinder();
  for (Iterator it=memory.rightObjectIterator(); it.hasNext(); ) {
    ObjectMatches objectMatches=(ObjectMatches)it.next();
    FactHandleImpl handle=objectMatches.getFactHandle();
    if (binder.isAllowed(handle,leftTuple,workingMemory)) {
      TupleMatch tupleMatch=objectMatches.add(leftTuple);
      leftTuple.addMatch(handle,tupleMatch);
    }
  }
  if (leftTuple.matchesSize() == 0) {
    for (int i=0, size=getTupleSinks().size(); i < size; i++) {
      ReteTuple joined=new ReteTuple(leftTuple);
      leftTuple.addLinkedTuple(new LinkedListNodeWrapper(joined));
      ((TupleSink)getTupleSinks().get(i)).assertTuple(joined,context,workingMemory);
    }
  }
}
