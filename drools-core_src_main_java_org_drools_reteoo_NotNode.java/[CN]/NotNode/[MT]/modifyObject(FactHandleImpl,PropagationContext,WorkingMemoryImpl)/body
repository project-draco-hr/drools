{
  BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  ObjectMatches objectMatches=memory.remove(workingMemory,handle);
  TupleMatch tupleMatch=objectMatches.getFirstTupleMatch();
  BetaNodeBinder binder=getJoinNodeBinder();
  for (Iterator it=memory.leftTupleIterator(workingMemory,handle); it.hasNext(); ) {
    ReteTuple leftTuple=(ReteTuple)it.next();
    if (tupleMatch != null && tupleMatch.getTuple() == leftTuple) {
      int previous=leftTuple.getTupleMatches().size();
      if (!binder.isAllowed(handle,leftTuple,workingMemory)) {
        leftTuple.removeMatch(handle);
        objectMatches.remove(tupleMatch);
      }
      if (previous == 0 && leftTuple.matchesSize() == 0) {
        propagateModifyTuple(leftTuple,context,workingMemory);
      }
 else       if (previous != 0 && leftTuple.matchesSize() == 0) {
        propagateAssertTuple(leftTuple,context,workingMemory);
      }
 else       if (previous == 0 && leftTuple.matchesSize() != 0) {
        propagateRetractTuple(leftTuple,context,workingMemory);
      }
      tupleMatch=(TupleMatch)tupleMatch.getNext();
    }
 else {
      int previousSize=leftTuple.matchesSize();
      attemptJoin(leftTuple,handle,objectMatches,binder,workingMemory);
      if (previousSize == 0 && leftTuple.matchesSize() != 0) {
        propagateRetractTuple(leftTuple,context,workingMemory);
      }
    }
  }
}
