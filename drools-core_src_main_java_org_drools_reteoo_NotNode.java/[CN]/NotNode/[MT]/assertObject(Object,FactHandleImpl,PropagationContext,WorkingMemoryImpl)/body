{
  BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  if (!memory.contains(handle)) {
    memory.add(handle);
    List retractKeyList=null;
    BetaNodeBinder binder=getJoinNodeBinder();
    for (Iterator it=memory.getLeftMemory().values().iterator(); it.hasNext(); ) {
      TupleMatches tupleMatches=(TupleMatches)it.next();
      int previousSize=tupleMatches.getMatches().size();
      ReteTuple leftTuple=tupleMatches.getTuple();
      if (binder.isAllowed(object,handle,leftTuple,workingMemory)) {
        tupleMatches.addMatch(handle);
      }
      int size=tupleMatches.getMatches().size();
      if (previousSize == 0 && size != 0) {
        if (retractKeyList == null) {
          retractKeyList=new ArrayList();
        }
        retractKeyList.add(leftTuple.getKey());
      }
    }
    if (retractKeyList != null) {
      propagateRetractTuples(retractKeyList,context,workingMemory);
    }
  }
}
