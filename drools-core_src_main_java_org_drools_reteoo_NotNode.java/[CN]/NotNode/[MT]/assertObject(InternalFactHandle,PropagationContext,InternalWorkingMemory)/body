{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  memory.getFactHandleMemory().add(handle);
  if (!this.hasLeftMemory) {
    return;
  }
  final Iterator it=memory.getTupleMemory().iterator(handle);
  this.constraints.updateFromFactHandle(workingMemory,handle);
  for (ReteTuple tuple=(ReteTuple)it.next(); tuple != null; tuple=(ReteTuple)it.next()) {
    if (this.constraints.isAllowedCachedRight(tuple)) {
      final int matches=tuple.getMatches();
      tuple.setMatches(matches + 1);
      if (matches == 0) {
        this.sink.propagateRetractTuple(tuple,context,workingMemory);
      }
    }
  }
}
