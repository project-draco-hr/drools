{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  memory.getObjectMemory().add(handle);
  Iterator it=memory.getTupleMemory().iterator();
  this.constraints.updateFromFactHandle(handle);
  for (ReteTuple tuple=(ReteTuple)it.next(); tuple != null; tuple=(ReteTuple)it.next()) {
    if (this.constraints.isAllowedCachedRight(tuple)) {
      int matches=tuple.getMatches();
      tuple.setMatches(matches + 1);
      this.sink.propagateRetractTuple(tuple,context,workingMemory);
    }
  }
}
