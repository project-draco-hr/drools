{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  RightTupleMemory rightMemory=memory.getRightTupleMemory();
  boolean useLeftMemory=true;
  if (!this.tupleMemoryEnabled) {
    Object object=((InternalFactHandle)context.getFactHandle()).getObject();
    if (memory.getLeftTupleMemory() == null || object instanceof DroolsQuery && !((DroolsQuery)object).isOpen()) {
      useLeftMemory=false;
    }
  }
  this.constraints.updateFromTuple(memory.getContext(),workingMemory,leftTuple);
  FastIterator it=getRightIterator(rightMemory);
  for (RightTuple rightTuple=getFirstRightTuple(leftTuple,rightMemory,context,it); rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
    if (this.constraints.isAllowedCachedLeft(memory.getContext(),rightTuple.getFactHandle())) {
      leftTuple.setBlocker(rightTuple);
      if (useLeftMemory) {
        rightTuple.addBlocked(leftTuple);
      }
      break;
    }
  }
  this.constraints.resetTuple(memory.getContext());
  if (leftTuple.getBlocker() == null) {
    if (useLeftMemory) {
      memory.getLeftTupleMemory().add(leftTuple);
    }
    this.sink.propagateAssertLeftTuple(leftTuple,context,workingMemory,useLeftMemory);
  }
}
