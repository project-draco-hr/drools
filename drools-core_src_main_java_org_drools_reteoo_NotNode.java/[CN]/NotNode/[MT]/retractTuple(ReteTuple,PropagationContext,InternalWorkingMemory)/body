{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  memory.remove(workingMemory,leftTuple);
  final Map matches=leftTuple.getTupleMatches();
  if (!matches.isEmpty()) {
    for (final Iterator it=matches.values().iterator(); it.hasNext(); ) {
      final TupleMatch tupleMatch=(TupleMatch)it.next();
      tupleMatch.getObjectMatches().remove(tupleMatch);
    }
  }
 else {
    LinkedList list=leftTuple.getLinkedTuples();
    for (LinkedListNode node=list.removeFirst(); node != null; node=list.getFirst()) {
      ReteTuple tuple=(ReteTuple)((LinkedListObjectWrapper)node).getObject();
      tuple.retractTuple(context,workingMemory);
    }
  }
}
