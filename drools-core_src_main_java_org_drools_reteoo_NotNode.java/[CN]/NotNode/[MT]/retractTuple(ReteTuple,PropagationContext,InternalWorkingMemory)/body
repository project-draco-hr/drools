{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  ReteTuple tuple=(ReteTuple)memory.getTupleMemory().remove(leftTuple);
  if (tuple == null) {
    return;
  }
  int matches=tuple.getMatches();
  int previousMatches=matches;
  Iterator it=memory.getObjectMemory().iterator(tuple);
  for (FactEntry entry=(FactEntry)it.next(); entry != null; entry=(FactEntry)it.next()) {
    InternalFactHandle handle=entry.getFactHandle();
    if (this.constraints.isAllowed(handle,tuple,workingMemory)) {
      matches--;
    }
  }
  tuple.setMatches(matches);
  if (previousMatches != 0 && matches == 0) {
    this.sink.propagateRetractTuple(tuple,context,workingMemory);
  }
}
