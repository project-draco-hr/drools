{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  final ObjectMatches objectMatches=memory.add(workingMemory,handle);
  final BetaNodeBinder binder=getJoinNodeBinder();
  for (final Iterator it=memory.leftTupleIterator(workingMemory,handle); it.hasNext(); ) {
    final ReteTuple leftTuple=(ReteTuple)it.next();
    final int previousSize=leftTuple.matchesSize();
    attemptJoin(leftTuple,handle,objectMatches,binder,workingMemory);
    if (previousSize == 0 && leftTuple.matchesSize() != 0) {
      propagateRetractTuple(leftTuple,context,workingMemory);
    }
  }
}
