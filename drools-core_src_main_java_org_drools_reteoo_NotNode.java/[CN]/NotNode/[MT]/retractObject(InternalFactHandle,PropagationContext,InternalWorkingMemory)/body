{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  final ObjectMatches objectMatches=memory.remove(workingMemory,handle);
  for (TupleMatch tupleMatch=objectMatches.getFirstTupleMatch(); tupleMatch != null; tupleMatch=(TupleMatch)tupleMatch.getNext()) {
    final ReteTuple leftTuple=tupleMatch.getTuple();
    final int previousSize=leftTuple.matchesSize();
    leftTuple.removeMatch(handle);
    if (previousSize != 0 && leftTuple.matchesSize() == 0) {
      LinkedList list=leftTuple.getLinkedTuples();
      for (LinkedListNode node=list.getFirst(); node != null; node=node.getNext()) {
        ReteTuple tuple=(ReteTuple)((LinkedListObjectWrapper)node).getObject();
        tuple.assertTuple(context,workingMemory);
      }
    }
  }
}
