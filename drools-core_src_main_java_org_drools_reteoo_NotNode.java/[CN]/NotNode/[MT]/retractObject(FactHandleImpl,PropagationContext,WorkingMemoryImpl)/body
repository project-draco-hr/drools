{
  BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  ObjectMatches objectMatches=memory.remove(handle);
  int k=0;
  for (TupleMatch tupleMatch=objectMatches.getFirstTupleMatch(); tupleMatch != null; tupleMatch=(TupleMatch)tupleMatch.getNext()) {
    ReteTuple leftTuple=tupleMatch.getTuple();
    int previousSize=leftTuple.matchesSize();
    leftTuple.removeMatch(handle);
    if (previousSize != 0 && leftTuple.matchesSize() == 0) {
      for (int i=0, size=getTupleSinks().size(); i < size; i++) {
        ReteTuple joined=new ReteTuple(leftTuple);
        leftTuple.addLinkedTuple(new LinkedListNodeWrapper(joined));
        ((TupleSink)getTupleSinks().get(i)).assertTuple(joined,context,workingMemory);
      }
    }
  }
}
