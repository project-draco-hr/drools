{
  Class<?> clazz=lookupFromCache(className);
  if (clazz != null && !classFilter.accept(clazz)) {
    clazz=null;
  }
  boolean isArray=false;
  StringBuilder arrayClassName=null;
  if (clazz == null && className.indexOf('[') > 0) {
    arrayClassName=new StringBuilder();
    isArray=true;
    int bracketIndex=className.indexOf('[');
    final String componentName=className.substring(0,bracketIndex);
    arrayClassName.append('[');
    while ((bracketIndex=className.indexOf('[',bracketIndex + 1)) > 0) {
      arrayClassName.append('[');
    }
    className=componentName;
  }
  boolean isPrimitive=false;
  if (clazz == null && internalNamesMap.containsKey(className)) {
    clazz=Class.forName("[" + internalNamesMap.get(className),true,this.classLoader).getComponentType();
    isPrimitive=true;
  }
  if (clazz == null) {
    try {
      clazz=this.classLoader.loadClass(className);
      if (!classFilter.accept(clazz)) {
        clazz=null;
      }
    }
 catch (    final ClassNotFoundException e) {
      clazz=null;
    }
  }
  if (clazz == null) {
    clazz=importClass(className,className);
    if (clazz != null && !classFilter.accept(clazz)) {
      clazz=null;
    }
  }
  if (clazz == null) {
    clazz=getClassFromImports(className,classFilter,imports);
  }
  if (clazz == null) {
    clazz=getClassFromImports(className,classFilter,implicitImports);
  }
  if (clazz == null) {
    clazz=defaultClass(className);
    if (clazz != null && !classFilter.accept(clazz)) {
      clazz=null;
    }
  }
  if (isArray) {
    if (isPrimitive) {
      arrayClassName.append(internalNamesMap.get(className));
    }
 else {
      if (clazz != null) {
        arrayClassName.append("L").append(clazz.getName()).append(";");
      }
 else {
        arrayClassName.append("L").append(className).append(";");
      }
    }
    try {
      clazz=Class.forName(arrayClassName.toString(),true,this.classLoader);
    }
 catch (    final ClassNotFoundException e) {
      clazz=null;
    }
  }
  if (clazz == null) {
    this.cachedImports.put(className,Void.class);
    throw new ClassNotFoundException("Unable to find class '" + className + "'");
  }
  this.cachedImports.put(clazz.getSimpleName(),clazz);
  return clazz;
}
