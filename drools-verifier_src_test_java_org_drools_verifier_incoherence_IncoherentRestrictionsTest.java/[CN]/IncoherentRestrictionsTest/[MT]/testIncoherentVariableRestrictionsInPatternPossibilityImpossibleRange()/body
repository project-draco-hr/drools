{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Restrictions.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Incoherent VariableRestrictions in pattern possibility, impossible range"));
  VerifierResult result=VerifierResultFactory.createVerifierResult();
  Collection<? extends Object> testData=getTestData(this.getClass().getResourceAsStream("RestrictionsTest.drl"),result.getVerifierData());
  session.setGlobal("result",result);
  session.executeWithResults(testData);
  Iterator<VerifierMessageBase> iter=result.getBySeverity(Severity.ERROR).iterator();
  Set<String> rulesThatHadErrors=new HashSet<String>();
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof VerifierMessage) {
      Pattern pattern=(Pattern)((VerifierMessage)o).getFaulty();
      rulesThatHadErrors.add(pattern.getRuleName());
    }
  }
  assertTrue(rulesThatHadErrors.remove("Incoherent restrictions 6"));
  if (!rulesThatHadErrors.isEmpty()) {
    for (    String string : rulesThatHadErrors) {
      fail("Rule " + string + " caused an error.");
    }
  }
}
