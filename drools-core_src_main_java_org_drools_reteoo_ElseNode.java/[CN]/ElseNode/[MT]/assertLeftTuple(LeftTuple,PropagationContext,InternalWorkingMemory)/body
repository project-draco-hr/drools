{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  RightTupleMemory rightMemory=memory.getRightTupleMemory();
  ContextEntry[] contextEntry=memory.getContext();
  boolean useLeftMemory=true;
  if (!this.tupleMemoryEnabled) {
    Object object=((InternalFactHandle)leftTuple.get(0)).getObject();
    if (!(object instanceof DroolsQuery) || !((DroolsQuery)object).isOpen()) {
      useLeftMemory=false;
    }
  }
  if (useLeftMemory) {
    memory.getLeftTupleMemory().add(leftTuple);
  }
  this.constraints.updateFromTuple(contextEntry,workingMemory,leftTuple);
  FastIterator it=getRightIterator(rightMemory);
  for (RightTuple rightTuple=getFirstRightTuple(leftTuple,rightMemory,context,it); rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
    final InternalFactHandle handle=rightTuple.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(contextEntry,handle)) {
      this.sink.propagateAssertLeftTuple(leftTuple,rightTuple,null,null,context,workingMemory,useLeftMemory);
    }
 else {
    }
  }
  this.constraints.resetTuple(contextEntry);
}
