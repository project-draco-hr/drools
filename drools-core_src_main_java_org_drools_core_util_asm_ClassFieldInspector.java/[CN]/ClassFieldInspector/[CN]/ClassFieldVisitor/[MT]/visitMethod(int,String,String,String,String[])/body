{
  final int mask=this.includeFinalMethods ? Opcodes.ACC_PUBLIC : Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL;
  if ((access & mask) == Opcodes.ACC_PUBLIC) {
    try {
      if (desc.startsWith("()") && (!name.equals("<init>")) && (!name.equals("<clinit>"))) {
        final Method method=this.clazz.getMethod(name,(Class[])null);
        if (method.getReturnType() != void.class) {
          final int fieldIndex=this.inspector.fieldNames.size();
          this.inspector.addToMapping(method,fieldIndex);
        }
      }
 else       if (name.startsWith("set")) {
        Method[] methods=this.clazz.getMethods();
        for (int i=0; i < methods.length; i++) {
          if (name.equals(methods[i].getName()) && desc.equals(Type.getMethodDescriptor(methods[i]))) {
            final int fieldIndex=this.inspector.fieldNames.size();
            this.inspector.addToMapping(methods[i],fieldIndex);
            break;
          }
        }
      }
    }
 catch (    final Exception e) {
      throw new RuntimeDroolsException("Error getting field access method: " + name + ": "+ e.getMessage(),e);
    }
  }
  return null;
}
