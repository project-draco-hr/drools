{
  String str="package org.simple;\n" + "global java.util.List list;\n" + "\n"+ "declare Bean\n"+ "  delay   : long = 30000\n"+ "  period  : long = 10000\n"+ "end\n"+ "\n"+ "rule init \n"+ "when \n"+ "then \n"+ " insert( new Bean() );\n"+ "end \n"+ "\n"+ "rule xxx\n"+ "  salience ($d) \n"+ "  timer( expr: $d, $p; start=3-JAN-2010 )\n"+ "when\n"+ "  Bean( $d : delay, $p : period )\n"+ "then\n"+ "  list.add( \"fired\" );\n"+ "end";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  KnowledgeSessionConfiguration conf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  conf.setOption(ClockTypeOption.get("pseudo"));
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(conf,null);
  List list=new ArrayList();
  PseudoClockScheduler timeService=(PseudoClockScheduler)ksession.<SessionClock>getSessionClock();
  timeService.advanceTime(new Date().getTime(),TimeUnit.MILLISECONDS);
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  assertEquals(0,list.size());
  timeService.advanceTime(20,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(0,list.size());
  timeService.advanceTime(15,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  timeService.advanceTime(3,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  timeService.advanceTime(2,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(2,list.size());
  timeService.advanceTime(10,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(3,list.size());
}
