{
  String drl="package org.kie.test;" + "global java.util.List list; \n" + "\n"+ "\n"+ "rule FireAtWill\n"+ "timer(int:0 100)\n"+ "when  \n"+ "then \n"+ "  list.add( 0 );\n"+ "end\n"+ "\n"+ "rule ImDone\n"+ "when\n"+ "  String( this == \"halt\" )\n"+ "then\n"+ "  drools.halt();\n"+ "end\n"+ "\n"+ "rule Hi \n"+ "salience 10 \n"+ "when \n"+ "  String( this == \"trigger\" ) \n"+ "then \n "+ "  list.add( 5 ); \n"+ "end \n"+ "\n"+ "rule Lo \n"+ "salience -5 \n"+ "when \n"+ "  String( this == \"trigger\" ) \n"+ "then \n "+ "  list.add( -5 ); \n"+ "end \n";
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new ByteArrayResource(drl.getBytes()));
  final Package pkg=builder.getPackage();
  RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  ruleBase=SerializationHelper.serializeObject(ruleBase);
  final StatefulSession ksession=ruleBase.newStatefulSession();
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  new Thread(new Runnable(){
    public void run(){
      ksession.fireUntilHalt();
    }
  }
).start();
  Thread.sleep(250);
  ksession.insert("halt");
  ksession.insert("trigger");
  Thread.sleep(300);
  new Thread(new Runnable(){
    public void run(){
      ksession.fireUntilHalt();
    }
  }
).start();
  Thread.sleep(200);
  assertEquals(java.util.Arrays.asList(0,0,0,5,0,0,0,-5,0,0),list);
}
