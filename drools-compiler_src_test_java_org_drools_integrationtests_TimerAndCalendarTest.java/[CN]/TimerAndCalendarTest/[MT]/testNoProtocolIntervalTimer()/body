{
  String str="";
  str+="package org.simple \n";
  str+="global java.util.List list \n";
  str+="rule xxx \n";
  str+="  duration (30s 10s) ";
  str+="when \n";
  str+="then \n";
  str+="  list.add(\"fired\"); \n";
  str+="end  \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    System.out.println(kbuilder.getErrors());
    assertTrue(kbuilder.hasErrors());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  KnowledgeSessionConfiguration conf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  conf.setOption(ClockTypeOption.get("pseudo"));
  List list=new ArrayList();
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(conf,null);
  PseudoClockScheduler timeService=(PseudoClockScheduler)ksession.getSessionClock();
  timeService.advanceTime(new Date().getTime(),TimeUnit.MILLISECONDS);
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  assertEquals(0,list.size());
  timeService.advanceTime(20,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(0,list.size());
  timeService.advanceTime(15,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  timeService.advanceTime(3,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  timeService.advanceTime(2,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(2,list.size());
  timeService.advanceTime(10,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(3,list.size());
}
