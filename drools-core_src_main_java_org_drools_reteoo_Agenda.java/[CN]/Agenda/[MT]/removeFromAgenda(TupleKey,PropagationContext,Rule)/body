{
  AgendaItem eachItem;
  Tuple tuple;
  ModuleImpl module=(ModuleImpl)modules.get(rule.getModule());
  Iterator itemIter=module.getActivationQueue().iterator();
  while (itemIter.hasNext()) {
    eachItem=(AgendaItem)itemIter.next();
    if (eachItem.getRule() == rule && eachItem.getKey().containsAll(key)) {
      itemIter.remove();
      itemIter=module.getActivationQueue().iterator();
      this.workingMemory.getAgendaEventSupport().fireActivationCancelled(rule,eachItem.getTuple());
      this.workingMemory.removeLogicalAssertions(eachItem,context,rule);
    }
  }
  itemIter=this.scheduledItems.values().iterator();
  while (itemIter.hasNext()) {
    eachItem=(AgendaItem)itemIter.next();
    if (eachItem.getRule() == rule && eachItem.getKey().containsAll(key)) {
      tuple=eachItem.getTuple();
      cancelItem(eachItem);
      itemIter.remove();
      this.workingMemory.getAgendaEventSupport().fireActivationCancelled(rule,tuple);
      this.workingMemory.removeLogicalAssertions(eachItem,context,rule);
    }
  }
  this.workingMemory.removeLogicalAssertions(key,context,rule);
}
