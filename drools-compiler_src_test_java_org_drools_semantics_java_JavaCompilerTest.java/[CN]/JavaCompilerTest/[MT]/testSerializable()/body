{
  RuleBaseManager manager=new RuleBaseManager();
  PackageDescr packageDescr=new PackageDescr("p1");
  RuleDescr ruleDescr=new RuleDescr("rule-1");
  packageDescr.addRule(ruleDescr);
  AndDescr lhs=new AndDescr();
  ruleDescr.setLhs(lhs);
  packageDescr.addGlobal("map","java.util.Map");
  ruleDescr.setConsequence("map.put(\"value\", new Integer(1) );");
  manager.addPackage(packageDescr);
  Package pkg=manager.getPackag("p1");
  Rule rule=pkg.getRule("rule-1");
  if (manager.getResults().get(rule) != null) {
    assertLength(0,((List)manager.getResults().get(rule)));
  }
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutput out=new ObjectOutputStream(bos);
  out.writeObject(pkg);
  out.close();
  byte[] bytes=bos.toByteArray();
  ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(bytes));
  Package newPkg=(Package)in.readObject();
  in.close();
  Rule newRule=newPkg.getRule("rule-1");
  RuleBaseImpl ruleBase=new RuleBaseImpl();
  ruleBase.getGlobalDeclarations().put("map",Map.class);
  WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  HashMap map=new HashMap();
  workingMemory.setGlobal("map",map);
  Tuple tuple=new MockTuple(new HashMap());
  Activation activation=new MockActivation(newRule,tuple);
  newRule.getConsequence().evaluate(activation,workingMemory);
  assertEquals(new Integer(1),map.get("value"));
}
