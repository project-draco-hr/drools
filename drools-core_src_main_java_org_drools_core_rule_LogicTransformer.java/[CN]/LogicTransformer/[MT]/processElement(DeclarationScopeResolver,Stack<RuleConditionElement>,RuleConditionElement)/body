{
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    for (    RuleConditionElement ruleConditionElement : pattern.getNestedElements()) {
      processElement(resolver,contextStack,ruleConditionElement);
    }
    for (    Constraint constraint : pattern.getConstraints()) {
      if (constraint instanceof Declaration) {
        continue;
      }
      replaceDeclarations(resolver,pattern,constraint);
    }
  }
 else   if (element instanceof EvalCondition) {
    processEvalCondition(resolver,(EvalCondition)element);
  }
 else   if (element instanceof Accumulate) {
    for (    RuleConditionElement rce : element.getNestedElements()) {
      processElement(resolver,contextStack,rce);
    }
    Accumulate accumulate=(Accumulate)element;
    replaceDeclarations(resolver,accumulate);
    accumulate.resetInnerDeclarationCache();
  }
 else   if (element instanceof From) {
    DataProvider provider=((From)element).getDataProvider();
    Declaration[] decl=provider.getRequiredDeclarations();
    for (    Declaration aDecl : decl) {
      Declaration resolved=resolver.getDeclaration(null,aDecl.getIdentifier());
      if (resolved != null && resolved != aDecl) {
        provider.replaceDeclaration(aDecl,resolved);
      }
 else       if (resolved == null) {
        Pattern old=aDecl.getPattern();
        Pattern current=resolver.findPatternByIndex(old.getIndex());
        if (current != null && old != current) {
          resolved=new Declaration(aDecl.getIdentifier(),aDecl.getExtractor(),current);
          provider.replaceDeclaration(aDecl,resolved);
        }
      }
    }
  }
 else   if (element instanceof QueryElement) {
    QueryElement qe=(QueryElement)element;
    Pattern pattern=qe.getResultPattern();
    for (    Entry<String,Declaration> entry : pattern.getInnerDeclarations().entrySet()) {
      Declaration resolved=resolver.getDeclaration(null,entry.getValue().getIdentifier());
      if (resolved != null && resolved != entry.getValue() && resolved.getPattern() != pattern) {
        entry.setValue(resolved);
      }
    }
    List<Integer> varIndexes=asList(qe.getVariableIndexes());
    for (int i=0; i < qe.getDeclIndexes().length; i++) {
      Declaration declr=(Declaration)qe.getArgTemplate()[qe.getDeclIndexes()[i]];
      Declaration resolved=resolver.getDeclaration(null,declr.getIdentifier());
      if (resolved != declr && resolved.getPattern() != pattern) {
        qe.getArgTemplate()[qe.getDeclIndexes()[i]]=resolved;
      }
      if (ClassObjectType.DroolsQuery_ObjectType.isAssignableFrom(resolved.getPattern().getObjectType())) {
        declr=pattern.addDeclaration(declr.getIdentifier());
        ArrayElementReader reader=new ArrayElementReader(new SelfReferenceClassFieldReader(Object[].class),qe.getDeclIndexes()[i],resolved.getDeclarationClass());
        declr.setReadAccessor(reader);
        varIndexes.add(qe.getDeclIndexes()[i]);
      }
    }
    qe.setVariableIndexes(toIntArray(varIndexes));
  }
 else   if (element instanceof ConditionalBranch) {
    processBranch(resolver,(ConditionalBranch)element);
  }
 else {
    contextStack.push(element);
    for (    RuleConditionElement ruleConditionElement : element.getNestedElements()) {
      processElement(resolver,contextStack,ruleConditionElement);
    }
    contextStack.pop();
  }
}
