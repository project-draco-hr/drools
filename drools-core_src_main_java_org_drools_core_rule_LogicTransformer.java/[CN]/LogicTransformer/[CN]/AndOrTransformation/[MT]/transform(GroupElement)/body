{
  final List<GroupElement> orsList=new ArrayList<GroupElement>();
  final RuleConditionElement[] others=new RuleConditionElement[parent.getChildren().size()];
  int permutations=1;
  int index=0;
  for (  final RuleConditionElement child : parent.getChildren()) {
    if ((child instanceof GroupElement) && ((GroupElement)child).isOr()) {
      permutations*=((GroupElement)child).getChildren().size();
      orsList.add((GroupElement)child);
    }
 else {
      others[index]=child;
    }
    index++;
  }
  parent.setType(GroupElement.OR);
  parent.getChildren().clear();
  final int[] indexes=new int[orsList.size()];
  for (int i=1; i <= permutations; i++) {
    final GroupElement and=GroupElementFactory.newAndInstance();
    int mod=1;
    for (int j=orsList.size() - 1; j >= 0; j--) {
      GroupElement or=orsList.get(j);
      and.getChildren().add(0,or.getChildren().get(indexes[j]).clone());
      if ((i % mod) == 0) {
        indexes[j]=(indexes[j] + 1) % or.getChildren().size();
      }
      mod*=or.getChildren().size();
    }
    for (int j=0; j < others.length; j++) {
      if (others[j] != null) {
        and.getChildren().add(j,others[j].clone());
      }
    }
    parent.addChild(and);
  }
  parent.pack();
}
