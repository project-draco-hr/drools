{
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null,null);
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase());
  final ClassFieldReader extractor=store.getReader(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue field=FieldFactory.getFieldValue("stilton");
  final LiteralConstraint constraint=new LiteralConstraint(extractor,equals.getEvaluator(ValueType.STRING_TYPE,Operator.EQUAL),field);
  final List list=new ArrayList();
  final Cheese cheese1=new Cheese("cheddar",20);
  final Cheese cheese2=new Cheese("brie",20);
  list.add(cheese1);
  list.add(cheese2);
  final MockDataProvider dataProvider=new MockDataProvider(list);
  final FromNode from=new FromNode(3,dataProvider,null,new AlphaNodeFieldConstraint[]{constraint},null,true);
  final MockLeftTupleSink sink=new MockLeftTupleSink(5);
  from.addTupleSink(sink);
  final Person person1=new Person("xxx1",30);
  final FactHandle person1Handle=workingMemory.insert(person1);
  final LeftTuple tuple1=new LeftTuple((DefaultFactHandle)person1Handle,from,true);
  from.assertLeftTuple(tuple1,context,workingMemory);
  assertEquals(0,sink.getAsserted().size());
  cheese1.setType("stilton");
  final Person person2=new Person("xxx2",30);
  final FactHandle person2Handle=workingMemory.insert(person2);
  final LeftTuple tuple2=new LeftTuple((DefaultFactHandle)person2Handle,from,true);
  from.assertLeftTuple(tuple2,context,workingMemory);
  final List asserted=sink.getAsserted();
  assertEquals(1,asserted.size());
  Tuple tuple=(Tuple)((Object[])asserted.get(0))[0];
  assertSame(person2,tuple.getFactHandles()[1].getObject());
  assertSame(cheese1,tuple.getFactHandles()[0].getObject());
  cheese2.setType("stilton");
  final Person person3=new Person("xxx2",30);
  final FactHandle person3Handle=workingMemory.insert(person3);
  final LeftTuple tuple3=new LeftTuple((DefaultFactHandle)person3Handle,from,true);
  from.assertLeftTuple(tuple3,context,workingMemory);
  assertEquals(3,asserted.size());
  tuple=(Tuple)((Object[])asserted.get(1))[0];
  assertSame(person3,tuple.getFactHandles()[1].getObject());
  assertSame(cheese1,tuple.getFactHandles()[0].getObject());
  tuple=(Tuple)((Object[])asserted.get(2))[0];
  assertSame(person3,tuple.getFactHandles()[1].getObject());
  assertSame(cheese2,tuple.getFactHandles()[0].getObject());
  assertNotSame(cheese1,cheese2);
}
