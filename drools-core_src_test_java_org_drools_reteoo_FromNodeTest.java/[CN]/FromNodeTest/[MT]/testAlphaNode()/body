{
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase());
  final ClassFieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"type");
  final FieldValue field=new MockField("stilton");
  final LiteralConstraint constraint=new LiteralConstraint(extractor,ValueType.STRING_TYPE.getEvaluator(Operator.EQUAL),field);
  List list=new ArrayList();
  Cheese cheese1=new Cheese("cheddar",20);
  Cheese cheese2=new Cheese("brie",20);
  list.add(cheese1);
  list.add(cheese2);
  MockDataProvider dataProvider=new MockDataProvider(list);
  FromNode from=new FromNode(3,dataProvider,null,new FieldConstraint[]{constraint},null);
  MockTupleSink sink=new MockTupleSink(5);
  from.addTupleSink(sink);
  Person person1=new Person("xxx1",30);
  FactHandle person1Handle=workingMemory.assertObject(person1);
  ReteTuple tuple1=new ReteTuple((DefaultFactHandle)person1Handle);
  from.assertTuple(tuple1,context,workingMemory);
  assertEquals(0,sink.getAsserted().size());
  cheese1.setType("stilton");
  Person person2=new Person("xxx2",30);
  FactHandle person2Handle=workingMemory.assertObject(person2);
  ReteTuple tuple2=new ReteTuple((DefaultFactHandle)person2Handle);
  from.assertTuple(tuple2,context,workingMemory);
  List asserted=sink.getAsserted();
  assertEquals(1,asserted.size());
  ReteTuple tuple=(ReteTuple)((Object[])asserted.get(0))[0];
  assertSame(person2,tuple.getFactHandles()[0].getObject());
  assertSame(cheese1,tuple.getFactHandles()[1].getObject());
  cheese2.setType("stilton");
  Person person3=new Person("xxx2",30);
  FactHandle person3Handle=workingMemory.assertObject(person3);
  ReteTuple tuple3=new ReteTuple((DefaultFactHandle)person3Handle);
  from.assertTuple(tuple3,context,workingMemory);
  assertEquals(3,asserted.size());
  tuple=(ReteTuple)((Object[])asserted.get(1))[0];
  assertSame(person3,tuple.getFactHandles()[0].getObject());
  assertSame(cheese1,tuple.getFactHandles()[1].getObject());
  tuple=(ReteTuple)((Object[])asserted.get(2))[0];
  assertSame(person3,tuple.getFactHandles()[0].getObject());
  assertSame(cheese2,tuple.getFactHandles()[1].getObject());
  assertNotSame(cheese1,cheese2);
}
