{
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase());
  final ClassFieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"type");
  final FieldValue field=new MockField("stilton");
  final LiteralConstraint constraint=new LiteralConstraint(extractor,ValueType.STRING_TYPE.getEvaluator(Operator.EQUAL),field);
  List list=new ArrayList();
  final Cheese cheese1=new Cheese("stilton",5);
  final Cheese cheese2=new Cheese("stilton",15);
  list.add(cheese1);
  list.add(cheese2);
  final MockDataProvider dataProvider=new MockDataProvider(list);
  final FromNode from=new FromNode(3,dataProvider,null,new AlphaNodeFieldConstraint[]{constraint},null);
  final MockTupleSink sink=new MockTupleSink(5);
  from.addTupleSink(sink);
  final List asserted=sink.getAsserted();
  final Person person1=new Person("xxx2",30);
  final FactHandle person1Handle=workingMemory.assertObject(person1);
  final ReteTuple tuple=new ReteTuple((DefaultFactHandle)person1Handle);
  from.assertTuple(tuple,context,workingMemory);
  assertEquals(2,asserted.size());
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(from);
  assertEquals(1,memory.getLeftTupleMemory().size());
  assertEquals(0,memory.getRightObjectMemory().size());
  assertEquals(2,tuple.getTupleMatches().size());
  list=new ArrayList();
  for (final Iterator it=tuple.getTupleMatches().values().iterator(); it.hasNext(); ) {
    TupleMatch tupleMatch=(TupleMatch)it.next();
    list.add(tupleMatch.getObjectMatches().getFactHandle().getObject());
  }
  assertEquals(2,list.size());
  assertTrue(list.contains(cheese1));
  assertTrue(list.contains(cheese2));
  from.retractTuple(tuple,context,workingMemory);
  assertEquals(0,memory.getLeftTupleMemory().size());
  assertEquals(0,memory.getRightObjectMemory().size());
}
