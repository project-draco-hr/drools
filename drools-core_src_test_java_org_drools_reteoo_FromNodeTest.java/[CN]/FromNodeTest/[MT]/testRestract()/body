{
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase());
  final ClassFieldExtractor extractor=cache.getExtractor(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue field=FieldFactory.getFieldValue("stilton");
  final LiteralConstraint constraint=new LiteralConstraint(extractor,equals.getEvaluator(ValueType.STRING_TYPE,Operator.EQUAL),field);
  final List list=new ArrayList();
  final Cheese cheese1=new Cheese("stilton",5);
  final Cheese cheese2=new Cheese("stilton",15);
  list.add(cheese1);
  list.add(cheese2);
  final MockDataProvider dataProvider=new MockDataProvider(list);
  final FromNode from=new FromNode(3,dataProvider,null,new AlphaNodeFieldConstraint[]{constraint},null);
  final MockTupleSink sink=new MockTupleSink(5);
  from.addTupleSink(sink);
  final List asserted=sink.getAsserted();
  final Person person1=new Person("xxx2",30);
  final FactHandle person1Handle=workingMemory.insert(person1);
  final ReteTuple tuple=new ReteTuple((DefaultFactHandle)person1Handle);
  from.assertTuple(tuple,context,workingMemory);
  assertEquals(2,asserted.size());
  final FromMemory memory=(FromMemory)workingMemory.getNodeMemory(from);
  assertEquals(1,memory.betaMemory.getTupleMemory().size());
  assertNull(memory.betaMemory.getFactHandleMemory());
  assertEquals(2,((LinkedList)memory.betaMemory.getCreatedHandles().get(tuple)).size());
  final InternalFactHandle handle1=(InternalFactHandle)((LinkedListEntry)((LinkedList)memory.betaMemory.getCreatedHandles().get(tuple)).getFirst()).getObject();
  final InternalFactHandle handle2=(InternalFactHandle)((LinkedListEntry)((LinkedList)memory.betaMemory.getCreatedHandles().get(tuple)).getLast()).getObject();
  assertEquals(handle1.getObject(),cheese1);
  assertEquals(handle2.getObject(),cheese2);
  from.retractTuple(tuple,context,workingMemory);
  assertEquals(0,memory.betaMemory.getTupleMemory().size());
  assertNull(memory.betaMemory.getFactHandleMemory());
}
