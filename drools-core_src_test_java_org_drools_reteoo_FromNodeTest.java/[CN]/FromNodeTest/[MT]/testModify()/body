{
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase());
  final ClassFieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"type");
  final FieldValue field=new MockField("stilton");
  final LiteralConstraint constraint=new LiteralConstraint(extractor,ValueType.STRING_TYPE.getEvaluator(Operator.EQUAL),field);
  final List list=new ArrayList();
  final Cheese cheese1=new Cheese("cheddar",20);
  final Cheese cheese2=new Cheese("brie",20);
  list.add(cheese1);
  list.add(cheese2);
  final MockDataProvider dataProvider=new MockDataProvider(list);
  final FromNode from=new FromNode(3,dataProvider,null,new AlphaNodeFieldConstraint[]{constraint},null);
  final MockTupleSink sink=new MockTupleSink(5);
  from.addTupleSink(sink);
  final Person person1=new Person("xxx1",30);
  final FactHandle person1Handle=workingMemory.assertObject(person1);
  final ReteTuple tuple1=new ReteTuple((DefaultFactHandle)person1Handle);
  from.assertTuple(tuple1,context,workingMemory);
  assertEquals(0,sink.getAsserted().size());
  cheese1.setType("stilton");
  from.modifyTuple(tuple1,context,workingMemory);
  final List asserted=sink.getAsserted();
  assertEquals(1,asserted.size());
  Tuple tuple=(Tuple)((Object[])asserted.get(0))[0];
  assertSame(person1,tuple.getFactHandles()[0].getObject());
  assertSame(cheese1,tuple.getFactHandles()[1].getObject());
  cheese2.setType("stilton");
  from.modifyTuple(tuple1,context,workingMemory);
  assertEquals(0,sink.getModified().size());
  assertEquals(1,sink.getRetracted().size());
  assertEquals(3,asserted.size());
  tuple=(Tuple)((Object[])asserted.get(1))[0];
  assertSame(person1,tuple.getFactHandles()[0].getObject());
  assertSame(cheese1,tuple.getFactHandles()[1].getObject());
  tuple=(Tuple)((Object[])asserted.get(2))[0];
  assertSame(person1,tuple.getFactHandles()[0].getObject());
  assertSame(cheese2,tuple.getFactHandles()[1].getObject());
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(from);
  assertEquals(1,memory.getLeftTupleMemory().size());
  assertEquals(0,memory.getRightObjectMemory().size());
  assertEquals(2,tuple1.getTupleMatches().size());
}
