{
  KieModuleModel kproj=new KieModuleModelImpl();
  KieBaseModel kieBaseModel1=kproj.newKieBaseModel(namespace + ".KBase1").setEqualsBehavior(EqualityBehaviorOption.EQUALITY).setEventProcessingMode(EventProcessingOption.STREAM).addPackage(namespace + ".KBase1").setDefault(true);
  KieSessionModel ksession1=kieBaseModel1.newKieSessionModel(namespace + ".KSession1").setType(KieSessionType.STATELESS).setClockType(ClockTypeOption.get("realtime")).setDefault(true);
  KieSessionModel ksession2=kieBaseModel1.newKieSessionModel(namespace + ".KSession2").setType(KieSessionType.STATEFUL).setClockType(ClockTypeOption.get("pseudo")).setDefault(true);
  KieBaseModel kieBaseModel2=kproj.newKieBaseModel(namespace + ".KBase2").setEqualsBehavior(EqualityBehaviorOption.IDENTITY).addPackage(namespace + ".KBase2").setEventProcessingMode(EventProcessingOption.CLOUD);
  KieSessionModel ksession3=kieBaseModel2.newKieSessionModel(namespace + ".KSession3").setType(KieSessionType.STATEFUL).setClockType(ClockTypeOption.get("pseudo"));
  KieBaseModel kieBaseModel3=kproj.newKieBaseModel(namespace + ".KBase3").addInclude(kieBaseModel1.getName()).addInclude(kieBaseModel2.getName()).setEqualsBehavior(EqualityBehaviorOption.IDENTITY).setEventProcessingMode(EventProcessingOption.CLOUD);
  KieSessionModel ksession4=kieBaseModel3.newKieSessionModel(namespace + ".KSession4").setType(KieSessionType.STATELESS).setClockType(ClockTypeOption.get("pseudo"));
  KieServices ks=KieServices.Factory.get();
  KieFileSystemImpl kfs=(KieFileSystemImpl)ks.newKieFileSystem();
  kfs.write("src/main/resources/META-INF/beans.xml",generateBeansXML());
  kfs.writeKModuleXML(((KieModuleModelImpl)kproj).toXML());
  ReleaseId releaseId=ks.newReleaseId(namespace,"art1",version);
  kfs.generateAndWritePomXML(releaseId);
  String kBase1R1=getRule(namespace + ".test1","rule1",version);
  String kBase1R2=getRule(namespace + ".test1","rule2",version);
  String kbase2R1=getRule(namespace + ".test2","rule1",version);
  String kbase2R2=getRule(namespace + ".test2","rule2",version);
  String fldKB1="src/main/resources/" + kieBaseModel1.getName().replace('.','/');
  String fldKB2="src/main/resources/" + kieBaseModel2.getName().replace('.','/');
  kfs.write(fldKB1 + "/rule1.drl",kBase1R1.getBytes());
  kfs.write(fldKB1 + "/rule2.drl",kBase1R2.getBytes());
  kfs.write(fldKB2 + "/rule1.drl",kbase2R1.getBytes());
  kfs.write(fldKB2 + "/rule2.drl",kbase2R2.getBytes());
  kfs.write("src/main/java/org/drools/compiler/cdi/test/KProjectTestClass" + namespace + ".java",generateKProjectTestClass(kproj,namespace));
  KieBuilder kBuilder=ks.newKieBuilder(kfs);
  kBuilder.buildAll();
  if (kBuilder.getResults().hasMessages(Level.ERROR)) {
    fail("should not have errors" + kBuilder.getResults());
  }
  MemoryKieModule kieModule=(MemoryKieModule)kBuilder.getKieModule();
  MemoryFileSystem trgMfs=kieModule.getMemoryFileSystem();
  if (createJar) {
    trgMfs.writeAsJar(fileManager.getRootDirectory(),namespace + "-" + version);
  }
 else {
    java.io.File file=fileManager.newFile(namespace + "-" + version);
    trgMfs.writeAsFs(file);
  }
  return kproj;
}
