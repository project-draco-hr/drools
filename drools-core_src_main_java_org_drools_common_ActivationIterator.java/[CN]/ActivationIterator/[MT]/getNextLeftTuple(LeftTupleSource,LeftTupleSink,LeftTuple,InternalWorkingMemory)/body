{
  if (factHandleEntry != null) {
    LeftTuple leftParent=leftTuple.getLeftParent();
    if (leftParent != null) {
      while (leftParent != null) {
        leftParent=getNextLeftTuple(((EvalConditionNode)source).getLeftTupleSource(),(EvalConditionNode)source,leftParent,wm);
        if (leftParent != null) {
          for (leftTuple=leftParent.getFirstChild(); leftTuple != null; leftTuple=leftTuple.getLeftParentNext()) {
            if (leftTuple.getLeftTupleSink() == sink) {
              return leftTuple;
            }
          }
        }
      }
      return null;
    }
    if (factHandleEntry == null) {
      return null;
    }
    for (factHandleEntry=(ObjectEntry)otnIterator.next(); factHandleEntry != null; factHandleEntry=(ObjectEntry)otnIterator.next()) {
      InternalFactHandle handle=(InternalFactHandle)factHandleEntry.getValue();
      for (leftTuple=handle.getFirstLeftTuple(); leftTuple != null; leftTuple=leftTuple.getLeftParentNext()) {
        if (leftTuple.getLeftTupleSink() == sink) {
          return leftTuple;
        }
      }
    }
    factHandleEntry=null;
    otnIterator=null;
  }
 else   if (source instanceof JoinNode || source instanceof NotNode || source instanceof FromNode|| source instanceof AccumulateNode) {
    BetaMemory memory;
    FastIterator localIt;
    if (source instanceof FromNode) {
      memory=((FromMemory)wm.getNodeMemory((NodeMemory)source)).betaMemory;
    }
 else     if (source instanceof AccumulateNode) {
      memory=((AccumulateMemory)wm.getNodeMemory((NodeMemory)source)).betaMemory;
    }
 else {
      memory=(BetaMemory)wm.getNodeMemory((NodeMemory)source);
    }
    localIt=memory.getLeftTupleMemory().fullFastIterator();
    LeftTuple childLeftTuple=leftTuple;
    if (childLeftTuple != null) {
      leftTuple=childLeftTuple.getLeftParent();
      while (leftTuple != null) {
        if (childLeftTuple == null) {
          childLeftTuple=leftTuple.getFirstChild();
        }
 else {
          childLeftTuple=childLeftTuple.getLeftParentNext();
        }
        for (; childLeftTuple != null; childLeftTuple=childLeftTuple.getLeftParentNext()) {
          if (childLeftTuple.getLeftTupleSink() == sink) {
            return childLeftTuple;
          }
        }
        leftTuple=(LeftTuple)localIt.next(leftTuple);
      }
    }
  }
  if (source instanceof ExistsNode) {
    BetaMemory memory=(BetaMemory)wm.getNodeMemory((NodeMemory)source);
    FastIterator localIt=memory.getRightTupleMemory().fullFastIterator();
    for (LeftTuple childleftTuple=leftTuple.getLeftParentNext(); childleftTuple != null; childleftTuple=childleftTuple.getLeftParentNext()) {
      if (childleftTuple.getLeftTupleSink() == sink) {
        return childleftTuple;
      }
    }
    RightTuple rightTuple=leftTuple.getLeftParent().getBlocker();
    rightTuple=(RightTuple)localIt.next(rightTuple);
    while (rightTuple != null) {
      if (rightTuple.getBlocked() != null) {
        for (leftTuple=rightTuple.getBlocked(); leftTuple != null; leftTuple=leftTuple.getBlockedNext()) {
          for (LeftTuple childleftTuple=leftTuple.getFirstChild(); childleftTuple != null; childleftTuple=childleftTuple.getLeftParentNext()) {
            if (childleftTuple.getLeftTupleSink() == sink) {
              return childleftTuple;
            }
          }
        }
      }
      rightTuple=(RightTuple)localIt.next(rightTuple);
    }
  }
 else   if (source instanceof EvalConditionNode) {
    LeftTuple childLeftTuple=leftTuple;
    if (leftTuple != null) {
      leftTuple=leftTuple.getLeftParent();
      while (leftTuple != null) {
        if (childLeftTuple != null) {
          childLeftTuple=childLeftTuple.getLeftParentNext();
        }
 else {
          childLeftTuple=leftTuple.getFirstChild();
        }
        for (; childLeftTuple != null; childLeftTuple=childLeftTuple.getLeftParentNext()) {
          if (childLeftTuple.getLeftTupleSink() == sink) {
            return childLeftTuple;
          }
        }
        leftTuple=getNextLeftTuple(((EvalConditionNode)source).getLeftTupleSource(),(LeftTupleSink)source,leftTuple,wm);
      }
    }
  }
  return null;
}
