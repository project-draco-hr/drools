{
  final Package pkg=new Package("pkg1");
  final RuleDescr ruleDescr=new RuleDescr("rule 1");
  PackageBuilder pkgBuilder=new PackageBuilder(pkg);
  final PackageBuilderConfiguration conf=pkgBuilder.getPackageBuilderConfiguration();
  MVELDialect mvelDialect=(MVELDialect)pkgBuilder.getDialectRegistry().getDialect("mvel");
  final InstrumentedBuildContent context=new InstrumentedBuildContent(conf,pkg,ruleDescr,pkgBuilder.getDialectRegistry(),mvelDialect);
  final InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final FieldExtractor extractor=cache.getExtractor(Cheese.class,"price",getClass().getClassLoader());
  final Pattern patternA=new Pattern(0,new ClassObjectType(int.class));
  final Pattern patternB=new Pattern(1,new ClassObjectType(int.class));
  final Declaration a=new Declaration("a",extractor,patternA);
  final Declaration b=new Declaration("b",extractor,patternB);
  final Map map=new HashMap();
  map.put("a",a);
  map.put("b",b);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  final ReturnValueRestrictionDescr returnValueDescr=new ReturnValueRestrictionDescr("=");
  returnValueDescr.setContent("a + b");
  final MVELReturnValueBuilder builder=new MVELReturnValueBuilder();
  final List[] usedIdentifiers=new ArrayList[2];
  final List list=new ArrayList();
  usedIdentifiers[1]=list;
  final Declaration[] previousDeclarations=new Declaration[]{a,b};
  final Declaration[] localDeclarations=new Declaration[]{};
  final String[] requiredGlobals=new String[]{};
  final ReturnValueRestriction returnValue=new ReturnValueRestriction(extractor,previousDeclarations,localDeclarations,requiredGlobals,context.getConfiguration().getEvaluatorRegistry().getEvaluator(ValueType.PINTEGER_TYPE,Operator.EQUAL));
  builder.build(context,usedIdentifiers,previousDeclarations,localDeclarations,returnValue,returnValueDescr);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final InternalWorkingMemory wm=(InternalWorkingMemory)ruleBase.newStatefulSession();
  final Cheese stilton=new Cheese("stilton",10);
  final Cheese cheddar=new Cheese("cheddar",10);
  final InternalFactHandle f0=(InternalFactHandle)wm.insert(cheddar);
  ReteTuple tuple=new ReteTuple(f0);
  final InternalFactHandle f1=(InternalFactHandle)wm.insert(stilton);
  tuple=new ReteTuple(tuple,f1);
  final Cheese brie=new Cheese("brie",20);
  final InternalFactHandle f2=(InternalFactHandle)wm.insert(brie);
  assertTrue(returnValue.isAllowed(extractor,f2,tuple,wm));
  brie.setPrice(18);
  wm.update(f2,brie);
  assertFalse(returnValue.isAllowed(extractor,f2,tuple,wm));
}
