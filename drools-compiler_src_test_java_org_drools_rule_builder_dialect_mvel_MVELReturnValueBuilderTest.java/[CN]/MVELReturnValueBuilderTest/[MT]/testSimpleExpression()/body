{
  Package pkg=new Package("pkg1");
  RuleDescr ruleDescr=new RuleDescr("rule 1");
  InstrumentedBuildContent context=new InstrumentedBuildContent(pkg,ruleDescr);
  InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final FieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"price");
  Column columnA=new Column(0,new ClassObjectType(int.class));
  Column columnB=new Column(1,new ClassObjectType(int.class));
  Declaration a=new Declaration("a",extractor,columnA);
  Declaration b=new Declaration("b",extractor,columnB);
  Map map=new HashMap();
  map.put("a",a);
  map.put("b",b);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  ReturnValueRestrictionDescr returnValueDescr=new ReturnValueRestrictionDescr("=");
  returnValueDescr.setText("a + b");
  MVELReturnValueBuilder builder=new MVELReturnValueBuilder();
  List[] usedIdentifiers=new ArrayList[2];
  List list=new ArrayList();
  usedIdentifiers[1]=list;
  Declaration[] previousDeclarations=new Declaration[]{a,b};
  Declaration[] localDeclarations=new Declaration[]{};
  final ReturnValueRestriction returnValue=new ReturnValueRestriction(extractor,previousDeclarations,localDeclarations,ValueType.PINTEGER_TYPE.getEvaluator(Operator.EQUAL));
  BuildUtils utils=new BuildUtils(new KnowledgeHelperFixer(),new DeclarationTypeFixer(),new JavaExprAnalyzer(),null,null,null);
  builder.build(context,utils,usedIdentifiers,previousDeclarations,localDeclarations,returnValue,returnValueDescr);
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  InternalWorkingMemory wm=(InternalWorkingMemory)ruleBase.newWorkingMemory();
  Cheese stilton=new Cheese("stilton",10);
  Cheese cheddar=new Cheese("cheddar",10);
  InternalFactHandle f0=(InternalFactHandle)wm.assertObject(cheddar);
  ReteTuple tuple=new ReteTuple(f0);
  InternalFactHandle f1=(InternalFactHandle)wm.assertObject(stilton);
  tuple=new ReteTuple(tuple,f1);
  PredicateContextEntry predicateContext=new PredicateContextEntry();
  predicateContext.leftTuple=tuple;
  Cheese brie=new Cheese("brie",20);
  assertTrue(returnValue.isAllowed(extractor,brie,tuple,wm));
  brie.setPrice(18);
  assertFalse(returnValue.isAllowed(extractor,brie,tuple,wm));
}
