{
  Scenario sc=new Scenario();
  FactData[] facts=new FactData[]{new FactData("Coolness","c",ls(new FieldData("num","42"),new FieldData("name","mic")),false)};
  sc.fixtures.addAll(Arrays.asList(facts));
  ExecutionTrace executionTrace=new ExecutionTrace();
  sc.rules.add("rule1");
  sc.inclusive=true;
  sc.fixtures.add(executionTrace);
  Expectation[] assertions=new Expectation[2];
  assertions[0]=new VerifyFact("c",ls(new VerifyField("num","42","==")));
  assertions[1]=new VerifyRuleFired("rule1",1,null);
  sc.fixtures.addAll(Arrays.asList(assertions));
  WorkingMemory wm=getWorkingMemory("test_rules3.drl");
  ClassLoader cl=((InternalRuleBase)wm.getRuleBase()).getRootClassLoader();
  HashSet<String> imports=new HashSet<String>();
  imports.add("foo.bar.*");
  TypeResolver resolver=new ClassTypeResolver(imports,cl);
  Class cls=cl.loadClass("foo.bar.Coolness");
  assertNotNull(cls);
  ClassLoader cl_=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(cl);
  ScenarioRunner run=new ScenarioRunner(sc,resolver,(InternalWorkingMemory)wm);
  assertEquals(1,executionTrace.numberOfRulesFired.intValue());
  assertSame(run.scenario,sc);
  assertTrue(sc.wasSuccessful());
  Thread.currentThread().setContextClassLoader(cl_);
}
