{
  Scenario sc=new Scenario();
  FactData[] facts=new FactData[]{new FactData("Cheese","c1",new FieldData[]{new FieldData("type","cheddar",false),new FieldData("price","42",false)},false),new FactData("Person","p",new FieldData[0],true)};
  sc.fixtures.addAll(Arrays.asList(facts));
  ExecutionTrace executionTrace=new ExecutionTrace();
  executionTrace.rules=new String[]{"rule1","rule2"};
  executionTrace.inclusive=true;
  sc.fixtures.add(executionTrace);
  Expectation[] assertions=new Expectation[5];
  assertions[0]=new VerifyFact("c1",new VerifyField[]{new VerifyField("type","cheddar")});
  assertions[1]=new VerifyFact("p",new VerifyField[]{new VerifyField("name","rule1"),new VerifyField("status","rule2")});
  assertions[2]=new VerifyRuleFired("rule1",1,null);
  assertions[3]=new VerifyRuleFired("rule2",1,null);
  assertions[4]=new VerifyRuleFired("rule3",1,null);
  sc.fixtures.addAll(Arrays.asList(assertions));
  TypeResolver resolver=new ClassTypeResolver(new HashSet<Object>(),Thread.currentThread().getContextClassLoader());
  resolver.addImport("org.drools.Cheese");
  resolver.addImport("org.drools.Person");
  WorkingMemory wm=getWorkingMemory("test_rules2.drl");
  ScenarioRunner run=new ScenarioRunner(sc,resolver,(InternalWorkingMemory)wm);
  assertSame(run.scenario,sc);
  assertTrue(sc.wasSuccessful());
  Person p=(Person)run.globalData.get("p");
  assertEquals("rule1",p.getName());
  assertEquals("rule2",p.getStatus());
  assertEquals(0,p.getAge());
  assertTrue((new Date()).after(sc.lastRunResult));
  assertTrue(executionTrace.executionTimeResult != -1);
}
