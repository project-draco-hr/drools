{
  FastIterator it=iterator();
  for (DefeasibleLogicalDependency entry=(DefeasibleLogicalDependency)getFirst(); entry != tailUndefeated; ) {
    DefeasibleLogicalDependency temp=(DefeasibleLogicalDependency)it.next(entry);
    final LogicalDependency node=(LogicalDependency)entry.getObject();
    node.getJustifier().getLogicalDependencies().remove(node);
    remove(entry);
    entry=temp;
  }
  LinkedListEntry last=(LinkedListEntry)getFirst();
  final LogicalDependency node=(LogicalDependency)last.getObject();
  node.getJustifier().getLogicalDependencies().remove(node);
  positiveFactHandle=null;
  negativeFactHandle=null;
}
