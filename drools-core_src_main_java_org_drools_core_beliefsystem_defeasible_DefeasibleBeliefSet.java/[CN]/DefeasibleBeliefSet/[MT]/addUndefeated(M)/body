{
  boolean pos=!(dep.getValue() != null && MODE.NEGATIVE.getId().equals(dep.getValue().toString()));
switch (dep.getStatus()) {
case DEFINITELY:
    if (pos) {
      definitelyPosCount++;
      statusMask=statusMask | DEFINITELY_POS_BIT;
    }
 else {
      definitelyNegCount++;
      statusMask=statusMask | DEFINITELY_NEG_BIT;
    }
  break;
case DEFEASIBLY:
if (pos) {
  defeasiblyPosCount++;
  statusMask=statusMask | DEFEASIBLY_POS_BIT;
}
 else {
  defeasiblyNegCount++;
  statusMask=statusMask | DEFEASIBLY_NEG_BIT;
}
break;
case DEFEATEDLY:
if (pos) {
defeatedlyPosCount++;
statusMask=statusMask | DEFEATEDLY_POS_BIT;
}
 else {
defeatedlyNegCount++;
statusMask=statusMask | DEFEATEDLY_NEG_BIT;
}
break;
case UNDECIDABLY:
throw new IllegalStateException("Individual logical dependencies cannot be undecidably");
}
if (rootUndefeated == null) {
rootUndefeated=dep;
tailUndefeated=dep;
}
 else {
if (dep.getStatus() == DefeasibilityStatus.DEFINITELY) {
rootUndefeated.setPrevious(dep);
dep.setNext(rootUndefeated);
rootUndefeated=dep;
}
 else {
tailUndefeated.setNext(dep);
dep.setPrevious(tailUndefeated);
tailUndefeated=dep;
}
}
}
