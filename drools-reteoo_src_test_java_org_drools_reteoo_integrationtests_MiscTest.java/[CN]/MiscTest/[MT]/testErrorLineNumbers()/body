{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("errors_in_rule.drl",getClass()),ResourceType.DRL);
  KnowledgeBuilderError[] errors=kbuilder.getErrors().toArray(new KnowledgeBuilderError[0]);
  assertEquals(3,errors.length);
  final DescrBuildError stiltonError=(DescrBuildError)errors[0];
  assertTrue(stiltonError.getMessage().contains("Stilton"));
  assertNotNull(stiltonError.getDescr());
  assertTrue(stiltonError.getLine() != -1);
  assertEquals(stiltonError.getLine(),stiltonError.getDescr().getLine());
  assertEquals(11,stiltonError.getLine());
  final DescrBuildError poisonError=(DescrBuildError)errors[1];
  assertTrue(poisonError.getMessage().contains("Poison"));
  assertEquals(13,poisonError.getLine());
  PackageBuilderConfiguration cfg=new PackageBuilderConfiguration();
  JavaDialectConfiguration javaConf=(JavaDialectConfiguration)cfg.getDialectConfiguration("java");
switch (javaConf.getCompiler()) {
case JavaDialectConfiguration.NATIVE:
    assertTrue(errors[2].getMessage().contains("illegal"));
  break;
case JavaDialectConfiguration.ECLIPSE:
assertTrue(errors[2].getMessage().contains("add"));
break;
case JavaDialectConfiguration.JANINO:
assertTrue(errors[2].getMessage().contains("Unexpected"));
break;
default :
fail("Unknown compiler used");
}
final DescrBuildError rhsError=(DescrBuildError)errors[2];
assertTrue(rhsError.getLine() >= 8 && rhsError.getLine() <= 17);
}
