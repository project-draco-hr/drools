{
  if (CommonTestMethodBase.phreak == RuleEngineOption.RETEOO) {
    return;
  }
  KnowledgeBase kbase=loadKnowledgeBase("test_FromWithParams.drl");
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List list=new ArrayList();
  final Object globalObject=new Object();
  ksession.setGlobal("list",list);
  ksession.setGlobal("testObject",new FromTestClass());
  ksession.setGlobal("globalObject",globalObject);
  final Person bob=new Person("bob");
  ksession.insert(bob);
  ksession.fireAllRules();
  assertEquals(6,((List)ksession.getGlobal("list")).size());
  final List array=(List)((List)ksession.getGlobal("list")).get(0);
  assertEquals(3,array.size());
  final Person p=(Person)array.get(0);
  assertEquals(p,bob);
  assertEquals(new Integer(42),array.get(1));
  final List nested=(List)array.get(2);
  assertEquals("x",nested.get(0));
  assertEquals("y",nested.get(1));
  final Map map=(Map)((List)ksession.getGlobal("list")).get(1);
  assertEquals(2,map.keySet().size());
  assertTrue(map.keySet().contains(bob));
  assertEquals(globalObject,map.get(bob));
  assertTrue(map.keySet().contains("key1"));
  final Map nestedMap=(Map)map.get("key1");
  assertEquals(1,nestedMap.keySet().size());
  assertTrue(nestedMap.keySet().contains("key2"));
  assertEquals("value2",nestedMap.get("key2"));
  assertEquals(new Integer(42),((List)ksession.getGlobal("list")).get(2));
  assertEquals("literal",((List)ksession.getGlobal("list")).get(3));
  assertEquals(bob,((List)ksession.getGlobal("list")).get(4));
  assertEquals(globalObject,((List)ksession.getGlobal("list")).get(5));
}
