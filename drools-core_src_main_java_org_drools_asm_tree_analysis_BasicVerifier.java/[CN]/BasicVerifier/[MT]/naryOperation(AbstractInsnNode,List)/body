{
  final int opcode=insn.getOpcode();
  if (opcode == Opcodes.MULTIANEWARRAY) {
    for (int i=0; i < values.size(); ++i) {
      if (values.get(i) != BasicValue.INT_VALUE) {
        throw new AnalyzerException(null,BasicValue.INT_VALUE,(Value)values.get(i));
      }
    }
  }
 else {
    int i=0;
    int j=0;
    if (opcode != Opcodes.INVOKESTATIC) {
      String own=((MethodInsnNode)insn).owner;
      if (own.charAt(0) != '[') {
        own="L" + own + ";";
      }
      final Type owner=Type.getType(own);
      if (!isSubTypeOf((Value)values.get(i++),newValue(owner))) {
        throw new AnalyzerException("Method owner",newValue(owner),(Value)values.get(0));
      }
    }
    final Type[] args=Type.getArgumentTypes(((MethodInsnNode)insn).desc);
    while (i < values.size()) {
      final Value expected=newValue(args[j++]);
      final Value encountered=(Value)values.get(i++);
      if (!isSubTypeOf(encountered,expected)) {
        throw new AnalyzerException("Argument " + j,expected,encountered);
      }
    }
  }
  return super.naryOperation(insn,values);
}
