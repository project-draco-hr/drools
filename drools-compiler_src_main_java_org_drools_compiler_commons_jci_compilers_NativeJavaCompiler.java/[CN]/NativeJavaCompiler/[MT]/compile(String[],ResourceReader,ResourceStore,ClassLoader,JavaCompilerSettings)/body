{
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  javax.tools.JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  MemoryFileManager fileManager=new MemoryFileManager(compiler.getStandardFileManager(diagnostics,null,null),pClassLoader);
  final List<JavaFileObject> units=new ArrayList<JavaFileObject>();
  for (  final String sourcePath : pResourcePaths) {
    units.add(new CompilationUnit(sourcePath,pReader));
  }
  Iterable<String> options=new NativeJavaCompilerSettings(pSettings).toOptionsList();
  if (compiler.getTask(null,fileManager,diagnostics,options,null,units).call()) {
    for (    CompilationOutput compilationOutput : fileManager.getOutputs()) {
      pStore.write(compilationOutput.getBinaryName().replace('.','/') + ".class",compilationOutput.toByteArray());
    }
    return new CompilationResult(new CompilationProblem[0]);
  }
  List<Diagnostic<? extends JavaFileObject>> problems=diagnostics.getDiagnostics();
  CompilationProblem[] result=new CompilationProblem[problems.size()];
  for (int i=0; i < problems.size(); i++) {
    result[i]=new NativeCompilationProblem((Diagnostic<JavaFileObject>)problems.get(i));
  }
  return new CompilationResult(result);
}
