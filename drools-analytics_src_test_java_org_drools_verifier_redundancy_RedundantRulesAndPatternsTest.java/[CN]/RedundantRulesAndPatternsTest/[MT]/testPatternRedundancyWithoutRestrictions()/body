{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Patterns.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Find redundant Patterns without restrictions"));
  VerifierResult result=VerifierResultFactory.createVerifierResult();
  Collection<? extends Object> data=getTestData(this.getClass().getResourceAsStream("PatternRedundancyTest.drl"),result.getVerifierData());
  session.setGlobal("result",result);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<String,Set<String>> map=createRedundancyMap(sessionResult.iterateObjects());
  assertTrue(TestBase.mapContains(map,"Pattern redundancy without restrictions 1a","Pattern redundancy without restrictions 1b") ^ TestBase.mapContains(map,"Pattern redundancy without restrictions 1b","Pattern redundancy without restrictions 1a"));
  assertTrue(TestBase.mapContains(map,"Pattern redundancy without restrictions 2a","Pattern redundancy without restrictions 2b") ^ TestBase.mapContains(map,"Pattern redundancy without restrictions 2b","Pattern redundancy without restrictions 2a"));
  assertTrue(TestBase.mapContains(map,"Pattern redundancy without restrictions 3a","Pattern redundancy without restrictions 3b") ^ TestBase.mapContains(map,"Pattern redundancy without restrictions 3b","Pattern redundancy without restrictions 3a"));
  assertTrue(TestBase.mapContains(map,"Pattern redundancy without restrictions 4a","Pattern redundancy without restrictions 4b") ^ TestBase.mapContains(map,"Pattern redundancy without restrictions 4b","Pattern redundancy without restrictions 4a"));
  if (!map.isEmpty()) {
    fail("More redundancies than was expected.");
  }
}
