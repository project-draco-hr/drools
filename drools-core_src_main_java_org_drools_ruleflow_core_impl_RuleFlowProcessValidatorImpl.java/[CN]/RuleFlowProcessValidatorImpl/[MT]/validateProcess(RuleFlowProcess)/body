{
  final List errors=new ArrayList();
  if (process.getName() == null) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_PROCESS_NAME));
  }
  if (process.getId() == null || "".equals(process.getId())) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_PROCESS_ID));
  }
  if (process.getPackageName() == null || "".equals(process.getPackageName())) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_PACKAGE_NAME));
  }
  if (process.getStart() == null) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_START_NODE));
  }
  boolean startNodeFound=false;
  boolean endNodeFound=false;
  final Node[] nodes=process.getNodes();
  for (int i=0; i < nodes.length; i++) {
    final Node node=nodes[i];
    if (node instanceof StartNode) {
      final StartNode startNode=(StartNode)node;
      startNodeFound=true;
      if (startNode.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.START_NODE_WITHOUT_OUTGOING_NODES));
      }
    }
 else     if (node instanceof EndNode) {
      final EndNode endNode=(EndNode)node;
      endNodeFound=true;
      if (endNode.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.END_NODE_HAS_NO_INCOMING_CONNECTIONS));
      }
    }
 else     if (node instanceof RuleSetNode) {
      final RuleSetNode ruleSetNode=(RuleSetNode)node;
      if (ruleSetNode.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_INCOMING_CONNECTIONS,"name = " + ruleSetNode.getName()));
      }
      if (ruleSetNode.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_OUTGOING_CONNECTIONS,"name = " + ruleSetNode.getName()));
      }
      final String ruleFlowGroup=ruleSetNode.getRuleFlowGroup();
      if (ruleFlowGroup == null || "".equals(ruleFlowGroup)) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_RULE_SET_GROUP,"name = " + ruleSetNode.getName()));
      }
    }
 else     if (node instanceof Split) {
      final Split split=(Split)node;
      if (split.getType() == Split.TYPE_UNDEFINED) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SPLIT_WITHOUT_TYPE,"name = " + split.getName()));
      }
      if (split.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SPLIT_WITHOUT_INCOMING_CONNECTION,"name = " + split.getName()));
      }
      if (split.getOutgoingConnections().size() < 2) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SPLIT_NOT_ENOUGH_OUTGOING_CONNECTIONS,"name = " + split.getName()));
      }
      if (split.getType() == Split.TYPE_XOR || split.getType() == Split.TYPE_OR) {
        for (final Iterator it=split.getOutgoingConnections().iterator(); it.hasNext(); ) {
          final Connection connection=(Connection)it.next();
          if (split.getConstraint(connection) == null) {
            errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SPLIT_OUTGOING_CONNECTION_WITHOUT_CONSTRAINT,"name = " + split.getName()));
          }
        }
      }
    }
 else     if (node instanceof Join) {
      final Join join=(Join)node;
      if (join.getType() == Join.TYPE_UNDEFINED) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.JOIN_WITHOUT_TYPE,"name = " + join.getName()));
      }
      if (join.getIncomingConnections().size() < 2) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.JOIN_NOT_ENOUGH_INCOMING_CONNECTIONS,"name = " + join.getName()));
      }
      if (join.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.JOIN_WITHOUT_OUTGOING_CONNECTION,"name = " + join.getName()));
      }
    }
 else     if (node instanceof MilestoneNode) {
      final MilestoneNode milestone=(MilestoneNode)node;
      if (milestone.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.MILESTONE_NODE_WITHOUT_INCOMING_CONNECTIONS,"name = " + milestone.getName()));
      }
      if (milestone.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.MILESTONE_NODE_WITHOUT_OUTGOING_CONNECTIONS,"name = " + milestone.getName()));
      }
      if (milestone.getConstraint() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.MILESTONE_WITHOUT_CONSTRAINT,"name = " + milestone.getName()));
      }
    }
 else     if (node instanceof SubFlowNode) {
      final SubFlowNode subFlow=(SubFlowNode)node;
      if (subFlow.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SUBFLOW_NODE_WITHOUT_INCOMING_CONNECTIONS,"name = " + subFlow.getName()));
      }
      if (subFlow.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SUBFLOW_NODE_WITHOUT_OUTGOING_CONNECTIONS,"name = " + subFlow.getName()));
      }
      if (subFlow.getProcessId() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SUBFLOW_WITHOUT_PROCESS_ID,"name = " + subFlow.getName()));
      }
    }
 else     if (node instanceof ActionNode) {
      final ActionNode actionNode=(ActionNode)node;
      if (actionNode.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.ACTION_NODE_WITHOUT_INCOMING_CONNECTIONS,"name = " + actionNode.getName()));
      }
      if (actionNode.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.ACTION_NODE_WITHOUT_OUTGOING_CONNECTIONS,"name = " + actionNode.getName()));
      }
      if (actionNode.getAction() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.ACTION_NODE_WITHOUT_ACTION,"name = " + actionNode.getName()));
      }
 else {
        if (actionNode.getAction() instanceof DroolsConsequenceAction) {
          DroolsConsequenceAction droolsAction=(DroolsConsequenceAction)actionNode.getAction();
          String actionString=droolsAction.getConsequence();
          if (actionString == null) {
            errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.ACTION_NODE_WITHOUT_ACTION,"name = " + actionNode.getName()));
          }
 else {
            try {
              ExpressionCompiler compiler=new ExpressionCompiler(actionString);
              compiler.setVerifying(true);
              ParserContext parserContext=new ParserContext();
              compiler.compile(parserContext);
              List mvelErrors=parserContext.getErrorList();
              if (mvelErrors != null) {
                for (Iterator iterator=mvelErrors.iterator(); iterator.hasNext(); ) {
                  Object error=iterator.next();
                  errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.ACTION_NODE_WITH_INVALID_ACTION,"name = " + actionNode.getName() + " "+ error));
                }
              }
            }
 catch (            Throwable t) {
              errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.ACTION_NODE_WITH_INVALID_ACTION,"name = " + actionNode.getName() + " "+ t.getMessage()));
            }
          }
        }
      }
    }
  }
  if (!startNodeFound) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_START_NODE));
  }
  if (!endNodeFound) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_END_NODE));
  }
  for (final Iterator it=process.getVariables().iterator(); it.hasNext(); ) {
    final Variable variable=(Variable)it.next();
    if (variable.getType() == null) {
      errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.VARIABLE_WITHOUT_TYPE,"name = " + variable.getName()));
    }
  }
  checkAllNodesConnectedToStart(process,errors);
  return (RuleFlowProcessValidationError[])errors.toArray(new RuleFlowProcessValidationError[errors.size()]);
}
