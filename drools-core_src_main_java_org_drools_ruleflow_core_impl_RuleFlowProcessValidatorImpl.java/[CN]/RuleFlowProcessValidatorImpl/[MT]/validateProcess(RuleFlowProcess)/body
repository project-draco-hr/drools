{
  final List errors=new ArrayList();
  if (process.getName() == null) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_PROCESS_NAME));
  }
  if (process.getId() == null || "".equals(process.getId())) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_PROCESS_ID));
  }
  if (process.getStart() == null) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_START_NODE));
  }
  boolean startNodeFound=false;
  boolean endNodeFound=false;
  final Node[] nodes=process.getNodes();
  for (int i=0; i < nodes.length; i++) {
    final Node node=nodes[i];
    if (node instanceof StartNode) {
      final StartNode startNode=(StartNode)node;
      startNodeFound=true;
      if (startNode.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.START_NODE_WITHOUT_OUTGOING_NODES));
      }
    }
 else     if (node instanceof EndNode) {
      final EndNode endNode=(EndNode)node;
      endNodeFound=true;
      if (endNode.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.END_NODE_HAS_NO_INCOMING_CONNECTIONS));
      }
    }
 else     if (node instanceof RuleSetNode) {
      final RuleSetNode ruleSetNode=(RuleSetNode)node;
      if (ruleSetNode.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_INCOMING_CONNECTIONS));
      }
      if (ruleSetNode.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_OUTGOING_CONNECTIONS));
      }
      final String ruleFlowGroup=ruleSetNode.getRuleFlowGroup();
      if (ruleFlowGroup == null || "".equals(ruleFlowGroup)) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_RULE_SET_GROUP));
      }
    }
 else     if (node instanceof Split) {
      final Split split=(Split)node;
      if (split.getType() == Split.TYPE_UNDEFINED) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SPLIT_WITHOUT_TYPE));
      }
      if (split.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SPLIT_WITHOUT_INCOMING_CONNECTION));
      }
      if (split.getOutgoingConnections().size() < 2) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SPLIT_NOT_ENOUGH_OUTGOING_CONNECTIONS));
      }
      if (split.getType() == Split.TYPE_XOR || split.getType() == Split.TYPE_OR) {
        for (final Iterator it=split.getOutgoingConnections().iterator(); it.hasNext(); ) {
          final Connection connection=(Connection)it.next();
          if (split.getConstraint(connection) == null) {
            errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.SPLIT_OUTGOING_CONNECTION_WITHOUT_CONSTRAINT));
          }
        }
      }
    }
 else     if (node instanceof Join) {
      final Join join=(Join)node;
      if (join.getType() == Join.TYPE_UNDEFINED) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.JOIN_WITHOUT_TYPE));
      }
      if (join.getIncomingConnections().size() < 2) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.JOIN_NOT_ENOUGH_INCOMING_CONNECTIONS));
      }
      if (join.getTo() == null) {
        errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.JOIN_WITHOUT_OUTGOING_CONNECTION));
      }
    }
  }
  if (!startNodeFound) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_START_NODE));
  }
  if (!endNodeFound) {
    errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.NO_END_NODE));
  }
  for (final Iterator it=process.getVariables().iterator(); it.hasNext(); ) {
    final Variable variable=(Variable)it.next();
    if (variable.getType() == null) {
      errors.add(new RuleFlowProcessValidationErrorImpl(RuleFlowProcessValidationError.VARIABLE_WITHOUT_TYPE));
    }
  }
  checkAllNodesConnectedToStart(process,errors);
  return (RuleFlowProcessValidationError[])errors.toArray(new RuleFlowProcessValidationError[errors.size()]);
}
