{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA53_1=input.LA(1);
  int index53_1=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))) {
s=2;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) {
s=3;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))) {
s=4;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))) {
s=5;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) {
s=6;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))) {
s=7;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))) {
s=8;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {
s=9;
}
input.seek(index53_1);
if (s >= 0) return s;
break;
case 1:
int LA53_0=input.LA(1);
int index53_0=input.index();
input.rewind();
s=-1;
if ((LA53_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))))) {
s=1;
}
input.seek(index53_0);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),53,_s,input);
error(nvae);
throw nvae;
}
