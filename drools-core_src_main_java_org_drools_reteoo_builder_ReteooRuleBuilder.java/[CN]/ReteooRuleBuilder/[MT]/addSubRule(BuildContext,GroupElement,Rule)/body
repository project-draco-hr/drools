{
  final ReteooComponentBuilder builder=this.utils.getBuilderFor(subrule);
  if (builder.requiresLeftActivation(this.utils,subrule)) {
    this.addInitialFactPattern(context,subrule,rule);
  }
  builder.build(context,this.utils,subrule);
  TerminalNode terminal=null;
  if (!(rule instanceof Query)) {
    if (rule.getConsequence() == null) {
      throw new InvalidPatternException("Rule '" + rule.getName() + "' has no Consequence");
    }
    terminal=new RuleTerminalNode(context.getNextId(),context.getTupleSource(),rule,subrule,context);
  }
 else {
    if (rule.getConsequence() != null) {
      throw new InvalidPatternException("Query '" + rule.getName() + "' should have no Consequence");
    }
    terminal=new QueryTerminalNode(context.getNextId(),context.getTupleSource(),rule,subrule);
  }
  if (context.getWorkingMemories().length == 0) {
    ((BaseNode)terminal).attach();
  }
 else {
    ((BaseNode)terminal).attach(context.getWorkingMemories());
  }
  ((BaseNode)terminal).networkUpdated();
  context.getNodes().add((BaseNode)terminal);
  if (context.getRuleBase().getConfiguration().isPartitionsEnabled()) {
    org.drools.common.RuleBasePartitionId partitionId=null;
    if (context.getPartitionId() != null) {
      partitionId=context.getPartitionId();
    }
 else {
      partitionId=context.getRuleBase().createNewPartitionId();
    }
    for (    BaseNode node : context.getNodes()) {
      node.setPartitionId(partitionId);
    }
  }
  return terminal;
}
