{
  mv.visitVarInsn(ALOAD,0);
  mv.visitMethodInsn(INVOKEVIRTUAL,BuildUtils.getInternalType(proxyName),BuildUtils.getterName(fld.getName(),fld.getTypeName()),"()" + BuildUtils.getTypeDescriptor(fld.getTypeName()));
  Label l0=null;
  if (!BuildUtils.isPrimitive(fld.getTypeName())) {
    l0=new Label();
    mv.visitJumpInsn(IFNONNULL,l0);
  }
  mv.visitVarInsn(ALOAD,0);
  mv.visitLdcInsn(fld.getInitExpr());
  if (BuildUtils.isPrimitive(fld.getTypeName())) {
    mv.visitFieldInsn(GETSTATIC,BuildUtils.getInternalType(BuildUtils.box(fld.getTypeName())),"TYPE",Type.getDescriptor(Class.class));
  }
 else {
    mv.visitLdcInsn(Type.getType(BuildUtils.getTypeDescriptor(fld.getTypeName())));
  }
  mv.visitMethodInsn(INVOKESTATIC,Type.getInternalName(MVEL.class),"eval",Type.getMethodDescriptor(Type.getType(Object.class),new Type[]{Type.getType(String.class),Type.getType(Class.class)}));
  if (BuildUtils.isPrimitive(fld.getTypeName())) {
    mv.visitTypeInsn(CHECKCAST,BuildUtils.getInternalType(BuildUtils.box(fld.getTypeName())));
    mv.visitMethodInsn(INVOKEVIRTUAL,BuildUtils.getInternalType(BuildUtils.box(fld.getTypeName())),BuildUtils.numericMorph(BuildUtils.box(fld.getTypeName())),"()" + BuildUtils.getTypeDescriptor(fld.getTypeName()));
  }
 else {
    mv.visitTypeInsn(CHECKCAST,BuildUtils.getInternalType(fld.getTypeName()));
  }
  mv.visitMethodInsn(INVOKEVIRTUAL,BuildUtils.getInternalType(proxyName),BuildUtils.setterName(fld.getName(),fld.getTypeName()),"(" + BuildUtils.getTypeDescriptor(fld.getTypeName()) + ")"+ Type.getDescriptor(void.class));
  if (!BuildUtils.isPrimitive(fld.getTypeName())) {
    mv.visitLabel(l0);
  }
}
