{
  String fieldName=field.getName();
  String fieldType=field.getTypeName();
  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,BuildUtils.setterName(fieldName,fieldType),"(" + Type.getDescriptor(field.getType()) + ")V",null,null);
  mv.visitCode();
  if (field.hasAlias() && trait.getField(field.getAlias()) != null) {
    FieldDefinition aliasedField=trait.getField(field.getAlias());
    if (field.getType().isAssignableFrom(aliasedField.getType())) {
      TraitFactory.invokeInjector(mv,masterName,trait,core,field,false,1);
    }
 else {
      mv.visitFieldInsn(GETSTATIC,BuildUtils.getInternalType(masterName),field.getName() + "_writer",Type.getDescriptor(WriteAccessor.class));
      mv.visitVarInsn(ALOAD,0);
      mv.visitFieldInsn(GETFIELD,BuildUtils.getInternalType(masterName),"object",BuildUtils.getTypeDescriptor(core.getName()));
      mv.visitVarInsn(ALOAD,1);
      mv.visitTypeInsn(CHECKCAST,Type.getInternalName(Thing.class));
      mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Thing.class),"getCore",Type.getMethodDescriptor(Type.getType(Object.class),new Type[]{}));
      mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(WriteAccessor.class),"setValue",Type.getMethodDescriptor(Type.getType(void.class),new Type[]{Type.getType(Object.class),Type.getType(Object.class)}));
    }
  }
 else {
    TraitFactory.invokeInjector(mv,masterName,trait,core,field,false,1);
  }
  mv.visitInsn(RETURN);
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
