{
  NLGrammar grammar=new NLGrammar();
  grammar.addNLItem(new NLMappingItem(0,"{0} likes cheese","{0}.likesCheese()"));
  grammar.addNLItem(new NLMappingItem(1,"print out cheese fan status {0}","print({0})"));
  NLExpressionCompiler compiler=new NLExpressionCompiler(grammar);
  String nl="print out cheese fan status bob likes cheese";
  String expected="print(bob.likesCheese())";
  String result=compiler.compile(nl);
  assertEquals(expected,result);
  grammar=new NLGrammar();
  grammar.addNLItem(new NLMappingItem(1,"date of ' {0} '","dateOf({0})"));
  grammar.addNLItem(new NLMappingItem(2,"age of [ {0} ]","{0}.getAge()"));
  grammar.addNLItem(new NLMappingItem(3,"Today","new java.util.Date()"));
  grammar.addNLItem(new NLMappingItem(4,"{0} is before {1}","({0}).compareTo({1}) > 0"));
  nl="date of ' 10-jul-2006 ' is before Today";
  compiler=new NLExpressionCompiler(grammar);
  expected="(dateOf(10-jul-2006)).compareTo(new java.util.Date()) > 0";
  assertEquals(expected,compiler.compile(nl));
  nl="age of [ bob ] < age of [ michael ]";
  expected="bob.getAge() < michael.getAge()";
  assertEquals(expected,compiler.compile(nl));
}
