{
  String rule1="$b : B( a == 15) @watch(c) A( a == 10, b == 15, b == $b.b  ) @watch(c)";
  String rule2="$b : B( a == 15) @watch(j) A( a == 10, i == 20, b == $b.b ) @watch(s)";
  KnowledgeBase kbase=getKnowledgeBase(rule1,rule2);
  ReteooWorkingMemoryInterface wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession()).session;
  ObjectTypeNode otn=getObjectTypeNode(kbase,"A");
  assertNotNull(otn);
  List<String> sp=getSettableProperties(wm,otn);
  AlphaNode alphaNode1=(AlphaNode)otn.getSinkPropagator().getSinks()[0];
  assertEquals(calculateMaskFromPattern(list("a"),0L,sp),alphaNode1.getDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","b","c","s","i"),0L,sp),alphaNode1.getInferredMask());
  AlphaNode alphaNode1_1=(AlphaNode)alphaNode1.getSinkPropagator().getSinks()[0];
  assertEquals(calculateMaskFromPattern(list("b"),0L,sp),alphaNode1_1.getDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","b","c"),0L,sp),alphaNode1_1.getInferredMask());
  BetaNode betaNode1=(BetaNode)alphaNode1_1.getSinkPropagator().getSinks()[0];
  assertEquals(calculateMaskFromPattern(list("b","c"),0L,sp),betaNode1.getRightDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","b","c"),0L,sp),betaNode1.getRightInferredMask());
  assertEquals(calculateMaskFromPattern(list("c"),0L,sp),betaNode1.getLeftDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","c"),0L,sp),betaNode1.getLeftInferredMask());
  AlphaNode alphaNode1_2=(AlphaNode)alphaNode1.getSinkPropagator().getSinks()[1];
  assertEquals(calculateMaskFromPattern(list("i"),0L,sp),alphaNode1_2.getDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","i","b","s"),0L,sp),alphaNode1_2.getInferredMask());
  BetaNode betaNode2=(BetaNode)alphaNode1_2.getSinkPropagator().getSinks()[0];
  assertEquals(calculateMaskFromPattern(list("b","s"),0L,sp),betaNode2.getRightDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","i","b","s"),0L,sp),betaNode2.getRightInferredMask());
  assertEquals(calculateMaskFromPattern(list("j"),0L,sp),betaNode2.getLeftDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","j"),0L,sp),betaNode2.getLeftInferredMask());
  kbase.removeRule("org.drools","r0");
  assertEquals(calculateMaskFromPattern(list("a"),0L,sp),alphaNode1.getDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","i","b","s"),0L,sp),alphaNode1.getInferredMask());
  assertEquals(calculateMaskFromPattern(list("i"),0L,sp),alphaNode1_2.getDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","i","b","s"),0L,sp),alphaNode1_2.getInferredMask());
  assertEquals(calculateMaskFromPattern(list("b","s"),0L,sp),betaNode2.getRightDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","i","b","s"),0L,sp),betaNode2.getRightInferredMask());
  assertEquals(calculateMaskFromPattern(list("j"),0L,sp),betaNode2.getLeftDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","j"),0L,sp),betaNode2.getLeftInferredMask());
  kbase=getKnowledgeBase(rule1,rule2);
  kbase.removeRule("org.drools","r1");
  otn=getObjectTypeNode(kbase,"A");
  alphaNode1=(AlphaNode)otn.getSinkPropagator().getSinks()[0];
  assertEquals(calculateMaskFromPattern(list("a"),0L,sp),alphaNode1.getDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","b","c"),0L,sp),alphaNode1.getInferredMask());
  alphaNode1_1=(AlphaNode)alphaNode1.getSinkPropagator().getSinks()[0];
  assertEquals(calculateMaskFromPattern(list("b"),0L,sp),alphaNode1_1.getDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","b","c"),0L,sp),alphaNode1_1.getInferredMask());
  betaNode1=(BetaNode)alphaNode1_1.getSinkPropagator().getSinks()[0];
  assertEquals(calculateMaskFromPattern(list("b","c"),0L,sp),betaNode1.getRightDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","b","c"),0L,sp),betaNode1.getRightInferredMask());
  assertEquals(calculateMaskFromPattern(list("c"),0L,sp),betaNode1.getLeftDeclaredMask());
  assertEquals(calculateMaskFromPattern(list("a","c"),0L,sp),betaNode1.getLeftInferredMask());
}
