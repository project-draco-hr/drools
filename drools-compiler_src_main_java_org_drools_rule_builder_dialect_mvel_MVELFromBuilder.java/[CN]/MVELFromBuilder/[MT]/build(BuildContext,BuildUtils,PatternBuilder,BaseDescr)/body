{
  final FromDescr fromDescr=(FromDescr)descr;
  final Pattern pattern=patternBuilder.build(context,utils,fromDescr.getReturnedPattern());
  if (pattern == null) {
    return null;
  }
  final AccessorDescr accessor=(AccessorDescr)fromDescr.getDataSource();
  DataProvider dataProvider=null;
  try {
    final DroolsMVELFactory factory=new DroolsMVELFactory();
    factory.setPreviousDeclarationMap(context.getDeclarationResolver().getDeclarations());
    factory.setGlobalsMap(context.getPkg().getGlobals());
    final Serializable compiled=MVEL.compileExpression(accessor.toString());
    dataProvider=new MVELDataProvider(compiled,factory);
  }
 catch (  final Exception e) {
    context.getErrors().add(new RuleError(context.getRule(),fromDescr,null,"Unable to build expression for 'from' node '" + accessor.toString() + "'"));
    return null;
  }
  return new From(pattern,dataProvider);
}
