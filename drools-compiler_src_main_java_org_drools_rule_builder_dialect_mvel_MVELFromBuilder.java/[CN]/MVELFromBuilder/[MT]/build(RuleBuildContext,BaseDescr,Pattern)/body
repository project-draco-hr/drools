{
  final FromDescr fromDescr=(FromDescr)descr;
  final AccessorDescr accessor=(AccessorDescr)fromDescr.getDataSource();
  From from=null;
  try {
    MVELDialect dialect=(MVELDialect)context.getDialect("mvel");
    String text=(String)accessor.toString();
    Dialect.AnalysisResult analysis=dialect.analyzeExpression(context,descr,text,new Set[]{context.getDeclarationResolver().getDeclarations(context.getRule()).keySet(),context.getPkg().getGlobals().keySet()});
    Declaration[] previousDeclarations=(Declaration[])context.getDeclarationResolver().getDeclarations(context.getRule()).values().toArray(new Declaration[context.getDeclarationResolver().getDeclarations(context.getRule()).size()]);
    MVELCompilationUnit unit=dialect.getMVELCompilationUnit(text,analysis,previousDeclarations,null,null,context);
    MVELDataProvider dataProvider=new MVELDataProvider(unit,context.getDialect().getId());
    from=new From(dataProvider);
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData(dialect.getId());
    data.addCompileable(from,dataProvider);
    dataProvider.compile(context.getPackageBuilder().getRootClassLoader());
  }
 catch (  final Exception e) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),fromDescr,null,"Unable to build expression for 'from' : " + e.getMessage() + " '"+ accessor+ "'"));
    return null;
  }
  return from;
}
