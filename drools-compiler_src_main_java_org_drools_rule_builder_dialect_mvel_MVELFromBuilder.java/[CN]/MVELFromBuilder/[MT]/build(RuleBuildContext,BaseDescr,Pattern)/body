{
  final FromDescr fromDescr=(FromDescr)descr;
  final AccessorDescr accessor=(AccessorDescr)fromDescr.getDataSource();
  DataProvider dataProvider=null;
  try {
    final DroolsMVELFactory factory=new DroolsMVELFactory(context.getDeclarationResolver().getDeclarations(),null,context.getPkg().getGlobals());
    MVELDialect dialect=(MVELDialect)context.getDialect("mvel");
    final ClassImportResolverFactory classImportResolverFactory=dialect.getClassImportResolverFactory();
    factory.setNextFactory(classImportResolverFactory);
    String text=(String)accessor.toString();
    Dialect.AnalysisResult analysis=dialect.analyzeExpression(context,descr,text);
    final Serializable expr=dialect.compile(text,analysis,null,context);
    dataProvider=new MVELDataProvider(expr,factory);
  }
 catch (  final Exception e) {
    context.getErrors().add(new RuleError(context.getRule(),fromDescr,null,"Unable to build expression for 'from' node '" + accessor + "'"));
    return null;
  }
  return new From(dataProvider);
}
