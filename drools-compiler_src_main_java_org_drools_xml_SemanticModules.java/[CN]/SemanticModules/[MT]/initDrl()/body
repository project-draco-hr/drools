{
  SemanticModule module=new DefaultSemanticModule("http://drools.org/drools-4.0");
  module.addHandler("package",new PackageHandler());
  module.addHandler("rule",new RuleHandler());
  module.addHandler("query",new QueryHandler());
  module.addHandler("attribute",null);
  module.addHandler("function",new FunctionHandler());
  module.addHandler("lhs",new AndHandler());
  module.addHandler("and-restriction-connective",new RestrictionConnectiveHandler());
  module.addHandler("or-restriction-connective",new RestrictionConnectiveHandler());
  module.addHandler("and-conditional-element",new AndHandler());
  module.addHandler("or-conditional-element",new OrHandler());
  module.addHandler("and-constraint-connective",new AndHandler());
  module.addHandler("or-constraint-connective",new OrHandler());
  module.addHandler("not",new NotHandler());
  module.addHandler("exists",new ExistsHandler());
  module.addHandler("eval",new EvalHandler());
  module.addHandler("pattern",new PatternHandler());
  module.addHandler("from",new FromHandler());
  module.addHandler("forall",new ForallHandler());
  module.addHandler("collect",new CollectHandler());
  module.addHandler("accumulate",new AccumulateHandler());
  module.addHandler("field-constraint",new FieldConstraintHandler());
  module.addHandler("literal-restriction",new LiteralRestrictionHandler());
  module.addHandler("variable-restriction",new VariableRestrictionsHandler());
  module.addHandler("predicate",new PredicateHandler());
  module.addHandler("return-value-restriction",new ReturnValueRestrictionHandler());
  module.addHandler("qualified-identifier-restriction",new QualifiedIdentifierRestrictionHandler());
  module.addHandler("field-binding",new FieldBindingHandler());
  module.addHandler("field-binding",new FieldBindingHandler());
  module.addHandler("init",new AccumulateHelperHandler());
  module.addHandler("action",new AccumulateHelperHandler());
  module.addHandler("result",new AccumulateHelperHandler());
  module.addHandler("reverse",new AccumulateHelperHandler());
  module.addHandler("external-function",new AccumulateHelperHandler());
  module.addHandler("expression",new ExpressionHandler());
  addSemanticModule(module);
}
