{
  String str="rule R1 when\n" + "    String( this == \"this\" )\n" + "    String( this == \"that\" )\n"+ "then\n"+ "end\n";
  KnowledgeBase kbase=loadKnowledgeBaseFromString(str);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  ksession.fireAllRules();
  for (int i=0; i < 10; i++) {
    FactHandle fh=ksession.insert("this");
    ksession.fireAllRules();
    ksession.delete(fh);
    ksession.fireAllRules();
  }
  Rete rete=((KnowledgeBaseImpl)kbase).getRete();
  LeftInputAdapterNode liaNode=null;
  for (  ObjectTypeNode otn : rete.getObjectTypeNodes()) {
    if (String.class == otn.getObjectType().getValueType().getClassType()) {
      AlphaNode alphaNode=(AlphaNode)otn.getSinkPropagator().getSinks()[0];
      liaNode=(LeftInputAdapterNode)alphaNode.getSinkPropagator().getSinks()[0];
      break;
    }
  }
  assertNotNull(liaNode);
  InternalWorkingMemory wm=(InternalWorkingMemory)ksession;
  LeftInputAdapterNode.LiaNodeMemory memory=(LeftInputAdapterNode.LiaNodeMemory)wm.getNodeMemory(liaNode);
  TupleSets<LeftTuple> stagedLeftTuples=memory.getSegmentMemory().getStagedLeftTuples();
  assertNull(stagedLeftTuples.getDeleteFirst());
  assertNull(stagedLeftTuples.getInsertFirst());
}
