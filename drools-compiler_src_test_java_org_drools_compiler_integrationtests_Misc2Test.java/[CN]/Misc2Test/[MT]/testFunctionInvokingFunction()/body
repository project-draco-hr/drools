{
  String drl="function boolean isOdd(int i) {\n" + "    return i % 2 == 1;\n" + "}\n"+ "\n"+ "function boolean isEven(int i) {\n"+ "    return !isOdd(i);\n"+ "}\n"+ "\n"+ "global java.util.List list;\n"+ "\n"+ "rule R when\n"+ "    $i : Integer( isEven( this ) ) \n"+ "then\n"+ "    list.add($i);\n"+ "end\n";
  final KieBase kbase=new KieHelper().addContent(drl,ResourceType.DRL).build();
  int parallelThreads=10;
  ExecutorService executor=Executors.newFixedThreadPool(parallelThreads);
  Collection<Callable<Boolean>> solvers=new ArrayList<Callable<Boolean>>();
  for (int i=0; i < parallelThreads; ++i) {
    solvers.add(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        KieSession ksession=kbase.newKieSession();
        List<Integer> list=new ArrayList<Integer>();
        ksession.setGlobal("list",list);
        for (int i=0; i < 100; i++) {
          ksession.insert(i);
        }
        ksession.fireAllRules();
        return list.size() == 50;
      }
    }
);
  }
  CompletionService<Boolean> ecs=new ExecutorCompletionService<Boolean>(executor);
  for (  Callable<Boolean> s : solvers) {
    ecs.submit(s);
  }
  for (int i=0; i < parallelThreads; ++i) {
    assertTrue(ecs.take().get());
  }
}
