{
  String drl="rule R1 when\n" + "    $a : Integer(this == 1)\n" + "    $b : String()\n"+ "    $c : Integer(this == 2)\n"+ "then \n"+ "end\n"+ "rule R2 when\n"+ "    $a : Integer(this == 1)\n"+ "    $b : String()\n"+ "    $c : Integer(this == 3)\n"+ "then \n"+ "end\n";
  KieSession ksession=new KieHelper().addContent(drl,ResourceType.DRL).build().newKieSession();
  FactHandle fh1=ksession.insert(1);
  FactHandle fh2=ksession.insert(3);
  FactHandle fh3=ksession.insert("test");
  ksession.fireAllRules();
  ksession.delete(fh1);
  ksession.delete(fh2);
  ksession.delete(fh3);
  ksession.fireAllRules();
  NodeMemories nodeMemories=((InternalWorkingMemory)ksession).getNodeMemories();
  for (int i=0; i < nodeMemories.length(); i++) {
    Memory memory=nodeMemories.peekNodeMemory(i);
    if (memory != null && memory.getSegmentMemory() != null) {
      SegmentMemory segmentMemory=memory.getSegmentMemory();
      System.out.println(memory);
      LeftTuple deleteFirst=memory.getSegmentMemory().getStagedLeftTuples().getDeleteFirst();
      if (segmentMemory.getRootNode() instanceof JoinNode) {
        BetaMemory bm=(BetaMemory)segmentMemory.getNodeMemories().getFirst();
        assertEquals(0,bm.getLeftTupleMemory().size());
      }
      System.out.println(deleteFirst);
      assertNull(deleteFirst);
    }
  }
}
