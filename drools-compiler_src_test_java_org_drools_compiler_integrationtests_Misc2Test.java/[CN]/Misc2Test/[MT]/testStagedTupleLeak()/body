{
  String str="rule R1 when\n" + "    $i : Integer()\n" + "then\n"+ "    insertLogical( $i.toString() );\n"+ "end\n"+ "\n"+ "rule R2 when\n"+ "    $i : Integer()\n"+ "then\n"+ "    delete( $i );\n"+ "end\n"+ "\n"+ "rule R3 when\n"+ "    $l : Long()\n"+ "    $s : String( this == $l.toString() )\n"+ "then\n"+ "end\n";
  KnowledgeBase kbase=loadKnowledgeBaseFromString(str);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  for (int i=0; i < 10; i++) {
    ksession.insert(i);
    ksession.fireAllRules();
  }
  Rete rete=((KnowledgeBaseImpl)kbase).getRete();
  JoinNode joinNode=null;
  for (  ObjectTypeNode otn : rete.getObjectTypeNodes()) {
    if (String.class == otn.getObjectType().getValueType().getClassType()) {
      joinNode=(JoinNode)otn.getSinkPropagator().getSinks()[0];
      break;
    }
  }
  assertNotNull(joinNode);
  InternalWorkingMemory wm=(InternalWorkingMemory)ksession;
  BetaMemory memory=(BetaMemory)wm.getNodeMemory(joinNode);
  RightTupleSets stagedRightTuples=memory.getStagedRightTuples();
  assertEquals(0,stagedRightTuples.deleteSize());
  assertNull(stagedRightTuples.getDeleteFirst());
  assertEquals(0,stagedRightTuples.insertSize());
  assertNull(stagedRightTuples.getInsertFirst());
}
