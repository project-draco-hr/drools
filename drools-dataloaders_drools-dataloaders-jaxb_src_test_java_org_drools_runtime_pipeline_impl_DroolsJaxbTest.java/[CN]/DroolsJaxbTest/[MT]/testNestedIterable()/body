{
  Options xjcOpts=new Options();
  xjcOpts.setSchemaLanguage(Language.XMLSCHEMA);
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  String[] classNames=KnowledgeBuilderHelper.addXsdModel(ResourceFactory.newClassPathResource("order.xsd",getClass()),kbuilder,xjcOpts,"xsd");
  assertFalse(kbuilder.hasErrors());
  kbuilder.add(ResourceFactory.newClassPathResource("test_Jaxb.drl",getClass()),ResourceType.DRL);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List list1=new ArrayList();
  List list2=new ArrayList();
  ksession.setGlobal("list1",list1);
  ksession.setGlobal("list2",list2);
  JAXBContext jaxbCtx=KnowledgeBuilderHelper.newJAXBContext(classNames,kbase);
  Unmarshaller unmarshaller=jaxbCtx.createUnmarshaller();
  Transformer transformer=PipelineFactory.newJaxbTransformer(unmarshaller);
  Expression expression=PipelineFactory.newMvelExpression("this.orderItem");
  transformer.addReceiver(expression);
  Splitter splitter=PipelineFactory.newIterateSplitter();
  expression.addReceiver(splitter);
  splitter.addReceiver(PipelineFactory.newStatefulKnowledgeSessionReceiverAdapter());
  StatefulKnowledgeSessionDataLoader dataLoader=new StatefulKnowledgeSessionDataLoaderImpl(ksession,transformer);
  Map<FactHandle,Object> handles=dataLoader.insert(new StreamSource(getClass().getResourceAsStream("order.xml")));
  ksession.fireAllRules();
  assertEquals(2,handles.size());
  assertEquals(1,list1.size());
  assertEquals(1,list2.size());
  assertEquals("org.drools.model.order.Order$OrderItem",list1.get(0).getClass().getName());
  assertEquals("org.drools.model.order.Order$OrderItem",list2.get(0).getClass().getName());
  assertNotSame(list1.get(0),list2.get(0));
}
