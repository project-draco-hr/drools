{
  String drl="" + "package org.drools.factmodel.traits;\n" + "\n"+ "import org.drools.core.factmodel.traits.Traitable;\n"+ "import org.drools.core.factmodel.traits.Thing;\n"+ "global java.util.List list;\n"+ "\n"+ "declare trait ParentTrait\n"+ "@propertyReactive\n"+ "    child : Child  \n"+ "    age : int = 24 \n"+ "end\n"+ "\n"+ "declare trait GrandParentTrait\n"+ "@propertyReactive\n"+ "    grandChild : Child \n"+ "    age : int = 64 \n"+ "end\n"+ "declare trait FatherTrait extends ParentTrait, GrandParentTrait \n"+ "@propertyReactive\n"+ "   name : String = \"child\"\n"+ "   sex : String\n"+ "end\n"+ "declare Parent\n"+ "@Traitable\n"+ "@propertyReactive\n"+ "   name : String\n"+ "   child : Child\n"+ "end\n"+ "declare Child\n"+ "@Traitable\n"+ "@propertyReactive\n"+ "   name : String\n"+ "   sex : String = \"male\"\n"+ "end\n"+ "\n"+ "rule \"Init\" \n"+ "no-loop\n"+ "when\n"+ "    \n"+ "then\n"+ "   Child c = new Child(\"C1\",\"male\");\n"+ "   Child c2 = new Child(\"C2\",\"male\");\n"+ "   Parent p = new Parent(\"parent\", c);\n"+ "   insert(c);insert(p);\n"+ "   insert(c2);\n"+ "   System.out.println(\"Initialized : \"+p);\n"+ "end\n"+ "\n"+ "rule \"trait as father\" \n"+ "salience -1000\n"+ "when\n"+ "   $p : Parent( name == \"parent\" )\n"+ "then\n"+ "   FatherTrait p = don ( $p , FatherTrait.class );\n"+ "   System.out.println(\"F donned : \"+p);\n"+ "end\n"+ "\n"+ "rule \"trait as parent\" \n"+ "no-loop\n"+ "when\n"+ "   $p : Parent( name == \"parent\" )\n"+ "then\n"+ "   ParentTrait c =  don ( $p , ParentTrait.class );\n"+ "   System.out.println(\"P donned : \"+c);\n"+ "end\n"+ "\n"+ "rule \"trait and assign the grandchild\" \n"+ "no-loop\n"+ "when\n"+ "   $c : Child( name == \"C1\" )\n"+ "   $p : Parent( child == $c )\n"+ "then\n"+ "   GrandParentTrait c =  don ( $p , GrandParentTrait.class );\n"+ "   System.out.println(\"G donned : \"+c);\n"+ "   modify(c){\n"+ "       setGrandChild( $c );}\n"+ "end\n"+ "\n"+ "rule \"test three traits\" \n"+ "no-loop\n"+ "when\n"+ "   $p : FatherTrait( this isA ParentTrait, this isA GrandParentTrait )\n"+ "then\n"+ "   System.out.println(\"::FatherTrait( this isA ParentTrait, this isA GrandParentTrait ) \");\n"+ "   list.add(\"correct\");\n"+ "end\n"+ "\n"+ "\n";
  KnowledgeBase kBase=loadKnowledgeBaseFromString(drl);
  TraitFactory.setMode(mode,kBase);
  StatefulKnowledgeSession knowledgeSession=kBase.newStatefulKnowledgeSession();
  List list=new ArrayList();
  knowledgeSession.setGlobal("list",list);
  knowledgeSession.fireAllRules();
  assertTrue(list.contains("correct"));
  assertEquals(1,list.size());
}
