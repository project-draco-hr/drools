{
  org.drools.marshalling.impl.ProtobufMessages.ActionQueue.Action result=new org.drools.marshalling.impl.ProtobufMessages.ActionQueue.Action(this);
  int from_bitField0_=bitField0_;
  int to_bitField0_=0;
  if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x00000001;
  }
  result.type_=type_;
  if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x00000002;
  }
  if (behaviorExpireBuilder_ == null) {
    result.behaviorExpire_=behaviorExpire_;
  }
 else {
    result.behaviorExpire_=behaviorExpireBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x00000004;
  }
  if (deactivateCallbackBuilder_ == null) {
    result.deactivateCallback_=deactivateCallback_;
  }
 else {
    result.deactivateCallback_=deactivateCallbackBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
    to_bitField0_|=0x00000008;
  }
  if (logicalRetractBuilder_ == null) {
    result.logicalRetract_=logicalRetract_;
  }
 else {
    result.logicalRetract_=logicalRetractBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
    to_bitField0_|=0x00000010;
  }
  if (propagateBuilder_ == null) {
    result.propagate_=propagate_;
  }
 else {
    result.propagate_=propagateBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
    to_bitField0_|=0x00000020;
  }
  if (assertBuilder_ == null) {
    result.assert_=assert_;
  }
 else {
    result.assert_=assertBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
    to_bitField0_|=0x00000040;
  }
  if (expireBuilder_ == null) {
    result.expire_=expire_;
  }
 else {
    result.expire_=expireBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
    to_bitField0_|=0x00000080;
  }
  if (signalBuilder_ == null) {
    result.signal_=signal_;
  }
 else {
    result.signal_=signalBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
    to_bitField0_|=0x00000100;
  }
  if (signalProcessInstanceBuilder_ == null) {
    result.signalProcessInstance_=signalProcessInstance_;
  }
 else {
    result.signalProcessInstance_=signalProcessInstanceBuilder_.build();
  }
  result.bitField0_=to_bitField0_;
  onBuilt();
  return result;
}
