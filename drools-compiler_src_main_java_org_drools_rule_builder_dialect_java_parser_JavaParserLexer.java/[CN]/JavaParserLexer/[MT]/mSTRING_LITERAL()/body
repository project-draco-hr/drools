{
  try {
    ruleNestingLevel++;
    int _type=STRING_LITERAL;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      match('\"');
      loop23:       do {
        int alt23=3;
        int LA23_0=input.LA(1);
        if (((LA23_0 >= '\u0000' && LA23_0 <= '!') || (LA23_0 >= '#' && LA23_0 <= '[') || (LA23_0 >= ']' && LA23_0 <= '\uFFFE'))) {
          alt23=1;
        }
 else         if ((LA23_0 == '\\')) {
          alt23=2;
        }
switch (alt23) {
case 1:
{
            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFE')) {
              input.consume();
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        break;
case 2:
{
        mESCAPE_SEQUENCE();
      }
    break;
default :
  break loop23;
}
}
 while (true);
match('\"');
}
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
