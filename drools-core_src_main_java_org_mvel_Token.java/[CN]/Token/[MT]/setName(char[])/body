{
  if ((fields & STR_LITERAL) != 0) {
    fields|=LITERAL;
    int escapes=0;
    for (int i=0; i < name.length; i++) {
      if (name[i] == '\\') {
        name[i++]=0;
        name[i]=handleEscapeSequence(name[i]);
        escapes++;
      }
    }
    char[] processedEscapeString=new char[name.length - escapes];
    int cursor=0;
    for (    char aName : name) {
      if (aName == 0) {
        continue;
      }
      processedEscapeString[cursor++]=aName;
    }
    this.value=new String(this.name=processedEscapeString);
  }
 else {
    this.value=new String(this.name=name);
  }
  if ((fields & (SUBEVAL | LITERAL)) != 0) {
  }
 else   if (LITERALS.containsKey(value)) {
    fields|=EVAL_RIGHT | LITERAL;
    if ((value=LITERALS.get(value)) == ThisLiteral.class)     fields|=THISREF;
  }
 else   if (OPERATORS.containsKey(value)) {
    fields|=OPERATOR;
    resetValue=value=OPERATORS.get(value);
    return;
  }
 else   if (((fields & NUMERIC) != 0) || isNumber(name)) {
    if (((fields|=LITERAL | NUMERIC) & INVERT) != 0) {
      value=this.numericValue=new BigDecimal(~parseInt((String)value));
    }
 else {
      value=this.numericValue=new BigDecimal(valueOf(name));
    }
  }
 else   if ((firstUnion=findFirst('.',name)) > 0) {
    fields|=DEEP_PROPERTY | IDENTIFIER;
  }
 else {
    fields|=IDENTIFIER;
  }
  if ((endOfName=findFirst('[',name)) > 0)   fields|=COLLECTION;
  resetValue=value;
}
