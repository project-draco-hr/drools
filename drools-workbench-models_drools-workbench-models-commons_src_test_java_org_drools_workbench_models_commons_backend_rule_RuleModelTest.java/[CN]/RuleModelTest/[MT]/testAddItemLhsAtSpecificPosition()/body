{
  final RuleModel model=new RuleModel();
  final FactPattern a=new FactPattern();
  model.addLhsItem(a);
  assertEquals(1,model.lhs.length);
  final FactPattern b=new FactPattern();
  model.addLhsItem(b);
  assertEquals(2,model.lhs.length);
  final FactPattern c=new FactPattern();
  model.addLhsItem(c,true);
  assertEquals(3,model.lhs.length);
  assertEquals(a,model.lhs[0]);
  assertEquals(b,model.lhs[1]);
  assertEquals(c,model.lhs[2]);
  final FactPattern d=new FactPattern();
  model.addLhsItem(d,false);
  assertEquals(4,model.lhs.length);
  assertEquals(d,model.lhs[0]);
  assertEquals(a,model.lhs[1]);
  assertEquals(b,model.lhs[2]);
  assertEquals(c,model.lhs[3]);
  final FactPattern e=new FactPattern();
  model.addLhsItem(e,2);
  assertEquals(5,model.lhs.length);
  assertEquals(d,model.lhs[0]);
  assertEquals(a,model.lhs[1]);
  assertEquals(e,model.lhs[2]);
  assertEquals(b,model.lhs[3]);
  assertEquals(c,model.lhs[4]);
  final FactPattern f=new FactPattern();
  final FactPattern g=new FactPattern();
  model.addLhsItem(f,-1);
  model.addLhsItem(g,100);
  assertEquals(7,model.lhs.length);
  assertEquals(f,model.lhs[0]);
  assertEquals(d,model.lhs[1]);
  assertEquals(a,model.lhs[2]);
  assertEquals(e,model.lhs[3]);
  assertEquals(b,model.lhs[4]);
  assertEquals(c,model.lhs[5]);
  assertEquals(g,model.lhs[6]);
  model.moveLhsItemDown(5);
  model.moveLhsItemUp(3);
  assertEquals(7,model.lhs.length);
  assertEquals(f,model.lhs[0]);
  assertEquals(d,model.lhs[1]);
  assertEquals(e,model.lhs[2]);
  assertEquals(a,model.lhs[3]);
  assertEquals(b,model.lhs[4]);
  assertEquals(g,model.lhs[5]);
  assertEquals(c,model.lhs[6]);
  model.moveLhsItemUp(0);
  model.moveLhsItemDown(6);
  assertEquals(7,model.lhs.length);
  assertEquals(f,model.lhs[0]);
  assertEquals(d,model.lhs[1]);
  assertEquals(e,model.lhs[2]);
  assertEquals(a,model.lhs[3]);
  assertEquals(b,model.lhs[4]);
  assertEquals(g,model.lhs[5]);
  assertEquals(c,model.lhs[6]);
}
