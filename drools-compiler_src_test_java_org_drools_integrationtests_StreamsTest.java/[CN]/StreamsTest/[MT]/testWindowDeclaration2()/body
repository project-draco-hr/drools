{
  String drl="package org.drools\n" + "declare Double\n" + "    @role(event)\n"+ "end\n"+ "declare window Streem\n"+ "    Double() over window:length( 10 ) from entry-point data\n"+ "end\n"+ "rule \"See\"\n"+ "when\n"+ "    $sum : Double() from accumulate (\n"+ "        $d: Double()\n"+ "            from window Streem,\n"+ "        sum( $d )\n"+ "    )\n"+ "then\n"+ "end";
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(EventProcessingOption.STREAM);
  KnowledgeBase kbase=loadKnowledgeBaseFromString(kconf,drl);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  AgendaEventListener ael=mock(AgendaEventListener.class);
  ksession.addEventListener(ael);
  SessionEntryPoint ep=ksession.getWorkingMemoryEntryPoint("data");
  ep.insert(Double.valueOf(10));
  ep.insert(Double.valueOf(11));
  ep.insert(Double.valueOf(12));
  ksession.fireAllRules();
  ArgumentCaptor<org.kie.event.rule.AfterMatchFiredEvent> captor=ArgumentCaptor.forClass(org.kie.event.rule.AfterMatchFiredEvent.class);
  verify(ael,times(1)).afterMatchFired(captor.capture());
  AfterMatchFiredEvent aafe=captor.getValue();
  Assert.assertThat(((Number)aafe.getMatch().getDeclarationValue("$sum")).intValue(),is(33));
}
