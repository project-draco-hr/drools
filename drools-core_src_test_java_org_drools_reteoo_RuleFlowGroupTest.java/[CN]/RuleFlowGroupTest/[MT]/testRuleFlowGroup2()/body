{
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final List list=new ArrayList();
  final Consequence consequence=new Consequence(){
    /** 
 */
    private static final long serialVersionUID=-2596133893109870505L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
      list.add(knowledgeHelper.getRule());
    }
  }
;
  final Rule rule0=new Rule("test-rule0");
  rule0.setRuleFlowGroup("rule-flow-group-0");
  rule0.setConsequence(consequence);
  final RuleTerminalNode node0=new RuleTerminalNode(3,new MockTupleSource(2),rule0,rule0.getLhs());
  final Rule rule1=new Rule("test-rule1");
  rule1.setRuleFlowGroup("rule-flow-group-1");
  rule1.setConsequence(consequence);
  final RuleTerminalNode node1=new RuleTerminalNode(4,new MockTupleSource(2),rule1,rule1.getLhs());
  final Rule rule2=new Rule("test-rule2");
  rule2.setRuleFlowGroup("rule-flow-group-2");
  rule2.setConsequence(consequence);
  rule2.setSalience(10);
  final RuleTerminalNode node2=new RuleTerminalNode(5,new MockTupleSource(2),rule2,rule2.getLhs());
  final Rule rule3=new Rule("test-rule3");
  rule3.setRuleFlowGroup("rule-flow-group-3");
  rule3.setConsequence(consequence);
  final RuleTerminalNode node3=new RuleTerminalNode(6,new MockTupleSource(2),rule3,rule3.getLhs());
  final PropagationContext context0=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule0,null);
  final IStartNode start=new StartNode();
  final IRuleSetNode ruleSet0=new RuleSetNode();
  ruleSet0.setRuleFlowGroup("rule-flow-group-0");
  final IRuleSetNode ruleSet1=new RuleSetNode();
  ruleSet1.setRuleFlowGroup("rule-flow-group-1");
  final IRuleSetNode ruleSet2=new RuleSetNode();
  ruleSet2.setRuleFlowGroup("rule-flow-group-2");
  final IRuleSetNode ruleSet3=new RuleSetNode();
  ruleSet3.setRuleFlowGroup("rule-flow-group-3");
  final ISplit split=new Split();
  split.setType(ISplit.TYPE_XOR);
  final IJoin join=new Join();
  join.setType(IJoin.TYPE_XOR);
  final IEndNode end=new EndNode();
  new Connection(start,ruleSet0,IConnection.TYPE_NORMAL);
  new Connection(ruleSet0,split,IConnection.TYPE_NORMAL);
  Connection out1=new Connection(split,ruleSet1,IConnection.TYPE_NORMAL);
  Connection out2=new Connection(split,ruleSet2,IConnection.TYPE_NORMAL);
  new Connection(ruleSet1,join,IConnection.TYPE_NORMAL);
  new Connection(ruleSet2,join,IConnection.TYPE_NORMAL);
  new Connection(join,ruleSet3,IConnection.TYPE_NORMAL);
  new Connection(ruleSet3,end,IConnection.TYPE_NORMAL);
  IConstraint constraint1=new Constraint();
  constraint1.setPriority(1);
  split.setConstraint(out1,constraint1);
  IConstraint constraint2=new Constraint();
  constraint2.setPriority(2);
  split.setConstraint(out2,constraint2);
  final IRuleFlowProcess process=new RuleFlowProcess();
  process.setId("1");
  process.addNode(start);
  process.addNode(ruleSet0);
  process.addNode(ruleSet1);
  process.addNode(ruleSet2);
  process.addNode(ruleSet3);
  process.addNode(split);
  process.addNode(join);
  process.addNode(end);
  final Rule splitRule1=new Rule("RuleFlow-1-" + split.getId() + "-"+ ruleSet1.getId());
  splitRule1.setRuleFlowGroup("DROOLS_SYSTEM");
  splitRule1.setConsequence(consequence);
  final RuleTerminalNode splitNode1=new RuleTerminalNode(7,new MockTupleSource(2),splitRule1,splitRule1.getLhs());
  final Rule splitRule2=new Rule("RuleFlow-1-" + split.getId() + "-"+ ruleSet2.getId());
  splitRule2.setRuleFlowGroup("DROOLS_SYSTEM");
  splitRule2.setConsequence(consequence);
  final RuleTerminalNode splitNode2=new RuleTerminalNode(8,new MockTupleSource(2),splitRule2,splitRule2.getLhs());
  final IRuleFlowProcessInstance processInstance=new RuleFlowProcessInstance();
  processInstance.setAgenda(agenda);
  processInstance.setProcess(process);
  assertEquals(IProcessInstance.STATE_PENDING,processInstance.getState());
  final RuleFlowGroupImpl ruleFlowGroup0=(RuleFlowGroupImpl)agenda.getRuleFlowGroup("rule-flow-group-0");
  final RuleFlowGroupImpl ruleFlowGroup1=(RuleFlowGroupImpl)agenda.getRuleFlowGroup("rule-flow-group-1");
  final RuleFlowGroupImpl ruleFlowGroup2=(RuleFlowGroupImpl)agenda.getRuleFlowGroup("rule-flow-group-2");
  final RuleFlowGroupImpl ruleFlowGroup3=(RuleFlowGroupImpl)agenda.getRuleFlowGroup("rule-flow-group-3");
  final ReteTuple tuple0=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  node0.assertTuple(tuple0,context0,workingMemory);
  final ReteTuple tuple1=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  node0.assertTuple(tuple1,context0,workingMemory);
  final ReteTuple tuple2=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  node1.assertTuple(tuple2,context0,workingMemory);
  final ReteTuple tuple3=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  node2.assertTuple(tuple3,context0,workingMemory);
  final ReteTuple tuple4=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  node3.assertTuple(tuple4,context0,workingMemory);
  final ReteTuple splitTuple1=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  splitNode1.assertTuple(splitTuple1,context0,workingMemory);
  final ReteTuple splitTuple2=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  splitNode1.assertTuple(splitTuple2,context0,workingMemory);
  final RuleFlowGroupImpl systemRuleFlowGroup=(RuleFlowGroupImpl)agenda.getRuleFlowGroup("DROOLS_SYSTEM");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(1,ruleFlowGroup1.size());
  assertEquals(1,ruleFlowGroup2.size());
  assertEquals(1,ruleFlowGroup3.size());
  assertEquals(2,systemRuleFlowGroup.size());
  assertEquals(0,agenda.agendaSize());
  processInstance.start();
  assertEquals(IProcessInstance.STATE_ACTIVE,processInstance.getState());
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(2,agenda.agendaSize());
  agenda.fireNextItem(null);
  assertEquals(1,ruleFlowGroup0.size());
  assertEquals(1,agenda.agendaSize());
  agenda.fireNextItem(null);
  workingMemory.executeQueuedActions();
  assertEquals(0,ruleFlowGroup0.size());
  assertEquals(1,ruleFlowGroup1.size());
  assertEquals(1,ruleFlowGroup2.size());
  assertEquals(1,agenda.agendaSize());
  agenda.fireNextItem(null);
  workingMemory.executeQueuedActions();
  assertEquals(0,ruleFlowGroup1.size());
  assertEquals(1,ruleFlowGroup2.size());
  assertEquals(1,ruleFlowGroup3.size());
  assertEquals(1,agenda.agendaSize());
  agenda.fireNextItem(null);
  workingMemory.executeQueuedActions();
  assertEquals(0,ruleFlowGroup0.size());
  assertEquals(0,ruleFlowGroup1.size());
  assertEquals(1,ruleFlowGroup2.size());
  assertEquals(0,ruleFlowGroup3.size());
  assertEquals(0,agenda.agendaSize());
  assertEquals(IProcessInstance.STATE_COMPLETED,processInstance.getState());
}
