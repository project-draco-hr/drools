{
  leftTuple.setLeftTupleSink(this.node);
  if (leftTuple.getFirstChild() == null) {
    this.node.assertLeftTuple(leftTuple,context,workingMemory);
  }
 else {
    if (retract) {
      this.node.getSinkPropagator().propagateRetractLeftTuple(leftTuple,context,workingMemory);
    }
 else {
      this.node.getSinkPropagator().propagateModifyChildLeftTuple(leftTuple,context,workingMemory,true);
    }
  }
  if (leftTuple.getLeftParent() == null) {
    Object node=workingMemory.getNodeMemory(this.node);
    RightTupleMemory rightMemory=null;
    if (node instanceof BetaMemory) {
      rightMemory=((BetaMemory)node).getRightTupleMemory();
    }
 else     if (node instanceof AccumulateMemory) {
      rightMemory=((AccumulateMemory)node).getBetaMemory().getRightTupleMemory();
    }
    final TupleStartEqualsConstraint constraint=TupleStartEqualsConstraint.getInstance();
    TupleStartEqualsConstraintContextEntry contextEntry=new TupleStartEqualsConstraintContextEntry();
    contextEntry.updateFromTuple(workingMemory,leftTuple);
    FastIterator rightIt=rightMemory.fastIterator();
    for (RightTuple rightTuple=rightMemory.getFirst(leftTuple,(InternalFactHandle)context.getFactHandle(),rightIt); rightTuple != null; ) {
      RightTuple temp=(RightTuple)rightIt.next(rightTuple);
      if (constraint.isAllowedCachedLeft(contextEntry,rightTuple.getFactHandle())) {
        rightMemory.remove(rightTuple);
      }
      rightTuple=temp;
    }
  }
}
