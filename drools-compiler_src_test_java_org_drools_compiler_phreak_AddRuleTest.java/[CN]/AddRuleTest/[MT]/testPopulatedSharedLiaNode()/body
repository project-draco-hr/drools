{
  KnowledgeBase kbase1=buildKnowledgeBase("r1","   A() B(1;) C() D() E()\n");
  InternalWorkingMemory wm=((InternalWorkingMemory)kbase1.newStatefulKnowledgeSession());
  List list=new ArrayList();
  wm.setGlobal("list",list);
  wm.insert(new A(1));
  wm.insert(new A(2));
  wm.insert(new A(3));
  wm.insert(new B(1));
  wm.insert(new B(2));
  wm.insert(new C(1));
  wm.insert(new D(1));
  wm.insert(new E(1));
  wm.fireAllRules();
  assertEquals(3,list.size());
  kbase1.addKnowledgePackages(buildKnowledgePackage("r2","   a : A() B(2;) C() D() E()\n"));
  ObjectTypeNode aotn=getObjectTypeNode(kbase1,A.class);
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)aotn.getSinkPropagator().getSinks()[0];
  JoinNode bNode1=(JoinNode)liaNode.getSinkPropagator().getFirstLeftTupleSink();
  JoinNode bNode2=(JoinNode)liaNode.getSinkPropagator().getLastLeftTupleSink();
  BetaMemory bm=(BetaMemory)wm.getNodeMemory(bNode2);
  SegmentMemory sm=bm.getSegmentMemory();
  assertNotNull(sm.getStagedLeftTuples().getInsertFirst());
  assertNotNull(sm.getStagedLeftTuples().getInsertFirst().getStagedNext());
  assertNotNull(sm.getStagedLeftTuples().getInsertFirst().getStagedNext().getStagedNext());
  assertNull(sm.getStagedLeftTuples().getInsertFirst().getStagedNext().getStagedNext().getStagedNext());
  wm.fireAllRules();
  assertNull(sm.getStagedLeftTuples().getInsertFirst());
  assertEquals(6,list.size());
  assertEquals("r1",((Match)list.get(0)).getRule().getName());
  assertEquals("r1",((Match)list.get(1)).getRule().getName());
  assertEquals("r1",((Match)list.get(2)).getRule().getName());
  assertEquals("r2",((Match)list.get(3)).getRule().getName());
  assertEquals("r2",((Match)list.get(4)).getRule().getName());
  assertEquals("r2",((Match)list.get(5)).getRule().getName());
  List results=new ArrayList();
  results.add(((A)((Match)list.get(3)).getDeclarationValue("a")).getObject());
  results.add(((A)((Match)list.get(4)).getDeclarationValue("a")).getObject());
  results.add(((A)((Match)list.get(5)).getDeclarationValue("a")).getObject());
  assertTrue(results.containsAll(asList(1,2,3)));
}
