{
  ByteArrayClassLoader byteArrayClassLoader=cache.getByteArrayClassLoader();
  Map<Class<?>,ClassFieldInspector> inspectors=cache.getInspectors();
  try {
    ClassFieldInspector inspector=inspectors.get(clazz);
    if (inspector == null) {
      inspector=new ClassFieldInspector(clazz);
      inspectors.put(clazz,inspector);
    }
    Method setterMethod=inspector.getSetterMethods().get(fieldName);
    Integer index=inspector.getFieldNames().get(fieldName);
    if (setterMethod == null && fieldName.length() > 1 && Character.isLowerCase(fieldName.charAt(0)) && Character.isUpperCase(fieldName.charAt(1))) {
      String altFieldName=Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
      setterMethod=inspector.getSetterMethods().get(altFieldName);
      index=inspector.getFieldNames().get(altFieldName);
    }
    if (setterMethod != null) {
      final Class<?> fieldType=setterMethod.getParameterTypes()[0];
      final String className=ClassFieldAccessorFactory.BASE_PACKAGE + "/" + Type.getInternalName(clazz)+ Math.abs(System.identityHashCode(clazz))+ "$"+ setterMethod.getName();
      final byte[] bytes=dumpWriter(clazz,className,setterMethod,fieldType,clazz.isInterface());
      final Class<?> newClass=byteArrayClassLoader.defineClass(className.replace('/','.'),bytes,PROTECTION_DOMAIN);
      final ValueType valueType=ValueType.determineValueType(fieldType);
      final Object[] params={index,fieldType,valueType};
      return (BaseClassFieldWriter)newClass.getConstructors()[0].newInstance(params);
    }
 else {
      if (inspector.getFieldNames().containsKey(fieldName)) {
        if (inspector.getGetterMethods().get(fieldName) != null) {
          return null;
        }
 else {
          return null;
        }
      }
 else {
        throw new RuntimeException("Field/method '" + fieldName + "' not found for class '"+ clazz.getName()+ "'");
      }
    }
  }
 catch (  final RuntimeException e) {
    throw e;
  }
catch (  final Exception e) {
    throw new RuntimeException(e);
  }
}
