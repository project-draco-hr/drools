{
  ByteArrayClassLoader byteArrayClassLoader=cache.getByteArrayClassLoader();
  Map<Class<?>,ClassFieldInspector> inspectors=cache.getInspectors();
  try {
    if (SELF_REFERENCE_FIELD.equals(fieldName)) {
      return new SelfReferenceClassFieldReader(clazz,fieldName);
    }
 else {
      ClassFieldInspector inspector=inspectors.get(clazz);
      if (inspector == null) {
        inspector=new ClassFieldInspector(clazz);
        inspectors.put(clazz,inspector);
      }
      Class<?> fieldType=(Class<?>)inspector.getFieldTypes().get(fieldName);
      Method getterMethod=(Method)inspector.getGetterMethods().get(fieldName);
      Integer index=(Integer)inspector.getFieldNames().get(fieldName);
      if (fieldType == null && fieldName.length() > 1 && Character.isLowerCase(fieldName.charAt(0)) && Character.isUpperCase(fieldName.charAt(1))) {
        String altFieldName=Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
        fieldType=(Class<?>)inspector.getFieldTypes().get(altFieldName);
        if (fieldType != null) {
          getterMethod=(Method)inspector.getGetterMethods().get(altFieldName);
          index=(Integer)inspector.getFieldNames().get(altFieldName);
        }
      }
      if (fieldType != null && getterMethod != null) {
        final String className=ClassFieldAccessorFactory.BASE_PACKAGE + "/" + Type.getInternalName(clazz)+ Math.abs(System.identityHashCode(clazz))+ "$"+ getterMethod.getName();
        final byte[] bytes=dumpReader(clazz,className,getterMethod,fieldType,clazz.isInterface());
        final Class<?> newClass=byteArrayClassLoader.defineClass(className.replace('/','.'),bytes,PROTECTION_DOMAIN);
        final ValueType valueType=ValueType.determineValueType(fieldType);
        final Object[] params={index,fieldType,valueType};
        return (BaseClassFieldReader)newClass.getConstructors()[0].newInstance(params);
      }
 else       if (fieldType != null) {
        return null;
      }
 else {
        throw new RuntimeException("Field/method '" + fieldName + "' not found for class '"+ clazz.getName()+ "'\n");
      }
    }
  }
 catch (  final RuntimeException e) {
    throw e;
  }
catch (  final Exception e) {
    throw new RuntimeException(e);
  }
}
