{
  buildContext=createContext();
  joinNode=(JoinNode)BetaNodeBuilder.create(NodeTypeEnums.JoinNode,buildContext).setLeftType(A.class).setBinding("object","$object").setRightType(B.class).setConstraint("object","!=","$object").build();
  sinkNode0=new JoinNode();
  sinkNode0.setId(1);
  sinkNode0.setConstraints(new EmptyBetaConstraints());
  joinNode.addTupleSink(sinkNode0);
  sinkNode1=new JoinNode();
  sinkNode1.setId(2);
  sinkNode1.setConstraints(new EmptyBetaConstraints());
  joinNode.addTupleSink(sinkNode1);
  sinkNode2=new JoinNode();
  sinkNode2.setId(3);
  sinkNode2.setConstraints(new EmptyBetaConstraints());
  joinNode.addTupleSink(sinkNode2);
  wm=(InternalWorkingMemory)buildContext.getRuleBase().newStatefulSession(true);
  bm=(BetaMemory)wm.getNodeMemory(joinNode);
  bm0=(BetaMemory)wm.getNodeMemory(sinkNode0);
  bm1=(BetaMemory)wm.getNodeMemory(sinkNode1);
  bm2=(BetaMemory)wm.getNodeMemory(sinkNode2);
  smem=new SegmentMemory(joinNode);
  bm.setSegmentMemory(smem);
  smem0=new SegmentMemory(sinkNode0);
  bm0.setSegmentMemory(smem0);
  smem.add(smem0);
  smem1=new SegmentMemory(sinkNode1);
  bm1.setSegmentMemory(smem1);
  smem.add(smem1);
  smem2=new SegmentMemory(sinkNode2);
  bm2.setSegmentMemory(smem2);
  smem.add(smem2);
}
