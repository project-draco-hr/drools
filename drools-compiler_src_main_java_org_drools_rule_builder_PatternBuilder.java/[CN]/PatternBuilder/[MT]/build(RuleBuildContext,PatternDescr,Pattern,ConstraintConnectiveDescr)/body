{
  for (  BaseDescr d : descr.getDescrs()) {
    d.copyLocation(descr);
    if (d instanceof BindingDescr) {
      buildRuleBindings(context,patternDescr,pattern,(BindingDescr)d,null);
      continue;
    }
    boolean simple=false;
    MVELDumper.MVELDumperContext mvelCtx=new MVELDumper.MVELDumperContext();
    String expr=new MVELDumper().dump(d,mvelCtx);
    Map<String,OperatorDescr> aliases=mvelCtx.getAliases();
    for (    BindingDescr bind : mvelCtx.getBindings()) {
      buildRuleBindings(context,patternDescr,pattern,bind,null);
    }
    if (d instanceof AtomicExprDescr) {
      Matcher m=evalRegexp.matcher(((AtomicExprDescr)d).getExpression());
      if (m.find()) {
        PredicateDescr pdescr=new PredicateDescr(expr);
        pdescr.copyLocation(d);
        buildEval(context,pattern,pdescr,null,aliases);
        continue;
      }
    }
    RelationalExprDescr relDescr=null;
    if (d instanceof RelationalExprDescr) {
      relDescr=(RelationalExprDescr)d;
      if ((relDescr.getLeft() instanceof AtomicExprDescr || relDescr.getLeft() instanceof BindingDescr) && (relDescr.getRight() instanceof AtomicExprDescr || relDescr.getRight() instanceof BindingDescr)) {
        simple=true;
      }
    }
    if (!simple || ClassObjectType.Map_ObjectType.isAssignableFrom(pattern.getObjectType()) || ClassObjectType.Activation_ObjectType.isAssignableFrom(pattern.getObjectType())) {
      createAndBuildPredicate(context,pattern,d,expr,aliases);
      continue;
    }
    if (!(d instanceof RelationalExprDescr)) {
      throw new RuntimeException("What caused this?: " + d);
    }
    RelationalExprDescr exprDescr=(RelationalExprDescr)d;
    String leftValue=null;
    String rightValue=null;
    boolean isRightLiteral=false;
    boolean usesThisRef=false;
    if (exprDescr.getRight() instanceof AtomicExprDescr) {
      AtomicExprDescr rdescr=((AtomicExprDescr)exprDescr.getRight());
      rightValue=rdescr.getExpression().trim();
      usesThisRef="this".equals(rightValue) || rightValue.startsWith("this.");
      isRightLiteral=rdescr.isLiteral();
    }
 else {
      BindingDescr rdescr=((BindingDescr)exprDescr.getRight());
      rightValue=rdescr.getExpression().trim();
      usesThisRef="this".equals(rightValue) || rightValue.startsWith("this.");
    }
    if (exprDescr.getLeft() instanceof AtomicExprDescr) {
      AtomicExprDescr ldescr=(AtomicExprDescr)exprDescr.getLeft();
      leftValue=ldescr.getExpression();
      usesThisRef=usesThisRef || "this".equals(leftValue) || leftValue.startsWith("this.");
    }
 else {
      leftValue=((BindingDescr)exprDescr.getLeft()).getExpression();
      usesThisRef=usesThisRef || "this".equals(leftValue) || leftValue.startsWith("this.");
    }
    ExprBindings leftExpr=new ExprBindings();
    setInputs(context,leftExpr,(pattern.getObjectType() instanceof ClassObjectType) ? ((ClassObjectType)pattern.getObjectType()).getClassType() : FactTemplate.class,leftValue);
    ExprBindings rightExpr=new ExprBindings();
    setInputs(context,rightExpr,(pattern.getObjectType() instanceof ClassObjectType) ? ((ClassObjectType)pattern.getObjectType()).getClassType() : FactTemplate.class,rightValue);
    if ((!usesThisRef) && leftExpr.isConstant() && rightExpr.isConstant()) {
      createAndBuildPredicate(context,pattern,d,expr,aliases);
      continue;
    }
    String[] parts=leftValue.split("\\.");
    if (parts.length == 2) {
      if ("this".equals(parts[0].trim())) {
        leftValue=parts[1];
      }
 else       if (pattern.getDeclaration() != null && parts[0].trim().equals(pattern.getDeclaration().getIdentifier())) {
        leftValue=parts[1];
      }
    }
    if ((leftValue.indexOf('.') >= 0 || leftValue.indexOf('[') >= 0 || leftValue.indexOf('(') >= 0) && (leftExpr.getFieldAccessors().size() > 2 || !leftExpr.getRuleBindings().isEmpty() || !leftExpr.getGlobalBindings().isEmpty())) {
      createAndBuildPredicate(context,pattern,d,expr,aliases);
      continue;
    }
    final InternalReadAccessor extractor=getFieldReadAccessor(context,d,pattern.getObjectType(),leftValue,null,false);
    if (extractor == null) {
      context.getErrors().add(new DescrBuildError(context.getParentDescr(),d,null,"Unable to build constraint as  '" + leftValue + "' is invalid"));
      continue;
    }
    String operator=relDescr.getOperator().trim();
    Restriction restriction=null;
    if (isRightLiteral) {
      restriction=buildLiteralRestriction(context,extractor,new LiteralRestrictionDescr(operator,relDescr.isNegated(),relDescr.getParameters(),rightValue,LiteralRestrictionDescr.TYPE_STRING));
      if (restriction == null) {
        continue;
      }
    }
 else {
      int dotPos=rightValue.lastIndexOf('.');
      if (dotPos >= 0) {
        final String mainPart=rightValue.substring(0,dotPos);
        String lastPart=rightValue.substring(dotPos + 1);
        try {
          final Class<?> cls=context.getDialect().getTypeResolver().resolveType(mainPart);
          if (lastPart.indexOf('(') < 0 && lastPart.indexOf('.') < 0 && lastPart.indexOf('[') < 0) {
            restriction=buildLiteralRestriction(context,extractor,new LiteralRestrictionDescr(operator,relDescr.isNegated(),relDescr.getParameters(),rightValue,LiteralRestrictionDescr.TYPE_STRING));
          }
        }
 catch (        ClassNotFoundException e) {
        }
      }
    }
    if (restriction != null) {
      pattern.addConstraint(new LiteralConstraint(extractor,(LiteralRestriction)restriction));
      continue;
    }
    Declaration declr=null;
    if (rightValue.indexOf('(') < 0 && rightValue.indexOf('.') < 0 && rightValue.indexOf('[') < 0) {
      declr=context.getDeclarationResolver().getDeclaration(context.getRule(),rightValue);
      if (declr == null) {
        final Pattern thisPattern=(Pattern)context.getBuildStack().peek();
        declr=this.createDeclarationObject(context,rightValue,thisPattern);
        if (declr == null) {
          context.getErrors().add(new DescrBuildError(context.getParentDescr(),d,null,"Unable to return Declaration for identifier '" + rightValue + "'"));
          continue;
        }
      }
    }
    if (declr == null) {
      parts=rightValue.split("\\.");
      if (parts.length == 2) {
        if ("this".equals(parts[0].trim())) {
          declr=this.createDeclarationObject(context,parts[1].trim(),(Pattern)context.getBuildStack().peek());
          rightValue=parts[1].trim();
        }
 else {
          declr=context.getDeclarationResolver().getDeclaration(context.getRule(),parts[0].trim());
          if (declr != null) {
            if (declr.isPatternDeclaration()) {
              declr=this.createDeclarationObject(context,parts[1].trim(),declr.getPattern());
              rightValue=parts[1].trim();
            }
 else {
              context.getErrors().add(new DescrBuildError(context.getParentDescr(),d,"","Not possible to directly access the property '" + parts[1] + "' of declaration '"+ parts[0]+ "' since it is not a pattern"));
              continue;
            }
          }
        }
      }
    }
    if (declr != null) {
      Target right=getRightTarget(extractor);
      Target left=(declr.isPatternDeclaration() && !(Date.class.isAssignableFrom(declr.getExtractor().getExtractToClass()) || Number.class.isAssignableFrom(declr.getExtractor().getExtractToClass()))) ? Target.HANDLE : Target.FACT;
      final Evaluator evaluator=getEvaluator(context,d,extractor.getValueType(),operator,relDescr.isNegated(),relDescr.getParametersText(),left,right);
      if (evaluator == null) {
        continue;
      }
      restriction=new VariableRestriction(extractor,declr,evaluator);
      if (declr.getPattern().getObjectType().equals(new ClassObjectType(DroolsQuery.class)) && Operator.EQUAL.getOperatorString().equals(operator)) {
        restriction=new UnificationRestriction((VariableRestriction)restriction);
      }
    }
    if (restriction == null) {
      Dialect dialect=context.getDialect();
      if (!rightValue.startsWith("(")) {
        MVELDialect mvelDialect=(MVELDialect)context.getDialect("mvel");
        context.setDialect(mvelDialect);
      }
      restriction=buildRestriction(context,(Pattern)context.getBuildStack().peek(),extractor,new ReturnValueRestrictionDescr(operator,relDescr.isNegated(),relDescr.getParametersText(),rightValue),aliases);
      context.setDialect(dialect);
    }
    if (restriction == null || extractor == null) {
      return;
    }
    pattern.addConstraint(new VariableConstraint(extractor,restriction));
  }
}
