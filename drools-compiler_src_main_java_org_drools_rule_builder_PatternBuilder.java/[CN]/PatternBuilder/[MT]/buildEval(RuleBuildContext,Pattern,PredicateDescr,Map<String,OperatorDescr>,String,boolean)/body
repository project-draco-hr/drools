{
  Map<String,Class<?>> declarations=getDeclarationsMap(predicateDescr,context,true);
  Map<String,Class<?>> globals=context.getPackageBuilder().getGlobals();
  Map<String,EvaluatorWrapper> operators=new HashMap<String,EvaluatorWrapper>();
  for (  Map.Entry<String,OperatorDescr> entry : aliases.entrySet()) {
    OperatorDescr op=entry.getValue();
    String leftStr=op.getLeftString();
    String rightStr=op.getRightString();
    Declaration leftDecl=context.getDeclarationResolver().getDeclaration(context.getRule(),leftStr);
    if (leftDecl == null && "this".equals(leftStr)) {
      leftDecl=this.createDeclarationObject(context,"this",pattern);
    }
    Declaration rightDecl=context.getDeclarationResolver().getDeclaration(context.getRule(),rightStr);
    if (rightDecl == null && "this".equals(rightStr)) {
      rightDecl=this.createDeclarationObject(context,"this",pattern);
    }
    Target left=leftDecl != null && leftDecl.isPatternDeclaration() ? Target.HANDLE : Target.FACT;
    Target right=rightDecl != null && rightDecl.isPatternDeclaration() ? Target.HANDLE : Target.FACT;
    op.setLeftIsHandle(left == Target.HANDLE);
    op.setRightIsHandle(right == Target.HANDLE);
    Evaluator evaluator=getEvaluator(context,predicateDescr,ValueType.OBJECT_TYPE,op.getOperator(),false,op.getParametersText(),left,right);
    EvaluatorWrapper wrapper=new EvaluatorWrapper(evaluator,left == Target.HANDLE ? leftDecl : null,right == Target.HANDLE ? rightDecl : null);
    operators.put(entry.getKey(),wrapper);
  }
  Class<?> thisClass=null;
  if (pattern.getObjectType() instanceof ClassObjectType) {
    thisClass=((ClassObjectType)pattern.getObjectType()).getClassType();
  }
  final AnalysisResult analysis=context.getDialect().analyzeExpression(context,predicateDescr,predicateDescr.getContent(),new BoundIdentifiers(declarations,globals,operators,thisClass));
  if (analysis == null) {
    return;
  }
  final BoundIdentifiers usedIdentifiers=analysis.getBoundIdentifiers();
  final List tupleDeclarations=new ArrayList();
  final List factDeclarations=new ArrayList();
  for (  String id : usedIdentifiers.getDeclrClasses().keySet()) {
    final Declaration decl=context.getDeclarationResolver().getDeclaration(context.getRule(),id);
    if (decl.getPattern() == pattern) {
      factDeclarations.add(decl);
    }
 else {
      tupleDeclarations.add(decl);
    }
  }
  this.createImplicitBindings(context,pattern,analysis.getNotBoundedIdentifiers(),analysis.getBoundIdentifiers(),factDeclarations);
  final Declaration[] previousDeclarations=(Declaration[])tupleDeclarations.toArray(new Declaration[tupleDeclarations.size()]);
  final Declaration[] localDeclarations=(Declaration[])factDeclarations.toArray(new Declaration[factDeclarations.size()]);
  final String[] requiredGlobals=usedIdentifiers.getGlobals().keySet().toArray(new String[usedIdentifiers.getGlobals().size()]);
  final String[] requiredOperators=usedIdentifiers.getOperators().keySet().toArray(new String[usedIdentifiers.getOperators().size()]);
  Arrays.sort(previousDeclarations,SortDeclarations.instance);
  Arrays.sort(localDeclarations,SortDeclarations.instance);
  boolean isJavaEval=isEvalExpression && context.getDialect() instanceof JavaDialect;
  boolean usePredicateConstraint=!USE_MVEL_EXPRESSION || isJavaEval;
  if (usePredicateConstraint) {
    final PredicateConstraint predicateConstraint=new PredicateConstraint(null,previousDeclarations,localDeclarations,requiredGlobals,requiredOperators);
    final PredicateBuilder builder=context.getDialect().getPredicateBuilder();
    builder.build(context,usedIdentifiers,previousDeclarations,localDeclarations,predicateConstraint,predicateDescr,analysis);
    pattern.addConstraint(predicateConstraint);
  }
 else {
    MVELCompilationUnit compilationUnit=ConstraintBuilder.buildCompilationUnit(context,usedIdentifiers,previousDeclarations,localDeclarations,predicateDescr,analysis);
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
    ParserConfiguration configuration=data.getParserConfiguration();
    Declaration[] mvelDeclarations=new Declaration[previousDeclarations.length + localDeclarations.length + requiredGlobals.length];
    int i=0;
    for (    Declaration d : previousDeclarations) {
      mvelDeclarations[i++]=d;
    }
    for (    Declaration d : localDeclarations) {
      mvelDeclarations[i++]=d;
    }
    for (    String global : requiredGlobals) {
      mvelDeclarations[i++]=context.getDeclarationResolver().getDeclaration(context.getRule(),global);
    }
    boolean isDynamic=requiredOperators.length > 0 || ClassObjectType.Activation_ObjectType.isAssignableFrom(pattern.getObjectType());
    Constraint constraint=new MvelConstraint(context.getPkg().getName(),expr,mvelDeclarations,compilationUnit,isDynamic);
    pattern.addConstraint(constraint);
  }
}
