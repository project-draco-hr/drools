{
  AnalysisResult analysis=buildAnalysis(context,pattern,predicateDescr,aliases);
  if (analysis == null) {
    return;
  }
  final BoundIdentifiers usedIdentifiers=analysis.getBoundIdentifiers();
  final List<Declaration> tupleDeclarations=new ArrayList<Declaration>();
  final List<Declaration> factDeclarations=new ArrayList<Declaration>();
  for (  String id : usedIdentifiers.getDeclrClasses().keySet()) {
    final Declaration decl=context.getDeclarationResolver().getDeclaration(context.getRule(),id);
    if (decl.getPattern() == pattern) {
      factDeclarations.add(decl);
    }
 else {
      tupleDeclarations.add(decl);
    }
  }
  this.createImplicitBindings(context,pattern,analysis.getNotBoundedIdentifiers(),analysis.getBoundIdentifiers(),factDeclarations);
  final Declaration[] previousDeclarations=(Declaration[])tupleDeclarations.toArray(new Declaration[tupleDeclarations.size()]);
  final Declaration[] localDeclarations=(Declaration[])factDeclarations.toArray(new Declaration[factDeclarations.size()]);
  final String[] requiredGlobals=usedIdentifiers.getGlobals().keySet().toArray(new String[usedIdentifiers.getGlobals().size()]);
  final String[] requiredOperators=usedIdentifiers.getOperators().keySet().toArray(new String[usedIdentifiers.getOperators().size()]);
  Arrays.sort(previousDeclarations,SortDeclarations.instance);
  Arrays.sort(localDeclarations,SortDeclarations.instance);
  boolean isJavaEval=isEvalExpression && context.getDialect() instanceof JavaDialect;
  boolean usePredicateConstraint=!USE_MVEL_EXPRESSION || isJavaEval;
  if (usePredicateConstraint) {
    final PredicateConstraint predicateConstraint=new PredicateConstraint(null,previousDeclarations,localDeclarations,requiredGlobals,requiredOperators);
    final PredicateBuilder builder=context.getDialect().getPredicateBuilder();
    builder.build(context,usedIdentifiers,previousDeclarations,localDeclarations,predicateConstraint,predicateDescr,analysis);
    pattern.addConstraint(predicateConstraint);
  }
 else {
    MVELCompilationUnit compilationUnit=ConstraintBuilder.buildCompilationUnit(context,previousDeclarations,localDeclarations,predicateDescr,analysis);
    Declaration[] mvelDeclarations=new Declaration[previousDeclarations.length + localDeclarations.length + requiredGlobals.length];
    int i=0;
    for (    Declaration d : previousDeclarations) {
      mvelDeclarations[i++]=d;
    }
    for (    Declaration d : localDeclarations) {
      mvelDeclarations[i++]=d;
    }
    for (    String global : requiredGlobals) {
      mvelDeclarations[i++]=context.getDeclarationResolver().getDeclaration(context.getRule(),global);
    }
    boolean isDynamic=requiredOperators.length > 0 || ClassObjectType.Activation_ObjectType.isAssignableFrom(pattern.getObjectType());
    Constraint constraint=new MvelConstraint(context.getPkg().getName(),expr,mvelDeclarations,compilationUnit,isDynamic);
    pattern.addConstraint(constraint);
  }
}
