{
  Map<String,Class<?>> declarations=getDeclarationsMap(returnValueRestrictionDescr,context);
  Map<String,Class<?>> globals=context.getPackageBuilder().getGlobals();
  Dialect.AnalysisResult analysis=context.getDialect().analyzeExpression(context,returnValueRestrictionDescr,returnValueRestrictionDescr.getContent(),new Map[]{declarations,globals});
  final List[] usedIdentifiers=analysis.getBoundIdentifiers();
  final List tupleDeclarations=new ArrayList();
  final List factDeclarations=new ArrayList();
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    final Declaration declaration=context.getDeclarationResolver().getDeclaration(context.getRule(),(String)usedIdentifiers[0].get(i));
    if (declaration.getPattern() == pattern) {
      factDeclarations.add(declaration);
    }
 else {
      tupleDeclarations.add(declaration);
    }
  }
  createImplicitBindings(context,pattern,analysis.getNotBoundedIdentifiers(),factDeclarations);
  Target right=getRightTarget(extractor);
  Target left=Target.FACT;
  final Evaluator evaluator=getEvaluator(context,returnValueRestrictionDescr,extractor.getValueType(),returnValueRestrictionDescr.getEvaluator(),returnValueRestrictionDescr.isNegated(),returnValueRestrictionDescr.getParameterText(),left,right);
  if (evaluator == null) {
    return null;
  }
  final Declaration[] previousDeclarations=(Declaration[])tupleDeclarations.toArray(new Declaration[tupleDeclarations.size()]);
  final Declaration[] localDeclarations=(Declaration[])factDeclarations.toArray(new Declaration[factDeclarations.size()]);
  final String[] requiredGlobals=(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]);
  final ReturnValueRestriction returnValueRestriction=new ReturnValueRestriction(extractor,previousDeclarations,localDeclarations,requiredGlobals,evaluator);
  final ReturnValueBuilder builder=context.getDialect().getReturnValueBuilder();
  builder.build(context,usedIdentifiers,previousDeclarations,localDeclarations,returnValueRestriction,returnValueRestrictionDescr);
  return returnValueRestriction;
}
