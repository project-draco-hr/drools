{
  final List[] usedIdentifiers=context.getDialect().getExpressionIdentifiers(context,returnValueRestrictionDescr,returnValueRestrictionDescr.getContent());
  final List tupleDeclarations=new ArrayList();
  final List factDeclarations=new ArrayList();
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    final Declaration declaration=context.getDeclarationResolver().getDeclaration((String)usedIdentifiers[0].get(i));
    if (declaration.getPattern() == pattern) {
      factDeclarations.add(declaration);
    }
 else {
      tupleDeclarations.add(declaration);
    }
  }
  final int NOT_BOUND_INDEX=usedIdentifiers.length - 1;
  createImplicitBindings(context,pattern,usedIdentifiers[NOT_BOUND_INDEX],factDeclarations);
  final Evaluator evaluator=getEvaluator(context,returnValueRestrictionDescr,extractor.getValueType(),returnValueRestrictionDescr.getEvaluator());
  if (evaluator == null) {
    return null;
  }
  final Declaration[] previousDeclarations=(Declaration[])tupleDeclarations.toArray(new Declaration[tupleDeclarations.size()]);
  final Declaration[] localDeclarations=(Declaration[])factDeclarations.toArray(new Declaration[factDeclarations.size()]);
  final String[] requiredGlobals=(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]);
  final ReturnValueRestriction returnValueRestriction=new ReturnValueRestriction(extractor,previousDeclarations,localDeclarations,requiredGlobals,evaluator);
  final ReturnValueBuilder builder=this.dialect.getReturnValueBuilder();
  builder.build(context,usedIdentifiers,previousDeclarations,localDeclarations,returnValueRestriction,returnValueRestrictionDescr);
  return returnValueRestriction;
}
