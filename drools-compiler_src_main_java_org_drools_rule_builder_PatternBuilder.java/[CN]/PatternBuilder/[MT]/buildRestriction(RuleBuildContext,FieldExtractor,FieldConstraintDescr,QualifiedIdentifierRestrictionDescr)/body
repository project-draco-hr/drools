{
  FieldValue field=null;
  final String[] parts=qiRestrictionDescr.getText().split("\\.");
  if (parts.length == 2) {
    Declaration implicit=null;
    if ("this".equals(parts[0])) {
      implicit=this.createDeclarationObject(context,parts[1],(Pattern)context.getBuildStack().peek());
    }
 else {
      final Declaration decl=context.getDeclarationResolver().getDeclaration(parts[0]);
      if (decl != null) {
        if (decl.isPatternDeclaration()) {
          implicit=this.createDeclarationObject(context,parts[1],decl.getPattern());
        }
 else {
          context.getErrors().add(new RuleError(context.getRule(),qiRestrictionDescr,"","Not possible to directly access the property '" + parts[1] + "' of declaration '"+ parts[0]+ "' since it is not a pattern"));
          return null;
        }
      }
    }
    if (implicit != null) {
      final Evaluator evaluator=getEvaluator(context,qiRestrictionDescr,extractor.getValueType(),qiRestrictionDescr.getEvaluator());
      if (evaluator == null) {
        return null;
      }
      return new VariableRestriction(extractor,implicit,evaluator);
    }
  }
  final int lastDot=qiRestrictionDescr.getText().lastIndexOf('.');
  final String className=qiRestrictionDescr.getText().substring(0,lastDot);
  final String fieldName=qiRestrictionDescr.getText().substring(lastDot + 1);
  try {
    final Class staticClass=context.getDialect().getTypeResolver().resolveType(className);
    field=FieldFactory.getFieldValue(staticClass.getField(fieldName).get(null),extractor.getValueType());
  }
 catch (  final ClassNotFoundException e) {
  }
catch (  final Exception e) {
    context.getErrors().add(new RuleError(context.getRule(),qiRestrictionDescr,e,"Unable to create a Field value of type  '" + extractor.getValueType() + "' and value '"+ qiRestrictionDescr.getText()+ "'"));
  }
  if (field == null) {
    return null;
  }
  final Evaluator evaluator=getEvaluator(context,qiRestrictionDescr,extractor.getValueType(),qiRestrictionDescr.getEvaluator());
  if (evaluator == null) {
    return null;
  }
  return new LiteralRestriction(field,evaluator,extractor);
}
