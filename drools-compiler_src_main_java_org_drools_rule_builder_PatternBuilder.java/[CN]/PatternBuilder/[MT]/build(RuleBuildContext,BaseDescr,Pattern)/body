{
  final PatternDescr patternDescr=(PatternDescr)descr;
  if (patternDescr.getObjectType() == null || patternDescr.getObjectType().equals("")) {
    context.addError(new DescrBuildError(context.getParentDescr(),patternDescr,null,"ObjectType not correctly defined"));
    return null;
  }
  ObjectType objectType=null;
  final FactTemplate factTemplate=context.getPkg().getFactTemplate(patternDescr.getObjectType());
  if (factTemplate != null) {
    objectType=new FactTemplateObjectType(factTemplate);
  }
 else {
    try {
      final Class<?> userProvidedClass=context.getDialect().getTypeResolver().resolveType(patternDescr.getObjectType());
      PackageRegistry pkgr=context.getPackageBuilder().getPackageRegistry(ClassUtils.getPackage(userProvidedClass));
      org.drools.rule.Package pkg=pkgr == null ? context.getPkg() : pkgr.getPackage();
      final boolean isEvent=pkg.isEvent(userProvidedClass);
      objectType=new ClassObjectType(userProvidedClass,isEvent);
    }
 catch (    final ClassNotFoundException e) {
    }
  }
  if (objectType == null) {
    RuleConditionElement rce=null;
    if (context.getRule().getName().equals(patternDescr.getObjectType())) {
      QueryElementBuilder qeBuilder=new QueryElementBuilder();
      rce=qeBuilder.build(context,descr,prefixPattern,(Query)context.getRule());
    }
    if (rce == null) {
      Rule rule=context.getPkg().getRule(patternDescr.getObjectType());
      if (rule instanceof Query) {
        QueryElementBuilder qeBuilder=new QueryElementBuilder();
        rce=qeBuilder.build(context,descr,prefixPattern,(Query)rule);
      }
      for (      String importName : context.getDialect().getTypeResolver().getImports()) {
        importName=importName.trim();
        int pos=importName.indexOf('*');
        if (pos >= 0) {
          String pkgName=importName.substring(0,pos - 1);
          PackageRegistry pkgReg=context.getPackageBuilder().getPackageRegistry(pkgName);
          if (pkgReg != null) {
            rule=pkgReg.getPackage().getRule(patternDescr.getObjectType());
            if (rule instanceof Query) {
              QueryElementBuilder qeBuilder=new QueryElementBuilder();
              rce=qeBuilder.build(context,descr,prefixPattern,(Query)rule);
              break;
            }
          }
        }
      }
    }
    if (rce == null) {
      context.addError(new DescrBuildError(context.getParentDescr(),patternDescr,null,"Unable to resolve ObjectType '" + patternDescr.getObjectType() + "'"));
    }
    return rce;
  }
  Pattern pattern;
  boolean duplicateBindings=context.getDeclarationResolver().isDuplicated(context.getRule(),patternDescr.getIdentifier());
  if (!StringUtils.isEmpty(patternDescr.getIdentifier()) && !duplicateBindings) {
    pattern=new Pattern(context.getNextPatternId(),0,objectType,patternDescr.getIdentifier(),patternDescr.isInternalFact());
    if (objectType instanceof ClassObjectType) {
      context.getPkg().getClassFieldAccessorStore().getClassObjectType(((ClassObjectType)objectType),(AcceptsClassObjectType)pattern.getDeclaration().getExtractor());
    }
  }
 else {
    pattern=new Pattern(context.getNextPatternId(),0,objectType,null);
  }
  if (ClassObjectType.Match_ObjectType.isAssignableFrom(pattern.getObjectType())) {
    PropertyHandler handler=PropertyHandlerFactory.getPropertyHandler(AgendaItem.class);
    if (handler == null) {
      PropertyHandlerFactoryFixer.getPropertyHandlerClass().put(AgendaItem.class,new ActivationPropertyHandler());
    }
  }
  if (duplicateBindings) {
    processDuplicateBindings(patternDescr.isUnification(),patternDescr,pattern,patternDescr,"this",patternDescr.getIdentifier(),context);
  }
  if (objectType instanceof ClassObjectType) {
    context.getPkg().getClassFieldAccessorStore().getClassObjectType(((ClassObjectType)objectType),pattern);
  }
  context.getBuildStack().push(pattern);
  if (pattern.getObjectType() instanceof ClassObjectType) {
    Class<?> cls=((ClassObjectType)pattern.getObjectType()).getClassType();
    TypeDeclaration typeDeclr=context.getPackageBuilder().getAndRegisterTypeDeclaration(cls,context.getPkg().getName());
    if (typeDeclr != null) {
      context.setTypesafe(typeDeclr.isTypesafe());
    }
 else {
      context.setTypesafe(true);
    }
  }
  processAnnotations(context,patternDescr,pattern);
  if (patternDescr.getSource() != null) {
    RuleConditionBuilder builder=(RuleConditionBuilder)context.getDialect().getBuilder(patternDescr.getSource().getClass());
    PatternSource source=(PatternSource)builder.build(context,patternDescr.getSource());
    if (source instanceof From) {
      ((From)source).setResultPattern(pattern);
    }
    pattern.setSource(source);
  }
  processConstraintsAndBinds(context,patternDescr,pattern);
  for (  BehaviorDescr behaviorDescr : patternDescr.getBehaviors()) {
    if (pattern.getObjectType().isEvent()) {
      if (Behavior.BehaviorType.TIME_WINDOW.matches(behaviorDescr.getSubType())) {
        SlidingTimeWindow window=new SlidingTimeWindow(TimeUtils.parseTimeString(behaviorDescr.getParameters().get(0)));
        pattern.addBehavior(window);
      }
 else       if (Behavior.BehaviorType.LENGTH_WINDOW.matches(behaviorDescr.getSubType())) {
        SlidingLengthWindow window=new SlidingLengthWindow(Integer.valueOf(behaviorDescr.getParameters().get(0)));
        pattern.addBehavior(window);
      }
    }
 else {
      context.addError(new DescrBuildError(context.getParentDescr(),patternDescr,null,"A Sliding Window can only be assigned to types declared with @role( event ). The type '" + pattern.getObjectType() + "' in '"+ context.getRule().getName()+ "' is not declared as an Event."));
    }
  }
  context.getBuildStack().pop();
  return pattern;
}
