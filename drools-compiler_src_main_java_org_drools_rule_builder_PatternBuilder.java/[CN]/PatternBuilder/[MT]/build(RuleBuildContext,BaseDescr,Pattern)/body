{
  final PatternDescr patternDescr=(PatternDescr)descr;
  if (patternDescr.getObjectType() == null || patternDescr.getObjectType().equals("")) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),patternDescr,null,"ObjectType not correctly defined"));
    return null;
  }
  ObjectType objectType=null;
  final FactTemplate factTemplate=context.getPkg().getFactTemplate(patternDescr.getObjectType());
  if (factTemplate != null) {
    objectType=new FactTemplateObjectType(factTemplate);
  }
 else {
    try {
      final Class<?> userProvidedClass=context.getDialect().getTypeResolver().resolveType(patternDescr.getObjectType());
      PackageRegistry pkgr=context.getPackageBuilder().getPackageRegistry(ClassUtils.getPackage(userProvidedClass));
      org.drools.rule.Package pkg=pkgr == null ? context.getPkg() : pkgr.getPackage();
      final boolean isEvent=pkg.isEvent(userProvidedClass);
      objectType=new ClassObjectType(userProvidedClass,isEvent);
    }
 catch (    final ClassNotFoundException e) {
    }
  }
  if (objectType == null) {
    Rule rule=context.getPkg().getRule(patternDescr.getObjectType());
    if (rule != null && rule instanceof Query) {
      QueryElementBuilder qeBuilder=new QueryElementBuilder();
      return qeBuilder.build(context,descr,prefixPattern);
    }
 else {
      context.getErrors().add(new DescrBuildError(context.getParentDescr(),patternDescr,null,"Unable to resolve ObjectType '" + patternDescr.getObjectType() + "'"));
      return null;
    }
  }
  Pattern pattern;
  boolean duplicateBindings=context.getDeclarationResolver().isDuplicated(context.getRule(),patternDescr.getIdentifier());
  if (!StringUtils.isEmpty(patternDescr.getIdentifier()) && !duplicateBindings) {
    pattern=new Pattern(context.getNextPatternId(),0,objectType,patternDescr.getIdentifier(),patternDescr.isInternalFact());
    if (objectType instanceof ClassObjectType) {
      context.getPkg().getClassFieldAccessorStore().getClassObjectType(((ClassObjectType)objectType),(PatternExtractor)pattern.getDeclaration().getExtractor());
    }
  }
 else {
    pattern=new Pattern(context.getNextPatternId(),0,objectType,null);
  }
  if (duplicateBindings) {
    build(context,pattern,new ExprConstraintDescr("this == " + patternDescr.getIdentifier()));
  }
  if (objectType instanceof ClassObjectType) {
    context.getPkg().getClassFieldAccessorStore().getClassObjectType(((ClassObjectType)objectType),pattern);
  }
  context.getBuildStack().push(pattern);
  if (pattern.getObjectType() instanceof ClassObjectType) {
    Class cls=((ClassObjectType)pattern.getObjectType()).getClassType();
    TypeDeclaration typeDeclr=context.getPackageBuilder().getTypeDeclaration(cls);
    if (typeDeclr != null) {
      context.setTypesafe(typeDeclr.isTypesafe());
    }
  }
  for (  BindingDescr b : patternDescr.getBindings()) {
    if (true) {
      String expression=b.getExpression();
      DrlExprParser parser=new DrlExprParser();
      ConstraintConnectiveDescr result=parser.parse(expression);
      if (parser.hasErrors()) {
        for (        DroolsParserException error : parser.getErrors()) {
          context.getErrors().add(new DescrBuildError(context.getParentDescr(),descr,null,"Unable to parser pattern expression:\n" + error.getMessage()));
        }
        return null;
      }
      String left=parser.getLeftMostExpr();
      if (expression.equals(left)) {
        buildRuleBindings(context,pattern,b,null);
      }
 else {
        b.setExpression(left);
        buildRuleBindings(context,pattern,b,null);
        b.setExpression(expression);
        build(context,pattern,new ExprConstraintDescr(b.getExpression()));
      }
    }
 else {
      buildRuleBindings(context,pattern,b,null);
    }
  }
  for (  BaseDescr b : patternDescr.getDescrs()) {
    build(context,pattern,(ExprConstraintDescr)b);
  }
  if (patternDescr.getSource() != null) {
    RuleConditionBuilder builder=(RuleConditionBuilder)context.getDialect().getBuilder(patternDescr.getSource().getClass());
    PatternSource source=(PatternSource)builder.build(context,patternDescr.getSource());
    pattern.setSource(source);
  }
  for (  BehaviorDescr behaviorDescr : patternDescr.getBehaviors()) {
    if (pattern.getObjectType().isEvent()) {
      if (Behavior.BehaviorType.TIME_WINDOW.matches(behaviorDescr.getSubType())) {
        SlidingTimeWindow window=new SlidingTimeWindow(Integer.valueOf(behaviorDescr.getParameters().get(0)));
        pattern.addBehavior(window);
      }
 else       if (Behavior.BehaviorType.LENGTH_WINDOW.matches(behaviorDescr.getSubType())) {
        SlidingLengthWindow window=new SlidingLengthWindow(Integer.valueOf(behaviorDescr.getParameters().get(0)));
        pattern.addBehavior(window);
      }
    }
 else {
      context.getErrors().add(new DescrBuildError(context.getParentDescr(),patternDescr,null,"A Sliding Window behavior can only be assigned to patterns declared with @role( event ). The pattern '" + pattern.getObjectType() + "' in the rule '"+ context.getRule().getName()+ "' is not declared as an Event."));
    }
  }
  context.getBuildStack().pop();
  return pattern;
}
