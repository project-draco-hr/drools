{
  MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
  ParserConfiguration conf=data.getParserConfiguration();
  conf.setClassLoader(context.getPackageBuilder().getRootClassLoader());
  final ParserContext pctx=new ParserContext(conf);
  pctx.setStrictTypeEnforcement(false);
  pctx.setStrongTyping(false);
  pctx.addInput("this",thisClass);
  pctx.addInput("empty",boolean.class);
  MVEL.COMPILER_OPT_ALLOW_NAKED_METH_CALL=true;
  MVEL.analysisCompile(expr,pctx);
  if (!pctx.getInputs().isEmpty()) {
    for (    String v : pctx.getInputs().keySet()) {
      if ("this".equals(v) || PropertyTools.getFieldOrAccessor(thisClass,v) != null) {
        descrBranch.getFieldAccessors().add(v);
      }
 else       if ("empty".equals(v)) {
      }
 else       if (!context.getPkg().getGlobals().containsKey(v)) {
        descrBranch.getRuleBindings().add(v);
      }
 else {
        descrBranch.getGlobalBindings().add(v);
      }
    }
  }
}
