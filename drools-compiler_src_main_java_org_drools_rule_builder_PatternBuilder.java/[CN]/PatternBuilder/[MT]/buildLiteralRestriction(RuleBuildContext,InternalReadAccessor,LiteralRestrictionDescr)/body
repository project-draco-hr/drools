{
  FieldValue field=null;
  ValueType vtype=extractor.getValueType();
  try {
    String value=literalRestrictionDescr.getText().trim();
    MVEL.COMPILER_OPT_ALLOW_NAKED_METH_CALL=true;
    MVEL.COMPILER_OPT_ALLOW_OVERRIDE_ALL_PROPHANDLING=true;
    MVEL.COMPILER_OPT_ALLOW_RESOLVE_INNERCLASSES_WITH_DOTNOTATION=true;
    MVEL.COMPILER_OPT_SUPPORT_JAVA_STYLE_CLASS_LITERALS=true;
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
    ParserConfiguration pconf=data.getParserConfiguration();
    ParserContext pctx=new ParserContext(pconf);
    Object o=MVEL.executeExpression(MVEL.compileExpression(value,pctx));
    if (o != null && vtype == null) {
      vtype=ValueType.determineValueType(o.getClass());
    }
    field=FieldFactory.getFieldValue(o,vtype,context.getPackageBuilder().getDateFormats());
  }
 catch (  final Exception e) {
  }
  if (field == null) {
    return null;
  }
  Target right=getRightTarget(extractor);
  Target left=Target.FACT;
  final Evaluator evaluator=getEvaluator(context,literalRestrictionDescr,vtype,literalRestrictionDescr.getEvaluator(),literalRestrictionDescr.isNegated(),literalRestrictionDescr.getParameterText(),left,right);
  if (evaluator == null) {
    return null;
  }
  return new LiteralRestriction(field,evaluator,extractor);
}
