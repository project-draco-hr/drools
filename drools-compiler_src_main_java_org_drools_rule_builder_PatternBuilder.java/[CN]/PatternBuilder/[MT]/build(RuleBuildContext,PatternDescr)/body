{
  if (patternDescr.getObjectType() == null || patternDescr.getObjectType().equals("")) {
    context.getErrors().add(new RuleError(context.getRule(),patternDescr,null,"ObjectType not correctly defined"));
    return null;
  }
  ObjectType objectType=null;
  final FactTemplate factTemplate=context.getPkg().getFactTemplate(patternDescr.getObjectType());
  if (factTemplate != null) {
    objectType=new FactTemplateObjectType(factTemplate);
  }
 else {
    try {
      final Class userProvidedClass=context.getDialect().getTypeResolver().resolveType(patternDescr.getObjectType());
      final String shadowProxyName=ShadowProxyFactory.getProxyClassNameForClass(userProvidedClass);
      Class shadowClass=null;
      try {
        shadowClass=context.getPkg().getPackageCompilationData().getClassLoader().loadClass(shadowProxyName);
      }
 catch (      final ClassNotFoundException cnfe) {
        final byte[] proxyBytes=ShadowProxyFactory.getProxyBytes(userProvidedClass);
        if (proxyBytes != null) {
          context.getPkg().getPackageCompilationData().write(ClassUtils.convertClassToResourcePath(shadowProxyName),proxyBytes);
          shadowClass=context.getPkg().getPackageCompilationData().getClassLoader().loadClass(shadowProxyName);
        }
      }
      objectType=new ClassObjectType(userProvidedClass,shadowClass);
    }
 catch (    final ClassNotFoundException e) {
      context.getErrors().add(new RuleError(context.getRule(),patternDescr,null,"Unable to resolve ObjectType '" + patternDescr.getObjectType() + "'"));
      return null;
    }
  }
  Pattern pattern;
  if (patternDescr.getIdentifier() != null && !patternDescr.getIdentifier().equals("")) {
    if (context.getDeclarationResolver().isDuplicated(patternDescr.getIdentifier())) {
      context.getErrors().add(new RuleError(context.getRule(),patternDescr,null,"Duplicate declaration for variable '" + patternDescr.getIdentifier() + "' in the rule '"+ context.getRule().getName()+ "'"));
    }
    pattern=new Pattern(context.getNextPatternId(),0,objectType,patternDescr.getIdentifier());
  }
 else {
    pattern=new Pattern(context.getNextPatternId(),0,objectType,null);
  }
  context.getBuildStack().push(pattern);
  for (final Iterator it=patternDescr.getDescrs().iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof FieldBindingDescr) {
      build(context,pattern,(FieldBindingDescr)object);
    }
 else     if (object instanceof FieldConstraintDescr) {
      build(context,pattern,(FieldConstraintDescr)object);
    }
 else     if (object instanceof PredicateDescr) {
      build(context,pattern,(PredicateDescr)object);
    }
  }
  context.getBuildStack().pop();
  return pattern;
}
