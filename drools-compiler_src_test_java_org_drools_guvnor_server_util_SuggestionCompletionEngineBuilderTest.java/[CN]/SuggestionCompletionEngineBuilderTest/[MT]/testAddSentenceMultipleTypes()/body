{
  final DSLMappingEntry mapping1=mock(DSLMappingEntry.class,"mapping1");
  final DSLMappingEntry mapping2=mock(DSLMappingEntry.class,"mapping2");
  final DSLMappingEntry mapping3=mock(DSLMappingEntry.class,"mapping3");
  final DSLMappingEntry mapping4=mock(DSLMappingEntry.class,"mapping4");
  when(mapping1.getSection()).thenReturn(DSLMappingEntry.CONDITION);
  when(mapping1.getMappingKey()).thenReturn("cond");
  when(mapping2.getSection()).thenReturn(DSLMappingEntry.CONSEQUENCE);
  when(mapping2.getMappingKey()).thenReturn("cons");
  when(mapping3.getSection()).thenReturn(DSLMappingEntry.ANY);
  when(mapping3.getMappingKey()).thenReturn("any");
  when(mapping4.getSection()).thenReturn(DSLMappingEntry.KEYWORD);
  when(mapping4.getMappingKey()).thenReturn("key");
  this.builder.addDSLMapping(mapping1);
  this.builder.addDSLMapping(mapping2);
  this.builder.addDSLMapping(mapping3);
  this.builder.addDSLMapping(mapping4);
  final SuggestionCompletionEngine engine=this.builder.getInstance();
  assertEquals(1,engine.actionDSLSentences.length);
  assertEquals(1,engine.conditionDSLSentences.length);
  assertEquals(1,engine.keywordDSLItems.length);
  assertEquals(1,engine.anyScopeDSLItems.length);
  assertEquals("cond",engine.conditionDSLSentences[0].sentence);
}
