{
  final DSLMappingEntry mapping1=context.mock(DSLMappingEntry.class,"mapping1");
  final DSLMappingEntry mapping2=context.mock(DSLMappingEntry.class,"mapping2");
  final DSLMappingEntry mapping3=context.mock(DSLMappingEntry.class,"mapping3");
  final DSLMappingEntry mapping4=context.mock(DSLMappingEntry.class,"mapping4");
  context.checking(new Expectations(){
{
      allowing(mapping1).getSection();
      will(returnValue(DSLMappingEntry.CONDITION));
      allowing(mapping1).getMappingKey();
      will(returnValue("cond"));
      allowing(mapping2).getSection();
      will(returnValue(DSLMappingEntry.CONSEQUENCE));
      allowing(mapping2).getMappingKey();
      will(returnValue("cons"));
      allowing(mapping3).getSection();
      will(returnValue(DSLMappingEntry.ANY));
      allowing(mapping3).getMappingKey();
      will(returnValue("any"));
      allowing(mapping4).getSection();
      will(returnValue(DSLMappingEntry.KEYWORD));
      allowing(mapping4).getMappingKey();
      will(returnValue("key"));
    }
  }
);
  this.builder.addDSLMapping(mapping1);
  this.builder.addDSLMapping(mapping2);
  this.builder.addDSLMapping(mapping3);
  this.builder.addDSLMapping(mapping4);
  final SuggestionCompletionEngine engine=this.builder.getInstance();
  assertEquals(1,engine.actionDSLSentences.length);
  assertEquals(1,engine.conditionDSLSentences.length);
  assertEquals(1,engine.keywordDSLItems.length);
  assertEquals(1,engine.anyScopeDSLItems.length);
  assertEquals("cond",engine.conditionDSLSentences[0].sentence);
}
