{
  this.selectPossibleMatches(workingMemory,handle);
  Iterator iterator=new Iterator(){
    MultiLinkedListNode current=null;
    MultiLinkedListNode next=null;
    MultiLinkedListNode candidate=(MultiLinkedListNode)selectedList.getFirst();
    public final boolean hasNext(){
      boolean hasnext=false;
      if (next == null) {
        while (candidate != null) {
          if ((childMemory == null) || (childMemory.isPossibleMatch((MultiLinkedListNodeWrapper)candidate.getChild()))) {
            hasnext=true;
            next=candidate;
            candidate=(MultiLinkedListNode)candidate.getNext();
            break;
          }
          candidate=(MultiLinkedListNode)candidate.getNext();
        }
      }
 else {
        hasnext=true;
      }
      return hasnext;
    }
    public final Object next(){
      if (this.next == null) {
        this.hasNext();
      }
      this.current=this.next;
      this.next=null;
      if (this.current == null) {
        throw new NoSuchElementException("No more elements to return");
      }
      return this.current;
    }
    public final void remove(){
      if (this.current != null) {
        BooleanConstrainedLeftMemory.this.remove(workingMemory,(ReteTuple)current);
      }
 else {
        throw new IllegalStateException("No item to remove. Call next() before calling remove().");
      }
    }
  }
;
  return iterator;
}
