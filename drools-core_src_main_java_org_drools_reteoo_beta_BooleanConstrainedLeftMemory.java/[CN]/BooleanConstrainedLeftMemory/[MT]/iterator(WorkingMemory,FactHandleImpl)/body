{
  this.selectPossibleMatches(workingMemory,handle);
  Iterator iterator=new Iterator(){
    Iterator it=selectedList.iterator();
    MultiLinkedListNode current=null;
    MultiLinkedListNode next=null;
    public boolean hasNext(){
      boolean hasnext=false;
      if (next == null) {
        while (it.hasNext()) {
          next=(MultiLinkedListNode)it.next();
          if ((childMemory == null) || (childMemory.isPossibleMatch((MultiLinkedListNodeWrapper)next.getChild()))) {
            hasnext=true;
            break;
          }
        }
      }
 else {
        hasnext=true;
      }
      return hasnext;
    }
    public Object next(){
      if (this.next == null) {
        this.hasNext();
      }
      this.current=this.next;
      this.next=null;
      if (this.current == null) {
        throw new NoSuchElementException("No more elements to return");
      }
      return this.current;
    }
    public void remove(){
      if (this.current != null) {
        BooleanConstrainedLeftMemory.this.remove(workingMemory,(ReteTuple)current);
      }
 else {
        throw new IllegalStateException("No item to remove. Call next() before calling remove().");
      }
    }
  }
;
  return iterator;
}
