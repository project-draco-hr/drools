{
  try {
    int alt62=4;
    int LA62_0=input.LA(1);
    if ((LA62_0 == DOT)) {
      int LA62_1=input.LA(2);
      if ((synpred29_DRLExpressions())) {
        alt62=1;
      }
 else       if ((synpred30_DRLExpressions())) {
        alt62=2;
      }
 else       if ((synpred31_DRLExpressions())) {
        alt62=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",62,1,input);
        throw nvae;
      }
    }
 else     if ((LA62_0 == LEFT_SQUARE) && (synpred33_DRLExpressions())) {
      alt62=4;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",62,0,input);
      throw nvae;
    }
switch (alt62) {
case 1:
{
        match(input,DOT,FOLLOW_DOT_in_selector1764);
        if (state.failed)         return;
        pushFollow(FOLLOW_super_key_in_selector1766);
        super_key();
        state._fsp--;
        if (state.failed)         return;
        pushFollow(FOLLOW_superSuffix_in_selector1768);
        superSuffix();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,DOT,FOLLOW_DOT_in_selector1781);
    if (state.failed)     return;
    pushFollow(FOLLOW_new_key_in_selector1783);
    new_key();
    state._fsp--;
    if (state.failed)     return;
    int alt60=2;
    int LA60_0=input.LA(1);
    if ((LA60_0 == LESS)) {
      alt60=1;
    }
switch (alt60) {
case 1:
{
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector1786);
        nonWildcardTypeArguments();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
}
pushFollow(FOLLOW_innerCreator_in_selector1790);
innerCreator();
state._fsp--;
if (state.failed) return;
}
break;
case 3:
{
match(input,DOT,FOLLOW_DOT_in_selector1803);
if (state.failed) return;
match(input,ID,FOLLOW_ID_in_selector1805);
if (state.failed) return;
int alt61=2;
alt61=dfa61.predict(input);
switch (alt61) {
case 1:
{
pushFollow(FOLLOW_arguments_in_selector1814);
arguments();
state._fsp--;
if (state.failed) return;
}
break;
}
}
break;
case 4:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_selector1829);
if (state.failed) return;
pushFollow(FOLLOW_expression_in_selector1831);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_selector1833);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
