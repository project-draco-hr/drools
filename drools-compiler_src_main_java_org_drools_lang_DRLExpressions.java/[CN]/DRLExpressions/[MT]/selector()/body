{
  try {
    int alt72=4;
    int LA72_0=input.LA(1);
    if ((LA72_0 == DOT)) {
      int LA72_1=input.LA(2);
      if ((synpred33_DRLExpressions())) {
        alt72=1;
      }
 else       if ((synpred34_DRLExpressions())) {
        alt72=2;
      }
 else       if ((synpred35_DRLExpressions())) {
        alt72=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",72,1,input);
        throw nvae;
      }
    }
 else     if ((LA72_0 == LEFT_SQUARE) && (synpred37_DRLExpressions())) {
      alt72=4;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",72,0,input);
      throw nvae;
    }
switch (alt72) {
case 1:
{
        match(input,DOT,FOLLOW_DOT_in_selector2988);
        if (state.failed)         return;
        pushFollow(FOLLOW_super_key_in_selector2990);
        super_key();
        state._fsp--;
        if (state.failed)         return;
        pushFollow(FOLLOW_superSuffix_in_selector2992);
        superSuffix();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,DOT,FOLLOW_DOT_in_selector3008);
    if (state.failed)     return;
    pushFollow(FOLLOW_new_key_in_selector3010);
    new_key();
    state._fsp--;
    if (state.failed)     return;
    int alt70=2;
    int LA70_0=input.LA(1);
    if ((LA70_0 == LESS)) {
      alt70=1;
    }
switch (alt70) {
case 1:
{
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector3013);
        nonWildcardTypeArguments();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
}
pushFollow(FOLLOW_innerCreator_in_selector3017);
innerCreator();
state._fsp--;
if (state.failed) return;
}
break;
case 3:
{
match(input,DOT,FOLLOW_DOT_in_selector3033);
if (state.failed) return;
match(input,ID,FOLLOW_ID_in_selector3035);
if (state.failed) return;
int alt71=2;
alt71=dfa71.predict(input);
switch (alt71) {
case 1:
{
pushFollow(FOLLOW_arguments_in_selector3044);
arguments();
state._fsp--;
if (state.failed) return;
}
break;
}
}
break;
case 4:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_selector3065);
if (state.failed) return;
pushFollow(FOLLOW_expression_in_selector3067);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_selector3069);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
