{
  int selector_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,42)) {
      return;
    }
    int alt61=4;
    int LA61_0=input.LA(1);
    if ((LA61_0 == DOT)) {
      int LA61_1=input.LA(2);
      if ((synpred40_DRLExpressions())) {
        alt61=1;
      }
 else       if ((synpred41_DRLExpressions())) {
        alt61=2;
      }
 else       if ((synpred42_DRLExpressions())) {
        alt61=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",61,1,input);
        throw nvae;
      }
    }
 else     if ((LA61_0 == LEFT_SQUARE)) {
      alt61=4;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",61,0,input);
      throw nvae;
    }
switch (alt61) {
case 1:
{
        match(input,DOT,FOLLOW_DOT_in_selector1836);
        if (state.failed)         return;
        match(input,ID,FOLLOW_ID_in_selector1838);
        if (state.failed)         return;
        int alt59=2;
        alt59=dfa59.predict(input);
switch (alt59) {
case 1:
{
            pushFollow(FOLLOW_arguments_in_selector1847);
            arguments();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
    }
  }
break;
case 2:
{
match(input,DOT,FOLLOW_DOT_in_selector1858);
if (state.failed) return;
pushFollow(FOLLOW_super_key_in_selector1860);
super_key();
state._fsp--;
if (state.failed) return;
pushFollow(FOLLOW_superSuffix_in_selector1862);
superSuffix();
state._fsp--;
if (state.failed) return;
}
break;
case 3:
{
match(input,DOT,FOLLOW_DOT_in_selector1869);
if (state.failed) return;
pushFollow(FOLLOW_new_key_in_selector1871);
new_key();
state._fsp--;
if (state.failed) return;
int alt60=2;
int LA60_0=input.LA(1);
if ((LA60_0 == LESS)) {
alt60=1;
}
switch (alt60) {
case 1:
{
pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector1874);
nonWildcardTypeArguments();
state._fsp--;
if (state.failed) return;
}
break;
}
pushFollow(FOLLOW_innerCreator_in_selector1878);
innerCreator();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_selector1885);
if (state.failed) return;
pushFollow(FOLLOW_expression_in_selector1887);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_selector1889);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,42,selector_StartIndex);
}
}
return;
}
