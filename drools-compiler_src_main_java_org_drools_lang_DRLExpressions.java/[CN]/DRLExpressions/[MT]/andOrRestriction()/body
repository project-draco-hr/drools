{
  DRLExpressions.andOrRestriction_return retval=new DRLExpressions.andOrRestriction_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token lop=null;
  DRLExpressions.equalityExpression_return ee=null;
  DRLExpressions.operator_return op=null;
  DRLExpressions.shiftExpression_return se2=null;
  Object lop_tree=null;
  RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
  RewriteRuleTokenStream stream_DOUBLE_AMPER=new RewriteRuleTokenStream(adaptor,"token DOUBLE_AMPER");
  RewriteRuleSubtreeStream stream_equalityExpression=new RewriteRuleSubtreeStream(adaptor,"rule equalityExpression");
  RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
  RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
  try {
{
{
        pushFollow(FOLLOW_equalityExpression_in_andOrRestriction605);
        ee=equalityExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_equalityExpression.add(ee.getTree());
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_ee=new RewriteRuleSubtreeStream(adaptor,"rule ee",ee != null ? ee.tree : null);
          root_0=(Object)adaptor.nil();
{
            adaptor.addChild(root_0,stream_ee.nextTree());
          }
          retval.tree=root_0;
        }
      }
      loop21:       do {
        int alt21=2;
        alt21=dfa21.predict(input);
switch (alt21) {
case 1:
{
{
              int alt20=2;
              int LA20_0=input.LA(1);
              if ((LA20_0 == DOUBLE_PIPE)) {
                alt20=1;
              }
 else               if ((LA20_0 == DOUBLE_AMPER)) {
                alt20=2;
              }
 else {
                if (state.backtracking > 0) {
                  state.failed=true;
                  return retval;
                }
                NoViableAltException nvae=new NoViableAltException("",20,0,input);
                throw nvae;
              }
switch (alt20) {
case 1:
{
                  lop=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_andOrRestriction635);
                  if (state.failed)                   return retval;
                  if (state.backtracking == 0)                   stream_DOUBLE_PIPE.add(lop);
                }
              break;
case 2:
{
              lop=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_andOrRestriction639);
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_DOUBLE_AMPER.add(lop);
            }
          break;
      }
      pushFollow(FOLLOW_operator_in_andOrRestriction644);
      op=operator();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_operator.add(op.getTree());
      pushFollow(FOLLOW_shiftExpression_in_andOrRestriction648);
      se2=shiftExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_shiftExpression.add(se2.getTree());
    }
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleTokenStream stream_lop=new RewriteRuleTokenStream(adaptor,"token lop",lop);
      RewriteRuleSubtreeStream stream_se2=new RewriteRuleSubtreeStream(adaptor,"rule se2",se2 != null ? se2.tree : null);
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op != null ? op.tree : null);
      root_0=(Object)adaptor.nil();
{
{
          Object root_1=(Object)adaptor.nil();
          root_1=(Object)adaptor.becomeRoot(stream_lop.nextNode(),root_1);
          adaptor.addChild(root_1,stream_retval.nextTree());
{
            Object root_2=(Object)adaptor.nil();
            root_2=(Object)adaptor.becomeRoot(stream_op.nextNode(),root_2);
            adaptor.addChild(root_2,(ee != null ? ee.se1 : null));
            adaptor.addChild(root_2,stream_se2.nextTree());
            adaptor.addChild(root_1,root_2);
          }
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
default :
break loop21;
}
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
