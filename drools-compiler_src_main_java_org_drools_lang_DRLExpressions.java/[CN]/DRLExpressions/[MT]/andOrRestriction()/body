{
  try {
{
      pushFollow(FOLLOW_equalityExpression_in_andOrRestriction583);
      equalityExpression();
      state._fsp--;
      if (state.failed)       return;
      loop20:       do {
        int alt20=2;
        alt20=dfa20.predict(input);
switch (alt20) {
case 1:
{
            if ((input.LA(1) >= DOUBLE_AMPER && input.LA(1) <= DOUBLE_PIPE)) {
              input.consume();
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_operator_in_andOrRestriction603);
            operator();
            state._fsp--;
            if (state.failed)             return;
            pushFollow(FOLLOW_shiftExpression_in_andOrRestriction605);
            shiftExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      break loop20;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
