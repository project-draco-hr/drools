{
  DRLExpressions.inlineMapExpression_return retval=new DRLExpressions.inlineMapExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE155=null;
  Token RIGHT_SQUARE157=null;
  DRLExpressions.mapExpressionList_return mapExpressionList156=null;
  Object LEFT_SQUARE155_tree=null;
  Object RIGHT_SQUARE157_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE155=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression1735);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE155_tree=(Object)adaptor.create(LEFT_SQUARE155);
        adaptor.addChild(root_0,LEFT_SQUARE155_tree);
      }
      int cnt49=0;
      loop49:       do {
        int alt49=2;
        int LA49_0=input.LA(1);
        if ((LA49_0 == FLOAT || (LA49_0 >= HEX && LA49_0 <= DECIMAL) || LA49_0 == STRING || (LA49_0 >= BOOL && LA49_0 <= NULL) || (LA49_0 >= DECR && LA49_0 <= INCR) || LA49_0 == LESS || LA49_0 == LEFT_PAREN || LA49_0 == LEFT_SQUARE || (LA49_0 >= NEGATION && LA49_0 <= TILDE) || (LA49_0 >= MINUS && LA49_0 <= PLUS) || LA49_0 == ID)) {
          alt49=1;
        }
switch (alt49) {
case 1:
{
            pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression1737);
            mapExpressionList156=mapExpressionList();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,mapExpressionList156.getTree());
          }
        break;
default :
      if (cnt49 >= 1)       break loop49;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(49,input);
throw eee;
}
cnt49++;
}
 while (true);
RIGHT_SQUARE157=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression1740);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE157_tree=(Object)adaptor.create(RIGHT_SQUARE157);
adaptor.addChild(root_0,RIGHT_SQUARE157_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
