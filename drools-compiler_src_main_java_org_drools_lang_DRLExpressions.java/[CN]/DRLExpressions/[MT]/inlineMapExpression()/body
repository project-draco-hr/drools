{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression1335);
      if (state.failed)       return;
      int cnt40=0;
      loop40:       do {
        int alt40=2;
        int LA40_0=input.LA(1);
        if ((LA40_0 == FLOAT || (LA40_0 >= HEX && LA40_0 <= DECIMAL) || LA40_0 == STRING || (LA40_0 >= BOOL && LA40_0 <= NULL) || (LA40_0 >= DECR && LA40_0 <= INCR) || LA40_0 == LESS || LA40_0 == LEFT_PAREN || LA40_0 == LEFT_SQUARE || (LA40_0 >= NEGATION && LA40_0 <= TILDE) || (LA40_0 >= MINUS && LA40_0 <= PLUS) || LA40_0 == ID)) {
          alt40=1;
        }
switch (alt40) {
case 1:
{
            pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression1337);
            mapExpressionList();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      if (cnt40 >= 1)       break loop40;
    if (state.backtracking > 0) {
      state.failed=true;
      return;
    }
  EarlyExitException eee=new EarlyExitException(40,input);
throw eee;
}
cnt40++;
}
 while (true);
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression1340);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
