{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression1469);
      if (state.failed)       return;
      int cnt46=0;
      loop46:       do {
        int alt46=2;
        int LA46_0=input.LA(1);
        if ((LA46_0 == FLOAT || (LA46_0 >= HEX && LA46_0 <= DECIMAL) || LA46_0 == STRING || (LA46_0 >= BOOL && LA46_0 <= NULL) || (LA46_0 >= DECR && LA46_0 <= INCR) || LA46_0 == LESS || LA46_0 == LEFT_PAREN || LA46_0 == LEFT_SQUARE || (LA46_0 >= NEGATION && LA46_0 <= TILDE) || (LA46_0 >= MINUS && LA46_0 <= PLUS) || LA46_0 == ID)) {
          alt46=1;
        }
switch (alt46) {
case 1:
{
            pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression1471);
            mapExpressionList();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      if (cnt46 >= 1)       break loop46;
    if (state.backtracking > 0) {
      state.failed=true;
      return;
    }
  EarlyExitException eee=new EarlyExitException(46,input);
throw eee;
}
cnt46++;
}
 while (true);
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression1474);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
