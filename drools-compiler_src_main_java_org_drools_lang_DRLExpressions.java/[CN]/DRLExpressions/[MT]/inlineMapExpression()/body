{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression1524);
      if (state.failed)       return;
      int cnt47=0;
      loop47:       do {
        int alt47=2;
        int LA47_0=input.LA(1);
        if ((LA47_0 == FLOAT || (LA47_0 >= HEX && LA47_0 <= DECIMAL) || LA47_0 == STRING || (LA47_0 >= BOOL && LA47_0 <= NULL) || (LA47_0 >= DECR && LA47_0 <= INCR) || LA47_0 == LESS || LA47_0 == LEFT_PAREN || LA47_0 == LEFT_SQUARE || (LA47_0 >= NEGATION && LA47_0 <= TILDE) || (LA47_0 >= MINUS && LA47_0 <= PLUS) || LA47_0 == ID)) {
          alt47=1;
        }
switch (alt47) {
case 1:
{
            pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression1526);
            mapExpressionList();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      if (cnt47 >= 1)       break loop47;
    if (state.backtracking > 0) {
      state.failed=true;
      return;
    }
  EarlyExitException eee=new EarlyExitException(47,input);
throw eee;
}
cnt47++;
}
 while (true);
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression1529);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
