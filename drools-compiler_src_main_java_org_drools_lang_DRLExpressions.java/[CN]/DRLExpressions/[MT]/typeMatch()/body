{
  try {
    int alt11=2;
    int LA11_0=input.LA(1);
    if ((LA11_0 == ID)) {
      int LA11_1=input.LA(2);
      if ((((synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))) || (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) || (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))))) {
        alt11=1;
      }
 else       if ((true)) {
        alt11=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",11,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",11,0,input);
      throw nvae;
    }
switch (alt11) {
case 1:
{
{
          pushFollow(FOLLOW_primitiveType_in_typeMatch546);
          primitiveType();
          state._fsp--;
          if (state.failed)           return;
          loop6:           do {
            int alt6=2;
            int LA6_0=input.LA(1);
            if ((LA6_0 == LEFT_SQUARE) && (synpred2_DRLExpressions())) {
              alt6=1;
            }
switch (alt6) {
case 1:
{
                match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_typeMatch556);
                if (state.failed)                 return;
                match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_typeMatch558);
                if (state.failed)                 return;
              }
            break;
default :
          break loop6;
      }
    }
 while (true);
  }
}
break;
case 2:
{
{
match(input,ID,FOLLOW_ID_in_typeMatch572);
if (state.failed) return;
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == LESS)) {
  int LA7_1=input.LA(2);
  if ((LA7_1 == ID) && (synpred3_DRLExpressions())) {
    alt7=1;
  }
 else   if ((LA7_1 == QUESTION) && (synpred3_DRLExpressions())) {
    alt7=1;
  }
}
switch (alt7) {
case 1:
{
    pushFollow(FOLLOW_typeArguments_in_typeMatch579);
    typeArguments();
    state._fsp--;
    if (state.failed)     return;
  }
break;
}
loop9: do {
int alt9=2;
int LA9_0=input.LA(1);
if ((LA9_0 == DOT)) {
alt9=1;
}
switch (alt9) {
case 1:
{
  match(input,DOT,FOLLOW_DOT_in_typeMatch584);
  if (state.failed)   return;
  match(input,ID,FOLLOW_ID_in_typeMatch586);
  if (state.failed)   return;
  int alt8=2;
  int LA8_0=input.LA(1);
  if ((LA8_0 == LESS)) {
    int LA8_1=input.LA(2);
    if ((LA8_1 == ID) && (synpred4_DRLExpressions())) {
      alt8=1;
    }
 else     if ((LA8_1 == QUESTION) && (synpred4_DRLExpressions())) {
      alt8=1;
    }
  }
switch (alt8) {
case 1:
{
      pushFollow(FOLLOW_typeArguments_in_typeMatch593);
      typeArguments();
      state._fsp--;
      if (state.failed)       return;
    }
  break;
}
}
break;
default :
break loop9;
}
}
 while (true);
loop10: do {
int alt10=2;
int LA10_0=input.LA(1);
if ((LA10_0 == LEFT_SQUARE) && (synpred5_DRLExpressions())) {
alt10=1;
}
switch (alt10) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_typeMatch608);
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_typeMatch610);
if (state.failed) return;
}
break;
default :
break loop10;
}
}
 while (true);
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
