{
  try {
    int alt32=3;
    int LA32_0=input.LA(1);
    if ((LA32_0 == LEFT_PAREN)) {
      int LA32_1=input.LA(2);
      if ((synpred13_DRLExpressions())) {
        alt32=1;
      }
 else       if ((synpred14_DRLExpressions())) {
        alt32=2;
      }
 else       if ((true)) {
        alt32=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",32,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",32,0,input);
      throw nvae;
    }
switch (alt32) {
case 1:
{
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression944);
        if (state.failed)         return;
        pushFollow(FOLLOW_primitiveType_in_castExpression946);
        primitiveType();
        state._fsp--;
        if (state.failed)         return;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression948);
        if (state.failed)         return;
        pushFollow(FOLLOW_unaryExpression_in_castExpression950);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression967);
    if (state.failed)     return;
    pushFollow(FOLLOW_type_in_castExpression969);
    type();
    state._fsp--;
    if (state.failed)     return;
    match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression971);
    if (state.failed)     return;
    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression973);
    unaryExpressionNotPlusMinus();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 3:
{
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression982);
if (state.failed) return;
pushFollow(FOLLOW_expression_in_castExpression984);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression986);
if (state.failed) return;
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression988);
unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
