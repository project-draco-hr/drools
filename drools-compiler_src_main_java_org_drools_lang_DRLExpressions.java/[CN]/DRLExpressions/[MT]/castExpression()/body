{
  DRLExpressions.castExpression_return retval=new DRLExpressions.castExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN115=null;
  Token RIGHT_PAREN117=null;
  Token LEFT_PAREN119=null;
  Token RIGHT_PAREN121=null;
  DRLExpressions.primitiveType_return primitiveType116=null;
  DRLExpressions.unaryExpression_return unaryExpression118=null;
  DRLExpressions.type_return type120=null;
  DRLExpressions.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus122=null;
  Object LEFT_PAREN115_tree=null;
  Object RIGHT_PAREN117_tree=null;
  Object LEFT_PAREN119_tree=null;
  Object RIGHT_PAREN121_tree=null;
  try {
    int alt41=2;
    int LA41_0=input.LA(1);
    if ((LA41_0 == LEFT_PAREN)) {
      int LA41_1=input.LA(2);
      if ((synpred16_DRLExpressions())) {
        alt41=1;
      }
 else       if ((synpred17_DRLExpressions())) {
        alt41=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",41,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",41,0,input);
      throw nvae;
    }
switch (alt41) {
case 1:
{
        root_0=(Object)adaptor.nil();
        LEFT_PAREN115=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression1385);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          LEFT_PAREN115_tree=(Object)adaptor.create(LEFT_PAREN115);
          adaptor.addChild(root_0,LEFT_PAREN115_tree);
        }
        pushFollow(FOLLOW_primitiveType_in_castExpression1387);
        primitiveType116=primitiveType();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,primitiveType116.getTree());
        RIGHT_PAREN117=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression1389);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          RIGHT_PAREN117_tree=(Object)adaptor.create(RIGHT_PAREN117);
          adaptor.addChild(root_0,RIGHT_PAREN117_tree);
        }
        pushFollow(FOLLOW_unaryExpression_in_castExpression1391);
        unaryExpression118=unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,unaryExpression118.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    LEFT_PAREN119=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression1408);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      LEFT_PAREN119_tree=(Object)adaptor.create(LEFT_PAREN119);
      adaptor.addChild(root_0,LEFT_PAREN119_tree);
    }
    pushFollow(FOLLOW_type_in_castExpression1410);
    type120=type();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,type120.getTree());
    RIGHT_PAREN121=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression1412);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      RIGHT_PAREN121_tree=(Object)adaptor.create(RIGHT_PAREN121);
      adaptor.addChild(root_0,RIGHT_PAREN121_tree);
    }
    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression1414);
    unaryExpressionNotPlusMinus122=unaryExpressionNotPlusMinus();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,unaryExpressionNotPlusMinus122.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
