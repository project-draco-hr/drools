{
  BaseDescr result=null;
  BaseDescr expr=null;
  try {
    int alt47=9;
    alt47=dfa47.predict(input);
switch (alt47) {
case 1:
{
        pushFollow(FOLLOW_parExpression_in_primary1805);
        expr=parExpression();
        state._fsp--;
        if (state.failed)         return result;
        if (state.backtracking == 0) {
          if (buildDescr && state.backtracking == 0) {
            result=expr;
          }
        }
      }
    break;
case 2:
{
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary1822);
    nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return result;
    int alt43=2;
    int LA43_0=input.LA(1);
    if ((LA43_0 == ID)) {
      int LA43_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt43=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt43=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return result;
        }
        NoViableAltException nvae=new NoViableAltException("",43,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return result;
      }
      NoViableAltException nvae=new NoViableAltException("",43,0,input);
      throw nvae;
    }
switch (alt43) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary1825);
        explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return result;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary1829);
    this_key();
    state._fsp--;
    if (state.failed)     return result;
    pushFollow(FOLLOW_arguments_in_primary1831);
    arguments();
    state._fsp--;
    if (state.failed)     return result;
  }
break;
}
}
break;
case 3:
{
pushFollow(FOLLOW_literal_in_primary1847);
literal();
state._fsp--;
if (state.failed) return result;
}
break;
case 4:
{
pushFollow(FOLLOW_super_key_in_primary1867);
super_key();
state._fsp--;
if (state.failed) return result;
pushFollow(FOLLOW_superSuffix_in_primary1869);
superSuffix();
state._fsp--;
if (state.failed) return result;
}
break;
case 5:
{
pushFollow(FOLLOW_new_key_in_primary1885);
new_key();
state._fsp--;
if (state.failed) return result;
pushFollow(FOLLOW_creator_in_primary1887);
creator();
state._fsp--;
if (state.failed) return result;
}
break;
case 6:
{
pushFollow(FOLLOW_primitiveType_in_primary1903);
primitiveType();
state._fsp--;
if (state.failed) return result;
loop44: do {
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == LEFT_SQUARE)) {
alt44=1;
}
switch (alt44) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary1906);
if (state.failed) return result;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary1908);
if (state.failed) return result;
}
break;
default :
break loop44;
}
}
 while (true);
match(input,DOT,FOLLOW_DOT_in_primary1912);
if (state.failed) return result;
pushFollow(FOLLOW_class_key_in_primary1914);
class_key();
state._fsp--;
if (state.failed) return result;
}
break;
case 7:
{
pushFollow(FOLLOW_inlineMapExpression_in_primary1935);
inlineMapExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 8:
{
pushFollow(FOLLOW_inlineListExpression_in_primary1951);
inlineListExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 9:
{
match(input,ID,FOLLOW_ID_in_primary1965);
if (state.failed) return result;
loop45: do {
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == DOT)) {
int LA45_2=input.LA(2);
if ((LA45_2 == ID)) {
int LA45_3=input.LA(3);
if ((synpred27_DRLExpressions())) {
alt45=1;
}
}
}
switch (alt45) {
case 1:
{
match(input,DOT,FOLLOW_DOT_in_primary1974);
if (state.failed) return result;
match(input,ID,FOLLOW_ID_in_primary1976);
if (state.failed) return result;
}
break;
default :
break loop45;
}
}
 while (true);
int alt46=2;
alt46=dfa46.predict(input);
switch (alt46) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary1985);
identifierSuffix();
state._fsp--;
if (state.failed) return result;
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
