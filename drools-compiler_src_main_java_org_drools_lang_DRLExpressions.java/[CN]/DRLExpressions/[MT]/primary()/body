{
  DRLExpressions.primary_return retval=new DRLExpressions.primary_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE142=null;
  Token RIGHT_SQUARE143=null;
  Token DOT144=null;
  Token ID148=null;
  Token DOT149=null;
  Token ID150=null;
  DRLExpressions.parExpression_return parExpression131=null;
  DRLExpressions.nonWildcardTypeArguments_return nonWildcardTypeArguments132=null;
  DRLExpressions.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix133=null;
  DRLExpressions.this_key_return this_key134=null;
  DRLExpressions.arguments_return arguments135=null;
  DRLExpressions.literal_return literal136=null;
  DRLExpressions.super_key_return super_key137=null;
  DRLExpressions.superSuffix_return superSuffix138=null;
  DRLExpressions.new_key_return new_key139=null;
  DRLExpressions.creator_return creator140=null;
  DRLExpressions.primitiveType_return primitiveType141=null;
  DRLExpressions.class_key_return class_key145=null;
  DRLExpressions.inlineMapExpression_return inlineMapExpression146=null;
  DRLExpressions.inlineListExpression_return inlineListExpression147=null;
  DRLExpressions.identifierSuffix_return identifierSuffix151=null;
  Object LEFT_SQUARE142_tree=null;
  Object RIGHT_SQUARE143_tree=null;
  Object DOT144_tree=null;
  Object ID148_tree=null;
  Object DOT149_tree=null;
  Object ID150_tree=null;
  try {
    int alt47=9;
    alt47=dfa47.predict(input);
switch (alt47) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_parExpression_in_primary1513);
        parExpression131=parExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,parExpression131.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary1528);
    nonWildcardTypeArguments132=nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,nonWildcardTypeArguments132.getTree());
    int alt43=2;
    int LA43_0=input.LA(1);
    if ((LA43_0 == ID)) {
      int LA43_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt43=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt43=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",43,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",43,0,input);
      throw nvae;
    }
switch (alt43) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary1531);
        explicitGenericInvocationSuffix133=explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,explicitGenericInvocationSuffix133.getTree());
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary1535);
    this_key134=this_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,this_key134.getTree());
    pushFollow(FOLLOW_arguments_in_primary1537);
    arguments135=arguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arguments135.getTree());
  }
break;
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_literal_in_primary1553);
literal136=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal136.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_super_key_in_primary1573);
super_key137=super_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,super_key137.getTree());
pushFollow(FOLLOW_superSuffix_in_primary1575);
superSuffix138=superSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,superSuffix138.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_new_key_in_primary1590);
new_key139=new_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,new_key139.getTree());
pushFollow(FOLLOW_creator_in_primary1592);
creator140=creator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,creator140.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primitiveType_in_primary1607);
primitiveType141=primitiveType();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primitiveType141.getTree());
loop44: do {
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == LEFT_SQUARE)) {
alt44=1;
}
switch (alt44) {
case 1:
{
LEFT_SQUARE142=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary1610);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE142_tree=(Object)adaptor.create(LEFT_SQUARE142);
adaptor.addChild(root_0,LEFT_SQUARE142_tree);
}
RIGHT_SQUARE143=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary1612);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE143_tree=(Object)adaptor.create(RIGHT_SQUARE143);
adaptor.addChild(root_0,RIGHT_SQUARE143_tree);
}
}
break;
default :
break loop44;
}
}
 while (true);
DOT144=(Token)match(input,DOT,FOLLOW_DOT_in_primary1616);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT144_tree=(Object)adaptor.create(DOT144);
adaptor.addChild(root_0,DOT144_tree);
}
pushFollow(FOLLOW_class_key_in_primary1618);
class_key145=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key145.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineMapExpression_in_primary1638);
inlineMapExpression146=inlineMapExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineMapExpression146.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineListExpression_in_primary1653);
inlineListExpression147=inlineListExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineListExpression147.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
ID148=(Token)match(input,ID,FOLLOW_ID_in_primary1667);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID148_tree=(Object)adaptor.create(ID148);
adaptor.addChild(root_0,ID148_tree);
}
loop45: do {
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == DOT)) {
int LA45_2=input.LA(2);
if ((LA45_2 == ID)) {
int LA45_3=input.LA(3);
if ((synpred27_DRLExpressions())) {
alt45=1;
}
}
}
switch (alt45) {
case 1:
{
DOT149=(Token)match(input,DOT,FOLLOW_DOT_in_primary1676);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT149_tree=(Object)adaptor.create(DOT149);
adaptor.addChild(root_0,DOT149_tree);
}
ID150=(Token)match(input,ID,FOLLOW_ID_in_primary1678);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID150_tree=(Object)adaptor.create(ID150);
adaptor.addChild(root_0,ID150_tree);
}
}
break;
default :
break loop45;
}
}
 while (true);
int alt46=2;
alt46=dfa46.predict(input);
switch (alt46) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary1687);
identifierSuffix151=identifierSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,identifierSuffix151.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
