{
  try {
    int alt37=9;
    alt37=dfa37.predict(input);
switch (alt37) {
case 1:
{
        pushFollow(FOLLOW_parExpression_in_primary1102);
        parExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary1117);
    nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return;
    int alt33=2;
    int LA33_0=input.LA(1);
    if ((LA33_0 == ID)) {
      int LA33_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt33=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt33=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",33,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",33,0,input);
      throw nvae;
    }
switch (alt33) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary1120);
        explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary1124);
    this_key();
    state._fsp--;
    if (state.failed)     return;
    pushFollow(FOLLOW_arguments_in_primary1126);
    arguments();
    state._fsp--;
    if (state.failed)     return;
  }
break;
}
}
break;
case 3:
{
pushFollow(FOLLOW_literal_in_primary1142);
literal();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_super_key_in_primary1162);
super_key();
state._fsp--;
if (state.failed) return;
pushFollow(FOLLOW_superSuffix_in_primary1164);
superSuffix();
state._fsp--;
if (state.failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_new_key_in_primary1179);
new_key();
state._fsp--;
if (state.failed) return;
pushFollow(FOLLOW_creator_in_primary1181);
creator();
state._fsp--;
if (state.failed) return;
}
break;
case 6:
{
pushFollow(FOLLOW_primitiveType_in_primary1196);
primitiveType();
state._fsp--;
if (state.failed) return;
loop34: do {
int alt34=2;
int LA34_0=input.LA(1);
if ((LA34_0 == LEFT_SQUARE)) {
alt34=1;
}
switch (alt34) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary1199);
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary1201);
if (state.failed) return;
}
break;
default :
break loop34;
}
}
 while (true);
match(input,DOT,FOLLOW_DOT_in_primary1205);
if (state.failed) return;
pushFollow(FOLLOW_class_key_in_primary1207);
class_key();
state._fsp--;
if (state.failed) return;
}
break;
case 7:
{
pushFollow(FOLLOW_inlineMapExpression_in_primary1227);
inlineMapExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 8:
{
pushFollow(FOLLOW_inlineListExpression_in_primary1242);
inlineListExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 9:
{
match(input,ID,FOLLOW_ID_in_primary1256);
if (state.failed) return;
loop35: do {
int alt35=2;
int LA35_0=input.LA(1);
if ((LA35_0 == DOT)) {
int LA35_2=input.LA(2);
if ((LA35_2 == ID)) {
int LA35_3=input.LA(3);
if ((synpred24_DRLExpressions())) {
alt35=1;
}
}
}
switch (alt35) {
case 1:
{
match(input,DOT,FOLLOW_DOT_in_primary1265);
if (state.failed) return;
match(input,ID,FOLLOW_ID_in_primary1267);
if (state.failed) return;
}
break;
default :
break loop35;
}
}
 while (true);
int alt36=2;
alt36=dfa36.predict(input);
switch (alt36) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary1276);
identifierSuffix();
state._fsp--;
if (state.failed) return;
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
