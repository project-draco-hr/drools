{
  try {
    int alt45=9;
    alt45=dfa45.predict(input);
switch (alt45) {
case 1:
{
        pushFollow(FOLLOW_parExpression_in_primary1302);
        parExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary1317);
    nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return;
    int alt41=2;
    int LA41_0=input.LA(1);
    if ((LA41_0 == ID)) {
      int LA41_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt41=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt41=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",41,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",41,0,input);
      throw nvae;
    }
switch (alt41) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary1320);
        explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary1324);
    this_key();
    state._fsp--;
    if (state.failed)     return;
    pushFollow(FOLLOW_arguments_in_primary1326);
    arguments();
    state._fsp--;
    if (state.failed)     return;
  }
break;
}
}
break;
case 3:
{
pushFollow(FOLLOW_literal_in_primary1342);
literal();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_super_key_in_primary1362);
super_key();
state._fsp--;
if (state.failed) return;
pushFollow(FOLLOW_superSuffix_in_primary1364);
superSuffix();
state._fsp--;
if (state.failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_new_key_in_primary1379);
new_key();
state._fsp--;
if (state.failed) return;
pushFollow(FOLLOW_creator_in_primary1381);
creator();
state._fsp--;
if (state.failed) return;
}
break;
case 6:
{
pushFollow(FOLLOW_primitiveType_in_primary1396);
primitiveType();
state._fsp--;
if (state.failed) return;
loop42: do {
int alt42=2;
int LA42_0=input.LA(1);
if ((LA42_0 == LEFT_SQUARE)) {
alt42=1;
}
switch (alt42) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary1399);
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary1401);
if (state.failed) return;
}
break;
default :
break loop42;
}
}
 while (true);
match(input,DOT,FOLLOW_DOT_in_primary1405);
if (state.failed) return;
pushFollow(FOLLOW_class_key_in_primary1407);
class_key();
state._fsp--;
if (state.failed) return;
}
break;
case 7:
{
pushFollow(FOLLOW_inlineMapExpression_in_primary1427);
inlineMapExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 8:
{
pushFollow(FOLLOW_inlineListExpression_in_primary1442);
inlineListExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 9:
{
match(input,ID,FOLLOW_ID_in_primary1456);
if (state.failed) return;
loop43: do {
int alt43=2;
int LA43_0=input.LA(1);
if ((LA43_0 == DOT)) {
int LA43_2=input.LA(2);
if ((LA43_2 == ID)) {
int LA43_3=input.LA(3);
if ((synpred27_DRLExpressions())) {
alt43=1;
}
}
}
switch (alt43) {
case 1:
{
match(input,DOT,FOLLOW_DOT_in_primary1465);
if (state.failed) return;
match(input,ID,FOLLOW_ID_in_primary1467);
if (state.failed) return;
}
break;
default :
break loop43;
}
}
 while (true);
int alt44=2;
alt44=dfa44.predict(input);
switch (alt44) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary1476);
identifierSuffix();
state._fsp--;
if (state.failed) return;
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
