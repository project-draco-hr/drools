{
  DRLExpressions.class_key_return retval=new DRLExpressions.class_key_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  Object id_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      if (!(((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"class_key","(helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))");
      }
      id=(Token)match(input,ID,FOLLOW_ID_in_class_key2995);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        id_tree=(Object)adaptor.create(id);
        adaptor.addChild(root_0,id_tree);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    throw re;
  }
 finally {
  }
  return retval;
}
