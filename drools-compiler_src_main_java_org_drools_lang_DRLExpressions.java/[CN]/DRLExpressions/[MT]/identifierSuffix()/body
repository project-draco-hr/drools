{
  try {
    int alt54=3;
    int LA54_0=input.LA(1);
    if ((LA54_0 == LEFT_SQUARE)) {
      int LA54_1=input.LA(2);
      if ((LA54_1 == RIGHT_SQUARE) && (synpred30_DRLExpressions())) {
        alt54=1;
      }
 else       if ((LA54_1 == FLOAT || (LA54_1 >= HEX && LA54_1 <= DECIMAL) || LA54_1 == STRING || (LA54_1 >= BOOL && LA54_1 <= NULL) || (LA54_1 >= DECR && LA54_1 <= INCR) || LA54_1 == LESS || LA54_1 == LEFT_PAREN || LA54_1 == LEFT_SQUARE || (LA54_1 >= NEGATION && LA54_1 <= TILDE) || (LA54_1 >= MINUS && LA54_1 <= PLUS) || LA54_1 == ID)) {
        alt54=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",54,1,input);
        throw nvae;
      }
    }
 else     if ((LA54_0 == LEFT_PAREN)) {
      alt54=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",54,0,input);
      throw nvae;
    }
switch (alt54) {
case 1:
{
        int cnt52=0;
        loop52:         do {
          int alt52=2;
          int LA52_0=input.LA(1);
          if ((LA52_0 == LEFT_SQUARE)) {
            alt52=1;
          }
switch (alt52) {
case 1:
{
              match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix2286);
              if (state.failed)               return;
              match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix2288);
              if (state.failed)               return;
            }
          break;
default :
        if (cnt52 >= 1)         break loop52;
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
    EarlyExitException eee=new EarlyExitException(52,input);
  throw eee;
}
cnt52++;
}
 while (true);
match(input,DOT,FOLLOW_DOT_in_identifierSuffix2292);
if (state.failed) return;
pushFollow(FOLLOW_class_key_in_identifierSuffix2294);
class_key();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
int cnt53=0;
loop53: do {
int alt53=2;
alt53=dfa53.predict(input);
switch (alt53) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix2309);
if (state.failed) return;
pushFollow(FOLLOW_expression_in_identifierSuffix2311);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix2313);
if (state.failed) return;
}
break;
default :
if (cnt53 >= 1) break loop53;
if (state.backtracking > 0) {
state.failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(53,input);
throw eee;
}
cnt53++;
}
 while (true);
}
break;
case 3:
{
pushFollow(FOLLOW_arguments_in_identifierSuffix2326);
arguments();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
