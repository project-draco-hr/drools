{
  DRLExpressions.identifierSuffix_return retval=new DRLExpressions.identifierSuffix_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE170=null;
  Token RIGHT_SQUARE171=null;
  Token DOT172=null;
  Token LEFT_SQUARE174=null;
  Token RIGHT_SQUARE176=null;
  DRLExpressions.class_key_return class_key173=null;
  DRLExpressions.expression_return expression175=null;
  DRLExpressions.arguments_return arguments177=null;
  Object LEFT_SQUARE170_tree=null;
  Object RIGHT_SQUARE171_tree=null;
  Object DOT172_tree=null;
  Object LEFT_SQUARE174_tree=null;
  Object RIGHT_SQUARE176_tree=null;
  try {
    int alt53=3;
    int LA53_0=input.LA(1);
    if ((LA53_0 == LEFT_SQUARE)) {
      int LA53_1=input.LA(2);
      if ((LA53_1 == RIGHT_SQUARE) && (synpred29_DRLExpressions())) {
        alt53=1;
      }
 else       if ((LA53_1 == FLOAT || (LA53_1 >= HEX && LA53_1 <= DECIMAL) || LA53_1 == STRING || (LA53_1 >= BOOL && LA53_1 <= NULL) || (LA53_1 >= DECR && LA53_1 <= INCR) || LA53_1 == LESS || LA53_1 == LEFT_PAREN || LA53_1 == LEFT_SQUARE || (LA53_1 >= NEGATION && LA53_1 <= TILDE) || (LA53_1 >= MINUS && LA53_1 <= PLUS) || LA53_1 == ID)) {
        alt53=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",53,1,input);
        throw nvae;
      }
    }
 else     if ((LA53_0 == LEFT_PAREN)) {
      alt53=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",53,0,input);
      throw nvae;
    }
switch (alt53) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int cnt51=0;
        loop51:         do {
          int alt51=2;
          int LA51_0=input.LA(1);
          if ((LA51_0 == LEFT_SQUARE)) {
            alt51=1;
          }
switch (alt51) {
case 1:
{
              LEFT_SQUARE170=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix1833);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                LEFT_SQUARE170_tree=(Object)adaptor.create(LEFT_SQUARE170);
                adaptor.addChild(root_0,LEFT_SQUARE170_tree);
              }
              RIGHT_SQUARE171=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix1835);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                RIGHT_SQUARE171_tree=(Object)adaptor.create(RIGHT_SQUARE171);
                adaptor.addChild(root_0,RIGHT_SQUARE171_tree);
              }
            }
          break;
default :
        if (cnt51 >= 1)         break loop51;
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
    EarlyExitException eee=new EarlyExitException(51,input);
  throw eee;
}
cnt51++;
}
 while (true);
DOT172=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix1839);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT172_tree=(Object)adaptor.create(DOT172);
adaptor.addChild(root_0,DOT172_tree);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix1841);
class_key173=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key173.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
int cnt52=0;
loop52: do {
int alt52=2;
alt52=dfa52.predict(input);
switch (alt52) {
case 1:
{
LEFT_SQUARE174=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix1856);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE174_tree=(Object)adaptor.create(LEFT_SQUARE174);
adaptor.addChild(root_0,LEFT_SQUARE174_tree);
}
pushFollow(FOLLOW_expression_in_identifierSuffix1858);
expression175=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression175.getTree());
RIGHT_SQUARE176=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix1860);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE176_tree=(Object)adaptor.create(RIGHT_SQUARE176);
adaptor.addChild(root_0,RIGHT_SQUARE176_tree);
}
}
break;
default :
if (cnt52 >= 1) break loop52;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(52,input);
throw eee;
}
cnt52++;
}
 while (true);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_arguments_in_identifierSuffix1873);
arguments177=arguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arguments177.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
