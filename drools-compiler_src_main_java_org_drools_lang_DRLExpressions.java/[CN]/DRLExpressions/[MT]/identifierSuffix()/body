{
  int identifierSuffix_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,31)) {
      return;
    }
    int alt43=3;
    int LA43_0=input.LA(1);
    if ((LA43_0 == LEFT_SQUARE)) {
      int LA43_1=input.LA(2);
      if ((LA43_1 == RIGHT_SQUARE)) {
        alt43=1;
      }
 else       if ((LA43_1 == FLOAT || (LA43_1 >= HEX && LA43_1 <= DECIMAL) || LA43_1 == STRING || (LA43_1 >= BOOL && LA43_1 <= NULL) || (LA43_1 >= DECR && LA43_1 <= INCR) || LA43_1 == LESS || LA43_1 == LEFT_PAREN || LA43_1 == LEFT_SQUARE || (LA43_1 >= NEGATION && LA43_1 <= TILDE) || (LA43_1 >= MINUS && LA43_1 <= PLUS) || LA43_1 == ID)) {
        alt43=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",43,1,input);
        throw nvae;
      }
    }
 else     if ((LA43_0 == LEFT_PAREN)) {
      alt43=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",43,0,input);
      throw nvae;
    }
switch (alt43) {
case 1:
{
        int cnt41=0;
        loop41:         do {
          int alt41=2;
          int LA41_0=input.LA(1);
          if ((LA41_0 == LEFT_SQUARE)) {
            alt41=1;
          }
switch (alt41) {
case 1:
{
              match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix1469);
              if (state.failed)               return;
              match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix1471);
              if (state.failed)               return;
            }
          break;
default :
        if (cnt41 >= 1)         break loop41;
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
    EarlyExitException eee=new EarlyExitException(41,input);
  throw eee;
}
cnt41++;
}
 while (true);
match(input,DOT,FOLLOW_DOT_in_identifierSuffix1475);
if (state.failed) return;
pushFollow(FOLLOW_class_key_in_identifierSuffix1477);
class_key();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
int cnt42=0;
loop42: do {
int alt42=2;
alt42=dfa42.predict(input);
switch (alt42) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix1492);
if (state.failed) return;
pushFollow(FOLLOW_expression_in_identifierSuffix1494);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix1496);
if (state.failed) return;
}
break;
default :
if (cnt42 >= 1) break loop42;
if (state.backtracking > 0) {
state.failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(42,input);
throw eee;
}
cnt42++;
}
 while (true);
}
break;
case 3:
{
pushFollow(FOLLOW_arguments_in_identifierSuffix1509);
arguments();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,31,identifierSuffix_StartIndex);
}
}
return;
}
