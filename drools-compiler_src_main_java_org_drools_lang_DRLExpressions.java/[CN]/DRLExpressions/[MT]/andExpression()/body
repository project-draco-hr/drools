{
  try {
{
      pushFollow(FOLLOW_equalityExpression_in_andExpression591);
      equalityExpression();
      state._fsp--;
      if (state.failed)       return;
      loop24:       do {
        int alt24=2;
        int LA24_0=input.LA(1);
        if ((LA24_0 == AMPER)) {
          int LA24_2=input.LA(2);
          if ((LA24_2 == FLOAT || (LA24_2 >= HEX && LA24_2 <= DECIMAL) || LA24_2 == STRING || (LA24_2 >= BOOL && LA24_2 <= NULL) || (LA24_2 >= DECR && LA24_2 <= INCR) || (LA24_2 >= EQUALS && LA24_2 <= LESS) || LA24_2 == LEFT_PAREN || LA24_2 == LEFT_SQUARE || (LA24_2 >= NEGATION && LA24_2 <= TILDE) || (LA24_2 >= MINUS && LA24_2 <= PLUS) || LA24_2 == ID)) {
            alt24=1;
          }
        }
switch (alt24) {
case 1:
{
            match(input,AMPER,FOLLOW_AMPER_in_andExpression595);
            if (state.failed)             return;
            int alt23=2;
            alt23=dfa23.predict(input);
switch (alt23) {
case 1:
{
                pushFollow(FOLLOW_operator_in_andExpression609);
                operator();
                state._fsp--;
                if (state.failed)                 return;
                pushFollow(FOLLOW_shiftExpression_in_andExpression611);
                shiftExpression();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
case 2:
{
            pushFollow(FOLLOW_equalityExpression_in_andExpression619);
            equalityExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
    }
  }
break;
default :
break loop24;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
