{
  DRLExpressions.andExpression_return retval=new DRLExpressions.andExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AMPER53=null;
  DRLExpressions.andOrRestriction_return andOrRestriction52=null;
  DRLExpressions.andOrRestriction_return andOrRestriction54=null;
  Object AMPER53_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andOrRestriction_in_andExpression572);
      andOrRestriction52=andOrRestriction();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,andOrRestriction52.getTree());
      loop19:       do {
        int alt19=2;
        int LA19_0=input.LA(1);
        if ((LA19_0 == AMPER)) {
          alt19=1;
        }
switch (alt19) {
case 1:
{
            AMPER53=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression576);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              AMPER53_tree=(Object)adaptor.create(AMPER53);
              root_0=(Object)adaptor.becomeRoot(AMPER53_tree,root_0);
            }
            pushFollow(FOLLOW_andOrRestriction_in_andExpression579);
            andOrRestriction54=andOrRestriction();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,andOrRestriction54.getTree());
          }
        break;
default :
      break loop19;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
