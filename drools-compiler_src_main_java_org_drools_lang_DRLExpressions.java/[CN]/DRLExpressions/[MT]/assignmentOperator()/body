{
  DRLExpressions.assignmentOperator_return retval=new DRLExpressions.assignmentOperator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS_ASSIGN246=null;
  Token PLUS_ASSIGN247=null;
  Token MINUS_ASSIGN248=null;
  Token MULT_ASSIGN249=null;
  Token DIV_ASSIGN250=null;
  Token AND_ASSIGN251=null;
  Token OR_ASSIGN252=null;
  Token XOR_ASSIGN253=null;
  Token MOD_ASSIGN254=null;
  Token LESS255=null;
  Token LESS256=null;
  Token EQUALS_ASSIGN257=null;
  Token GREATER258=null;
  Token GREATER259=null;
  Token GREATER260=null;
  Token EQUALS_ASSIGN261=null;
  Token GREATER262=null;
  Token GREATER263=null;
  Token EQUALS_ASSIGN264=null;
  Object EQUALS_ASSIGN246_tree=null;
  Object PLUS_ASSIGN247_tree=null;
  Object MINUS_ASSIGN248_tree=null;
  Object MULT_ASSIGN249_tree=null;
  Object DIV_ASSIGN250_tree=null;
  Object AND_ASSIGN251_tree=null;
  Object OR_ASSIGN252_tree=null;
  Object XOR_ASSIGN253_tree=null;
  Object MOD_ASSIGN254_tree=null;
  Object LESS255_tree=null;
  Object LESS256_tree=null;
  Object EQUALS_ASSIGN257_tree=null;
  Object GREATER258_tree=null;
  Object GREATER259_tree=null;
  Object GREATER260_tree=null;
  Object EQUALS_ASSIGN261_tree=null;
  Object GREATER262_tree=null;
  Object GREATER263_tree=null;
  Object EQUALS_ASSIGN264_tree=null;
  RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
  RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
  RewriteRuleTokenStream stream_LESS=new RewriteRuleTokenStream(adaptor,"token LESS");
  try {
    int alt77=12;
    alt77=dfa77.predict(input);
switch (alt77) {
case 1:
{
        root_0=(Object)adaptor.nil();
        EQUALS_ASSIGN246=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator2471);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          EQUALS_ASSIGN246_tree=(Object)adaptor.create(EQUALS_ASSIGN246);
          adaptor.addChild(root_0,EQUALS_ASSIGN246_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    PLUS_ASSIGN247=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator2479);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      PLUS_ASSIGN247_tree=(Object)adaptor.create(PLUS_ASSIGN247);
      adaptor.addChild(root_0,PLUS_ASSIGN247_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
MINUS_ASSIGN248=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator2487);
if (state.failed) return retval;
if (state.backtracking == 0) {
  MINUS_ASSIGN248_tree=(Object)adaptor.create(MINUS_ASSIGN248);
  adaptor.addChild(root_0,MINUS_ASSIGN248_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
MULT_ASSIGN249=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator2495);
if (state.failed) return retval;
if (state.backtracking == 0) {
MULT_ASSIGN249_tree=(Object)adaptor.create(MULT_ASSIGN249);
adaptor.addChild(root_0,MULT_ASSIGN249_tree);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
DIV_ASSIGN250=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator2503);
if (state.failed) return retval;
if (state.backtracking == 0) {
DIV_ASSIGN250_tree=(Object)adaptor.create(DIV_ASSIGN250);
adaptor.addChild(root_0,DIV_ASSIGN250_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
AND_ASSIGN251=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator2511);
if (state.failed) return retval;
if (state.backtracking == 0) {
AND_ASSIGN251_tree=(Object)adaptor.create(AND_ASSIGN251);
adaptor.addChild(root_0,AND_ASSIGN251_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
OR_ASSIGN252=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator2519);
if (state.failed) return retval;
if (state.backtracking == 0) {
OR_ASSIGN252_tree=(Object)adaptor.create(OR_ASSIGN252);
adaptor.addChild(root_0,OR_ASSIGN252_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
XOR_ASSIGN253=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator2527);
if (state.failed) return retval;
if (state.backtracking == 0) {
XOR_ASSIGN253_tree=(Object)adaptor.create(XOR_ASSIGN253);
adaptor.addChild(root_0,XOR_ASSIGN253_tree);
}
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
MOD_ASSIGN254=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator2535);
if (state.failed) return retval;
if (state.backtracking == 0) {
MOD_ASSIGN254_tree=(Object)adaptor.create(MOD_ASSIGN254);
adaptor.addChild(root_0,MOD_ASSIGN254_tree);
}
}
break;
case 10:
{
LESS255=(Token)match(input,LESS,FOLLOW_LESS_in_assignmentOperator2543);
if (state.failed) return retval;
if (state.backtracking == 0) stream_LESS.add(LESS255);
LESS256=(Token)match(input,LESS,FOLLOW_LESS_in_assignmentOperator2545);
if (state.failed) return retval;
if (state.backtracking == 0) stream_LESS.add(LESS256);
EQUALS_ASSIGN257=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator2547);
if (state.failed) return retval;
if (state.backtracking == 0) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN257);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
adaptor.addChild(root_0,(Object)adaptor.create(SHL_ASSIGN,"<<="));
}
retval.tree=root_0;
}
}
break;
case 11:
{
GREATER258=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2569);
if (state.failed) return retval;
if (state.backtracking == 0) stream_GREATER.add(GREATER258);
GREATER259=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2571);
if (state.failed) return retval;
if (state.backtracking == 0) stream_GREATER.add(GREATER259);
GREATER260=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2573);
if (state.failed) return retval;
if (state.backtracking == 0) stream_GREATER.add(GREATER260);
EQUALS_ASSIGN261=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator2575);
if (state.failed) return retval;
if (state.backtracking == 0) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN261);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
adaptor.addChild(root_0,(Object)adaptor.create(SHRB_ASSIGN,">>>="));
}
retval.tree=root_0;
}
}
break;
case 12:
{
GREATER262=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2596);
if (state.failed) return retval;
if (state.backtracking == 0) stream_GREATER.add(GREATER262);
GREATER263=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2598);
if (state.failed) return retval;
if (state.backtracking == 0) stream_GREATER.add(GREATER263);
EQUALS_ASSIGN264=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator2600);
if (state.failed) return retval;
if (state.backtracking == 0) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN264);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
adaptor.addChild(root_0,(Object)adaptor.create(SHR_ASSIGN,">>="));
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
