{
  try {
    int alt78=12;
    alt78=dfa78.predict(input);
switch (alt78) {
case 1:
{
        match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator3531);
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator3539);
    if (state.failed)     return;
  }
break;
case 3:
{
match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator3547);
if (state.failed) return;
}
break;
case 4:
{
match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator3555);
if (state.failed) return;
}
break;
case 5:
{
match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator3563);
if (state.failed) return;
}
break;
case 6:
{
match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator3571);
if (state.failed) return;
}
break;
case 7:
{
match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator3579);
if (state.failed) return;
}
break;
case 8:
{
match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator3587);
if (state.failed) return;
}
break;
case 9:
{
match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator3595);
if (state.failed) return;
}
break;
case 10:
{
match(input,LESS,FOLLOW_LESS_in_assignmentOperator3603);
if (state.failed) return;
match(input,LESS,FOLLOW_LESS_in_assignmentOperator3605);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator3607);
if (state.failed) return;
}
break;
case 11:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3625);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3627);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3629);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator3631);
if (state.failed) return;
}
break;
case 12:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3647);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3649);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator3651);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
