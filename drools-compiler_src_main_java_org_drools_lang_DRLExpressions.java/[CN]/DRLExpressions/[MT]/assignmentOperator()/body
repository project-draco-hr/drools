{
  try {
    int alt78=12;
    alt78=dfa78.predict(input);
switch (alt78) {
case 1:
{
        match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator3078);
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator3086);
    if (state.failed)     return;
  }
break;
case 3:
{
match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator3094);
if (state.failed) return;
}
break;
case 4:
{
match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator3102);
if (state.failed) return;
}
break;
case 5:
{
match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator3110);
if (state.failed) return;
}
break;
case 6:
{
match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator3118);
if (state.failed) return;
}
break;
case 7:
{
match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator3126);
if (state.failed) return;
}
break;
case 8:
{
match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator3134);
if (state.failed) return;
}
break;
case 9:
{
match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator3142);
if (state.failed) return;
}
break;
case 10:
{
match(input,LESS,FOLLOW_LESS_in_assignmentOperator3150);
if (state.failed) return;
match(input,LESS,FOLLOW_LESS_in_assignmentOperator3152);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator3154);
if (state.failed) return;
}
break;
case 11:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3172);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3174);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3176);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator3178);
if (state.failed) return;
}
break;
case 12:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3194);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator3196);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator3198);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
