{
  DRLExpressions.assignmentOperator_return retval=new DRLExpressions.assignmentOperator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS_ASSIGN243=null;
  Token PLUS_ASSIGN244=null;
  Token MINUS_ASSIGN245=null;
  Token MULT_ASSIGN246=null;
  Token DIV_ASSIGN247=null;
  Token AND_ASSIGN248=null;
  Token OR_ASSIGN249=null;
  Token XOR_ASSIGN250=null;
  Token MOD_ASSIGN251=null;
  Token LESS252=null;
  Token LESS253=null;
  Token EQUALS_ASSIGN254=null;
  Token GREATER255=null;
  Token GREATER256=null;
  Token GREATER257=null;
  Token EQUALS_ASSIGN258=null;
  Token GREATER259=null;
  Token GREATER260=null;
  Token EQUALS_ASSIGN261=null;
  Object EQUALS_ASSIGN243_tree=null;
  Object PLUS_ASSIGN244_tree=null;
  Object MINUS_ASSIGN245_tree=null;
  Object MULT_ASSIGN246_tree=null;
  Object DIV_ASSIGN247_tree=null;
  Object AND_ASSIGN248_tree=null;
  Object OR_ASSIGN249_tree=null;
  Object XOR_ASSIGN250_tree=null;
  Object MOD_ASSIGN251_tree=null;
  Object LESS252_tree=null;
  Object LESS253_tree=null;
  Object EQUALS_ASSIGN254_tree=null;
  Object GREATER255_tree=null;
  Object GREATER256_tree=null;
  Object GREATER257_tree=null;
  Object EQUALS_ASSIGN258_tree=null;
  Object GREATER259_tree=null;
  Object GREATER260_tree=null;
  Object EQUALS_ASSIGN261_tree=null;
  try {
    int alt77=12;
    alt77=dfa77.predict(input);
switch (alt77) {
case 1:
{
        root_0=(Object)adaptor.nil();
        EQUALS_ASSIGN243=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator2472);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          EQUALS_ASSIGN243_tree=(Object)adaptor.create(EQUALS_ASSIGN243);
          adaptor.addChild(root_0,EQUALS_ASSIGN243_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    PLUS_ASSIGN244=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator2480);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      PLUS_ASSIGN244_tree=(Object)adaptor.create(PLUS_ASSIGN244);
      adaptor.addChild(root_0,PLUS_ASSIGN244_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
MINUS_ASSIGN245=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator2488);
if (state.failed) return retval;
if (state.backtracking == 0) {
  MINUS_ASSIGN245_tree=(Object)adaptor.create(MINUS_ASSIGN245);
  adaptor.addChild(root_0,MINUS_ASSIGN245_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
MULT_ASSIGN246=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator2496);
if (state.failed) return retval;
if (state.backtracking == 0) {
MULT_ASSIGN246_tree=(Object)adaptor.create(MULT_ASSIGN246);
adaptor.addChild(root_0,MULT_ASSIGN246_tree);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
DIV_ASSIGN247=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator2504);
if (state.failed) return retval;
if (state.backtracking == 0) {
DIV_ASSIGN247_tree=(Object)adaptor.create(DIV_ASSIGN247);
adaptor.addChild(root_0,DIV_ASSIGN247_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
AND_ASSIGN248=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator2512);
if (state.failed) return retval;
if (state.backtracking == 0) {
AND_ASSIGN248_tree=(Object)adaptor.create(AND_ASSIGN248);
adaptor.addChild(root_0,AND_ASSIGN248_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
OR_ASSIGN249=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator2520);
if (state.failed) return retval;
if (state.backtracking == 0) {
OR_ASSIGN249_tree=(Object)adaptor.create(OR_ASSIGN249);
adaptor.addChild(root_0,OR_ASSIGN249_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
XOR_ASSIGN250=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator2528);
if (state.failed) return retval;
if (state.backtracking == 0) {
XOR_ASSIGN250_tree=(Object)adaptor.create(XOR_ASSIGN250);
adaptor.addChild(root_0,XOR_ASSIGN250_tree);
}
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
MOD_ASSIGN251=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator2536);
if (state.failed) return retval;
if (state.backtracking == 0) {
MOD_ASSIGN251_tree=(Object)adaptor.create(MOD_ASSIGN251);
adaptor.addChild(root_0,MOD_ASSIGN251_tree);
}
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
LESS252=(Token)match(input,LESS,FOLLOW_LESS_in_assignmentOperator2544);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS252_tree=(Object)adaptor.create(LESS252);
adaptor.addChild(root_0,LESS252_tree);
}
LESS253=(Token)match(input,LESS,FOLLOW_LESS_in_assignmentOperator2546);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS253_tree=(Object)adaptor.create(LESS253);
adaptor.addChild(root_0,LESS253_tree);
}
EQUALS_ASSIGN254=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator2548);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN254_tree=(Object)adaptor.create(EQUALS_ASSIGN254);
adaptor.addChild(root_0,EQUALS_ASSIGN254_tree);
}
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
GREATER255=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2565);
if (state.failed) return retval;
if (state.backtracking == 0) {
GREATER255_tree=(Object)adaptor.create(GREATER255);
adaptor.addChild(root_0,GREATER255_tree);
}
GREATER256=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2567);
if (state.failed) return retval;
if (state.backtracking == 0) {
GREATER256_tree=(Object)adaptor.create(GREATER256);
adaptor.addChild(root_0,GREATER256_tree);
}
GREATER257=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2569);
if (state.failed) return retval;
if (state.backtracking == 0) {
GREATER257_tree=(Object)adaptor.create(GREATER257);
adaptor.addChild(root_0,GREATER257_tree);
}
EQUALS_ASSIGN258=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator2571);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN258_tree=(Object)adaptor.create(EQUALS_ASSIGN258);
adaptor.addChild(root_0,EQUALS_ASSIGN258_tree);
}
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
GREATER259=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2586);
if (state.failed) return retval;
if (state.backtracking == 0) {
GREATER259_tree=(Object)adaptor.create(GREATER259);
adaptor.addChild(root_0,GREATER259_tree);
}
GREATER260=(Token)match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator2588);
if (state.failed) return retval;
if (state.backtracking == 0) {
GREATER260_tree=(Object)adaptor.create(GREATER260);
adaptor.addChild(root_0,GREATER260_tree);
}
EQUALS_ASSIGN261=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator2590);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN261_tree=(Object)adaptor.create(EQUALS_ASSIGN261);
adaptor.addChild(root_0,EQUALS_ASSIGN261_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
