{
  DRLExpressions.creator_return retval=new DRLExpressions.creator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.nonWildcardTypeArguments_return nonWildcardTypeArguments175=null;
  DRLExpressions.createdName_return createdName176=null;
  DRLExpressions.arrayCreatorRest_return arrayCreatorRest177=null;
  DRLExpressions.classCreatorRest_return classCreatorRest178=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt54=2;
      int LA54_0=input.LA(1);
      if ((LA54_0 == LESS)) {
        alt54=1;
      }
switch (alt54) {
case 1:
{
          pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator1897);
          nonWildcardTypeArguments175=nonWildcardTypeArguments();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,nonWildcardTypeArguments175.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_createdName_in_creator1900);
  createdName176=createdName();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,createdName176.getTree());
  int alt55=2;
  int LA55_0=input.LA(1);
  if ((LA55_0 == LEFT_SQUARE)) {
    alt55=1;
  }
 else   if ((LA55_0 == LEFT_PAREN)) {
    alt55=2;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",55,0,input);
    throw nvae;
  }
switch (alt55) {
case 1:
{
      pushFollow(FOLLOW_arrayCreatorRest_in_creator1911);
      arrayCreatorRest177=arrayCreatorRest();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,arrayCreatorRest177.getTree());
    }
  break;
case 2:
{
  pushFollow(FOLLOW_classCreatorRest_in_creator1915);
  classCreatorRest178=classCreatorRest();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,classCreatorRest178.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
