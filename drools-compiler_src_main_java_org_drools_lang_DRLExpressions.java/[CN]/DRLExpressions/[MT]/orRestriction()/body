{
  BaseDescr result=null;
  Token lop=null;
  BaseDescr left=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_andRestriction_in_orRestriction1546);
      left=andRestriction();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
      }
      loop31:       do {
        int alt31=2;
        alt31=dfa31.predict(input);
switch (alt31) {
case 1:
{
            lop=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_orRestriction1564);
            if (state.failed)             return result;
            pushFollow(FOLLOW_andRestriction_in_orRestriction1568);
            right=andRestriction();
            state._fsp--;
            if (state.failed)             return result;
            if (state.backtracking == 0) {
              if (buildDescr) {
                ConstraintConnectiveDescr descr=ConstraintConnectiveDescr.newOr();
                descr.addOrMerge(result);
                descr.addOrMerge(right);
                result=descr;
              }
            }
          }
        break;
default :
      break loop31;
  }
}
 while (true);
int alt32=2;
int LA32_0=input.LA(1);
if ((LA32_0 == EOF)) {
  int LA32_1=input.LA(2);
  if ((LA32_1 == EOF)) {
    int LA32_3=input.LA(3);
    if ((LA32_3 == EOF)) {
      alt32=1;
    }
  }
 else   if (((LA32_1 >= AT && LA32_1 <= MOD_ASSIGN) || (LA32_1 >= SEMICOLON && LA32_1 <= RIGHT_PAREN) || LA32_1 == RIGHT_SQUARE || (LA32_1 >= RIGHT_CURLY && LA32_1 <= COMMA) || (LA32_1 >= DOUBLE_AMPER && LA32_1 <= QUESTION) || (LA32_1 >= PIPE && LA32_1 <= XOR) || LA32_1 == ID)) {
    alt32=1;
  }
}
switch (alt32) {
case 1:
{
    match(input,EOF,FOLLOW_EOF_in_orRestriction1588);
    if (state.failed)     return result;
  }
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
