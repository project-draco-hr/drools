{
  BaseDescr result=null;
  Token lop=null;
  BaseDescr left=null;
  AnnotationDescr args=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_andRestriction_in_orRestriction1769);
      left=andRestriction();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
      }
      loop37:       do {
        int alt37=2;
        alt37=dfa37.predict(input);
switch (alt37) {
case 1:
{
            lop=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_orRestriction1791);
            if (state.failed)             return result;
            int alt36=2;
            int LA36_0=input.LA(1);
            if ((LA36_0 == AT)) {
              alt36=1;
            }
switch (alt36) {
case 1:
{
                pushFollow(FOLLOW_fullAnnotation_in_orRestriction1795);
                args=fullAnnotation(null);
                state._fsp--;
                if (state.failed)                 return result;
              }
            break;
        }
        pushFollow(FOLLOW_andRestriction_in_orRestriction1801);
        right=andRestriction();
        state._fsp--;
        if (state.failed)         return result;
        if (state.backtracking == 0) {
          if (buildDescr) {
            ConstraintConnectiveDescr descr=ConstraintConnectiveDescr.newOr();
            descr.addOrMerge(result);
            descr.addOrMerge(right);
            if (args != null) {
              descr.addAnnotation(args);
            }
            result=descr;
          }
        }
      }
    break;
default :
  break loop37;
}
}
 while (true);
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == EOF)) {
int LA38_1=input.LA(2);
if ((LA38_1 == EOF)) {
int LA38_3=input.LA(3);
if ((LA38_3 == EOF)) {
  alt38=1;
}
}
 else if (((LA38_1 >= AT && LA38_1 <= MOD_ASSIGN) || (LA38_1 >= SEMICOLON && LA38_1 <= RIGHT_PAREN) || LA38_1 == RIGHT_SQUARE || (LA38_1 >= RIGHT_CURLY && LA38_1 <= COMMA) || (LA38_1 >= DOUBLE_AMPER && LA38_1 <= QUESTION) || (LA38_1 >= TILDE && LA38_1 <= XOR) || LA38_1 == ID)) {
alt38=1;
}
}
switch (alt38) {
case 1:
{
match(input,EOF,FOLLOW_EOF_in_orRestriction1820);
if (state.failed) return result;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
