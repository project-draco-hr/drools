{
  DRLExpressions.typeList_return retval=new DRLExpressions.typeList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA8=null;
  DRLExpressions.type_return type7=null;
  DRLExpressions.type_return type9=null;
  Object COMMA8_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_type_in_typeList194);
      type7=type();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,type7.getTree());
      loop2:       do {
        int alt2=2;
        int LA2_0=input.LA(1);
        if ((LA2_0 == COMMA)) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            COMMA8=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList197);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA8_tree=(Object)adaptor.create(COMMA8);
              adaptor.addChild(root_0,COMMA8_tree);
            }
            pushFollow(FOLLOW_type_in_typeList199);
            type9=type();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,type9.getTree());
          }
        break;
default :
      break loop2;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
