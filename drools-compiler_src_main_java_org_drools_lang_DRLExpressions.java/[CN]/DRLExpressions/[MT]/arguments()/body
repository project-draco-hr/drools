{
  Token LEFT_PAREN21=null;
  Token RIGHT_PAREN22=null;
  try {
{
      LEFT_PAREN21=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments3569);
      if (state.failed)       return;
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN21,DroolsEditorType.SYMBOL);
      }
      int alt77=2;
      int LA77_0=input.LA(1);
      if ((LA77_0 == FLOAT || (LA77_0 >= HEX && LA77_0 <= DECIMAL) || (LA77_0 >= STRING && LA77_0 <= TIME_INTERVAL) || (LA77_0 >= BOOL && LA77_0 <= NULL) || (LA77_0 >= DECR && LA77_0 <= INCR) || LA77_0 == LESS || LA77_0 == LEFT_PAREN || LA77_0 == LEFT_SQUARE || (LA77_0 >= NEGATION && LA77_0 <= TILDE) || (LA77_0 >= MINUS && LA77_0 <= PLUS) || LA77_0 == ID)) {
        alt77=1;
      }
switch (alt77) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_arguments3581);
          expressionList();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  RIGHT_PAREN22=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments3593);
  if (state.failed)   return;
  if (state.backtracking == 0) {
    helper.emit(RIGHT_PAREN22,DroolsEditorType.SYMBOL);
  }
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
