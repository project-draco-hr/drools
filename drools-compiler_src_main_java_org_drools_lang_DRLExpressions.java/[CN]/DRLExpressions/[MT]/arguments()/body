{
  try {
{
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments2742);
      if (state.failed)       return;
      int alt75=2;
      int LA75_0=input.LA(1);
      if ((LA75_0 == FLOAT || (LA75_0 >= HEX && LA75_0 <= DECIMAL) || LA75_0 == STRING || (LA75_0 >= BOOL && LA75_0 <= NULL) || (LA75_0 >= DECR && LA75_0 <= INCR) || LA75_0 == LESS || LA75_0 == LEFT_PAREN || LA75_0 == LEFT_SQUARE || (LA75_0 >= NEGATION && LA75_0 <= TILDE) || (LA75_0 >= MINUS && LA75_0 <= PLUS) || LA75_0 == ID)) {
        alt75=1;
      }
switch (alt75) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_arguments2744);
          expressionList();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments2747);
  if (state.failed)   return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
