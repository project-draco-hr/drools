{
  DRLExpressions.equalityExpression_return retval=new DRLExpressions.equalityExpression_return();
  retval.start=input.LT(1);
  Token op=null;
  BaseDescr left=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression892);
      left=instanceOfExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        if (buildDescr && state.backtracking == 0) {
          retval.result=left;
        }
      }
      loop24:       do {
        int alt24=2;
        int LA24_0=input.LA(1);
        if (((LA24_0 >= EQUALS && LA24_0 <= NOT_EQUALS))) {
          alt24=1;
        }
switch (alt24) {
case 1:
{
            int alt23=2;
            int LA23_0=input.LA(1);
            if ((LA23_0 == EQUALS)) {
              alt23=1;
            }
 else             if ((LA23_0 == NOT_EQUALS)) {
              alt23=2;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("",23,0,input);
              throw nvae;
            }
switch (alt23) {
case 1:
{
                op=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_equalityExpression904);
                if (state.failed)                 return retval;
              }
            break;
case 2:
{
            op=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_equalityExpression910);
            if (state.failed)             return retval;
          }
        break;
    }
    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression916);
    right=instanceOfExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      if (buildDescr && state.backtracking == 0) {
        retval.result=new RelationalExprDescr((op != null ? op.getText() : null),left,right);
      }
    }
  }
break;
default :
break loop24;
}
}
 while (true);
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
