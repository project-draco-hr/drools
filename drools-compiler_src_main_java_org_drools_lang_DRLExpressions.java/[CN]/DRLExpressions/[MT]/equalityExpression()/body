{
  DRLExpressions.equalityExpression_return retval=new DRLExpressions.equalityExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS55=null;
  Token NOT_EQUALS56=null;
  DRLExpressions.instanceOfExpression_return ie=null;
  DRLExpressions.instanceOfExpression_return instanceOfExpression57=null;
  Object EQUALS55_tree=null;
  Object NOT_EQUALS56_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression710);
      ie=instanceOfExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,ie.getTree());
      loop23:       do {
        int alt23=2;
        int LA23_0=input.LA(1);
        if (((LA23_0 >= EQUALS && LA23_0 <= NOT_EQUALS))) {
          alt23=1;
        }
switch (alt23) {
case 1:
{
            int alt22=2;
            int LA22_0=input.LA(1);
            if ((LA22_0 == EQUALS)) {
              alt22=1;
            }
 else             if ((LA22_0 == NOT_EQUALS)) {
              alt22=2;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("",22,0,input);
              throw nvae;
            }
switch (alt22) {
case 1:
{
                EQUALS55=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_equalityExpression716);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  EQUALS55_tree=(Object)adaptor.create(EQUALS55);
                  root_0=(Object)adaptor.becomeRoot(EQUALS55_tree,root_0);
                }
              }
            break;
case 2:
{
            NOT_EQUALS56=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_equalityExpression721);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              NOT_EQUALS56_tree=(Object)adaptor.create(NOT_EQUALS56);
              root_0=(Object)adaptor.becomeRoot(NOT_EQUALS56_tree,root_0);
            }
          }
        break;
    }
    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression726);
    instanceOfExpression57=instanceOfExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,instanceOfExpression57.getTree());
  }
break;
default :
break loop23;
}
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
retval.se1=(ie != null ? ie.se1 : null);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
