{
  Token key=null;
  try {
    int alt71=2;
    int LA71_0=input.LA(1);
    if ((LA71_0 == ID)) {
      int LA71_1=input.LA(2);
      if ((LA71_1 == EQUALS_ASSIGN) && (synpred46_DRLExpressions())) {
        alt71=1;
      }
 else       if (((LA71_1 >= DECR && LA71_1 <= INCR) || (LA71_1 >= EQUALS && LA71_1 <= LESS) || (LA71_1 >= LEFT_PAREN && LA71_1 <= LEFT_SQUARE)|| (LA71_1 >= COMMA && LA71_1 <= QUESTION)|| (LA71_1 >= PIPE && LA71_1 <= PLUS)|| (LA71_1 >= ID && LA71_1 <= DIV))) {
        alt71=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",71,1,input);
        throw nvae;
      }
    }
 else     if ((LA71_0 == FLOAT || (LA71_0 >= HEX && LA71_0 <= DECIMAL) || (LA71_0 >= STRING && LA71_0 <= TimePeriod) || (LA71_0 >= BOOL && LA71_0 <= AT) || (LA71_0 >= DECR && LA71_0 <= INCR) || LA71_0 == LESS || LA71_0 == LEFT_PAREN || LA71_0 == LEFT_SQUARE || LA71_0 == LEFT_CURLY || (LA71_0 >= NEGATION && LA71_0 <= TILDE) || (LA71_0 >= MINUS && LA71_0 <= PLUS))) {
      alt71=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",71,0,input);
      throw nvae;
    }
switch (alt71) {
case 1:
{
        key=(Token)match(input,ID,FOLLOW_ID_in_elementValuePair2344);
        if (state.failed)         return;
        match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_elementValuePair2346);
        if (state.failed)         return;
        pushFollow(FOLLOW_elementValue_in_elementValuePair2350);
        elementValue();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_elementValue_in_elementValuePair2358);
    elementValue();
    state._fsp--;
    if (state.failed)     return;
  }
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
