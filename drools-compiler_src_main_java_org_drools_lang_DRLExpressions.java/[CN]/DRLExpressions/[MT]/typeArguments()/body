{
  DRLExpressions.typeArguments_return retval=new DRLExpressions.typeArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS20=null;
  Token COMMA22=null;
  Token GREATER24=null;
  DRLExpressions.typeArgument_return typeArgument21=null;
  DRLExpressions.typeArgument_return typeArgument23=null;
  Object LESS20_tree=null;
  Object COMMA22_tree=null;
  Object GREATER24_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS20=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments312);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS20_tree=(Object)adaptor.create(LESS20);
        adaptor.addChild(root_0,LESS20_tree);
      }
      pushFollow(FOLLOW_typeArgument_in_typeArguments314);
      typeArgument21=typeArgument();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeArgument21.getTree());
      loop9:       do {
        int alt9=2;
        int LA9_0=input.LA(1);
        if ((LA9_0 == COMMA)) {
          alt9=1;
        }
switch (alt9) {
case 1:
{
            COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments317);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA22_tree=(Object)adaptor.create(COMMA22);
              adaptor.addChild(root_0,COMMA22_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments319);
            typeArgument23=typeArgument();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,typeArgument23.getTree());
          }
        break;
default :
      break loop9;
  }
}
 while (true);
GREATER24=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments323);
if (state.failed) return retval;
if (state.backtracking == 0) {
  GREATER24_tree=(Object)adaptor.create(GREATER24);
  adaptor.addChild(root_0,GREATER24_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
