{
  DRLExpressions.mapEntry_return retval=new DRLExpressions.mapEntry_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON165=null;
  DRLExpressions.expression_return expression164=null;
  DRLExpressions.expression_return expression166=null;
  Object COLON165_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_expression_in_mapEntry1784);
      expression164=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression164.getTree());
      COLON165=(Token)match(input,COLON,FOLLOW_COLON_in_mapEntry1786);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        COLON165_tree=(Object)adaptor.create(COLON165);
        adaptor.addChild(root_0,COLON165_tree);
      }
      pushFollow(FOLLOW_expression_in_mapEntry1788);
      expression166=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression166.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    throw re;
  }
 finally {
  }
  return retval;
}
