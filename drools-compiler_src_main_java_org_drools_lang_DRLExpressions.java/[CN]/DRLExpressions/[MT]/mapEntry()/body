{
  DRLExpressions.mapEntry_return retval=new DRLExpressions.mapEntry_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON162=null;
  DRLExpressions.expression_return expression161=null;
  DRLExpressions.expression_return expression163=null;
  Object COLON162_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_expression_in_mapEntry1785);
      expression161=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression161.getTree());
      COLON162=(Token)match(input,COLON,FOLLOW_COLON_in_mapEntry1787);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        COLON162_tree=(Object)adaptor.create(COLON162);
        adaptor.addChild(root_0,COLON162_tree);
      }
      pushFollow(FOLLOW_expression_in_mapEntry1789);
      expression163=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression163.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    throw re;
  }
 finally {
  }
  return retval;
}
