{
  java.util.List<String> args=null;
  java.util.List<String> el=null;
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_squareArguments3541);
      if (state.failed)       return args;
      int alt76=2;
      int LA76_0=input.LA(1);
      if ((LA76_0 == FLOAT || (LA76_0 >= HEX && LA76_0 <= DECIMAL) || (LA76_0 >= STRING && LA76_0 <= TIME_INTERVAL) || (LA76_0 >= BOOL && LA76_0 <= NULL) || (LA76_0 >= DECR && LA76_0 <= INCR) || LA76_0 == LESS || LA76_0 == LEFT_PAREN || LA76_0 == LEFT_SQUARE || (LA76_0 >= NEGATION && LA76_0 <= TILDE) || (LA76_0 >= MINUS && LA76_0 <= PLUS) || LA76_0 == ID)) {
        alt76=1;
      }
switch (alt76) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_squareArguments3546);
          el=expressionList();
          state._fsp--;
          if (state.failed)           return args;
          if (state.backtracking == 0) {
            args=el;
          }
        }
      break;
  }
  match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_squareArguments3552);
  if (state.failed)   return args;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return args;
}
