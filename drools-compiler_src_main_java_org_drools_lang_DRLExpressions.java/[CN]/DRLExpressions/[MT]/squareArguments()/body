{
  DRLExpressions.squareArguments_return retval=new DRLExpressions.squareArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE234=null;
  Token RIGHT_SQUARE236=null;
  DRLExpressions.expressionList_return expressionList235=null;
  Object LEFT_SQUARE234_tree=null;
  Object RIGHT_SQUARE236_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE234=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_squareArguments2404);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE234_tree=(Object)adaptor.create(LEFT_SQUARE234);
        adaptor.addChild(root_0,LEFT_SQUARE234_tree);
      }
      int alt74=2;
      int LA74_0=input.LA(1);
      if ((LA74_0 == FLOAT || (LA74_0 >= HEX && LA74_0 <= DECIMAL) || LA74_0 == STRING || (LA74_0 >= BOOL && LA74_0 <= NULL) || (LA74_0 >= DECR && LA74_0 <= INCR) || LA74_0 == LESS || LA74_0 == LEFT_PAREN || LA74_0 == LEFT_SQUARE || (LA74_0 >= NEGATION && LA74_0 <= TILDE) || (LA74_0 >= MINUS && LA74_0 <= PLUS) || LA74_0 == ID)) {
        alt74=1;
      }
switch (alt74) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_squareArguments2406);
          expressionList235=expressionList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expressionList235.getTree());
        }
      break;
  }
  RIGHT_SQUARE236=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_squareArguments2409);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    RIGHT_SQUARE236_tree=(Object)adaptor.create(RIGHT_SQUARE236);
    adaptor.addChild(root_0,RIGHT_SQUARE236_tree);
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
