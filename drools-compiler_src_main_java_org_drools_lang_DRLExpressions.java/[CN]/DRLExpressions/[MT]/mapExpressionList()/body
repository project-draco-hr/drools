{
  DRLExpressions.mapExpressionList_return retval=new DRLExpressions.mapExpressionList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA159=null;
  DRLExpressions.mapEntry_return mapEntry158=null;
  DRLExpressions.mapEntry_return mapEntry160=null;
  Object COMMA159_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_mapEntry_in_mapExpressionList1757);
      mapEntry158=mapEntry();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,mapEntry158.getTree());
      loop50:       do {
        int alt50=2;
        int LA50_0=input.LA(1);
        if ((LA50_0 == COMMA)) {
          alt50=1;
        }
switch (alt50) {
case 1:
{
            COMMA159=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapExpressionList1760);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA159_tree=(Object)adaptor.create(COMMA159);
              adaptor.addChild(root_0,COMMA159_tree);
            }
            pushFollow(FOLLOW_mapEntry_in_mapExpressionList1762);
            mapEntry160=mapEntry();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,mapEntry160.getTree());
          }
        break;
default :
      break loop50;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
