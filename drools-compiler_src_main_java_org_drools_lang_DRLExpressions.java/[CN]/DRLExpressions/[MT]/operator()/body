{
  DRLExpressions.operator_return retval=new DRLExpressions.operator_return();
  retval.start=input.LT(1);
  try {
{
      int alt30=3;
      int LA30_0=input.LA(1);
      if ((LA30_0 == EQUALS)) {
        alt30=1;
      }
 else       if ((LA30_0 == NOT_EQUALS)) {
        alt30=2;
      }
 else       if (((LA30_0 >= GREATER_EQUALS && LA30_0 <= LESS))) {
        alt30=3;
      }
 else       if ((LA30_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
        alt30=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",30,0,input);
        throw nvae;
      }
switch (alt30) {
case 1:
{
          match(input,EQUALS,FOLLOW_EQUALS_in_operator1128);
          if (state.failed)           return retval;
        }
      break;
case 2:
{
      match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_operator1136);
      if (state.failed)       return retval;
    }
  break;
case 3:
{
  pushFollow(FOLLOW_relationalOp_in_operator1144);
  relationalOp();
  state._fsp--;
  if (state.failed)   return retval;
}
break;
}
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
