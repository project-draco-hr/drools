{
  DRLExpressions.operator_return retval=new DRLExpressions.operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS73=null;
  Token NOT_EQUALS74=null;
  DRLExpressions.relationalOp_return relationalOp75=null;
  Object EQUALS73_tree=null;
  Object NOT_EQUALS74_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt29=3;
      int LA29_0=input.LA(1);
      if ((LA29_0 == EQUALS)) {
        alt29=1;
      }
 else       if ((LA29_0 == NOT_EQUALS)) {
        alt29=2;
      }
 else       if (((LA29_0 >= GREATER_EQUALS && LA29_0 <= LESS))) {
        alt29=3;
      }
 else       if ((LA29_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
        alt29=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",29,0,input);
        throw nvae;
      }
switch (alt29) {
case 1:
{
          EQUALS73=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_operator930);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            EQUALS73_tree=(Object)adaptor.create(EQUALS73);
            adaptor.addChild(root_0,EQUALS73_tree);
          }
        }
      break;
case 2:
{
      NOT_EQUALS74=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_operator938);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        NOT_EQUALS74_tree=(Object)adaptor.create(NOT_EQUALS74);
        adaptor.addChild(root_0,NOT_EQUALS74_tree);
      }
    }
  break;
case 3:
{
  pushFollow(FOLLOW_relationalOp_in_operator946);
  relationalOp75=relationalOp();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,relationalOp75.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
