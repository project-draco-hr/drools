{
  BaseDescr result=null;
  BaseDescr left=null;
  try {
    int alt38=5;
switch (input.LA(1)) {
case PLUS:
{
        alt38=1;
      }
    break;
case MINUS:
{
    alt38=2;
  }
break;
case INCR:
{
alt38=3;
}
break;
case DECR:
{
alt38=4;
}
break;
case FLOAT:
case HEX:
case DECIMAL:
case STRING:
case BOOL:
case NULL:
case LESS:
case LEFT_PAREN:
case LEFT_SQUARE:
case NEGATION:
case TILDE:
case ID:
{
alt38=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return result;
}
NoViableAltException nvae=new NoViableAltException("",38,0,input);
throw nvae;
}
switch (alt38) {
case 1:
{
match(input,PLUS,FOLLOW_PLUS_in_unaryExpression1470);
if (state.failed) return result;
pushFollow(FOLLOW_unaryExpression_in_unaryExpression1472);
unaryExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 2:
{
match(input,MINUS,FOLLOW_MINUS_in_unaryExpression1480);
if (state.failed) return result;
pushFollow(FOLLOW_unaryExpression_in_unaryExpression1482);
unaryExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 3:
{
match(input,INCR,FOLLOW_INCR_in_unaryExpression1492);
if (state.failed) return result;
pushFollow(FOLLOW_primary_in_unaryExpression1494);
primary();
state._fsp--;
if (state.failed) return result;
}
break;
case 4:
{
match(input,DECR,FOLLOW_DECR_in_unaryExpression1504);
if (state.failed) return result;
pushFollow(FOLLOW_primary_in_unaryExpression1506);
primary();
state._fsp--;
if (state.failed) return result;
}
break;
case 5:
{
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression1518);
left=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
if (buildDescr && state.backtracking == 0) {
result=left;
}
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
