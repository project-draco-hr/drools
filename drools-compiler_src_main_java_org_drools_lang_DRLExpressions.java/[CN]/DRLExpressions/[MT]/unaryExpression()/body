{
  try {
    int alt34=5;
switch (input.LA(1)) {
case PLUS:
{
        alt34=1;
      }
    break;
case MINUS:
{
    alt34=2;
  }
break;
case INCR:
{
alt34=3;
}
break;
case DECR:
{
alt34=4;
}
break;
case FLOAT:
case HEX:
case DECIMAL:
case STRING:
case BOOL:
case NULL:
case LESS:
case LEFT_PAREN:
case LEFT_SQUARE:
case NEGATION:
case TILDE:
case ID:
{
alt34=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",34,0,input);
throw nvae;
}
switch (alt34) {
case 1:
{
match(input,PLUS,FOLLOW_PLUS_in_unaryExpression947);
if (state.failed) return;
pushFollow(FOLLOW_unaryExpression_in_unaryExpression949);
unaryExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
match(input,MINUS,FOLLOW_MINUS_in_unaryExpression957);
if (state.failed) return;
pushFollow(FOLLOW_unaryExpression_in_unaryExpression959);
unaryExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 3:
{
match(input,INCR,FOLLOW_INCR_in_unaryExpression969);
if (state.failed) return;
pushFollow(FOLLOW_primary_in_unaryExpression971);
primary();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
match(input,DECR,FOLLOW_DECR_in_unaryExpression981);
if (state.failed) return;
pushFollow(FOLLOW_primary_in_unaryExpression983);
primary();
state._fsp--;
if (state.failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression993);
unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
