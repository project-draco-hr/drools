{
  DRLExpressions.unaryExpression_return retval=new DRLExpressions.unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS101=null;
  Token MINUS103=null;
  Token INCR105=null;
  Token DECR107=null;
  DRLExpressions.unaryExpression_return unaryExpression102=null;
  DRLExpressions.unaryExpression_return unaryExpression104=null;
  DRLExpressions.primary_return primary106=null;
  DRLExpressions.primary_return primary108=null;
  DRLExpressions.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus109=null;
  Object PLUS101_tree=null;
  Object MINUS103_tree=null;
  Object INCR105_tree=null;
  Object DECR107_tree=null;
  try {
    int alt37=5;
switch (input.LA(1)) {
case PLUS:
{
        alt37=1;
      }
    break;
case MINUS:
{
    alt37=2;
  }
break;
case INCR:
{
alt37=3;
}
break;
case DECR:
{
alt37=4;
}
break;
case FLOAT:
case HEX:
case DECIMAL:
case STRING:
case BOOL:
case NULL:
case LESS:
case LEFT_PAREN:
case LEFT_SQUARE:
case NEGATION:
case TILDE:
case ID:
{
alt37=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",37,0,input);
throw nvae;
}
switch (alt37) {
case 1:
{
root_0=(Object)adaptor.nil();
PLUS101=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression1230);
if (state.failed) return retval;
if (state.backtracking == 0) {
PLUS101_tree=(Object)adaptor.create(PLUS101);
adaptor.addChild(root_0,PLUS101_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression1232);
unaryExpression102=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression102.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
MINUS103=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression1240);
if (state.failed) return retval;
if (state.backtracking == 0) {
MINUS103_tree=(Object)adaptor.create(MINUS103);
adaptor.addChild(root_0,MINUS103_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression1242);
unaryExpression104=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression104.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
INCR105=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression1252);
if (state.failed) return retval;
if (state.backtracking == 0) {
INCR105_tree=(Object)adaptor.create(INCR105);
adaptor.addChild(root_0,INCR105_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression1254);
primary106=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary106.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
DECR107=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression1264);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECR107_tree=(Object)adaptor.create(DECR107);
adaptor.addChild(root_0,DECR107_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression1266);
primary108=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary108.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression1276);
unaryExpressionNotPlusMinus109=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus109.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
