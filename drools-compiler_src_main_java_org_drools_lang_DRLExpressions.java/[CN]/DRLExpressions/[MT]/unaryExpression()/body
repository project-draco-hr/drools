{
  BaseDescr result=null;
  DRLExpressions.unaryExpressionNotPlusMinus_return left=null;
  try {
    int alt39=5;
switch (input.LA(1)) {
case PLUS:
{
        alt39=1;
      }
    break;
case MINUS:
{
    alt39=2;
  }
break;
case INCR:
{
alt39=3;
}
break;
case DECR:
{
alt39=4;
}
break;
case FLOAT:
case HEX:
case DECIMAL:
case STRING:
case TIME_INTERVAL:
case BOOL:
case NULL:
case LESS:
case LEFT_PAREN:
case LEFT_SQUARE:
case NEGATION:
case TILDE:
case ID:
{
alt39=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return result;
}
NoViableAltException nvae=new NoViableAltException("",39,0,input);
throw nvae;
}
switch (alt39) {
case 1:
{
match(input,PLUS,FOLLOW_PLUS_in_unaryExpression1620);
if (state.failed) return result;
pushFollow(FOLLOW_unaryExpression_in_unaryExpression1622);
unaryExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 2:
{
match(input,MINUS,FOLLOW_MINUS_in_unaryExpression1630);
if (state.failed) return result;
pushFollow(FOLLOW_unaryExpression_in_unaryExpression1632);
unaryExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 3:
{
match(input,INCR,FOLLOW_INCR_in_unaryExpression1642);
if (state.failed) return result;
pushFollow(FOLLOW_primary_in_unaryExpression1644);
primary();
state._fsp--;
if (state.failed) return result;
}
break;
case 4:
{
match(input,DECR,FOLLOW_DECR_in_unaryExpression1654);
if (state.failed) return result;
pushFollow(FOLLOW_primary_in_unaryExpression1656);
primary();
state._fsp--;
if (state.failed) return result;
}
break;
case 5:
{
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression1668);
left=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
if (buildDescr && state.backtracking == 0) {
result=(left != null ? left.result : null);
}
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
