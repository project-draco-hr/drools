{
  DRLExpressions.unaryExpression_return retval=new DRLExpressions.unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS98=null;
  Token MINUS100=null;
  Token INCR102=null;
  Token DECR104=null;
  DRLExpressions.unaryExpression_return unaryExpression99=null;
  DRLExpressions.unaryExpression_return unaryExpression101=null;
  DRLExpressions.primary_return primary103=null;
  DRLExpressions.primary_return primary105=null;
  DRLExpressions.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus106=null;
  Object PLUS98_tree=null;
  Object MINUS100_tree=null;
  Object INCR102_tree=null;
  Object DECR104_tree=null;
  try {
    int alt37=5;
switch (input.LA(1)) {
case PLUS:
{
        alt37=1;
      }
    break;
case MINUS:
{
    alt37=2;
  }
break;
case INCR:
{
alt37=3;
}
break;
case DECR:
{
alt37=4;
}
break;
case FLOAT:
case HEX:
case DECIMAL:
case STRING:
case BOOL:
case NULL:
case LESS:
case LEFT_PAREN:
case LEFT_SQUARE:
case NEGATION:
case TILDE:
case ID:
{
alt37=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",37,0,input);
throw nvae;
}
switch (alt37) {
case 1:
{
root_0=(Object)adaptor.nil();
PLUS98=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression1228);
if (state.failed) return retval;
if (state.backtracking == 0) {
PLUS98_tree=(Object)adaptor.create(PLUS98);
adaptor.addChild(root_0,PLUS98_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression1230);
unaryExpression99=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression99.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
MINUS100=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression1238);
if (state.failed) return retval;
if (state.backtracking == 0) {
MINUS100_tree=(Object)adaptor.create(MINUS100);
adaptor.addChild(root_0,MINUS100_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression1240);
unaryExpression101=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression101.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
INCR102=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression1250);
if (state.failed) return retval;
if (state.backtracking == 0) {
INCR102_tree=(Object)adaptor.create(INCR102);
adaptor.addChild(root_0,INCR102_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression1252);
primary103=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary103.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
DECR104=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression1262);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECR104_tree=(Object)adaptor.create(DECR104);
adaptor.addChild(root_0,DECR104_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression1264);
primary105=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary105.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression1274);
unaryExpressionNotPlusMinus106=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus106.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
