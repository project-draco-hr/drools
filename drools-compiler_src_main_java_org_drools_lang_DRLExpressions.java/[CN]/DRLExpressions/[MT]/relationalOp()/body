{
  DRLExpressions.relationalOp_return retval=new DRLExpressions.relationalOp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS_EQUALS76=null;
  Token GREATER_EQUALS77=null;
  Token LESS78=null;
  Token GREATER79=null;
  DRLExpressions.not_key_return not_key80=null;
  DRLExpressions.neg_operator_key_return neg_operator_key81=null;
  DRLExpressions.squareArguments_return squareArguments82=null;
  DRLExpressions.operator_key_return operator_key83=null;
  DRLExpressions.squareArguments_return squareArguments84=null;
  Object LESS_EQUALS76_tree=null;
  Object GREATER_EQUALS77_tree=null;
  Object LESS78_tree=null;
  Object GREATER79_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt32=6;
      int LA32_0=input.LA(1);
      if ((LA32_0 == LESS_EQUALS)) {
        alt32=1;
      }
 else       if ((LA32_0 == GREATER_EQUALS)) {
        alt32=2;
      }
 else       if ((LA32_0 == LESS)) {
        alt32=3;
      }
 else       if ((LA32_0 == GREATER)) {
        alt32=4;
      }
 else       if ((LA32_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
        int LA32_5=input.LA(2);
        if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
          alt32=5;
        }
 else         if ((((helper.isPluggableEvaluator(false))))) {
          alt32=6;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",32,5,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",32,0,input);
        throw nvae;
      }
switch (alt32) {
case 1:
{
          LESS_EQUALS76=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_relationalOp966);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            LESS_EQUALS76_tree=(Object)adaptor.create(LESS_EQUALS76);
            adaptor.addChild(root_0,LESS_EQUALS76_tree);
          }
        }
      break;
case 2:
{
      GREATER_EQUALS77=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_relationalOp974);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER_EQUALS77_tree=(Object)adaptor.create(GREATER_EQUALS77);
        adaptor.addChild(root_0,GREATER_EQUALS77_tree);
      }
    }
  break;
case 3:
{
  LESS78=(Token)match(input,LESS,FOLLOW_LESS_in_relationalOp983);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    LESS78_tree=(Object)adaptor.create(LESS78);
    adaptor.addChild(root_0,LESS78_tree);
  }
}
break;
case 4:
{
GREATER79=(Token)match(input,GREATER,FOLLOW_GREATER_in_relationalOp992);
if (state.failed) return retval;
if (state.backtracking == 0) {
GREATER79_tree=(Object)adaptor.create(GREATER79);
adaptor.addChild(root_0,GREATER79_tree);
}
}
break;
case 5:
{
pushFollow(FOLLOW_not_key_in_relationalOp1000);
not_key80=not_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,not_key80.getTree());
pushFollow(FOLLOW_neg_operator_key_in_relationalOp1002);
neg_operator_key81=neg_operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(neg_operator_key81.getTree(),root_0);
int alt30=2;
alt30=dfa30.predict(input);
switch (alt30) {
case 1:
{
pushFollow(FOLLOW_squareArguments_in_relationalOp1011);
squareArguments82=squareArguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,squareArguments82.getTree());
}
break;
}
}
break;
case 6:
{
pushFollow(FOLLOW_operator_key_in_relationalOp1021);
operator_key83=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(operator_key83.getTree(),root_0);
int alt31=2;
alt31=dfa31.predict(input);
switch (alt31) {
case 1:
{
pushFollow(FOLLOW_squareArguments_in_relationalOp1031);
squareArguments84=squareArguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,squareArguments84.getTree());
}
break;
}
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
