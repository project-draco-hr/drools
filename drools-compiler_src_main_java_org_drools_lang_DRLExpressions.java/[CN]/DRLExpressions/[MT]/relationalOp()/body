{
  try {
{
      int alt29=6;
      int LA29_0=input.LA(1);
      if ((LA29_0 == LESS_EQUALS)) {
        alt29=1;
      }
 else       if ((LA29_0 == GREATER_EQUALS)) {
        alt29=2;
      }
 else       if ((LA29_0 == LESS)) {
        alt29=3;
      }
 else       if ((LA29_0 == GREATER)) {
        alt29=4;
      }
 else       if ((LA29_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
        int LA29_5=input.LA(2);
        if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
          alt29=5;
        }
 else         if ((((helper.isPluggableEvaluator(false))))) {
          alt29=6;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return;
          }
          NoViableAltException nvae=new NoViableAltException("",29,5,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",29,0,input);
        throw nvae;
      }
switch (alt29) {
case 1:
{
          match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_relationalOp754);
          if (state.failed)           return;
        }
      break;
case 2:
{
      match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_relationalOp762);
      if (state.failed)       return;
    }
  break;
case 3:
{
  match(input,LESS,FOLLOW_LESS_in_relationalOp771);
  if (state.failed)   return;
}
break;
case 4:
{
match(input,GREATER,FOLLOW_GREATER_in_relationalOp780);
if (state.failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_not_key_in_relationalOp788);
not_key();
state._fsp--;
if (state.failed) return;
pushFollow(FOLLOW_neg_operator_key_in_relationalOp790);
neg_operator_key();
state._fsp--;
if (state.failed) return;
}
break;
case 6:
{
pushFollow(FOLLOW_operator_key_in_relationalOp798);
operator_key();
state._fsp--;
if (state.failed) return;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
