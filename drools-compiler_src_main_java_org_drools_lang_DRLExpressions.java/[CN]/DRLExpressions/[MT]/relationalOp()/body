{
  DRLExpressions.relationalOp_return retval=new DRLExpressions.relationalOp_return();
  retval.start=input.LT(1);
  Token op=null;
  DRLExpressions.operator_key_return cop=null;
  java.util.List<String> sa=null;
  try {
{
      int alt5=6;
      int LA5_0=input.LA(1);
      if ((LA5_0 == LESS_EQUALS)) {
        alt5=1;
      }
 else       if ((LA5_0 == GREATER_EQUALS)) {
        alt5=2;
      }
 else       if ((LA5_0 == LESS)) {
        alt5=3;
      }
 else       if ((LA5_0 == GREATER)) {
        alt5=4;
      }
 else       if ((LA5_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
        int LA5_5=input.LA(2);
        if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
          alt5=5;
        }
 else         if ((((helper.isPluggableEvaluator(false))))) {
          alt5=6;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",5,5,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",5,0,input);
        throw nvae;
      }
switch (alt5) {
case 1:
{
          op=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_relationalOp284);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            retval.negated=false;
            retval.opr=(op != null ? op.getText() : null);
            retval.params=null;
          }
        }
      break;
case 2:
{
      op=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_relationalOp300);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        retval.negated=false;
        retval.opr=(op != null ? op.getText() : null);
        retval.params=null;
      }
    }
  break;
case 3:
{
  op=(Token)match(input,LESS,FOLLOW_LESS_in_relationalOp313);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    retval.negated=false;
    retval.opr=(op != null ? op.getText() : null);
    retval.params=null;
  }
}
break;
case 4:
{
op=(Token)match(input,GREATER,FOLLOW_GREATER_in_relationalOp336);
if (state.failed) return retval;
if (state.backtracking == 0) {
retval.negated=false;
retval.opr=(op != null ? op.getText() : null);
retval.params=null;
}
}
break;
case 5:
{
pushFollow(FOLLOW_not_key_in_relationalOp354);
not_key();
state._fsp--;
if (state.failed) return retval;
pushFollow(FOLLOW_neg_operator_key_in_relationalOp358);
neg_operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) {
retval.negated=true;
retval.opr=(cop != null ? input.toString(cop.start,cop.stop) : null);
}
int alt3=2;
alt3=dfa3.predict(input);
switch (alt3) {
case 1:
{
pushFollow(FOLLOW_squareArguments_in_relationalOp376);
sa=squareArguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) {
retval.params=sa;
}
}
break;
}
}
break;
case 6:
{
pushFollow(FOLLOW_operator_key_in_relationalOp391);
cop=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) {
retval.negated=false;
retval.opr=(cop != null ? input.toString(cop.start,cop.stop) : null);
}
int alt4=2;
alt4=dfa4.predict(input);
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_squareArguments_in_relationalOp410);
sa=squareArguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) {
retval.params=sa;
}
}
break;
}
}
break;
}
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
