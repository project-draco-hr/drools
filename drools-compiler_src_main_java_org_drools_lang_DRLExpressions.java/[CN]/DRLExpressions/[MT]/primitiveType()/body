{
  DRLExpressions.primitiveType_return retval=new DRLExpressions.primitiveType_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.boolean_key_return boolean_key126=null;
  DRLExpressions.char_key_return char_key127=null;
  DRLExpressions.byte_key_return byte_key128=null;
  DRLExpressions.short_key_return short_key129=null;
  DRLExpressions.int_key_return int_key130=null;
  DRLExpressions.long_key_return long_key131=null;
  DRLExpressions.float_key_return float_key132=null;
  DRLExpressions.double_key_return double_key133=null;
  try {
    int alt42=8;
    alt42=dfa42.predict(input);
switch (alt42) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_boolean_key_in_primitiveType1434);
        boolean_key126=boolean_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,boolean_key126.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_char_key_in_primitiveType1442);
    char_key127=char_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,char_key127.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_byte_key_in_primitiveType1450);
byte_key128=byte_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,byte_key128.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_short_key_in_primitiveType1458);
short_key129=short_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,short_key129.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_int_key_in_primitiveType1466);
int_key130=int_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,int_key130.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_long_key_in_primitiveType1474);
long_key131=long_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,long_key131.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_float_key_in_primitiveType1482);
float_key132=float_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,float_key132.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_double_key_in_primitiveType1490);
double_key133=double_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,double_key133.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
