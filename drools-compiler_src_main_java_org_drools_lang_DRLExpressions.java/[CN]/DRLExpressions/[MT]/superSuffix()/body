{
  DRLExpressions.superSuffix_return retval=new DRLExpressions.superSuffix_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT234=null;
  Token ID235=null;
  DRLExpressions.arguments_return arguments233=null;
  DRLExpressions.arguments_return arguments236=null;
  Object DOT234_tree=null;
  Object ID235_tree=null;
  try {
    int alt73=2;
    int LA73_0=input.LA(1);
    if ((LA73_0 == LEFT_PAREN)) {
      alt73=1;
    }
 else     if ((LA73_0 == DOT)) {
      alt73=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",73,0,input);
      throw nvae;
    }
switch (alt73) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_arguments_in_superSuffix2361);
        arguments233=arguments();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arguments233.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    DOT234=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix2372);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      DOT234_tree=(Object)adaptor.create(DOT234);
      adaptor.addChild(root_0,DOT234_tree);
    }
    ID235=(Token)match(input,ID,FOLLOW_ID_in_superSuffix2374);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID235_tree=(Object)adaptor.create(ID235);
      adaptor.addChild(root_0,ID235_tree);
    }
    int alt72=2;
    alt72=dfa72.predict(input);
switch (alt72) {
case 1:
{
        pushFollow(FOLLOW_arguments_in_superSuffix2383);
        arguments236=arguments();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arguments236.getTree());
      }
    break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
