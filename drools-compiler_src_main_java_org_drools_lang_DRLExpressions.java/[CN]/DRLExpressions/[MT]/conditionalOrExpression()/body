{
  try {
{
      pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression408);
      conditionalAndExpression();
      state._fsp--;
      if (state.failed)       return;
      loop16:       do {
        int alt16=2;
        int LA16_0=input.LA(1);
        if ((LA16_0 == DOUBLE_PIPE)) {
          int LA16_2=input.LA(2);
          if ((LA16_2 == FLOAT || (LA16_2 >= HEX && LA16_2 <= DECIMAL) || LA16_2 == STRING || (LA16_2 >= BOOL && LA16_2 <= NULL) || (LA16_2 >= DECR && LA16_2 <= INCR) || (LA16_2 >= EQUALS && LA16_2 <= LESS) || LA16_2 == LEFT_PAREN || LA16_2 == LEFT_SQUARE || (LA16_2 >= NEGATION && LA16_2 <= TILDE) || (LA16_2 >= MINUS && LA16_2 <= PLUS) || LA16_2 == ID)) {
            alt16=1;
          }
        }
switch (alt16) {
case 1:
{
            match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression412);
            if (state.failed)             return;
            int alt15=2;
            alt15=dfa15.predict(input);
switch (alt15) {
case 1:
{
                pushFollow(FOLLOW_operator_in_conditionalOrExpression427);
                operator();
                state._fsp--;
                if (state.failed)                 return;
                pushFollow(FOLLOW_shiftExpression_in_conditionalOrExpression429);
                shiftExpression();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
case 2:
{
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression438);
            conditionalAndExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
    }
  }
break;
default :
break loop16;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
