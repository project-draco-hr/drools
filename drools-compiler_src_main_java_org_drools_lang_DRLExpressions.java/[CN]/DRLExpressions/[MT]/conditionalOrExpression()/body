{
  DRLExpressions.conditionalOrExpression_return retval=new DRLExpressions.conditionalOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOUBLE_PIPE41=null;
  DRLExpressions.conditionalAndExpression_return conditionalAndExpression40=null;
  DRLExpressions.conditionalAndExpression_return conditionalAndExpression42=null;
  Object DOUBLE_PIPE41_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression473);
      conditionalAndExpression40=conditionalAndExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,conditionalAndExpression40.getTree());
      loop15:       do {
        int alt15=2;
        int LA15_0=input.LA(1);
        if ((LA15_0 == DOUBLE_PIPE)) {
          alt15=1;
        }
switch (alt15) {
case 1:
{
            DOUBLE_PIPE41=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression477);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              DOUBLE_PIPE41_tree=(Object)adaptor.create(DOUBLE_PIPE41);
              root_0=(Object)adaptor.becomeRoot(DOUBLE_PIPE41_tree,root_0);
            }
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression480);
            conditionalAndExpression42=conditionalAndExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,conditionalAndExpression42.getTree());
          }
        break;
default :
      break loop15;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
