{
  relationalExpression_stack.push(new relationalExpression_scope());
  BaseDescr result=null;
  DRLExpressions.shiftExpression_return left=null;
  BaseDescr right=null;
  ((relationalExpression_scope)relationalExpression_stack.peek()).lsd=null;
  try {
{
      pushFollow(FOLLOW_shiftExpression_in_relationalExpression1709);
      left=shiftExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=((left != null ? left.result : null) != null && ((!((left != null ? left.result : null) instanceof AtomicExprDescr)) || ((left != null ? input.toString(left.start,left.stop) : null).equals(((AtomicExprDescr)(left != null ? left.result : null)).getExpression())))) ? (left != null ? left.result : null) : new AtomicExprDescr((left != null ? input.toString(left.start,left.stop) : null));
          ((relationalExpression_scope)relationalExpression_stack.peek()).lsd=result;
        }
      }
      loop35:       do {
        int alt35=2;
        alt35=dfa35.predict(input);
switch (alt35) {
case 1:
{
            pushFollow(FOLLOW_orRestriction_in_relationalExpression1734);
            right=orRestriction();
            state._fsp--;
            if (state.failed)             return result;
            if (state.backtracking == 0) {
              if (buildDescr) {
                result=right;
                ((relationalExpression_scope)relationalExpression_stack.peek()).lsd=result;
              }
            }
          }
        break;
default :
      break loop35;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
relationalExpression_stack.pop();
}
return result;
}
