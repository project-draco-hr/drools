{
  BaseDescr result=null;
  DRLExpressions.shiftExpression_return left=null;
  DRLExpressions.relationalOp_return op=null;
  DRLExpressions.shiftExpression_return right=null;
  try {
{
      pushFollow(FOLLOW_shiftExpression_in_relationalExpression1094);
      left=shiftExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr && state.backtracking == 0) {
          result=((left != null ? left.result : null) != null) ? (left != null ? left.result : null) : new AtomicExprDescr((left != null ? input.toString(left.start,left.stop) : null));
        }
      }
      loop28:       do {
        int alt28=2;
        alt28=dfa28.predict(input);
switch (alt28) {
case 1:
{
            pushFollow(FOLLOW_relationalOp_in_relationalExpression1109);
            op=relationalOp();
            state._fsp--;
            if (state.failed)             return result;
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression1113);
            right=shiftExpression();
            state._fsp--;
            if (state.failed)             return result;
            if (state.backtracking == 0) {
              if (buildDescr && state.backtracking == 0) {
                result=new RelationalExprDescr((op != null ? input.toString(op.start,op.stop) : null),result,((right != null ? right.result : null) != null) ? (right != null ? right.result : null) : new AtomicExprDescr((right != null ? input.toString(right.start,right.stop) : null)));
              }
            }
          }
        break;
default :
      break loop28;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
