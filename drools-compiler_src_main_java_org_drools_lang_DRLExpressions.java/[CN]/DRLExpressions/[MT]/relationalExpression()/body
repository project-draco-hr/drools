{
  DRLExpressions.relationalExpression_return retval=new DRLExpressions.relationalExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.shiftExpression_return se=null;
  DRLExpressions.relationalOp_return relationalOp71=null;
  DRLExpressions.shiftExpression_return shiftExpression72=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_shiftExpression_in_relationalExpression897);
      se=shiftExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,se.getTree());
      loop28:       do {
        int alt28=2;
        alt28=dfa28.predict(input);
switch (alt28) {
case 1:
{
            pushFollow(FOLLOW_relationalOp_in_relationalExpression906);
            relationalOp71=relationalOp();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             root_0=(Object)adaptor.becomeRoot(relationalOp71.getTree(),root_0);
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression909);
            shiftExpression72=shiftExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,shiftExpression72.getTree());
          }
        break;
default :
      break loop28;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
retval.se1=(CommonTree)(se != null ? ((Object)se.tree) : null);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
