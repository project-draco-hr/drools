{
  BaseDescr result=null;
  BaseDescr left=null;
  DRLExpressions.instanceof_key_return op=null;
  DRLExpressions.type_return right=null;
  try {
{
      pushFollow(FOLLOW_inExpression_in_instanceOfExpression969);
      left=inExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr && state.backtracking == 0) {
          result=left;
        }
      }
      int alt24=2;
      int LA24_0=input.LA(1);
      if ((LA24_0 == ID)) {
        int LA24_1=input.LA(2);
        if ((LA24_1 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))))) {
          alt24=1;
        }
      }
switch (alt24) {
case 1:
{
          pushFollow(FOLLOW_instanceof_key_in_instanceOfExpression978);
          op=instanceof_key();
          state._fsp--;
          if (state.failed)           return result;
          pushFollow(FOLLOW_type_in_instanceOfExpression982);
          right=type();
          state._fsp--;
          if (state.failed)           return result;
          if (state.backtracking == 0) {
            if (buildDescr && state.backtracking == 0) {
              result=new RelationalExprDescr((op != null ? input.toString(op.start,op.stop) : null),left,new AtomicExprDescr((right != null ? input.toString(right.start,right.stop) : null)));
            }
          }
        }
      break;
  }
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
