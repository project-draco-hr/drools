{
  DRLExpressions.instanceOfExpression_return retval=new DRLExpressions.instanceOfExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.inExpression_return ie=null;
  DRLExpressions.instanceof_key_return instanceof_key58=null;
  DRLExpressions.type_return type59=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_inExpression_in_instanceOfExpression755);
      ie=inExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,ie.getTree());
      int alt24=2;
      alt24=dfa24.predict(input);
switch (alt24) {
case 1:
{
          pushFollow(FOLLOW_instanceof_key_in_instanceOfExpression758);
          instanceof_key58=instanceof_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           root_0=(Object)adaptor.becomeRoot(instanceof_key58.getTree(),root_0);
          pushFollow(FOLLOW_type_in_instanceOfExpression761);
          type59=type();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,type59.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
  retval.se1=(ie != null ? ie.se1 : null);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
