{
  try {
{
      int alt34=3;
      int LA34_0=input.LA(1);
      if ((LA34_0 == LESS)) {
        alt34=1;
      }
 else       if ((LA34_0 == GREATER)) {
        int LA34_2=input.LA(2);
        if ((LA34_2 == GREATER)) {
          int LA34_3=input.LA(3);
          if ((LA34_3 == GREATER)) {
            alt34=2;
          }
 else           if ((LA34_3 == EOF || LA34_3 == FLOAT || (LA34_3 >= HEX && LA34_3 <= DECIMAL) || LA34_3 == STRING || (LA34_3 >= BOOL && LA34_3 <= NULL) || (LA34_3 >= DECR && LA34_3 <= INCR) || LA34_3 == LESS || LA34_3 == LEFT_PAREN || LA34_3 == LEFT_SQUARE || (LA34_3 >= NEGATION && LA34_3 <= TILDE) || (LA34_3 >= MINUS && LA34_3 <= PLUS) || LA34_3 == ID)) {
            alt34=3;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return;
            }
            NoViableAltException nvae=new NoViableAltException("",34,3,input);
            throw nvae;
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return;
          }
          NoViableAltException nvae=new NoViableAltException("",34,2,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",34,0,input);
        throw nvae;
      }
switch (alt34) {
case 1:
{
          match(input,LESS,FOLLOW_LESS_in_shiftOp1316);
          if (state.failed)           return;
          match(input,LESS,FOLLOW_LESS_in_shiftOp1318);
          if (state.failed)           return;
        }
      break;
case 2:
{
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp1331);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp1333);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp1335);
      if (state.failed)       return;
    }
  break;
case 3:
{
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp1348);
  if (state.failed)   return;
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp1350);
  if (state.failed)   return;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
