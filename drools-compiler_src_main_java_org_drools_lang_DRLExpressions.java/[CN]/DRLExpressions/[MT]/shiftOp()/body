{
  try {
{
      int alt36=3;
      int LA36_0=input.LA(1);
      if ((LA36_0 == LESS)) {
        alt36=1;
      }
 else       if ((LA36_0 == GREATER)) {
        int LA36_2=input.LA(2);
        if ((LA36_2 == GREATER)) {
          int LA36_3=input.LA(3);
          if ((LA36_3 == GREATER)) {
            alt36=2;
          }
 else           if ((LA36_3 == EOF || LA36_3 == FLOAT || (LA36_3 >= HEX && LA36_3 <= DECIMAL) || (LA36_3 >= STRING && LA36_3 <= TIME_INTERVAL) || (LA36_3 >= BOOL && LA36_3 <= NULL) || (LA36_3 >= DECR && LA36_3 <= INCR) || LA36_3 == LESS || LA36_3 == LEFT_PAREN || LA36_3 == LEFT_SQUARE || (LA36_3 >= NEGATION && LA36_3 <= TILDE) || (LA36_3 >= MINUS && LA36_3 <= PLUS) || LA36_3 == ID)) {
            alt36=3;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return;
            }
            NoViableAltException nvae=new NoViableAltException("",36,3,input);
            throw nvae;
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return;
          }
          NoViableAltException nvae=new NoViableAltException("",36,2,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",36,0,input);
        throw nvae;
      }
switch (alt36) {
case 1:
{
          match(input,LESS,FOLLOW_LESS_in_shiftOp1630);
          if (state.failed)           return;
          match(input,LESS,FOLLOW_LESS_in_shiftOp1632);
          if (state.failed)           return;
        }
      break;
case 2:
{
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp1645);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp1647);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp1649);
      if (state.failed)       return;
    }
  break;
case 3:
{
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp1662);
  if (state.failed)   return;
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp1664);
  if (state.failed)   return;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
