{
  try {
{
      int alt32=3;
      int LA32_0=input.LA(1);
      if ((LA32_0 == LESS)) {
        alt32=1;
      }
 else       if ((LA32_0 == GREATER)) {
        int LA32_2=input.LA(2);
        if ((LA32_2 == GREATER)) {
          int LA32_3=input.LA(3);
          if ((LA32_3 == GREATER)) {
            alt32=2;
          }
 else           if ((LA32_3 == EOF || LA32_3 == FLOAT || (LA32_3 >= HEX && LA32_3 <= DECIMAL) || LA32_3 == STRING || (LA32_3 >= BOOL && LA32_3 <= NULL) || (LA32_3 >= DECR && LA32_3 <= INCR) || LA32_3 == LESS || LA32_3 == LEFT_PAREN || LA32_3 == LEFT_SQUARE || (LA32_3 >= NEGATION && LA32_3 <= TILDE) || (LA32_3 >= MINUS && LA32_3 <= PLUS) || LA32_3 == ID)) {
            alt32=3;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return;
            }
            NoViableAltException nvae=new NoViableAltException("",32,3,input);
            throw nvae;
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return;
          }
          NoViableAltException nvae=new NoViableAltException("",32,2,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",32,0,input);
        throw nvae;
      }
switch (alt32) {
case 1:
{
          match(input,LESS,FOLLOW_LESS_in_shiftOp903);
          if (state.failed)           return;
          match(input,LESS,FOLLOW_LESS_in_shiftOp905);
          if (state.failed)           return;
        }
      break;
case 2:
{
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp909);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp911);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp913);
      if (state.failed)       return;
    }
  break;
case 3:
{
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp917);
  if (state.failed)   return;
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp919);
  if (state.failed)   return;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
