{
  DRLExpressions.shiftOp_return retval=new DRLExpressions.shiftOp_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS85=null;
  Token LESS86=null;
  Token GREATER87=null;
  Token GREATER88=null;
  Token GREATER89=null;
  Token GREATER90=null;
  Token GREATER91=null;
  Object LESS85_tree=null;
  Object LESS86_tree=null;
  Object GREATER87_tree=null;
  Object GREATER88_tree=null;
  Object GREATER89_tree=null;
  Object GREATER90_tree=null;
  Object GREATER91_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt34=3;
      int LA34_0=input.LA(1);
      if ((LA34_0 == LESS)) {
        alt34=1;
      }
 else       if ((LA34_0 == GREATER)) {
        int LA34_2=input.LA(2);
        if ((LA34_2 == GREATER)) {
          int LA34_3=input.LA(3);
          if ((LA34_3 == GREATER)) {
            alt34=2;
          }
 else           if ((LA34_3 == EOF || LA34_3 == FLOAT || (LA34_3 >= HEX && LA34_3 <= DECIMAL) || LA34_3 == STRING || (LA34_3 >= BOOL && LA34_3 <= NULL) || (LA34_3 >= DECR && LA34_3 <= INCR) || LA34_3 == LESS || LA34_3 == LEFT_PAREN || LA34_3 == LEFT_SQUARE || (LA34_3 >= NEGATION && LA34_3 <= TILDE) || (LA34_3 >= MINUS && LA34_3 <= PLUS) || LA34_3 == ID)) {
            alt34=3;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",34,3,input);
            throw nvae;
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",34,2,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",34,0,input);
        throw nvae;
      }
switch (alt34) {
case 1:
{
          LESS85=(Token)match(input,LESS,FOLLOW_LESS_in_shiftOp1114);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            LESS85_tree=(Object)adaptor.create(LESS85);
            adaptor.addChild(root_0,LESS85_tree);
          }
          LESS86=(Token)match(input,LESS,FOLLOW_LESS_in_shiftOp1116);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            LESS86_tree=(Object)adaptor.create(LESS86);
            adaptor.addChild(root_0,LESS86_tree);
          }
        }
      break;
case 2:
{
      GREATER87=(Token)match(input,GREATER,FOLLOW_GREATER_in_shiftOp1120);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER87_tree=(Object)adaptor.create(GREATER87);
        adaptor.addChild(root_0,GREATER87_tree);
      }
      GREATER88=(Token)match(input,GREATER,FOLLOW_GREATER_in_shiftOp1122);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER88_tree=(Object)adaptor.create(GREATER88);
        adaptor.addChild(root_0,GREATER88_tree);
      }
      GREATER89=(Token)match(input,GREATER,FOLLOW_GREATER_in_shiftOp1124);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER89_tree=(Object)adaptor.create(GREATER89);
        adaptor.addChild(root_0,GREATER89_tree);
      }
    }
  break;
case 3:
{
  GREATER90=(Token)match(input,GREATER,FOLLOW_GREATER_in_shiftOp1128);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER90_tree=(Object)adaptor.create(GREATER90);
    adaptor.addChild(root_0,GREATER90_tree);
  }
  GREATER91=(Token)match(input,GREATER,FOLLOW_GREATER_in_shiftOp1130);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER91_tree=(Object)adaptor.create(GREATER91);
    adaptor.addChild(root_0,GREATER91_tree);
  }
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
