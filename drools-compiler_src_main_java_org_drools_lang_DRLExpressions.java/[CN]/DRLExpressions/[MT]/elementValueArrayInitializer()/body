{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_elementValueArrayInitializer2401);
      if (state.failed)       return;
      int alt74=2;
      int LA74_0=input.LA(1);
      if ((LA74_0 == FLOAT || (LA74_0 >= HEX && LA74_0 <= DECIMAL) || (LA74_0 >= STRING && LA74_0 <= TimePeriod) || (LA74_0 >= BOOL && LA74_0 <= AT) || (LA74_0 >= DECR && LA74_0 <= INCR) || LA74_0 == LESS || LA74_0 == LEFT_PAREN || LA74_0 == LEFT_SQUARE || LA74_0 == LEFT_CURLY || (LA74_0 >= NEGATION && LA74_0 <= TILDE) || (LA74_0 >= MINUS && LA74_0 <= PLUS) || LA74_0 == ID)) {
        alt74=1;
      }
switch (alt74) {
case 1:
{
          pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer2404);
          elementValue();
          state._fsp--;
          if (state.failed)           return;
          loop73:           do {
            int alt73=2;
            int LA73_0=input.LA(1);
            if ((LA73_0 == COMMA)) {
              alt73=1;
            }
switch (alt73) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer2407);
                if (state.failed)                 return;
                pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer2409);
                elementValue();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop73;
      }
    }
 while (true);
  }
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_elementValueArrayInitializer2416);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
