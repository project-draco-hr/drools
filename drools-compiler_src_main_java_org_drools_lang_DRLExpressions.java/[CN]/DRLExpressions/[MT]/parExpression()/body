{
  DRLExpressions.parExpression_return retval=new DRLExpressions.parExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN164=null;
  Token RIGHT_PAREN166=null;
  DRLExpressions.expression_return expression165=null;
  Object LEFT_PAREN164_tree=null;
  Object RIGHT_PAREN166_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_PAREN164=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parExpression1806);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_PAREN164_tree=(Object)adaptor.create(LEFT_PAREN164);
        adaptor.addChild(root_0,LEFT_PAREN164_tree);
      }
      pushFollow(FOLLOW_expression_in_parExpression1808);
      expression165=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression165.getTree());
      RIGHT_PAREN166=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parExpression1810);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_PAREN166_tree=(Object)adaptor.create(RIGHT_PAREN166);
        adaptor.addChild(root_0,RIGHT_PAREN166_tree);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    throw re;
  }
 finally {
  }
  return retval;
}
