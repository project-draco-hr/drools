{
  DRLExpressions.innerCreator_return retval=new DRLExpressions.innerCreator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID185=null;
  DRLExpressions.classCreatorRest_return classCreatorRest186=null;
  Object ID185_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      if (!((!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"innerCreator","!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
      }
      ID185=(Token)match(input,ID,FOLLOW_ID_in_innerCreator1987);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID185_tree=(Object)adaptor.create(ID185);
        adaptor.addChild(root_0,ID185_tree);
      }
      pushFollow(FOLLOW_classCreatorRest_in_innerCreator1989);
      classCreatorRest186=classCreatorRest();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,classCreatorRest186.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    throw re;
  }
 finally {
  }
  return retval;
}
