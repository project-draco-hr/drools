{
  DRLExpressions.nonWildcardTypeArguments_return retval=new DRLExpressions.nonWildcardTypeArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS210=null;
  Token GREATER212=null;
  DRLExpressions.typeList_return typeList211=null;
  Object LESS210_tree=null;
  Object GREATER212_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS210=(Token)match(input,LESS,FOLLOW_LESS_in_nonWildcardTypeArguments2200);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS210_tree=(Object)adaptor.create(LESS210);
        adaptor.addChild(root_0,LESS210_tree);
      }
      pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments2202);
      typeList211=typeList();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeList211.getTree());
      GREATER212=(Token)match(input,GREATER,FOLLOW_GREATER_in_nonWildcardTypeArguments2204);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER212_tree=(Object)adaptor.create(GREATER212);
        adaptor.addChild(root_0,GREATER212_tree);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    throw re;
  }
 finally {
  }
  return retval;
}
