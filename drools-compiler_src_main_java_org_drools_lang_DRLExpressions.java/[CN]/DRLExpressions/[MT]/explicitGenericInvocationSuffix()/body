{
  DRLExpressions.explicitGenericInvocationSuffix_return retval=new DRLExpressions.explicitGenericInvocationSuffix_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID215=null;
  DRLExpressions.super_key_return super_key213=null;
  DRLExpressions.superSuffix_return superSuffix214=null;
  DRLExpressions.arguments_return arguments216=null;
  Object ID215_tree=null;
  try {
    int alt68=2;
    int LA68_0=input.LA(1);
    if ((LA68_0 == ID)) {
      int LA68_1=input.LA(2);
      if ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))) {
        alt68=1;
      }
 else       if ((true)) {
        alt68=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",68,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",68,0,input);
      throw nvae;
    }
switch (alt68) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_super_key_in_explicitGenericInvocationSuffix2221);
        super_key213=super_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,super_key213.getTree());
        pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix2223);
        superSuffix214=superSuffix();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,superSuffix214.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    ID215=(Token)match(input,ID,FOLLOW_ID_in_explicitGenericInvocationSuffix2234);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID215_tree=(Object)adaptor.create(ID215);
      adaptor.addChild(root_0,ID215_tree);
    }
    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix2236);
    arguments216=arguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arguments216.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
