{
  Token AT7=null;
  String ann=null;
  try {
{
      AT7=(Token)match(input,AT,FOLLOW_AT_in_annotation2218);
      if (state.failed)       return;
      if (state.backtracking == 0) {
        helper.emit(AT7,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_annotationName_in_annotation2226);
      ann=annotationName();
      state._fsp--;
      if (state.failed)       return;
      int alt68=3;
      int LA68_0=input.LA(1);
      if ((LA68_0 == LEFT_PAREN)) {
        int LA68_1=input.LA(2);
        if ((LA68_1 == RIGHT_PAREN)) {
          alt68=1;
        }
 else         if ((LA68_1 == FLOAT || (LA68_1 >= HEX && LA68_1 <= DECIMAL) || (LA68_1 >= STRING && LA68_1 <= TimePeriod) || (LA68_1 >= BOOL && LA68_1 <= AT) || (LA68_1 >= DECR && LA68_1 <= INCR) || LA68_1 == LESS || LA68_1 == LEFT_PAREN || LA68_1 == LEFT_SQUARE || LA68_1 == LEFT_CURLY || (LA68_1 >= NEGATION && LA68_1 <= TILDE) || (LA68_1 >= MINUS && LA68_1 <= PLUS) || LA68_1 == ID)) {
          alt68=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return;
          }
          NoViableAltException nvae=new NoViableAltException("",68,1,input);
          throw nvae;
        }
      }
 else       if ((LA68_0 == EOF || LA68_0 == AT || LA68_0 == RIGHT_PAREN || (LA68_0 >= RIGHT_CURLY && LA68_0 <= COMMA))) {
        alt68=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",68,0,input);
        throw nvae;
      }
switch (alt68) {
case 1:
{
          match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation2238);
          if (state.failed)           return;
          match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation2240);
          if (state.failed)           return;
        }
      break;
case 2:
{
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation2248);
      if (state.failed)       return;
      pushFollow(FOLLOW_elementValuePairs_in_annotation2250);
      elementValuePairs();
      state._fsp--;
      if (state.failed)       return;
      match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation2252);
      if (state.failed)       return;
    }
  break;
case 3:
{
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
