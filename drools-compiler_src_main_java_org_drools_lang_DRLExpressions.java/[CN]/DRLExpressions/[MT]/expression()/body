{
  DRLExpressions.expression_return retval=new DRLExpressions.expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.conditionalExpression_return conditionalExpression32=null;
  DRLExpressions.assignmentOperator_return assignmentOperator33=null;
  DRLExpressions.expression_return expression34=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_conditionalExpression_in_expression411);
      conditionalExpression32=conditionalExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,conditionalExpression32.getTree());
      int alt13=2;
      alt13=dfa13.predict(input);
switch (alt13) {
case 1:
{
          pushFollow(FOLLOW_assignmentOperator_in_expression420);
          assignmentOperator33=assignmentOperator();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           root_0=(Object)adaptor.becomeRoot(assignmentOperator33.getTree(),root_0);
          pushFollow(FOLLOW_expression_in_expression423);
          expression34=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expression34.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
