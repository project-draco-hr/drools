{
  DRLExpressions.shiftExpression_return retval=new DRLExpressions.shiftExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.additiveExpression_return ad1=null;
  DRLExpressions.shiftOp_return so=null;
  DRLExpressions.additiveExpression_return ad2=null;
  RewriteRuleSubtreeStream stream_shiftOp=new RewriteRuleSubtreeStream(adaptor,"rule shiftOp");
  RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
  try {
{
      pushFollow(FOLLOW_additiveExpression_in_shiftExpression1056);
      ad1=additiveExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_additiveExpression.add(ad1.getTree());
      loop33:       do {
        int alt33=2;
        alt33=dfa33.predict(input);
switch (alt33) {
case 1:
{
            pushFollow(FOLLOW_shiftOp_in_shiftExpression1066);
            so=shiftOp();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_shiftOp.add(so.getTree());
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression1070);
            ad2=additiveExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_additiveExpression.add(ad2.getTree());
          }
        break;
default :
      break loop33;
  }
}
 while (true);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  RewriteRuleSubtreeStream stream_so=new RewriteRuleSubtreeStream(adaptor,"rule so",so != null ? so.tree : null);
  RewriteRuleSubtreeStream stream_ad1=new RewriteRuleSubtreeStream(adaptor,"rule ad1",ad1 != null ? ad1.tree : null);
  RewriteRuleSubtreeStream stream_ad2=new RewriteRuleSubtreeStream(adaptor,"rule ad2",ad2 != null ? ad2.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(SHIFT_EXPR,"SHIFT_EXPR"),root_1);
      adaptor.addChild(root_1,stream_ad1.nextTree());
      while (stream_ad2.hasNext() || stream_so.hasNext()) {
        adaptor.addChild(root_1,stream_so.nextTree());
        adaptor.addChild(root_1,stream_ad2.nextTree());
      }
      stream_ad2.reset();
      stream_so.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
