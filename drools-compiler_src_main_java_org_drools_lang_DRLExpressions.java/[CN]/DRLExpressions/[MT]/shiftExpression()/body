{
  DRLExpressions.shiftExpression_return retval=new DRLExpressions.shiftExpression_return();
  retval.start=input.LT(1);
  BaseDescr left=null;
  try {
{
      pushFollow(FOLLOW_additiveExpression_in_shiftExpression2023);
      left=additiveExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        if (buildDescr) {
          retval.result=left;
        }
      }
      loop43:       do {
        int alt43=2;
        alt43=dfa43.predict(input);
switch (alt43) {
case 1:
{
            pushFollow(FOLLOW_shiftOp_in_shiftExpression2037);
            shiftOp();
            state._fsp--;
            if (state.failed)             return retval;
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression2039);
            additiveExpression();
            state._fsp--;
            if (state.failed)             return retval;
          }
        break;
default :
      break loop43;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
