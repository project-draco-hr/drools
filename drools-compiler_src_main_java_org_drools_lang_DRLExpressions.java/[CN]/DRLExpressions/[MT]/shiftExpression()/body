{
  DRLExpressions.shiftExpression_return retval=new DRLExpressions.shiftExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.additiveExpression_return additiveExpression85=null;
  DRLExpressions.shiftOp_return shiftOp86=null;
  DRLExpressions.additiveExpression_return additiveExpression87=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_additiveExpression_in_shiftExpression1085);
      additiveExpression85=additiveExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,additiveExpression85.getTree());
      loop33:       do {
        int alt33=2;
        alt33=dfa33.predict(input);
switch (alt33) {
case 1:
{
            pushFollow(FOLLOW_shiftOp_in_shiftExpression1093);
            shiftOp86=shiftOp();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,shiftOp86.getTree());
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression1095);
            additiveExpression87=additiveExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,additiveExpression87.getTree());
          }
        break;
default :
      break loop33;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
