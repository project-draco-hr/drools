{
  DRLExpressions.shiftExpression_return retval=new DRLExpressions.shiftExpression_return();
  retval.start=input.LT(1);
  BaseDescr left=null;
  try {
{
      pushFollow(FOLLOW_additiveExpression_in_shiftExpression1280);
      left=additiveExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        if (buildDescr && state.backtracking == 0) {
          retval.result=left;
        }
      }
      loop33:       do {
        int alt33=2;
        alt33=dfa33.predict(input);
switch (alt33) {
case 1:
{
            pushFollow(FOLLOW_shiftOp_in_shiftExpression1294);
            shiftOp();
            state._fsp--;
            if (state.failed)             return retval;
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression1296);
            additiveExpression();
            state._fsp--;
            if (state.failed)             return retval;
          }
        break;
default :
      break loop33;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
