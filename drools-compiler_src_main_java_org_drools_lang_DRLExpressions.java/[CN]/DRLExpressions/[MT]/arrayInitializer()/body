{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer2443);
      if (state.failed)       return;
      int alt66=2;
      int LA66_0=input.LA(1);
      if ((LA66_0 == FLOAT || (LA66_0 >= HEX && LA66_0 <= DECIMAL) || LA66_0 == STRING || (LA66_0 >= BOOL && LA66_0 <= NULL) || (LA66_0 >= DECR && LA66_0 <= INCR) || LA66_0 == LESS || LA66_0 == LEFT_PAREN || LA66_0 == LEFT_SQUARE || LA66_0 == LEFT_CURLY || (LA66_0 >= NEGATION && LA66_0 <= TILDE) || (LA66_0 >= MINUS && LA66_0 <= PLUS) || LA66_0 == ID)) {
        alt66=1;
      }
switch (alt66) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2446);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop64:           do {
            int alt64=2;
            int LA64_0=input.LA(1);
            if ((LA64_0 == COMMA)) {
              int LA64_1=input.LA(2);
              if ((LA64_1 == FLOAT || (LA64_1 >= HEX && LA64_1 <= DECIMAL) || LA64_1 == STRING || (LA64_1 >= BOOL && LA64_1 <= NULL) || (LA64_1 >= DECR && LA64_1 <= INCR) || LA64_1 == LESS || LA64_1 == LEFT_PAREN || LA64_1 == LEFT_SQUARE || LA64_1 == LEFT_CURLY || (LA64_1 >= NEGATION && LA64_1 <= TILDE) || (LA64_1 >= MINUS && LA64_1 <= PLUS) || LA64_1 == ID)) {
                alt64=1;
              }
            }
switch (alt64) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer2449);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2451);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop64;
      }
    }
 while (true);
    int alt65=2;
    int LA65_0=input.LA(1);
    if ((LA65_0 == COMMA)) {
      alt65=1;
    }
switch (alt65) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer2456);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer2463);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
