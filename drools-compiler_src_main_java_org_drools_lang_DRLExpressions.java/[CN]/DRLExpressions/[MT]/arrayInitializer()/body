{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer1915);
      if (state.failed)       return;
      int alt65=2;
      int LA65_0=input.LA(1);
      if ((LA65_0 == FLOAT || (LA65_0 >= HEX && LA65_0 <= DECIMAL) || LA65_0 == STRING || (LA65_0 >= BOOL && LA65_0 <= NULL) || (LA65_0 >= DECR && LA65_0 <= INCR) || LA65_0 == LESS || LA65_0 == LEFT_PAREN || LA65_0 == LEFT_SQUARE || LA65_0 == LEFT_CURLY || (LA65_0 >= NEGATION && LA65_0 <= TILDE) || (LA65_0 >= MINUS && LA65_0 <= PLUS) || LA65_0 == ID)) {
        alt65=1;
      }
switch (alt65) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1918);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop63:           do {
            int alt63=2;
            int LA63_0=input.LA(1);
            if ((LA63_0 == COMMA)) {
              int LA63_1=input.LA(2);
              if ((LA63_1 == FLOAT || (LA63_1 >= HEX && LA63_1 <= DECIMAL) || LA63_1 == STRING || (LA63_1 >= BOOL && LA63_1 <= NULL) || (LA63_1 >= DECR && LA63_1 <= INCR) || LA63_1 == LESS || LA63_1 == LEFT_PAREN || LA63_1 == LEFT_SQUARE || LA63_1 == LEFT_CURLY || (LA63_1 >= NEGATION && LA63_1 <= TILDE) || (LA63_1 >= MINUS && LA63_1 <= PLUS) || LA63_1 == ID)) {
                alt63=1;
              }
            }
switch (alt63) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer1921);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1923);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop63;
      }
    }
 while (true);
    int alt64=2;
    int LA64_0=input.LA(1);
    if ((LA64_0 == COMMA)) {
      alt64=1;
    }
switch (alt64) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer1928);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer1935);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
