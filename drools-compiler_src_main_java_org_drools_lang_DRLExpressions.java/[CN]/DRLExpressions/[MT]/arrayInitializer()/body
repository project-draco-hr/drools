{
  DRLExpressions.arrayInitializer_return retval=new DRLExpressions.arrayInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY204=null;
  Token COMMA206=null;
  Token COMMA208=null;
  Token RIGHT_CURLY209=null;
  DRLExpressions.variableInitializer_return variableInitializer205=null;
  DRLExpressions.variableInitializer_return variableInitializer207=null;
  Object LEFT_CURLY204_tree=null;
  Object COMMA206_tree=null;
  Object COMMA208_tree=null;
  Object RIGHT_CURLY209_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY204=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer2125);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY204_tree=(Object)adaptor.create(LEFT_CURLY204);
        adaptor.addChild(root_0,LEFT_CURLY204_tree);
      }
      int alt67=2;
      int LA67_0=input.LA(1);
      if ((LA67_0 == FLOAT || (LA67_0 >= HEX && LA67_0 <= DECIMAL) || LA67_0 == STRING || (LA67_0 >= BOOL && LA67_0 <= NULL) || (LA67_0 >= DECR && LA67_0 <= INCR) || LA67_0 == LESS || LA67_0 == LEFT_PAREN || LA67_0 == LEFT_SQUARE || LA67_0 == LEFT_CURLY || (LA67_0 >= NEGATION && LA67_0 <= TILDE) || (LA67_0 >= MINUS && LA67_0 <= PLUS) || LA67_0 == ID)) {
        alt67=1;
      }
switch (alt67) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2128);
          variableInitializer205=variableInitializer();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,variableInitializer205.getTree());
          loop65:           do {
            int alt65=2;
            int LA65_0=input.LA(1);
            if ((LA65_0 == COMMA)) {
              int LA65_1=input.LA(2);
              if ((LA65_1 == FLOAT || (LA65_1 >= HEX && LA65_1 <= DECIMAL) || LA65_1 == STRING || (LA65_1 >= BOOL && LA65_1 <= NULL) || (LA65_1 >= DECR && LA65_1 <= INCR) || LA65_1 == LESS || LA65_1 == LEFT_PAREN || LA65_1 == LEFT_SQUARE || LA65_1 == LEFT_CURLY || (LA65_1 >= NEGATION && LA65_1 <= TILDE) || (LA65_1 >= MINUS && LA65_1 <= PLUS) || LA65_1 == ID)) {
                alt65=1;
              }
            }
switch (alt65) {
case 1:
{
                COMMA206=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer2131);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  COMMA206_tree=(Object)adaptor.create(COMMA206);
                  adaptor.addChild(root_0,COMMA206_tree);
                }
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2133);
                variableInitializer207=variableInitializer();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 adaptor.addChild(root_0,variableInitializer207.getTree());
              }
            break;
default :
          break loop65;
      }
    }
 while (true);
    int alt66=2;
    int LA66_0=input.LA(1);
    if ((LA66_0 == COMMA)) {
      alt66=1;
    }
switch (alt66) {
case 1:
{
        COMMA208=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer2138);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          COMMA208_tree=(Object)adaptor.create(COMMA208);
          adaptor.addChild(root_0,COMMA208_tree);
        }
      }
    break;
}
}
break;
}
RIGHT_CURLY209=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer2145);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY209_tree=(Object)adaptor.create(RIGHT_CURLY209);
adaptor.addChild(root_0,RIGHT_CURLY209_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
