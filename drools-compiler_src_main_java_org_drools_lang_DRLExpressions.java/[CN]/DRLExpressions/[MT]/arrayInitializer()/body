{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer3173);
      if (state.failed)       return;
      int alt69=2;
      int LA69_0=input.LA(1);
      if ((LA69_0 == FLOAT || (LA69_0 >= HEX && LA69_0 <= DECIMAL) || (LA69_0 >= STRING && LA69_0 <= TIME_INTERVAL) || (LA69_0 >= BOOL && LA69_0 <= NULL) || (LA69_0 >= DECR && LA69_0 <= INCR) || LA69_0 == LESS || LA69_0 == LEFT_PAREN || LA69_0 == LEFT_SQUARE || LA69_0 == LEFT_CURLY || (LA69_0 >= NEGATION && LA69_0 <= TILDE) || (LA69_0 >= MINUS && LA69_0 <= PLUS) || LA69_0 == ID)) {
        alt69=1;
      }
switch (alt69) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3176);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop67:           do {
            int alt67=2;
            int LA67_0=input.LA(1);
            if ((LA67_0 == COMMA)) {
              int LA67_1=input.LA(2);
              if ((LA67_1 == FLOAT || (LA67_1 >= HEX && LA67_1 <= DECIMAL) || (LA67_1 >= STRING && LA67_1 <= TIME_INTERVAL) || (LA67_1 >= BOOL && LA67_1 <= NULL) || (LA67_1 >= DECR && LA67_1 <= INCR) || LA67_1 == LESS || LA67_1 == LEFT_PAREN || LA67_1 == LEFT_SQUARE || LA67_1 == LEFT_CURLY || (LA67_1 >= NEGATION && LA67_1 <= TILDE) || (LA67_1 >= MINUS && LA67_1 <= PLUS) || LA67_1 == ID)) {
                alt67=1;
              }
            }
switch (alt67) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3179);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3181);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop67;
      }
    }
 while (true);
    int alt68=2;
    int LA68_0=input.LA(1);
    if ((LA68_0 == COMMA)) {
      alt68=1;
    }
switch (alt68) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3186);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer3193);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
