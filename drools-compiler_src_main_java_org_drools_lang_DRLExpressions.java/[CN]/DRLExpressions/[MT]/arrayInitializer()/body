{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer1659);
      if (state.failed)       return;
      int alt58=2;
      int LA58_0=input.LA(1);
      if ((LA58_0 == FLOAT || (LA58_0 >= HEX && LA58_0 <= DECIMAL) || LA58_0 == STRING || (LA58_0 >= BOOL && LA58_0 <= NULL) || (LA58_0 >= DECR && LA58_0 <= INCR) || LA58_0 == LESS || LA58_0 == LEFT_PAREN || LA58_0 == LEFT_SQUARE || LA58_0 == LEFT_CURLY || (LA58_0 >= NEGATION && LA58_0 <= TILDE) || (LA58_0 >= MINUS && LA58_0 <= PLUS) || LA58_0 == ID)) {
        alt58=1;
      }
switch (alt58) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1662);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop56:           do {
            int alt56=2;
            int LA56_0=input.LA(1);
            if ((LA56_0 == COMMA)) {
              int LA56_1=input.LA(2);
              if ((LA56_1 == FLOAT || (LA56_1 >= HEX && LA56_1 <= DECIMAL) || LA56_1 == STRING || (LA56_1 >= BOOL && LA56_1 <= NULL) || (LA56_1 >= DECR && LA56_1 <= INCR) || LA56_1 == LESS || LA56_1 == LEFT_PAREN || LA56_1 == LEFT_SQUARE || LA56_1 == LEFT_CURLY || (LA56_1 >= NEGATION && LA56_1 <= TILDE) || (LA56_1 >= MINUS && LA56_1 <= PLUS) || LA56_1 == ID)) {
                alt56=1;
              }
            }
switch (alt56) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer1665);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1667);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop56;
      }
    }
 while (true);
    int alt57=2;
    int LA57_0=input.LA(1);
    if ((LA57_0 == COMMA)) {
      alt57=1;
    }
switch (alt57) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer1672);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer1679);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
