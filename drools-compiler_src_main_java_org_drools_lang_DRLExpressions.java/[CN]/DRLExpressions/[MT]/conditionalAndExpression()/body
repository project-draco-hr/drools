{
  try {
{
      pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression456);
      inclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return;
      loop18:       do {
        int alt18=2;
        int LA18_0=input.LA(1);
        if ((LA18_0 == DOUBLE_AMPER)) {
          int LA18_2=input.LA(2);
          if ((LA18_2 == FLOAT || (LA18_2 >= HEX && LA18_2 <= DECIMAL) || LA18_2 == STRING || (LA18_2 >= BOOL && LA18_2 <= NULL) || (LA18_2 >= DECR && LA18_2 <= INCR) || (LA18_2 >= EQUALS && LA18_2 <= LESS) || LA18_2 == LEFT_PAREN || LA18_2 == LEFT_SQUARE || (LA18_2 >= NEGATION && LA18_2 <= TILDE) || (LA18_2 >= MINUS && LA18_2 <= PLUS) || LA18_2 == ID)) {
            alt18=1;
          }
        }
switch (alt18) {
case 1:
{
            match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression460);
            if (state.failed)             return;
            int alt17=2;
            alt17=dfa17.predict(input);
switch (alt17) {
case 1:
{
                pushFollow(FOLLOW_operator_in_conditionalAndExpression474);
                operator();
                state._fsp--;
                if (state.failed)                 return;
                pushFollow(FOLLOW_shiftExpression_in_conditionalAndExpression476);
                shiftExpression();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
case 2:
{
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression484);
            inclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
    }
  }
break;
default :
break loop18;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
