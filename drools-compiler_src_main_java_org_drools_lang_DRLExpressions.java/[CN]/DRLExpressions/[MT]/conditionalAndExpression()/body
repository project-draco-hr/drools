{
  DRLExpressions.conditionalAndExpression_return retval=new DRLExpressions.conditionalAndExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOUBLE_AMPER44=null;
  DRLExpressions.inclusiveOrExpression_return inclusiveOrExpression43=null;
  DRLExpressions.inclusiveOrExpression_return inclusiveOrExpression45=null;
  Object DOUBLE_AMPER44_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression496);
      inclusiveOrExpression43=inclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,inclusiveOrExpression43.getTree());
      loop16:       do {
        int alt16=2;
        int LA16_0=input.LA(1);
        if ((LA16_0 == DOUBLE_AMPER)) {
          alt16=1;
        }
switch (alt16) {
case 1:
{
            DOUBLE_AMPER44=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression500);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              DOUBLE_AMPER44_tree=(Object)adaptor.create(DOUBLE_AMPER44);
              root_0=(Object)adaptor.becomeRoot(DOUBLE_AMPER44_tree,root_0);
            }
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression503);
            inclusiveOrExpression45=inclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,inclusiveOrExpression45.getTree());
          }
        break;
default :
      break loop16;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
