{
  BaseDescr result=null;
  BaseDescr left=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression774);
      left=inclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr && state.backtracking == 0) {
          result=left;
        }
      }
      loop20:       do {
        int alt20=2;
        int LA20_0=input.LA(1);
        if ((LA20_0 == DOUBLE_AMPER)) {
          alt20=1;
        }
switch (alt20) {
case 1:
{
            match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression782);
            if (state.failed)             return result;
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression786);
            right=inclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return result;
            if (state.backtracking == 0) {
              if (buildDescr && state.backtracking == 0) {
                ConstraintConnectiveDescr descr=ConstraintConnectiveDescr.newAnd();
                descr.addOrMerge(result);
                descr.addOrMerge(right);
                result=descr;
              }
            }
          }
        break;
default :
      break loop20;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
