{
  try {
{
      pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression541);
      andExpression();
      state._fsp--;
      if (state.failed)       return;
      loop22:       do {
        int alt22=2;
        int LA22_0=input.LA(1);
        if ((LA22_0 == XOR)) {
          int LA22_2=input.LA(2);
          if ((LA22_2 == FLOAT || (LA22_2 >= HEX && LA22_2 <= DECIMAL) || LA22_2 == STRING || (LA22_2 >= BOOL && LA22_2 <= NULL) || (LA22_2 >= DECR && LA22_2 <= INCR) || (LA22_2 >= EQUALS && LA22_2 <= LESS) || LA22_2 == LEFT_PAREN || LA22_2 == LEFT_SQUARE || (LA22_2 >= NEGATION && LA22_2 <= TILDE) || (LA22_2 >= MINUS && LA22_2 <= PLUS) || LA22_2 == ID)) {
            alt22=1;
          }
        }
switch (alt22) {
case 1:
{
            match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression545);
            if (state.failed)             return;
            int alt21=2;
            alt21=dfa21.predict(input);
switch (alt21) {
case 1:
{
                pushFollow(FOLLOW_operator_in_exclusiveOrExpression559);
                operator();
                state._fsp--;
                if (state.failed)                 return;
                pushFollow(FOLLOW_shiftExpression_in_exclusiveOrExpression561);
                shiftExpression();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
case 2:
{
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression569);
            andExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
    }
  }
break;
default :
break loop22;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
