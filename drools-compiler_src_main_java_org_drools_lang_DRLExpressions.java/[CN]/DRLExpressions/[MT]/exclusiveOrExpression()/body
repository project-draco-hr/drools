{
  DRLExpressions.exclusiveOrExpression_return retval=new DRLExpressions.exclusiveOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token XOR50=null;
  DRLExpressions.andExpression_return andExpression49=null;
  DRLExpressions.andExpression_return andExpression51=null;
  Object XOR50_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression549);
      andExpression49=andExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,andExpression49.getTree());
      loop18:       do {
        int alt18=2;
        int LA18_0=input.LA(1);
        if ((LA18_0 == XOR)) {
          alt18=1;
        }
switch (alt18) {
case 1:
{
            XOR50=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression553);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              XOR50_tree=(Object)adaptor.create(XOR50);
              root_0=(Object)adaptor.becomeRoot(XOR50_tree,root_0);
            }
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression556);
            andExpression51=andExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,andExpression51.getTree());
          }
        break;
default :
      break loop18;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
