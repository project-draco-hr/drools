{
  BaseDescr result=null;
  BaseDescr left=null;
  try {
{
      pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression2119);
      left=multiplicativeExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
      }
      loop45:       do {
        int alt45=2;
        int LA45_0=input.LA(1);
        if (((LA45_0 >= MINUS && LA45_0 <= PLUS)) && (synpred13_DRLExpressions())) {
          alt45=1;
        }
switch (alt45) {
case 1:
{
            if ((input.LA(1) >= MINUS && input.LA(1) <= PLUS)) {
              input.consume();
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return result;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression2148);
            multiplicativeExpression();
            state._fsp--;
            if (state.failed)             return result;
          }
        break;
default :
      break loop45;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
