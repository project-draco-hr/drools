{
  try {
{
      pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression873);
      multiplicativeExpression();
      state._fsp--;
      if (state.failed)       return;
      loop32:       do {
        int alt32=2;
        alt32=dfa32.predict(input);
switch (alt32) {
case 1:
{
            if ((input.LA(1) >= MINUS && input.LA(1) <= PLUS)) {
              input.consume();
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression892);
            multiplicativeExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      break loop32;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
