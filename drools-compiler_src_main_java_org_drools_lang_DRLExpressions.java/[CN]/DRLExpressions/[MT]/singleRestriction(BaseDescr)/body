{
  BaseDescr result=null;
  DRLExpressions.operator_return op=null;
  DRLExpressions.shiftExpression_return value=null;
  try {
    int alt34=2;
    int LA34_0=input.LA(1);
    if (((LA34_0 >= EQUALS && LA34_0 <= LESS))) {
      alt34=1;
    }
 else     if ((LA34_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
      alt34=1;
    }
 else     if ((LA34_0 == LEFT_PAREN)) {
      alt34=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return result;
      }
      NoViableAltException nvae=new NoViableAltException("",34,0,input);
      throw nvae;
    }
switch (alt34) {
case 1:
{
        pushFollow(FOLLOW_operator_in_singleRestriction1452);
        op=operator();
        state._fsp--;
        if (state.failed)         return result;
        pushFollow(FOLLOW_shiftExpression_in_singleRestriction1456);
        value=shiftExpression();
        state._fsp--;
        if (state.failed)         return result;
        if (state.backtracking == 0) {
          if (buildDescr) {
            BaseDescr descr=((value != null ? value.result : null) != null && ((!((value != null ? value.result : null) instanceof AtomicExprDescr)) || ((value != null ? input.toString(value.start,value.stop) : null).equals(((AtomicExprDescr)(value != null ? value.result : null)).getExpression())))) ? (value != null ? value.result : null) : new AtomicExprDescr((value != null ? input.toString(value.start,value.stop) : null));
            result=new RelationalExprDescr((op != null ? op.opr : null),(op != null ? op.negated : false),(op != null ? op.params : null),inp,descr);
          }
        }
      }
    break;
case 2:
{
    match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_singleRestriction1474);
    if (state.failed)     return result;
    pushFollow(FOLLOW_orRestriction_in_singleRestriction1476);
    orRestriction(inp);
    state._fsp--;
    if (state.failed)     return result;
    match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_singleRestriction1479);
    if (state.failed)     return result;
  }
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
