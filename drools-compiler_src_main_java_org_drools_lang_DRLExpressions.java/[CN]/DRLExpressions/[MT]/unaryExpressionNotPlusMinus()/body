{
  try {
    int alt30=4;
    alt30=dfa30.predict(input);
switch (alt30) {
case 1:
{
        match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus850);
        if (state.failed)         return;
        pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus852);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus861);
    if (state.failed)     return;
    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus863);
    unaryExpression();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 3:
{
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus877);
castExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus887);
primary();
state._fsp--;
if (state.failed) return;
loop28: do {
int alt28=2;
alt28=dfa28.predict(input);
switch (alt28) {
case 1:
{
  pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus894);
  selector();
  state._fsp--;
  if (state.failed)   return;
}
break;
default :
break loop28;
}
}
 while (true);
int alt29=2;
alt29=dfa29.predict(input);
switch (alt29) {
case 1:
{
if ((input.LA(1) >= DECR && input.LA(1) <= INCR)) {
input.consume();
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
