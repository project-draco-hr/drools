{
  DRLExpressions.unaryExpressionNotPlusMinus_return retval=new DRLExpressions.unaryExpressionNotPlusMinus_return();
  retval.start=input.LT(1);
  BaseDescr left=null;
  boolean isLeft=false;
  try {
    int alt41=4;
    alt41=dfa41.predict(input);
switch (alt41) {
case 1:
{
        match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus1553);
        if (state.failed)         return retval;
        pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1555);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
      }
    break;
case 2:
{
    match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus1564);
    if (state.failed)     return retval;
    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1566);
    unaryExpression();
    state._fsp--;
    if (state.failed)     return retval;
  }
break;
case 3:
{
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus1580);
castExpression();
state._fsp--;
if (state.failed) return retval;
}
break;
case 4:
{
if (state.backtracking == 0) {
isLeft=helper.getLeftMostExpr() == null;
}
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus1602);
left=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) {
if (buildDescr && state.backtracking == 0) {
retval.result=left;
}
}
loop39: do {
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == DOT) && (synpred14_DRLExpressions())) {
alt39=1;
}
 else if ((LA39_0 == LEFT_SQUARE) && (synpred14_DRLExpressions())) {
alt39=1;
}
switch (alt39) {
case 1:
{
  pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus1619);
  selector();
  state._fsp--;
  if (state.failed)   return retval;
}
break;
default :
break loop39;
}
}
 while (true);
if (state.backtracking == 0) {
if (buildDescr && state.backtracking == 0 && isLeft) {
helper.setLeftMostExpr(input.toString(retval.start,input.LT(-1)));
}
}
int alt40=2;
int LA40_0=input.LA(1);
if (((LA40_0 >= DECR && LA40_0 <= INCR)) && (synpred15_DRLExpressions())) {
alt40=1;
}
switch (alt40) {
case 1:
{
if ((input.LA(1) >= DECR && input.LA(1) <= INCR)) {
input.consume();
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
