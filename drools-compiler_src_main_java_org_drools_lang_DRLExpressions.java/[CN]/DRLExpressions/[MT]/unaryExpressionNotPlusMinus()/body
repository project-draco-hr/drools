{
  BaseDescr result=null;
  BaseDescr left=null;
  try {
    int alt40=4;
    alt40=dfa40.predict(input);
switch (alt40) {
case 1:
{
        match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus1560);
        if (state.failed)         return result;
        pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1562);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return result;
      }
    break;
case 2:
{
    match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus1571);
    if (state.failed)     return result;
    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1573);
    unaryExpression();
    state._fsp--;
    if (state.failed)     return result;
  }
break;
case 3:
{
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus1587);
castExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 4:
{
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus1599);
left=primary();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
if (buildDescr && state.backtracking == 0) {
result=left;
}
}
loop38: do {
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == DOT) && (synpred14_DRLExpressions())) {
alt38=1;
}
 else if ((LA38_0 == LEFT_SQUARE) && (synpred14_DRLExpressions())) {
alt38=1;
}
switch (alt38) {
case 1:
{
  pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus1616);
  selector();
  state._fsp--;
  if (state.failed)   return result;
}
break;
default :
break loop38;
}
}
 while (true);
int alt39=2;
int LA39_0=input.LA(1);
if (((LA39_0 >= DECR && LA39_0 <= INCR)) && (synpred15_DRLExpressions())) {
alt39=1;
}
switch (alt39) {
case 1:
{
if ((input.LA(1) >= DECR && input.LA(1) <= INCR)) {
input.consume();
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return result;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
