{
  DRLExpressions.unaryExpressionNotPlusMinus_return retval=new DRLExpressions.unaryExpressionNotPlusMinus_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token TILDE107=null;
  Token NEGATION109=null;
  Token set114=null;
  DRLExpressions.unaryExpression_return unaryExpression108=null;
  DRLExpressions.unaryExpression_return unaryExpression110=null;
  DRLExpressions.castExpression_return castExpression111=null;
  DRLExpressions.primary_return primary112=null;
  DRLExpressions.selector_return selector113=null;
  Object TILDE107_tree=null;
  Object NEGATION109_tree=null;
  Object set114_tree=null;
  try {
    int alt40=4;
    alt40=dfa40.predict(input);
switch (alt40) {
case 1:
{
        root_0=(Object)adaptor.nil();
        TILDE107=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus1293);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          TILDE107_tree=(Object)adaptor.create(TILDE107);
          adaptor.addChild(root_0,TILDE107_tree);
        }
        pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1295);
        unaryExpression108=unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,unaryExpression108.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    NEGATION109=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus1304);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      NEGATION109_tree=(Object)adaptor.create(NEGATION109);
      adaptor.addChild(root_0,NEGATION109_tree);
    }
    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1306);
    unaryExpression110=unaryExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,unaryExpression110.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus1320);
castExpression111=castExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,castExpression111.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus1330);
primary112=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary112.getTree());
loop38: do {
int alt38=2;
alt38=dfa38.predict(input);
switch (alt38) {
case 1:
{
  pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus1337);
  selector113=selector();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,selector113.getTree());
}
break;
default :
break loop38;
}
}
 while (true);
int alt39=2;
alt39=dfa39.predict(input);
switch (alt39) {
case 1:
{
set114=(Token)input.LT(1);
if ((input.LA(1) >= DECR && input.LA(1) <= INCR)) {
input.consume();
if (state.backtracking == 0) adaptor.addChild(root_0,(Object)adaptor.create(set114));
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
