{
  DRLExpressions.conditionalExpression_return retval=new DRLExpressions.conditionalExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token QUESTION36=null;
  Token COLON38=null;
  DRLExpressions.conditionalOrExpression_return conditionalOrExpression35=null;
  DRLExpressions.expression_return expression37=null;
  DRLExpressions.expression_return expression39=null;
  Object QUESTION36_tree=null;
  Object COLON38_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression443);
      conditionalOrExpression35=conditionalOrExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,conditionalOrExpression35.getTree());
      int alt14=2;
      int LA14_0=input.LA(1);
      if ((LA14_0 == QUESTION)) {
        alt14=1;
      }
switch (alt14) {
case 1:
{
          QUESTION36=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression447);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            QUESTION36_tree=(Object)adaptor.create(QUESTION36);
            root_0=(Object)adaptor.becomeRoot(QUESTION36_tree,root_0);
          }
          pushFollow(FOLLOW_expression_in_conditionalExpression450);
          expression37=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expression37.getTree());
          COLON38=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression452);
          if (state.failed)           return retval;
          pushFollow(FOLLOW_expression_in_conditionalExpression455);
          expression39=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expression39.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
