{
  DRLExpressions.arrayCreatorRest_return retval=new DRLExpressions.arrayCreatorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE190=null;
  Token RIGHT_SQUARE191=null;
  Token LEFT_SQUARE192=null;
  Token RIGHT_SQUARE193=null;
  Token RIGHT_SQUARE196=null;
  Token LEFT_SQUARE197=null;
  Token RIGHT_SQUARE199=null;
  Token LEFT_SQUARE200=null;
  Token RIGHT_SQUARE201=null;
  DRLExpressions.arrayInitializer_return arrayInitializer194=null;
  DRLExpressions.expression_return expression195=null;
  DRLExpressions.expression_return expression198=null;
  Object LEFT_SQUARE190_tree=null;
  Object RIGHT_SQUARE191_tree=null;
  Object LEFT_SQUARE192_tree=null;
  Object RIGHT_SQUARE193_tree=null;
  Object RIGHT_SQUARE196_tree=null;
  Object LEFT_SQUARE197_tree=null;
  Object RIGHT_SQUARE199_tree=null;
  Object LEFT_SQUARE200_tree=null;
  Object RIGHT_SQUARE201_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE190=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest2010);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE190_tree=(Object)adaptor.create(LEFT_SQUARE190);
        adaptor.addChild(root_0,LEFT_SQUARE190_tree);
      }
      int alt63=2;
      int LA63_0=input.LA(1);
      if ((LA63_0 == RIGHT_SQUARE)) {
        alt63=1;
      }
 else       if ((LA63_0 == FLOAT || (LA63_0 >= HEX && LA63_0 <= DECIMAL) || LA63_0 == STRING || (LA63_0 >= BOOL && LA63_0 <= NULL) || (LA63_0 >= DECR && LA63_0 <= INCR) || LA63_0 == LESS || LA63_0 == LEFT_PAREN || LA63_0 == LEFT_SQUARE || (LA63_0 >= NEGATION && LA63_0 <= TILDE) || (LA63_0 >= MINUS && LA63_0 <= PLUS) || LA63_0 == ID)) {
        alt63=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",63,0,input);
        throw nvae;
      }
switch (alt63) {
case 1:
{
          RIGHT_SQUARE191=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2020);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            RIGHT_SQUARE191_tree=(Object)adaptor.create(RIGHT_SQUARE191);
            adaptor.addChild(root_0,RIGHT_SQUARE191_tree);
          }
          loop60:           do {
            int alt60=2;
            int LA60_0=input.LA(1);
            if ((LA60_0 == LEFT_SQUARE)) {
              alt60=1;
            }
switch (alt60) {
case 1:
{
                LEFT_SQUARE192=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest2023);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE192_tree=(Object)adaptor.create(LEFT_SQUARE192);
                  adaptor.addChild(root_0,LEFT_SQUARE192_tree);
                }
                RIGHT_SQUARE193=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2025);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE193_tree=(Object)adaptor.create(RIGHT_SQUARE193);
                  adaptor.addChild(root_0,RIGHT_SQUARE193_tree);
                }
              }
            break;
default :
          break loop60;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest2029);
    arrayInitializer194=arrayInitializer();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arrayInitializer194.getTree());
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest2043);
expression195=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression195.getTree());
RIGHT_SQUARE196=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2045);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE196_tree=(Object)adaptor.create(RIGHT_SQUARE196);
  adaptor.addChild(root_0,RIGHT_SQUARE196_tree);
}
loop61: do {
  int alt61=2;
  alt61=dfa61.predict(input);
switch (alt61) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      LEFT_SQUARE197=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest2050);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE197_tree=(Object)adaptor.create(LEFT_SQUARE197);
        adaptor.addChild(root_0,LEFT_SQUARE197_tree);
      }
      pushFollow(FOLLOW_expression_in_arrayCreatorRest2052);
      expression198=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression198.getTree());
      RIGHT_SQUARE199=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2054);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_SQUARE199_tree=(Object)adaptor.create(RIGHT_SQUARE199);
        adaptor.addChild(root_0,RIGHT_SQUARE199_tree);
      }
    }
  break;
default :
break loop61;
}
}
 while (true);
loop62: do {
int alt62=2;
int LA62_0=input.LA(1);
if ((LA62_0 == LEFT_SQUARE)) {
int LA62_2=input.LA(2);
if ((LA62_2 == RIGHT_SQUARE)) {
int LA62_3=input.LA(3);
if ((synpred31_DRLExpressions())) {
  alt62=1;
}
}
}
switch (alt62) {
case 1:
{
LEFT_SQUARE200=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest2066);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_SQUARE200_tree=(Object)adaptor.create(LEFT_SQUARE200);
  adaptor.addChild(root_0,LEFT_SQUARE200_tree);
}
RIGHT_SQUARE201=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2068);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE201_tree=(Object)adaptor.create(RIGHT_SQUARE201);
  adaptor.addChild(root_0,RIGHT_SQUARE201_tree);
}
}
break;
default :
break loop62;
}
}
 while (true);
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
