{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest2325);
      if (state.failed)       return;
      int alt62=2;
      int LA62_0=input.LA(1);
      if ((LA62_0 == RIGHT_SQUARE)) {
        alt62=1;
      }
 else       if ((LA62_0 == FLOAT || (LA62_0 >= HEX && LA62_0 <= DECIMAL) || LA62_0 == STRING || (LA62_0 >= BOOL && LA62_0 <= NULL) || (LA62_0 >= DECR && LA62_0 <= INCR) || LA62_0 == LESS || LA62_0 == LEFT_PAREN || LA62_0 == LEFT_SQUARE || (LA62_0 >= NEGATION && LA62_0 <= TILDE) || (LA62_0 >= MINUS && LA62_0 <= PLUS) || LA62_0 == ID)) {
        alt62=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",62,0,input);
        throw nvae;
      }
switch (alt62) {
case 1:
{
          match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2335);
          if (state.failed)           return;
          loop59:           do {
            int alt59=2;
            int LA59_0=input.LA(1);
            if ((LA59_0 == LEFT_SQUARE)) {
              alt59=1;
            }
switch (alt59) {
case 1:
{
                match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest2338);
                if (state.failed)                 return;
                match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2340);
                if (state.failed)                 return;
              }
            break;
default :
          break loop59;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest2344);
    arrayInitializer();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest2358);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2360);
if (state.failed) return;
loop60: do {
  int alt60=2;
  alt60=dfa60.predict(input);
switch (alt60) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest2365);
      if (state.failed)       return;
      pushFollow(FOLLOW_expression_in_arrayCreatorRest2367);
      expression();
      state._fsp--;
      if (state.failed)       return;
      match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2369);
      if (state.failed)       return;
    }
  break;
default :
break loop60;
}
}
 while (true);
loop61: do {
int alt61=2;
int LA61_0=input.LA(1);
if ((LA61_0 == LEFT_SQUARE)) {
int LA61_2=input.LA(2);
if ((LA61_2 == RIGHT_SQUARE) && (synpred31_DRLExpressions())) {
alt61=1;
}
}
switch (alt61) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest2381);
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest2383);
if (state.failed) return;
}
break;
default :
break loop61;
}
}
 while (true);
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
