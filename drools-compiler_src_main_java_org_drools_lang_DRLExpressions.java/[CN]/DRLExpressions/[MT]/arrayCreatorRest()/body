{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest1570);
      if (state.failed)       return;
      int alt53=2;
      int LA53_0=input.LA(1);
      if ((LA53_0 == RIGHT_SQUARE)) {
        alt53=1;
      }
 else       if ((LA53_0 == FLOAT || (LA53_0 >= HEX && LA53_0 <= DECIMAL) || LA53_0 == STRING || (LA53_0 >= BOOL && LA53_0 <= NULL) || (LA53_0 >= DECR && LA53_0 <= INCR) || LA53_0 == LESS || LA53_0 == LEFT_PAREN || LA53_0 == LEFT_SQUARE || (LA53_0 >= NEGATION && LA53_0 <= TILDE) || (LA53_0 >= MINUS && LA53_0 <= PLUS) || LA53_0 == ID)) {
        alt53=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",53,0,input);
        throw nvae;
      }
switch (alt53) {
case 1:
{
          match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1578);
          if (state.failed)           return;
          loop50:           do {
            int alt50=2;
            int LA50_0=input.LA(1);
            if ((LA50_0 == LEFT_SQUARE)) {
              alt50=1;
            }
switch (alt50) {
case 1:
{
                match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest1581);
                if (state.failed)                 return;
                match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1583);
                if (state.failed)                 return;
              }
            break;
default :
          break loop50;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest1587);
    arrayInitializer();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest1601);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1603);
if (state.failed) return;
loop51: do {
  int alt51=2;
  alt51=dfa51.predict(input);
switch (alt51) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest1608);
      if (state.failed)       return;
      pushFollow(FOLLOW_expression_in_arrayCreatorRest1610);
      expression();
      state._fsp--;
      if (state.failed)       return;
      match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1612);
      if (state.failed)       return;
    }
  break;
default :
break loop51;
}
}
 while (true);
loop52: do {
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == LEFT_SQUARE)) {
int LA52_2=input.LA(2);
if ((LA52_2 == RIGHT_SQUARE)) {
int LA52_3=input.LA(3);
if ((synpred28_DRLExpressions())) {
  alt52=1;
}
}
}
switch (alt52) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest1624);
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1626);
if (state.failed) return;
}
break;
default :
break loop52;
}
}
 while (true);
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
