{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest1740);
      if (state.failed)       return;
      int alt63=2;
      int LA63_0=input.LA(1);
      if ((LA63_0 == RIGHT_SQUARE)) {
        alt63=1;
      }
 else       if ((LA63_0 == FLOAT || (LA63_0 >= HEX && LA63_0 <= DECIMAL) || LA63_0 == STRING || (LA63_0 >= BOOL && LA63_0 <= NULL) || (LA63_0 >= DECR && LA63_0 <= INCR) || LA63_0 == LESS || LA63_0 == LEFT_PAREN || LA63_0 == LEFT_SQUARE || (LA63_0 >= NEGATION && LA63_0 <= TILDE) || (LA63_0 >= MINUS && LA63_0 <= PLUS) || LA63_0 == ID)) {
        alt63=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",63,0,input);
        throw nvae;
      }
switch (alt63) {
case 1:
{
          match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1748);
          if (state.failed)           return;
          loop60:           do {
            int alt60=2;
            int LA60_0=input.LA(1);
            if ((LA60_0 == LEFT_SQUARE)) {
              alt60=1;
            }
switch (alt60) {
case 1:
{
                match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest1751);
                if (state.failed)                 return;
                match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1753);
                if (state.failed)                 return;
              }
            break;
default :
          break loop60;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest1757);
    arrayInitializer();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest1771);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1773);
if (state.failed) return;
loop61: do {
  int alt61=2;
  alt61=dfa61.predict(input);
switch (alt61) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest1778);
      if (state.failed)       return;
      pushFollow(FOLLOW_expression_in_arrayCreatorRest1780);
      expression();
      state._fsp--;
      if (state.failed)       return;
      match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1782);
      if (state.failed)       return;
    }
  break;
default :
break loop61;
}
}
 while (true);
loop62: do {
int alt62=2;
int LA62_0=input.LA(1);
if ((LA62_0 == LEFT_SQUARE)) {
int LA62_2=input.LA(2);
if ((LA62_2 == RIGHT_SQUARE)) {
int LA62_3=input.LA(3);
if ((synpred33_DRLExpressions())) {
  alt62=1;
}
}
}
switch (alt62) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest1794);
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest1796);
if (state.failed) return;
}
break;
default :
break loop62;
}
}
 while (true);
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
