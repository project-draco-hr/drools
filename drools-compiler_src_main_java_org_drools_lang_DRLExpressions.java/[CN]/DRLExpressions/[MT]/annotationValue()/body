{
  DRLExpressions.annotationValue_return retval=new DRLExpressions.annotationValue_return();
  retval.start=input.LT(1);
  try {
    int alt20=2;
    int LA20_0=input.LA(1);
    if ((LA20_0 == FLOAT || (LA20_0 >= HEX && LA20_0 <= DECIMAL) || (LA20_0 >= STRING && LA20_0 <= TIME_INTERVAL) || (LA20_0 >= BOOL && LA20_0 <= NULL) || (LA20_0 >= DECR && LA20_0 <= INCR) || LA20_0 == LESS || LA20_0 == LEFT_PAREN || LA20_0 == LEFT_SQUARE || (LA20_0 >= NEGATION && LA20_0 <= TILDE) || (LA20_0 >= STAR && LA20_0 <= PLUS) || LA20_0 == ID)) {
      alt20=1;
    }
 else     if ((LA20_0 == LEFT_CURLY)) {
      alt20=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",20,0,input);
      throw nvae;
    }
switch (alt20) {
case 1:
{
        pushFollow(FOLLOW_expression_in_annotationValue1017);
        expression();
        state._fsp--;
        if (state.failed)         return retval;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_annotationArray_in_annotationValue1021);
    annotationArray();
    state._fsp--;
    if (state.failed)     return retval;
  }
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
