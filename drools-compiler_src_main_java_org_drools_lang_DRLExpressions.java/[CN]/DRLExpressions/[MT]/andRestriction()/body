{
  BaseDescr result=null;
  Token lop=null;
  BaseDescr left=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_singleRestriction_in_andRestriction1552);
      left=singleRestriction();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
      }
      loop33:       do {
        int alt33=2;
        alt33=dfa33.predict(input);
switch (alt33) {
case 1:
{
            lop=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_andRestriction1568);
            if (state.failed)             return result;
            pushFollow(FOLLOW_singleRestriction_in_andRestriction1572);
            right=singleRestriction();
            state._fsp--;
            if (state.failed)             return result;
            if (state.backtracking == 0) {
              if (buildDescr) {
                ConstraintConnectiveDescr descr=ConstraintConnectiveDescr.newAnd();
                descr.addOrMerge(result);
                descr.addOrMerge(right);
                result=descr;
              }
            }
          }
        break;
default :
      break loop33;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
