{
  DRLExpressions.shiftExpressionTk_return retval=new DRLExpressions.shiftExpressionTk_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.shiftExpression_return se=null;
  RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
  try {
{
      pushFollow(FOLLOW_shiftExpression_in_shiftExpressionTk1062);
      se=shiftExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_shiftExpression.add(se.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,(Object)adaptor.create(SHIFT_EXPR,(se != null ? input.toString(se.start,se.stop) : null)));
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    throw re;
  }
 finally {
  }
  return retval;
}
