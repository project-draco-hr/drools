{
  int type_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,3)) {
      return;
    }
    int alt8=2;
    int LA8_0=input.LA(1);
    if ((LA8_0 == ID)) {
      int LA8_1=input.LA(2);
      if ((((synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) || (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) || (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))|| (synpred1_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))))) {
        alt8=1;
      }
 else       if ((true)) {
        alt8=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",8,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",8,0,input);
      throw nvae;
    }
switch (alt8) {
case 1:
{
{
          pushFollow(FOLLOW_primitiveType_in_type220);
          primitiveType();
          state._fsp--;
          if (state.failed)           return;
          loop3:           do {
            int alt3=2;
            int LA3_0=input.LA(1);
            if ((LA3_0 == LEFT_SQUARE)) {
              int LA3_2=input.LA(2);
              if ((LA3_2 == RIGHT_SQUARE)) {
                int LA3_3=input.LA(3);
                if ((synpred2_DRLExpressions())) {
                  alt3=1;
                }
              }
            }
switch (alt3) {
case 1:
{
                match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type230);
                if (state.failed)                 return;
                match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type232);
                if (state.failed)                 return;
              }
            break;
default :
          break loop3;
      }
    }
 while (true);
  }
}
break;
case 2:
{
{
match(input,ID,FOLLOW_ID_in_type243);
if (state.failed) return;
int alt4=2;
alt4=dfa4.predict(input);
switch (alt4) {
case 1:
{
    pushFollow(FOLLOW_typeArguments_in_type250);
    typeArguments();
    state._fsp--;
    if (state.failed)     return;
  }
break;
}
loop6: do {
int alt6=2;
int LA6_0=input.LA(1);
if ((LA6_0 == DOT)) {
alt6=1;
}
switch (alt6) {
case 1:
{
  match(input,DOT,FOLLOW_DOT_in_type255);
  if (state.failed)   return;
  match(input,ID,FOLLOW_ID_in_type257);
  if (state.failed)   return;
  int alt5=2;
  alt5=dfa5.predict(input);
switch (alt5) {
case 1:
{
      pushFollow(FOLLOW_typeArguments_in_type264);
      typeArguments();
      state._fsp--;
      if (state.failed)       return;
    }
  break;
}
}
break;
default :
break loop6;
}
}
 while (true);
loop7: do {
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == LEFT_SQUARE)) {
int LA7_2=input.LA(2);
if ((LA7_2 == RIGHT_SQUARE)) {
int LA7_3=input.LA(3);
if ((synpred5_DRLExpressions())) {
alt7=1;
}
}
}
switch (alt7) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type279);
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type281);
if (state.failed) return;
}
break;
default :
break loop7;
}
}
 while (true);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,3,type_StartIndex);
}
}
return;
}
