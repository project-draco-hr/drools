{
  try {
{
      pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression497);
      exclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return;
      loop20:       do {
        int alt20=2;
        int LA20_0=input.LA(1);
        if ((LA20_0 == PIPE)) {
          int LA20_2=input.LA(2);
          if ((LA20_2 == FLOAT || (LA20_2 >= HEX && LA20_2 <= DECIMAL) || LA20_2 == STRING || (LA20_2 >= BOOL && LA20_2 <= NULL) || (LA20_2 >= DECR && LA20_2 <= INCR) || (LA20_2 >= EQUALS && LA20_2 <= LESS) || LA20_2 == LEFT_PAREN || LA20_2 == LEFT_SQUARE || (LA20_2 >= NEGATION && LA20_2 <= TILDE) || (LA20_2 >= MINUS && LA20_2 <= PLUS) || LA20_2 == ID)) {
            alt20=1;
          }
        }
switch (alt20) {
case 1:
{
            match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression501);
            if (state.failed)             return;
            int alt19=2;
            alt19=dfa19.predict(input);
switch (alt19) {
case 1:
{
                pushFollow(FOLLOW_operator_in_inclusiveOrExpression514);
                operator();
                state._fsp--;
                if (state.failed)                 return;
                pushFollow(FOLLOW_shiftExpression_in_inclusiveOrExpression516);
                shiftExpression();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
case 2:
{
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression524);
            exclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
    }
  }
break;
default :
break loop20;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
