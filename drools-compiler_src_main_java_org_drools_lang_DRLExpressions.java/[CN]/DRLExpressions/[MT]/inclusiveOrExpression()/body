{
  DRLExpressions.inclusiveOrExpression_return retval=new DRLExpressions.inclusiveOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PIPE47=null;
  DRLExpressions.exclusiveOrExpression_return exclusiveOrExpression46=null;
  DRLExpressions.exclusiveOrExpression_return exclusiveOrExpression48=null;
  Object PIPE47_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression524);
      exclusiveOrExpression46=exclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,exclusiveOrExpression46.getTree());
      loop17:       do {
        int alt17=2;
        int LA17_0=input.LA(1);
        if ((LA17_0 == PIPE)) {
          alt17=1;
        }
switch (alt17) {
case 1:
{
            PIPE47=(Token)match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression528);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              PIPE47_tree=(Object)adaptor.create(PIPE47);
              root_0=(Object)adaptor.becomeRoot(PIPE47_tree,root_0);
            }
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression531);
            exclusiveOrExpression48=exclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,exclusiveOrExpression48.getTree());
          }
        break;
default :
      break loop17;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
