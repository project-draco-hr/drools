{
  BaseDescr result=null;
  BaseDescr left=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression988);
      left=exclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
      }
      loop21:       do {
        int alt21=2;
        int LA21_0=input.LA(1);
        if ((LA21_0 == PIPE)) {
          alt21=1;
        }
switch (alt21) {
case 1:
{
            match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression996);
            if (state.failed)             return result;
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression1000);
            right=exclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return result;
            if (state.backtracking == 0) {
              if (buildDescr) {
                ConstraintConnectiveDescr descr=ConstraintConnectiveDescr.newIncOr();
                descr.addOrMerge(result);
                descr.addOrMerge(right);
                result=descr;
              }
            }
          }
        break;
default :
      break loop21;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
