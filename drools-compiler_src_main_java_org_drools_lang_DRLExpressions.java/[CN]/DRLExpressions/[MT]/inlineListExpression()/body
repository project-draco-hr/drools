{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression1284);
      if (state.failed)       return;
      int alt39=2;
      int LA39_0=input.LA(1);
      if ((LA39_0 == FLOAT || (LA39_0 >= HEX && LA39_0 <= DECIMAL) || LA39_0 == STRING || (LA39_0 >= BOOL && LA39_0 <= NULL) || (LA39_0 >= DECR && LA39_0 <= INCR) || LA39_0 == LESS || LA39_0 == LEFT_PAREN || LA39_0 == LEFT_SQUARE || (LA39_0 >= NEGATION && LA39_0 <= TILDE) || (LA39_0 >= MINUS && LA39_0 <= PLUS) || LA39_0 == ID)) {
        alt39=1;
      }
switch (alt39) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_inlineListExpression1286);
          expressionList();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression1289);
  if (state.failed)   return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
