{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression1282);
      if (state.failed)       return;
      int alt38=2;
      int LA38_0=input.LA(1);
      if ((LA38_0 == FLOAT || (LA38_0 >= HEX && LA38_0 <= DECIMAL) || LA38_0 == STRING || (LA38_0 >= BOOL && LA38_0 <= NULL) || (LA38_0 >= DECR && LA38_0 <= INCR) || LA38_0 == LESS || LA38_0 == LEFT_PAREN || LA38_0 == LEFT_SQUARE || (LA38_0 >= NEGATION && LA38_0 <= TILDE) || (LA38_0 >= MINUS && LA38_0 <= PLUS) || LA38_0 == ID)) {
        alt38=1;
      }
switch (alt38) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_inlineListExpression1284);
          expressionList();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression1287);
  if (state.failed)   return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
