{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression2587);
      if (state.failed)       return;
      int alt51=2;
      int LA51_0=input.LA(1);
      if ((LA51_0 == FLOAT || (LA51_0 >= HEX && LA51_0 <= DECIMAL) || (LA51_0 >= STRING && LA51_0 <= TIME_INTERVAL) || (LA51_0 >= BOOL && LA51_0 <= NULL) || (LA51_0 >= DECR && LA51_0 <= INCR) || LA51_0 == LESS || LA51_0 == LEFT_PAREN || LA51_0 == LEFT_SQUARE || (LA51_0 >= NEGATION && LA51_0 <= TILDE) || (LA51_0 >= MINUS && LA51_0 <= PLUS) || LA51_0 == ID)) {
        alt51=1;
      }
switch (alt51) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_inlineListExpression2589);
          expressionList();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression2592);
  if (state.failed)   return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
