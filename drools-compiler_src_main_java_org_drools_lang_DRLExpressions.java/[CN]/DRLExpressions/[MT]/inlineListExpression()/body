{
  DRLExpressions.inlineListExpression_return retval=new DRLExpressions.inlineListExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE152=null;
  Token RIGHT_SQUARE154=null;
  DRLExpressions.expressionList_return expressionList153=null;
  Object LEFT_SQUARE152_tree=null;
  Object RIGHT_SQUARE154_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE152=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression1708);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE152_tree=(Object)adaptor.create(LEFT_SQUARE152);
        adaptor.addChild(root_0,LEFT_SQUARE152_tree);
      }
      int alt48=2;
      int LA48_0=input.LA(1);
      if ((LA48_0 == FLOAT || (LA48_0 >= HEX && LA48_0 <= DECIMAL) || LA48_0 == STRING || (LA48_0 >= BOOL && LA48_0 <= NULL) || (LA48_0 >= DECR && LA48_0 <= INCR) || LA48_0 == LESS || LA48_0 == LEFT_PAREN || LA48_0 == LEFT_SQUARE || (LA48_0 >= NEGATION && LA48_0 <= TILDE) || (LA48_0 >= MINUS && LA48_0 <= PLUS) || LA48_0 == ID)) {
        alt48=1;
      }
switch (alt48) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_inlineListExpression1710);
          expressionList153=expressionList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expressionList153.getTree());
        }
      break;
  }
  RIGHT_SQUARE154=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression1713);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    RIGHT_SQUARE154_tree=(Object)adaptor.create(RIGHT_SQUARE154);
    adaptor.addChild(root_0,RIGHT_SQUARE154_tree);
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
