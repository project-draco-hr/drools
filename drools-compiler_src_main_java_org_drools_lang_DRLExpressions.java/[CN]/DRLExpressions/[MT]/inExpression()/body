{
  try {
{
      pushFollow(FOLLOW_relationalExpression_in_inExpression687);
      relationalExpression();
      state._fsp--;
      if (state.failed)       return;
      int alt29=2;
      int LA29_0=input.LA(1);
      if ((LA29_0 == ID)) {
        int LA29_1=input.LA(2);
        if (((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))))) {
          alt29=1;
        }
      }
switch (alt29) {
case 1:
{
          int alt27=2;
          int LA27_0=input.LA(1);
          if ((LA27_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))))) {
            int LA27_1=input.LA(2);
            if ((LA27_1 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
              alt27=1;
            }
          }
switch (alt27) {
case 1:
{
              pushFollow(FOLLOW_not_key_in_inExpression690);
              not_key();
              state._fsp--;
              if (state.failed)               return;
            }
          break;
      }
      pushFollow(FOLLOW_in_key_in_inExpression693);
      in_key();
      state._fsp--;
      if (state.failed)       return;
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inExpression695);
      if (state.failed)       return;
      pushFollow(FOLLOW_expression_in_inExpression697);
      expression();
      state._fsp--;
      if (state.failed)       return;
      loop28:       do {
        int alt28=2;
        int LA28_0=input.LA(1);
        if ((LA28_0 == COMMA)) {
          alt28=1;
        }
switch (alt28) {
case 1:
{
            match(input,COMMA,FOLLOW_COMMA_in_inExpression700);
            if (state.failed)             return;
            pushFollow(FOLLOW_expression_in_inExpression702);
            expression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      break loop28;
  }
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inExpression706);
if (state.failed) return;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
