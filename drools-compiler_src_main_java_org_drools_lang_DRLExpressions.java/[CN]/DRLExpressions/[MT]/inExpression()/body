{
  DRLExpressions.inExpression_return retval=new DRLExpressions.inExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN61=null;
  Token COMMA63=null;
  Token RIGHT_PAREN65=null;
  Token LEFT_PAREN66=null;
  Token COMMA68=null;
  Token RIGHT_PAREN70=null;
  DRLExpressions.relationalExpression_return rel=null;
  DRLExpressions.in_key_return in=null;
  DRLExpressions.not_key_return not_key60=null;
  DRLExpressions.expression_return expression62=null;
  DRLExpressions.expression_return expression64=null;
  DRLExpressions.expression_return expression67=null;
  DRLExpressions.expression_return expression69=null;
  Object LEFT_PAREN61_tree=null;
  Object COMMA63_tree=null;
  Object RIGHT_PAREN65_tree=null;
  Object LEFT_PAREN66_tree=null;
  Object COMMA68_tree=null;
  Object RIGHT_PAREN70_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  RewriteRuleSubtreeStream stream_relationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalExpression");
  RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
  RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
  try {
{
{
        pushFollow(FOLLOW_relationalExpression_in_inExpression790);
        rel=relationalExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_relationalExpression.add(rel.getTree());
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(Object)adaptor.nil();
{
            adaptor.addChild(root_0,stream_relationalExpression.nextTree());
          }
          retval.tree=root_0;
        }
      }
      int alt27=3;
      alt27=dfa27.predict(input);
switch (alt27) {
case 1:
{
          pushFollow(FOLLOW_not_key_in_inExpression803);
          not_key60=not_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_not_key.add(not_key60.getTree());
          pushFollow(FOLLOW_in_key_in_inExpression807);
          in=in_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_in_key.add(in.getTree());
          LEFT_PAREN61=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inExpression809);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_LEFT_PAREN.add(LEFT_PAREN61);
          pushFollow(FOLLOW_expression_in_inExpression811);
          expression62=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_expression.add(expression62.getTree());
          loop25:           do {
            int alt25=2;
            int LA25_0=input.LA(1);
            if ((LA25_0 == COMMA)) {
              alt25=1;
            }
switch (alt25) {
case 1:
{
                COMMA63=(Token)match(input,COMMA,FOLLOW_COMMA_in_inExpression814);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_COMMA.add(COMMA63);
                pushFollow(FOLLOW_expression_in_inExpression816);
                expression64=expression();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_expression.add(expression64.getTree());
              }
            break;
default :
          break loop25;
      }
    }
 while (true);
    RIGHT_PAREN65=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inExpression820);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_RIGHT_PAREN.add(RIGHT_PAREN65);
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel",rel != null ? rel.tree : null);
      root_0=(Object)adaptor.nil();
{
{
          Object root_1=(Object)adaptor.nil();
          root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(NEG_OPERATOR,(in != null ? input.toString(in.start,in.stop) : null)),root_1);
          adaptor.addChild(root_1,stream_rel.nextTree());
          if (!(stream_expression.hasNext())) {
            throw new RewriteEarlyExitException();
          }
          while (stream_expression.hasNext()) {
            adaptor.addChild(root_1,stream_expression.nextTree());
          }
          stream_expression.reset();
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
case 2:
{
pushFollow(FOLLOW_in_key_in_inExpression843);
in=in_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_in_key.add(in.getTree());
LEFT_PAREN66=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inExpression845);
if (state.failed) return retval;
if (state.backtracking == 0) stream_LEFT_PAREN.add(LEFT_PAREN66);
pushFollow(FOLLOW_expression_in_inExpression847);
expression67=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_expression.add(expression67.getTree());
loop26: do {
  int alt26=2;
  int LA26_0=input.LA(1);
  if ((LA26_0 == COMMA)) {
    alt26=1;
  }
switch (alt26) {
case 1:
{
      COMMA68=(Token)match(input,COMMA,FOLLOW_COMMA_in_inExpression850);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_COMMA.add(COMMA68);
      pushFollow(FOLLOW_expression_in_inExpression852);
      expression69=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(expression69.getTree());
    }
  break;
default :
break loop26;
}
}
 while (true);
RIGHT_PAREN70=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inExpression856);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN70);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel",rel != null ? rel.tree : null);
RewriteRuleSubtreeStream stream_in=new RewriteRuleSubtreeStream(adaptor,"rule in",in != null ? in.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_in.nextNode(),root_1);
adaptor.addChild(root_1,stream_rel.nextTree());
if (!(stream_expression.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_expression.hasNext()) {
  adaptor.addChild(root_1,stream_expression.nextTree());
}
stream_expression.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
retval.se1=(rel != null ? rel.se1 : null);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
