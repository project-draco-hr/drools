{
  BaseDescr result=null;
  BaseDescr left=null;
  try {
{
      pushFollow(FOLLOW_relationalExpression_in_inExpression1017);
      left=relationalExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr && state.backtracking == 0) {
          result=left;
        }
      }
      int alt27=3;
      int LA27_0=input.LA(1);
      if ((LA27_0 == ID)) {
        int LA27_1=input.LA(2);
        if ((LA27_1 == ID)) {
          int LA27_3=input.LA(3);
          if ((LA27_3 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
            alt27=1;
          }
        }
 else         if ((LA27_1 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
          alt27=2;
        }
      }
switch (alt27) {
case 1:
{
          pushFollow(FOLLOW_not_key_in_inExpression1027);
          not_key();
          state._fsp--;
          if (state.failed)           return result;
          pushFollow(FOLLOW_in_key_in_inExpression1031);
          in_key();
          state._fsp--;
          if (state.failed)           return result;
          match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inExpression1033);
          if (state.failed)           return result;
          pushFollow(FOLLOW_expression_in_inExpression1035);
          expression();
          state._fsp--;
          if (state.failed)           return result;
          loop25:           do {
            int alt25=2;
            int LA25_0=input.LA(1);
            if ((LA25_0 == COMMA)) {
              alt25=1;
            }
switch (alt25) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_inExpression1038);
                if (state.failed)                 return result;
                pushFollow(FOLLOW_expression_in_inExpression1040);
                expression();
                state._fsp--;
                if (state.failed)                 return result;
              }
            break;
default :
          break loop25;
      }
    }
 while (true);
    match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inExpression1044);
    if (state.failed)     return result;
  }
break;
case 2:
{
pushFollow(FOLLOW_in_key_in_inExpression1054);
in_key();
state._fsp--;
if (state.failed) return result;
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inExpression1056);
if (state.failed) return result;
pushFollow(FOLLOW_expression_in_inExpression1058);
expression();
state._fsp--;
if (state.failed) return result;
loop26: do {
  int alt26=2;
  int LA26_0=input.LA(1);
  if ((LA26_0 == COMMA)) {
    alt26=1;
  }
switch (alt26) {
case 1:
{
      match(input,COMMA,FOLLOW_COMMA_in_inExpression1061);
      if (state.failed)       return result;
      pushFollow(FOLLOW_expression_in_inExpression1063);
      expression();
      state._fsp--;
      if (state.failed)       return result;
    }
  break;
default :
break loop26;
}
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inExpression1067);
if (state.failed) return result;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
