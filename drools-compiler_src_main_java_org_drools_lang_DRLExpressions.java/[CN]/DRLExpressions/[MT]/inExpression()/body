{
  BaseDescr result=null;
  BaseDescr left=null;
  DRLExpressions.expression_return e1=null;
  DRLExpressions.expression_return e2=null;
  ConstraintConnectiveDescr descr=null;
  BaseDescr leftDescr=null;
  BindingDescr binding=null;
  try {
{
      pushFollow(FOLLOW_relationalExpression_in_inExpression1492);
      left=relationalExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
        if (left instanceof BindingDescr) {
          binding=(BindingDescr)left;
          leftDescr=new AtomicExprDescr(binding.getExpression());
        }
 else {
          leftDescr=left;
        }
      }
      int alt34=3;
      int LA34_0=input.LA(1);
      if ((LA34_0 == ID)) {
        int LA34_1=input.LA(2);
        if ((LA34_1 == ID)) {
          int LA34_3=input.LA(3);
          if ((LA34_3 == LEFT_PAREN) && ((synpred7_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
            alt34=1;
          }
        }
 else         if ((LA34_1 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
          alt34=2;
        }
      }
switch (alt34) {
case 1:
{
          pushFollow(FOLLOW_not_key_in_inExpression1512);
          not_key();
          state._fsp--;
          if (state.failed)           return result;
          pushFollow(FOLLOW_in_key_in_inExpression1516);
          in_key();
          state._fsp--;
          if (state.failed)           return result;
          match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inExpression1518);
          if (state.failed)           return result;
          if (state.backtracking == 0) {
            helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
          }
          pushFollow(FOLLOW_expression_in_inExpression1540);
          e1=expression();
          state._fsp--;
          if (state.failed)           return result;
          if (state.backtracking == 0) {
            descr=ConstraintConnectiveDescr.newAnd();
            RelationalExprDescr rel=new RelationalExprDescr("!=",false,null,leftDescr,(e1 != null ? e1.result : null));
            descr.addOrMerge(rel);
            result=descr;
          }
          loop32:           do {
            int alt32=2;
            int LA32_0=input.LA(1);
            if ((LA32_0 == COMMA)) {
              alt32=1;
            }
switch (alt32) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_inExpression1559);
                if (state.failed)                 return result;
                pushFollow(FOLLOW_expression_in_inExpression1563);
                e2=expression();
                state._fsp--;
                if (state.failed)                 return result;
                if (state.backtracking == 0) {
                  RelationalExprDescr rel=new RelationalExprDescr("!=",false,null,leftDescr,(e2 != null ? e2.result : null));
                  descr.addOrMerge(rel);
                }
              }
            break;
default :
          break loop32;
      }
    }
 while (true);
    match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inExpression1584);
    if (state.failed)     return result;
    if (state.backtracking == 0) {
      helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
    }
  }
break;
case 2:
{
pushFollow(FOLLOW_in_key_in_inExpression1600);
in_key();
state._fsp--;
if (state.failed) return result;
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inExpression1602);
if (state.failed) return result;
if (state.backtracking == 0) {
  helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_in_inExpression1624);
e1=expression();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
  descr=ConstraintConnectiveDescr.newOr();
  RelationalExprDescr rel=new RelationalExprDescr("==",false,null,leftDescr,(e1 != null ? e1.result : null));
  descr.addOrMerge(rel);
  result=descr;
}
loop33: do {
  int alt33=2;
  int LA33_0=input.LA(1);
  if ((LA33_0 == COMMA)) {
    alt33=1;
  }
switch (alt33) {
case 1:
{
      match(input,COMMA,FOLLOW_COMMA_in_inExpression1643);
      if (state.failed)       return result;
      pushFollow(FOLLOW_expression_in_inExpression1647);
      e2=expression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        RelationalExprDescr rel=new RelationalExprDescr("==",false,null,leftDescr,(e2 != null ? e2.result : null));
        descr.addOrMerge(rel);
      }
    }
  break;
default :
break loop33;
}
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inExpression1668);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
break;
}
}
if (state.backtracking == 0) {
if (binding != null && descr != null) descr.addOrMerge(binding);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
