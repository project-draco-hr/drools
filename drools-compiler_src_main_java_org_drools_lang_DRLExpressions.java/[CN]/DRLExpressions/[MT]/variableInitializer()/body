{
  DRLExpressions.variableInitializer_return retval=new DRLExpressions.variableInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLExpressions.arrayInitializer_return arrayInitializer202=null;
  DRLExpressions.expression_return expression203=null;
  try {
    int alt64=2;
    int LA64_0=input.LA(1);
    if ((LA64_0 == LEFT_CURLY)) {
      alt64=1;
    }
 else     if ((LA64_0 == FLOAT || (LA64_0 >= HEX && LA64_0 <= DECIMAL) || LA64_0 == STRING || (LA64_0 >= BOOL && LA64_0 <= NULL) || (LA64_0 >= DECR && LA64_0 <= INCR) || LA64_0 == LESS || LA64_0 == LEFT_PAREN || LA64_0 == LEFT_SQUARE || (LA64_0 >= NEGATION && LA64_0 <= TILDE) || (LA64_0 >= MINUS && LA64_0 <= PLUS) || LA64_0 == ID)) {
      alt64=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",64,0,input);
      throw nvae;
    }
switch (alt64) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_arrayInitializer_in_variableInitializer2094);
        arrayInitializer202=arrayInitializer();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arrayInitializer202.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_expression_in_variableInitializer2108);
    expression203=expression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,expression203.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
