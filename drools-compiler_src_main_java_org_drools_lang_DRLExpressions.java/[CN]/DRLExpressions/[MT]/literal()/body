{
  DRLExpressions.literal_return retval=new DRLExpressions.literal_return();
  retval.start=input.LT(1);
  Token STRING1=null;
  Token DECIMAL2=null;
  Token HEX3=null;
  Token FLOAT4=null;
  Token BOOL5=null;
  Token NULL6=null;
  Token TIME_INTERVAL7=null;
  try {
    int alt1=7;
switch (input.LA(1)) {
case STRING:
{
        alt1=1;
      }
    break;
case DECIMAL:
{
    alt1=2;
  }
break;
case HEX:
{
alt1=3;
}
break;
case FLOAT:
{
alt1=4;
}
break;
case BOOL:
{
alt1=5;
}
break;
case NULL:
{
alt1=6;
}
break;
case TIME_INTERVAL:
{
alt1=7;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",1,0,input);
throw nvae;
}
switch (alt1) {
case 1:
{
STRING1=(Token)match(input,STRING,FOLLOW_STRING_in_literal83);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(STRING1,DroolsEditorType.STRING_CONST);
}
}
break;
case 2:
{
DECIMAL2=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal100);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(DECIMAL2,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 3:
{
HEX3=(Token)match(input,HEX,FOLLOW_HEX_in_literal116);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(HEX3,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 4:
{
FLOAT4=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal136);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(FLOAT4,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 5:
{
BOOL5=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal154);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(BOOL5,DroolsEditorType.BOOLEAN_CONST);
}
}
break;
case 6:
{
NULL6=(Token)match(input,NULL,FOLLOW_NULL_in_literal173);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(NULL6,DroolsEditorType.NULL_CONST);
}
}
break;
case 7:
{
TIME_INTERVAL7=(Token)match(input,TIME_INTERVAL,FOLLOW_TIME_INTERVAL_in_literal194);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(TIME_INTERVAL7,DroolsEditorType.NULL_CONST);
}
}
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
