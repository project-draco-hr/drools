{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA52_0=input.LA(1);
  int index52_0=input.index();
input.rewind();
s=-1;
if ((LA52_0 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA52_0 == EOF || LA52_0 == FLOAT || (LA52_0 >= HEX && LA52_0 <= DECIMAL) || LA52_0 == STRING || (LA52_0 >= BOOL && LA52_0 <= NULL) || (LA52_0 >= PLUS_ASSIGN && LA52_0 <= INCR) || (LA52_0 >= COLON && LA52_0 <= RIGHT_PAREN) || LA52_0 == RIGHT_SQUARE || (LA52_0 >= RIGHT_CURLY && LA52_0 <= COMMA) || (LA52_0 >= DOUBLE_AMPER && LA52_0 <= PLUS) || (LA52_0 >= ID && LA52_0 <= DIV))) {
s=2;
}
 else if ((LA52_0 == DOT) && ((helper.validateLT(1,".") || helper.validateLT(1,"[")))) {
s=42;
}
input.seek(index52_0);
if (s >= 0) return s;
break;
case 1:
int LA52_1=input.LA(1);
int index52_1=input.index();
input.rewind();
s=-1;
if (((!helper.validateLT(2,"]")))) {
s=43;
}
 else if ((true)) {
s=42;
}
input.seek(index52_1);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),52,_s,input);
error(nvae);
throw nvae;
}
