{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA46_0=input.LA(1);
  int index46_0=input.index();
input.rewind();
s=-1;
if ((LA46_0 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA46_0 == LEFT_PAREN) && (synpred28_DRLExpressions())) {
s=2;
}
 else if ((LA46_0 == EOF || (LA46_0 >= AT && LA46_0 <= INCR) || (LA46_0 >= SEMICOLON && LA46_0 <= EQUALS_ASSIGN) || LA46_0 == RIGHT_PAREN || LA46_0 == RIGHT_SQUARE || (LA46_0 >= RIGHT_CURLY && LA46_0 <= QUESTION) || (LA46_0 >= PIPE && LA46_0 <= PLUS) || (LA46_0 >= ID && LA46_0 <= DIV))) {
s=3;
}
input.seek(index46_0);
if (s >= 0) return s;
break;
case 1:
int LA46_1=input.LA(1);
int index46_1=input.index();
input.rewind();
s=-1;
if ((synpred28_DRLExpressions())) {
s=2;
}
 else if ((true)) {
s=3;
}
input.seek(index46_1);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),46,_s,input);
error(nvae);
throw nvae;
}
