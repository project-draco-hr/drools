{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA61_0=input.LA(1);
  int index61_0=input.index();
input.rewind();
s=-1;
if ((LA61_0 == LEFT_PAREN)) {
s=1;
}
 else if ((LA61_0 == EOF || LA61_0 == FLOAT || (LA61_0 >= HEX && LA61_0 <= DECIMAL) || LA61_0 == STRING || (LA61_0 >= BOOL && LA61_0 <= NULL) || (LA61_0 >= PLUS_ASSIGN && LA61_0 <= INCR) || (LA61_0 >= COLON && LA61_0 <= EQUALS_ASSIGN) || (LA61_0 >= RIGHT_PAREN && LA61_0 <= RIGHT_SQUARE) || (LA61_0 >= RIGHT_CURLY && LA61_0 <= COMMA) || (LA61_0 >= DOUBLE_AMPER && LA61_0 <= PLUS) || (LA61_0 >= ID && LA61_0 <= DIV))) {
s=2;
}
 else if ((LA61_0 == DOT) && ((helper.validateLT(1,".") || helper.validateLT(1,"[")))) {
s=42;
}
input.seek(index61_0);
if (s >= 0) return s;
break;
case 1:
int LA61_1=input.LA(1);
int index61_1=input.index();
input.rewind();
s=-1;
if ((synpred31_DRLExpressions())) {
s=43;
}
 else if ((true)) {
s=42;
}
input.seek(index61_1);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),61,_s,input);
error(nvae);
throw nvae;
}
