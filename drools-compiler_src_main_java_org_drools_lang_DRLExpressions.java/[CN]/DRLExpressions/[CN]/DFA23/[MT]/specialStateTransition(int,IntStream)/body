{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA23_0=input.LA(1);
  int index23_0=input.index();
input.rewind();
s=-1;
if ((LA23_0 == EOF || LA23_0 == FLOAT || (LA23_0 >= HEX && LA23_0 <= DECIMAL) || LA23_0 == STRING || (LA23_0 >= BOOL && LA23_0 <= NULL) || (LA23_0 >= PLUS_ASSIGN && LA23_0 <= INCR) || (LA23_0 >= COLON && LA23_0 <= NOT_EQUALS) || (LA23_0 >= EQUALS_ASSIGN && LA23_0 <= RIGHT_SQUARE) || (LA23_0 >= RIGHT_CURLY && LA23_0 <= COMMA) || (LA23_0 >= DOUBLE_AMPER && LA23_0 <= XOR) || (LA23_0 >= MINUS && LA23_0 <= PLUS) || LA23_0 == ID)) {
s=1;
}
 else if ((LA23_0 == LESS)) {
s=19;
}
 else if ((LA23_0 == GREATER)) {
s=20;
}
 else if (((LA23_0 >= GREATER_EQUALS && LA23_0 <= LESS_EQUALS)) && (synpred8_DRLExpressions())) {
s=40;
}
input.seek(index23_0);
if (s >= 0) return s;
break;
case 1:
int LA23_19=input.LA(1);
int index23_19=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=40;
}
 else if ((true)) {
s=1;
}
input.seek(index23_19);
if (s >= 0) return s;
break;
case 2:
int LA23_20=input.LA(1);
int index23_20=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=40;
}
 else if ((true)) {
s=1;
}
input.seek(index23_20);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),23,_s,input);
error(nvae);
throw nvae;
}
