{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA22_0=input.LA(1);
  int index22_0=input.index();
input.rewind();
s=-1;
if ((LA22_0 == FLOAT || (LA22_0 >= HEX && LA22_0 <= DECIMAL) || LA22_0 == STRING || (LA22_0 >= BOOL && LA22_0 <= INCR) || (LA22_0 >= COLON && LA22_0 <= NOT_EQUALS) || (LA22_0 >= EQUALS_ASSIGN && LA22_0 <= RIGHT_SQUARE) || (LA22_0 >= RIGHT_CURLY && LA22_0 <= COMMA) || (LA22_0 >= DOUBLE_AMPER && LA22_0 <= XOR) || (LA22_0 >= MINUS && LA22_0 <= PLUS) || LA22_0 == ID)) {
s=1;
}
 else if ((LA22_0 == LESS)) {
s=18;
}
 else if ((LA22_0 == GREATER)) {
s=19;
}
 else if (((LA22_0 >= GREATER_EQUALS && LA22_0 <= LESS_EQUALS)) && (synpred7_DRLExpressions())) {
s=40;
}
input.seek(index22_0);
if (s >= 0) return s;
break;
case 1:
int LA22_18=input.LA(1);
int index22_18=input.index();
input.rewind();
s=-1;
if ((synpred7_DRLExpressions())) {
s=40;
}
 else if ((true)) {
s=1;
}
input.seek(index22_18);
if (s >= 0) return s;
break;
case 2:
int LA22_19=input.LA(1);
int index22_19=input.index();
input.rewind();
s=-1;
if ((synpred7_DRLExpressions())) {
s=40;
}
 else if ((true)) {
s=1;
}
input.seek(index22_19);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),22,_s,input);
error(nvae);
throw nvae;
}
