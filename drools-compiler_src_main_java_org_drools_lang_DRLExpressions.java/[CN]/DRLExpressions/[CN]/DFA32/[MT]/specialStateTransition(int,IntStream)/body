{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA32_1=input.LA(1);
  int index32_1=input.index();
input.rewind();
s=-1;
if (((synpred17_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))))) {
s=2;
}
 else if (((synpred18_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))))) {
s=3;
}
 else if (((synpred19_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))))) {
s=4;
}
 else if (((synpred20_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))))) {
s=5;
}
 else if (((synpred21_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))))) {
s=6;
}
 else if (((synpred22_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))))) {
s=7;
}
 else if (((synpred23_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))))) {
s=8;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {
s=9;
}
input.seek(index32_1);
if (s >= 0) return s;
break;
case 1:
int LA32_0=input.LA(1);
int index32_0=input.index();
input.rewind();
s=-1;
if ((LA32_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {
s=1;
}
input.seek(index32_0);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),32,_s,input);
error(nvae);
throw nvae;
}
