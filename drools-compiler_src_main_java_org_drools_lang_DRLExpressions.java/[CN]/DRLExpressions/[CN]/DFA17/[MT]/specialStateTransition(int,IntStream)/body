{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA17_0=input.LA(1);
  int index17_0=input.index();
input.rewind();
s=-1;
if ((LA17_0 == EQUALS) && (synpred8_DRLExpressions())) {
s=1;
}
 else if ((LA17_0 == NOT_EQUALS) && (synpred8_DRLExpressions())) {
s=2;
}
 else if ((LA17_0 == LESS_EQUALS) && (synpred8_DRLExpressions())) {
s=3;
}
 else if ((LA17_0 == GREATER_EQUALS) && (synpred8_DRLExpressions())) {
s=4;
}
 else if ((LA17_0 == LESS)) {
s=5;
}
 else if ((LA17_0 == GREATER) && (synpred8_DRLExpressions())) {
s=6;
}
 else if ((LA17_0 == ID)) {
s=7;
}
 else if ((LA17_0 == FLOAT || (LA17_0 >= HEX && LA17_0 <= DECIMAL) || LA17_0 == STRING || (LA17_0 >= BOOL && LA17_0 <= NULL) || (LA17_0 >= DECR && LA17_0 <= INCR) || LA17_0 == LEFT_PAREN || LA17_0 == LEFT_SQUARE || (LA17_0 >= NEGATION && LA17_0 <= TILDE) || (LA17_0 >= MINUS && LA17_0 <= PLUS))) {
s=8;
}
input.seek(index17_0);
if (s >= 0) return s;
break;
case 1:
int LA17_5=input.LA(1);
int index17_5=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=6;
}
 else if ((true)) {
s=8;
}
input.seek(index17_5);
if (s >= 0) return s;
break;
case 2:
int LA17_7=input.LA(1);
int index17_7=input.index();
input.rewind();
s=-1;
if ((((synpred8_DRLExpressions() && ((helper.isPluggableEvaluator(false)))) || (synpred8_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))))) {
s=6;
}
 else if ((true)) {
s=8;
}
input.seek(index17_7);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),17,_s,input);
error(nvae);
throw nvae;
}
