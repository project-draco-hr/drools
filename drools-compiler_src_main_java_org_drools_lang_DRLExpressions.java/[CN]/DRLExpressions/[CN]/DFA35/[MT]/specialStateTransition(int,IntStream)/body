{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA35_0=input.LA(1);
  int index35_0=input.index();
input.rewind();
s=-1;
if ((LA35_0 == EOF || (LA35_0 >= AT && LA35_0 <= MOD_ASSIGN) || (LA35_0 >= SEMICOLON && LA35_0 <= COLON) || LA35_0 == EQUALS_ASSIGN || LA35_0 == RIGHT_PAREN || LA35_0 == RIGHT_SQUARE || (LA35_0 >= RIGHT_CURLY && LA35_0 <= COMMA) || (LA35_0 >= DOUBLE_AMPER && LA35_0 <= QUESTION) || (LA35_0 >= PIPE && LA35_0 <= XOR))) {
s=1;
}
 else if ((LA35_0 == ID)) {
s=2;
}
 else if ((LA35_0 == EQUALS)) {
s=3;
}
 else if ((LA35_0 == NOT_EQUALS)) {
s=4;
}
 else if ((LA35_0 == LESS)) {
s=20;
}
 else if ((LA35_0 == GREATER)) {
s=21;
}
 else if ((LA35_0 == TILDE) && (synpred8_DRLExpressions())) {
s=28;
}
 else if ((LA35_0 == LESS_EQUALS) && (synpred8_DRLExpressions())) {
s=29;
}
 else if ((LA35_0 == GREATER_EQUALS) && (synpred8_DRLExpressions())) {
s=30;
}
 else if ((LA35_0 == LEFT_PAREN) && (synpred8_DRLExpressions())) {
s=31;
}
input.seek(index35_0);
if (s >= 0) return s;
break;
case 1:
int LA35_2=input.LA(1);
int index35_2=input.index();
input.rewind();
s=-1;
if ((((synpred8_DRLExpressions() && ((helper.isPluggableEvaluator(false)))) || (synpred8_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))))) {
s=31;
}
 else if ((true)) {
s=1;
}
input.seek(index35_2);
if (s >= 0) return s;
break;
case 2:
int LA35_3=input.LA(1);
int index35_3=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=31;
}
 else if ((true)) {
s=1;
}
input.seek(index35_3);
if (s >= 0) return s;
break;
case 3:
int LA35_4=input.LA(1);
int index35_4=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=31;
}
 else if ((true)) {
s=1;
}
input.seek(index35_4);
if (s >= 0) return s;
break;
case 4:
int LA35_20=input.LA(1);
int index35_20=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=31;
}
 else if ((true)) {
s=1;
}
input.seek(index35_20);
if (s >= 0) return s;
break;
case 5:
int LA35_21=input.LA(1);
int index35_21=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=31;
}
 else if ((true)) {
s=1;
}
input.seek(index35_21);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),35,_s,input);
error(nvae);
throw nvae;
}
