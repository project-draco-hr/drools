{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA27_0=input.LA(1);
  int index27_0=input.index();
input.rewind();
s=-1;
if ((LA27_0 == ID)) {
s=1;
}
 else if ((LA27_0 == FLOAT || (LA27_0 >= HEX && LA27_0 <= DECIMAL) || LA27_0 == STRING || (LA27_0 >= BOOL && LA27_0 <= INCR) || (LA27_0 >= COLON && LA27_0 <= NOT_EQUALS) || (LA27_0 >= EQUALS_ASSIGN && LA27_0 <= RIGHT_SQUARE) || (LA27_0 >= RIGHT_CURLY && LA27_0 <= COMMA) || (LA27_0 >= DOUBLE_AMPER && LA27_0 <= XOR) || (LA27_0 >= MINUS && LA27_0 <= PLUS))) {
s=2;
}
 else if ((LA27_0 == LESS)) {
s=18;
}
 else if ((LA27_0 == GREATER)) {
s=19;
}
 else if ((LA27_0 == LESS_EQUALS) && (synpred12_DRLExpressions())) {
s=40;
}
 else if ((LA27_0 == GREATER_EQUALS) && (synpred12_DRLExpressions())) {
s=41;
}
input.seek(index27_0);
if (s >= 0) return s;
break;
case 1:
int LA27_1=input.LA(1);
int index27_1=input.index();
input.rewind();
s=-1;
if ((((synpred12_DRLExpressions() && ((helper.isPluggableEvaluator(false)))) || (synpred12_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))))) {
s=41;
}
 else if ((true)) {
s=2;
}
input.seek(index27_1);
if (s >= 0) return s;
break;
case 2:
int LA27_18=input.LA(1);
int index27_18=input.index();
input.rewind();
s=-1;
if ((synpred12_DRLExpressions())) {
s=41;
}
 else if ((true)) {
s=2;
}
input.seek(index27_18);
if (s >= 0) return s;
break;
case 3:
int LA27_19=input.LA(1);
int index27_19=input.index();
input.rewind();
s=-1;
if ((synpred12_DRLExpressions())) {
s=41;
}
 else if ((true)) {
s=2;
}
input.seek(index27_19);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),27,_s,input);
error(nvae);
throw nvae;
}
