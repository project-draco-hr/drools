{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA29_0=input.LA(1);
  int index29_0=input.index();
input.rewind();
s=-1;
if ((LA29_0 == EOF || (LA29_0 >= AT && LA29_0 <= MOD_ASSIGN) || (LA29_0 >= SEMICOLON && LA29_0 <= NOT_EQUALS) || LA29_0 == EQUALS_ASSIGN || LA29_0 == RIGHT_PAREN || LA29_0 == RIGHT_SQUARE || (LA29_0 >= RIGHT_CURLY && LA29_0 <= COMMA) || (LA29_0 >= DOUBLE_AMPER && LA29_0 <= QUESTION) || (LA29_0 >= PIPE && LA29_0 <= XOR))) {
s=1;
}
 else if ((LA29_0 == ID)) {
s=2;
}
 else if ((LA29_0 == LESS)) {
s=20;
}
 else if ((LA29_0 == GREATER)) {
s=21;
}
 else if ((LA29_0 == LESS_EQUALS) && (synpred8_DRLExpressions())) {
s=28;
}
 else if ((LA29_0 == GREATER_EQUALS) && (synpred8_DRLExpressions())) {
s=29;
}
input.seek(index29_0);
if (s >= 0) return s;
break;
case 1:
int LA29_2=input.LA(1);
int index29_2=input.index();
input.rewind();
s=-1;
if ((((synpred8_DRLExpressions() && ((helper.isPluggableEvaluator(false)))) || (synpred8_DRLExpressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))))) {
s=29;
}
 else if ((true)) {
s=1;
}
input.seek(index29_2);
if (s >= 0) return s;
break;
case 2:
int LA29_20=input.LA(1);
int index29_20=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=29;
}
 else if ((true)) {
s=1;
}
input.seek(index29_20);
if (s >= 0) return s;
break;
case 3:
int LA29_21=input.LA(1);
int index29_21=input.index();
input.rewind();
s=-1;
if ((synpred8_DRLExpressions())) {
s=29;
}
 else if ((true)) {
s=1;
}
input.seek(index29_21);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),29,_s,input);
error(nvae);
throw nvae;
}
