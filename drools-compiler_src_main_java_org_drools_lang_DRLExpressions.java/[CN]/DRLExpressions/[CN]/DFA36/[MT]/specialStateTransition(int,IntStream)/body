{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA36_0=input.LA(1);
  int index36_0=input.index();
input.rewind();
s=-1;
if ((LA36_0 == EOF || LA36_0 == FLOAT || (LA36_0 >= HEX && LA36_0 <= DECIMAL) || LA36_0 == STRING || (LA36_0 >= BOOL && LA36_0 <= INCR) || (LA36_0 >= SEMICOLON && LA36_0 <= RIGHT_PAREN) || LA36_0 == RIGHT_SQUARE || (LA36_0 >= RIGHT_CURLY && LA36_0 <= COMMA) || (LA36_0 >= DOUBLE_AMPER && LA36_0 <= PLUS) || (LA36_0 >= ID && LA36_0 <= DIV))) {
s=1;
}
 else if ((LA36_0 == LEFT_SQUARE)) {
s=38;
}
 else if ((LA36_0 == DOT) && (synpred14_DRLExpressions())) {
s=44;
}
input.seek(index36_0);
if (s >= 0) return s;
break;
case 1:
int LA36_38=input.LA(1);
int index36_38=input.index();
input.rewind();
s=-1;
if ((synpred14_DRLExpressions())) {
s=44;
}
 else if ((true)) {
s=1;
}
input.seek(index36_38);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),36,_s,input);
error(nvae);
throw nvae;
}
