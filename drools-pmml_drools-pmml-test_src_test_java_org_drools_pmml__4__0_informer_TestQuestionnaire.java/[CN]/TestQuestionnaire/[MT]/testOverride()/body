{
  setKSession(getModelSession(source,VERBOSE));
  setKbase(getKSession().getKnowledgeBase());
  getKSession().fireAllRules();
  getKSession().getWorkingMemoryEntryPoint("in_PetalLength").insert(2.2);
  getKSession().fireAllRules();
  getKSession().getWorkingMemoryEntryPoint("in_PetalNumber").insert(5);
  getKSession().fireAllRules();
  System.err.println(reportWMObjects(getKSession()));
  FactType nump=getKbase().getFactType("org.drools.pmml_4_0.test","PetalNumber");
  FactType lenp=getKbase().getFactType("org.drools.pmml_4_0.test","PetalLength");
  Collection c=getKSession().getObjects(new ClassObjectFilter(DomainModelAssociation.class));
  Iterator iter=c.iterator();
  assertEquals(2,c.size());
  DomainModelAssociation dma1=(DomainModelAssociation)iter.next();
  if (dma1.getObject().getClass().equals(nump.getFactClass())) {
    assertEquals(5,nump.get(dma1.getObject(),"value"));
  }
 else   if (dma1.getObject().getClass().equals(lenp.getFactClass())) {
    assertEquals(2.2,lenp.get(dma1.getObject(),"value"));
  }
  DomainModelAssociation dma2=(DomainModelAssociation)iter.next();
  if (dma2.getObject().getClass().equals(nump.getFactClass())) {
    assertEquals(5,nump.get(dma2.getObject(),"value"));
  }
 else   if (dma2.getObject().getClass().equals(lenp.getFactClass())) {
    assertEquals(2.2,lenp.get(dma2.getObject(),"value"));
  }
  getKSession().getWorkingMemoryEntryPoint("in_PetalLength").insert(2.5);
  getKSession().getWorkingMemoryEntryPoint("in_PetalNumber").insert(6);
  getKSession().fireAllRules();
  System.err.println(reportWMObjects(getKSession()));
  c=getKSession().getObjects(new ClassObjectFilter(DomainModelAssociation.class));
  iter=c.iterator();
  assertEquals(3,c.size());
  while (iter.hasNext()) {
    DomainModelAssociation dma=(DomainModelAssociation)iter.next();
    if (dma.getObject().getClass().equals(nump.getFactClass())) {
      assertEquals(6,nump.get(dma.getObject(),"value"));
    }
 else     if (dma.getObject().getClass().equals(lenp.getFactClass())) {
      Object val=lenp.get(dma.getObject(),"value");
      System.out.println("Check " + val);
      assertTrue((val.equals(new Double(2.2))) || (val.equals(new Double(2.5))));
    }
  }
}
