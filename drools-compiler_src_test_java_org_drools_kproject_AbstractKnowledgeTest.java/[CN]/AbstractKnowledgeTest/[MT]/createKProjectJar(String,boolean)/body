{
  KProject kproj=new KProjectImpl();
  kproj.setGroupArtifactVersion(new GroupArtifactVersion("org.test",namespace,"0.1"));
  kproj.setKProjectPath("src/main/resources/");
  kproj.setKBasesPath("src/kbases");
  KBase kBase1=kproj.newKBase(namespace + ".KBase1").setAnnotations(asList("@ApplicationScoped; @Inject")).setEqualsBehavior(AssertBehaviorOption.EQUALITY).setEventProcessingMode(EventProcessingOption.STREAM);
  KSession ksession1=kBase1.newKSession(namespace + ".KSession1").setType("stateless").setAnnotations(asList("@ApplicationScoped; @Inject")).setClockType(ClockTypeOption.get("realtime"));
  KSession ksession2=kBase1.newKSession(namespace + ".KSession2").setType("stateful").setAnnotations(asList("@ApplicationScoped; @Inject")).setClockType(ClockTypeOption.get("pseudo"));
  KBase kBase2=kproj.newKBase(namespace + ".KBase2").setAnnotations(asList("@ApplicationScoped")).setEqualsBehavior(AssertBehaviorOption.IDENTITY).setEventProcessingMode(EventProcessingOption.CLOUD);
  KSession ksession3=kBase2.newKSession(namespace + ".KSession3").setType("stateful").setAnnotations(asList("@ApplicationScoped")).setClockType(ClockTypeOption.get("pseudo"));
  KBase kBase3=kproj.newKBase(namespace + ".KBase3").addInclude(kBase1.getName()).addInclude(kBase2.getName()).setAnnotations(asList("@ApplicationScoped")).setEqualsBehavior(AssertBehaviorOption.IDENTITY).setEventProcessingMode(EventProcessingOption.CLOUD);
  KSession ksession4=kBase3.newKSession(namespace + ".KSession4").setType("stateless").setAnnotations(asList("@ApplicationScoped")).setClockType(ClockTypeOption.get("pseudo"));
  MemoryFileSystem mfs=new MemoryFileSystem();
  Folder fld2=mfs.getFolder("META-INF");
  fld2.create();
  File fle2=fld2.getFile("beans.xml");
  fle2.create(new ByteArrayInputStream(generateBeansXML(kproj).getBytes()));
  fle2=fld2.getFile("kproject.xml");
  fle2.create(new ByteArrayInputStream(((KProjectImpl)kproj).toXML().getBytes()));
  String kBase1R1=getRule(namespace + ".test1","rule1");
  String kBase1R2=getRule(namespace + ".test1","rule2");
  String kbase2R1=getRule(namespace + ".test2","rule1");
  String kbase2R2=getRule(namespace + ".test2","rule2");
  String fldKB1=kproj.getKBasesPath() + "/" + kBase1.getName();
  String fldKB2=kproj.getKBasesPath() + "/" + kBase2.getName();
  mfs.getFolder(fldKB1).create();
  mfs.getFolder(fldKB2).create();
  mfs.getFile(fldKB1 + "/rule1.drl").create(new ByteArrayInputStream(kBase1R1.getBytes()));
  mfs.getFile(fldKB1 + "/rule2.drl").create(new ByteArrayInputStream(kBase1R2.getBytes()));
  mfs.getFile(fldKB2 + "/rule1.drl").create(new ByteArrayInputStream(kbase2R1.getBytes()));
  mfs.getFile(fldKB2 + "/rule2.drl").create(new ByteArrayInputStream(kbase2R2.getBytes()));
  MemoryFileSystem trgMfs=new MemoryFileSystem();
  MemoryFileSystem srcMfs=mfs;
  Folder fld1=trgMfs.getFolder("org/drools/cdi/test");
  fld1.create();
  File fle1=fld1.getFile("KProjectTestClass" + namespace + ".java");
  fle1.create(new ByteArrayInputStream(generateKProjectTestClass(kproj,namespace).getBytes()));
  List<String> inputClasses=new ArrayList<String>();
  inputClasses.add("org/drools/cdi/test/KProjectTestClass" + namespace + ".java");
  compile(kproj,srcMfs,trgMfs,inputClasses);
  if (createJar) {
    trgMfs.writeAsJar(fileManager.getRootDirectory(),namespace);
  }
 else {
    writeFs(namespace,trgMfs);
  }
}
