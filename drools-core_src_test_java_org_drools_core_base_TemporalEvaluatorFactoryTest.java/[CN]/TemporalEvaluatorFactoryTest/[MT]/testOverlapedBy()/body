{
  registry.addEvaluatorDefinition(DuringEvaluatorDefinition.class.getName());
  EventFactHandle foo=new EventFactHandle(1,"foo",1,7,8,new DisconnectedWorkingMemoryEntryPoint("DEFAULT"));
  EventFactHandle bar=new EventFactHandle(2,"bar",1,2,8,new DisconnectedWorkingMemoryEntryPoint("DEFAULT"));
  EventFactHandle drool=new EventFactHandle(1,"drool",1,11,5,new DisconnectedWorkingMemoryEntryPoint("DEFAULT"));
  EventFactHandle mole=new EventFactHandle(1,"mole",1,7,3,new DisconnectedWorkingMemoryEntryPoint("DEFAULT"));
  final Object[][] data={{foo,"overlappedby",bar,Boolean.TRUE},{foo,"overlappedby",drool,Boolean.FALSE},{foo,"overlappedby",mole,Boolean.FALSE},{foo,"not overlappedby",bar,Boolean.FALSE},{foo,"not overlappedby",drool,Boolean.TRUE},{foo,"not overlappedby",mole,Boolean.TRUE},{foo,"overlappedby[3]",bar,Boolean.TRUE},{foo,"overlappedby[3]",drool,Boolean.FALSE},{foo,"overlappedby[3]",mole,Boolean.FALSE},{foo,"overlappedby[2]",bar,Boolean.FALSE},{foo,"overlappedby[6]",mole,Boolean.FALSE},{foo,"not overlappedby[3]",bar,Boolean.FALSE},{foo,"not overlappedby[3]",drool,Boolean.TRUE},{foo,"not overlappedby[3]",mole,Boolean.TRUE},{foo,"not overlappedby[2]",bar,Boolean.TRUE},{foo,"not overlappedby[6]",mole,Boolean.TRUE},{foo,"overlappedby[1,3]",bar,Boolean.TRUE},{foo,"overlappedby[1,3]",drool,Boolean.FALSE},{foo,"overlappedby[1,3]",mole,Boolean.FALSE},{foo,"overlappedby[4,6]",bar,Boolean.FALSE},{foo,"overlappedby[1,8]",mole,Boolean.FALSE},{foo,"not overlappedby[1,3]",bar,Boolean.FALSE},{foo,"not overlappedby[1,3]",drool,Boolean.TRUE},{foo,"not overlappedby[1,3]",mole,Boolean.TRUE},{foo,"not overlappedby[4,6]",bar,Boolean.TRUE},{foo,"not overlappedby[1,8]",mole,Boolean.TRUE}};
  runEvaluatorTest(data,ValueType.OBJECT_TYPE);
}
