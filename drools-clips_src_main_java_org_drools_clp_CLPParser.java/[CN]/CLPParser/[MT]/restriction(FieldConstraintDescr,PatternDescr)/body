{
  String lc=null;
  String op="==";
  try {
{
      int alt11=2;
      int LA11_0=input.LA(1);
      if ((LA11_0 == TILDE)) {
        alt11=1;
      }
switch (alt11) {
case 1:
{
          match(input,TILDE,FOLLOW_TILDE_in_restriction821);
          op="!=";
        }
      break;
  }
  int alt12=4;
switch (input.LA(1)) {
case COLON:
{
      alt12=1;
    }
  break;
case EQUALS:
{
  alt12=2;
}
break;
case VAR:
{
alt12=3;
}
break;
case NAME:
case STRING:
case INT:
case FLOAT:
case BOOL:
case NULL:
{
alt12=4;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("464:3: ( predicate_constraint[op, pattern] | return_value_restriction[op, fc] | variable_restriction[op, fc] | lc= literal_restriction )",12,0,input);
throw nvae;
}
switch (alt12) {
case 1:
{
pushFollow(FOLLOW_predicate_constraint_in_restriction837);
predicate_constraint(op,pattern);
_fsp--;
}
break;
case 2:
{
pushFollow(FOLLOW_return_value_restriction_in_restriction853);
return_value_restriction(op,fc);
_fsp--;
}
break;
case 3:
{
pushFollow(FOLLOW_variable_restriction_in_restriction862);
variable_restriction(op,fc);
_fsp--;
}
break;
case 4:
{
pushFollow(FOLLOW_literal_restriction_in_restriction874);
lc=literal_restriction();
_fsp--;
fc.addRestriction(new LiteralRestrictionDescr(op,lc,true));
op="==";
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
