{
  Deffunction function=null;
  Token loc=null;
  Token ruleName=null;
  ValueHandler fc=null;
  BuildContext context;
  try {
{
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deffunction95);
      match(input,DEFFUNCTION,FOLLOW_DEFFUNCTION_in_deffunction103);
      ruleName=(Token)input.LT(1);
      match(input,NAME,FOLLOW_NAME_in_deffunction112);
      function=new Deffunction(ruleName.getText());
      functionRegistry.addFunction(function);
      context=new ExecutionBuildContext(function,functionRegistry);
      int alt1=2;
      alt1=dfa1.predict(input);
switch (alt1) {
case 1:
{
          pushFollow(FOLLOW_deffunction_params_in_deffunction120);
          deffunction_params(context);
          _fsp--;
        }
      break;
  }
  loop2:   do {
    int alt2=2;
    int LA2_0=input.LA(1);
    if ((LA2_0 == LEFT_PAREN)) {
      alt2=1;
    }
switch (alt2) {
case 1:
{
        pushFollow(FOLLOW_lisp_list_in_deffunction131);
        fc=lisp_list(context,new LispForm(context));
        _fsp--;
        context.addFunction((FunctionCaller)fc);
      }
    break;
default :
  break loop2;
}
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deffunction142);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return function;
}
