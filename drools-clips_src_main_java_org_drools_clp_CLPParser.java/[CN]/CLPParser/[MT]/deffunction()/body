{
  Deffunction function=null;
  Token loc=null;
  Token ruleName=null;
  Token v=null;
  ValueHandler fc=null;
  BuildContext context;
  try {
{
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deffunction95);
      match(input,DEFFUNCTION,FOLLOW_DEFFUNCTION_in_deffunction103);
      ruleName=(Token)input.LT(1);
      match(input,NAME,FOLLOW_NAME_in_deffunction112);
      function=new Deffunction(ruleName.getText());
      functionRegistry.addFunction(function);
      context=new ExecutionBuildContext(function,functionRegistry);
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deffunction120);
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == VAR)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            v=(Token)input.LT(1);
            match(input,VAR,FOLLOW_VAR_in_deffunction130);
            context.addVariable(function.addParameter(v.getText()));
          }
        break;
default :
      break loop1;
  }
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deffunction143);
loop2: do {
  int alt2=2;
  int LA2_0=input.LA(1);
  if ((LA2_0 == LEFT_PAREN)) {
    alt2=1;
  }
switch (alt2) {
case 1:
{
      pushFollow(FOLLOW_lisp_list_in_deffunction152);
      fc=lisp_list(context,new LispForm(context));
      _fsp--;
      context.addFunction((FunctionCaller)fc);
    }
  break;
default :
break loop2;
}
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deffunction163);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return function;
}
