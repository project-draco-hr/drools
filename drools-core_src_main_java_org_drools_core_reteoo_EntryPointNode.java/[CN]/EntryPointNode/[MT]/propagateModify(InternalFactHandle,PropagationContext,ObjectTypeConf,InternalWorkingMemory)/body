{
  ObjectTypeNode[] cachedNodes=objectTypeConf.getObjectTypeNodes();
  ModifyPreviousTuples modifyPreviousTuples=new ModifyPreviousTuples(handle.getFirstLeftTuple(),handle.getFirstRightTuple(),this);
  handle.clearLeftTuples();
  handle.clearRightTuples();
  for (int i=0, length=cachedNodes.length; i < length; i++) {
    cachedNodes[i].modifyObject(handle,modifyPreviousTuples,pctx,wm);
    if (i < cachedNodes.length - 1) {
      RightTuple rightTuple=modifyPreviousTuples.peekRightTuple();
      while (rightTuple != null && ((BetaNode)rightTuple.getRightTupleSink()).getObjectTypeNode() == cachedNodes[i]) {
        modifyPreviousTuples.removeRightTuple();
        doRightDelete(pctx,wm,rightTuple);
        rightTuple=modifyPreviousTuples.peekRightTuple();
      }
      LeftTuple leftTuple;
      ObjectTypeNode otn;
      while (true) {
        leftTuple=modifyPreviousTuples.peekLeftTuple();
        otn=null;
        if (leftTuple != null) {
          LeftTupleSink leftTupleSink=leftTuple.getLeftTupleSink();
          if (leftTupleSink instanceof LeftTupleSource) {
            otn=leftTupleSink.getLeftTupleSource().getObjectTypeNode();
          }
 else           if (leftTupleSink instanceof RuleTerminalNode) {
            otn=((RuleTerminalNode)leftTupleSink).getObjectTypeNode();
          }
        }
        if (otn == null || cachedNodes[i] != otn)         break;
        modifyPreviousTuples.removeLeftTuple();
        doDeleteObject(pctx,wm,leftTuple);
      }
    }
  }
  modifyPreviousTuples.retractTuples(pctx,wm);
}
