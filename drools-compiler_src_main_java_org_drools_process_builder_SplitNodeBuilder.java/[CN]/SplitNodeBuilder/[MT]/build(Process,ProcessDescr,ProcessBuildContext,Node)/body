{
  Split splitNode=(Split)node;
  if (splitNode.getType() == Split.TYPE_AND) {
    return;
  }
  Map<Split.ConnectionRef,Constraint> map=new HashMap<Split.ConnectionRef,Constraint>(splitNode.getConstraints());
  for (Iterator<Map.Entry<Split.ConnectionRef,Constraint>> it=map.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<Split.ConnectionRef,Constraint> entry=it.next();
    Split.ConnectionRef connection=entry.getKey();
    ConstraintImpl constraint=(ConstraintImpl)entry.getValue();
    Connection outgoingConnection=null;
    for (    Connection out : splitNode.getDefaultOutgoingConnections()) {
      if (out.getToType().equals(connection.getToType()) && out.getTo().getId() == connection.getNodeId()) {
        outgoingConnection=out;
      }
    }
    if (outgoingConnection == null) {
      throw new IllegalArgumentException("Could not find outgoing connection");
    }
    if ("rule".equals(constraint.getType())) {
      RuleConstraintEvaluator ruleConstraint=new RuleConstraintEvaluator();
      ruleConstraint.setDialect(constraint.getDialect());
      ruleConstraint.setName(constraint.getName());
      ruleConstraint.setPriority(constraint.getPriority());
      ruleConstraint.setPriority(constraint.getPriority());
      splitNode.setConstraint(outgoingConnection,ruleConstraint);
    }
 else     if ("code".equals(constraint.getType())) {
      ReturnValueConstraintEvaluator returnValueConstraint=new ReturnValueConstraintEvaluator();
      returnValueConstraint.setDialect(constraint.getDialect());
      returnValueConstraint.setName(constraint.getName());
      returnValueConstraint.setPriority(constraint.getPriority());
      returnValueConstraint.setPriority(constraint.getPriority());
      splitNode.setConstraint(outgoingConnection,returnValueConstraint);
      ReturnValueDescr returnValueDescr=new ReturnValueDescr();
      returnValueDescr.setText(constraint.getConstraint());
      Dialect dialect=context.getDialectRegistry().getDialect(constraint.getDialect());
      dialect.getReturnValueEvaluatorBuilder().build(context,returnValueConstraint,returnValueDescr);
    }
  }
}
