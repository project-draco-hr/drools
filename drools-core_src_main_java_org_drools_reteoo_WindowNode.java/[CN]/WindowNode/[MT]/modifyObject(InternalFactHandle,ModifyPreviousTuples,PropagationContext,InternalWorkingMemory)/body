{
  final WindowMemory memory=(WindowMemory)workingMemory.getNodeMemory(this);
  int index=0;
  boolean isAllowed=true;
  for (  AlphaNodeFieldConstraint constraint : constraints) {
    if (!constraint.isAllowed(factHandle,workingMemory,memory.context[index++])) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    if (memory.facts.contains(factHandle)) {
      this.sink.propagateModifyObject(factHandle,modifyPreviousTuples,context,workingMemory);
    }
 else {
      memory.facts.add(factHandle);
      this.sink.propagateAssertObject(factHandle,context,workingMemory);
    }
  }
 else {
    if (memory.facts.remove(factHandle)) {
    }
  }
}
