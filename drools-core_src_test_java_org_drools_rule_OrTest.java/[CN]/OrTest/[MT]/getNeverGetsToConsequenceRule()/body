{
  final Rule rule=new Rule("NeverGetsToConsequence");
  Column stageColumn1=new Column(0,stageType,"stage1");
  stageColumn1.addConstraint(getLiteralConstraint(stageColumn1,"value",new Integer(Stage.DETECT_JUNCTIONS),this.integerEqualEvaluator));
  final Declaration stage1Declaration=rule.getDeclaration("stage");
  Column stageColumn2=new Column(1,stageType,"stage");
  stageColumn2.addConstraint(getLiteralConstraint(stageColumn2,"value",new Integer(Stage.LABELING),this.integerEqualEvaluator));
  final Declaration stage2Declaration=rule.getDeclaration("stage2");
  Or or=new Or();
  or.addChild(stageColumn1);
  or.addChild(stageColumn2);
  rule.addPattern(or);
  Column edgeColumn1=new Column(2,edgeType,"edge1");
  setFieldDeclaration(edgeColumn1,"p1","edge1p1");
  setFieldDeclaration(edgeColumn1,"p2","edge1p2");
  rule.addPattern(edgeColumn1);
  final Declaration edge1Declaration=rule.getDeclaration("edge1");
  final Declaration edge1P1Declaration=rule.getDeclaration("edge1p1");
  final Declaration edge1P2Declaration=rule.getDeclaration("edge1p2");
  Column edgeColumn2=new Column(3,edgeType,"edge2");
  rule.addPattern(edgeColumn2);
  final Declaration edge2Declaration=rule.getDeclaration("edge2");
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn2,"p1",edge1P1Declaration,integerEqualEvaluator));
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn2,"p2",edge1P2Declaration,integerNotEqualEvaluator));
  Consequence consequence=new Consequence(){
    public void invoke(    Activation activation,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=activation.getRule();
        Tuple tuple=activation.getTuple();
        KnowledgeHelper drools=new DefaultKnowledgeHelper(rule,tuple,workingMemory);
        Stage stage=(Stage)drools.get(stage1Declaration);
        if (stage == null) {
          stage=(Stage)drools.get(stage2Declaration);
        }
        markStage=stage;
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
