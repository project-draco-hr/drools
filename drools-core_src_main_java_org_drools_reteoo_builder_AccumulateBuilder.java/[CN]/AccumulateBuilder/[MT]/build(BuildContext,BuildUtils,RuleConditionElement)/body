{
  final Accumulate accumulate=(Accumulate)rce;
  boolean existSubNetwort=false;
  final List resultBetaConstraints=context.getBetaconstraints();
  final List resultAlphaConstraints=context.getAlphaConstraints();
  final RuleConditionElement source=accumulate.getSource();
  final ReteooComponentBuilder builder=utils.getBuilderFor(source);
  final LeftTupleSource tupleSource=context.getTupleSource();
  final int currentPatternIndex=context.getCurrentPatternOffset();
  builder.build(context,utils,source);
  if (context.getObjectSource() == null) {
    context.setObjectSource((ObjectSource)utils.attachNode(context,new RightInputAdapterNode(context.getNextId(),context.getTupleSource(),context)));
    context.setTupleSource(tupleSource);
    final TupleStartEqualsConstraint constraint=TupleStartEqualsConstraint.getInstance();
    final List betaConstraints=new ArrayList();
    betaConstraints.add(constraint);
    context.setBetaconstraints(betaConstraints);
    existSubNetwort=true;
  }
  final BetaConstraints resultsBinder=utils.createBetaNodeConstraint(context,resultBetaConstraints,true);
  final BetaConstraints sourceBinder=utils.createBetaNodeConstraint(context,context.getBetaconstraints(),false);
  context.setTupleSource((LeftTupleSource)utils.attachNode(context,new AccumulateNode(context.getNextId(),context.getTupleSource(),context.getObjectSource(),(AlphaNodeFieldConstraint[])resultAlphaConstraints.toArray(new AlphaNodeFieldConstraint[resultAlphaConstraints.size()]),sourceBinder,resultsBinder,Behavior.EMPTY_BEHAVIOR_LIST,accumulate,existSubNetwort,context)));
  context.setObjectSource(null);
  context.setCurrentPatternOffset(currentPatternIndex);
}
