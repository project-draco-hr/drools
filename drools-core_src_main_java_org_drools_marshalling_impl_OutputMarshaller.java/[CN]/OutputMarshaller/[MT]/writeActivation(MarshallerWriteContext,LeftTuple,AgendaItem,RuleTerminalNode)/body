{
  ObjectOutputStream stream=context.stream;
  stream.writeLong(agendaItem.getActivationNumber());
  stream.writeInt(context.terminalTupleMap.get(leftTuple));
  stream.writeInt(agendaItem.getSalience());
  Rule rule=agendaItem.getRule();
  stream.writeUTF(rule.getPackage());
  stream.writeUTF(rule.getName());
  stream.writeLong(agendaItem.getPropagationContext().getPropagationNumber());
  if (agendaItem.getActivationGroupNode() != null) {
    stream.writeBoolean(true);
    stream.writeUTF(agendaItem.getActivationGroupNode().getActivationGroup().getName());
  }
 else {
    stream.writeBoolean(false);
  }
  stream.writeBoolean(agendaItem.isActivated());
  if (agendaItem.getFactHandle() != null) {
    stream.writeBoolean(true);
    stream.writeInt(agendaItem.getFactHandle().getId());
  }
 else {
    stream.writeBoolean(false);
  }
  org.drools.core.util.LinkedList list=agendaItem.getLogicalDependencies();
  if (list != null && !list.isEmpty()) {
    for (LogicalDependency node=(LogicalDependency)list.getFirst(); node != null; node=(LogicalDependency)node.getNext()) {
      stream.writeShort(PersisterEnums.LOGICAL_DEPENDENCY);
      stream.writeInt(((InternalFactHandle)node.getFactHandle()).getId());
    }
  }
  stream.writeShort(PersisterEnums.END);
}
