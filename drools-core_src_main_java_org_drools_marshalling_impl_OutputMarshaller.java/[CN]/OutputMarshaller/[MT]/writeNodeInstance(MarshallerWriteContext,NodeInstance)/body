{
  ObjectOutputStream stream=context.stream;
  stream.writeLong(nodeInstance.getId());
  stream.writeLong(nodeInstance.getNodeId());
  if (nodeInstance instanceof RuleSetNodeInstance) {
    stream.writeShort(PersisterEnums.RULE_SET_NODE_INSTANCE);
  }
 else   if (nodeInstance instanceof HumanTaskNodeInstance) {
    stream.writeShort(PersisterEnums.HUMAN_TASK_NODE_INSTANCE);
    stream.writeLong(((HumanTaskNodeInstance)nodeInstance).getWorkItem().getId());
  }
 else   if (nodeInstance instanceof WorkItemNodeInstance) {
    stream.writeShort(PersisterEnums.WORK_ITEM_NODE_INSTANCE);
    stream.writeLong(((WorkItemNodeInstance)nodeInstance).getWorkItem().getId());
  }
 else   if (nodeInstance instanceof SubProcessNodeInstance) {
    stream.writeShort(PersisterEnums.SUB_PROCESS_NODE_INSTANCE);
    stream.writeLong(((SubProcessNodeInstance)nodeInstance).getProcessInstanceId());
  }
 else   if (nodeInstance instanceof MilestoneNodeInstance) {
    stream.writeShort(PersisterEnums.MILESTONE_NODE_INSTANCE);
    List<Long> timerInstances=((MilestoneNodeInstance)nodeInstance).getTimerInstances();
    if (timerInstances != null) {
      stream.writeInt(timerInstances.size());
      for (      Long id : timerInstances) {
        stream.writeLong(id);
      }
    }
 else {
      stream.writeInt(0);
    }
  }
 else   if (nodeInstance instanceof TimerNodeInstance) {
    stream.writeShort(PersisterEnums.TIMER_NODE_INSTANCE);
    stream.writeLong(((TimerNodeInstance)nodeInstance).getTimerId());
  }
 else   if (nodeInstance instanceof JoinInstance) {
    stream.writeShort(PersisterEnums.JOIN_NODE_INSTANCE);
    Map<Long,Integer> triggers=((JoinInstance)nodeInstance).getTriggers();
    stream.writeInt(triggers.size());
    List<Long> keys=new ArrayList<Long>(triggers.keySet());
    Collections.sort(keys,new Comparator<Long>(){
      public int compare(      Long o1,      Long o2){
        return o1.compareTo(o2);
      }
    }
);
    for (    Long key : keys) {
      stream.writeLong(key);
      stream.writeInt(triggers.get(key));
    }
  }
 else   if (nodeInstance instanceof CompositeContextNodeInstance) {
    stream.writeShort(PersisterEnums.COMPOSITE_NODE_INSTANCE);
    CompositeContextNodeInstance compositeNodeInstance=(CompositeContextNodeInstance)nodeInstance;
    VariableScopeInstance variableScopeInstance=(VariableScopeInstance)compositeNodeInstance.getContextInstance(VariableScope.VARIABLE_SCOPE);
    Map<String,Object> variables=variableScopeInstance.getVariables();
    List<String> keys=new ArrayList<String>(variables.keySet());
    Collections.sort(keys,new Comparator<String>(){
      public int compare(      String o1,      String o2){
        return o1.compareTo(o2);
      }
    }
);
    stream.writeInt(keys.size());
    for (    String key : keys) {
      stream.writeUTF(key);
      stream.writeObject(variables.get(key));
    }
    List<NodeInstance> nodeInstances=new ArrayList<NodeInstance>(compositeNodeInstance.getNodeInstances());
    Collections.sort(nodeInstances,new Comparator<NodeInstance>(){
      public int compare(      NodeInstance o1,      NodeInstance o2){
        return (int)(o1.getId() - o2.getId());
      }
    }
);
    for (    NodeInstance subNodeInstance : nodeInstances) {
      stream.writeShort(PersisterEnums.NODE_INSTANCE);
      writeNodeInstance(context,subNodeInstance);
    }
    stream.writeShort(PersisterEnums.END);
  }
 else   if (nodeInstance instanceof ForEachNodeInstance) {
    stream.writeShort(PersisterEnums.FOR_EACH_NODE_INSTANCE);
    ForEachNodeInstance forEachNodeInstance=(ForEachNodeInstance)nodeInstance;
    List<NodeInstance> nodeInstances=new ArrayList<NodeInstance>(forEachNodeInstance.getNodeInstances());
    Collections.sort(nodeInstances,new Comparator<NodeInstance>(){
      public int compare(      NodeInstance o1,      NodeInstance o2){
        return (int)(o1.getId() - o2.getId());
      }
    }
);
    for (    NodeInstance subNodeInstance : nodeInstances) {
      if (subNodeInstance instanceof CompositeContextNodeInstance) {
        stream.writeShort(PersisterEnums.NODE_INSTANCE);
        writeNodeInstance(context,subNodeInstance);
      }
    }
    stream.writeShort(PersisterEnums.END);
  }
 else {
    throw new IllegalArgumentException("Unknown node instance type: " + nodeInstance);
  }
}
