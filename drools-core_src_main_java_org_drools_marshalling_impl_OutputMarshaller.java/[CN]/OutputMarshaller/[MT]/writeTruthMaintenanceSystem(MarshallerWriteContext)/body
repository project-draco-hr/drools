{
  ObjectOutputStream stream=context.stream;
  ObjectHashMap assertMap=context.wm.getTruthMaintenanceSystem().getAssertMap();
  EqualityKey[] keys=new EqualityKey[assertMap.size()];
  org.drools.core.util.Iterator it=assertMap.iterator();
  int i=0;
  for (org.drools.core.util.ObjectHashMap.ObjectEntry entry=(org.drools.core.util.ObjectHashMap.ObjectEntry)it.next(); entry != null; entry=(org.drools.core.util.ObjectHashMap.ObjectEntry)it.next()) {
    EqualityKey key=(EqualityKey)entry.getKey();
    keys[i++]=key;
  }
  Arrays.sort(keys,EqualityKeySorter.instance);
  for (  EqualityKey key : keys) {
    stream.writeShort(PersisterEnums.EQUALITY_KEY);
    stream.writeInt(key.getStatus());
    InternalFactHandle handle=key.getFactHandle();
    stream.writeInt(handle.getId());
    if (key.getOtherFactHandle() != null && !key.getOtherFactHandle().isEmpty()) {
      for (      InternalFactHandle handle2 : key.getOtherFactHandle()) {
        stream.writeShort(PersisterEnums.FACT_HANDLE);
        stream.writeInt(handle2.getId());
      }
    }
    stream.writeShort(PersisterEnums.END);
  }
  stream.writeShort(PersisterEnums.END);
}
