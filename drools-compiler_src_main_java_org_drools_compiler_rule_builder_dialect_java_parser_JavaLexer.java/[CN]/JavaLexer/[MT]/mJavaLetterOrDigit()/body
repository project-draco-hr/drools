{
  try {
    int alt28=3;
    int LA28_0=input.LA(1);
    if ((LA28_0 == '$' || (LA28_0 >= '0' && LA28_0 <= '9') || (LA28_0 >= 'A' && LA28_0 <= 'Z') || LA28_0 == '_' || (LA28_0 >= 'a' && LA28_0 <= 'z'))) {
      alt28=1;
    }
 else     if (((LA28_0 >= '\u0080' && LA28_0 <= '\uD7FF') || (LA28_0 >= '\uDC00' && LA28_0 <= '\uFFFF'))) {
      alt28=2;
    }
 else     if (((LA28_0 >= '\uD800' && LA28_0 <= '\uDBFF'))) {
      alt28=3;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("",28,0,input);
      throw nvae;
    }
switch (alt28) {
case 1:
{
        if (input.LA(1) == '$' || (input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')) {
          input.consume();
        }
 else {
          MismatchedSetException mse=new MismatchedSetException(null,input);
          recover(mse);
          throw mse;
        }
      }
    break;
case 2:
{
    if (!((Character.isJavaIdentifierPart(input.LA(1))))) {
      throw new FailedPredicateException(input,"JavaLetterOrDigit","Character.isJavaIdentifierPart(input.LA(1))");
    }
    if ((input.LA(1) >= '\u0080' && input.LA(1) <= '\uD7FF') || (input.LA(1) >= '\uDC00' && input.LA(1) <= '\uFFFF')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
break;
case 3:
{
if (!((Character.isJavaIdentifierPart(Character.toCodePoint((char)input.LA(-1),(char)input.LA(1)))))) {
  throw new FailedPredicateException(input,"JavaLetterOrDigit","Character.isJavaIdentifierPart(Character.toCodePoint((char)input.LA(-1), (char)input.LA(1)))");
}
if ((input.LA(1) >= '\uD800' && input.LA(1) <= '\uDBFF')) {
  input.consume();
}
 else {
  MismatchedSetException mse=new MismatchedSetException(null,input);
  recover(mse);
  throw mse;
}
if ((input.LA(1) >= '\uDC00' && input.LA(1) <= '\uDFFF')) {
  input.consume();
}
 else {
  MismatchedSetException mse=new MismatchedSetException(null,input);
  recover(mse);
  throw mse;
}
}
break;
}
}
  finally {
}
}
