{
  FactType age=getKbase().getFactType(packageName,"Age");
  FactType cat=getKbase().getFactType(packageName,"AgeCategories");
  assertNotNull(getKSession().getWorkingMemoryEntryPoint("in_Age"));
  getKSession().getWorkingMemoryEntryPoint("in_Age").insert(-1);
  getKSession().fireAllRules();
  checkFirstDataFieldOfTypeStatus(age,true,true,null,-1);
  checkFirstDataFieldOfTypeStatus(cat,true,false,null,"infant");
  this.refreshKSession();
  getKSession().getWorkingMemoryEntryPoint("in_Age").insert(1);
  getKSession().fireAllRules();
  checkFirstDataFieldOfTypeStatus(age,true,false,null,1);
  checkFirstDataFieldOfTypeStatus(cat,true,false,null,"infant");
  this.refreshKSession();
  getKSession().getWorkingMemoryEntryPoint("in_Age").insert(9);
  getKSession().fireAllRules();
  checkFirstDataFieldOfTypeStatus(age,true,false,null,9);
  checkFirstDataFieldOfTypeStatus(cat,true,false,null,"young");
  this.refreshKSession();
  getKSession().getWorkingMemoryEntryPoint("in_Age").insert(30);
  getKSession().fireAllRules();
  checkFirstDataFieldOfTypeStatus(age,true,false,null,30);
  checkFirstDataFieldOfTypeStatus(cat,true,false,null,"mature");
  this.refreshKSession();
  getKSession().getWorkingMemoryEntryPoint("in_Age").insert(90);
  getKSession().fireAllRules();
  checkFirstDataFieldOfTypeStatus(age,true,false,null,90);
  checkFirstDataFieldOfTypeStatus(cat,true,false,null,"ancient");
  this.refreshKSession();
  getKSession().getWorkingMemoryEntryPoint("in_Age").insert(3000);
  getKSession().fireAllRules();
  checkFirstDataFieldOfTypeStatus(age,true,false,null,3000);
  checkFirstDataFieldOfTypeStatus(cat,true,false,null,"ancient");
  this.refreshKSession();
  getKSession().getWorkingMemoryEntryPoint("in_Age").insert(19);
  getKSession().fireAllRules();
  checkFirstDataFieldOfTypeStatus(age,true,false,null,19);
  checkFirstDataFieldOfTypeStatus(cat,true,false,null,"ancient");
}
