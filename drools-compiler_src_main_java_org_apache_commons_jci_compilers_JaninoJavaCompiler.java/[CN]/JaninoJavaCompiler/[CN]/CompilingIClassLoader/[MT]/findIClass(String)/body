{
  final String className=Descriptor.toClassName(pType);
  if (this.types.containsKey(pType)) {
    return (IClass)this.types.get(pType);
  }
  final String resourceNameFromClass=className.replace('.','/') + ".java";
  final byte[] content=this.resourceReader.getBytes(resourceNameFromClass);
  if (content == null) {
    return null;
  }
  final Reader reader=new BufferedReader(new StringReader(new String(content)));
  Scanner scanner=null;
  try {
    scanner=new Scanner(resourceNameFromClass,reader);
    final Java.CompilationUnit unit=new Parser(scanner).parseCompilationUnit();
    final UnitCompiler uc=new UnitCompiler(unit,this);
    uc.setCompileErrorHandler(new ErrorHandler(){
      public void handleError(      final String pMessage,      final Location pOptionalLocation) throws CompileException {
        final CompilationProblem problem=new JaninoCompilationProblem(pOptionalLocation,pMessage,true);
        if (JaninoJavaCompiler.this.problemHandler != null) {
          JaninoJavaCompiler.this.problemHandler.handle(problem);
        }
        CompilingIClassLoader.this.problems.add(problem);
      }
    }
);
    uc.setWarningHandler(new WarningHandler(){
      public void handleWarning(      final String pHandle,      final String pMessage,      final Location pOptionalLocation){
        final CompilationProblem problem=new JaninoCompilationProblem(pOptionalLocation,pMessage,false);
        if (JaninoJavaCompiler.this.problemHandler != null) {
          JaninoJavaCompiler.this.problemHandler.handle(problem);
        }
        CompilingIClassLoader.this.problems.add(problem);
      }
    }
);
    final ClassFile[] classFiles=uc.compileUnit(DebuggingInformation.ALL);
    for (int i=0; i < classFiles.length; i++) {
      this.classes.put(classFiles[i].getThisClassName(),classFiles[i].toByteArray());
    }
    final IClass ic=uc.findClass(className);
    if (null != ic) {
      this.types.put(pType,ic);
    }
    return ic;
  }
 catch (  final LocatedException e) {
    this.problems.add(new JaninoCompilationProblem(e));
  }
catch (  final IOException e) {
    this.problems.add(new JaninoCompilationProblem(resourceNameFromClass,"IOException:" + e.getMessage(),true));
  }
catch (  final Exception e) {
    this.problems.add(new JaninoCompilationProblem(resourceNameFromClass,"Exception:" + e.getMessage(),true));
  }
 finally {
    if (scanner != null) {
      try {
        scanner.close();
      }
 catch (      final IOException e) {
      }
    }
  }
  return null;
}
