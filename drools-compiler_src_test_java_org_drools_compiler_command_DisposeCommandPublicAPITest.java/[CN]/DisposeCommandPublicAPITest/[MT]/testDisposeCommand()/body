{
  InternalKnowledgeBase kBase;
  RuleImpl rule;
  InternalKnowledgePackage pkg;
  kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  pkg=new KnowledgePackageImpl("org.droos.test");
  pkg.setClassFieldAccessorCache(new ClassFieldAccessorCache(Thread.currentThread().getContextClassLoader()));
  JavaDialectRuntimeData data=new JavaDialectRuntimeData();
  data.onAdd(pkg.getDialectRuntimeRegistry(),kBase.getRootClassLoader());
  pkg.getDialectRuntimeRegistry().setDialectData("java",data);
  rule=new RuleImpl("Test");
  rule.setDialect("java");
  rule.setConsequence(new Consequence(){
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory) throws Exception {
    }
    public String getName(){
      return "default";
    }
  }
);
  pkg.addRule(rule);
  kBase.addPackage(pkg);
  KieSession session=kBase.newKieSession();
  Command dispose=KieServices.Factory.get().getCommands().newDispose();
  session.insert("whatever");
  session.fireAllRules();
  session.execute(dispose);
  try {
    session.insert("whatever");
  }
 catch (  Exception e) {
    Assert.assertEquals(e.getMessage(),"Illegal method call. This session was previously disposed.");
  }
}
