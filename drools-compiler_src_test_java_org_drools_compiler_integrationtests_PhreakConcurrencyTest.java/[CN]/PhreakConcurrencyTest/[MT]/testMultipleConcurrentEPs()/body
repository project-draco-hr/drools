{
  final boolean PARALLEL=true;
  final int EP_NR=10;
  StringBuilder sb=new StringBuilder();
  sb.append("import org.drools.compiler.StockTick;\n");
  for (int i=0; i < EP_NR; i++) {
    sb.append("global java.util.List results").append(i).append(";\n");
  }
  sb.append("declare StockTick\n" + "    @role( event )\n" + "end\n");
  for (int i=0; i < EP_NR; i++) {
    sb.append("rule \"R" + i + "\"\n"+ "when\n"+ "    $name : String( this.startsWith(\"A\") )\n"+ "    $st : StockTick( company == $name, price > 10 ) from entry-point EP"+ i+ "\n"+ "then\n"+ "    results"+ i+ ".add( $st );\n"+ "end\n");
  }
  KnowledgeBase kbase=loadKnowledgeBaseFromString(sb.toString());
  KieSession ksession=kbase.newStatefulKnowledgeSession();
  boolean success=true;
  if (PARALLEL) {
    CompletionService<Boolean> ecs=new ExecutorCompletionService<Boolean>(executor);
    for (int i=0; i < EP_NR; i++) {
      ecs.submit(new EPManipulator(ksession,i));
    }
    for (int i=0; i < EP_NR; i++) {
      try {
        success=ecs.take().get() && success;
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
 else {
    for (int i=0; i < EP_NR; i++) {
      try {
        success=new EPManipulator(ksession,i).call() && success;
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  assertTrue(success);
  assertEquals(EP_NR,ksession.fireAllRules());
  for (int i=0; i < EP_NR; i++) {
    assertEquals(1,((List)ksession.getGlobal("results" + i)).size());
  }
  ksession.dispose();
}
