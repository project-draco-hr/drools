{
  String str="global java.util.List results\n" + "rule R1 when\n" + "   String( this == \"1\") from entry-point EP1\n"+ "   String( this == \"2\") from entry-point EP2\n"+ "   String( this == \"3\") from entry-point EP3\n"+ "   String( this == \"4\") from entry-point EP4\n"+ "   String( this == \"5\") from entry-point EP5\n"+ "   String( this == \"6\") from entry-point EP6\n"+ "   String( this == \"7\") from entry-point EP7\n"+ "   String( this == \"8\") from entry-point EP8\n"+ "   String( this == \"9\") from entry-point EP9\n"+ "then\n"+ "   results.add(\"R1\");\n"+ "end\n"+ "\n"+ "rule R2 when\n"+ "   String( this == \"1\") from entry-point EP1\n"+ "   String( this == \"2\") from entry-point EP2\n"+ "   String( this == \"3\") from entry-point EP3\n"+ "   eval(true)\n"+ "   String( this == \"4\") from entry-point EP4\n"+ "   String( this == \"5\") from entry-point EP5\n"+ "   String( this == \"6\") from entry-point EP6\n"+ "   String( this == \"7\") from entry-point EP7\n"+ "   String( this == \"8\") from entry-point EP8\n"+ "   String( this == \"9\") from entry-point EP9\n"+ "then\n"+ "   results.add(\"R2\");\n"+ "end\n"+ "\n"+ "rule R3 when\n"+ "   String( this == \"1\") from entry-point EP1\n"+ "   String( this == \"2\") from entry-point EP2\n"+ "   String( this == \"3\") from entry-point EP3\n"+ "   eval(true)\n"+ "   String( this == \"4\") from entry-point EP4\n"+ "   String( this == \"5\") from entry-point EP5\n"+ "   String( this == \"6\") from entry-point EP6\n"+ "   eval(true)\n"+ "   String( this == \"7\") from entry-point EP7\n"+ "   String( this == \"8\") from entry-point EP8\n"+ "   String( this == \"9\") from entry-point EP9\n"+ "then\n"+ "   results.add(\"R3\");\n"+ "end\n";
  KnowledgeBase kbase=loadKnowledgeBaseFromString(str);
  KieSession ksession=kbase.newStatefulKnowledgeSession();
  List<String> results=new ArrayList<String>();
  ksession.setGlobal("results",results);
  EPManipulator3[] epManipulators=new EPManipulator3[9];
  for (int i=0; i < 9; i++) {
    epManipulators[i]=new EPManipulator3(ksession,i + 1);
  }
  for (int deleteIndex=0; deleteIndex < 11; deleteIndex++) {
    boolean success=true;
    CompletionService<Boolean> ecs=new ExecutorCompletionService<Boolean>(executor);
    for (int i=0; i < 9; i++) {
      ecs.submit(epManipulators[i].setDeleteIndex(deleteIndex % 10));
    }
    for (int i=1; i < 10; i++) {
      try {
        success=ecs.take().get() && success;
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    assertTrue(success);
    ksession.fireAllRules();
    if (deleteIndex % 10 == 0) {
      assertEquals(3,results.size());
      assertTrue(results.containsAll(asList("R1","R2","R3")));
    }
 else {
      if (!results.isEmpty()) {
        fail("Results should be empty with deleteIndex = " + deleteIndex + "; got "+ results.size()+ " items");
      }
    }
    results.clear();
  }
}
