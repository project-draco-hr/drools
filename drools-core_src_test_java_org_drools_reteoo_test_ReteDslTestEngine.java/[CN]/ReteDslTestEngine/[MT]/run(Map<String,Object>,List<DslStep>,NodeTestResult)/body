{
  InternalWorkingMemory wm=(InternalWorkingMemory)context.get(WORKING_MEMORY);
  for (  DslStep step : steps) {
    String name=step.getName();
    Object object=this.steps.get(name);
    if (object != null && object instanceof Step) {
      Step stepImpl=(Step)object;
      try {
        stepImpl.execute(context,step.getCommands());
      }
 catch (      Exception e) {
        throw new IllegalArgumentException("line " + step.getLine() + ": unable to execute step "+ step,e);
      }
    }
 else     if ("assert".equals(name.trim())) {
      assertObject(step,context,wm);
    }
 else     if ("retract".equals(name.trim())) {
      retractObject(step,context,wm);
    }
 else     if ("modify".equals(name.trim())) {
      modifyObject(step,context,wm);
    }
 else {
      Object node=context.get(name.trim());
      if (node == null) {
        throw new IllegalArgumentException("line " + step.getLine() + ": step "+ name+ " does not exist");
      }
      if (node instanceof DSLMock) {
        MockitoHelper.process(step,(LeftTupleSink)node,context,wm);
      }
 else       if (node instanceof BetaNode) {
        betaNode(step,(BetaNode)node,context,wm);
      }
 else       if (node instanceof RightInputAdapterNode) {
        riaNode(step,(RightInputAdapterNode)node,context,wm);
      }
 else       if (node instanceof RuleTerminalNode) {
        ruleTerminalNode(step,(RuleTerminalNode)node,context,wm);
      }
 else {
        throw new IllegalArgumentException("line " + step.getLine() + ": unknown node "+ node);
      }
    }
  }
  return context;
}
