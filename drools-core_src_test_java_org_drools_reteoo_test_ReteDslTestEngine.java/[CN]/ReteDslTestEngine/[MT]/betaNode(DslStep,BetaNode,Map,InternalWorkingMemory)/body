{
  try {
    String[] cmds=step.getCommands().toArray(new String[0]);
    List<InternalFactHandle> handles=(List<InternalFactHandle>)context.get("Handles");
    BetaMemory memory=(BetaMemory)wm.getNodeMemory(node);
    for (    String cmd : cmds) {
      if (cmd.trim().startsWith("leftMemory")) {
        int pos=cmd.indexOf("[");
        String nodeName=cmd.substring(0,pos).trim();
        String args=cmd.substring(pos).trim();
        String listString=args.replaceAll("h(\\d+)","h[$1]");
        Map vars=new HashMap();
        vars.put("h",handles);
        List expectedLeftTuples=(List)MVEL.eval(listString,vars);
        LeftTupleMemory leftMemory=memory.getLeftTupleMemory();
        List actualLeftTuples=null;
        List<InternalFactHandle> first=(List<InternalFactHandle>)expectedLeftTuples.get(0);
        LeftTuple firstTuple=new LeftTuple(first.get(0),null,false);
        for (int i=1; i < first.size(); i++) {
          firstTuple=new LeftTuple(firstTuple,null,false);
        }
        List<LeftTuple> leftTuples=new ArrayList<LeftTuple>();
        for (LeftTuple leftTuple=memory.getLeftTupleMemory().getFirst(firstTuple); leftTuple != null; leftTuple=(LeftTuple)leftTuple.getNext()) {
          leftTuples.add(leftTuple);
        }
        actualLeftTuples=new ArrayList(leftTuples.size());
        for (        LeftTuple leftTuple : leftTuples) {
          List<InternalFactHandle> tupleHandles=Arrays.asList(leftTuple.toFactHandles());
          actualLeftTuples.add(tupleHandles);
        }
        if (!expectedLeftTuples.equals(actualLeftTuples)) {
          throw new AssertionError("line " + step.getLine() + ": left Memory expected "+ expectedLeftTuples+ " actually "+ actualLeftTuples);
        }
      }
 else       if (cmd.trim().startsWith("rightMemory")) {
        int pos=cmd.indexOf("[");
        String nodeName=cmd.substring(0,pos).trim();
        String args=cmd.substring(pos).trim();
        String listString=args.replaceAll("h(\\d+)","h[$1]");
        Map vars=new HashMap();
        vars.put("h",handles);
        List expectedFactHandles=(List)MVEL.eval(listString,vars);
        RightTupleMemory rightMemory=memory.getRightTupleMemory();
        InternalFactHandle first=(InternalFactHandle)expectedFactHandles.get(0);
        List<RightTuple> actualRightTuples=new ArrayList();
        for (RightTuple rightTuple=memory.getRightTupleMemory().getFirst(first.getRightTuple()); rightTuple != null; rightTuple=(RightTuple)rightTuple.getNext()) {
          actualRightTuples.add(rightTuple);
        }
        if (expectedFactHandles.size() != actualRightTuples.size()) {
          throw new AssertionError("line " + step.getLine() + ": right Memory expected "+ actualRightTuples+ " actually "+ actualRightTuples);
        }
        for (int i=0, length=actualRightTuples.size(); i < length; i++) {
          if (expectedFactHandles.get(i) != actualRightTuples.get(i).getFactHandle()) {
            throw new AssertionError("line " + step.getLine() + ": right Memory expected "+ actualRightTuples+ " actually "+ actualRightTuples);
          }
        }
      }
 else {
        throw new IllegalArgumentException("line " + step.getLine() + ": command does not exist "+ cmd.trim());
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("line " + step.getLine() + ": unable to execute step "+ step,e);
  }
}
