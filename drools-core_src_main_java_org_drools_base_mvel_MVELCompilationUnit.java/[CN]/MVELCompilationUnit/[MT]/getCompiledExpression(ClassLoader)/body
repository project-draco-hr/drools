{
  Map<String,Object> resolvedImports=new HashMap<String,Object>(importClasses.length + importMethods.length + importFields.length);
  String lastName=null;
  try {
    for (    String name : importClasses) {
      lastName=name;
      Class cls=loadClass(classLoader,name);
      resolvedImports.put(cls.getSimpleName(),cls);
    }
    for (    String name : importMethods) {
      lastName=name;
      int lastDot=name.lastIndexOf('.');
      String className=name.substring(0,lastDot);
      Class cls=loadClass(classLoader,className);
      String methodName=name.substring(lastDot + 1);
      Method method=null;
      for (      Method item : cls.getMethods()) {
        if (methodName.equals(item.getName())) {
          method=item;
          break;
        }
      }
      resolvedImports.put(method.getName(),method);
    }
    for (    String name : importFields) {
      int lastDot=name.lastIndexOf('.');
      String className=name.substring(0,lastDot);
      Class cls=loadClass(classLoader,className);
      String fieldName=name.substring(lastDot + 1);
      Field field=cls.getField(fieldName);
      resolvedImports.put(field.getName(),field);
    }
  }
 catch (  Exception e) {
    throw new RuntimeDroolsException("Unable to resolve import '" + lastName + "'");
  }
  ParserConfiguration conf=new ParserConfiguration();
  conf.setImports(resolvedImports);
  conf.setPackageImports(new HashSet(Arrays.asList(this.pkgImports)));
  conf.setClassLoader(classLoader);
  final ParserContext parserContext=new ParserContext(conf);
  if (MVELDebugHandler.isDebugMode()) {
    parserContext.setDebugSymbols(true);
  }
  parserContext.setStrictTypeEnforcement(strictMode);
  parserContext.setStrongTyping(strictMode);
  parserContext.setIndexAllocation(true);
  if (interceptors != null) {
    parserContext.setInterceptors(interceptors);
  }
  parserContext.addIndexedVariables(inputIdentifiers);
  String identifier=null;
  String type=null;
  try {
    for (int i=0, length=inputIdentifiers.length; i < length; i++) {
      identifier=inputIdentifiers[i];
      type=inputTypes[i];
      Class cls=loadClass(classLoader,inputTypes[i]);
      parserContext.addInput(inputIdentifiers[i],cls);
    }
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeDroolsException("Unable to resolve class '" + type + "' for identifier '"+ identifier);
  }
  parserContext.setSourceFile(name);
  return compile(expression,classLoader,parserContext,languageLevel);
}
