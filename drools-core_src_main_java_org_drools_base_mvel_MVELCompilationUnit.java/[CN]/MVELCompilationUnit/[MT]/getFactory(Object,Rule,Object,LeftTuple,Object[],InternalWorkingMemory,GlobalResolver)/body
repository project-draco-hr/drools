{
  int varLength=inputIdentifiers.length;
  Object[] vals=new Object[varLength];
  int i=0;
  if (rightObject != null) {
    vals[i++]=rightObject;
  }
  vals[i++]=knowledgeHelper;
  vals[i++]=knowledgeHelper;
  vals[i++]=rule;
  if (globalIdentifiers != null) {
    for (int j=0, length=globalIdentifiers.length; j < length; j++) {
      vals[i++]=globals.resolveGlobal(this.globalIdentifiers[j]);
    }
  }
  InternalFactHandle[] handles;
  if (tuples != null) {
    handles=((LeftTuple)tuples).toFactHandles();
  }
 else {
    handles=new InternalFactHandle[0];
  }
  if (operators != null) {
    for (int j=0, length=operators.length; j < length; j++) {
      vals[i++]=operators[j].setWorkingMemory(workingMemory);
      if (operators[j].getLeftBinding() != null) {
        if (operators[j].getLeftBinding().getIdentifier().equals("this")) {
          operators[j].setLeftHandle((InternalFactHandle)workingMemory.getFactHandle(rightObject));
        }
 else {
          operators[j].setLeftHandle(getFactHandle(operators[j].getLeftBinding(),handles));
        }
      }
      if (operators[j].getRightBinding() != null) {
        if (operators[j].getRightBinding().getIdentifier().equals("this")) {
          operators[j].setRightHandle((InternalFactHandle)workingMemory.getFactHandle(rightObject));
        }
 else {
          operators[j].setRightHandle(getFactHandle(operators[j].getRightBinding(),handles));
        }
      }
    }
  }
  IdentityHashMap<Object,FactHandle> identityMap=null;
  if (knowledgeHelper != null) {
    identityMap=new IdentityHashMap<Object,FactHandle>();
  }
  if (tuples != null) {
    if (this.previousDeclarations != null && this.previousDeclarations.length > 0) {
      Declaration[] prevDecl=this.previousDeclarations;
      if (knowledgeHelper != null) {
        prevDecl=((AgendaItem)((KnowledgeHelper)knowledgeHelper).getActivation()).getRuleTerminalNode().getDeclarations();
      }
      for (int j=0, length=prevDecl.length; j < length; j++) {
        Declaration decl=prevDecl[j];
        InternalFactHandle handle=getFactHandle(decl,handles);
        Object o=decl.getValue((InternalWorkingMemory)workingMemory,handle.getObject());
        if (knowledgeHelper != null && decl.isPatternDeclaration()) {
          identityMap.put(decl.getIdentifier(),handle);
        }
        vals[i++]=o;
      }
    }
  }
  if (this.localDeclarations != null && this.localDeclarations.length > 0) {
    for (int j=0, length=this.localDeclarations.length; j < length; j++) {
      Declaration decl=this.localDeclarations[j];
      Object o=decl.getValue((InternalWorkingMemory)workingMemory,rightObject);
      vals[i++]=o;
    }
  }
  int otherVarsPos=0;
  if (otherVars != null) {
    otherVarsPos=i;
    for (    Object o : otherVars) {
      vals[i++]=o;
    }
  }
  int otherVarsLength=i - otherVarsPos;
  VariableResolverFactory locals=new CachingMapVariableResolverFactory(new HashMap<String,Object>());
  DroolsMVELIndexedFactory factory=new DroolsMVELIndexedFactory(inputIdentifiers,vals,locals);
  factory.setOtherVarsPos(otherVarsPos);
  factory.setOtherVarsLength(otherVarsLength);
  if (knowledgeHelper != null && knowledgeHelper instanceof KnowledgeHelper) {
    KnowledgeHelper kh=(KnowledgeHelper)knowledgeHelper;
    kh.setIdentityMap(identityMap);
    factory.setKnowledgeHelper(kh);
  }
  return factory;
}
