{
  removePropertyChangeListener(handle);
  PropagationContextImpl context=new PropagationContextImpl(++this.propagationIdCounter,PropagationContext.RETRACTION,rule,activation);
  for (Iterator it=this.getFactTablesList(((FactHandleImpl)handle).getObject().getClass()).iterator(); it.hasNext(); ) {
    ((FactTable)it.next()).remove(handle);
  }
  Iterator tuples=((FactHandleImpl)handle).getActivatedTuples();
  for (; tuples != null && tuples.hasNext(); ) {
    this.invalidateActivation((LeapsTuple)tuples.next());
  }
  FactHandleTupleAssembly assembly;
  Iterator it;
  it=((FactHandleImpl)handle).getNotTuples();
  if (it != null) {
    for (; it.hasNext(); ) {
      assembly=(FactHandleTupleAssembly)it.next();
      assembly.getTuple().removeNotFactHandle(handle,assembly.getIndex());
    }
  }
  it=((FactHandleImpl)handle).getExistsTuples();
  if (it != null) {
    for (; it.hasNext(); ) {
      assembly=(FactHandleTupleAssembly)it.next();
      assembly.getTuple().removeExistsFactHandle(handle,assembly.getIndex());
    }
  }
  LeapsTuple tuple;
  IteratorChain chain=new IteratorChain();
  it=((FactHandleImpl)handle).getNotTuples();
  if (it != null) {
    chain.addIterator(it);
  }
  it=((FactHandleImpl)handle).getExistsTuples();
  if (it != null) {
    chain.addIterator(it);
  }
  for (; chain.hasNext(); ) {
    tuple=((FactHandleTupleAssembly)chain.next()).getTuple();
    if (tuple.isReadyForActivation() && tuple.isActivationNull()) {
      this.assertTuple(tuple,rule);
    }
 else {
      this.invalidateActivation(tuple);
    }
  }
  this.stack.remove(new Token(this,(FactHandleImpl)handle));
  Object oldObject=removeObject(handle);
  if (removeLogical) {
    this.equalsMap.remove(oldObject);
  }
  if (updateEqualsMap) {
    this.equalsMap.remove(oldObject);
  }
  this.workingMemoryEventSupport.fireObjectRetracted(context,handle,oldObject);
}
