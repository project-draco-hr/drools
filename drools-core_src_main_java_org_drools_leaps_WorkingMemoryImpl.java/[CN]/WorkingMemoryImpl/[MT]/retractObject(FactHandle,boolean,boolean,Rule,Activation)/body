{
  removePropertyChangeListener(handle);
  PropagationContextImpl context=new PropagationContextImpl(++this.propagationIdCounter,PropagationContext.RETRACTION,rule,activation);
  Iterator it;
  RetractAssembly info=(RetractAssembly)this.retracts.remove(((FactHandleImpl)handle).getId());
  if (info != null) {
    PendingTuple pendingTuple;
    for (it=info.getPendingTuples(); it.hasNext(); ) {
      pendingTuple=(PendingTuple)it.next();
      if (pendingTuple.isValid()) {
        invalidatePendingTuple(pendingTuple);
      }
    }
    for (it=info.getPendingExists(); it.hasNext(); ) {
      pendingTuple=(PendingTuple)it.next();
      if (pendingTuple.isValid()) {
        pendingTuple.decrementExistsCount();
        if (!pendingTuple.isValid()) {
          invalidatePendingTuple(pendingTuple);
        }
      }
    }
    for (it=info.getPendingNots(); it.hasNext(); ) {
      pendingTuple=(PendingTuple)it.next();
      if (pendingTuple.isValid()) {
        pendingTuple.decrementNotCount();
        if (!pendingTuple.isValid()) {
          invalidatePendingTuple(pendingTuple);
        }
 else {
          assertTuple(pendingTuple.getTuple(),new ArrayList(),pendingTuple.getExistsQualifiers(),pendingTuple.getContext(),pendingTuple.getRule());
          pendingTuple.setSubmited();
        }
      }
    }
    PostedActivation postedActivation;
    for (it=info.getPostedActivations(); it.hasNext(); ) {
      postedActivation=(PostedActivation)it.next();
      if (postedActivation.isValid()) {
        invalidatePostedActivation(postedActivation);
      }
    }
    for (it=info.getPostedExists(); it.hasNext(); ) {
      postedActivation=(PostedActivation)it.next();
      if (postedActivation.isValid()) {
        postedActivation.decrementExistsCount();
        if (!postedActivation.isValid()) {
          invalidatePostedActivation(postedActivation);
        }
      }
    }
  }
  this.stack.remove(new Token(this,(FactHandleImpl)handle));
  Object oldObject=removeObject(handle);
  if (removeLogical) {
    removeLogicalDependencies(handle);
    this.equalsMap.remove(oldObject);
  }
  if (updateEqualsMap) {
    this.equalsMap.remove(oldObject);
  }
  this.workingMemoryEventSupport.fireObjectRetracted(context,handle,oldObject);
}
