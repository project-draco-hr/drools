{
  removePropertyChangeListener(handle);
  PropagationContext propagationContext=new PropagationContextImpl(++this.propagationIdCounter,PropagationContext.RETRACTION,rule,activation);
  Set pendingActivations=(Set)this.blockingFactHandles.remove(handle);
  if (pendingActivations != null) {
    for (Iterator it=pendingActivations.iterator(); it.hasNext(); ) {
      PendingActivation item=(PendingActivation)it.next();
      item.decrementBlockingFactsCount();
      if (!item.containsBlockingFacts()) {
        boolean allPresent=true;
        FactHandleImpl[] factHandles=(FactHandleImpl[])item.getTuple().getFactHandles();
        for (int i=0; i < factHandles.length && allPresent; i++) {
          allPresent=this.objects.containsKey(factHandles[i].getId());
        }
        if (allPresent) {
          this.assertTuple(item.getTuple(),new HashSet(),item.getContext(),item.getRule());
        }
      }
    }
  }
  Set postedActivations=(Set)this.factHandlesWithActivations.remove(handle);
  if (postedActivations != null) {
    for (Iterator it=postedActivations.iterator(); it.hasNext(); ) {
      PostedActivation item=(PostedActivation)it.next();
      if (!item.isWasRemoved()) {
        if (!((LeapsTuple)((AgendaItem)item.getActivation()).getTuple()).isActivationNull()) {
          item.getActivation().remove();
        }
        item.setWasRemoved(true);
      }
    }
  }
  this.stack.remove(new Token(this,(FactHandleImpl)handle));
  Object oldObject=removeObject(handle);
  if (removeLogical) {
    FactHandleImpl handleImpl=(FactHandleImpl)handle;
    Set activations=(Set)this.justified.remove(handleImpl.getId());
    if (activations != null) {
      for (Iterator it=activations.iterator(); it.hasNext(); ) {
        this.justifiers.remove(it.next());
      }
    }
    this.equalsMap.remove(oldObject);
  }
  if (updateEqualsMap) {
    this.equalsMap.remove(oldObject);
  }
  this.workingMemoryEventSupport.fireObjectRetracted(propagationContext,handle,oldObject);
}
