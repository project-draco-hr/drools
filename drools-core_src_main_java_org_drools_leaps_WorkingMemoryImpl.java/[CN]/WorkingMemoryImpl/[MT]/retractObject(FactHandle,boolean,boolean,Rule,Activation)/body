{
  removePropertyChangeListener(handle);
  for (Iterator it=this.getFactTablesList(((FactHandleImpl)handle).getObject().getClass()).iterator(); it.hasNext(); ) {
    ((FactTable)it.next()).remove(handle);
  }
  Iterator tuples=((FactHandleImpl)handle).getActivatedTuples();
  for (; tuples != null && tuples.hasNext(); ) {
    LeapsTuple tuple=(LeapsTuple)tuples.next();
    if (tuple.getLeapsRule().getRule() instanceof Query) {
      removeFromQueryResults(tuple.getLeapsRule().getRule().getName(),tuple);
    }
 else {
      invalidateActivation(tuple);
    }
  }
  FactHandleTupleAssembly assembly;
  LeapsTuple tuple;
  Iterator it;
  it=((FactHandleImpl)handle).getNotTupleAssemblies();
  if (it != null) {
    for (; it.hasNext(); ) {
      assembly=(FactHandleTupleAssembly)it.next();
      tuple=assembly.getTuple();
      tuple.removeBlockingNotFactHandle(assembly.getIndex());
      TokenEvaluator.evaluateNotCondition(new FactHandleImpl(((FactHandleImpl)handle).getId() + 1,null),assembly.getIndex(),tuple,this);
    }
  }
  it=((FactHandleImpl)handle).getExistsTupleAssemblies();
  if (it != null) {
    for (; it.hasNext(); ) {
      assembly=(FactHandleTupleAssembly)it.next();
      tuple=assembly.getTuple();
      tuple.removeExistsFactHandle(assembly.getIndex());
      TokenEvaluator.evaluateExistsCondition(new FactHandleImpl(((FactHandleImpl)handle).getId() + 1,null),assembly.getIndex(),tuple,this);
    }
  }
  IteratorChain chain=new IteratorChain();
  it=((FactHandleImpl)handle).getNotTupleAssemblies();
  if (it != null) {
    chain.addIterator(it);
  }
  it=((FactHandleImpl)handle).getExistsTupleAssemblies();
  if (it != null) {
    chain.addIterator(it);
  }
  for (; chain.hasNext(); ) {
    tuple=((FactHandleTupleAssembly)chain.next()).getTuple();
    if (tuple.isReadyForActivation() && tuple.isActivationNull()) {
      this.assertTuple(tuple);
    }
 else {
      if (tuple.getLeapsRule().getRule() instanceof Query) {
        removeFromQueryResults(tuple.getLeapsRule().getRule().getName(),tuple);
      }
 else {
        invalidateActivation(tuple);
      }
    }
  }
  this.removeTokenFromStack((FactHandleImpl)handle);
  Object oldObject=removeObject(handle);
  if (removeLogical) {
    this.equalsMap.remove(oldObject);
  }
  if (updateEqualsMap) {
    this.equalsMap.remove(oldObject);
  }
  PropagationContextImpl context=new PropagationContextImpl(nextPropagationIdCounter(),PropagationContext.RETRACTION,rule,activation);
  this.workingMemoryEventSupport.fireObjectRetracted(context,handle,oldObject);
}
