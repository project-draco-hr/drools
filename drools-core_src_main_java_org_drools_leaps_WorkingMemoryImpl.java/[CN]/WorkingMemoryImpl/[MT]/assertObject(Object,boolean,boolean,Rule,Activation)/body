{
  FactHandleImpl handle=(FactHandleImpl)this.identityMap.get(object);
  if ((handle != null) && (logical)) {
    return handle;
  }
  Object logicalState=this.equalsMap.get(object);
  if ((handle != null) && (!logical) && logicalState == AbstractWorkingMemory.STATED) {
    return handle;
  }
  if (!logical) {
    if (logicalState instanceof FactHandleImpl) {
      handle=(FactHandleImpl)logicalState;
      handle.removeAllLogicalDependencies();
    }
 else {
      handle=(FactHandleImpl)newFactHandle(object);
    }
    putObject(handle,object);
    this.equalsMap.put(object,AbstractWorkingMemory.STATED);
    if (dynamic) {
      addPropertyChangeListener(object);
    }
  }
 else {
    if (logicalState == AbstractWorkingMemory.STATED) {
      return null;
    }
    handle=(FactHandleImpl)logicalState;
    if (handle == null) {
      handle=(FactHandleImpl)newFactHandle(object);
      putObject(handle,object);
      this.equalsMap.put(object,handle);
    }
    LeapsTuple tuple=(LeapsTuple)activation.getTuple();
    tuple.addLogicalDependency(handle);
    handle.addLogicalDependency(tuple);
  }
  LeapsTuple tuple;
  LeapsRule leapsRule;
  Class objectClass=object.getClass();
  for (Iterator tables=this.getFactTablesList(objectClass).iterator(); tables.hasNext(); ) {
    FactTable factTable=(FactTable)tables.next();
    factTable.add(handle);
    ColumnConstraints constraint;
    ColumnConstraints[] constraints;
    for (Iterator tuples=factTable.getTuplesIterator(); tuples.hasNext(); ) {
      tuple=(LeapsTuple)tuples.next();
      leapsRule=tuple.getLeapsRule();
      constraints=leapsRule.getNotColumnConstraints();
      for (int i=0, length=constraints.length; i < length; i++) {
        constraint=constraints[i];
        if (objectClass.isAssignableFrom(constraint.getClassType()) && constraint.isAllowed(handle,tuple,this)) {
          tuple.addNotFactHandle(handle,i);
          handle.addNotTuple(tuple,i);
        }
      }
      constraints=leapsRule.getExistsColumnConstraints();
      for (int i=0, length=constraints.length; i < length; i++) {
        constraint=constraints[i];
        if (objectClass.isAssignableFrom(constraint.getClassType()) && constraint.isAllowed(handle,tuple,this)) {
          tuple.addExistsFactHandle(handle,i);
          handle.addExistsTuple(tuple,i);
        }
      }
      if (tuple.isReadyForActivation() && tuple.isActivationNull()) {
        this.assertTuple(tuple);
        tuples.remove();
      }
 else       if (!tuple.isReadyForActivation() && !tuple.isActivationNull()) {
        this.invalidateActivation(tuple);
      }
    }
  }
  PropagationContextImpl context=new PropagationContextImpl(nextPropagationIdCounter(),PropagationContext.ASSERTION,rule,activation);
  this.pushTokenOnStack(new Token(this,handle,context));
  this.workingMemoryEventSupport.fireObjectAsserted(context,handle,object);
  return handle;
}
