{
  FactHandleImpl handle=(FactHandleImpl)this.identityMap.get(object);
  if ((handle != null) && (logical)) {
    return handle;
  }
  Object logicalState=this.equalsMap.get(object);
  if ((handle != null) && (!logical) && logicalState == AbstractWorkingMemory.STATED) {
    return handle;
  }
  if (!logical) {
    if (logicalState instanceof FactHandleImpl) {
      handle=(FactHandleImpl)logicalState;
      removeLogicalDependencies(handle);
    }
 else {
      handle=(FactHandleImpl)newFactHandle(object);
    }
    putObject(handle,object);
    this.equalsMap.put(object,AbstractWorkingMemory.STATED);
    if (dynamic) {
      addPropertyChangeListener(object);
    }
  }
 else {
    if (logicalState == AbstractWorkingMemory.STATED) {
      return null;
    }
    handle=(FactHandleImpl)logicalState;
    if (handle == null) {
      handle=(FactHandleImpl)newFactHandle(object);
      putObject(handle,object);
      this.equalsMap.put(object,handle);
    }
    addLogicalDependency(handle,activation,activation.getPropagationContext(),rule);
  }
  List tablesList=this.getFactTablesList(object.getClass());
  for (Iterator it=tablesList.iterator(); it.hasNext(); ) {
    ((FactTable)it.next()).add(handle);
  }
  Token token=new Token(this,handle);
  this.pushTokenOnStack(token);
  this.workingMemoryEventSupport.fireObjectAsserted(new PropagationContextImpl(++this.propagationIdCounter,PropagationContext.ASSERTION,rule,activation),handle,object);
  return handle;
}
