{
  int MULTI_LINE_COMMENT_StartIndex=input.index();
  try {
    int type=MULTI_LINE_COMMENT;
    int start=getCharIndex();
    int line=getLine();
    int charPosition=getCharPositionInLine();
    int channel=Token.DEFAULT_CHANNEL;
    if (backtracking > 0 && alreadyParsedRule(input,69)) {
      return;
    }
{
      match("/*");
      if (failed)       return;
      loop16:       do {
        int alt16=2;
        int LA16_0=input.LA(1);
        if (LA16_0 == '*') {
          int LA16_1=input.LA(2);
          if (LA16_1 == '/') {
            alt16=2;
          }
 else           if ((LA16_1 >= '\u0000' && LA16_1 <= '.') || (LA16_1 >= '0' && LA16_1 <= '\uFFFE')) {
            alt16=1;
          }
        }
 else         if ((LA16_0 >= '\u0000' && LA16_0 <= ')') || (LA16_0 >= '+' && LA16_0 <= '\uFFFE')) {
          alt16=1;
        }
switch (alt16) {
case 1:
{
            matchAny();
            if (failed)             return;
          }
        break;
default :
      break loop16;
  }
}
 while (true);
match("*/");
if (failed) return;
if (backtracking == 0) {
  channel=99;
}
}
if (token == null) {
emit(type,line,charPosition,channel,start,getCharIndex() - 1);
}
}
  finally {
if (backtracking > 0) {
memoize(input,69,MULTI_LINE_COMMENT_StartIndex);
}
}
}
