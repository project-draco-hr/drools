{
  int FLOAT_StartIndex=input.index();
  try {
    int type=FLOAT;
    int start=getCharIndex();
    int line=getLine();
    int charPosition=getCharPositionInLine();
    int channel=Token.DEFAULT_CHANNEL;
    if (backtracking > 0 && alreadyParsedRule(input,47)) {
      return;
    }
{
      int cnt5=0;
      loop5:       do {
        int alt5=2;
        int LA5_0=input.LA(1);
        if ((LA5_0 >= '0' && LA5_0 <= '9')) {
          alt5=1;
        }
switch (alt5) {
case 1:
{
            matchRange('0','9');
            if (failed)             return;
          }
        break;
default :
      if (cnt5 >= 1)       break loop5;
    if (backtracking > 0) {
      failed=true;
      return;
    }
  EarlyExitException eee=new EarlyExitException(5,input);
throw eee;
}
cnt5++;
}
 while (true);
match('.');
if (failed) return;
int cnt6=0;
loop6: do {
int alt6=2;
int LA6_0=input.LA(1);
if ((LA6_0 >= '0' && LA6_0 <= '9')) {
alt6=1;
}
switch (alt6) {
case 1:
{
matchRange('0','9');
if (failed) return;
}
break;
default :
if (cnt6 >= 1) break loop6;
if (backtracking > 0) {
failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(6,input);
throw eee;
}
cnt6++;
}
 while (true);
}
if (token == null) {
emit(type,line,charPosition,channel,start,getCharIndex() - 1);
}
}
  finally {
if (backtracking > 0) {
memoize(input,47,FLOAT_StartIndex);
}
}
}
