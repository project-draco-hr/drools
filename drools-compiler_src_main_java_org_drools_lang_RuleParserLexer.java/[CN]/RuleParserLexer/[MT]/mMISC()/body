{
  int MISC_StartIndex=input.index();
  try {
    int type=MISC;
    int start=getCharIndex();
    int line=getLine();
    int charPosition=getCharPositionInLine();
    int channel=Token.DEFAULT_CHANNEL;
    if (backtracking > 0 && alreadyParsedRule(input,44)) {
      return;
    }
    int alt1=37;
switch (input.LA(1)) {
case '!':
      alt1=1;
    break;
case '@':
  alt1=2;
break;
case '$':
alt1=3;
break;
case '%':
alt1=4;
break;
case '^':
alt1=5;
break;
case '&':
int LA1_6=input.LA(2);
if (LA1_6 == '&') {
alt1=24;
}
 else {
alt1=6;
}
break;
case '*':
int LA1_7=input.LA(2);
if (LA1_7 == '=') {
alt1=34;
}
 else {
alt1=7;
}
break;
case '_':
alt1=8;
break;
case '-':
switch (input.LA(2)) {
case '=':
alt1=32;
break;
case '-':
alt1=27;
break;
default :
alt1=9;
}
break;
case '+':
switch (input.LA(2)) {
case '=':
alt1=30;
break;
case '+':
alt1=26;
break;
default :
alt1=10;
}
break;
case '|':
int LA1_11=input.LA(2);
if (LA1_11 == '|') {
alt1=23;
}
 else {
alt1=11;
}
break;
case ',':
alt1=12;
break;
case '{':
alt1=13;
break;
case '}':
alt1=14;
break;
case '[':
alt1=15;
break;
case ']':
alt1=16;
break;
case '=':
switch (input.LA(2)) {
case '/':
alt1=37;
break;
case '=':
alt1=29;
break;
case '+':
alt1=31;
break;
case '-':
alt1=33;
break;
case '*':
alt1=35;
break;
default :
alt1=17;
}
break;
case '/':
int LA1_18=input.LA(2);
if (LA1_18 == '=') {
alt1=36;
}
 else {
alt1=18;
}
break;
case '(':
alt1=19;
break;
case ')':
alt1=20;
break;
case '\'':
alt1=21;
break;
case '\\':
alt1=22;
break;
case '<':
alt1=25;
break;
case '>':
alt1=28;
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("968:1: MISC : ( \'!\' | \'@\' | \'$\' | \'%\' | \'^\' | \'&\' | \'*\' | \'_\' | \'-\' | \'+\' | \'|\' | \',\' | \'{\' | \'}\' | \'[\' | \']\' | \'=\' | \'/\' | \'(\' | \')\' | \'\\\'\' | \'\\\\\' | \'||\' | \'&&\' | \'<<<\' | \'++\' | \'--\' | \'>>>\' | \'==\' | \'+=\' | \'=+\' | \'-=\' | \'=-\' | \'*=\' | \'=*\' | \'/=\' | \'=/\' );",1,0,input);
throw nvae;
}
switch (alt1) {
case 1:
{
match('!');
if (failed) return;
}
break;
case 2:
{
match('@');
if (failed) return;
}
break;
case 3:
{
match('$');
if (failed) return;
}
break;
case 4:
{
match('%');
if (failed) return;
}
break;
case 5:
{
match('^');
if (failed) return;
}
break;
case 6:
{
match('&');
if (failed) return;
}
break;
case 7:
{
match('*');
if (failed) return;
}
break;
case 8:
{
match('_');
if (failed) return;
}
break;
case 9:
{
match('-');
if (failed) return;
}
break;
case 10:
{
match('+');
if (failed) return;
}
break;
case 11:
{
match('|');
if (failed) return;
}
break;
case 12:
{
match(',');
if (failed) return;
}
break;
case 13:
{
match('{');
if (failed) return;
}
break;
case 14:
{
match('}');
if (failed) return;
}
break;
case 15:
{
match('[');
if (failed) return;
}
break;
case 16:
{
match(']');
if (failed) return;
}
break;
case 17:
{
match('=');
if (failed) return;
}
break;
case 18:
{
match('/');
if (failed) return;
}
break;
case 19:
{
match('(');
if (failed) return;
}
break;
case 20:
{
match(')');
if (failed) return;
}
break;
case 21:
{
match('\'');
if (failed) return;
}
break;
case 22:
{
match('\\');
if (failed) return;
}
break;
case 23:
{
match("||");
if (failed) return;
}
break;
case 24:
{
match("&&");
if (failed) return;
}
break;
case 25:
{
match("<<<");
if (failed) return;
}
break;
case 26:
{
match("++");
if (failed) return;
}
break;
case 27:
{
match("--");
if (failed) return;
}
break;
case 28:
{
match(">>>");
if (failed) return;
}
break;
case 29:
{
match("==");
if (failed) return;
}
break;
case 30:
{
match("+=");
if (failed) return;
}
break;
case 31:
{
match("=+");
if (failed) return;
}
break;
case 32:
{
match("-=");
if (failed) return;
}
break;
case 33:
{
match("=-");
if (failed) return;
}
break;
case 34:
{
match("*=");
if (failed) return;
}
break;
case 35:
{
match("=*");
if (failed) return;
}
break;
case 36:
{
match("/=");
if (failed) return;
}
break;
case 37:
{
match("=/");
if (failed) return;
}
break;
}
if (token == null) {
emit(type,line,charPosition,channel,start,getCharIndex() - 1);
}
}
  finally {
if (backtracking > 0) {
memoize(input,44,MISC_StartIndex);
}
}
}
