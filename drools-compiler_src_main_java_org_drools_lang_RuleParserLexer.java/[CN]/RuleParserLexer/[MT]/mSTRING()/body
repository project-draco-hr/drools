{
  final int STRING_StartIndex=this.input.index();
  try {
    final int type=RuleParserLexer.STRING;
    final int start=getCharIndex();
    final int line=getLine();
    final int charPosition=getCharPositionInLine();
    final int channel=Token.DEFAULT_CHANNEL;
    if (this.backtracking > 0 && alreadyParsedRule(this.input,53)) {
      return;
    }
    int alt10=2;
    final int LA10_0=this.input.LA(1);
    if (LA10_0 == '"') {
      alt10=1;
    }
 else     if (LA10_0 == '\'') {
      alt10=2;
    }
 else {
      if (this.backtracking > 0) {
        this.failed=true;
        return;
      }
      final NoViableAltException nvae=new NoViableAltException("1038:1: STRING : ( ( \'\"\' ( options {greedy=false; } : . )* \'\"\' ) | ( \'\\\'\' ( options {greedy=false; } : . )* \'\\\'\' ) );",10,0,this.input);
      throw nvae;
    }
switch (alt10) {
case 1:
{
{
          match('"');
          if (this.failed) {
            return;
          }
          loop8:           do {
            int alt8=2;
            final int LA8_0=this.input.LA(1);
            if (LA8_0 == '"') {
              alt8=2;
            }
 else             if ((LA8_0 >= '\u0000' && LA8_0 <= '!') || (LA8_0 >= '#' && LA8_0 <= '\uFFFE')) {
              alt8=1;
            }
switch (alt8) {
case 1:
{
                matchAny();
                if (this.failed) {
                  return;
                }
              }
            break;
default :
          break loop8;
      }
    }
 while (true);
    match('"');
    if (this.failed) {
      return;
    }
  }
}
break;
case 2:
{
{
match('\'');
if (this.failed) {
  return;
}
loop9: do {
  int alt9=2;
  final int LA9_0=this.input.LA(1);
  if (LA9_0 == '\'') {
    alt9=2;
  }
 else   if ((LA9_0 >= '\u0000' && LA9_0 <= '&') || (LA9_0 >= '(' && LA9_0 <= '\uFFFE')) {
    alt9=1;
  }
switch (alt9) {
case 1:
{
      matchAny();
      if (this.failed) {
        return;
      }
    }
  break;
default :
break loop9;
}
}
 while (true);
match('\'');
if (this.failed) {
return;
}
}
}
break;
}
if (this.token == null) {
emit(type,line,charPosition,channel,start,getCharIndex() - 1);
}
}
  finally {
if (this.backtracking > 0) {
memoize(this.input,53,STRING_StartIndex);
}
}
}
