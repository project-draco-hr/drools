{
  try {
    ruleNestingLevel++;
    int _type=CHAR_LITERAL;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      match('\'');
      int alt22=2;
      int LA22_0=input.LA(1);
      if (((LA22_0 >= '\u0000' && LA22_0 <= '&') || (LA22_0 >= '(' && LA22_0 <= '[') || (LA22_0 >= ']' && LA22_0 <= '\uFFFE'))) {
        alt22=1;
      }
 else       if ((LA22_0 == '\\')) {
        alt22=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("1130:7: (~ ('\\''|'\\\\') | ESCAPE_SEQUENCE )",22,0,input);
        throw nvae;
      }
switch (alt22) {
case 1:
{
          if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFE')) {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
case 2:
{
      mESCAPE_SEQUENCE();
    }
  break;
}
match('\'');
}
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
