{
  String readMethod=declaration.getNativeReadMethodName();
  boolean isObject=readMethod.equals("getValue");
  String expectedTypeDescr=typeDescr(declarationType);
  boolean needsPrimitive=!(expectedTypeDescr.startsWith("L") || expectedTypeDescr.startsWith("["));
  String returnedType=isObject ? "Ljava/lang/Object;" : typeDescr(declaration.getTypeName());
  mv.visitMethodInsn(INVOKEVIRTUAL,Declaration.class.getName().replace('.','/'),readMethod,"(L" + InternalWorkingMemory.class.getName().replace('.','/') + ";Ljava/lang/Object;)"+ returnedType);
  if (isObject) {
    Class<?> declarationClass=declaration.getDeclarationClass();
    if (declarationClass != null) {
      cast(declarationClass);
    }
  }
  if (needsPrimitive && isObject) {
    castToPrimitive(convertPrimitiveNameToType(declarationType));
  }
 else   if (!needsPrimitive && !isObject) {
    castFromPrimitive(convertPrimitiveNameToType(declaration.getExtractor().getExtractToClassName()));
  }
 else   if (needsPrimitive && !isObject && !returnedType.equals(declarationType)) {
    castPrimitiveToPrimitive(declaration.getExtractor().getExtractToClass(),convertPrimitiveNameToType(declarationType));
  }
  return store(registry,declarationType);
}
