{
  String drl="" + "\n" + "package org.drools.core.factmodel.traits.test;\n"+ "\n"+ "import java.util.*;\n"+ "import org.drools.core.factmodel.traits.Alias\n"+ "\n"+ "global java.util.List list;\n"+ "\n"+ "declare trait Citizen\n"+ "@traitable\n"+ "    citizenship : String = \"Unknown\"\n"+ "end\n"+ "\n"+ "declare HashMap @Traitable(logical=true) end \n"+ ""+ ""+ "declare trait Student extends Citizen\n"+ "@propertyReactive\n"+ "   ID : String = \"412314\" @Alias(\"personID\")\n"+ "   GPA : Double = 3.99\n"+ "end\n"+ "\n"+ "declare Person\n"+ "@Traitable\n"+ "    personID : String\n"+ "    isStudent : boolean\n"+ "end\n"+ "\n"+ "declare trait Worker\n"+ "@propertyReactive\n"+ "    //customer : Citizen\n"+ "    hasBenefits : Boolean = true\n"+ "end\n"+ "\n"+ "declare trait StudentWorker extends Worker\n"+ "@propertyReactive\n"+ "    //currentStudent : Citizen @Alias(\"customer\")\n"+ "    tuitionWaiver : Boolean @Alias(\"hasBenefits\")\n"+ "end\n"+ "\n"+ "rule \"1\"\n"+ "salience 1\n"+ "no-loop\n"+ "when\n"+ "then\n"+ "    Person p = new Person(\"1020\",true);\n"+ "    Map map = new HashMap();\n"+ "    map.put(\"isEmpty\",true);\n"+ "    insert(p);\n"+ "    insert(map);\n"+ "    list.add(\"initialized\");\n"+ "end\n"+ "\n"+ "rule \"2\"\n"+ "salience 1\n"+ "no-loop\n"+ "when\n"+ "    $stu : Person(isStudent == true)\n"+ "    $map : Map(this[\"isEmpty\"] == true)\n"+ "then\n"+ "    Student s = don( $stu , Student.class );\n"+ "    $map.put(\"worker\" , s);\n"+ "    $map.put(\"isEmpty\" , false);\n"+ "    $map.put(\"hasBenefits\",null);\n"+ "    update($map);\n"+ "    System.out.println(\"don: Person -> Student \");\n"+ "    list.add(\"student is donned\");\n"+ "end\n"+ "\n"+ "rule \"3\"\n"+ "salience 1\n"+ "no-loop\n"+ "when\n"+ "    $map : Map($stu : this[\"worker\"])\n"+ "    Map($stu isA Student.class, this == $map)\n"+ "then\n"+ "    Object obj = don( $map , Worker.class );\n"+ "    System.out.println(\"don: Map -> Worker : \"+obj);\n"+ "    list.add(\"worker is donned\");\n"+ "end\n"+ "\n"+ "rule \"4\"\n"+ "salience 1\n"+ "no-loop\n"+ "when\n"+ "    $stu : Student()\n"+ "then\n"+ "    Object obj = don( $stu , StudentWorker.class );\n"+ "    System.out.println(\"don: Map -> StudentWorker : \"+obj);\n"+ "    list.add(\"studentworker is donned\");\n"+ "end\n"+ "\n"+ "rule \"5\"\n"+ "salience 1\n"+ "no-loop\n"+ "when\n"+ "    StudentWorker(tuitionWaiver == true)\n"+ "then\n"+ "    System.out.println(\"tuitionWaiver == true\");\n"+ "    list.add(\"tuitionWaiver is true\");\n"+ "end\n"+ "\n";
  StatefulKnowledgeSession ksession=loadKnowledgeBaseFromString(drl).newStatefulKnowledgeSession();
  TraitFactory.setMode(TraitFactory.VirtualPropertyMode.MAP,ksession.getKieBase());
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  assertTrue(list.contains("initialized"));
  assertTrue(list.contains("student is donned"));
  assertTrue(list.contains("worker is donned"));
  assertTrue(list.contains("studentworker is donned"));
  assertTrue(list.contains("tuitionWaiver is true"));
}
