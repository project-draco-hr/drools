{
  BeanCreator fallbackBeanCreator=new ReflectionBeanCreator();
  ClassLoader cl=((InternalRuleBase)((InternalKnowledgeBase)kSession.getKieBase()).getRuleBase()).getRootClassLoader();
  for (  ListenerModel listenerModel : model.getListenerModels()) {
    Object listener;
    try {
      listener=beanCreator.createBean(cl,listenerModel.getType(),listenerModel.getQualifierModel());
    }
 catch (    Exception e) {
      try {
        listener=fallbackBeanCreator.createBean(cl,listenerModel.getType(),listenerModel.getQualifierModel());
      }
 catch (      Exception ex) {
        throw new RuntimeException("Cannot instance listener " + listenerModel.getType(),e);
      }
    }
switch (listenerModel.getKind()) {
case AGENDA_EVENT_LISTENER:
      kSession.addEventListener((AgendaEventListener)listener);
    break;
case RULE_RUNTIME_EVENT_LISTENER:
  kSession.addEventListener((RuleRuntimeEventListener)listener);
break;
case PROCESS_EVENT_LISTENER:
kSession.addEventListener((ProcessEventListener)listener);
break;
}
}
for (WorkItemHandlerModel wihModel : model.getWorkItemHandlerModels()) {
WorkItemHandler wih;
try {
wih=beanCreator.createBean(cl,wihModel.getType(),wihModel.getQualifierModel());
}
 catch (Exception e) {
try {
wih=fallbackBeanCreator.createBean(cl,wihModel.getType(),wihModel.getQualifierModel());
}
 catch (Exception ex) {
throw new RuntimeException("Cannot instance WorkItemHandler " + wihModel.getType(),e);
}
}
kSession.getWorkItemManager().registerWorkItemHandler(wihModel.getName(),wih);
}
}
