{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Restrictions.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Opposite LiteralRestrictions with ranges, less or equal - greater or equal for ints and dates"));
  Collection<Object> data=new ArrayList<Object>();
  Pattern pattern=VerifierComponentMockFactory.createPattern1();
  LiteralRestriction r1=new LiteralRestriction(pattern);
  r1.setFieldPath("0");
  r1.setOperator(Operator.GREATER_OR_EQUAL);
  r1.setValue("1");
  r1.setOrderNumber(0);
  LiteralRestriction r2=new LiteralRestriction(pattern);
  r2.setFieldPath("0");
  r2.setOperator(Operator.LESS_OR_EQUAL);
  r2.setValue("0");
  r2.setOrderNumber(1);
  data.add(r1);
  data.add(r2);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<Cause,Set<Cause>> map=createOppositesMap(VerifierComponentType.RESTRICTION,sessionResult.iterateObjects());
  assertTrue((TestBase.causeMapContains(map,r1,r2) ^ TestBase.causeMapContains(map,r2,r1)));
  if (!map.isEmpty()) {
    fail("More opposites than was expected.");
  }
}
