{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Restrictions.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Opposite LiteralRestrictions"));
  Collection<Object> data=new ArrayList<Object>();
  LiteralRestriction r1=new LiteralRestriction();
  r1.setFieldGuid("0");
  r1.setOperator(Operator.EQUAL);
  r1.setValue("1");
  LiteralRestriction r2=new LiteralRestriction();
  r2.setFieldGuid("0");
  r2.setOperator(Operator.NOT_EQUAL);
  r2.setValue("1");
  LiteralRestriction r3=new LiteralRestriction();
  r3.setFieldGuid("0");
  r3.setOperator(Operator.EQUAL);
  r3.setValue("1.0");
  LiteralRestriction r4=new LiteralRestriction();
  r4.setFieldGuid("0");
  r4.setOperator(Operator.NOT_EQUAL);
  r4.setValue("1.0");
  LiteralRestriction r5=new LiteralRestriction();
  r5.setFieldGuid("0");
  r5.setOperator(MatchesEvaluatorsDefinition.MATCHES);
  r5.setValue("foo");
  LiteralRestriction r6=new LiteralRestriction();
  r6.setFieldGuid("0");
  r6.setOperator(MatchesEvaluatorsDefinition.NOT_MATCHES);
  r6.setValue("foo");
  data.add(r1);
  data.add(r2);
  data.add(r3);
  data.add(r4);
  data.add(r5);
  data.add(r6);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<Cause,Set<Cause>> map=createOppositesMap(VerifierComponentType.RESTRICTION,sessionResult.iterateObjects());
  assertTrue((TestBase.causeMapContains(map,r1,r2) ^ TestBase.causeMapContains(map,r2,r1)));
  assertTrue((TestBase.causeMapContains(map,r3,r4) ^ TestBase.causeMapContains(map,r4,r3)));
  assertTrue((TestBase.causeMapContains(map,r5,r6) ^ TestBase.causeMapContains(map,r6,r5)));
  if (!map.isEmpty()) {
    fail("More opposites than was expected.");
  }
}
