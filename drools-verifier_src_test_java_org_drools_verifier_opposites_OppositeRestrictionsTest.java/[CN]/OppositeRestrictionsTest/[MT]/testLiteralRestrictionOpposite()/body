{
  KieSession session=getStatelessKieSession(this.getClass().getResourceAsStream("Restrictions.drl"));
  Collection<Object> data=new ArrayList<Object>();
  Pattern pattern=VerifierComponentMockFactory.createPattern1();
  LiteralRestriction r1=LiteralRestriction.createRestriction(pattern,"1");
  r1.setFieldPath("0");
  r1.setOperator(Operator.EQUAL);
  r1.setOrderNumber(0);
  LiteralRestriction r2=LiteralRestriction.createRestriction(pattern,"1");
  r2.setFieldPath("0");
  r2.setOperator(Operator.NOT_EQUAL);
  r2.setOrderNumber(1);
  LiteralRestriction r3=LiteralRestriction.createRestriction(pattern,"1.0");
  r3.setFieldPath("0");
  r3.setOperator(Operator.EQUAL);
  r3.setOrderNumber(2);
  LiteralRestriction r4=LiteralRestriction.createRestriction(pattern,"1.0");
  r4.setFieldPath("0");
  r4.setOperator(Operator.NOT_EQUAL);
  r4.setOrderNumber(3);
  data.add(r1);
  data.add(r2);
  data.add(r3);
  data.add(r4);
  for (  Object o : data) {
    session.insert(o);
  }
  session.fireAllRules(new RuleNameMatchesAgendaFilter("Opposite LiteralRestrictions"));
  Map<Cause,Set<Cause>> map=createOppositesMap(VerifierComponentType.RESTRICTION,(Iterator<Object>)session.getObjects().iterator());
  assertTrue((TestBaseOld.causeMapContains(map,r1,r2) ^ TestBaseOld.causeMapContains(map,r2,r1)));
  assertTrue((TestBaseOld.causeMapContains(map,r3,r4) ^ TestBaseOld.causeMapContains(map,r4,r3)));
  if (!map.isEmpty()) {
    fail("More opposites than was expected.");
  }
}
