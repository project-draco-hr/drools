{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Restrictions.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Opposite VariableRestrictions"));
  Collection<Object> data=new ArrayList<Object>();
  Variable variable1=new Variable();
  variable1.setObjectTypeGuid("1");
  variable1.setObjectTypeType(VerifierComponentType.FIELD.getType());
  VariableRestriction r1=new VariableRestriction();
  r1.setPatternGuid("0");
  r1.setFieldGuid("0");
  r1.setOperator(Operator.GREATER_OR_EQUAL);
  r1.setVariable(variable1);
  VariableRestriction r2=new VariableRestriction();
  r1.setPatternGuid("0");
  r2.setFieldGuid("0");
  r2.setOperator(Operator.LESS);
  r2.setVariable(variable1);
  String containsOperator="contains";
  Variable variable2=new Variable();
  variable2.setObjectTypeGuid("2");
  variable2.setObjectTypeType(VerifierComponentType.FIELD.getType());
  VariableRestriction r3=new VariableRestriction();
  r3.setPatternGuid("1");
  r3.setFieldGuid("1");
  r3.setOperator(Operator.determineOperator(containsOperator,false));
  r3.setVariable(variable2);
  VariableRestriction r4=new VariableRestriction();
  r4.setPatternGuid("1");
  r4.setFieldGuid("1");
  r4.setOperator(Operator.determineOperator(containsOperator,true));
  r4.setVariable(variable2);
  Variable variable3=new Variable();
  variable3.setObjectTypeGuid("3");
  variable3.setObjectTypeType(VerifierComponentType.FIELD.getType());
  VariableRestriction r5=new VariableRestriction();
  r5.setPatternGuid("2");
  r5.setFieldGuid("1");
  r5.setOperator(Operator.GREATER_OR_EQUAL);
  r5.setVariable(variable3);
  VariableRestriction r6=new VariableRestriction();
  r6.setPatternGuid("2");
  r6.setFieldGuid("1");
  r6.setOperator(Operator.EQUAL);
  r6.setVariable(variable3);
  data.add(r1);
  data.add(r2);
  data.add(r3);
  data.add(r4);
  data.add(r5);
  data.add(r6);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<Cause,Set<Cause>> map=createOppositesMap(CauseType.RESTRICTION,sessionResult.iterateObjects());
  assertTrue((TestBase.causeMapContains(map,r1,r2) ^ TestBase.causeMapContains(map,r2,r1)));
  assertTrue((TestBase.causeMapContains(map,r3,r4) ^ TestBase.causeMapContains(map,r4,r3)));
  if (!map.isEmpty()) {
    fail("More opposites than was expected.");
  }
}
