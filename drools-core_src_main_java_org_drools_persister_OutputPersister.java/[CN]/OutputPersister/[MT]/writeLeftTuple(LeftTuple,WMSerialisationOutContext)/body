{
  ObjectOutputStream stream=context.stream;
  InternalRuleBase ruleBase=context.ruleBase;
  InternalWorkingMemory wm=context.wm;
  LeftTupleSink sink=leftTuple.getLeftTupleSink();
  if (sink instanceof JoinNode) {
    for (LeftTuple childLeftTuple=leftTuple.getBetaChildren(); leftTuple != null; childLeftTuple=(LeftTuple)leftTuple.getLeftParentNext()) {
      stream.writeInt(PersisterEnums.RIGHT_TUPLE);
      stream.writeInt(childLeftTuple.getLeftTupleSink().getId());
      stream.writeInt(childLeftTuple.getRightParent().getFactHandle().getId());
      writeLeftTuple(childLeftTuple,context);
    }
    stream.writeInt(PersisterEnums.END);
  }
 else   if (sink instanceof NotNode) {
    if (leftTuple.getBlocker() == null) {
      stream.writeInt(PersisterEnums.LEFT_TUPLE_NOT_BLOCKED);
      for (LeftTuple childLeftTuple=leftTuple.getBetaChildren(); leftTuple != null; childLeftTuple=(LeftTuple)leftTuple.getLeftParentNext()) {
        stream.writeInt(PersisterEnums.LEFT_TUPLE);
        stream.writeInt(childLeftTuple.getLeftTupleSink().getId());
        writeLeftTuple(childLeftTuple,context);
      }
      stream.writeInt(PersisterEnums.END);
    }
 else {
      stream.writeInt(PersisterEnums.LEFT_TUPLE_BLOCKED);
      stream.writeInt(leftTuple.getBlocker().getFactHandle().getId());
    }
  }
 else   if (sink instanceof RuleTerminalNode) {
    int pos=context.terminalTupleMap.size();
    context.terminalTupleMap.put(leftTuple,pos);
  }
}
