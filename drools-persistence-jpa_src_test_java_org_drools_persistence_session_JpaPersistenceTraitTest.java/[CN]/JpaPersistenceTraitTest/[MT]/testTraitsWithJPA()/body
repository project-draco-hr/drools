{
  String str="package org.drools.trait.test; \n" + "global java.util.List list; \n" + ""+ "declare TBean \n"+ "  @Traitable \n"+ "  fld : String \n"+ "end \n "+ ""+ "declare trait Mask \n"+ "  fld : String \n"+ "  xyz : int  \n"+ "end \n"+ "\n "+ "declare trait Cloak \n"+ "  fld : String \n"+ "  ijk : String  \n"+ "end \n"+ ""+ "rule Init \n"+ "when \n"+ "then \n"+ "  insert( new TBean(\"abc\") ); \n"+ "end \n"+ ""+ "rule Don \n"+ "no-loop \n"+ "when \n"+ "  $b : TBean( ) \n"+ "then \n"+ "  Mask m = don( $b, Mask.class ); \n"+ "  modify (m) { setXyz( 10 ); } \n"+ "  list.add( m ); \n"+ "  System.out.println( \"Don result : \" + m ); \n "+ "end \n"+ "\n"+ "rule Don2 \n"+ "no-loop \n"+ "when \n"+ "  $b : TBean( ) \n"+ "then \n"+ "  Cloak c = don( $b, Cloak.class ); \n"+ "  modify (c) { setIjk( \"ijklmn\" ); } \n"+ "  list.add( c ); \n"+ "  System.out.println( \"Don result : \" + c ); \n "+ "end \n"+ "";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=JPAKnowledgeService.newStatefulKnowledgeSession(kbase,null,env);
  List<?> list=new ArrayList<Object>();
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  assertEquals(2,list.size());
  int id=ksession.getId();
  StatefulKnowledgeSession ksession2=JPAKnowledgeService.loadStatefulKnowledgeSession(id,kbase,null,env);
  ksession2.fireAllRules();
  Collection x=ksession2.getObjects();
  assertEquals(4,x.size());
  TraitableBean core=null;
  for (  Object o : x) {
    if (o instanceof TraitableBean) {
      core=(TraitableBean)o;
      break;
    }
  }
  assertNotNull(core);
  assertEquals(2,core.getDynamicProperties().size());
  assertNotNull(core.getTrait("org.drools.factmodel.traits.Thing"));
  assertNotNull(core.getTrait("org.drools.trait.test.Mask"));
  assertNotNull(core.getTrait("org.drools.trait.test.Cloak"));
}
