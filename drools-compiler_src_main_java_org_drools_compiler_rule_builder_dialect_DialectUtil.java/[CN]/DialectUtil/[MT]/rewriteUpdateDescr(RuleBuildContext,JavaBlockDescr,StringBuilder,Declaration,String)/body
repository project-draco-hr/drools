{
  BitMask modificationMask=AllSetBitMask.get();
  Class<?> typeClass=findModifiedClass(context,d,declr);
  TypeDeclaration typeDeclaration=typeClass == null ? null : context.getKnowledgeBuilder().getTypeDeclaration(typeClass);
  if (typeDeclaration != null) {
    boolean isPropertyReactive=typeDeclaration.isPropertyReactive();
    List<String> settableProperties=null;
    if (isPropertyReactive) {
      typeDeclaration.setTypeClass(typeClass);
      settableProperties=typeDeclaration.getSettableProperties();
      modificationMask=getEmptyPropertyReactiveMask(settableProperties.size());
    }
    ConsequenceMetaData.Statement statement=new ConsequenceMetaData.Statement(ConsequenceMetaData.Statement.Type.MODIFY,typeClass);
    context.getRule().getConsequenceMetaData().addStatement(statement);
    for (    String expr : splitStatements(consequence)) {
      String updateExpr=expr.replaceFirst("^\\Q" + obj + "\\E\\s*\\.","");
      if (!updateExpr.equals(expr)) {
        modificationMask=parseModifiedProperties(statement,settableProperties,typeDeclaration,isPropertyReactive,modificationMask,updateExpr);
      }
    }
  }
  appendUpdateStatement(consequence,declr,obj,modificationMask,typeClass);
}
