{
  TestWorkItemManager manager=new TestWorkItemManager();
  WorkItemImpl workItem=new WorkItemImpl();
  workItem.setName("Human Task");
  workItem.setParameter("TaskName","TaskNameParent");
  workItem.setParameter("Comment","CommentParent");
  workItem.setParameter("Priority","10");
  workItem.setParameter("ActorId","Darth Vader");
  workItem.setParameter("SubTaskStrategies","OnAllSubTasksEndParentEnd");
  handler.executeWorkItem(workItem,manager);
  Thread.sleep(500);
  BlockingTaskSummaryMessageResponseHandler responseHandler=new BlockingTaskSummaryMessageResponseHandler();
  humanTaskClient.getTasksAssignedAsPotentialOwner("Darth Vader","en-UK",responseHandler);
  responseHandler.waitTillDone(DEFAULT_WAIT_TIME);
  List<TaskSummary> tasks=responseHandler.getResults();
  assertEquals(1,tasks.size());
  TaskSummary task=tasks.get(0);
  assertEquals("TaskNameParent",task.getName());
  assertEquals(10,task.getPriority());
  assertEquals("CommentParent",task.getDescription());
  assertEquals(Status.Reserved,task.getStatus());
  assertEquals("Darth Vader",task.getActualOwner().getId());
  workItem=new WorkItemImpl();
  workItem.setName("Human Task");
  workItem.setParameter("TaskName","TaskNameChild1");
  workItem.setParameter("Comment","CommentChild1");
  workItem.setParameter("Priority","10");
  workItem.setParameter("ActorId","Darth Vader");
  workItem.setParameter("ParentId",task.getId());
  handler.executeWorkItem(workItem,manager);
  Thread.sleep(500);
  workItem=new WorkItemImpl();
  workItem.setName("Human Task2");
  workItem.setParameter("TaskName","TaskNameChild2");
  workItem.setParameter("Comment","CommentChild2");
  workItem.setParameter("Priority","10");
  workItem.setParameter("ActorId","Darth Vader");
  workItem.setParameter("ParentId",task.getId());
  handler.executeWorkItem(workItem,manager);
  Thread.sleep(500);
  System.out.println("Starting task " + task.getId());
  BlockingTaskOperationMessageResponseHandler operationResponseHandler=new BlockingTaskOperationMessageResponseHandler();
  humanTaskClient.start(task.getId(),"Darth Vader",operationResponseHandler);
  operationResponseHandler.waitTillDone(DEFAULT_WAIT_TIME);
  System.out.println("Started task " + task.getId());
  BlockingGetTaskMessageResponseHandler getTaskResponseHandler=new BlockingGetTaskMessageResponseHandler();
  humanTaskClient.getTask(task.getId(),getTaskResponseHandler);
  Task parentTask=getTaskResponseHandler.getTask();
  assertEquals(Status.InProgress,parentTask.getTaskData().getStatus());
  assertEquals(users.get("darth"),parentTask.getTaskData().getActualOwner());
  responseHandler=new BlockingTaskSummaryMessageResponseHandler();
  humanTaskClient.getSubTasksAssignedAsPotentialOwner(parentTask.getId(),"Darth Vader","en-UK",responseHandler);
  List<TaskSummary> subTasks=responseHandler.getResults();
  assertEquals(2,subTasks.size());
  TaskSummary subTaskSummary1=subTasks.get(0);
  TaskSummary subTaskSummary2=subTasks.get(1);
  assertNotNull(subTaskSummary1);
  assertNotNull(subTaskSummary2);
  System.out.println("Starting sub task " + subTaskSummary1.getId());
  operationResponseHandler=new BlockingTaskOperationMessageResponseHandler();
  humanTaskClient.start(subTaskSummary1.getId(),"Darth Vader",operationResponseHandler);
  operationResponseHandler.waitTillDone(DEFAULT_WAIT_TIME);
  System.out.println("Started sub task " + subTaskSummary1.getId());
  System.out.println("Starting sub task " + subTaskSummary2.getId());
  operationResponseHandler=new BlockingTaskOperationMessageResponseHandler();
  humanTaskClient.start(subTaskSummary2.getId(),"Darth Vader",operationResponseHandler);
  operationResponseHandler.waitTillDone(DEFAULT_WAIT_TIME);
  System.out.println("Started sub task " + subTaskSummary2.getId());
  getTaskResponseHandler=new BlockingGetTaskMessageResponseHandler();
  humanTaskClient.getTask(subTaskSummary1.getId(),getTaskResponseHandler);
  Task subTask1=getTaskResponseHandler.getTask();
  assertEquals(Status.InProgress,subTask1.getTaskData().getStatus());
  assertEquals(users.get("darth"),subTask1.getTaskData().getActualOwner());
  getTaskResponseHandler=new BlockingGetTaskMessageResponseHandler();
  humanTaskClient.getTask(subTaskSummary2.getId(),getTaskResponseHandler);
  Task subTask2=getTaskResponseHandler.getTask();
  assertEquals(Status.InProgress,subTask2.getTaskData().getStatus());
  assertEquals(users.get("darth"),subTask2.getTaskData().getActualOwner());
  System.out.println("Completing sub task " + subTask1.getId());
  operationResponseHandler=new BlockingTaskOperationMessageResponseHandler();
  humanTaskClient.complete(subTask1.getId(),"Darth Vader",null,operationResponseHandler);
  operationResponseHandler.waitTillDone(DEFAULT_WAIT_TIME);
  System.out.println("Completed sub task " + subTask1.getId());
  System.out.println("Completing sub task " + subTask2.getId());
  operationResponseHandler=new BlockingTaskOperationMessageResponseHandler();
  humanTaskClient.complete(subTask2.getId(),"Darth Vader",null,operationResponseHandler);
  operationResponseHandler.waitTillDone(DEFAULT_WAIT_TIME);
  System.out.println("Completed sub task " + subTask2.getId());
  getTaskResponseHandler=new BlockingGetTaskMessageResponseHandler();
  humanTaskClient.getTask(subTask1.getId(),getTaskResponseHandler);
  subTask1=getTaskResponseHandler.getTask();
  assertEquals(Status.Completed,subTask1.getTaskData().getStatus());
  assertEquals(users.get("darth"),subTask1.getTaskData().getActualOwner());
  getTaskResponseHandler=new BlockingGetTaskMessageResponseHandler();
  humanTaskClient.getTask(subTask2.getId(),getTaskResponseHandler);
  subTask2=getTaskResponseHandler.getTask();
  assertEquals(Status.Completed,subTask2.getTaskData().getStatus());
  assertEquals(users.get("darth"),subTask2.getTaskData().getActualOwner());
  getTaskResponseHandler=new BlockingGetTaskMessageResponseHandler();
  humanTaskClient.getTask(parentTask.getId(),getTaskResponseHandler);
  parentTask=getTaskResponseHandler.getTask();
  assertEquals(Status.Completed,parentTask.getTaskData().getStatus());
  assertEquals(users.get("darth"),parentTask.getTaskData().getActualOwner());
  assertTrue(manager.waitTillCompleted(MANAGER_COMPLETION_WAIT_TIME));
}
