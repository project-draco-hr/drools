{
  String str="package org.kie.workitem.test \n" + "import " + DefaultWorkItemManager.class.getCanonicalName() + "\n"+ "import "+ WorkItem.class.getCanonicalName()+ "\n"+ "import "+ WorkItemImpl.class.getCanonicalName()+ "\n"+ "rule r1 when \n"+ "then \n"+ "  WorkItem wi = new WorkItemImpl(); \n"+ "  wi.setName( \"wihandler\" ); \n"+ "  DefaultWorkItemManager wim = ( DefaultWorkItemManager ) kcontext.getKieRuntime().getWorkItemManager(); \n"+ "  wim.internalExecuteWorkItem(wi); \n"+ "end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  final boolean[] answer=new boolean[]{false};
  StatelessKnowledgeSession ks=kbase.newStatelessKnowledgeSession();
  ks.execute(CommandFactory.newRegisterWorkItemHandlerCommand(new WorkItemHandler(){
    public void executeWorkItem(    org.kie.api.runtime.process.WorkItem workItem,    WorkItemManager manager){
      answer[0]=true;
    }
    public void abortWorkItem(    org.kie.api.runtime.process.WorkItem workItem,    WorkItemManager manager){
    }
  }
,"wihandler"));
  assertTrue(answer[0]);
}
