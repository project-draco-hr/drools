{
  StatefulKnowledgeSession ksession=((KnowledgeCommandContext)context).getStatefulKnowledgesession();
  WorkItemHandler workItemHandler=null;
  try {
    Class t=Class.forName(handler);
    Constructor c=t.getConstructor(KnowledgeRuntime.class);
    workItemHandler=(WorkItemHandler)c.newInstance(ksession);
  }
 catch (  InstantiationException ex) {
    Logger.getLogger(RegisterRemoteWorkItemHandlerCommand.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IllegalAccessException ex) {
    Logger.getLogger(RegisterRemoteWorkItemHandlerCommand.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IllegalArgumentException ex) {
    Logger.getLogger(RegisterRemoteWorkItemHandlerCommand.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  InvocationTargetException ex) {
    Logger.getLogger(RegisterRemoteWorkItemHandlerCommand.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  NoSuchMethodException ex) {
    Logger.getLogger(RegisterRemoteWorkItemHandlerCommand.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  SecurityException ex) {
    Logger.getLogger(RegisterRemoteWorkItemHandlerCommand.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  ClassNotFoundException ex) {
    Logger.getLogger(RegisterRemoteWorkItemHandlerCommand.class.getName()).log(Level.SEVERE,null,ex);
  }
  ksession.getWorkItemManager().registerWorkItemHandler(workItemName,workItemHandler);
  return null;
}
