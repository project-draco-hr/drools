{
  String drl="import " + A.class.getCanonicalName() + "\n"+ "declare A @role( event ) @expires(11ms) end\n"+ "global java.util.concurrent.atomic.AtomicInteger counter;\n"+ "rule R0 when\n"+ "  $a: A( $Aid: id > 0 )\n"+ "then\n"+ "  System.out.println(\"[\" + $a + \"]\");"+ "  counter.incrementAndGet();\n"+ "end";
  KieSessionConfiguration sessionConfig=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  sessionConfig.setOption(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
  KieHelper helper=new KieHelper();
  helper.addContent(drl,ResourceType.DRL);
  KieBase kbase=helper.build(EventProcessingOption.STREAM);
  KieSession ksession=kbase.newKieSession(sessionConfig,null);
  PseudoClockScheduler sessionClock=ksession.getSessionClock();
  AtomicInteger counter=new AtomicInteger(0);
  ksession.setGlobal("counter",counter);
  ksession.insert(new A(1));
  sessionClock.advanceTime(10,TimeUnit.MILLISECONDS);
  ksession.insert(new A(2));
  sessionClock.advanceTime(10,TimeUnit.MILLISECONDS);
  ksession.fireAllRules();
  assertEquals(2,counter.get());
}
