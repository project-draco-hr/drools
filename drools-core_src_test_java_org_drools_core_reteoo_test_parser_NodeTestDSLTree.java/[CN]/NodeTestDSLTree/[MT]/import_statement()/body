{
  NodeTestDSLTree.import_statement_return retval=new NodeTestDSLTree.import_statement_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree clazz=null;
  CommonTree VK_IMPORT8=null;
  CommonTree clazz_tree=null;
  CommonTree VK_IMPORT8_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      _last=(CommonTree)input.LT(1);
{
        CommonTree _save_last_1=_last;
        CommonTree _first_1=null;
        CommonTree root_1=(CommonTree)adaptor.nil();
        _last=(CommonTree)input.LT(1);
        VK_IMPORT8=(CommonTree)match(input,VK_IMPORT,FOLLOW_VK_IMPORT_in_import_statement102);
        VK_IMPORT8_tree=(CommonTree)adaptor.dupNode(VK_IMPORT8);
        root_1=(CommonTree)adaptor.becomeRoot(VK_IMPORT8_tree,root_1);
        match(input,Token.DOWN,null);
        _last=(CommonTree)input.LT(1);
        clazz=(CommonTree)match(input,VT_QUALIFIED_ID,FOLLOW_VT_QUALIFIED_ID_in_import_statement106);
        clazz_tree=(CommonTree)adaptor.dupNode(clazz);
        adaptor.addChild(root_1,clazz_tree);
        match(input,Token.UP,null);
        adaptor.addChild(root_0,root_1);
        _last=_save_last_1;
      }
      testCase.addImport((clazz != null ? clazz.getText() : null));
    }
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
