{
  NodeTestDSLTree.teardown_return retval=new NodeTestDSLTree.teardown_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree VK_TEARDOWN11=null;
  NodeTestDSLTree.step_return step12=null;
  CommonTree VK_TEARDOWN11_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      _last=(CommonTree)input.LT(1);
{
        CommonTree _save_last_1=_last;
        CommonTree _first_1=null;
        CommonTree root_1=(CommonTree)adaptor.nil();
        _last=(CommonTree)input.LT(1);
        VK_TEARDOWN11=(CommonTree)match(input,VK_TEARDOWN,FOLLOW_VK_TEARDOWN_in_teardown151);
        VK_TEARDOWN11_tree=(CommonTree)adaptor.dupNode(VK_TEARDOWN11);
        root_1=(CommonTree)adaptor.becomeRoot(VK_TEARDOWN11_tree,root_1);
        factory.createTearDown();
        if (input.LA(1) == Token.DOWN) {
          match(input,Token.DOWN,null);
          loop6:           do {
            int alt6=2;
            int LA6_0=input.LA(1);
            if ((LA6_0 == ID)) {
              alt6=1;
            }
switch (alt6) {
case 1:
{
                _last=(CommonTree)input.LT(1);
                pushFollow(FOLLOW_step_in_teardown155);
                step12=step();
                state._fsp--;
                adaptor.addChild(root_1,step12.getTree());
              }
            break;
default :
          break loop6;
      }
    }
 while (true);
    match(input,Token.UP,null);
  }
  adaptor.addChild(root_0,root_1);
  _last=_save_last_1;
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
