{
  NodeTestDSLTree.step_return retval=new NodeTestDSLTree.step_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree ID15=null;
  List list_p=null;
  RuleReturnScope p=null;
  CommonTree ID15_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      _last=(CommonTree)input.LT(1);
{
        CommonTree _save_last_1=_last;
        CommonTree _first_1=null;
        CommonTree root_1=(CommonTree)adaptor.nil();
        _last=(CommonTree)input.LT(1);
        ID15=(CommonTree)match(input,ID,FOLLOW_ID_in_step195);
        ID15_tree=(CommonTree)adaptor.dupNode(ID15);
        root_1=(CommonTree)adaptor.becomeRoot(ID15_tree,root_1);
        match(input,Token.DOWN,null);
        int cnt8=0;
        loop8:         do {
          int alt8=2;
          int LA8_0=input.LA(1);
          if ((LA8_0 == VT_PARAMS)) {
            alt8=1;
          }
switch (alt8) {
case 1:
{
              _last=(CommonTree)input.LT(1);
              pushFollow(FOLLOW_params_in_step199);
              p=params();
              state._fsp--;
              adaptor.addChild(root_1,p.getTree());
              if (list_p == null)               list_p=new ArrayList();
              list_p.add(p.getTree());
            }
          break;
default :
        if (cnt8 >= 1)         break loop8;
      EarlyExitException eee=new EarlyExitException(8,input);
    throw eee;
}
cnt8++;
}
 while (true);
factory.createStep(ID15,list_p);
match(input,Token.UP,null);
adaptor.addChild(root_0,root_1);
_last=_save_last_1;
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
