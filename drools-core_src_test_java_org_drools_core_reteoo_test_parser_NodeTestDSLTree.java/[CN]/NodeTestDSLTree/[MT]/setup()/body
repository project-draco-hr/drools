{
  NodeTestDSLTree.setup_return retval=new NodeTestDSLTree.setup_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  CommonTree _first_0=null;
  CommonTree _last=null;
  CommonTree VK_SETUP9=null;
  NodeTestDSLTree.step_return step10=null;
  CommonTree VK_SETUP9_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      _last=(CommonTree)input.LT(1);
{
        CommonTree _save_last_1=_last;
        CommonTree _first_1=null;
        CommonTree root_1=(CommonTree)adaptor.nil();
        _last=(CommonTree)input.LT(1);
        VK_SETUP9=(CommonTree)match(input,VK_SETUP,FOLLOW_VK_SETUP_in_setup132);
        VK_SETUP9_tree=(CommonTree)adaptor.dupNode(VK_SETUP9);
        root_1=(CommonTree)adaptor.becomeRoot(VK_SETUP9_tree,root_1);
        factory.createSetup();
        if (input.LA(1) == Token.DOWN) {
          match(input,Token.DOWN,null);
          loop5:           do {
            int alt5=2;
            int LA5_0=input.LA(1);
            if ((LA5_0 == ID)) {
              alt5=1;
            }
switch (alt5) {
case 1:
{
                _last=(CommonTree)input.LT(1);
                pushFollow(FOLLOW_step_in_setup136);
                step10=step();
                state._fsp--;
                adaptor.addChild(root_1,step10.getTree());
              }
            break;
default :
          break loop5;
      }
    }
 while (true);
    match(input,Token.UP,null);
  }
  adaptor.addChild(root_0,root_1);
  _last=_save_last_1;
}
}
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
