{
  if (childLeftTuple == null) {
    for (; rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
      if (constraints.isAllowedCachedLeft(contextEntry,rightTuple.getFactHandle())) {
        trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,null,null,sink,true));
      }
    }
  }
 else {
    for (; rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
      if (constraints.isAllowedCachedLeft(contextEntry,rightTuple.getFactHandle())) {
        if (childLeftTuple == null || childLeftTuple.getRightParent() != rightTuple) {
          trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,childLeftTuple,null,sink,true));
        }
 else {
          childLeftTuple.setPropagationContext(rightTuple.getPropagationContext());
          updateChildLeftTuple(childLeftTuple,stagedLeftTuples,trgLeftTuples);
          LeftTuple nextChildLeftTuple=childLeftTuple.getLeftParentNext();
          childLeftTuple.reAddRight();
          childLeftTuple=nextChildLeftTuple;
        }
      }
 else       if (childLeftTuple != null && childLeftTuple.getRightParent() == rightTuple) {
        LeftTuple nextChild=childLeftTuple.getLeftParentNext();
        RuleNetworkEvaluator.deleteChildLeftTuple(childLeftTuple,trgLeftTuples,stagedLeftTuples);
        childLeftTuple=nextChild;
      }
    }
  }
  return childLeftTuple;
}
