{
  if (childLeftTuple == null) {
    for (; rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
      if (constraints.isAllowedCachedLeft(contextEntry,rightTuple.getFactHandle())) {
        trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,null,null,sink,true));
      }
    }
  }
 else {
    for (; rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
      if (constraints.isAllowedCachedLeft(contextEntry,rightTuple.getFactHandle())) {
        if (childLeftTuple == null || childLeftTuple.getRightParent() != rightTuple) {
          trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,childLeftTuple,null,sink,true));
        }
 else {
switch (childLeftTuple.getStagedType()) {
case LeftTuple.INSERT:
            stagedLeftTuples.removeInsert(childLeftTuple);
          break;
case LeftTuple.UPDATE:
        stagedLeftTuples.removeUpdate(childLeftTuple);
      break;
  }
  trgLeftTuples.addUpdate(childLeftTuple);
  LeftTuple nextChildLeftTuple=childLeftTuple.getLeftParentNext();
  childLeftTuple.reAddRight();
  childLeftTuple=nextChildLeftTuple;
}
}
 else if (childLeftTuple != null && childLeftTuple.getRightParent() == rightTuple) {
childLeftTuple=RuleNetworkEvaluator.deleteLeftChild(childLeftTuple,trgLeftTuples,stagedLeftTuples);
}
}
}
return childLeftTuple;
}
