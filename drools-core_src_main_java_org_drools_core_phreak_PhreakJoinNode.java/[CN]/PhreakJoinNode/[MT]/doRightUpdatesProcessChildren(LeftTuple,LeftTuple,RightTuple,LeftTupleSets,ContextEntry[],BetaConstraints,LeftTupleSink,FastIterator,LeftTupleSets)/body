{
  if (childLeftTuple == null) {
    for (; leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
      if (leftTuple.getStagedType() == LeftTuple.UPDATE) {
        continue;
      }
      if (constraints.isAllowedCachedRight(contextEntry,leftTuple)) {
        trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,null,null,sink,true));
      }
    }
  }
 else {
    for (; leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
      if (leftTuple.getStagedType() == LeftTuple.UPDATE) {
        continue;
      }
      if (constraints.isAllowedCachedRight(contextEntry,leftTuple)) {
        if (childLeftTuple == null || childLeftTuple.getLeftParent() != leftTuple) {
          trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,null,childLeftTuple,sink,true));
        }
 else {
          childLeftTuple.setPropagationContext(rightTuple.getPropagationContext());
          updateChildLeftTuple(childLeftTuple,stagedLeftTuples,trgLeftTuples);
          LeftTuple nextChildLeftTuple=childLeftTuple.getRightParentNext();
          childLeftTuple.reAddLeft();
          childLeftTuple=nextChildLeftTuple;
        }
      }
 else       if (childLeftTuple != null && childLeftTuple.getLeftParent() == leftTuple) {
        childLeftTuple.setPropagationContext(rightTuple.getPropagationContext());
        childLeftTuple=RuleNetworkEvaluator.deleteRightChild(childLeftTuple,trgLeftTuples,stagedLeftTuples);
      }
    }
  }
  return childLeftTuple;
}
