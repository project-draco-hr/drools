{
  if (childLeftTuple == null) {
    for (; leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
      if (leftTuple.getStagedType() == LeftTuple.UPDATE) {
        continue;
      }
      if (constraints.isAllowedCachedRight(contextEntry,leftTuple)) {
        trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,null,null,sink,true));
      }
    }
  }
 else {
    for (; leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
      if (leftTuple.getStagedType() == LeftTuple.UPDATE) {
        continue;
      }
      if (constraints.isAllowedCachedRight(contextEntry,leftTuple)) {
        if (childLeftTuple == null || childLeftTuple.getLeftParent() != leftTuple) {
          trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,null,null,sink,true));
        }
 else {
switch (childLeftTuple.getStagedType()) {
case LeftTuple.INSERT:
            stagedLeftTuples.removeInsert(childLeftTuple);
          break;
case LeftTuple.UPDATE:
        stagedLeftTuples.removeUpdate(childLeftTuple);
      break;
  }
  trgLeftTuples.addUpdate(childLeftTuple);
  childLeftTuple.reAddLeft();
  childLeftTuple=childLeftTuple.getRightParentNext();
}
}
 else if (childLeftTuple != null && childLeftTuple.getLeftParent() == leftTuple) {
childLeftTuple=RuleNetworkEvaluator.deleteRightChild(childLeftTuple,trgLeftTuples,stagedLeftTuples);
}
}
}
return childLeftTuple;
}
