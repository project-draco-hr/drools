{
  LeftTupleMemory ltm=bm.getLeftTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=joinNode.getRawConstraints();
  for (RightTuple rightTuple=srcRightTuples.getUpdateFirst(); rightTuple != null; ) {
    RightTuple next=rightTuple.getStagedNext();
    if (ltm != null && ltm.size() > 0) {
      FastIterator it=joinNode.getLeftIterator(ltm);
      LeftTuple leftTuple=joinNode.getFirstLeftTuple(rightTuple,ltm,it);
      constraints.updateFromFactHandle(contextEntry,wm,rightTuple.getFactHandle());
      LeftTuple childLeftTuple=rightTuple.getFirstChild();
      if (childLeftTuple != null && ltm.isIndexed() && !it.isFullIterator() && (leftTuple == null || (leftTuple.getMemory() != childLeftTuple.getLeftParent().getMemory()))) {
        while (childLeftTuple != null) {
          childLeftTuple.setPropagationContext(rightTuple.getPropagationContext());
          LeftTuple nextChild=childLeftTuple.getRightParentNext();
          RuleNetworkEvaluator.unlinkAndDeleteChildLeftTuple(childLeftTuple,trgLeftTuples,stagedLeftTuples);
          childLeftTuple=nextChild;
        }
      }
      if (leftTuple != null) {
        doRightUpdatesProcessChildren(childLeftTuple,leftTuple,rightTuple,stagedLeftTuples,contextEntry,constraints,sink,it,trgLeftTuples);
      }
    }
    rightTuple.clearStaged();
    rightTuple=next;
  }
  constraints.resetFactHandle(contextEntry);
}
