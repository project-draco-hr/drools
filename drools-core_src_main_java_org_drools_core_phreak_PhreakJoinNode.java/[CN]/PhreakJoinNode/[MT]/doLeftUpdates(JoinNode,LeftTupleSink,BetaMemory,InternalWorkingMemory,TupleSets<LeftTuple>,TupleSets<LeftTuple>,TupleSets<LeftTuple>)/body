{
  TupleMemory rtm=bm.getRightTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=joinNode.getRawConstraints();
  for (LeftTuple leftTuple=srcLeftTuples.getUpdateFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    constraints.updateFromTuple(contextEntry,wm,leftTuple);
    FastIterator it=joinNode.getRightIterator(rtm);
    RightTuple rightTuple=joinNode.getFirstRightTuple(leftTuple,rtm,null,it);
    if (rtm.isIndexed() && !it.isFullIterator()) {
      for (LeftTuple childLeftTuple=leftTuple.getFirstChild(); childLeftTuple != null; ) {
        LeftTuple nextChild=childLeftTuple.getHandleNext();
        if (rightTuple == null || rightTuple.getMemory() != childLeftTuple.getRightParent().getMemory()) {
          RuleNetworkEvaluator.unlinkAndDeleteChildLeftTuple(childLeftTuple,trgLeftTuples,stagedLeftTuples);
        }
        childLeftTuple=nextChild;
      }
    }
    if (rightTuple != null) {
      doLeftUpdatesProcessChildren(leftTuple.getFirstChild(),leftTuple,rightTuple,stagedLeftTuples,contextEntry,constraints,sink,it,trgLeftTuples);
    }
    leftTuple.clearStaged();
    leftTuple=next;
  }
  constraints.resetTuple(contextEntry);
}
