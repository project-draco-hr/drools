{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST postfixExpression_AST=null;
  Token lbc=null;
  AST lbc_AST=null;
  Token lb=null;
  AST lb_AST=null;
  Token lp=null;
  AST lp_AST=null;
  Token in=null;
  AST in_AST=null;
  Token de=null;
  AST de_AST=null;
  primaryExpression();
  astFactory.addASTChild(currentAST,returnAST);
{
    _loop192:     do {
switch (LA(1)) {
case DOT:
{
          AST tmp193_AST=null;
          tmp193_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp193_AST);
          match(DOT);
{
switch (LA(1)) {
case IDENT:
{
                AST tmp194_AST=null;
                tmp194_AST=astFactory.create(LT(1));
                astFactory.addASTChild(currentAST,tmp194_AST);
                match(IDENT);
                break;
              }
case LITERAL_this:
{
              AST tmp195_AST=null;
              tmp195_AST=astFactory.create(LT(1));
              astFactory.addASTChild(currentAST,tmp195_AST);
              match(LITERAL_this);
              break;
            }
case LITERAL_class:
{
            AST tmp196_AST=null;
            tmp196_AST=astFactory.create(LT(1));
            astFactory.addASTChild(currentAST,tmp196_AST);
            match(LITERAL_class);
            break;
          }
case LITERAL_new:
{
          newExpression();
          astFactory.addASTChild(currentAST,returnAST);
          break;
        }
case LITERAL_super:
{
        AST tmp197_AST=null;
        tmp197_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp197_AST);
        match(LITERAL_super);
        break;
      }
default :
{
      throw new NoViableAltException(LT(1),getFilename());
    }
}
}
break;
}
case LPAREN:
{
lp=LT(1);
lp_AST=astFactory.create(lp);
astFactory.makeASTRoot(currentAST,lp_AST);
match(LPAREN);
if (inputState.guessing == 0) {
lp_AST.setType(METHOD_CALL);
}
argList();
astFactory.addASTChild(currentAST,returnAST);
match(RPAREN);
break;
}
default :
if ((LA(1) == LBRACK) && (LA(2) == RBRACK)) {
{
int _cnt191=0;
_loop191: do {
if ((LA(1) == LBRACK)) {
lbc=LT(1);
lbc_AST=astFactory.create(lbc);
astFactory.makeASTRoot(currentAST,lbc_AST);
match(LBRACK);
if (inputState.guessing == 0) {
  lbc_AST.setType(ARRAY_DECLARATOR);
}
match(RBRACK);
}
 else {
if (_cnt191 >= 1) {
  break _loop191;
}
 else {
  throw new NoViableAltException(LT(1),getFilename());
}
}
_cnt191++;
}
 while (true);
}
AST tmp200_AST=null;
tmp200_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp200_AST);
match(DOT);
AST tmp201_AST=null;
tmp201_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp201_AST);
match(LITERAL_class);
}
 else if ((LA(1) == LBRACK) && (_tokenSet_4.member(LA(2)))) {
lb=LT(1);
lb_AST=astFactory.create(lb);
astFactory.makeASTRoot(currentAST,lb_AST);
match(LBRACK);
if (inputState.guessing == 0) {
lb_AST.setType(INDEX_OP);
}
expression();
astFactory.addASTChild(currentAST,returnAST);
match(RBRACK);
}
 else {
break _loop192;
}
}
}
 while (true);
}
{
switch (LA(1)) {
case INC:
{
in=LT(1);
in_AST=astFactory.create(in);
astFactory.makeASTRoot(currentAST,in_AST);
match(INC);
if (inputState.guessing == 0) {
in_AST.setType(POST_INC);
}
break;
}
case DEC:
{
de=LT(1);
de_AST=astFactory.create(de);
astFactory.makeASTRoot(currentAST,de_AST);
match(DEC);
if (inputState.guessing == 0) {
de_AST.setType(POST_DEC);
}
break;
}
case EOF:
case RCURLY:
case RPAREN:
case SEMI:
case ASSIGN:
case RBRACK:
case STAR:
case COMMA:
case COLON:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case QUESTION:
case LOR:
case LAND:
case BOR:
case BXOR:
case BAND:
case NOT_EQUAL:
case EQUAL:
case LT:
case GT:
case LE:
case GE:
case LITERAL_instanceof:
case SL:
case SR:
case BSR:
case PLUS:
case MINUS:
case DIV:
case MOD:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
postfixExpression_AST=(AST)currentAST.root;
returnAST=postfixExpression_AST;
}
