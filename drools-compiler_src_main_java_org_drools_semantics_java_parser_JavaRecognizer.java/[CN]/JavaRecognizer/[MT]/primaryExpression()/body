{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST primaryExpression_AST=null;
  Token lbt=null;
  AST lbt_AST=null;
switch (LA(1)) {
case IDENT:
{
      AST tmp129_AST=null;
      tmp129_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp129_AST);
      match(IDENT);
      primaryExpression_AST=(AST)currentAST.root;
      break;
    }
case NUM_INT:
case CHAR_LITERAL:
case STRING_LITERAL:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
{
    constant();
    astFactory.addASTChild(currentAST,returnAST);
    primaryExpression_AST=(AST)currentAST.root;
    break;
  }
case LITERAL_true:
{
  AST tmp130_AST=null;
  tmp130_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp130_AST);
  match(LITERAL_true);
  primaryExpression_AST=(AST)currentAST.root;
  break;
}
case LITERAL_false:
{
AST tmp131_AST=null;
tmp131_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp131_AST);
match(LITERAL_false);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_this:
{
AST tmp132_AST=null;
tmp132_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp132_AST);
match(LITERAL_this);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_null:
{
AST tmp133_AST=null;
tmp133_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp133_AST);
match(LITERAL_null);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_new:
{
newExpression();
astFactory.addASTChild(currentAST,returnAST);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LPAREN:
{
match(LPAREN);
assignmentExpression();
astFactory.addASTChild(currentAST,returnAST);
match(RPAREN);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_super:
{
AST tmp136_AST=null;
tmp136_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp136_AST);
match(LITERAL_super);
primaryExpression_AST=(AST)currentAST.root;
break;
}
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
{
builtInType();
astFactory.addASTChild(currentAST,returnAST);
{
_loop196: do {
if ((LA(1) == LBRACK)) {
lbt=LT(1);
lbt_AST=astFactory.create(lbt);
astFactory.makeASTRoot(currentAST,lbt_AST);
match(LBRACK);
if (inputState.guessing == 0) {
lbt_AST.setType(ARRAY_DECLARATOR);
}
match(RBRACK);
}
 else {
break _loop196;
}
}
 while (true);
}
AST tmp138_AST=null;
tmp138_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp138_AST);
match(DOT);
AST tmp139_AST=null;
tmp139_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp139_AST);
match(LITERAL_class);
primaryExpression_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=primaryExpression_AST;
}
