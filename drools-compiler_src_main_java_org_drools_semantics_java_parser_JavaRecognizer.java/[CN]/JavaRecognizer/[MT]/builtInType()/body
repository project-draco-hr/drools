{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST builtInType_AST=null;
switch (LA(1)) {
case LITERAL_void:
{
      AST tmp41_AST=null;
      tmp41_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp41_AST);
      match(LITERAL_void);
      builtInType_AST=(AST)currentAST.root;
      break;
    }
case LITERAL_boolean:
{
    AST tmp42_AST=null;
    tmp42_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp42_AST);
    match(LITERAL_boolean);
    builtInType_AST=(AST)currentAST.root;
    break;
  }
case LITERAL_byte:
{
  AST tmp43_AST=null;
  tmp43_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp43_AST);
  match(LITERAL_byte);
  builtInType_AST=(AST)currentAST.root;
  break;
}
case LITERAL_char:
{
AST tmp44_AST=null;
tmp44_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp44_AST);
match(LITERAL_char);
builtInType_AST=(AST)currentAST.root;
break;
}
case LITERAL_short:
{
AST tmp45_AST=null;
tmp45_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp45_AST);
match(LITERAL_short);
builtInType_AST=(AST)currentAST.root;
break;
}
case LITERAL_int:
{
AST tmp46_AST=null;
tmp46_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp46_AST);
match(LITERAL_int);
builtInType_AST=(AST)currentAST.root;
break;
}
case LITERAL_float:
{
AST tmp47_AST=null;
tmp47_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp47_AST);
match(LITERAL_float);
builtInType_AST=(AST)currentAST.root;
break;
}
case LITERAL_long:
{
AST tmp48_AST=null;
tmp48_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp48_AST);
match(LITERAL_long);
builtInType_AST=(AST)currentAST.root;
break;
}
case LITERAL_double:
{
AST tmp49_AST=null;
tmp49_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp49_AST);
match(LITERAL_double);
builtInType_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=builtInType_AST;
}
