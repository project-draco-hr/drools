{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST assignmentExpression_AST=null;
  conditionalExpression();
  astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case ASSIGN:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
{
{
switch (LA(1)) {
case ASSIGN:
{
              AST tmp153_AST=null;
              tmp153_AST=astFactory.create(LT(1));
              astFactory.makeASTRoot(currentAST,tmp153_AST);
              match(ASSIGN);
              break;
            }
case PLUS_ASSIGN:
{
            AST tmp154_AST=null;
            tmp154_AST=astFactory.create(LT(1));
            astFactory.makeASTRoot(currentAST,tmp154_AST);
            match(PLUS_ASSIGN);
            break;
          }
case MINUS_ASSIGN:
{
          AST tmp155_AST=null;
          tmp155_AST=astFactory.create(LT(1));
          astFactory.makeASTRoot(currentAST,tmp155_AST);
          match(MINUS_ASSIGN);
          break;
        }
case STAR_ASSIGN:
{
        AST tmp156_AST=null;
        tmp156_AST=astFactory.create(LT(1));
        astFactory.makeASTRoot(currentAST,tmp156_AST);
        match(STAR_ASSIGN);
        break;
      }
case DIV_ASSIGN:
{
      AST tmp157_AST=null;
      tmp157_AST=astFactory.create(LT(1));
      astFactory.makeASTRoot(currentAST,tmp157_AST);
      match(DIV_ASSIGN);
      break;
    }
case MOD_ASSIGN:
{
    AST tmp158_AST=null;
    tmp158_AST=astFactory.create(LT(1));
    astFactory.makeASTRoot(currentAST,tmp158_AST);
    match(MOD_ASSIGN);
    break;
  }
case SR_ASSIGN:
{
  AST tmp159_AST=null;
  tmp159_AST=astFactory.create(LT(1));
  astFactory.makeASTRoot(currentAST,tmp159_AST);
  match(SR_ASSIGN);
  break;
}
case BSR_ASSIGN:
{
AST tmp160_AST=null;
tmp160_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp160_AST);
match(BSR_ASSIGN);
break;
}
case SL_ASSIGN:
{
AST tmp161_AST=null;
tmp161_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp161_AST);
match(SL_ASSIGN);
break;
}
case BAND_ASSIGN:
{
AST tmp162_AST=null;
tmp162_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp162_AST);
match(BAND_ASSIGN);
break;
}
case BXOR_ASSIGN:
{
AST tmp163_AST=null;
tmp163_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp163_AST);
match(BXOR_ASSIGN);
break;
}
case BOR_ASSIGN:
{
AST tmp164_AST=null;
tmp164_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp164_AST);
match(BOR_ASSIGN);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
assignmentExpression();
astFactory.addASTChild(currentAST,returnAST);
break;
}
case RCURLY:
case RPAREN:
case SEMI:
case RBRACK:
case COMMA:
case COLON:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
assignmentExpression_AST=(AST)currentAST.root;
returnAST=assignmentExpression_AST;
}
