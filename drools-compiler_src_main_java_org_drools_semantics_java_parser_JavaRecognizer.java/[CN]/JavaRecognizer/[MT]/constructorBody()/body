{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST constructorBody_AST=null;
  Token lc=null;
  AST lc_AST=null;
  lc=LT(1);
  lc_AST=astFactory.create(lc);
  astFactory.makeASTRoot(currentAST,lc_AST);
  match(LCURLY);
  if (inputState.guessing == 0) {
    lc_AST.setType(SLIST);
  }
{
    boolean synPredMatched72=false;
    if (((_tokenSet_13.member(LA(1))) && (_tokenSet_14.member(LA(2))))) {
      int _m72=mark();
      synPredMatched72=true;
      inputState.guessing++;
      try {
{
          explicitConstructorInvocation();
        }
      }
 catch (      RecognitionException pe) {
        synPredMatched72=false;
      }
      rewind(_m72);
      inputState.guessing--;
    }
    if (synPredMatched72) {
      explicitConstructorInvocation();
      astFactory.addASTChild(currentAST,returnAST);
    }
 else     if ((_tokenSet_15.member(LA(1))) && (_tokenSet_16.member(LA(2)))) {
    }
 else {
      throw new NoViableAltException(LT(1),getFilename());
    }
  }
{
    _loop74:     do {
      if ((_tokenSet_6.member(LA(1)))) {
        statement();
        astFactory.addASTChild(currentAST,returnAST);
      }
 else {
        break _loop74;
      }
    }
 while (true);
  }
  match(RCURLY);
  constructorBody_AST=(AST)currentAST.root;
  returnAST=constructorBody_AST;
}
