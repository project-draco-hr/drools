{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST explicitConstructorInvocation_AST=null;
  Token lp1=null;
  AST lp1_AST=null;
  Token lp2=null;
  AST lp2_AST=null;
  Token lp3=null;
  AST lp3_AST=null;
{
    if ((LA(1) == LITERAL_this) && (LA(2) == LPAREN)) {
      match(LITERAL_this);
      lp1=LT(1);
      lp1_AST=astFactory.create(lp1);
      astFactory.makeASTRoot(currentAST,lp1_AST);
      match(LPAREN);
      argList();
      astFactory.addASTChild(currentAST,returnAST);
      match(RPAREN);
      match(SEMI);
      if (inputState.guessing == 0) {
        lp1_AST.setType(CTOR_CALL);
      }
    }
 else     if ((LA(1) == LITERAL_super) && (LA(2) == LPAREN)) {
      match(LITERAL_super);
      lp2=LT(1);
      lp2_AST=astFactory.create(lp2);
      astFactory.makeASTRoot(currentAST,lp2_AST);
      match(LPAREN);
      argList();
      astFactory.addASTChild(currentAST,returnAST);
      match(RPAREN);
      match(SEMI);
      if (inputState.guessing == 0) {
        lp2_AST.setType(SUPER_CTOR_CALL);
      }
    }
 else     if ((_tokenSet_13.member(LA(1))) && (_tokenSet_14.member(LA(2)))) {
      primaryExpression();
      astFactory.addASTChild(currentAST,returnAST);
      match(DOT);
      match(LITERAL_super);
      lp3=LT(1);
      lp3_AST=astFactory.create(lp3);
      astFactory.makeASTRoot(currentAST,lp3_AST);
      match(LPAREN);
      argList();
      astFactory.addASTChild(currentAST,returnAST);
      match(RPAREN);
      match(SEMI);
      if (inputState.guessing == 0) {
        lp3_AST.setType(SUPER_CTOR_CALL);
      }
    }
 else {
      throw new NoViableAltException(LT(1),getFilename());
    }
  }
  explicitConstructorInvocation_AST=(AST)currentAST.root;
  returnAST=explicitConstructorInvocation_AST;
}
