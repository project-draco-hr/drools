{
  final PropagationContext context=pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null);
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  IdGenerator idGenerator=kBase.getReteooBuilder().getIdGenerator();
  StatefulKnowledgeSessionImpl ksession=(StatefulKnowledgeSessionImpl)kBase.newStatefulKnowledgeSession();
  final Rete source=kBase.getRete();
  final EntryPointNode entryPoint=new EntryPointNode(0,source,buildContext);
  entryPoint.attach(buildContext);
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(idGenerator.getNextId(),entryPoint,new ClassObjectType(Person.class),buildContext);
  final MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final Object person=new Person("bob",25);
  final InternalFactHandle handle1=(InternalFactHandle)ksession.insert(person);
  objectTypeNode.assertObject(handle1,context,ksession);
  final List asserted=sink.getAsserted();
  assertLength(1,asserted);
  assertEquals(((InternalFactHandle)((Object[])asserted.get(0))[0]).getObject(),person);
  final ObjectTypeNodeMemory memory=(ObjectTypeNodeMemory)ksession.getNodeMemory(objectTypeNode);
  assertEquals(1,memory.memory.size());
  assertTrue(memory.memory.contains(handle1));
}
