{
  PortablePreconditions.checkNotNull("drl",drl);
  PortablePreconditions.checkNotNull("baseFileName",baseFileName);
  PortablePreconditions.checkNotNull("globals",globals);
  PortablePreconditions.checkNotNull("dmo",dmo);
  final GuidedDecisionTree model=new GuidedDecisionTree();
  model.setTreeName(baseFileName);
  final String packageName=PackageNameParser.parsePackageName(drl);
  model.setPackageName(packageName);
  final Imports imports=ImportsParser.parseImports(drl);
  for (  Import item : imports.getImports()) {
    model.getImports().addImport(item);
  }
  final List<String> rules=new ArrayList<String>();
  final List<List<Node>> paths=new ArrayList<List<Node>>();
  final String[] lines=drl.split(System.getProperty("line.separator"));
  StringBuilder sb=null;
  for (  String line : lines) {
    if (line.toLowerCase().startsWith("rule")) {
      sb=new StringBuilder();
    }
    if (sb != null) {
      sb.append(line).append("\n");
    }
    if (line.toLowerCase().startsWith("end")) {
      rules.add(sb.toString());
      sb=null;
    }
  }
  for (  String rule : rules) {
    final List<Node> nodes=new ArrayList<Node>();
    final RuleModel rm=RuleModelDRLPersistenceImpl.getInstance().unmarshal(rule,globals,dmo);
    try {
      for (      IPattern p : rm.lhs) {
        nodes.addAll(processIPattern(p,model,dmo));
      }
      for (      IAction a : rm.rhs) {
        nodes.addAll(processIAction(a,getTypesOnPath(nodes),model,dmo));
      }
    }
 catch (    GuidedDecisionTreeDRLParserException e) {
      System.out.println(e.getMessage());
    }
    paths.add(nodes);
  }
  for (  List<Node> path : paths) {
    try {
      Node activeModelNode=null;
      for (int index=0; index < path.size(); index++) {
        final Node node=path.get(index);
switch (index) {
case 0:
          if (!(node instanceof TypeNode)) {
            throw new GuidedDecisionTreeDRLParserException("Decision Tree Root is not a TypeNode");
          }
        final TypeNode root=(TypeNode)node;
      if (model.getRoot() == null) {
        model.setRoot(root);
      }
 else       if (!root.equals(model.getRoot())) {
        throw new GuidedDecisionTreeDRLParserException("Root of Rule is not equal to the Decision Tree root.");
      }
    activeModelNode=model.getRoot();
  break;
default :
if (!activeModelNode.getChildren().contains(node)) {
  activeModelNode.addChild(node);
  activeModelNode=node;
}
 else {
  activeModelNode=activeModelNode.getChildren().get(activeModelNode.getChildren().indexOf(node));
}
}
}
}
 catch (GuidedDecisionTreeDRLParserException e) {
System.out.println(e.getMessage());
}
}
return model;
}
