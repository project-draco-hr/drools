{
  statement_return retval=new statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EOL4=null;
  entry_return entry2=null;
  comment_return comment3=null;
  Object EOL4_tree=null;
  try {
    int alt2=3;
switch (input.LA(1)) {
case LEFT_SQUARE:
{
        alt2=1;
      }
    break;
case LINE_COMMENT:
{
    alt2=2;
  }
break;
case EOL:
{
alt2=3;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("91:1: statement : ( entry | comment | EOL );",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_entry_in_statement296);
entry2=entry();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,entry2.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_comment_in_statement303);
comment3=comment();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,comment3.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
EOL4=(Token)input.LT(1);
match(input,EOL,FOLLOW_EOL_in_statement309);
if (failed) return retval;
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
