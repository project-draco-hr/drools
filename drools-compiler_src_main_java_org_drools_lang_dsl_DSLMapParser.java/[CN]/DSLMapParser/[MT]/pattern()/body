{
  pattern_return retval=new pattern_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY32=null;
  Token RIGHT_CURLY34=null;
  Token LEFT_SQUARE35=null;
  Token RIGHT_SQUARE37=null;
  literal_return literal31=null;
  literal_return literal33=null;
  pattern_return pattern36=null;
  Object LEFT_CURLY32_tree=null;
  Object RIGHT_CURLY34_tree=null;
  Object LEFT_SQUARE35_tree=null;
  Object RIGHT_SQUARE37_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt16=0;
      loop16:       do {
        int alt16=4;
switch (input.LA(1)) {
case RIGHT_SQUARE:
{
            int LA16_2=input.LA(2);
            if ((synpred24())) {
              alt16=1;
            }
          }
        break;
case LEFT_SQUARE:
{
        int LA16_3=input.LA(2);
        if ((synpred24())) {
          alt16=1;
        }
 else         if ((synpred26())) {
          alt16=3;
        }
      }
    break;
case LEFT_CURLY:
{
    alt16=2;
  }
break;
case LITERAL:
case COLON:
{
alt16=1;
}
break;
}
switch (alt16) {
case 1:
{
pushFollow(FOLLOW_literal_in_pattern1060);
literal31=literal();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,literal31.getTree());
}
break;
case 2:
{
LEFT_CURLY32=(Token)input.LT(1);
match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_pattern1074);
if (failed) return retval;
if (backtracking == 0) {
LEFT_CURLY32_tree=(Object)adaptor.create(LEFT_CURLY32);
adaptor.addChild(root_0,LEFT_CURLY32_tree);
}
pushFollow(FOLLOW_literal_in_pattern1076);
literal33=literal();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,literal33.getTree());
RIGHT_CURLY34=(Token)input.LT(1);
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_pattern1078);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_CURLY34_tree=(Object)adaptor.create(RIGHT_CURLY34);
adaptor.addChild(root_0,RIGHT_CURLY34_tree);
}
}
break;
case 3:
{
LEFT_SQUARE35=(Token)input.LT(1);
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_pattern1092);
if (failed) return retval;
if (backtracking == 0) {
LEFT_SQUARE35_tree=(Object)adaptor.create(LEFT_SQUARE35);
adaptor.addChild(root_0,LEFT_SQUARE35_tree);
}
pushFollow(FOLLOW_pattern_in_pattern1094);
pattern36=pattern();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,pattern36.getTree());
RIGHT_SQUARE37=(Token)input.LT(1);
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_pattern1096);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_SQUARE37_tree=(Object)adaptor.create(RIGHT_SQUARE37);
adaptor.addChild(root_0,RIGHT_SQUARE37_tree);
}
}
break;
default :
if (cnt16 >= 1) break loop16;
if (backtracking > 0) {
failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(16,input);
throw eee;
}
cnt16++;
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
