{
  pattern_return retval=new pattern_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY31=null;
  Token RIGHT_CURLY33=null;
  Token LEFT_SQUARE34=null;
  Token RIGHT_SQUARE36=null;
  literal_return literal30=null;
  literal_return literal32=null;
  pattern_return pattern35=null;
  Object LEFT_CURLY31_tree=null;
  Object RIGHT_CURLY33_tree=null;
  Object LEFT_SQUARE34_tree=null;
  Object RIGHT_SQUARE36_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt15=0;
      loop15:       do {
        int alt15=4;
switch (input.LA(1)) {
case RIGHT_SQUARE:
{
            int LA15_2=input.LA(2);
            if ((synpred23())) {
              alt15=1;
            }
          }
        break;
case LEFT_SQUARE:
{
        int LA15_3=input.LA(2);
        if ((synpred23())) {
          alt15=1;
        }
 else         if ((synpred25())) {
          alt15=3;
        }
      }
    break;
case LEFT_CURLY:
{
    alt15=2;
  }
break;
case LITERAL:
case COLON:
{
alt15=1;
}
break;
}
switch (alt15) {
case 1:
{
pushFollow(FOLLOW_literal_in_pattern958);
literal30=literal();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,literal30.getTree());
}
break;
case 2:
{
LEFT_CURLY31=(Token)input.LT(1);
match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_pattern972);
if (failed) return retval;
if (backtracking == 0) {
LEFT_CURLY31_tree=(Object)adaptor.create(LEFT_CURLY31);
adaptor.addChild(root_0,LEFT_CURLY31_tree);
}
pushFollow(FOLLOW_literal_in_pattern974);
literal32=literal();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,literal32.getTree());
RIGHT_CURLY33=(Token)input.LT(1);
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_pattern976);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_CURLY33_tree=(Object)adaptor.create(RIGHT_CURLY33);
adaptor.addChild(root_0,RIGHT_CURLY33_tree);
}
}
break;
case 3:
{
LEFT_SQUARE34=(Token)input.LT(1);
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_pattern990);
if (failed) return retval;
if (backtracking == 0) {
LEFT_SQUARE34_tree=(Object)adaptor.create(LEFT_SQUARE34);
adaptor.addChild(root_0,LEFT_SQUARE34_tree);
}
pushFollow(FOLLOW_pattern_in_pattern992);
pattern35=pattern();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,pattern35.getTree());
RIGHT_SQUARE36=(Token)input.LT(1);
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_pattern994);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_SQUARE36_tree=(Object)adaptor.create(RIGHT_SQUARE36);
adaptor.addChild(root_0,RIGHT_SQUARE36_tree);
}
}
break;
default :
if (cnt15 >= 1) break loop15;
if (backtracking > 0) {
failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(15,input);
throw eee;
}
cnt15++;
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
