{
  DSLMapParser.pattern_return retval=new DSLMapParser.pattern_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY27=null;
  Token RIGHT_CURLY29=null;
  Token LEFT_SQUARE30=null;
  Token RIGHT_SQUARE32=null;
  DSLMapParser.literal_return literal26=null;
  DSLMapParser.literal_return literal28=null;
  DSLMapParser.pattern_return pattern31=null;
  Object LEFT_CURLY27_tree=null;
  Object RIGHT_CURLY29_tree=null;
  Object LEFT_SQUARE30_tree=null;
  Object RIGHT_SQUARE32_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt16=0;
      loop16:       do {
        int alt16=4;
switch (input.LA(1)) {
case RIGHT_SQUARE:
{
            int LA16_2=input.LA(2);
            if ((synpred23_DSLMap())) {
              alt16=1;
            }
          }
        break;
case LEFT_SQUARE:
{
        int LA16_3=input.LA(2);
        if ((synpred23_DSLMap())) {
          alt16=1;
        }
 else         if ((synpred25_DSLMap())) {
          alt16=3;
        }
      }
    break;
case LEFT_CURLY:
{
    alt16=2;
  }
break;
case LITERAL:
case COLON:
{
alt16=1;
}
break;
}
switch (alt16) {
case 1:
{
pushFollow(FOLLOW_literal_in_pattern1126);
literal26=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal26.getTree());
}
break;
case 2:
{
LEFT_CURLY27=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_pattern1140);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_CURLY27_tree=(Object)adaptor.create(LEFT_CURLY27);
adaptor.addChild(root_0,LEFT_CURLY27_tree);
}
pushFollow(FOLLOW_literal_in_pattern1142);
literal28=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal28.getTree());
RIGHT_CURLY29=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_pattern1144);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY29_tree=(Object)adaptor.create(RIGHT_CURLY29);
adaptor.addChild(root_0,RIGHT_CURLY29_tree);
}
}
break;
case 3:
{
LEFT_SQUARE30=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_pattern1158);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE30_tree=(Object)adaptor.create(LEFT_SQUARE30);
adaptor.addChild(root_0,LEFT_SQUARE30_tree);
}
pushFollow(FOLLOW_pattern_in_pattern1160);
pattern31=pattern();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,pattern31.getTree());
RIGHT_SQUARE32=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_pattern1162);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE32_tree=(Object)adaptor.create(RIGHT_SQUARE32);
adaptor.addChild(root_0,RIGHT_SQUARE32_tree);
}
}
break;
default :
if (cnt16 >= 1) break loop16;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(16,input);
throw eee;
}
cnt16++;
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
