{
  DSLMapParser.pattern_return retval=new DSLMapParser.pattern_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY26=null;
  Token RIGHT_CURLY28=null;
  Token LEFT_SQUARE29=null;
  Token RIGHT_SQUARE31=null;
  DSLMapParser.literal_return literal25=null;
  DSLMapParser.literal_return literal27=null;
  DSLMapParser.pattern_return pattern30=null;
  Object LEFT_CURLY26_tree=null;
  Object RIGHT_CURLY28_tree=null;
  Object LEFT_SQUARE29_tree=null;
  Object RIGHT_SQUARE31_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt15=0;
      loop15:       do {
        int alt15=4;
switch (input.LA(1)) {
case RIGHT_SQUARE:
{
            int LA15_2=input.LA(2);
            if ((synpred22_DSLMap())) {
              alt15=1;
            }
          }
        break;
case LEFT_SQUARE:
{
        int LA15_3=input.LA(2);
        if ((synpred22_DSLMap())) {
          alt15=1;
        }
 else         if ((synpred24_DSLMap())) {
          alt15=3;
        }
      }
    break;
case LEFT_CURLY:
{
    alt15=2;
  }
break;
case LITERAL:
case COLON:
{
alt15=1;
}
break;
}
switch (alt15) {
case 1:
{
pushFollow(FOLLOW_literal_in_pattern1036);
literal25=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal25.getTree());
}
break;
case 2:
{
LEFT_CURLY26=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_pattern1050);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_CURLY26_tree=(Object)adaptor.create(LEFT_CURLY26);
adaptor.addChild(root_0,LEFT_CURLY26_tree);
}
pushFollow(FOLLOW_literal_in_pattern1052);
literal27=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal27.getTree());
RIGHT_CURLY28=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_pattern1054);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY28_tree=(Object)adaptor.create(RIGHT_CURLY28);
adaptor.addChild(root_0,RIGHT_CURLY28_tree);
}
}
break;
case 3:
{
LEFT_SQUARE29=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_pattern1068);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE29_tree=(Object)adaptor.create(LEFT_SQUARE29);
adaptor.addChild(root_0,LEFT_SQUARE29_tree);
}
pushFollow(FOLLOW_pattern_in_pattern1070);
pattern30=pattern();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,pattern30.getTree());
RIGHT_SQUARE31=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_pattern1072);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE31_tree=(Object)adaptor.create(RIGHT_SQUARE31);
adaptor.addChild(root_0,RIGHT_SQUARE31_tree);
}
}
break;
default :
if (cnt15 >= 1) break loop15;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(15,input);
throw eee;
}
cnt15++;
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
