{
  entry_return retval=new entry_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS9=null;
  Token EOL11=null;
  Token EOF12=null;
  scope_section_return scope_section6=null;
  meta_section_return meta_section7=null;
  key_section_return key_section8=null;
  value_section_return value_section10=null;
  Object EQUALS9_tree=null;
  Object EOL11_tree=null;
  Object EOF12_tree=null;
  RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
  RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
  RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
  RewriteRuleSubtreeStream stream_key_section=new RewriteRuleSubtreeStream(adaptor,"rule key_section");
  RewriteRuleSubtreeStream stream_value_section=new RewriteRuleSubtreeStream(adaptor,"rule value_section");
  RewriteRuleSubtreeStream stream_scope_section=new RewriteRuleSubtreeStream(adaptor,"rule scope_section");
  RewriteRuleSubtreeStream stream_meta_section=new RewriteRuleSubtreeStream(adaptor,"rule meta_section");
  try {
{
      pushFollow(FOLLOW_scope_section_in_entry332);
      scope_section6=scope_section();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_scope_section.add(scope_section6.getTree());
      int alt3=2;
      int LA3_0=input.LA(1);
      if ((LA3_0 == LEFT_SQUARE)) {
        int LA3_1=input.LA(2);
        if ((LA3_1 == LITERAL)) {
          int LA3_3=input.LA(3);
          if ((LA3_3 == RIGHT_SQUARE)) {
            int LA3_4=input.LA(4);
            if ((synpred4())) {
              alt3=1;
            }
          }
        }
 else         if ((LA3_1 == RIGHT_SQUARE)) {
          int LA3_4=input.LA(3);
          if ((synpred4())) {
            alt3=1;
          }
        }
      }
switch (alt3) {
case 1:
{
          pushFollow(FOLLOW_meta_section_in_entry334);
          meta_section7=meta_section();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_meta_section.add(meta_section7.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_key_section_in_entry337);
  key_section8=key_section();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_key_section.add(key_section8.getTree());
  EQUALS9=(Token)input.LT(1);
  match(input,EQUALS,FOLLOW_EQUALS_in_entry339);
  if (failed)   return retval;
  if (backtracking == 0)   stream_EQUALS.add(EQUALS9);
  pushFollow(FOLLOW_value_section_in_entry341);
  value_section10=value_section();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_value_section.add(value_section10.getTree());
  int alt4=2;
  int LA4_0=input.LA(1);
  if ((LA4_0 == EOL)) {
    alt4=1;
  }
 else   if ((LA4_0 == EOF)) {
    alt4=2;
  }
 else {
    if (backtracking > 0) {
      failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("102:71: ( EOL | EOF )",4,0,input);
    throw nvae;
  }
switch (alt4) {
case 1:
{
      EOL11=(Token)input.LT(1);
      match(input,EOL,FOLLOW_EOL_in_entry344);
      if (failed)       return retval;
      if (backtracking == 0)       stream_EOL.add(EOL11);
    }
  break;
case 2:
{
  EOF12=(Token)input.LT(1);
  match(input,EOF,FOLLOW_EOF_in_entry346);
  if (failed)   return retval;
  if (backtracking == 0)   stream_EOF.add(EOF12);
}
break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_ENTRY,"VT_ENTRY"),root_1);
adaptor.addChild(root_1,stream_scope_section.next());
if (stream_meta_section.hasNext()) {
  adaptor.addChild(root_1,stream_meta_section.next());
}
stream_meta_section.reset();
adaptor.addChild(root_1,stream_key_section.next());
adaptor.addChild(root_1,stream_value_section.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
}
catch (RewriteEmptyStreamException e) {
}
 finally {
}
return retval;
}
