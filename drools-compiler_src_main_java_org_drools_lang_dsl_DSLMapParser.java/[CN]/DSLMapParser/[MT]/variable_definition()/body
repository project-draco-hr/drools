{
  variable_definition_return retval=new variable_definition_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token lc=null;
  Token name=null;
  Token rc=null;
  Token COLON26=null;
  pattern_return pat=null;
  Object lc_tree=null;
  Object name_tree=null;
  Object rc_tree=null;
  Object COLON26_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
  RewriteRuleTokenStream stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL");
  RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
  RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
  String text="";
  boolean hasSpaceBefore=false;
  boolean hasSpaceAfter=false;
  try {
{
      lc=(Token)input.LT(1);
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_variable_definition694);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_CURLY.add(lc);
      if (backtracking == 0) {
        CommonToken back2=(CommonToken)input.LT(-2);
        if (back2 != null && back2.getStopIndex() < ((CommonToken)lc).getStartIndex() - 1)         hasSpaceBefore=true;
      }
      name=(Token)input.LT(1);
      match(input,LITERAL,FOLLOW_LITERAL_in_variable_definition705);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LITERAL.add(name);
      int alt13=2;
      int LA13_0=input.LA(1);
      if ((LA13_0 == COLON)) {
        alt13=1;
      }
switch (alt13) {
case 1:
{
          COLON26=(Token)input.LT(1);
          match(input,COLON,FOLLOW_COLON_in_variable_definition709);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COLON.add(COLON26);
          pushFollow(FOLLOW_pattern_in_variable_definition713);
          pat=pattern();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_pattern.add(pat.getTree());
          if (backtracking == 0) {
            text=input.toString(pat.start,pat.stop);
          }
        }
      break;
  }
  rc=(Token)input.LT(1);
  match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_variable_definition722);
  if (failed)   return retval;
  if (backtracking == 0)   stream_RIGHT_CURLY.add(rc);
  if (backtracking == 0) {
    CommonToken rc1=(CommonToken)input.LT(1);
    if (!"=".equals(rc1.getText()) && ((CommonToken)rc).getStopIndex() < rc1.getStartIndex() - 1)     hasSpaceAfter=true;
  }
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
    if (hasSpaceBefore && !"".equals(text) && !hasSpaceAfter) {
      adaptor.addChild(root_0,adaptor.create(VT_SPACE,"VT_SPACE"));
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_1,adaptor.create(VT_PATTERN,((Token)pat.start),text));
        adaptor.addChild(root_0,root_1);
      }
    }
 else     if (!hasSpaceBefore && !"".equals(text) && !hasSpaceAfter) {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_1,adaptor.create(VT_PATTERN,((Token)pat.start),text));
        adaptor.addChild(root_0,root_1);
      }
    }
 else     if (hasSpaceBefore && !hasSpaceAfter) {
      adaptor.addChild(root_0,adaptor.create(VT_SPACE,"VT_SPACE"));
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_0,root_1);
      }
    }
 else     if (!hasSpaceBefore && !hasSpaceAfter) {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_0,root_1);
      }
    }
 else     if (hasSpaceBefore && !"".equals(text) && hasSpaceAfter) {
      adaptor.addChild(root_0,adaptor.create(VT_SPACE,"VT_SPACE"));
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_1,adaptor.create(VT_PATTERN,((Token)pat.start),text));
        adaptor.addChild(root_0,root_1);
      }
      adaptor.addChild(root_0,adaptor.create(VT_SPACE,"VT_SPACE"));
    }
 else     if (!hasSpaceBefore && !"".equals(text) && hasSpaceAfter) {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_1,adaptor.create(VT_PATTERN,((Token)pat.start),text));
        adaptor.addChild(root_0,root_1);
      }
      adaptor.addChild(root_0,adaptor.create(VT_SPACE,"VT_SPACE"));
    }
 else     if (hasSpaceBefore && hasSpaceAfter) {
      adaptor.addChild(root_0,adaptor.create(VT_SPACE,"VT_SPACE"));
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_0,root_1);
      }
      adaptor.addChild(root_0,adaptor.create(VT_SPACE,"VT_SPACE"));
    }
 else     if (!hasSpaceBefore && hasSpaceAfter) {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_0,root_1);
      }
      adaptor.addChild(root_0,adaptor.create(VT_SPACE,"VT_SPACE"));
    }
 else {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
