{
  DSLMapParser.variable_reference2_return retval=new DSLMapParser.variable_reference2_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token name=null;
  Token LEFT_CURLY38=null;
  Token RIGHT_CURLY39=null;
  Object name_tree=null;
  Object LEFT_CURLY38_tree=null;
  Object RIGHT_CURLY39_tree=null;
  RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
  RewriteRuleTokenStream stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL");
  RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
  try {
{
      LEFT_CURLY38=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_variable_reference21224);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_CURLY.add(LEFT_CURLY38);
      name=(Token)match(input,LITERAL,FOLLOW_LITERAL_in_variable_reference21228);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LITERAL.add(name);
      RIGHT_CURLY39=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_variable_reference21230);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_RIGHT_CURLY.add(RIGHT_CURLY39);
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_VAR_REF,"VT_VAR_REF"),root_1);
            adaptor.addChild(root_1,stream_name.nextNode());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
