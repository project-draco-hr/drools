{
  variable_reference2_return retval=new variable_reference2_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token name=null;
  Token LEFT_CURLY37=null;
  Token RIGHT_CURLY38=null;
  Object name_tree=null;
  Object LEFT_CURLY37_tree=null;
  Object RIGHT_CURLY38_tree=null;
  RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
  RewriteRuleTokenStream stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL");
  RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
  try {
{
      LEFT_CURLY37=(Token)input.LT(1);
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_variable_reference21122);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_CURLY.add(LEFT_CURLY37);
      name=(Token)input.LT(1);
      match(input,LITERAL,FOLLOW_LITERAL_in_variable_reference21126);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LITERAL.add(name);
      RIGHT_CURLY38=(Token)input.LT(1);
      match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_variable_reference21128);
      if (failed)       return retval;
      if (backtracking == 0)       stream_RIGHT_CURLY.add(RIGHT_CURLY38);
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_VAR_REF,"VT_VAR_REF"),root_1);
            adaptor.addChild(root_1,stream_name.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    throw e;
  }
 finally {
  }
  return retval;
}
