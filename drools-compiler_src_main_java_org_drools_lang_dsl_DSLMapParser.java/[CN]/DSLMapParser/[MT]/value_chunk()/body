{
  value_chunk_return retval=new value_chunk_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS23=null;
  Token COMMA24=null;
  literal_return literal22=null;
  Object EQUALS23_tree=null;
  Object COMMA24_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt12=0;
      loop12:       do {
        int alt12=4;
switch (input.LA(1)) {
case LEFT_SQUARE:
case RIGHT_SQUARE:
case LITERAL:
case COLON:
{
            int LA12_2=input.LA(2);
            if ((synpred15())) {
              alt12=1;
            }
          }
        break;
case EQUALS:
{
        int LA12_3=input.LA(2);
        if ((synpred16())) {
          alt12=2;
        }
      }
    break;
case COMMA:
{
    int LA12_4=input.LA(2);
    if ((synpred17())) {
      alt12=3;
    }
  }
break;
}
switch (alt12) {
case 1:
{
pushFollow(FOLLOW_literal_in_value_chunk626);
literal22=literal();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,literal22.getTree());
}
break;
case 2:
{
EQUALS23=(Token)input.LT(1);
match(input,EQUALS,FOLLOW_EQUALS_in_value_chunk628);
if (failed) return retval;
if (backtracking == 0) {
EQUALS23_tree=(Object)adaptor.create(EQUALS23);
adaptor.addChild(root_0,EQUALS23_tree);
}
}
break;
case 3:
{
COMMA24=(Token)input.LT(1);
match(input,COMMA,FOLLOW_COMMA_in_value_chunk630);
if (failed) return retval;
if (backtracking == 0) {
COMMA24_tree=(Object)adaptor.create(COMMA24);
adaptor.addChild(root_0,COMMA24_tree);
}
}
break;
default :
if (cnt12 >= 1) break loop12;
if (backtracking > 0) {
failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(12,input);
throw eee;
}
cnt12++;
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
throw e;
}
 finally {
}
return retval;
}
