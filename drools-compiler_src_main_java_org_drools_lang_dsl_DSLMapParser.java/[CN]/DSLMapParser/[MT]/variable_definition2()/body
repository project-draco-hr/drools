{
  DSLMapParser.variable_definition2_return retval=new DSLMapParser.variable_definition2_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token name=null;
  Token LEFT_CURLY28=null;
  Token COLON29=null;
  Token RIGHT_CURLY30=null;
  DSLMapParser.pattern_return pat=null;
  Object name_tree=null;
  Object LEFT_CURLY28_tree=null;
  Object COLON29_tree=null;
  Object RIGHT_CURLY30_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
  RewriteRuleTokenStream stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL");
  RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
  RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
  String text="";
  try {
{
      LEFT_CURLY28=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_variable_definition2990);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_CURLY.add(LEFT_CURLY28);
      name=(Token)match(input,LITERAL,FOLLOW_LITERAL_in_variable_definition2994);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LITERAL.add(name);
      int alt15=2;
      int LA15_0=input.LA(1);
      if ((LA15_0 == COLON)) {
        alt15=1;
      }
switch (alt15) {
case 1:
{
          COLON29=(Token)match(input,COLON,FOLLOW_COLON_in_variable_definition2998);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_COLON.add(COLON29);
          pushFollow(FOLLOW_pattern_in_variable_definition21002);
          pat=pattern();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_pattern.add(pat.getTree());
          if (state.backtracking == 0) {
            text=(pat != null ? input.toString(pat.start,pat.stop) : null);
          }
        }
      break;
  }
  RIGHT_CURLY30=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_variable_definition21009);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_RIGHT_CURLY.add(RIGHT_CURLY30);
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
    if (!"".equals(text)) {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.nextNode());
        adaptor.addChild(root_1,(Object)adaptor.create(VT_PATTERN,(pat != null ? ((Token)pat.start) : null),text));
        adaptor.addChild(root_0,root_1);
      }
    }
 else {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_VAR_DEF,"VT_VAR_DEF"),root_1);
        adaptor.addChild(root_1,stream_name.nextNode());
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
