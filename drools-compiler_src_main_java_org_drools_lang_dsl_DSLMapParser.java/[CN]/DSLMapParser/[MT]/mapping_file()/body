{
  DSLMapParser.mapping_file_return retval=new DSLMapParser.mapping_file_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DSLMapParser.statement_return statement1=null;
  RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
  try {
{
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if (((LA1_0 >= EOL && LA1_0 <= LINE_COMMENT) || LA1_0 == LEFT_SQUARE)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            pushFollow(FOLLOW_statement_in_mapping_file273);
            statement1=statement();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_statement.add(statement1.getTree());
          }
        break;
default :
      break loop1;
  }
}
 while (true);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_DSL_GRAMMAR,"VT_DSL_GRAMMAR"),root_1);
      while (stream_statement.hasNext()) {
        adaptor.addChild(root_1,stream_statement.nextTree());
      }
      stream_statement.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
