{
  DSLMapParser.scope_section_return retval=new DSLMapParser.scope_section_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE11=null;
  Token RIGHT_SQUARE12=null;
  DSLMapParser.condition_key_return value1=null;
  DSLMapParser.consequence_key_return value2=null;
  DSLMapParser.keyword_key_return value3=null;
  DSLMapParser.any_key_return value4=null;
  Object LEFT_SQUARE11_tree=null;
  Object RIGHT_SQUARE12_tree=null;
  RewriteRuleTokenStream stream_RIGHT_SQUARE=new RewriteRuleTokenStream(adaptor,"token RIGHT_SQUARE");
  RewriteRuleTokenStream stream_LEFT_SQUARE=new RewriteRuleTokenStream(adaptor,"token LEFT_SQUARE");
  RewriteRuleSubtreeStream stream_any_key=new RewriteRuleSubtreeStream(adaptor,"rule any_key");
  RewriteRuleSubtreeStream stream_condition_key=new RewriteRuleSubtreeStream(adaptor,"rule condition_key");
  RewriteRuleSubtreeStream stream_keyword_key=new RewriteRuleSubtreeStream(adaptor,"rule keyword_key");
  RewriteRuleSubtreeStream stream_consequence_key=new RewriteRuleSubtreeStream(adaptor,"rule consequence_key");
  try {
{
      LEFT_SQUARE11=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_scope_section382);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_SQUARE.add(LEFT_SQUARE11);
      int alt6=4;
      int LA6_0=input.LA(1);
      if ((LA6_0 == LITERAL)) {
        int LA6_1=input.LA(2);
        if (((synpred6_DSLMap() && (validateIdentifierKey("condition") || validateIdentifierKey("when"))))) {
          alt6=1;
        }
 else         if (((synpred7_DSLMap() && (validateIdentifierKey("consequence") || validateIdentifierKey("then"))))) {
          alt6=2;
        }
 else         if (((synpred8_DSLMap() && (validateIdentifierKey("keyword"))))) {
          alt6=3;
        }
 else         if (((validateIdentifierKey("*")))) {
          alt6=4;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",6,1,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",6,0,input);
        throw nvae;
      }
switch (alt6) {
case 1:
{
          pushFollow(FOLLOW_condition_key_in_scope_section390);
          value1=condition_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_condition_key.add(value1.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_consequence_key_in_scope_section399);
      value2=consequence_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_consequence_key.add(value2.getTree());
    }
  break;
case 3:
{
  pushFollow(FOLLOW_keyword_key_in_scope_section407);
  value3=keyword_key();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_keyword_key.add(value3.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_any_key_in_scope_section415);
value4=any_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_any_key.add(value4.getTree());
}
break;
}
RIGHT_SQUARE12=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_scope_section423);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_SQUARE.add(RIGHT_SQUARE12);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_value3=new RewriteRuleSubtreeStream(adaptor,"rule value3",value3 != null ? value3.tree : null);
RewriteRuleSubtreeStream stream_value4=new RewriteRuleSubtreeStream(adaptor,"rule value4",value4 != null ? value4.tree : null);
RewriteRuleSubtreeStream stream_value1=new RewriteRuleSubtreeStream(adaptor,"rule value1",value1 != null ? value1.tree : null);
RewriteRuleSubtreeStream stream_value2=new RewriteRuleSubtreeStream(adaptor,"rule value2",value2 != null ? value2.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_SCOPE,LEFT_SQUARE11,"SCOPE SECTION"),root_1);
if (stream_value1.hasNext()) {
adaptor.addChild(root_1,stream_value1.nextTree());
}
stream_value1.reset();
if (stream_value2.hasNext()) {
adaptor.addChild(root_1,stream_value2.nextTree());
}
stream_value2.reset();
if (stream_value3.hasNext()) {
adaptor.addChild(root_1,stream_value3.nextTree());
}
stream_value3.reset();
if (stream_value4.hasNext()) {
adaptor.addChild(root_1,stream_value4.nextTree());
}
stream_value4.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
