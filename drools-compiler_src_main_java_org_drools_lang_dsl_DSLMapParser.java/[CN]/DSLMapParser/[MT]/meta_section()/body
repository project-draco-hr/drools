{
  DSLMapParser.meta_section_return retval=new DSLMapParser.meta_section_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE15=null;
  Token LITERAL16=null;
  Token RIGHT_SQUARE17=null;
  Object LEFT_SQUARE15_tree=null;
  Object LITERAL16_tree=null;
  Object RIGHT_SQUARE17_tree=null;
  RewriteRuleTokenStream stream_LEFT_SQUARE=new RewriteRuleTokenStream(adaptor,"token LEFT_SQUARE");
  RewriteRuleTokenStream stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL");
  RewriteRuleTokenStream stream_RIGHT_SQUARE=new RewriteRuleTokenStream(adaptor,"token RIGHT_SQUARE");
  try {
{
      LEFT_SQUARE15=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_meta_section491);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_SQUARE.add(LEFT_SQUARE15);
      int alt6=2;
      int LA6_0=input.LA(1);
      if ((LA6_0 == LITERAL)) {
        alt6=1;
      }
switch (alt6) {
case 1:
{
          LITERAL16=(Token)match(input,LITERAL,FOLLOW_LITERAL_in_meta_section493);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_LITERAL.add(LITERAL16);
        }
      break;
  }
  RIGHT_SQUARE17=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_meta_section496);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_RIGHT_SQUARE.add(RIGHT_SQUARE17);
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_META,LEFT_SQUARE15,"META SECTION"),root_1);
        if (stream_LITERAL.hasNext()) {
          adaptor.addChild(root_1,stream_LITERAL.nextNode());
        }
        stream_LITERAL.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
