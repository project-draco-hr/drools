{
  DSLMapParser.variable_reference_return retval=new DSLMapParser.variable_reference_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token lc=null;
  Token name=null;
  Token rc=null;
  Object lc_tree=null;
  Object name_tree=null;
  Object rc_tree=null;
  RewriteRuleTokenStream stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL");
  RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
  RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
  boolean hasSpaceBefore=false;
  boolean hasSpaceAfter=false;
  String text="";
  try {
{
      lc=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_variable_reference1359);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_CURLY.add(lc);
      if (state.backtracking == 0) {
        CommonToken back2=(CommonToken)input.LT(-2);
        if (back2 != null && back2.getStopIndex() < ((CommonToken)lc).getStartIndex() - 1)         hasSpaceBefore=true;
      }
      name=(Token)match(input,LITERAL,FOLLOW_LITERAL_in_variable_reference1377);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LITERAL.add(name);
      rc=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_variable_reference1381);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_RIGHT_CURLY.add(rc);
      if (state.backtracking == 0) {
        if (((CommonToken)rc).getStopIndex() < ((CommonToken)input.LT(1)).getStartIndex() - 1)         hasSpaceAfter=true;
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
        if (hasSpaceBefore && hasSpaceAfter) {
          adaptor.addChild(root_0,(Object)adaptor.create(VT_SPACE,"VT_SPACE"));
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_VAR_REF,"VT_VAR_REF"),root_1);
            adaptor.addChild(root_1,stream_name.nextNode());
            adaptor.addChild(root_0,root_1);
          }
          adaptor.addChild(root_0,(Object)adaptor.create(VT_SPACE,"VT_SPACE"));
        }
 else         if (hasSpaceBefore && !hasSpaceAfter) {
          adaptor.addChild(root_0,(Object)adaptor.create(VT_SPACE,"VT_SPACE"));
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_VAR_REF,"VT_VAR_REF"),root_1);
            adaptor.addChild(root_1,stream_name.nextNode());
            adaptor.addChild(root_0,root_1);
          }
        }
 else         if (!hasSpaceBefore && hasSpaceAfter) {
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_VAR_REF,"VT_VAR_REF"),root_1);
            adaptor.addChild(root_1,stream_name.nextNode());
            adaptor.addChild(root_0,root_1);
          }
          adaptor.addChild(root_0,(Object)adaptor.create(VT_SPACE,"VT_SPACE"));
        }
 else {
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_VAR_REF,"VT_VAR_REF"),root_1);
            adaptor.addChild(root_1,stream_name.nextNode());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
