{
  keyword_key_return retval=new keyword_key_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token value=null;
  Object value_tree=null;
  RewriteRuleTokenStream stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL");
  try {
{
      if (!(validateIdentifierKey("keyword"))) {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"keyword_key","validateIdentifierKey(\"keyword\")");
      }
      value=(Token)input.LT(1);
      match(input,LITERAL,FOLLOW_LITERAL_in_keyword_key1203);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LITERAL.add(value);
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,adaptor.create(VT_KEYWORD,value));
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException e) {
    throw e;
  }
 finally {
  }
  return retval;
}
