{
  DSLMapParser.value_section_return retval=new DSLMapParser.value_section_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DSLMapParser.value_sentence_return value_sentence18=null;
  RewriteRuleSubtreeStream stream_value_sentence=new RewriteRuleSubtreeStream(adaptor,"rule value_sentence");
  try {
{
      int cnt11=0;
      loop11:       do {
        int alt11=2;
        int LA11_0=input.LA(1);
        if (((LA11_0 >= EQUALS && LA11_0 <= LEFT_CURLY))) {
          alt11=1;
        }
switch (alt11) {
case 1:
{
            pushFollow(FOLLOW_value_sentence_in_value_section556);
            value_sentence18=value_sentence();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_value_sentence.add(value_sentence18.getTree());
          }
        break;
default :
      if (cnt11 >= 1)       break loop11;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(11,input);
throw eee;
}
cnt11++;
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_ENTRY_VAL,"VT_ENTRY_VAL"),root_1);
if (!(stream_value_sentence.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_value_sentence.hasNext()) {
  adaptor.addChild(root_1,stream_value_sentence.nextTree());
}
stream_value_sentence.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
