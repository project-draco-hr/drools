{
  DSLMapParser.key_chunk_return retval=new DSLMapParser.key_chunk_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DSLMapParser.literal_return literal19=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt9=0;
      loop9:       do {
        int alt9=2;
        int LA9_0=input.LA(1);
        if (((LA9_0 >= LEFT_SQUARE && LA9_0 <= LITERAL) || LA9_0 == COLON)) {
          int LA9_2=input.LA(2);
          if ((synpred12_DSLMap())) {
            alt9=1;
          }
        }
switch (alt9) {
case 1:
{
            pushFollow(FOLLOW_literal_in_key_chunk579);
            literal19=literal();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,literal19.getTree());
          }
        break;
default :
      if (cnt9 >= 1)       break loop9;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(9,input);
throw eee;
}
cnt9++;
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
