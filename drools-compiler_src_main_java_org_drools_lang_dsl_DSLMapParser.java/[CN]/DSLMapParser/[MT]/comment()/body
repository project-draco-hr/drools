{
  DSLMapParser.comment_return retval=new DSLMapParser.comment_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LINE_COMMENT5=null;
  Object LINE_COMMENT5_tree=null;
  RewriteRuleTokenStream stream_LINE_COMMENT=new RewriteRuleTokenStream(adaptor,"token LINE_COMMENT");
  try {
{
      LINE_COMMENT5=(Token)match(input,LINE_COMMENT,FOLLOW_LINE_COMMENT_in_comment325);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LINE_COMMENT.add(LINE_COMMENT5);
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_COMMENT,LINE_COMMENT5,"COMMENT"),root_1);
            adaptor.addChild(root_1,stream_LINE_COMMENT.nextNode());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
