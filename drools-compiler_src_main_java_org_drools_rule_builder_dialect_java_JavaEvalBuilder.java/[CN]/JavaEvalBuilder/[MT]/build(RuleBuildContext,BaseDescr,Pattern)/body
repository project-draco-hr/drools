{
  final EvalDescr evalDescr=(EvalDescr)descr;
  final String className="eval" + context.getNextId();
  evalDescr.setClassMethodName(className);
  Dialect.AnalysisResult analysis=context.getDialect().analyzeExpression(context,evalDescr,evalDescr.getContent());
  final List[] usedIdentifiers=analysis.getBoundIdentifiers();
  final Declaration[] declarations=new Declaration[usedIdentifiers[0].size()];
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    declarations[i]=context.getDeclarationResolver().getDeclaration((String)usedIdentifiers[0].get(i));
  }
  final EvalCondition eval=new EvalCondition(declarations);
  final Map map=createVariableContext(className,(String)evalDescr.getContent(),context,declarations,null,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]));
  generatTemplates("evalMethod","evalInvoker",context,className,map,eval,descr);
  return eval;
}
