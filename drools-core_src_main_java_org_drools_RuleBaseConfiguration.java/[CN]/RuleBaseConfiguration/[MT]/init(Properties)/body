{
  this.immutable=false;
  this.chainedProperties=new ChainedProperties("rulebase.conf");
  if (properties != null) {
    this.chainedProperties.addProperties(properties);
  }
  setSequentialAgenda(SequentialAgenda.determineSequentialAgenda(this.chainedProperties.getProperty("drools.sequential.agenda","sequential")));
  setSequential(Boolean.valueOf(this.chainedProperties.getProperty("drools.sequential","false")).booleanValue());
  setMaintainTms(Boolean.valueOf(this.chainedProperties.getProperty("drools.maintainTms","true")).booleanValue());
  setRemoveIdentities(Boolean.valueOf(this.chainedProperties.getProperty("drools.removeIdentities","false")).booleanValue());
  setAlphaMemory(Boolean.valueOf(this.chainedProperties.getProperty("drools.alphaMemory","false")).booleanValue());
  setShareAlphaNodes(Boolean.valueOf(this.chainedProperties.getProperty("drools.shareAlphaNodes","true")).booleanValue());
  setShareBetaNodes(Boolean.valueOf(this.chainedProperties.getProperty("drools.shareBetaNodes","true")).booleanValue());
  setAlphaNodeHashingThreshold(Integer.parseInt(this.chainedProperties.getProperty("drools.alphaNodeHashingThreshold","3")));
  setCompositeKeyDepth(Integer.parseInt(this.chainedProperties.getProperty("drools.compositeKeyDepth","3")));
  setIndexLeftBetaMemory(Boolean.valueOf(this.chainedProperties.getProperty("drools.indexLeftBetaMemory","true")).booleanValue());
  setIndexRightBetaMemory(Boolean.valueOf(this.chainedProperties.getProperty("drools.indexRightBetaMemory","true")).booleanValue());
  setAssertBehaviour(AssertBehaviour.determineAssertBehaviour(this.chainedProperties.getProperty("drools.assertBehaviour","identity")));
  setLogicalOverride(LogicalOverride.determineLogicalOverride(this.chainedProperties.getProperty("drools.logicalOverride","discard")));
  setExecutorService(RuleBaseConfiguration.determineExecutorService(this.chainedProperties.getProperty("drools.executorService","org.drools.concurrent.DefaultExecutorService")));
  setConsequenceExceptionHandler(RuleBaseConfiguration.determineConsequenceExceptionHandler(this.chainedProperties.getProperty("drools.consequenceExceptionHandler","org.drools.base.DefaultConsequenceExceptionHandler")));
  setConflictResolver(RuleBaseConfiguration.determineConflictResolver(this.chainedProperties.getProperty("drools.conflictResolver","org.drools.conflict.DepthConflictResolver")));
  setShareBetaNodes(Boolean.valueOf(this.chainedProperties.getProperty("drools.shadowproxy","true")).booleanValue());
  setShadowProxy(determineShadowProxy(this.chainedProperties.getProperty("drools.shadowproxy",null)));
  setShadowProxyExcludes(this.chainedProperties.getProperty("drools.shadowProxyExcludes",""));
}
