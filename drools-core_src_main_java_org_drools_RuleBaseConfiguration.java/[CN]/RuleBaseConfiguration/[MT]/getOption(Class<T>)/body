{
  if (MaintainTMSOption.class.equals(option)) {
    return (T)(this.maintainTms ? MaintainTMSOption.YES : MaintainTMSOption.NO);
  }
 else   if (SequentialOption.class.equals(option)) {
    return (T)(this.sequential ? SequentialOption.YES : SequentialOption.NO);
  }
 else   if (RemoveIdentitiesOption.class.equals(option)) {
    return (T)(this.removeIdentities ? RemoveIdentitiesOption.YES : RemoveIdentitiesOption.NO);
  }
 else   if (ShareAlphaNodesOption.class.equals(option)) {
    return (T)(this.shareAlphaNodes ? ShareAlphaNodesOption.YES : ShareAlphaNodesOption.NO);
  }
 else   if (ShareBetaNodesOption.class.equals(option)) {
    return (T)(this.shareBetaNodes ? ShareBetaNodesOption.YES : ShareBetaNodesOption.NO);
  }
 else   if (IndexLeftBetaMemoryOption.class.equals(option)) {
    return (T)(this.indexLeftBetaMemory ? IndexLeftBetaMemoryOption.YES : IndexLeftBetaMemoryOption.NO);
  }
 else   if (IndexRightBetaMemoryOption.class.equals(option)) {
    return (T)(this.indexRightBetaMemory ? IndexRightBetaMemoryOption.YES : IndexRightBetaMemoryOption.NO);
  }
 else   if (AssertBehaviorOption.class.equals(option)) {
    return (T)((this.assertBehaviour == AssertBehaviour.IDENTITY) ? AssertBehaviorOption.IDENTITY : AssertBehaviorOption.EQUALITY);
  }
 else   if (LogicalOverrideOption.class.equals(option)) {
    return (T)((this.logicalOverride == LogicalOverride.DISCARD) ? LogicalOverrideOption.DISCARD : LogicalOverrideOption.PRESERVE);
  }
 else   if (SequentialAgendaOption.class.equals(option)) {
    return (T)((this.sequentialAgenda == SequentialAgenda.SEQUENTIAL) ? SequentialAgendaOption.SEQUENTIAL : SequentialAgendaOption.DYNAMIC);
  }
  return null;
}
