{
  name=name.trim();
  if (StringUtils.isEmpty(name)) {
    return null;
  }
  if (name.equals(SequentialAgendaOption.PROPERTY_NAME)) {
    return getSequentialAgenda().toExternalForm();
  }
 else   if (name.equals(SequentialOption.PROPERTY_NAME)) {
    return Boolean.toString(isSequential());
  }
 else   if (name.equals(MaintainTMSOption.PROPERTY_NAME)) {
    return Boolean.toString(isMaintainTms());
  }
 else   if (name.equals(RemoveIdentitiesOption.PROPERTY_NAME)) {
    return Boolean.toString(isRemoveIdentities());
  }
 else   if (name.equals(ShareAlphaNodesOption.PROPERTY_NAME)) {
    return Boolean.toString(isShareAlphaNodes());
  }
 else   if (name.equals(ShareBetaNodesOption.PROPERTY_NAME)) {
    return Boolean.toString(isShareBetaNodes());
  }
 else   if (name.equals(AlphaThresholdOption.PROPERTY_NAME)) {
    return Integer.toString(getAlphaNodeHashingThreshold());
  }
 else   if (name.equals(CompositeKeyDepthOption.PROPERTY_NAME)) {
    return Integer.toString(getCompositeKeyDepth());
  }
 else   if (name.equals(IndexLeftBetaMemoryOption.PROPERTY_NAME)) {
    return Boolean.toString(isIndexLeftBetaMemory());
  }
 else   if (name.equals(IndexRightBetaMemoryOption.PROPERTY_NAME)) {
    return Boolean.toString(isIndexRightBetaMemory());
  }
 else   if (name.equals(AssertBehaviorOption.PROPERTY_NAME)) {
    return getAssertBehaviour().toExternalForm();
  }
 else   if (name.equals("drools.logicalOverride")) {
    return getLogicalOverride().toExternalForm();
  }
 else   if (name.equals("drools.executorService")) {
    return getExecutorService();
  }
 else   if (name.equals(ConsequenceExceptionHandlerOption.PROPERTY_NAME)) {
    return getConsequenceExceptionHandler();
  }
 else   if (name.equals("drools.ruleBaseUpdateHandler")) {
    return getRuleBaseUpdateHandler();
  }
 else   if (name.equals("drools.conflictResolver")) {
    return getConflictResolver().getClass().getName();
  }
 else   if (name.equals("drools.advancedProcessRuleIntegration")) {
    return Boolean.toString(isAdvancedProcessRuleIntegration());
  }
 else   if (name.equals(MultithreadEvaluationOption.PROPERTY_NAME)) {
    return Boolean.toString(isMultithreadEvaluation());
  }
 else   if (name.equals(MaxThreadsOption.PROPERTY_NAME)) {
    return Integer.toString(getMaxThreads());
  }
 else   if (name.equals(EventProcessingOption.PROPERTY_NAME)) {
    return getEventProcessingMode().getMode();
  }
  return null;
}
