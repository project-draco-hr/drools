{
  name=name.trim();
  if (StringUtils.isEmpty(name)) {
    return;
  }
  if (name.equals(SequentialAgendaOption.PROPERTY_NAME)) {
    setSequentialAgenda(SequentialAgenda.determineSequentialAgenda(StringUtils.isEmpty(value) ? "sequential" : value));
  }
 else   if (name.equals(SequentialOption.PROPERTY_NAME)) {
    setSequential(StringUtils.isEmpty(value) ? false : Boolean.valueOf(value));
  }
 else   if (name.equals(MaintainTMSOption.PROPERTY_NAME)) {
    setMaintainTms(StringUtils.isEmpty(value) ? false : Boolean.valueOf(value));
  }
 else   if (name.equals(RemoveIdentitiesOption.PROPERTY_NAME)) {
    setRemoveIdentities(StringUtils.isEmpty(value) ? false : Boolean.valueOf(value));
  }
 else   if (name.equals(ShareAlphaNodesOption.PROPERTY_NAME)) {
    setShareAlphaNodes(StringUtils.isEmpty(value) ? false : Boolean.valueOf(value));
  }
 else   if (name.equals(ShareBetaNodesOption.PROPERTY_NAME)) {
    setShareBetaNodes(StringUtils.isEmpty(value) ? false : Boolean.valueOf(value));
  }
 else   if (name.equals(PermGenThresholdOption.PROPERTY_NAME)) {
    setPermGenThreshold(StringUtils.isEmpty(value) ? PermGenThresholdOption.DEFAULT_VALUE : Integer.parseInt(value));
  }
 else   if (name.equals(AlphaThresholdOption.PROPERTY_NAME)) {
    setAlphaNodeHashingThreshold(StringUtils.isEmpty(value) ? 3 : Integer.parseInt(value));
  }
 else   if (name.equals(CompositeKeyDepthOption.PROPERTY_NAME)) {
    setCompositeKeyDepth(StringUtils.isEmpty(value) ? 3 : Integer.parseInt(value));
  }
 else   if (name.equals(IndexLeftBetaMemoryOption.PROPERTY_NAME)) {
    setIndexLeftBetaMemory(StringUtils.isEmpty(value) ? true : Boolean.valueOf(value));
  }
 else   if (name.equals(IndexRightBetaMemoryOption.PROPERTY_NAME)) {
    setIndexRightBetaMemory(StringUtils.isEmpty(value) ? true : Boolean.valueOf(value));
  }
 else   if (name.equals(IndexPrecedenceOption.PROPERTY_NAME)) {
    setIndexPrecedenceOption(StringUtils.isEmpty(value) ? IndexPrecedenceOption.EQUALITY_PRIORITY : IndexPrecedenceOption.determineIndexPrecedence(value));
  }
 else   if (name.equals(AssertBehaviorOption.PROPERTY_NAME)) {
    setAssertBehaviour(AssertBehaviour.determineAssertBehaviour(StringUtils.isEmpty(value) ? "identity" : value));
  }
 else   if (name.equals(ConsequenceExceptionHandlerOption.PROPERTY_NAME)) {
    setConsequenceExceptionHandler(StringUtils.isEmpty(value) ? DefaultConsequenceExceptionHandler.class.getName() : value);
  }
 else   if (name.equals("drools.ruleBaseUpdateHandler")) {
    setRuleBaseUpdateHandler(StringUtils.isEmpty(value) ? "" : value);
  }
 else   if (name.equals("drools.conflictResolver")) {
    setConflictResolver(determineConflictResolver(StringUtils.isEmpty(value) ? DepthConflictResolver.class.getName() : value));
  }
 else   if (name.equals("drools.advancedProcessRuleIntegration")) {
    setAdvancedProcessRuleIntegration(StringUtils.isEmpty(value) ? false : Boolean.valueOf(value));
  }
 else   if (name.equals(MultithreadEvaluationOption.PROPERTY_NAME)) {
    setMultithreadEvaluation(StringUtils.isEmpty(value) ? false : Boolean.valueOf(value));
  }
 else   if (name.equals(MaxThreadsOption.PROPERTY_NAME)) {
    setMaxThreads(StringUtils.isEmpty(value) ? 3 : Integer.parseInt(value));
  }
 else   if (name.equals(EventProcessingOption.PROPERTY_NAME)) {
    setEventProcessingMode(EventProcessingOption.determineEventProcessingMode(StringUtils.isEmpty(value) ? "cloud" : value));
  }
 else   if (name.equals(MBeansOption.PROPERTY_NAME)) {
    setMBeansEnabled(MBeansOption.isEnabled(value));
  }
 else   if (name.equals(ClassLoaderCacheOption.PROPERTY_NAME)) {
    setClassLoaderCacheEnabled(StringUtils.isEmpty(value) ? true : Boolean.valueOf(value));
  }
 else   if (name.equals(LRUnlinkingOption.PROPERTY_NAME)) {
    setUnlinkingEnabled(StringUtils.isEmpty(value) ? false : Boolean.valueOf(value));
  }
}
