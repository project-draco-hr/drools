{
  this.immutable=false;
  setClassLoader(classLoader);
  this.chainedProperties=new ChainedProperties("rulebase.conf",this.classLoader,true);
  if (properties != null) {
    this.chainedProperties.addProperties(properties);
  }
  setSequentialAgenda(SequentialAgenda.determineSequentialAgenda(this.chainedProperties.getProperty(SequentialAgendaOption.PROPERTY_NAME,"sequential")));
  setSequential(Boolean.valueOf(this.chainedProperties.getProperty(SequentialOption.PROPERTY_NAME,"false")).booleanValue());
  setMaintainTms(Boolean.valueOf(this.chainedProperties.getProperty(MaintainTMSOption.PROPERTY_NAME,"true")).booleanValue());
  setRemoveIdentities(Boolean.valueOf(this.chainedProperties.getProperty("drools.removeIdentities","false")).booleanValue());
  setShareAlphaNodes(Boolean.valueOf(this.chainedProperties.getProperty(ShareAlphaNodesOption.PROPERTY_NAME,"true")).booleanValue());
  setShareBetaNodes(Boolean.valueOf(this.chainedProperties.getProperty(ShareBetaNodesOption.PROPERTY_NAME,"true")).booleanValue());
  setAlphaNodeHashingThreshold(Integer.parseInt(this.chainedProperties.getProperty(AlphaThresholdOption.PROPERTY_NAME,"3")));
  setCompositeKeyDepth(Integer.parseInt(this.chainedProperties.getProperty(CompositeKeyDepthOption.PROPERTY_NAME,"3")));
  setIndexLeftBetaMemory(Boolean.valueOf(this.chainedProperties.getProperty(IndexLeftBetaMemoryOption.PROPERTY_NAME,"true")).booleanValue());
  setIndexRightBetaMemory(Boolean.valueOf(this.chainedProperties.getProperty(IndexRightBetaMemoryOption.PROPERTY_NAME,"true")).booleanValue());
  setAssertBehaviour(AssertBehaviour.determineAssertBehaviour(this.chainedProperties.getProperty(AssertBehaviorOption.PROPERTY_NAME,"identity")));
  setLogicalOverride(LogicalOverride.determineLogicalOverride(this.chainedProperties.getProperty("drools.logicalOverride","discard")));
  setExecutorService(this.chainedProperties.getProperty("drools.executorService","org.drools.concurrent.DefaultExecutorService"));
  setConsequenceExceptionHandler(this.chainedProperties.getProperty(ConsequenceExceptionHandlerOption.PROPERTY_NAME,"org.drools.runtime.rule.impl.DefaultConsequenceExceptionHandler"));
  setRuleBaseUpdateHandler(this.chainedProperties.getProperty("drools.ruleBaseUpdateHandler",""));
  setConflictResolver(RuleBaseConfiguration.determineConflictResolver(this.chainedProperties.getProperty("drools.conflictResolver","org.drools.conflict.DepthConflictResolver")));
  setAdvancedProcessRuleIntegration(Boolean.valueOf(this.chainedProperties.getProperty("drools.advancedProcessRuleIntegration","false")).booleanValue());
  setMultithreadEvaluation(Boolean.valueOf(this.chainedProperties.getProperty(MultithreadEvaluationOption.PROPERTY_NAME,"false")).booleanValue());
  setMaxThreads(Integer.parseInt(this.chainedProperties.getProperty(MaxThreadsOption.PROPERTY_NAME,"3")));
  setEventProcessingMode(EventProcessingOption.determineEventProcessingMode(this.chainedProperties.getProperty(EventProcessingOption.PROPERTY_NAME,"cloud")));
  setMBeansEnabled(MBeansOption.isEnabled(this.chainedProperties.getProperty(MBeansOption.PROPERTY_NAME,"disabled")));
}
