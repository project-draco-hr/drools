{
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase(RuleBase.LEAPS);
  final ArrayList alphas=new ArrayList();
  ColumnConstraints columnConstraints;
  AlphaNodeFieldConstraint constraint;
  final ClassObjectType contextType=new ClassObjectType(Context.class);
  final Column testColumn=new Column(0,contextType,"state");
  constraint=getLiteralConstraint(testColumn,"state",new Integer(Context.START_UP),this.integerEqualEvaluator);
  alphas.add(constraint);
  testColumn.addConstraint(constraint);
  constraint=getLiteralConstraint(testColumn,"state",new Integer(-999999),this.integerNotEqualEvaluator);
  alphas.add(constraint);
  testColumn.addConstraint(constraint);
  columnConstraints=new ColumnConstraints(testColumn,alphas,null);
  final LeapsTuple tuple=new LeapsTuple(new LeapsFactHandle[0],null,null);
  assertTrue(columnConstraints.isAllowed(new LeapsFactHandle(23,new Context(Context.START_UP)),tuple,ruleBase.newWorkingMemory()));
}
