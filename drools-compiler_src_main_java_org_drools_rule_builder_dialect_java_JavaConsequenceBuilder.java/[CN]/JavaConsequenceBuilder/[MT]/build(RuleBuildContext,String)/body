{
  context.getBuildStack().push(context.getRule().getLhs());
  final String className=consequenceName + "Consequence";
  Map<String,Declaration> decls=context.getDeclarationResolver().getDeclarations(context.getRule());
  JavaAnalysisResult analysis=createJavaAnalysisResult(context,consequenceName,decls);
  if (analysis == null) {
    return;
  }
  String fixedConsequence=fixBlockDescr(context,analysis,decls);
  if (fixedConsequence == null) {
    return;
  }
  fixedConsequence=KnowledgeHelperFixer.fix(fixedConsequence);
  Map<String,Object> map=createConsequenceContext(context,consequenceName,className,fixedConsequence,decls,analysis.getBoundIdentifiers());
  generateTemplates("consequenceMethod","consequenceInvoker",context,className,map,context.getRule(),context.getRuleDescr());
  context.getBuildStack().pop();
}
