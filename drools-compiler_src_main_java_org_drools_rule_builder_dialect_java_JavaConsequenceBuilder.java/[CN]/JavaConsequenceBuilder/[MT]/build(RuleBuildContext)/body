{
  context.getBuildStack().push(context.getRule().getLhs());
  final String className="consequence";
  final RuleDescr ruleDescr=context.getRuleDescr();
  Dialect.AnalysisResult analysis=context.getDialect().analyzeBlock(context,ruleDescr,(String)ruleDescr.getConsequence(),new Set[]{context.getDeclarationResolver().getDeclarations(context.getRule()).keySet(),context.getPkg().getGlobals().keySet()});
  if (analysis == null) {
    return;
  }
  String fixedConsequence=this.fixModifyBlocks(context,(JavaAnalysisResult)analysis,(String)ruleDescr.getConsequence());
  if (fixedConsequence == null) {
    return;
  }
  fixedConsequence=((JavaDialect)context.getDialect()).getKnowledgeHelperFixer().fix(fixedConsequence);
  final List[] usedIdentifiers=analysis.getBoundIdentifiers();
  final Declaration[] declarations=new Declaration[usedIdentifiers[0].size()];
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    declarations[i]=context.getDeclarationResolver().getDeclaration(context.getRule(),(String)usedIdentifiers[0].get(i));
  }
  final Map map=createVariableContext(className,null,context,declarations,null,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]));
  map.put("text",fixedConsequence);
  final List list=Arrays.asList(context.getRule().getDeclarations());
  final Integer[] indexes=new Integer[declarations.length];
  final Boolean[] notPatterns=new Boolean[declarations.length];
  for (int i=0, length=declarations.length; i < length; i++) {
    indexes[i]=new Integer(list.indexOf(declarations[i]));
    notPatterns[i]=(declarations[i].getExtractor() instanceof PatternExtractor) ? new Boolean(false) : new Boolean(true);
    if ((indexes[i]).intValue() == -1) {
      context.getErrors().add(new DescrBuildError(context.getParentDescr(),ruleDescr,null,"Internal Error : Unable to find declaration in list while generating the consequence invoker"));
    }
  }
  map.put("indexes",indexes);
  map.put("notPatterns",notPatterns);
  generatTemplates("consequenceMethod","consequenceInvoker",context,className,map,context.getRule(),ruleDescr);
  context.getBuildStack().pop();
}
