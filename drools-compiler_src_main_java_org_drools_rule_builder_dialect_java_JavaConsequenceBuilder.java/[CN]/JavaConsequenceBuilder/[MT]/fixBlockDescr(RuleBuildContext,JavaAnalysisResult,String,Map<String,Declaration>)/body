{
  MVELDialect mvel=(MVELDialect)context.getDialect("mvel");
  List<JavaBlockDescr> blocks=analysis.getBlockDescrs();
  Collections.sort(blocks,new Comparator<JavaBlockDescr>(){
    public int compare(    JavaBlockDescr o1,    JavaBlockDescr o2){
      return o1.getStart() - o2.getStart();
    }
  }
);
  StringBuilder consequence=new StringBuilder();
  int lastAdded=0;
  boolean modifyExpr=true;
  for (  JavaBlockDescr block : blocks) {
    if (block.getType() != BlockType.TRY) {
      continue;
    }
    if (block.getType() == BlockType.TRY) {
      consequence.append(originalCode.substring(lastAdded,block.getStart() - 1));
      JavaTryBlockDescr tryDescr=(JavaTryBlockDescr)block;
      if (tryDescr.getFinal() != null) {
        lastAdded=tryDescr.getFinal().getEnd();
      }
 else {
        lastAdded=tryDescr.getCatches().get(tryDescr.getCatches().size() - 1).getEnd();
      }
    }
switch (block.getType()) {
case TRY:
      rewriteTryDescr(context,originalCode,consequence,(JavaTryBlockDescr)block,decls);
    break;
default :
}
}
consequence.append(originalCode.substring(lastAdded));
originalCode=consequence.toString();
consequence=new StringBuilder();
lastAdded=0;
MacroProcessor macroProcessor=new MacroProcessor();
Map macros=new HashMap(MVELConsequenceBuilder.macros);
macros.put("modify",new Macro(){
public String doMacro(){
  return "with  ";
}
}
);
macroProcessor.setMacros(macros);
String mvelCode=macroProcessor.parse(originalCode);
Map<String,Class<?>> variables=context.getDeclarationResolver().getDeclarationClasses(decls);
MVELAnalysisResult mvelAnalysis=null;
try {
mvelAnalysis=(MVELAnalysisResult)mvel.analyzeBlock(context,context.getRuleDescr(),mvel.getInterceptors(),mvelCode,new BoundIdentifiers(variables,context.getPackageBuilder().getGlobals(),KnowledgeHelper.class),null);
}
 catch (Exception e) {
}
for (JavaBlockDescr block : blocks) {
if (block.getType() == BlockType.TRY) {
  continue;
}
consequence.append(originalCode.substring(lastAdded,block.getStart() - 1));
lastAdded=block.getEnd();
switch (block.getType()) {
case MODIFY:
case UPDATE:
case RETRACT:
  modifyExpr=rewriteDescr(context,mvelAnalysis,originalCode,mvel,consequence,(JavaBlockDescr)block,decls);
break;
case ENTRY:
case EXIT:
case CHANNEL:
rewriteInterfacePoint(context,originalCode,consequence,(JavaInterfacePointsDescr)block);
break;
}
}
analysis.setModifyExpr(modifyExpr);
consequence.append(originalCode.substring(lastAdded));
return consequence.toString();
}
