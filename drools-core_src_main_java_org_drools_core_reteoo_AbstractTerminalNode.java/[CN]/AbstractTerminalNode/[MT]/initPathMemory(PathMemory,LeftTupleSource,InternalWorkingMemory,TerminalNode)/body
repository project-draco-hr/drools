{
  int counter=1;
  long allLinkedTestMask=0;
  LeftTupleSource tupleSource=pmem.getPathEndNode().getLeftTupleSource();
  if (SegmentUtilities.isRootNode(pmem.getPathEndNode(),removingTN)) {
    counter++;
  }
  ConditionalBranchNode cen=getConditionalBranchNode(tupleSource);
  boolean updateBitInNewSegment=true;
  boolean updateAllLinkedTest=cen == null;
  boolean subnetworkBoundaryCrossed=false;
  while (tupleSource.getType() != NodeTypeEnums.LeftInputAdapterNode) {
    if (!subnetworkBoundaryCrossed && tupleSource.getType() == NodeTypeEnums.ConditionalBranchNode) {
      updateAllLinkedTest=true;
    }
    if (updateAllLinkedTest && updateBitInNewSegment && NodeTypeEnums.isBetaNode(tupleSource)&& NodeTypeEnums.AccumulateNode != tupleSource.getType()) {
      BetaNode bn=(BetaNode)tupleSource;
      if (bn.isRightInputIsRiaNode()) {
        updateBitInNewSegment=false;
        RiaNodeMemory rnmem=(RiaNodeMemory)wm.getNodeMemory((MemoryFactory)bn.getRightInput());
        if (rnmem.getRiaPathMemory().getAllLinkedMaskTest() != 0) {
          allLinkedTestMask=allLinkedTestMask | 1;
        }
      }
 else       if (NodeTypeEnums.NotNode != bn.getType() || ((NotNode)bn).isEmptyBetaConstraints()) {
        updateBitInNewSegment=false;
        allLinkedTestMask=allLinkedTestMask | 1;
      }
    }
    if (SegmentUtilities.isRootNode(tupleSource,removingTN)) {
      updateBitInNewSegment=true;
      allLinkedTestMask=allLinkedTestMask << 1;
      counter++;
    }
    tupleSource=tupleSource.getLeftTupleSource();
    if (tupleSource == startTupleSource) {
      subnetworkBoundaryCrossed=true;
      updateAllLinkedTest=false;
    }
  }
  if (!subnetworkBoundaryCrossed) {
    allLinkedTestMask=allLinkedTestMask | 1;
  }
  pmem.setAllLinkedMaskTest(allLinkedTestMask);
  pmem.setSegmentMemories(new SegmentMemory[counter]);
}
