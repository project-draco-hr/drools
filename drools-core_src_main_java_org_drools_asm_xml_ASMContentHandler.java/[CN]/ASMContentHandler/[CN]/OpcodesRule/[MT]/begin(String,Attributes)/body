{
  Opcode o=((Opcode)OPCODES.get(element));
  if (o == null)   return;
switch (o.type) {
case OpcodeGroup.INSN:
    getCodeVisitor().visitInsn(o.opcode);
  break;
case OpcodeGroup.INSN_FIELD:
getCodeVisitor().visitFieldInsn(o.opcode,attrs.getValue("owner"),attrs.getValue("name"),attrs.getValue("desc"));
break;
case OpcodeGroup.INSN_INT:
getCodeVisitor().visitIntInsn(o.opcode,Integer.parseInt(attrs.getValue("value")));
break;
case OpcodeGroup.INSN_JUMP:
getCodeVisitor().visitJumpInsn(o.opcode,getLabel(attrs.getValue("label")));
break;
case OpcodeGroup.INSN_METHOD:
getCodeVisitor().visitMethodInsn(o.opcode,attrs.getValue("owner"),attrs.getValue("name"),attrs.getValue("desc"));
break;
case OpcodeGroup.INSN_TYPE:
getCodeVisitor().visitTypeInsn(o.opcode,attrs.getValue("desc"));
break;
case OpcodeGroup.INSN_VAR:
getCodeVisitor().visitVarInsn(o.opcode,Integer.parseInt(attrs.getValue("var")));
break;
case OpcodeGroup.INSN_IINC:
getCodeVisitor().visitIincInsn(Integer.parseInt(attrs.getValue("var")),Integer.parseInt(attrs.getValue("inc")));
break;
case OpcodeGroup.INSN_LDC:
getCodeVisitor().visitLdcInsn(getValue(attrs.getValue("desc"),attrs.getValue("cst")));
break;
case OpcodeGroup.INSN_MULTIANEWARRAY:
getCodeVisitor().visitMultiANewArrayInsn(attrs.getValue("desc"),Integer.parseInt(attrs.getValue("dims")));
break;
default :
throw new RuntimeException("Invalid element: " + element + " at "+ match);
}
}
