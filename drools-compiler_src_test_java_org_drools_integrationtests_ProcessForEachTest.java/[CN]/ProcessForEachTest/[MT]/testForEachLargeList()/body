{
  PackageBuilder builder=new PackageBuilder();
  Reader source=new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<process xmlns=\"http://drools.org/drools-5.0/process\"\n" + "         xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\"\n"+ "         xs:schemaLocation=\"http://drools.org/drools-5.0/process drools-processes-5.0.xsd\"\n"+ "         type=\"RuleFlow\" name=\"ForEach\" id=\"org.drools.ForEach\" package-name=\"org.drools\" >\n"+ "  <header>\n"+ "    <variables>\n"+ "      <variable name=\"collection\" >\n"+ "        <type name=\"org.drools.process.core.datatype.impl.type.ObjectDataType\" className=\"java.util.List\" />\n"+ "      </variable>\n"+ "    </variables>\n"+ "  </header>\n"+ "\n"+ "  <nodes>\n"+ "    <forEach id=\"2\" name=\"ForEach\" variableName=\"item\" collectionExpression=\"collection\" >\n"+ "      <nodes>\n"+ "        <workItem id=\"1\" name=\"Log\" >\n"+ "          <work name=\"Log\" >\n"+ "            <parameter name=\"Message\" >\n"+ "              <type name=\"org.drools.process.core.datatype.impl.type.StringDataType\" />\n"+ "            </parameter>\n"+ "          </work>\n"+ "          <mapping type=\"in\" from=\"item\" to=\"Message\" />"+ "        </workItem>\n"+ "      </nodes>\n"+ "      <connections>\n"+ "      </connections>\n"+ "      <in-ports>\n"+ "        <in-port type=\"DROOLS_DEFAULT\" nodeId=\"1\" nodeInType=\"DROOLS_DEFAULT\" />\n"+ "      </in-ports>\n"+ "      <out-ports>\n"+ "        <out-port type=\"DROOLS_DEFAULT\" nodeId=\"1\" nodeOutType=\"DROOLS_DEFAULT\" />\n"+ "      </out-ports>\n"+ "    </forEach>\n"+ "    <start id=\"1\" name=\"Start\" />\n"+ "    <end id=\"3\" name=\"End\" />\n"+ "  </nodes>\n"+ "\n"+ "  <connections>\n"+ "    <connection from=\"1\" to=\"2\" />\n"+ "    <connection from=\"2\" to=\"3\" />\n"+ "  </connections>\n"+ "</process>");
  builder.addRuleFlow(source);
  Package pkg=builder.getPackage();
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(pkg);
  final List<String> myList=new ArrayList<String>();
  WorkingMemory workingMemory=ruleBase.newStatefulSession();
  workingMemory.getWorkItemManager().registerWorkItemHandler("Log",new WorkItemHandler(){
    public void executeWorkItem(    WorkItem workItem,    WorkItemManager manager){
      String message=(String)workItem.getParameter("Message");
      myList.add(message);
      manager.completeWorkItem(workItem.getId(),null);
    }
    public void abortWorkItem(    WorkItem workItem,    WorkItemManager manager){
    }
  }
);
  List<String> collection=new ArrayList<String>();
  for (int i=0; i < 10000; i++) {
    collection.add(i + "");
  }
  Map<String,Object> params=new HashMap<String,Object>();
  params.put("collection",collection);
  ProcessInstance processInstance=(ProcessInstance)workingMemory.startProcess("org.drools.ForEach",params);
  assertEquals(ProcessInstance.STATE_COMPLETED,processInstance.getState());
  assertEquals(10000,myList.size());
}
