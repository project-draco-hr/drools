{
  final GroupElement not=(GroupElement)rce;
  final int currentPatternIndex=context.getCurrentPatternOffset();
  final LeftTupleSource tupleSource=context.getTupleSource();
  final RuleConditionElement child=(RuleConditionElement)not.getChildren().get(0);
  final ReteooComponentBuilder builder=utils.getBuilderFor(child);
  builder.build(context,utils,child);
  if (context.getObjectSource() == null && context.getTupleSource() != null) {
    context.setObjectSource((ObjectSource)utils.attachNode(context,new RightInputAdapterNode(context.getNextId(),context.getTupleSource(),context)));
    context.setTupleSource(tupleSource);
    final TupleStartEqualsConstraint constraint=TupleStartEqualsConstraint.getInstance();
    final List<TupleStartEqualsConstraint> predicates=new ArrayList<TupleStartEqualsConstraint>();
    predicates.add(constraint);
    context.setBetaconstraints(predicates);
  }
  final BetaConstraints betaConstraints=utils.createBetaNodeConstraint(context,context.getBetaconstraints(),false);
  Behavior[] behaviors=createBehaviorArray(context);
  NotNode node=null;
  if (GroupElement.FORALL_NOT.equals(not.getType())) {
    node=new ForallNotNode(context.getNextId(),context.getTupleSource(),context.getObjectSource(),betaConstraints,behaviors,context,not.getForallBaseObjectType());
  }
 else {
    node=new NotNode(context.getNextId(),context.getTupleSource(),context.getObjectSource(),betaConstraints,behaviors,context);
  }
  context.setTupleSource((LeftTupleSource)utils.attachNode(context,node));
  context.setBetaconstraints(null);
  context.setObjectSource(null);
  context.setCurrentPatternOffset(currentPatternIndex);
}
