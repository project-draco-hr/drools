{
  final Rule rule=new Rule("makePathNoAlpha");
  final Column pathColumn=new Column(0,this.pathType);
  setFieldDeclaration(pathColumn,"id","pathId");
  setFieldDeclaration(pathColumn,"guestName","pathGuestName");
  rule.addPattern(pathColumn);
  final Declaration pathIdDeclaration=rule.getDeclaration("pathId");
  final Declaration pathGuestNameDeclaration=rule.getDeclaration("pathGuestName");
  final Column notPathColumn=new Column(3,this.pathType);
  notPathColumn.addConstraint(getBoundVariableConstraint(notPathColumn,"id",pathIdDeclaration,this.integerEqualEvaluator));
  notPathColumn.addConstraint(getBoundVariableConstraint(notPathColumn,"guestName",pathGuestNameDeclaration,this.objectEqualEvaluator));
  final Not not=new Not();
  not.addChild(notPathColumn);
  rule.addPattern(not);
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
