{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  CollectResult result=(CollectResult)memory.getCreatedHandles().get(leftTuple);
  if (result.propagated) {
    this.sink.propagateRetractTuple(leftTuple,result.handle,context,workingMemory);
    result.propagated=false;
  }
  if (this.unwrapRightObject) {
    handle=((ReteTuple)handle.getObject()).getLastHandle();
  }
  if (context.getType() == PropagationContext.ASSERTION) {
    ((Collection)result.handle.getObject()).add(handle.getObject());
  }
 else   if (context.getType() == PropagationContext.RETRACTION) {
    ((Collection)result.handle.getObject()).remove(handle.getObject());
  }
 else   if (context.getType() == PropagationContext.MODIFICATION || context.getType() == PropagationContext.RULE_ADDITION || context.getType() == PropagationContext.RULE_REMOVAL) {
    if (isAssert) {
      ((Collection)result.handle.getObject()).add(handle.getObject());
    }
 else {
      ((Collection)result.handle.getObject()).remove(handle.getObject());
    }
  }
  boolean isAllowed=true;
  for (int i=0, length=this.resultConstraints.length; i < length; i++) {
    if (!this.resultConstraints[i].isAllowed(result.handle,workingMemory)) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    this.resultsBinder.updateFromTuple(workingMemory,leftTuple);
    if (this.resultsBinder.isAllowedCachedLeft(result.handle)) {
      result.propagated=true;
      this.sink.propagateAssertTuple(leftTuple,result.handle,context,workingMemory);
    }
    this.resultsBinder.resetTuple();
  }
}
