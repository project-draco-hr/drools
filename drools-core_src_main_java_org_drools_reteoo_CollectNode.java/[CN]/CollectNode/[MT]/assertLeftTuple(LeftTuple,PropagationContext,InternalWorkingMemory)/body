{
  final CollectMemory memory=(CollectMemory)workingMemory.getNodeMemory(this);
  final Collection result=this.collect.instantiateResultObject();
  final InternalFactHandle resultHandle=workingMemory.getFactHandleFactory().newFactHandle(result,workingMemory.getObjectTypeConfigurationRegistry().getObjectTypeConf(context.getEntryPoint(),result),workingMemory);
  final CollectContext colctx=new CollectContext();
  colctx.resultTuple=new RightTuple(resultHandle,this);
  if (this.tupleMemoryEnabled) {
    memory.betaMemory.getLeftTupleMemory().add(leftTuple);
    memory.betaMemory.getCreatedHandles().put(leftTuple,colctx,false);
  }
  this.constraints.updateFromTuple(memory.betaMemory.getContext(),workingMemory,leftTuple);
  for (RightTuple rightTuple=memory.betaMemory.getRightTupleMemory().getFirst(leftTuple); rightTuple != null; rightTuple=(RightTuple)rightTuple.getNext()) {
    InternalFactHandle handle=rightTuple.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(memory.betaMemory.getContext(),handle)) {
      if (this.unwrapRightObject) {
        handle=((LeftTuple)handle.getObject()).getLastHandle();
      }
      result.add(handle.getObject());
      if (this.tupleMemoryEnabled) {
        new LeftTuple(leftTuple,rightTuple,this,this.tupleMemoryEnabled);
      }
    }
  }
  this.constraints.resetTuple(memory.betaMemory.getContext());
  evaluateResultConstraints(leftTuple,context,workingMemory,memory,colctx);
}
