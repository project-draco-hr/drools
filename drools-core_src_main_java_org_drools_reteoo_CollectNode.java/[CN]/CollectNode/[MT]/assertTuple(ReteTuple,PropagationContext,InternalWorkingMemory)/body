{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  memory.getTupleMemory().add(leftTuple);
  final Collection result=this.collect.instantiateResultObject();
  final org.drools.util.Iterator it=memory.getObjectMemory().iterator(leftTuple);
  this.constraints.updateFromTuple(workingMemory,leftTuple);
  for (FactEntry entry=(FactEntry)it.next(); entry != null; entry=(FactEntry)it.next()) {
    final InternalFactHandle handle=entry.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(handle.getObject())) {
      result.add(handle.getObject());
    }
  }
  boolean isAllowed=true;
  for (int i=0, length=this.resultConstraints.length; i < length; i++) {
    if (!this.resultConstraints[i].isAllowed(result,workingMemory)) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    final InternalFactHandle handle=workingMemory.getFactHandleFactory().newFactHandle(result);
    if (this.resultsBinder.isAllowedCachedLeft(result)) {
      this.sink.propagateAssertTuple(leftTuple,handle,context,workingMemory);
    }
  }
}
