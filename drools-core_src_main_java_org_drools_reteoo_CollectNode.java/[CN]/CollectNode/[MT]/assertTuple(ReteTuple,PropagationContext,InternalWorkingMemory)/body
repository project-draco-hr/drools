{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  memory.add(workingMemory,leftTuple);
  final Collection result=this.collect.instantiateResultObject();
  for (final Iterator it=memory.rightObjectIterator(workingMemory,leftTuple); it.hasNext(); ) {
    final ObjectMatches objectMatches=(ObjectMatches)it.next();
    final InternalFactHandle handle=objectMatches.getFactHandle();
    if (attemptJoin(leftTuple,handle,objectMatches,this.resultsBinder,workingMemory) != null) {
      result.add(handle.getObject());
    }
  }
  boolean isAllowed=true;
  for (int i=0, length=this.resultConstraints.length; i < length; i++) {
    if (!this.resultConstraints[i].isAllowed(result,leftTuple,workingMemory)) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    final InternalFactHandle handle=workingMemory.getFactHandleFactory().newFactHandle(result);
    if (this.resultsBinder.isAllowed(handle,leftTuple,workingMemory)) {
      this.sink.propagateAssertTuple(leftTuple,handle,context,workingMemory);
    }
  }
}
