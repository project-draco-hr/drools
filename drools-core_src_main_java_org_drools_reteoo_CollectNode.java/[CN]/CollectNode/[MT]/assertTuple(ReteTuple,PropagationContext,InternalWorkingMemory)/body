{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  final Collection result=this.collect.instantiateResultObject();
  final InternalFactHandle resultHandle=workingMemory.getFactHandleFactory().newFactHandle(result);
  CollectResult colresult=new CollectResult();
  colresult.handle=resultHandle;
  colresult.propagated=false;
  if (this.tupleMemoryEnabled) {
    memory.getTupleMemory().add(leftTuple);
    memory.getCreatedHandles().put(leftTuple,colresult,false);
  }
  final Iterator it=memory.getFactHandleMemory().iterator(leftTuple);
  this.constraints.updateFromTuple(workingMemory,leftTuple);
  for (FactEntry entry=(FactEntry)it.next(); entry != null; entry=(FactEntry)it.next()) {
    InternalFactHandle handle=entry.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(handle.getObject())) {
      if (this.unwrapRightObject) {
        handle=((ReteTuple)handle.getObject()).getLastHandle();
      }
      result.add(handle.getObject());
    }
  }
  boolean isAllowed=true;
  for (int i=0, length=this.resultConstraints.length; i < length; i++) {
    if (!this.resultConstraints[i].isAllowed(result,workingMemory)) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    this.resultsBinder.updateFromTuple(workingMemory,leftTuple);
    if (this.resultsBinder.isAllowedCachedLeft(result)) {
      colresult.propagated=true;
      this.sink.propagateAssertTuple(leftTuple,resultHandle,context,workingMemory);
    }
  }
}
