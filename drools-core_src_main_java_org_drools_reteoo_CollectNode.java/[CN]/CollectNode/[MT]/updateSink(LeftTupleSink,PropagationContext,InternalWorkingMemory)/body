{
  final CollectMemory memory=(CollectMemory)workingMemory.getNodeMemory(this);
  final Iterator tupleIter=memory.betaMemory.getLeftTupleMemory().iterator();
  for (LeftTuple leftTuple=(LeftTuple)tupleIter.next(); leftTuple != null; leftTuple=(LeftTuple)tupleIter.next()) {
    CollectContext colctx=(CollectContext)memory.betaMemory.getCreatedHandles().get(leftTuple);
    if (colctx.propagated) {
      LeftTuple[] matchings=splitList(leftTuple,colctx,true);
      sink.assertLeftTuple(new LeftTuple(leftTuple,colctx.resultTuple,null,null,sink,this.tupleMemoryEnabled),context,workingMemory);
      restoreList(leftTuple,matchings);
    }
  }
}
