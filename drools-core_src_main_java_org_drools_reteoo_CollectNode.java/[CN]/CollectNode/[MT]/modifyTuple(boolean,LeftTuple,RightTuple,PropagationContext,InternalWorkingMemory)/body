{
  final CollectMemory memory=(CollectMemory)workingMemory.getNodeMemory(this);
  RightTuple result=(RightTuple)memory.betaMemory.getCreatedHandles().get(leftTuple);
  if (leftTuple.getBetaChildren() != null) {
    this.sink.propagateRetractLeftTuple(leftTuple,context,workingMemory);
  }
  InternalFactHandle handle=rightTuple.getFactHandle();
  if (this.unwrapRightObject) {
    handle=((LeftTuple)handle.getObject()).getLastHandle();
  }
  if (context.getType() == PropagationContext.ASSERTION) {
    ((Collection)result.getFactHandle().getObject()).add(handle.getObject());
  }
 else   if (context.getType() == PropagationContext.RETRACTION) {
    ((Collection)result.getFactHandle().getObject()).remove(handle.getObject());
    rightTuple.setBetaChildren(leftTuple.getRightParentNext());
  }
 else   if (context.getType() == PropagationContext.MODIFICATION || context.getType() == PropagationContext.RULE_ADDITION || context.getType() == PropagationContext.RULE_REMOVAL) {
    if (isAssert) {
      ((Collection)result.getFactHandle().getObject()).add(handle.getObject());
    }
 else {
      ((Collection)result.getFactHandle().getObject()).remove(handle.getObject());
    }
  }
  boolean isAllowed=true;
  for (int i=0, length=this.resultConstraints.length; i < length; i++) {
    if (!this.resultConstraints[i].isAllowed(result.getFactHandle(),workingMemory,memory.alphaContexts[i])) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    this.resultsBinder.updateFromTuple(memory.resultsContext,workingMemory,leftTuple);
    if (this.resultsBinder.isAllowedCachedLeft(memory.resultsContext,result.getFactHandle())) {
      this.sink.propagateAssertLeftTuple(leftTuple,result,context,workingMemory);
    }
    this.resultsBinder.resetTuple(memory.resultsContext);
  }
}
