{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Rules.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Find redundant Rules, strong redundancy"));
  Collection<Object> data=new ArrayList<Object>();
  String ruleName1="Rule 1";
  String ruleName2="Rule 2";
  AnalyticsRule rule1=new AnalyticsRule();
  rule1.setRuleName(ruleName1);
  AnalyticsRule rule2=new AnalyticsRule();
  rule2.setRuleName(ruleName2);
  TextConsequence c1=new TextConsequence();
  c1.setRuleName(ruleName1);
  TextConsequence c2=new TextConsequence();
  c2.setRuleName(ruleName2);
  Redundancy r1=new Redundancy(rule1,rule2);
  Redundancy r2=new Redundancy(c1,c2);
  data.add(rule1);
  data.add(rule2);
  data.add(c1);
  data.add(c2);
  data.add(r1);
  data.add(r2);
  AnalyticsResult result=AnalyticsResultFactory.createAnalyticsResult();
  session.setGlobal("result",result);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<String,Set<String>> map=createRedundancyMap(sessionResult.iterateObjects());
  assertTrue(TestBase.mapContains(map,ruleName1,ruleName2) ^ TestBase.mapContains(map,ruleName2,ruleName1));
  if (!map.isEmpty()) {
    fail("More redundancies than was expected.");
  }
}
