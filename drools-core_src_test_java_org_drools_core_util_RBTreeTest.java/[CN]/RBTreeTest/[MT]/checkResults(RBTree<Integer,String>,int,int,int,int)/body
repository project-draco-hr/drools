{
  FastIterator it=tree.range(start,true,end,true);
  Entry entry=null;
  int i=0;
  List<Integer> actual=new ArrayList<Integer>();
  System.out.println(start + ":" + end+ ":"+ (((end - start) / increment) + 1));
  while ((entry=it.next(null)) != null) {
    Node<Integer,Integer> node=(Node<Integer,Integer>)entry;
    if (actual.contains(node.key)) {
      fail("duplicate entry:" + node.key);
    }
    actual.add(node.key);
    i++;
    if (i > range) {
      fail("could not find end");
    }
  }
  while (start % increment != 0) {
    start++;
  }
  while (end % increment != 0) {
    end--;
  }
  if (start > end) {
    end=start;
  }
  assertEquals(((end - start) / increment) + 1,actual.size());
  List<Integer> expected=new ArrayList<Integer>();
  for (int j=start; j <= end; j=j + increment) {
    expected.add(j);
  }
  Collections.sort(expected);
  Collections.sort(actual);
  assertEquals(expected,actual);
}
