{
  final List<AccumulateFunctionCallDescr> funcCalls=accumDescr.getFunctions();
  final Declaration[] sourceDeclArr=source.getOuterDeclarations().values().toArray(new Declaration[0]);
  Arrays.sort(sourceDeclArr,RuleTerminalNode.SortDeclarations.instance);
  Accumulator[] accumulators=new Accumulator[funcCalls.size()];
  Set<Declaration> requiredDecl=new HashSet<Declaration>();
  InternalReadAccessor arrayReader=new SelfReferenceClassFieldReader(Object[].class,"this");
  int index=0;
  Pattern pattern=(Pattern)context.getBuildStack().peek();
  for (  AccumulateFunctionCallDescr fc : funcCalls) {
    AccumulateFunction function=context.getConfiguration().getAccumulateFunction(fc.getFunction());
    if (function == null) {
      context.addError(new DescrBuildError(accumDescr,context.getRuleDescr(),null,"Unknown accumulate function: '" + fc.getFunction() + "' on rule '"+ context.getRuleDescr().getName()+ "'. All accumulate functions must be registered before building a resource."));
      return null;
    }
    if (fc.getBind() != null) {
      if (pattern.getDeclaration(fc.getBind()) != null) {
        context.addError(new DescrBuildError(context.getParentDescr(),accumDescr,null,"Duplicate declaration for variable '" + fc.getBind() + "' in the rule '"+ context.getRule().getName()+ "'"));
      }
 else {
        createResultBind(pattern,index,arrayReader,fc,function);
      }
    }
    final JavaAnalysisResult analysis=(JavaAnalysisResult)context.getDialect().analyzeBlock(context,accumDescr,fc.getParams().length > 0 ? fc.getParams()[0] : "\"\"",new BoundIdentifiers(declCls,context.getPackageBuilder().getGlobals()));
    final BoundIdentifiers usedIdentifiers=analysis.getBoundIdentifiers();
    final Declaration[] previousDeclarations=collectRequiredDeclarations(declsInScope,requiredDecl,usedIdentifiers);
    accumulators[index++]=generateFunctionCallCodeTemplate(context,accumDescr,sourceDeclArr,fc,function,usedIdentifiers,previousDeclarations,readLocalsFromTuple);
  }
  return new Accumulate(source,requiredDecl.toArray(new Declaration[requiredDecl.size()]),accumulators,accumDescr.isMultiFunction());
}
