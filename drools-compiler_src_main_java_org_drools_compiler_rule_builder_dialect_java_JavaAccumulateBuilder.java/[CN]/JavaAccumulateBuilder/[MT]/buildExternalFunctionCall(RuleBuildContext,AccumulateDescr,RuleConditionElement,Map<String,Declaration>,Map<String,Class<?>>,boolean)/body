{
  final List<AccumulateFunctionCallDescr> funcCalls=accumDescr.getFunctions();
  final Declaration[] sourceDeclArr=source.getOuterDeclarations().values().toArray(new Declaration[source.getOuterDeclarations().size()]);
  Arrays.sort(sourceDeclArr,RuleTerminalNode.SortDeclarations.instance);
  Set<Declaration> requiredDecl=new HashSet<Declaration>();
  Pattern pattern=(Pattern)context.getBuildStack().peek();
  if (accumDescr.isMultiFunction()) {
    Accumulator[] accumulators=new Accumulator[funcCalls.size()];
    InternalReadAccessor reader=new SelfReferenceClassFieldReader(Object[].class,"this");
    int index=0;
    for (    AccumulateFunctionCallDescr fc : funcCalls) {
      AccumulateFunction function=getAccumulateFunction(context,accumDescr,fc);
      if (function == null) {
        return null;
      }
      bindReaderToDeclaration(context,accumDescr,pattern,fc,new ArrayElementReader(reader,index,function.getResultType()),function.getResultType(),index);
      accumulators[index++]=buildAccumulator(context,accumDescr,declsInScope,declCls,readLocalsFromTuple,sourceDeclArr,requiredDecl,fc,function);
    }
    return new MultiAccumulate(source,requiredDecl.toArray(new Declaration[requiredDecl.size()]),accumulators);
  }
 else {
    AccumulateFunctionCallDescr fc=accumDescr.getFunctions().get(0);
    AccumulateFunction function=getAccumulateFunction(context,accumDescr,fc);
    if (function == null) {
      return null;
    }
    bindReaderToDeclaration(context,accumDescr,pattern,fc,new SelfReferenceClassFieldReader(function.getResultType(),"this"),function.getResultType(),-1);
    Accumulator accumulator=buildAccumulator(context,accumDescr,declsInScope,declCls,readLocalsFromTuple,sourceDeclArr,requiredDecl,fc,function);
    return new SingleAccumulate(source,requiredDecl.toArray(new Declaration[requiredDecl.size()]),accumulator);
  }
}
