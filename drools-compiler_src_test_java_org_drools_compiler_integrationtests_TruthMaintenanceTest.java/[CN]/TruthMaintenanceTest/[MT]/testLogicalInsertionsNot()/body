{
  KieBase kbase=loadKnowledgeBase("test_LogicalInsertionsNot.drl");
  KieSession ksession=kbase.newKieSession();
  final Person a=new Person("a");
  final Cheese cheese=new Cheese("brie",1);
  ksession.setGlobal("cheese",cheese);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  Collection list=ksession.getObjects();
  assertEquals("i was not asserted by not a => i.",1,list.size());
  assertEquals("i was not asserted by not a => i.",cheese,list.iterator().next());
  FactHandle h=ksession.insert(a);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  list=ksession.getObjects();
  assertEquals("a was not asserted or i not deleted.",1,list.size());
  assertEquals("a was asserted.",a,list.iterator().next());
  assertFalse("i was not rectracted.",list.contains(cheese));
  assertEquals("agenda should be empty.",0,((InternalAgenda)((StatefulKnowledgeSessionImpl)ksession).getAgenda()).agendaSize());
  h=getFactHandle(h,ksession);
  ksession.retract(h);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  list=ksession.getObjects();
  assertEquals("i was not asserted by not a => i.",1,list.size());
  assertEquals("i was not asserted by not a => i.",cheese,list.iterator().next());
}
