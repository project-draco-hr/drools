{
  KieBase kbase=loadKnowledgeBase("test_LogicalInsertionsUpdateEqual.drl");
  KieSession ksession=kbase.newKieSession();
  final Person p=new Person("person");
  p.setAge(2);
  FactHandle h=ksession.insert(p);
  assertEquals(1,ksession.getObjects().size());
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  assertEquals(2,ksession.getObjects().size());
  Collection l=ksession.getObjects(new ClassObjectFilter(CheeseEqual.class));
  assertEquals(1,l.size());
  assertEquals(3,((CheeseEqual)l.iterator().next()).getPrice());
  h=getFactHandle(h,ksession);
  ksession.retract(h);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  Collection list=ksession.getObjects();
  assertEquals(1,list.size());
  assertEquals(new CheeseEqual("person",3),list.iterator().next());
  FactHandle fh=ksession.getFactHandle(list.iterator().next());
  ksession.retract(fh);
  list=ksession.getObjects();
  assertEquals(0,list.size());
  TruthMaintenanceSystem tms=((NamedEntryPoint)ksession.getEntryPoint(EntryPointId.DEFAULT.getEntryPointId())).getTruthMaintenanceSystem();
  final java.lang.reflect.Field field=tms.getClass().getDeclaredField("equalityKeyMap");
  field.setAccessible(true);
  final ObjectHashMap m=(ObjectHashMap)field.get(tms);
  field.setAccessible(false);
  assertEquals("assertMap should be empty",0,m.size());
}
