{
  KieBase kbase=loadKnowledgeBase("test_LogicalInsertionWithExists.drl");
  KieSession ksession=kbase.newKieSession();
  final Person p1=new Person("p1","stilton",20);
  p1.setStatus("europe");
  FactHandle c1FactHandle=ksession.insert(p1);
  final Person p2=new Person("p2","stilton",30);
  p2.setStatus("europe");
  FactHandle c2FactHandle=ksession.insert(p2);
  final Person p3=new Person("p3","stilton",40);
  p3.setStatus("europe");
  FactHandle c3FactHandle=ksession.insert(p3);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  Collection cheeseList=ksession.getObjects(new ClassObjectFilter(Cheese.class));
  assertEquals(2,cheeseList.size());
  p3.setStatus("america");
  c3FactHandle=getFactHandle(c3FactHandle,ksession);
  ksession.update(c3FactHandle,p3);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  cheeseList=ksession.getObjects(new ClassObjectFilter(Cheese.class));
  assertEquals(1,cheeseList.size());
  p2.setStatus("america");
  c2FactHandle=getFactHandle(c2FactHandle,ksession);
  ksession.update(c2FactHandle,p2);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  cheeseList=ksession.getObjects(new ClassObjectFilter(Cheese.class));
  assertEquals(1,cheeseList.size());
  p1.setStatus("america");
  c1FactHandle=getFactHandle(c1FactHandle,ksession);
  ksession.update(c1FactHandle,p1);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  cheeseList=ksession.getObjects(new ClassObjectFilter(Cheese.class));
  assertEquals(2,cheeseList.size());
  p2.setStatus("europe");
  c2FactHandle=getFactHandle(c2FactHandle,ksession);
  ksession.update(c2FactHandle,p2);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  cheeseList=ksession.getObjects(new ClassObjectFilter(Cheese.class));
  assertEquals(1,cheeseList.size());
  p1.setStatus("europe");
  c1FactHandle=getFactHandle(c1FactHandle,ksession);
  ksession.update(c1FactHandle,p1);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  cheeseList=ksession.getObjects(new ClassObjectFilter(Cheese.class));
  assertEquals(1,cheeseList.size());
  p3.setStatus("europe");
  c3FactHandle=getFactHandle(c3FactHandle,ksession);
  ksession.update(c3FactHandle,p3);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true);
  cheeseList=ksession.getObjects(new ClassObjectFilter(Cheese.class));
  assertEquals(2,cheeseList.size());
}
