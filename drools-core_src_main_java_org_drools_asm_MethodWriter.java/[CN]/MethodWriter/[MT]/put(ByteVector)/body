{
  out.putShort(this.access).putShort(this.name).putShort(this.desc);
  if (this.classReaderOffset != 0) {
    out.putByteArray(this.cw.cr.b,this.classReaderOffset,this.classReaderLength);
    return;
  }
  int attributeCount=0;
  if (this.code.length > 0) {
    ++attributeCount;
  }
  if (this.exceptionCount > 0) {
    ++attributeCount;
  }
  if ((this.access & Opcodes.ACC_SYNTHETIC) != 0 && (this.cw.version & 0xffff) < Opcodes.V1_5) {
    ++attributeCount;
  }
  if ((this.access & Opcodes.ACC_DEPRECATED) != 0) {
    ++attributeCount;
  }
  if (this.cw.version == Opcodes.V1_4) {
    if ((this.access & Opcodes.ACC_VARARGS) != 0) {
      ++attributeCount;
    }
    if ((this.access & Opcodes.ACC_BRIDGE) != 0) {
      ++attributeCount;
    }
  }
  if (this.signature != null) {
    ++attributeCount;
  }
  if (this.annd != null) {
    ++attributeCount;
  }
  if (this.anns != null) {
    ++attributeCount;
  }
  if (this.ianns != null) {
    ++attributeCount;
  }
  if (this.panns != null) {
    ++attributeCount;
  }
  if (this.ipanns != null) {
    ++attributeCount;
  }
  if (this.attrs != null) {
    attributeCount+=this.attrs.getCount();
  }
  out.putShort(attributeCount);
  if (this.code.length > 0) {
    int size=12 + this.code.length + 8 * this.catchCount;
    if (this.localVar != null) {
      size+=8 + this.localVar.length;
    }
    if (this.localVarType != null) {
      size+=8 + this.localVarType.length;
    }
    if (this.lineNumber != null) {
      size+=8 + this.lineNumber.length;
    }
    if (this.cattrs != null) {
      size+=this.cattrs.getSize(this.cw,this.code.data,this.code.length,this.maxStack,this.maxLocals);
    }
    out.putShort(this.cw.newUTF8("Code")).putInt(size);
    out.putShort(this.maxStack).putShort(this.maxLocals);
    out.putInt(this.code.length).putByteArray(this.code.data,0,this.code.length);
    out.putShort(this.catchCount);
    if (this.catchCount > 0) {
      Handler h=this.catchTable;
      while (h != null) {
        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);
        h=h.next;
      }
    }
    attributeCount=0;
    if (this.localVar != null) {
      ++attributeCount;
    }
    if (this.localVarType != null) {
      ++attributeCount;
    }
    if (this.lineNumber != null) {
      ++attributeCount;
    }
    if (this.cattrs != null) {
      attributeCount+=this.cattrs.getCount();
    }
    out.putShort(attributeCount);
    if (this.localVar != null) {
      out.putShort(this.cw.newUTF8("LocalVariableTable"));
      out.putInt(this.localVar.length + 2).putShort(this.localVarCount);
      out.putByteArray(this.localVar.data,0,this.localVar.length);
    }
    if (this.localVarType != null) {
      out.putShort(this.cw.newUTF8("LocalVariableTypeTable"));
      out.putInt(this.localVarType.length + 2).putShort(this.localVarTypeCount);
      out.putByteArray(this.localVarType.data,0,this.localVarType.length);
    }
    if (this.lineNumber != null) {
      out.putShort(this.cw.newUTF8("LineNumberTable"));
      out.putInt(this.lineNumber.length + 2).putShort(this.lineNumberCount);
      out.putByteArray(this.lineNumber.data,0,this.lineNumber.length);
    }
    if (this.cattrs != null) {
      this.cattrs.put(this.cw,this.code.data,this.code.length,this.maxLocals,this.maxStack,out);
    }
  }
  if (this.exceptionCount > 0) {
    out.putShort(this.cw.newUTF8("Exceptions")).putInt(2 * this.exceptionCount + 2);
    out.putShort(this.exceptionCount);
    for (int i=0; i < this.exceptionCount; ++i) {
      out.putShort(this.exceptions[i]);
    }
  }
  if ((this.access & Opcodes.ACC_SYNTHETIC) != 0 && (this.cw.version & 0xffff) < Opcodes.V1_5) {
    out.putShort(this.cw.newUTF8("Synthetic")).putInt(0);
  }
  if ((this.access & Opcodes.ACC_DEPRECATED) != 0) {
    out.putShort(this.cw.newUTF8("Deprecated")).putInt(0);
  }
  if (this.cw.version == Opcodes.V1_4) {
    if ((this.access & Opcodes.ACC_VARARGS) != 0) {
      out.putShort(this.cw.newUTF8("Varargs")).putInt(0);
    }
    if ((this.access & Opcodes.ACC_BRIDGE) != 0) {
      out.putShort(this.cw.newUTF8("Bridge")).putInt(0);
    }
  }
  if (this.signature != null) {
    out.putShort(this.cw.newUTF8("Signature")).putInt(2).putShort(this.cw.newUTF8(this.signature));
  }
  if (this.annd != null) {
    out.putShort(this.cw.newUTF8("AnnotationDefault"));
    out.putInt(this.annd.length);
    out.putByteArray(this.annd.data,0,this.annd.length);
  }
  if (this.anns != null) {
    out.putShort(this.cw.newUTF8("RuntimeVisibleAnnotations"));
    this.anns.put(out);
  }
  if (this.ianns != null) {
    out.putShort(this.cw.newUTF8("RuntimeInvisibleAnnotations"));
    this.ianns.put(out);
  }
  if (this.panns != null) {
    out.putShort(this.cw.newUTF8("RuntimeVisibleParameterAnnotations"));
    AnnotationWriter.put(this.panns,out);
  }
  if (this.ipanns != null) {
    out.putShort(this.cw.newUTF8("RuntimeInvisibleParameterAnnotations"));
    AnnotationWriter.put(this.ipanns,out);
  }
  if (this.attrs != null) {
    this.attrs.put(this.cw,null,0,-1,-1,out);
  }
}
