{
  if (this.computeMaxs) {
    if (opcode == Opcodes.RET) {
      if (this.currentBlock != null) {
        this.currentBlock.maxStackSize=this.maxStackSize;
        this.currentBlock=null;
      }
    }
 else {
      final int size=this.stackSize + MethodWriter.SIZE[opcode];
      if (size > this.maxStackSize) {
        this.maxStackSize=size;
      }
      this.stackSize=size;
    }
    int n;
    if (opcode == Opcodes.LLOAD || opcode == Opcodes.DLOAD || opcode == Opcodes.LSTORE || opcode == Opcodes.DSTORE) {
      n=var + 2;
    }
 else {
      n=var + 1;
    }
    if (n > this.maxLocals) {
      this.maxLocals=n;
    }
  }
  if (var < 4 && opcode != Opcodes.RET) {
    int opt;
    if (opcode < Opcodes.ISTORE) {
      opt=26 + ((opcode - Opcodes.ILOAD) << 2) + var;
    }
 else {
      opt=59 + ((opcode - Opcodes.ISTORE) << 2) + var;
    }
    this.code.putByte(opt);
  }
 else   if (var >= 256) {
    this.code.putByte(196).put12(opcode,var);
  }
 else {
    this.code.put11(opcode,var);
  }
}
