{
  if (this.classReaderOffset != 0) {
    return 6 + this.classReaderLength;
  }
  if (this.resize) {
    resizeInstructions(new int[0],new int[0],0);
  }
  int size=8;
  if (this.code.length > 0) {
    this.cw.newUTF8("Code");
    size+=18 + this.code.length + 8 * this.catchCount;
    if (this.localVar != null) {
      this.cw.newUTF8("LocalVariableTable");
      size+=8 + this.localVar.length;
    }
    if (this.localVarType != null) {
      this.cw.newUTF8("LocalVariableTypeTable");
      size+=8 + this.localVarType.length;
    }
    if (this.lineNumber != null) {
      this.cw.newUTF8("LineNumberTable");
      size+=8 + this.lineNumber.length;
    }
    if (this.cattrs != null) {
      size+=this.cattrs.getSize(this.cw,this.code.data,this.code.length,this.maxStack,this.maxLocals);
    }
  }
  if (this.exceptionCount > 0) {
    this.cw.newUTF8("Exceptions");
    size+=8 + 2 * this.exceptionCount;
  }
  if ((this.access & Opcodes.ACC_SYNTHETIC) != 0 && (this.cw.version & 0xffff) < Opcodes.V1_5) {
    this.cw.newUTF8("Synthetic");
    size+=6;
  }
  if ((this.access & Opcodes.ACC_DEPRECATED) != 0) {
    this.cw.newUTF8("Deprecated");
    size+=6;
  }
  if (this.cw.version == Opcodes.V1_4) {
    if ((this.access & Opcodes.ACC_VARARGS) != 0) {
      this.cw.newUTF8("Varargs");
      size+=6;
    }
    if ((this.access & Opcodes.ACC_BRIDGE) != 0) {
      this.cw.newUTF8("Bridge");
      size+=6;
    }
  }
  if (this.signature != null) {
    this.cw.newUTF8("Signature");
    this.cw.newUTF8(this.signature);
    size+=8;
  }
  if (this.annd != null) {
    this.cw.newUTF8("AnnotationDefault");
    size+=6 + this.annd.length;
  }
  if (this.anns != null) {
    this.cw.newUTF8("RuntimeVisibleAnnotations");
    size+=8 + this.anns.getSize();
  }
  if (this.ianns != null) {
    this.cw.newUTF8("RuntimeInvisibleAnnotations");
    size+=8 + this.ianns.getSize();
  }
  if (this.panns != null) {
    this.cw.newUTF8("RuntimeVisibleParameterAnnotations");
    size+=7 + 2 * this.panns.length;
    for (int i=this.panns.length - 1; i >= 0; --i) {
      size+=this.panns[i] == null ? 0 : this.panns[i].getSize();
    }
  }
  if (this.ipanns != null) {
    this.cw.newUTF8("RuntimeInvisibleParameterAnnotations");
    size+=7 + 2 * this.ipanns.length;
    for (int i=this.ipanns.length - 1; i >= 0; --i) {
      size+=this.ipanns[i] == null ? 0 : this.ipanns[i].getSize();
    }
  }
  if (this.attrs != null) {
    size+=this.attrs.getSize(this.cw,null,0,-1,-1);
  }
  return size;
}
