{
  this.rowList=new RowList();
  this.rowList.add(0,this.root);
  int curRow=0;
  final Set seenVertices=new HashSet();
  seenVertices.add(this.root);
  while (curRow < this.rowList.getDepth()) {
    final List rowVertices=this.rowList.get(curRow).getVertices();
    for (final Iterator rowVertexIter=rowVertices.iterator(); rowVertexIter.hasNext(); ) {
      final Vertex rowVertex=(Vertex)rowVertexIter.next();
      final Set edges=rowVertex.getOutEdges();
      for (final Iterator edgeIter=edges.iterator(); edgeIter.hasNext(); ) {
        final Edge edge=(Edge)edgeIter.next();
        final Vertex destVertex=edge.getOpposite(rowVertex);
        if (!seenVertices.contains(destVertex)) {
          this.rowList.add(curRow + 1,destVertex);
          seenVertices.add(destVertex);
        }
      }
      seenVertices.add(rowVertex);
    }
    ++curRow;
  }
  this.rowList.optimize();
  this.rowList.dump();
}
