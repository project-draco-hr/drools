{
  this.selectPossibleMatches(workingMemory,tuple);
  Iterator iterator=new Iterator(){
    ObjectMatches current=null;
    ObjectMatches next=null;
    ObjectMatches candidate=(ObjectMatches)memoryMasterList.getFirst();
    public final boolean hasNext(){
      boolean hasnext=false;
      if (next == null) {
        while (candidate != null) {
          if (candidate.getChild().getLinkedList() != noMatchList) {
            if ((innerMemory == null) || (innerMemory.isPossibleMatch((MultiLinkedListNodeWrapper)candidate.getChild().getChild()))) {
              hasnext=true;
              next=candidate;
              candidate=(ObjectMatches)candidate.getNext();
              break;
            }
          }
          candidate=(ObjectMatches)candidate.getNext();
        }
      }
 else {
        hasnext=true;
      }
      return hasnext;
    }
    public final Object next(){
      if (this.next == null) {
        this.hasNext();
      }
      this.current=this.next;
      this.next=null;
      if (this.current == null) {
        throw new NoSuchElementException("No more elements to return");
      }
      return this.current;
    }
    public final void remove(){
      throw new UnsupportedOperationException("Iterator.remove() should not be used to remove right side objects from right memory.");
    }
  }
;
  return iterator;
}
