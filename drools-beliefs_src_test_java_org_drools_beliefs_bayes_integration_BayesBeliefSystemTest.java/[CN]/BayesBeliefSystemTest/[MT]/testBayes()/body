{
  String drl="package org.drools.defeasible; " + "import " + Garden.class.getCanonicalName() + "; \n"+ "import "+ PropertyReference.class.getCanonicalName()+ "; \n"+ "global "+ BayesBeliefFactory.class.getCanonicalName()+ " bsFactory; \n"+ "dialect 'mvel'; \n"+ " "+ "rule rule1 when "+ "        String( this == 'rule1') \n"+ "    g : Garden()"+ "then "+ "    System.out.println(\"rule 1\"); \n"+ "    insertLogical( new PropertyReference(g, 'cloudy'), bsFactory.create( new double[] {1.0,0.0} ) ); \n "+ "end "+ "rule rule2 when "+ "        String( this == 'rule2') \n"+ "    g : Garden()"+ "then "+ "    System.out.println(\"rule2\"); \n"+ "    insertLogical( new PropertyReference(g, 'sprinkler'), bsFactory.create( new double[] {1.0,0.0} ) ); \n "+ "end "+ "rule rule3 when "+ "        String( this == 'rule3') \n"+ "    g : Garden()"+ "then "+ "    System.out.println(\"rule3\"); \n"+ "    insertLogical( new PropertyReference(g, 'sprinkler'), bsFactory.create( new double[] {1.0,0.0} ) ); \n "+ "end "+ "rule rule4 when "+ "        String( this == 'rule4') \n"+ "    g : Garden()"+ "then "+ "    System.out.println(\"rule4\"); \n"+ "    insertLogical( new PropertyReference(g, 'sprinkler'), bsFactory.create( new double[] {0.0,1.0} ) ); \n "+ "end "+ "\n";
  StatefulKnowledgeSessionImpl ksession=(StatefulKnowledgeSessionImpl)getSessionFromString(drl);
  NamedEntryPoint ep=(NamedEntryPoint)ksession.getEntryPoint(EntryPointId.DEFAULT.getEntryPointId());
  BayesBeliefSystem bayesBeliefSystem=new BayesBeliefSystem(ep,ep.getTruthMaintenanceSystem());
  BayesBeliefFactoryImpl bayesBeliefValueFactory=new BayesBeliefFactoryImpl(bayesBeliefSystem);
  ksession.setGlobal("bsFactory",bayesBeliefValueFactory);
  BayesRuntime bayesRuntime=ksession.getKieRuntime(BayesRuntime.class);
  BayesInstance<Garden> instance=bayesRuntime.createInstance(Garden.class);
  assertNotNull(instance);
  assertTrue(instance.isDecided());
  instance.globalUpdate();
  Garden garden=instance.marginalize();
  assertTrue(garden.isWetGrass());
  FactHandle fh=ksession.insert(garden);
  FactHandle fh1=ksession.insert("rule1");
  ksession.fireAllRules();
  assertTrue(instance.isDecided());
  instance.globalUpdate();
  garden=instance.marginalize();
  assertTrue(garden.isWetGrass());
  FactHandle fh2=ksession.insert("rule2");
  ksession.fireAllRules();
  assertTrue(instance.isDecided());
  instance.globalUpdate();
  garden=instance.marginalize();
  assertFalse(garden.isWetGrass());
  FactHandle fh3=ksession.insert("rule3");
  ksession.fireAllRules();
  assertTrue(instance.isDecided());
  instance.globalUpdate();
  garden=instance.marginalize();
  assertFalse(garden.isWetGrass());
  FactHandle fh4=ksession.insert("rule4");
  ksession.fireAllRules();
  assertFalse(instance.isDecided());
  try {
    instance.globalUpdate();
    fail("The BayesFact is undecided, it should throw an exception, as it cannot be updated.");
  }
 catch (  Exception e) {
  }
  ksession.delete(fh4);
  ksession.fireAllRules();
  assertTrue(instance.isDecided());
  instance.globalUpdate();
  garden=instance.marginalize();
  assertFalse(garden.isWetGrass());
  ksession.delete(fh2);
  ksession.fireAllRules();
  instance.globalUpdate();
  garden=instance.marginalize();
  assertFalse(garden.isWetGrass());
  ksession.delete(fh3);
  ksession.fireAllRules();
  instance.globalUpdate();
  garden=instance.marginalize();
  assertTrue(garden.isWetGrass());
}
