{
  this.rule=new RuleImpl("test-rule");
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  pctxFactory=kBase.getConfiguration().getComponentFactory().getPropagationContextFactory();
  this.context=pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null);
  BuildContext buildContext=new BuildContext(kBase,kBase.getReteooBuilder().getIdGenerator());
  StatefulKnowledgeSessionImpl ksession=(StatefulKnowledgeSessionImpl)kBase.newStatefulKnowledgeSession();
  this.tupleSource=new MockTupleSource(4);
  this.objectSource=new MockObjectSource(4);
  this.sink=new MockLeftTupleSink();
  this.accumulator=new MockAccumulator();
  final ObjectType srcObjType=new ClassObjectType(String.class);
  final Pattern sourcePattern=new Pattern(0,srcObjType);
  this.accumulate=new SingleAccumulate(sourcePattern,new Declaration[0],this.accumulator);
  this.node=new AccumulateNode(15,this.tupleSource,this.objectSource,new AlphaNodeFieldConstraint[0],EmptyBetaConstraints.getInstance(),EmptyBetaConstraints.getInstance(),this.accumulate,false,buildContext);
  this.node.addTupleSink(this.sink);
  this.memory=((AccumulateMemory)this.workingMemory.getNodeMemory(this.node)).betaMemory;
  assertEquals(0,this.memory.getLeftTupleMemory().size());
  assertEquals(0,this.memory.getRightTupleMemory().size());
}
