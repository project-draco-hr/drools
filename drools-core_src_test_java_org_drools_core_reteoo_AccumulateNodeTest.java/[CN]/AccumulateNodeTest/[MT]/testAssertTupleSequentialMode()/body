{
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  conf.setPhreakEnabled(false);
  conf.setSequential(true);
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  BuildContext buildContext=new BuildContext(kBase,kBase.getReteooBuilder().getIdGenerator());
  buildContext.setTupleMemoryEnabled(false);
  this.node=new AccumulateNode(15,this.tupleSource,this.objectSource,new AlphaNodeFieldConstraint[0],EmptyBetaConstraints.getInstance(),EmptyBetaConstraints.getInstance(),this.accumulate,false,buildContext);
  this.node.addTupleSink(this.sink);
  StatefulKnowledgeSessionImpl ksession=(StatefulKnowledgeSessionImpl)KnowledgeBaseFactory.newKnowledgeBase(conf).newStatefulKnowledgeSession();
  this.memory=((AccumulateMemory)this.workingMemory.getNodeMemory(this.node)).getBetaMemory();
  final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.getFactHandleFactory().newFactHandle("cheese",null,null,null);
  final DefaultFactHandle f1=(DefaultFactHandle)this.workingMemory.getFactHandleFactory().newFactHandle("other cheese",null,null,null);
  final LeftTupleImpl tuple0=new LeftTupleImpl(f0,null,true);
  this.node.assertObject(f0,this.context,this.workingMemory);
  this.node.assertObject(f1,this.context,this.workingMemory);
  this.node.assertLeftTuple(tuple0,pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,f0),this.workingMemory);
  assertNull(this.memory.getLeftTupleMemory());
  assertEquals(2,this.memory.getRightTupleMemory().size());
  assertEquals("Wrong number of elements in matching objects list ",2,this.accumulator.getMatchingObjects().size());
  final LeftTupleImpl tuple1=new LeftTupleImpl(f1,null,true);
  this.node.assertLeftTuple(tuple1,pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,f1),this.workingMemory);
  assertNull(this.memory.getLeftTupleMemory());
  assertEquals("Wrong number of elements in matching objects list ",2,this.accumulator.getMatchingObjects().size());
  assertEquals("Two tuples should have been propagated",2,this.sink.getAsserted().size());
}
