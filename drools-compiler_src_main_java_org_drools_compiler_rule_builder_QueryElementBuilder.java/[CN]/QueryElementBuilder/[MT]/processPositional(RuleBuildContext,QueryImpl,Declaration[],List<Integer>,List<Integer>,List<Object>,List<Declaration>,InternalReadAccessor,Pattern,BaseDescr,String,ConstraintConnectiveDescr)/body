{
  int position=((ExprConstraintDescr)base).getPosition();
  if (position >= arguments.size()) {
    context.addError(new DescrBuildError(context.getParentDescr(),base,null,"Unable to parse query '" + query.getName() + "', as postion "+ position+ " for expression '"+ expression+ "' does not exist on query size "+ arguments.size()));
    return;
  }
  if (isVariable(expression)) {
    Declaration declr=context.getDeclarationResolver().getDeclaration(query,expression);
    if (declr != null) {
      arguments.set(position,declr);
      declrIndexes.add(position);
      requiredDeclarations.add(declr);
    }
 else {
      arguments.set(position,Variable.v);
      varIndexes.add(position);
      declr=pattern.addDeclaration(expression);
      ArrayElementReader reader=new ArrayElementReader(arrayReader,position,params[position].getExtractor().getExtractToClass());
      declr.setReadAccessor(reader);
    }
  }
 else {
    MVELDumper.MVELDumperContext mvelCtx=new MVELDumper.MVELDumperContext();
    String rewrittenExpr=context.getCompilerFactory().getExpressionProcessor().dump(result,mvelCtx);
    try {
      MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
      ParserConfiguration conf=data.getParserConfiguration();
      conf.setClassLoader(context.getKnowledgeBuilder().getRootClassLoader());
      arguments.set(position,MVELSafeHelper.getEvaluator().executeExpression(MVEL.compileExpression(rewrittenExpr,new ParserContext(conf))));
    }
 catch (    Exception e) {
      context.addError(new DescrBuildError(context.getParentDescr(),base,null,"Unable to compile expression:\n" + rewrittenExpr));
    }
  }
}
