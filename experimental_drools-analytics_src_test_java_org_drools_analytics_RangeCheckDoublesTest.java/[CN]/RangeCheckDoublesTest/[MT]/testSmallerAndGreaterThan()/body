{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("RangeCheckDoubles.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Range check for doubles, smaller and greater than"));
  Collection<? extends Object> data=getTestData(this.getClass().getResourceAsStream("MissingRangesForDoubles.drl"));
  AnalysisResultNormal analysisResult=new AnalysisResultNormal();
  session.setGlobal("result",analysisResult);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Iterator iter=sessionResult.iterateObjects();
  Set<String> rulesThatHadErrors=new HashSet<String>();
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof Gap) {
      rulesThatHadErrors.add(((Gap)o).getRuleName());
    }
  }
  assertTrue(rulesThatHadErrors.remove("Double range 1a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 2a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 3a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 4a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 7a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 7b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 8a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 8b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 9a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 9b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 10a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 10b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 11a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 11b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 12a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 13a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 14a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 15a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 18a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 18b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 19a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 19b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 20a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 20b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 21a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 21b, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 22a, has gap"));
  assertTrue(rulesThatHadErrors.remove("Double range 22b, has gap"));
  if (!rulesThatHadErrors.isEmpty()) {
    for (    String string : rulesThatHadErrors) {
      fail("Rule " + string + " caused an error.");
    }
  }
}
