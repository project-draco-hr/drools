{
  if (SequentialOption.class.equals(option)) {
    return (T)(this.sequential ? SequentialOption.YES : SequentialOption.NO);
  }
 else   if (RemoveIdentitiesOption.class.equals(option)) {
    return (T)(this.removeIdentities ? RemoveIdentitiesOption.YES : RemoveIdentitiesOption.NO);
  }
 else   if (ShareAlphaNodesOption.class.equals(option)) {
    return (T)(this.shareAlphaNodes ? ShareAlphaNodesOption.YES : ShareAlphaNodesOption.NO);
  }
 else   if (ShareBetaNodesOption.class.equals(option)) {
    return (T)(this.shareBetaNodes ? ShareBetaNodesOption.YES : ShareBetaNodesOption.NO);
  }
 else   if (IndexLeftBetaMemoryOption.class.equals(option)) {
    return (T)(this.indexLeftBetaMemory ? IndexLeftBetaMemoryOption.YES : IndexLeftBetaMemoryOption.NO);
  }
 else   if (IndexRightBetaMemoryOption.class.equals(option)) {
    return (T)(this.indexRightBetaMemory ? IndexRightBetaMemoryOption.YES : IndexRightBetaMemoryOption.NO);
  }
 else   if (IndexPrecedenceOption.class.equals(option)) {
    return (T)getIndexPrecedenceOption();
  }
 else   if (EqualityBehaviorOption.class.equals(option)) {
    return (T)((this.assertBehaviour == AssertBehaviour.IDENTITY) ? EqualityBehaviorOption.IDENTITY : EqualityBehaviorOption.EQUALITY);
  }
 else   if (SequentialAgendaOption.class.equals(option)) {
    return (T)((this.sequentialAgenda == SequentialAgenda.SEQUENTIAL) ? SequentialAgendaOption.SEQUENTIAL : SequentialAgendaOption.DYNAMIC);
  }
 else   if (PermGenThresholdOption.class.equals(option)) {
    return (T)PermGenThresholdOption.get(permGenThreshold);
  }
 else   if (AlphaThresholdOption.class.equals(option)) {
    return (T)AlphaThresholdOption.get(alphaNodeHashingThreshold);
  }
 else   if (CompositeKeyDepthOption.class.equals(option)) {
    return (T)CompositeKeyDepthOption.get(compositeKeyDepth);
  }
 else   if (ConsequenceExceptionHandlerOption.class.equals(option)) {
    Class<? extends ConsequenceExceptionHandler> handler;
    try {
      handler=(Class<? extends ConsequenceExceptionHandler>)Class.forName(consequenceExceptionHandler);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeDroolsException("Unable to resolve ConsequenceExceptionHandler class: " + consequenceExceptionHandler,e);
    }
    return (T)ConsequenceExceptionHandlerOption.get(handler);
  }
 else   if (EventProcessingOption.class.equals(option)) {
    return (T)getEventProcessingMode();
  }
 else   if (MaxThreadsOption.class.equals(option)) {
    return (T)MaxThreadsOption.get(getMaxThreads());
  }
 else   if (MultithreadEvaluationOption.class.equals(option)) {
    return (T)(this.multithread ? MultithreadEvaluationOption.YES : MultithreadEvaluationOption.NO);
  }
 else   if (MBeansOption.class.equals(option)) {
    return (T)(this.isMBeansEnabled() ? MBeansOption.ENABLED : MBeansOption.DISABLED);
  }
 else   if (ClassLoaderCacheOption.class.equals(option)) {
    return (T)(this.isClassLoaderCacheEnabled() ? ClassLoaderCacheOption.ENABLED : ClassLoaderCacheOption.DISABLED);
  }
 else   if (PhreakOption.class.equals(option)) {
    return (T)(this.isPhreakEnabled() ? PhreakOption.ENABLED : PhreakOption.DISABLED);
  }
 else   if (DeclarativeAgendaOption.class.equals(option)) {
    return (T)(this.isDeclarativeAgenda() ? DeclarativeAgendaOption.ENABLED : DeclarativeAgendaOption.DISABLED);
  }
  return null;
}
