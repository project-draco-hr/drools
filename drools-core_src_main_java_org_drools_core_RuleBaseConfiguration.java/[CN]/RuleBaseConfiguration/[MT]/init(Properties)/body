{
  this.immutable=false;
  this.chainedProperties=new ChainedProperties("rulebase.conf",this.classLoader,true);
  if (properties != null) {
    this.chainedProperties.addProperties(properties);
  }
  setRemoveIdentities(Boolean.valueOf(this.chainedProperties.getProperty("drools.removeIdentities","false")).booleanValue());
  setShareAlphaNodes(Boolean.valueOf(this.chainedProperties.getProperty(ShareAlphaNodesOption.PROPERTY_NAME,"true")).booleanValue());
  setShareBetaNodes(Boolean.valueOf(this.chainedProperties.getProperty(ShareBetaNodesOption.PROPERTY_NAME,"true")).booleanValue());
  setPermGenThreshold(Integer.parseInt(this.chainedProperties.getProperty(PermGenThresholdOption.PROPERTY_NAME,"" + PermGenThresholdOption.DEFAULT_VALUE)));
  setAlphaNodeHashingThreshold(Integer.parseInt(this.chainedProperties.getProperty(AlphaThresholdOption.PROPERTY_NAME,"3")));
  setCompositeKeyDepth(Integer.parseInt(this.chainedProperties.getProperty(CompositeKeyDepthOption.PROPERTY_NAME,"3")));
  setIndexLeftBetaMemory(Boolean.valueOf(this.chainedProperties.getProperty(IndexLeftBetaMemoryOption.PROPERTY_NAME,"true")).booleanValue());
  setIndexRightBetaMemory(Boolean.valueOf(this.chainedProperties.getProperty(IndexRightBetaMemoryOption.PROPERTY_NAME,"true")).booleanValue());
  setIndexPrecedenceOption(IndexPrecedenceOption.determineIndexPrecedence(this.chainedProperties.getProperty(IndexPrecedenceOption.PROPERTY_NAME,"equality")));
  setAssertBehaviour(AssertBehaviour.determineAssertBehaviour(this.chainedProperties.getProperty(EqualityBehaviorOption.PROPERTY_NAME,"identity")));
  setExecutorService(this.chainedProperties.getProperty("drools.executorService","org.drools.core.concurrent.DefaultExecutorService"));
  setConsequenceExceptionHandler(this.chainedProperties.getProperty(ConsequenceExceptionHandlerOption.PROPERTY_NAME,"org.drools.core.runtime.rule.impl.DefaultConsequenceExceptionHandler"));
  setRuleBaseUpdateHandler(this.chainedProperties.getProperty("drools.ruleBaseUpdateHandler",""));
  setSequentialAgenda(SequentialAgenda.determineSequentialAgenda(this.chainedProperties.getProperty(SequentialAgendaOption.PROPERTY_NAME,"sequential")));
  setSequential(Boolean.valueOf(this.chainedProperties.getProperty(SequentialOption.PROPERTY_NAME,"false")).booleanValue());
  setConflictResolver(determineConflictResolver(this.chainedProperties.getProperty("drools.conflictResolver","org.drools.core.conflict.DepthConflictResolver")));
  setAdvancedProcessRuleIntegration(Boolean.valueOf(this.chainedProperties.getProperty("drools.advancedProcessRuleIntegration","false")).booleanValue());
  setMultithreadEvaluation(Boolean.valueOf(this.chainedProperties.getProperty(MultithreadEvaluationOption.PROPERTY_NAME,"false")).booleanValue());
  setMaxThreads(Integer.parseInt(this.chainedProperties.getProperty(MaxThreadsOption.PROPERTY_NAME,"3")));
  setEventProcessingMode(EventProcessingOption.determineEventProcessingMode(this.chainedProperties.getProperty(EventProcessingOption.PROPERTY_NAME,"cloud")));
  setMBeansEnabled(MBeansOption.isEnabled(this.chainedProperties.getProperty(MBeansOption.PROPERTY_NAME,"disabled")));
  setClassLoaderCacheEnabled(Boolean.valueOf(this.chainedProperties.getProperty(ClassLoaderCacheOption.PROPERTY_NAME,"true")));
  setPhreakEnabled(Boolean.valueOf(this.chainedProperties.getProperty(RuleEngineOption.PROPERTY_NAME,"" + DEFAULT_PHREAK)));
  setDeclarativeAgendaEnabled(Boolean.valueOf(this.chainedProperties.getProperty(DeclarativeAgendaOption.PROPERTY_NAME,"false")));
  this.componentFactory=new KieComponentFactory();
}
