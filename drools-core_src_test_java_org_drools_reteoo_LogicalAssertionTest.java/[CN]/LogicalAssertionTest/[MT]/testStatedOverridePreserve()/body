{
  final Rule rule1=new Rule("test-rule1");
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  conf.setLogicalOverride(LogicalOverride.PRESERVE);
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase(conf);
  BuildContext buildContext=new BuildContext(ruleBase,ruleBase.getReteooBuilder().getIdGenerator());
  IdGenerator idGenerator=ruleBase.getReteooBuilder().getIdGenerator();
  final Rete rete=ruleBase.getRete();
  final EntryPointNode entryPoint=new EntryPointNode(0,rete,buildContext);
  entryPoint.attach();
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(idGenerator.getNextId(),entryPoint,new ClassObjectType(String.class),buildContext);
  objectTypeNode.attach();
  final MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final RuleTerminalNode node=new RuleTerminalNode(idGenerator.getNextId(),new MockTupleSource(idGenerator.getNextId()),rule1,rule1.getLhs(),buildContext);
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final Agenda agenda=workingMemory.getAgenda();
  final Consequence consequence=new Consequence(){
    /** 
 */
    private static final long serialVersionUID=400L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
;
  rule1.setConsequence(consequence);
  final DefaultFactHandle handle1=new DefaultFactHandle(1,"cheese");
  final LeftTuple tuple1=new LeftTuple(handle1,null);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  node.assertLeftTuple(tuple1,context1,workingMemory);
  final String logicalString1=new String("logical");
  final FactHandle logicalHandle1=workingMemory.insert(logicalString1,false,true,rule1,tuple1.getActivation());
  String logicalString2=new String("logical");
  FactHandle logicalHandle2=workingMemory.insert(logicalString2);
  node.retractLeftTuple(tuple1,context1,workingMemory);
  assertLength(0,sink.getRetracted());
  assertNotSame(logicalHandle2,logicalHandle1);
  assertEquals(workingMemory.getObject(logicalHandle1),workingMemory.getObject(logicalHandle2));
  assertNotSame(workingMemory.getObject(logicalHandle1),workingMemory.getObject(logicalHandle2));
  node.assertLeftTuple(tuple1,context1,workingMemory);
  logicalString2=new String("logical");
  logicalHandle2=workingMemory.insert(logicalString2);
}
