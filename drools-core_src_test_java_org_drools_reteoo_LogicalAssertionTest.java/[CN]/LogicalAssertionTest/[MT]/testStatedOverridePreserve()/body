{
  final Rule rule1=new Rule("test-rule1");
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  conf.setLogicalOverride(LogicalOverride.PRESERVE);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase(conf);
  final Rete rete=new Rete((InternalRuleBase)ruleBase);
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(0,new ClassObjectType(String.class),rete,3);
  objectTypeNode.attach();
  final MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final RuleTerminalNode node=new RuleTerminalNode(2,new MockTupleSource(2),rule1,rule1.getLhs());
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final Agenda agenda=workingMemory.getAgenda();
  final Consequence consequence=new Consequence(){
    /** 
 */
    private static final long serialVersionUID=4142527256796002354L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
  }
;
  rule1.setConsequence(consequence);
  final DefaultFactHandle handle1=new DefaultFactHandle(1,"cheese");
  final ReteTuple tuple1=new ReteTuple(handle1);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  node.assertTuple(tuple1,context1,workingMemory);
  final String logicalString1=new String("logical");
  final FactHandle logicalHandle1=workingMemory.insert(logicalString1,false,true,rule1,tuple1.getActivation());
  String logicalString2=new String("logical");
  FactHandle logicalHandle2=workingMemory.insert(logicalString2);
  node.retractTuple(tuple1,context1,workingMemory);
  assertLength(0,sink.getRetracted());
  assertNotSame(logicalHandle2,logicalHandle1);
  assertEquals(workingMemory.getObject(logicalHandle1),workingMemory.getObject(logicalHandle2));
  assertNotSame(workingMemory.getObject(logicalHandle1),workingMemory.getObject(logicalHandle2));
  node.assertTuple(tuple1,context1,workingMemory);
  logicalString2=new String("logical");
  logicalHandle2=workingMemory.insert(logicalString2);
}
