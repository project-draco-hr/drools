{
  final Rule rule1=new Rule("test-rule1");
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  IdGenerator idGenerator=ruleBase.getReteooBuilder().getIdGenerator();
  final Rete rete=ruleBase.getRete();
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(idGenerator.getNextId(),new ClassObjectType(String.class),rete,3);
  objectTypeNode.attach();
  final MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final RuleTerminalNode node=new RuleTerminalNode(idGenerator.getNextId(),new MockTupleSource(idGenerator.getNextId()),rule1,rule1.getLhs());
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final Agenda agenda=workingMemory.getAgenda();
  final Consequence consequence=new Consequence(){
    /** 
 */
    private static final long serialVersionUID=400L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
  }
;
  rule1.setConsequence(consequence);
  final DefaultFactHandle handle1=new DefaultFactHandle(1,"cheese");
  final ReteTuple tuple1=new ReteTuple(handle1);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  node.assertTuple(tuple1,context1,workingMemory);
  final Cheese cheese=new Cheese("brie",10);
  final FactHandle cheeseHandle=workingMemory.insert(cheese,false,true,rule1,tuple1.getActivation());
  cheese.setType("cheddar");
  cheese.setPrice(20);
  assertEquals(1,workingMemory.getTruthMaintenanceSystem().getJustifiedMap().size());
  assertEquals(1,workingMemory.getTruthMaintenanceSystem().getAssertMap().size());
  workingMemory.retract(cheeseHandle);
  assertEquals(0,workingMemory.getTruthMaintenanceSystem().getJustifiedMap().size());
  assertEquals(0,workingMemory.getTruthMaintenanceSystem().getAssertMap().size());
}
