{
  final Rule rule1=new Rule("test-rule1");
  IdGenerator idGenerator=ruleBase.getReteooBuilder().getIdGenerator();
  final Rete rete=ruleBase.getRete();
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(idGenerator.getNextId(),this.entryPoint,new ClassObjectType(String.class),buildContext);
  objectTypeNode.attach();
  final MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final RuleTerminalNode node=new RuleTerminalNode(idGenerator.getNextId(),new MockTupleSource(idGenerator.getNextId()),rule1,rule1.getLhs(),0,buildContext);
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final Agenda agenda=workingMemory.getAgenda();
  final Consequence consequence=new Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
;
  rule1.setConsequence(consequence);
  final DefaultFactHandle handle1=new DefaultFactHandle(1,"cheese");
  final LeftTupleImpl tuple1=new LeftTupleImpl(handle1,null,true);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null,null);
  node.assertLeftTuple(tuple1,context1,workingMemory);
  final Cheese cheese=new Cheese("brie",10);
  final FactHandle cheeseHandle=workingMemory.insert(cheese,false,true,rule1,(Activation)tuple1.getObject());
  cheese.setType("cheddar");
  cheese.setPrice(20);
  assertEquals(1,workingMemory.getTruthMaintenanceSystem().getJustifiedMap().size());
  assertEquals(1,workingMemory.getTruthMaintenanceSystem().getAssertMap().size());
  workingMemory.retract(cheeseHandle);
  assertEquals(0,workingMemory.getTruthMaintenanceSystem().getJustifiedMap().size());
  assertEquals(0,workingMemory.getTruthMaintenanceSystem().getAssertMap().size());
}
