{
  Rete rete=new Rete();
  ObjectTypeNode objectTypeNode=new ObjectTypeNode(0,new ClassObjectType(String.class),rete);
  objectTypeNode.attach();
  MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  RuleBase ruleBase=new RuleBaseImpl();
  WorkingMemoryImpl workingMemory=(WorkingMemoryImpl)ruleBase.newWorkingMemory();
  Consequence consequence=new Consequence(){
    public void invoke(    Activation activation){
    }
  }
;
  final Rule rule1=new Rule("test-rule1");
  rule1.setConsequence(consequence);
  FactHandleImpl handle1=new FactHandleImpl(1);
  ReteTuple tuple1=new ReteTuple(0,handle1,workingMemory);
  PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  Activation activation1=new AgendaItem(0,tuple1,context,rule1);
  String logicalString1=new String("logical");
  FactHandle logicalHandle1=workingMemory.assertObject(logicalString1,false,true,rule1,activation1);
  final Rule rule2=new Rule("test-rule2");
  rule2.setConsequence(consequence);
  FactHandleImpl handle2=new FactHandleImpl(2);
  ReteTuple tuple2=new ReteTuple(0,handle2,workingMemory);
  Activation activation2=new AgendaItem(0,tuple2,context,rule2);
  String logicalString2=new String("logical");
  FactHandle logicalHandle2=workingMemory.assertObject(logicalString2,false,true,rule2,activation2);
  assertLength(1,workingMemory.getJustified().values());
  assertLength(2,workingMemory.getJustifiers().values());
  workingMemory.retractObject(logicalHandle2);
  assertLength(0,workingMemory.getJustified().values());
  assertLength(0,workingMemory.getJustifiers().values());
}
