{
  final Rule rule1=new Rule("test-rule1");
  IdGenerator idGenerator=ruleBase.getReteooBuilder().getIdGenerator();
  final Rete rete=ruleBase.getRete();
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(idGenerator.getNextId(),this.entryPoint,new ClassObjectType(String.class),buildContext);
  objectTypeNode.attach();
  final MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final RuleTerminalNode node=new RuleTerminalNode(idGenerator.getNextId(),new MockTupleSource(idGenerator.getNextId()),rule1,rule1.getLhs(),buildContext);
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final Consequence consequence=new Consequence(){
    /** 
 */
    private static final long serialVersionUID=400L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
;
  rule1.setConsequence(consequence);
  final DefaultFactHandle handle1=new DefaultFactHandle(1,"cheese");
  final LeftTuple tuple1=new LeftTuple(handle1,null,true);
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null,null);
  node.assertLeftTuple(tuple1,context,workingMemory);
  final String logicalString1=new String("logical");
  final FactHandle logicalHandle1=workingMemory.insert(logicalString1,false,true,rule1,tuple1.getActivation());
  final Rule rule2=new Rule("test-rule2");
  final RuleTerminalNode node2=new RuleTerminalNode(idGenerator.getNextId(),new MockTupleSource(3),rule2,rule2.getLhs(),buildContext);
  rule2.setConsequence(consequence);
  final DefaultFactHandle handle2=new DefaultFactHandle(2,"cheese");
  final LeftTuple tuple2=new LeftTuple(handle2,null,true);
  node.assertLeftTuple(tuple2,context,workingMemory);
  node2.assertLeftTuple(tuple2,context,workingMemory);
  final String logicalString2=new String("logical");
  final FactHandle logicalHandle2=workingMemory.insert(logicalString2,false,true,rule2,tuple2.getActivation());
  assertLength(1,workingMemory.getTruthMaintenanceSystem().getJustifiedMap().values());
  workingMemory.retract(logicalHandle2);
  assertLength(0,workingMemory.getTruthMaintenanceSystem().getJustifiedMap().values());
}
