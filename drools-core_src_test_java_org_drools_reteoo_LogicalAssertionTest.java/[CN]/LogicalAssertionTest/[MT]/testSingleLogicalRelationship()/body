{
  final ReteooRuleBase ruleBase=new ReteooRuleBase();
  final Rete rete=ruleBase.getRete();
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(String.class),rete);
  objectTypeNode.attach();
  final MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final Rule rule1=new Rule("test-rule1");
  final TerminalNode node=new TerminalNode(2,new MockTupleSource(2),rule1);
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newWorkingMemory();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final Consequence consequence=new Consequence(){
    /** 
 */
    private static final long serialVersionUID=-5628842901492986740L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
  }
;
  rule1.setConsequence(consequence);
  final DefaultFactHandle handle1=(DefaultFactHandle)workingMemory.assertObject("o1");
  final ReteTuple tuple1=new ReteTuple(handle1);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  node.assertTuple(tuple1,context1,workingMemory);
  final String logicalString=new String("logical");
  FactHandle logicalHandle=workingMemory.assertObject(logicalString,false,true,rule1,tuple1.getActivation());
  node.retractTuple(tuple1,context1,workingMemory);
  workingMemory.propagateQueuedActions();
  assertLength(1,sink.getRetracted());
  Object[] values=(Object[])sink.getRetracted().get(0);
  assertSame(logicalHandle,values[0]);
  node.assertTuple(tuple1,context1,workingMemory);
  logicalHandle=workingMemory.assertObject(logicalString,false,true,rule1,tuple1.getActivation());
  agenda.fireNextItem(null);
  node.retractTuple(tuple1,context1,workingMemory);
  workingMemory.propagateQueuedActions();
  assertLength(2,sink.getRetracted());
  values=(Object[])sink.getRetracted().get(1);
  assertSame(logicalHandle,values[0]);
}
