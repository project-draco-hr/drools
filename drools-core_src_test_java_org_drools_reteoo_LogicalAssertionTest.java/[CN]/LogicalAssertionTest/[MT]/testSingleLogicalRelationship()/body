{
  RuleBaseImpl ruleBase=new RuleBaseImpl();
  Rete rete=ruleBase.getRete();
  ObjectTypeNode objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(String.class),rete);
  objectTypeNode.attach();
  MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  WorkingMemoryImpl workingMemory=(WorkingMemoryImpl)ruleBase.newWorkingMemory();
  final Agenda agenda=workingMemory.getAgenda();
  Consequence consequence=new Consequence(){
    public void invoke(    Activation activation,    WorkingMemory workingMemory){
    }
  }
;
  final Rule rule1=new Rule("test-rule1");
  rule1.setConsequence(consequence);
  FactHandleImpl handle1=new FactHandleImpl(1);
  ReteTuple tuple1=new ReteTuple(0,handle1,workingMemory);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  agenda.addToAgenda(tuple1,context1,rule1);
  AgendaGroupImpl main=(AgendaGroupImpl)agenda.getFocus();
  Activation activation1=(Activation)main.getPriorityQueue().get();
  String logicalString=new String("logical");
  FactHandle logicalHandle=workingMemory.assertObject(logicalString,false,true,rule1,activation1);
  agenda.removeFromAgenda(tuple1.getKey(),context1,rule1);
  assertLength(1,sink.getRetracted());
  Object[] values=(Object[])sink.getRetracted().get(0);
  assertSame(logicalHandle,values[0]);
  agenda.addToAgenda(tuple1,context1,rule1);
  activation1=(Activation)main.getPriorityQueue().get();
  logicalHandle=workingMemory.assertObject(logicalString,false,true,rule1,activation1);
  agenda.fireNextItem(null);
  agenda.removeFromAgenda(tuple1.getKey(),context1,rule1);
  assertLength(2,sink.getRetracted());
  values=(Object[])sink.getRetracted().get(1);
  assertSame(logicalHandle,values[0]);
}
