{
  final Rule rule1=new Rule("test-rule1");
  RuleBaseImpl ruleBase=new RuleBaseImpl();
  Rete rete=ruleBase.getRete();
  ObjectTypeNode objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(String.class),rete);
  objectTypeNode.attach();
  MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final TerminalNode node=new TerminalNode(2,new MockTupleSource(2),rule1);
  WorkingMemoryImpl workingMemory=(WorkingMemoryImpl)ruleBase.newWorkingMemory();
  final Agenda agenda=workingMemory.getAgenda();
  Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
  }
;
  rule1.setConsequence(consequence);
  FactHandleImpl handle1=new FactHandleImpl(1);
  ReteTuple tuple1=new ReteTuple(handle1);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  node.assertTuple(tuple1,context1,workingMemory);
  final Rule rule2=new Rule("test-rule2");
  final TerminalNode node2=new TerminalNode(4,new MockTupleSource(3),rule2);
  rule2.setConsequence(consequence);
  FactHandleImpl handle2=new FactHandleImpl(2);
  ReteTuple tuple2=new ReteTuple(handle2);
  final PropagationContext context2=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  node2.assertTuple(tuple2,context2,workingMemory);
  String logicalString1=new String("logical");
  FactHandle logicalHandle1=workingMemory.assertObject(logicalString1,false,true,rule1,tuple1.getActivation());
  String logicalString2=new String("logical");
  FactHandle logicalHandle2=workingMemory.assertObject(logicalString2,false,true,rule2,tuple2.getActivation());
  assertLength(1,workingMemory.getJustified().values());
  node2.retractTuple(tuple2,context2,workingMemory);
  assertLength(0,sink.getRetracted());
  assertLength(1,workingMemory.getJustified().values());
  node.retractTuple(tuple1,context1,workingMemory);
  assertLength(1,sink.getRetracted());
  assertLength(0,workingMemory.getJustified().values());
}
