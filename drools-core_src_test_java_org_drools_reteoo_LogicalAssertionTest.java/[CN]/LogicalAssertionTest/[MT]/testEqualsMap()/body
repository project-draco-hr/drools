{
  final Rule rule1=new Rule("test-rule1");
  final Rete rete=new Rete();
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(0,new ClassObjectType(String.class),rete,3);
  objectTypeNode.attach();
  final MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final RuleTerminalNode node=new RuleTerminalNode(2,new MockTupleSource(2),rule1);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newWorkingMemory();
  final Agenda agenda=workingMemory.getAgenda();
  final Consequence consequence=new Consequence(){
    /** 
 */
    private static final long serialVersionUID=-6861606249802351389L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
  }
;
  rule1.setConsequence(consequence);
  final DefaultFactHandle handle1=new DefaultFactHandle(1,"cheese");
  final ReteTuple tuple1=new ReteTuple(handle1);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  node.assertTuple(tuple1,context1,workingMemory);
  final String logicalString1=new String("logical");
  FactHandle logicalHandle1=workingMemory.assertObject(logicalString1,false,true,rule1,tuple1.getActivation());
  final String logicalString2=new String("logical");
  FactHandle logicalHandle2=workingMemory.assertObject(logicalString2,false,true,rule1,tuple1.getActivation());
  assertSame(logicalHandle1,logicalHandle2);
  logicalHandle1=workingMemory.assertObject(logicalString1);
  logicalHandle2=workingMemory.assertObject(logicalString2);
  if (RuleBaseConfiguration.AssertBehaviour.IDENTITY == ((ReteooRuleBase)ruleBase).getConfiguration().getAssertBehaviour()) {
    assertNotSame(logicalHandle1,logicalHandle2);
  }
 else {
    assertSame(logicalHandle1,logicalHandle2);
  }
}
