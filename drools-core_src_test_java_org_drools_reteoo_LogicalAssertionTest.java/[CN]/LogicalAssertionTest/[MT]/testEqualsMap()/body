{
  final Rule rule1=new Rule("test-rule1");
  Rete rete=new Rete();
  ObjectTypeNode objectTypeNode=new ObjectTypeNode(0,new ClassObjectType(String.class),rete);
  objectTypeNode.attach();
  MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final TerminalNode node=new TerminalNode(2,new MockTupleSource(2),rule1);
  RuleBase ruleBase=new RuleBaseImpl();
  WorkingMemoryImpl workingMemory=(WorkingMemoryImpl)ruleBase.newWorkingMemory();
  final Agenda agenda=workingMemory.getAgenda();
  Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
  }
;
  rule1.setConsequence(consequence);
  FactHandleImpl handle1=new FactHandleImpl(1);
  ReteTuple tuple1=new ReteTuple(handle1);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  node.assertTuple(tuple1,context1,workingMemory);
  String logicalString1=new String("logical");
  FactHandle logicalHandle1=workingMemory.assertObject(logicalString1,false,true,rule1,tuple1.getActivation());
  String logicalString2=new String("logical");
  FactHandle logicalHandle2=workingMemory.assertObject(logicalString2,false,true,rule1,tuple1.getActivation());
  if (RuleBaseConfiguration.WM_BEHAVIOR_EQUALS.equals(((RuleBaseImpl)ruleBase).getConfiguration().getProperty(RuleBaseConfiguration.PROPERTY_LOGICAL_ASSERT_BEHAVIOR))) {
    assertSame(logicalHandle1,logicalHandle2);
  }
 else {
    assertNotSame(logicalHandle1,logicalHandle2);
  }
  logicalHandle1=workingMemory.assertObject(logicalString1);
  logicalHandle2=workingMemory.assertObject(logicalString2);
  if (RuleBaseConfiguration.WM_BEHAVIOR_IDENTITY.equals(((RuleBaseImpl)ruleBase).getConfiguration().getProperty(RuleBaseConfiguration.PROPERTY_ASSERT_BEHAVIOR))) {
    assertNotSame(logicalHandle1,logicalHandle2);
  }
 else {
    assertSame(logicalHandle1,logicalHandle2);
  }
}
