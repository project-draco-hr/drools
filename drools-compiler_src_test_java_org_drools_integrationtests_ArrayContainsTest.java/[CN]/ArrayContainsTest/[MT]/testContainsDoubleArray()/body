{
  String str="";
  str+="package org.drools;\n";
  str+="global java.util.List list;\n";
  str+="global Double dGlobal;\n";
  str+="rule \"contains in array\"\n";
  str+="     salience 10\n";
  str+="     when\n";
  str+="         Primitives( $d : doublePrimitive == 10 ) \n";
  str+="         Primitives( doublePrimitive != 10, primitiveDoubleArray contains dGlobal,  primitiveDoubleArray contains $d )\n";
  str+="     then\n";
  str+="        list.add( \"ok1\" );\n";
  str+="end\n";
  final KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail("kbuilder has errors\n:" + kbuilder.getErrors());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  kbase=SerializationHelper.serializeObject(kbase);
  final StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  final List list=new ArrayList();
  ksession.setGlobal("list",list);
  ksession.setGlobal("dGlobal",10.0d);
  final Primitives p1=new Primitives();
  p1.setPrimitiveDoubleArray(new double[]{5,10,20});
  FactHandle p1h=ksession.insert(p1);
  final Primitives p2=new Primitives();
  p2.setDoublePrimitive(10);
  ksession.insert(p2);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  ksession.retract(p1h);
  ksession.insert(p1);
  ksession.fireAllRules();
  assertEquals(2,list.size());
}
