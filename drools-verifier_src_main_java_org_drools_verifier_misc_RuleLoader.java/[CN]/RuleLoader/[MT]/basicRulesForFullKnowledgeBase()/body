{
  Map<Resource,ResourceType> resources=new HashMap<Resource,ResourceType>();
  resources.put(ResourceFactory.newClassPathResource("Consequence.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("alwaysFalse/Patterns.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("equivalence/Rules.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("incoherence/Patterns.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("incoherence/Restrictions.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("incompatibility/Patterns.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("incompatibility/Restrictions.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("missingEquality/MissingEquality.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("opposites/Patterns.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("opposites/Restrictions.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("opposites/Rules.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("optimisation/PatternOrder.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("overlaps/Restrictions.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("rangeChecks/Clean.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("rangeChecks/Dates.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("rangeChecks/Doubles.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("rangeChecks/Integers.drl",Verifier.class),ResourceType.DRL);
  ResourceFactory.newClassPathResource("rangeChecks/NumberPatterns.drl",Verifier.class);
  ResourceFactory.newClassPathResource("rangeChecks/Variables.drl",Verifier.class);
  resources.put(ResourceFactory.newClassPathResource("redundancy/Consequence.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("redundancy/Notes.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("redundancy/Patterns.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("redundancy/Possibilities.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("redundancy/Restrictions.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("redundancy/Rules.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("redundancy/Warnings.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("reports/RangeCheckReports.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("subsumption/Possibilities.drl",Verifier.class),ResourceType.DRL);
  resources.put(ResourceFactory.newClassPathResource("subsumption/Restrictions.drl",Verifier.class),ResourceType.DRL);
  return resources;
}
