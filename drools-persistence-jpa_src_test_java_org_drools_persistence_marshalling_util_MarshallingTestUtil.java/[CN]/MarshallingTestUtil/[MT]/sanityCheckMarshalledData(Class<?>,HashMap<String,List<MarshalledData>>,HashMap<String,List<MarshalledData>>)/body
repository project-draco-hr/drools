{
  Set<String> testTestMethods=new HashSet<String>(testSnapshotsPerTestMap.keySet());
  List<String> untestableTestMethods=new ArrayList<String>();
  for (  String baseTestMethod : baseSnapshotsPerTestMap.keySet()) {
    if (!testTestMethods.contains(baseTestMethod)) {
      logger.trace("Marshalled data snapshots for test " + baseTestMethod + " exist in the base db, but not in the test db generated by this test run!");
      untestableTestMethods.add(baseTestMethod);
    }
 else {
      Assert.assertNotNull("Empty list of marshalled data snapshots in base for " + baseTestMethod,baseSnapshotsPerTestMap.get(baseTestMethod));
      int numBaseSnapshotsForTestMethod=baseSnapshotsPerTestMap.get(baseTestMethod).size();
      int numTestSnapshotsForTestMethod=testSnapshotsPerTestMap.get(baseTestMethod).size();
      if (numBaseSnapshotsForTestMethod != numTestSnapshotsForTestMethod) {
        logger.error("Has test changed? Unequal number [" + baseSnapshotsPerTestMap.get(baseTestMethod).size() + "/"+ testSnapshotsPerTestMap.get(baseTestMethod).size()+ "] of for test "+ baseTestMethod);
        if (testSnapshotsPerTestMap.remove(baseTestMethod) != null) {
          logger.warn("Removing data and NOT comparing data for test " + baseTestMethod);
          untestableTestMethods.add(baseTestMethod);
        }
      }
      testTestMethods.remove(baseTestMethod);
    }
  }
  for (  String badTestMethod : untestableTestMethods) {
    baseSnapshotsPerTestMap.remove(badTestMethod);
  }
  for (  String testMethod : testTestMethods) {
    String shortTestMethod=testMethod.substring(testMethod.substring(0,testMethod.lastIndexOf('.')).lastIndexOf('.') + 1);
    logger.trace(shortTestMethod + " snapshots do not exist in this base db.");
    testSnapshotsPerTestMap.keySet().remove(testMethod);
  }
}
