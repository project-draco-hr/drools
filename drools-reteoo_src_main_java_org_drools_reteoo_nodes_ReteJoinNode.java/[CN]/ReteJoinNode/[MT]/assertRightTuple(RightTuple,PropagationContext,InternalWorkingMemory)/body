{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  ;
  memory.getRightTupleMemory().add(rightTuple);
  if (memory.getLeftTupleMemory() == null || memory.getLeftTupleMemory().size() == 0) {
    return;
  }
  TupleMemory leftMemory=memory.getLeftTupleMemory();
  this.constraints.updateFromFactHandle(memory.getContext(),workingMemory,rightTuple.getFactHandle());
  FastIterator it=getLeftIterator(leftMemory);
  for (LeftTuple leftTuple=getFirstLeftTuple(rightTuple,leftMemory,it); leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
    propagateFromRight(rightTuple,leftTuple,memory,context,workingMemory);
  }
  this.constraints.resetFactHandle(memory.getContext());
}
