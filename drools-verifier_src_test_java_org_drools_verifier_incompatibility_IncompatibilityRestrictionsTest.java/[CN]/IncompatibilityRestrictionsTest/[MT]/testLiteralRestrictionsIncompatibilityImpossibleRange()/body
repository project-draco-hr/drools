{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Restrictions.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Incompatible LiteralRestrictions with ranges in pattern possibility, impossible range"));
  Collection<Object> data=new ArrayList<Object>();
  LiteralRestriction r1=new LiteralRestriction();
  r1.setOperator(Operator.GREATER);
  r1.setPatternGuid("0");
  r1.setFieldGuid("0");
  r1.setValue("10");
  LiteralRestriction r2=new LiteralRestriction();
  r2.setOperator(Operator.LESS);
  r2.setPatternGuid("0");
  r2.setFieldGuid("0");
  r2.setValue("10");
  LiteralRestriction r3=new LiteralRestriction();
  r3.setOperator(Operator.GREATER_OR_EQUAL);
  r3.setPatternGuid("1");
  r3.setFieldGuid("1");
  r3.setValue("1");
  LiteralRestriction r4=new LiteralRestriction();
  r4.setOperator(Operator.EQUAL);
  r4.setPatternGuid("1");
  r4.setFieldGuid("1");
  r4.setValue("10");
  data.add(r1);
  data.add(r2);
  data.add(r3);
  data.add(r4);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<Cause,Set<Cause>> map=createIncompatibilityMap(VerifierComponentType.RESTRICTION,sessionResult.iterateObjects());
  assertTrue((TestBase.causeMapContains(map,r1,r2) ^ TestBase.causeMapContains(map,r2,r1)));
  if (!map.isEmpty()) {
    fail("More incompatibilities than was expected.");
  }
}
