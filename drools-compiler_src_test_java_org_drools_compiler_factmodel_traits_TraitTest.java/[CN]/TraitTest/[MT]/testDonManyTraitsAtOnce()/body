{
  String drl="" + "package org.drools.core.factmodel.traits.test;\n" + "\n"+ "import org.drools.core.factmodel.traits.*;\n"+ "import java.util.*;\n"+ "\n"+ "global List list; \n"+ ""+ "declare trait A end \n"+ "declare trait B end \n"+ "declare trait C end \n"+ "declare trait D end \n"+ "declare trait E end \n"+ "declare trait F end \n"+ "\n"+ "declare TBean @Traitable @propertyReactive fld0 : String end \n"+ ""+ "rule \"Don 1\"\n"+ "when \n"+ "then\n"+ "  TBean t = new TBean(); \n"+ "  don( t, A.class ); \n"+ "  don( t, B.class ); \n"+ "end\n"+ ""+ "rule \"Don 2\" "+ "when \n"+ "  $s : String( this == \"go\" ) \n"+ "  $t : TBean() \n"+ "then \n"+ "  list.add( 0 ); \n"+ "  System.out.println( \"Call DON MANY \" ); "+ "  don( $t, Arrays.asList( C.class, D.class, E.class, F.class ), true ); \n"+ "end \n"+ ""+ "rule Clear \n"+ "when \n"+ "  $s : String( this == \"undo\" ) \n"+ "  $t : TBean() \n"+ "then \n"+ "  retract( $s ); \n"+ "  retract( $t ); \n"+ "end \n"+ ""+ "rule C \n"+ "when\n"+ "  B( this isA C ) \n"+ "then \n"+ "  list.add( 1 ); \n"+ "  System.err.println( \"C is HERE !! \" ); "+ "end \n"+ "rule D \n"+ "when\n"+ "  D( this isA A, this isA C ) \n"+ "then \n"+ "  list.add( 2 ); \n"+ "  System.err.println( \"D is HERE TOO !! \" ); "+ "end \n"+ "rule E \n"+ "when\n"+ "  D( this isA A, this isA E ) \n"+ "then \n"+ "  list.add( 3 ); \n"+ "  System.err.println( \"AND E JOINS THE COMPANY !! \" ); "+ "end \n";
  StatefulKnowledgeSession ksession=loadKnowledgeBaseFromString(drl).newStatefulKnowledgeSession();
  TraitFactory.setMode(mode,ksession.getKieBase());
  ArrayList list=new ArrayList();
  ksession.setGlobal("list",list);
  CountingWorkingMemoryEventListener cwm=new CountingWorkingMemoryEventListener();
  ksession.addEventListener(cwm);
  ksession.fireAllRules();
  assertEquals(0,cwm.getRetracts());
  assertEquals(4,cwm.getInserts());
  assertEquals(3,cwm.getUpdates());
  cwm.reset();
  FactHandle handle=ksession.insert("go");
  ksession.fireAllRules();
  assertEquals(0,cwm.getRetracts());
  assertEquals(4,cwm.getInserts());
  assertEquals(3,cwm.getUpdates());
  cwm.reset();
  ksession.retract(handle);
  ksession.fireAllRules();
  assertEquals(4,cwm.getRetracts());
  assertEquals(0,cwm.getInserts());
  assertEquals(0,cwm.getUpdates());
  cwm.reset();
  for (  Object o : ksession.getObjects()) {
    System.out.println(o);
  }
  ksession.insert("undo");
  ksession.fireAllRules();
  assertEquals(4,cwm.getRetracts());
  assertEquals(0,cwm.getInserts());
  assertEquals(0,cwm.getUpdates());
  cwm.reset();
  assertEquals(4,list.size());
  assertTrue(list.containsAll(Arrays.asList(0,1,2,3)));
}
