{
  String s1="package org.drools.test;\n" + "import org.drools.Person; \n" + "import org.drools.factmodel.traits.Thing; \n"+ "rule \"Init\"\n"+ "when\n"+ "then\n"+ " insertLogical( new Person( \"x\", 18 ) );\n"+ "end\n"+ "\n"+ "declare trait Student\n"+ " age : int\n"+ " name : String\n"+ "end\n"+ "\n"+ "rule \"Trait\"\n"+ "when\n"+ " $p : Person( )\n"+ "then\n"+ " Thing t = ward( $p, Student.class );\n"+ " Student s = (Student) don( t, Student.class );\n"+ "end\n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(new ByteArrayResource(s1.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  TraitFactory.setMode(mode,kbase);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  ksession.fireAllRules();
  for (  Object o : ksession.getObjects(new ClassObjectFilter(Thing.class))) {
    Thing t=(Thing)o;
    Object core=t.getCore();
    assertTrue(core instanceof Person);
    assertTrue(core instanceof TraitableBean);
    assertEquals(1,((TraitableBean)core)._getTraitMap().size());
    assertTrue(((TraitableBean)core).hasTrait(Thing.class.getName()));
  }
}
