{
  String drl="package org.drools.test " + "import " + Entity.class.getName() + ";"+ "global java.util.List list; "+ "declare trait A @propertyReactive end "+ "declare trait B @propertyReactive end "+ "declare trait C extends A,B @propertyReactive end "+ "declare trait D extends B @propertyReactive end "+ "rule Trait when "+ "then "+ "    Entity e = new Entity( 'x1' ); "+ "    don( e, C.class ); "+ "    don( e, D.class ); "+ "end "+ "rule Mood when "+ "  $x : B() "+ "then "+ "  System.out.println( 'Found B' ); "+ "end "+ "rule Shed when "+ "  $s : String() "+ "  $x : Entity() "+ "then "+ "  delete( $s ); "+ "  shed( $x, A.class ); "+ "end "+ "";
  final KnowledgeBase kbase=getKieBaseFromString(drl);
  TraitFactory.setMode(mode,kbase);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  HierarchyEncoder<String> hier=((KnowledgeBaseImpl)kbase).getConfiguration().getComponentFactory().getTraitRegistry().getHierarchy();
  BitSet a=(BitSet)hier.getCode("org.drools.test.A").clone();
  BitSet b=(BitSet)hier.getCode("org.drools.test.B").clone();
  BitSet c=(BitSet)hier.getCode("org.drools.test.C").clone();
  BitSet d=(BitSet)hier.getCode("org.drools.test.D").clone();
  int n=ksession.fireAllRules();
  assertEquals(2,n);
  System.err.print("---------------------------------------------------------------\n\n\n ");
  int counter=0;
  for (  Object o : ksession.getObjects()) {
    if (o instanceof TraitProxy) {
      TraitProxy tp=(TraitProxy)o;
      if (tp._getTypeCode().equals(c)) {
        assertEquals(1,tp.listAssignedOtnTypeCodes().size());
        assertTrue(tp.listAssignedOtnTypeCodes().contains(b));
        counter++;
      }
 else       if (tp._getTypeCode().equals(d)) {
        assertTrue(tp.listAssignedOtnTypeCodes().isEmpty());
        counter++;
      }
    }
 else     if (o instanceof TraitableBean) {
      TraitableBean tb=(TraitableBean)o;
      System.out.println(tb.getCurrentTypeCode());
      counter++;
    }
  }
  assertEquals(3,counter);
  ksession.insert("go");
  ksession.fireAllRules();
  System.err.print("---------------------------------------------------------------\n\n\n ");
  int counter2=0;
  for (  Object o : ksession.getObjects()) {
    if (o instanceof TraitProxy) {
      TraitProxy tp=(TraitProxy)o;
      assertEquals(d,tp._getTypeCode());
      assertEquals(1,tp.listAssignedOtnTypeCodes().size());
      assertTrue(tp.listAssignedOtnTypeCodes().contains(b));
      counter2++;
    }
 else     if (o instanceof TraitableBean) {
      TraitableBean tb=(TraitableBean)o;
      assertEquals(d,tb.getCurrentTypeCode());
      counter2++;
    }
  }
  assertEquals(2,counter2);
}
