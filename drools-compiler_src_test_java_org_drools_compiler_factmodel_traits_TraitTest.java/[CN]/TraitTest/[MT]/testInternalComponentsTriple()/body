{
  String source="org/drools/compiler/factmodel/traits/testTraitDon.drl";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  Resource res=ResourceFactory.newClassPathResource(source);
  assertNotNull(res);
  kbuilder.add(res,ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kb=KnowledgeBaseFactory.newKnowledgeBase();
  kb.addKnowledgePackages(kbuilder.getKnowledgePackages());
  TraitFactory.setMode(TraitFactory.VirtualPropertyMode.TRIPLES,kb);
  TraitFactory tFactory=((AbstractRuleBase)((KnowledgeBaseImpl)kb).getRuleBase()).getConfiguration().getComponentFactory().getTraitFactory();
  try {
    FactType impClass=kb.getFactType("org.drools.compiler.test","Imp");
    TraitableBean imp=(TraitableBean)impClass.newInstance();
    FactType traitClass=kb.getFactType("org.drools.compiler.test","Student");
    Class trait=traitClass.getFactClass();
    TraitProxy proxy=(TraitProxy)tFactory.getProxy(imp,trait);
    Object proxyFields=proxy.getFields();
    Object coreTraits=imp.getTraitMap();
    Object coreProperties=imp.getDynamicProperties();
    assertTrue(proxy.getObject() instanceof TraitableBean);
    assertNotNull(proxyFields);
    assertNotNull(coreTraits);
    assertNotNull(coreProperties);
    assertEquals(proxyFields.getClass().getName(),"org.drools.compiler.test.StudentorgtestImpProxyWrapper");
    assertTrue(proxyFields instanceof TripleBasedStruct);
    assertTrue(coreTraits instanceof VetoableTypedMap);
    assertTrue(coreProperties instanceof TripleBasedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
