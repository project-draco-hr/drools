{
  String drl="" + "package org.drools.core.factmodel.traits.test;\n" + "\n"+ "import org.drools.core.factmodel.traits.*;\n"+ "import java.util.*;\n"+ "\n"+ "declare trait A end \n"+ "declare trait B extends A end \n"+ "declare trait C end \n"+ "\n"+ "rule \"don\"\n"+ "when \n"+ "  $e : Entity() \n"+ "then\n"+ "  don( $e, A.class ); \n"+ "  don( $e, C.class ); \n"+ "  don( $e, B.class ); \n"+ "end\n"+ "";
  KieSession ksession=loadKnowledgeBaseFromString(drl).newKieSession();
  TraitFactory.setMode(mode,ksession.getKieBase());
  FactHandle handle=ksession.insert(new Entity());
  ksession.fireAllRules();
  final ArrayList list=new ArrayList();
  ksession.addEventListener(new RuleRuntimeEventListener(){
    public void objectInserted(    org.kie.api.event.rule.ObjectInsertedEvent objectInsertedEvent){
    }
    public void objectUpdated(    org.kie.api.event.rule.ObjectUpdatedEvent objectUpdatedEvent){
    }
    public void objectDeleted(    org.kie.api.event.rule.ObjectDeletedEvent objectRetractedEvent){
      Object o=objectRetractedEvent.getOldObject();
      if (o instanceof TraitProxy) {
        String traitName=((TraitProxy)o)._getTraitName();
        list.add(traitName.substring(traitName.lastIndexOf(".") + 1));
      }
    }
  }
);
  ksession.delete(handle);
  ksession.fireAllRules();
  System.out.println(list);
  assertEquals(Arrays.asList("B","C","A"),list);
}
