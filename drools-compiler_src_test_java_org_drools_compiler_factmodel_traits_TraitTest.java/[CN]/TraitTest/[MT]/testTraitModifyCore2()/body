{
  String s1="package test;\n" + "import org.drools.core.factmodel.traits.*;\n" + ""+ "declare trait Student @propertyReactive name : String end\n"+ "declare trait Worker @propertyReactive name : String end\n"+ "declare trait StudentWorker extends Student, Worker @propertyReactive name : String end\n"+ "declare trait StudentWorker2 extends StudentWorker @propertyReactive name : String end\n"+ "declare trait Assistant extends Student, Worker @propertyReactive name : String end\n"+ "declare Person @Traitable @propertyReactive name : String end\n"+ ""+ "rule \"Init\" \n"+ "when \n"+ "then \n"+ "  Person p = new Person( \"john\" ); \n"+ "  insert( p ); \n"+ "end \n"+ ""+ "rule \"Don\" \n"+ "when \n"+ "  $p : Person( name == \"john\" ) \n"+ "then \n"+ "  System.out.println( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DON WORKER \" + $p  ); \n"+ "  don( $p, Worker.class ); \n"+ "  System.out.println( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DON STUDWORKER \" + $p ); \n"+ "  don( $p, StudentWorker2.class ); \n"+ "  System.out.println( \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DON ASSISTANT \" + $p ); \n"+ "  don( $p, Assistant.class ); \n"+ "end \n"+ ""+ "rule \"Log S\" \n"+ "when \n"+ "  $t : Student() @watch( name ) \n"+ "then \n"+ "  System.out.println( \"@@Student >> \" +  $t ); \n"+ "end \n"+ "rule \"Log W\" \n"+ "when \n"+ "  $t : Worker() @watch( name ) \n"+ "then \n"+ "  System.out.println( \"@@Worker >> \" + $t ); \n"+ "end \n"+ "rule \"Log SW\" \n"+ "when \n"+ "  $t : StudentWorker() @watch( name ) \n"+ "then \n"+ "  System.out.println( \"@@StudentWorker >> \" + $t ); \n"+ "end \n"+ "rule \"Log RA\" \n"+ "when \n"+ "  $t : Assistant() @watch( name ) \n"+ "then \n"+ "  System.out.println( \"@@Assistant >> \" + $t ); \n"+ "end \n"+ "rule \"Log Px\" \n"+ "salience -1 \n"+ "when \n"+ "  $p : Person() @watch( name ) \n"+ "then \n"+ "  System.out.println( \"Poor Core Person >> \" + $p ); \n"+ "end \n"+ ""+ "rule \"Mod\" \n"+ "salience -10 \n"+ "when \n"+ "  String( this == \"go\" ) \n"+ "  $p : Student( name == \"john\" ) \n"+ "then \n"+ "  System.out.println( \" ------------------------------------------------------------------------------ \" + $p ); \n"+ "  modify ( $p ) { setName( \"alan\" ); } "+ "end \n"+ "";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(new ByteArrayResource(s1.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  TraitFactory.setMode(mode,kbase);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  int k=ksession.fireAllRules();
  assertEquals(7,k);
  ksession.insert("go");
  k=ksession.fireAllRules();
  assertEquals(6,k);
}
