{
  String s1="package test;\n" + "import org.drools.core.factmodel.traits.*;\n" + "global java.util.List list;\n"+ ""+ "declare trait Student @propertyReactive "+ "   name : String "+ "   age : int "+ "   grades : double "+ "   school : String "+ "   aaa : boolean "+ "end\n"+ "declare trait Worker @propertyReactive "+ "   name : String "+ "   wage : double "+ "end\n"+ "declare trait StudentWorker extends Student, Worker @propertyReactive "+ "   hours : int "+ "end\n"+ "declare trait Assistant extends Student, Worker @propertyReactive "+ "   address : String "+ "end\n"+ "declare Person @propertyReactive @Traitable "+ "   wage : double "+ "   name : String "+ "   age : int  "+ "end\n"+ ""+ "rule \"Init\" \n"+ "when \n"+ "then \n"+ "  Person p = new Person( 109.99, \"john\", 18 ); \n"+ "  insert( p ); \n"+ "end \n"+ ""+ "rule \"Don\" \n"+ "when \n"+ "  $p : Person( name == \"john\" ) \n"+ "then \n"+ "  System.out.println( $p ); \n"+ "  don( $p, StudentWorker.class ); \n"+ "  don( $p, Assistant.class ); \n"+ "end \n"+ ""+ "rule \"Log S\" \n"+ "when \n"+ "  $t : Student( age == 44 ) \n"+ "then \n"+ "  list.add( 1 );\n "+ "  System.out.println( \"Student >> \" +  $t ); \n"+ "end \n"+ "rule \"Log W\" \n"+ "when \n"+ "  $t : Worker( name == \"alan\" ) \n"+ "then \n"+ "  list.add( 2 );\n "+ "  System.out.println( \"Worker >> \" + $t ); \n"+ "end \n"+ "rule \"Log SW\" \n"+ "when \n"+ "  $t : StudentWorker( age == 44 ) \n"+ "then \n"+ "  list.add( 3 );\n "+ "  System.out.println( \"StudentWorker >> \" + $t ); \n"+ "end \n"+ "rule \"Log Pers\" \n"+ "when \n"+ "  $t : Person( age == 44 ) \n"+ "then \n"+ "  list.add( 4 );\n "+ "  System.out.println( \"Person >> \" + $t ); \n"+ "end \n"+ ""+ "rule \"Mod\" \n"+ "salience -10 \n"+ "when \n"+ "  String( this == \"go\" ) \n"+ "  $p : Student( name == \"john\" ) \n"+ "then \n"+ "  System.out.println( \" ------------------------------------------------------------------------------ \" + $p ); \n"+ "  modify ( $p ) { setSchool( \"myschool\" ), setAge( 44 ), setName( \"alan\" ); } "+ "end \n"+ "";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(new ByteArrayResource(s1.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  TraitFactory.setMode(mode,kbase);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  List<Integer> list=new ArrayList<Integer>();
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  ksession.setGlobal("list",list);
  int k=ksession.fireAllRules();
  ksession.insert("go");
  k=ksession.fireAllRules();
  assertEquals(5,k);
  assertEquals(4,list.size());
  assertTrue(list.contains(1));
  assertTrue(list.contains(2));
  assertTrue(list.contains(3));
  assertTrue(list.contains(4));
}
