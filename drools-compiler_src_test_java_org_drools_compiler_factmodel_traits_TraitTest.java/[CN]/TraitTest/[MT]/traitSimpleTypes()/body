{
  String s1="package org.drools.factmodel.traits;\n" + "\n" + "import org.drools.core.factmodel.traits.Traitable;\n"+ ""+ "declare trait PassMark\n"+ "end\n"+ "\n"+ "declare ExamMark \n"+ "@Traitable\n"+ "value : long \n"+ "end\n"+ ""+ "rule \"testTraitFieldTypePrimitive\"\n"+ "when\n"+ "    $mark : ExamMark()\n"+ "then\n"+ "    don($mark, PassMark.class);\n"+ "end\n"+ ""+ "rule \"Init\" when then insert( new ExamMark() ); end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(new ByteArrayResource(s1.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  TraitFactory.setMode(mode,kbase);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  ksession.fireAllRules();
  for (  Object o : ksession.getObjects()) {
    if (o instanceof TraitableBean) {
      TraitableBean tb=(TraitableBean)o;
      assertEquals(1,tb._getTraitMap().size());
      BitSet bs=new BitSet();
      bs.set(0);
      assertEquals(bs,tb.getCurrentTypeCode());
    }
    if (o instanceof TraitProxy) {
      TraitProxy tp=(TraitProxy)o;
      assertEquals(0,tp.listAssignedOtnTypeCodes().size());
    }
  }
}
