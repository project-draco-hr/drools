{
  GuidedDTDRLPersistence p=new GuidedDTDRLPersistence();
  String[] row=new String[]{"1","desc","a","a condition","actionsetfield1","actionsetfield2","retract","actioninsertfact1","actioninsertfact2"};
  List<BaseColumn> allColumns=new ArrayList<BaseColumn>();
  allColumns.add(new RowNumberCol52());
  allColumns.add(new DescriptionCol52());
  allColumns.add(new MetadataCol52());
  allColumns.add(new ConditionCol52());
  List<ActionCol52> cols=new ArrayList<ActionCol52>();
  ActionSetFieldCol52 asf1=new ActionSetFieldCol52();
  asf1.setBoundName("a");
  asf1.setFactField("field1");
  asf1.setType(DataType.TYPE_STRING);
  cols.add(asf1);
  ActionSetFieldCol52 asf2=new ActionSetFieldCol52();
  asf2.setBoundName("a");
  asf2.setFactField("field2");
  asf2.setUpdate(true);
  asf2.setType(DataType.TYPE_NUMERIC_INTEGER);
  cols.add(asf2);
  ActionRetractFactCol52 ret=new ActionRetractFactCol52();
  cols.add(ret);
  ActionInsertFactCol52 ins1=new ActionInsertFactCol52();
  ins1.setBoundName("ins");
  ins1.setFactType("Cheese");
  ins1.setFactField("price");
  ins1.setType(DataType.TYPE_NUMERIC_INTEGER);
  cols.add(ins1);
  ActionInsertFactCol52 ins2=new ActionInsertFactCol52();
  ins2.setBoundName("ins");
  ins2.setFactType("Cheese");
  ins2.setFactField("type");
  ins2.setType(DataType.TYPE_NUMERIC_INTEGER);
  cols.add(ins2);
  RuleModel rm=new RuleModel();
  allColumns.addAll(cols);
  allColumns.add(new AnalysisCol52());
  List<DTCellValue52> rowData=DataUtilities.makeDataRowList(row);
  TemplateDataProvider rowDataProvider=new GuidedDTTemplateDataProvider(allColumns,rowData);
  p.doActions(allColumns,cols,rowDataProvider,rowData,rm);
  assertEquals(3,rm.rhs.length);
  ActionSetField a1=(ActionSetField)rm.rhs[0];
  assertEquals("a",a1.getVariable());
  assertEquals(2,a1.getFieldValues().length);
  assertEquals("field1",a1.getFieldValues()[0].getField());
  assertEquals("actionsetfield1",a1.getFieldValues()[0].getValue());
  assertEquals(DataType.TYPE_STRING,a1.getFieldValues()[0].getType());
  assertEquals("field2",a1.getFieldValues()[1].getField());
  assertEquals("actionsetfield2",a1.getFieldValues()[1].getValue());
  assertEquals(DataType.TYPE_NUMERIC_INTEGER,a1.getFieldValues()[1].getType());
  ActionRetractFact a2=(ActionRetractFact)rm.rhs[1];
  assertEquals("retract",a2.getVariableName());
  ActionInsertFact a3=(ActionInsertFact)rm.rhs[2];
  assertEquals("Cheese",a3.getFactType());
  assertEquals(2,a3.getFieldValues().length);
  assertEquals("price",a3.getFieldValues()[0].getField());
  assertEquals("actioninsertfact1",a3.getFieldValues()[0].getValue());
  assertEquals(DataType.TYPE_NUMERIC_INTEGER,a3.getFieldValues()[0].getType());
  assertEquals("type",a3.getFieldValues()[1].getField());
  assertEquals("actioninsertfact2",a3.getFieldValues()[1].getValue());
  assertEquals(DataType.TYPE_NUMERIC_INTEGER,a3.getFieldValues()[1].getType());
}
