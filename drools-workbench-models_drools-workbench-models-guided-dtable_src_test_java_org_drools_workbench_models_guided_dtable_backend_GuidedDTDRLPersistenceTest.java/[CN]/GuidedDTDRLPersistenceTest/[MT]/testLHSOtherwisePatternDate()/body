{
  GuidedDTDRLPersistence p=new GuidedDTDRLPersistence();
  String[][] row=new String[3][];
  String[][] data=new String[3][];
  row[0]=new String[]{"1","desc1","01-Jan-1980","20-Jun-1985"};
  List<DTCellValue52> rowDTModel0=DataUtilities.makeDataRowList(row[0]);
  data[0]=row[0];
  row[1]=new String[]{"2","desc2","01-Feb-1981","21-Jun-1986"};
  List<DTCellValue52> rowDTModel1=DataUtilities.makeDataRowList(row[1]);
  data[1]=row[1];
  row[2]=new String[]{"3","desc3",null,null};
  List<DTCellValue52> rowDTModel2=DataUtilities.makeDataRowList(row[2]);
  rowDTModel2.get(2).setOtherwise(true);
  rowDTModel2.get(3).setOtherwise(true);
  data[2]=row[2];
  List<BaseColumn> allColumns=new ArrayList<BaseColumn>();
  List<CompositeColumn<? extends BaseColumn>> allPatterns=new ArrayList<CompositeColumn<? extends BaseColumn>>();
  allColumns.add(new RowNumberCol52());
  allColumns.add(new DescriptionCol52());
  Pattern52 p1=new Pattern52();
  p1.setBoundName("p1");
  p1.setFactType("Person");
  allPatterns.add(p1);
  ConditionCol52 col=new ConditionCol52();
  col.setFactField("dateOfBirth");
  col.setConstraintValueType(BaseSingleFieldConstraint.TYPE_LITERAL);
  col.setFieldType(DataType.TYPE_DATE);
  col.setOperator("==");
  p1.getChildColumns().add(col);
  allColumns.add(col);
  Pattern52 p2=new Pattern52();
  p2.setBoundName("p2");
  p2.setFactType("Person");
  allPatterns.add(p2);
  ConditionCol52 col2=new ConditionCol52();
  col2.setFactField("dateOfBirth");
  col2.setConstraintValueType(BaseSingleFieldConstraint.TYPE_LITERAL);
  col2.setFieldType(DataType.TYPE_DATE);
  col2.setOperator("!=");
  p2.getChildColumns().add(col2);
  allColumns.add(col2);
  RuleModel rm=new RuleModel();
  allColumns.add(new AnalysisCol52());
  TemplateDataProvider rowDataProvider0=new GuidedDTTemplateDataProvider(allColumns,rowDTModel0);
  p.doConditions(allColumns,allPatterns,rowDataProvider0,rowDTModel0,DataUtilities.makeDataLists(data),rm);
  String drl0=BRDRLPersistence.getInstance().marshal(rm);
  assertEquals(2,rm.lhs.length);
  assertEquals("Person",((FactPattern)rm.lhs[0]).getFactType());
  assertEquals("p1",((FactPattern)rm.lhs[0]).getBoundName());
  assertEquals("Person",((FactPattern)rm.lhs[1]).getFactType());
  assertEquals("p2",((FactPattern)rm.lhs[1]).getBoundName());
  assertTrue(drl0.indexOf("p1 : Person( dateOfBirth == \"01-Jan-1980\" )") > 0);
  assertTrue(drl0.indexOf("p2 : Person( dateOfBirth != \"20-Jun-1985\" )") > 0);
  TemplateDataProvider rowDataProvider1=new GuidedDTTemplateDataProvider(allColumns,rowDTModel1);
  p.doConditions(allColumns,allPatterns,rowDataProvider1,rowDTModel1,DataUtilities.makeDataLists(data),rm);
  String drl1=BRDRLPersistence.getInstance().marshal(rm);
  assertEquals(2,rm.lhs.length);
  assertEquals("Person",((FactPattern)rm.lhs[0]).getFactType());
  assertEquals("p1",((FactPattern)rm.lhs[0]).getBoundName());
  assertEquals("Person",((FactPattern)rm.lhs[1]).getFactType());
  assertEquals("p2",((FactPattern)rm.lhs[1]).getBoundName());
  assertTrue(drl1.indexOf("p1 : Person( dateOfBirth == \"01-Feb-1981\" )") > 0);
  assertTrue(drl1.indexOf("p2 : Person( dateOfBirth != \"21-Jun-1986\" )") > 0);
  TemplateDataProvider rowDataProvider2=new GuidedDTTemplateDataProvider(allColumns,rowDTModel2);
  p.doConditions(allColumns,allPatterns,rowDataProvider2,rowDTModel2,DataUtilities.makeDataLists(data),rm);
  String drl2=BRDRLPersistence.getInstance().marshal(rm);
  assertEquals(2,rm.lhs.length);
  assertEquals("Person",((FactPattern)rm.lhs[0]).getFactType());
  assertEquals("p1",((FactPattern)rm.lhs[0]).getBoundName());
  assertEquals("Person",((FactPattern)rm.lhs[1]).getFactType());
  assertEquals("p2",((FactPattern)rm.lhs[1]).getBoundName());
  assertTrue(drl2.indexOf("p1 : Person( dateOfBirth not in ( \"01-Jan-1980\", \"01-Feb-1981\" )") > 0);
  assertTrue(drl2.indexOf("p2 : Person( dateOfBirth in ( \"20-Jun-1985\", \"21-Jun-1986\" )") > 0);
}
