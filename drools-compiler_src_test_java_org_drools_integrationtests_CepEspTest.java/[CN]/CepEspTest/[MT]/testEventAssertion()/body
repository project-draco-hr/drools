{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newInputStreamResource(getClass().getResourceAsStream("test_CEP_SimpleEventAssertion.drl")),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  KnowledgeSessionConfiguration conf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  conf.setOption(ClockTypeOption.get("pseudo"));
  StatefulKnowledgeSession session=kbase.newStatefulKnowledgeSession(conf,null);
  SessionPseudoClock clock=(SessionPseudoClock)session.<SessionClock>getSessionClock();
  final List results=new ArrayList();
  session.setGlobal("results",results);
  StockTickInterface tick1=new StockTick(1,"DROO",50,10000);
  StockTickInterface tick2=new StockTick(2,"ACME",10,10010);
  StockTickInterface tick3=new StockTick(3,"ACME",10,10100);
  StockTickInterface tick4=new StockTick(4,"DROO",50,11000);
  InternalFactHandle handle1=(InternalFactHandle)session.insert(tick1);
  clock.advanceTime(10,TimeUnit.SECONDS);
  InternalFactHandle handle2=(InternalFactHandle)session.insert(tick2);
  clock.advanceTime(30,TimeUnit.SECONDS);
  InternalFactHandle handle3=(InternalFactHandle)session.insert(tick3);
  clock.advanceTime(20,TimeUnit.SECONDS);
  InternalFactHandle handle4=(InternalFactHandle)session.insert(tick4);
  clock.advanceTime(10,TimeUnit.SECONDS);
  assertNotNull(handle1);
  assertNotNull(handle2);
  assertNotNull(handle3);
  assertNotNull(handle4);
  assertTrue(handle1.isEvent());
  assertTrue(handle2.isEvent());
  assertTrue(handle3.isEvent());
  assertTrue(handle4.isEvent());
  session.fireAllRules();
  assertEquals(2,((List)session.getGlobal("results")).size());
}
