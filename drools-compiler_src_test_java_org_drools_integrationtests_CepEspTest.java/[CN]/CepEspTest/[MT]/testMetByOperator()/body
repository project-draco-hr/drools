{
  final Reader reader=new InputStreamReader(getClass().getResourceAsStream("test_CEP_MetByOperator.drl"));
  final KnowledgeBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(EventProcessingOption.STREAM);
  final KnowledgeBase kbase=loadKnowledgeBase(reader,kconf);
  KnowledgeSessionConfiguration sconf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  sconf.setOption(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(sconf,null);
  final PseudoClockScheduler clock=(PseudoClockScheduler)ksession.<PseudoClockScheduler>getSessionClock();
  clock.setStartupTime(1000);
  AgendaEventListener ael=mock(AgendaEventListener.class);
  ksession.addEventListener(ael);
  StockTickInterface tick1=new StockTick(1,"DROO",50,System.currentTimeMillis(),3);
  StockTickInterface tick2=new StockTick(2,"ACME",10,System.currentTimeMillis(),3);
  StockTickInterface tick3=new StockTick(3,"ACME",10,System.currentTimeMillis(),3);
  StockTickInterface tick4=new StockTick(4,"DROO",50,System.currentTimeMillis(),5);
  StockTickInterface tick5=new StockTick(5,"ACME",10,System.currentTimeMillis(),5);
  StockTickInterface tick6=new StockTick(6,"ACME",10,System.currentTimeMillis(),3);
  StockTickInterface tick7=new StockTick(7,"ACME",10,System.currentTimeMillis(),5);
  StockTickInterface tick8=new StockTick(8,"ACME",10,System.currentTimeMillis(),3);
  InternalFactHandle fh1=(InternalFactHandle)ksession.insert(tick1);
  clock.advanceTime(4,TimeUnit.MILLISECONDS);
  InternalFactHandle fh2=(InternalFactHandle)ksession.insert(tick2);
  clock.advanceTime(4,TimeUnit.MILLISECONDS);
  ksession.insert(tick3);
  clock.advanceTime(4,TimeUnit.MILLISECONDS);
  ksession.insert(tick4);
  ksession.insert(tick5);
  clock.advanceTime(1,TimeUnit.MILLISECONDS);
  ksession.insert(tick6);
  ksession.insert(tick7);
  clock.advanceTime(2,TimeUnit.MILLISECONDS);
  ksession.insert(tick8);
  ArgumentCaptor<ActivationCreatedEvent> arg=ArgumentCaptor.forClass(ActivationCreatedEvent.class);
  verify(ael).activationCreated(arg.capture());
  Activation activation=arg.getValue().getActivation();
  assertThat(activation.getRule().getName(),is("metby"));
  ksession.fireAllRules();
  ArgumentCaptor<AfterActivationFiredEvent> aaf=ArgumentCaptor.forClass(AfterActivationFiredEvent.class);
  verify(ael).afterActivationFired(aaf.capture());
  assertThat((InternalFactHandle)aaf.getValue().getActivation().getFactHandles().toArray()[0],is(fh2));
}
