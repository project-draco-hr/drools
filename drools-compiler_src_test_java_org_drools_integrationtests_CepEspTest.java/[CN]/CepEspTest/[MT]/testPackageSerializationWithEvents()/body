{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newInputStreamResource(getClass().getResourceAsStream("test_CEP_SimpleEventAssertion.drl")),ResourceType.DRL);
  Collection<KnowledgePackage> pkgs=kbuilder.getKnowledgePackages();
  assertEquals(1,pkgs.size());
  KnowledgePackage kpkg=pkgs.iterator().next();
  Package internalPkg=((KnowledgePackageImp)kpkg).pkg;
  byte[] serializedPkg=DroolsStreamUtils.streamOut(internalPkg);
  KnowledgeBuilder kbuilder2=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder2.add(ResourceFactory.newByteArrayResource(serializedPkg),ResourceType.PKG);
  assertFalse(kbuilder2.getErrors().toString(),kbuilder2.hasErrors());
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder2.getKnowledgePackages());
  KnowledgeSessionConfiguration conf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  StatefulKnowledgeSession session=kbase.newStatefulKnowledgeSession(conf,null);
  final List<StockTick> results=new ArrayList<StockTick>();
  session.setGlobal("results",results);
  StockTickInterface tick1=new StockTick(1,"DROO",50,10000);
  StockTickInterface tick2=new StockTick(2,"ACME",10,10010);
  InternalFactHandle handle1=(InternalFactHandle)session.insert(tick1);
  InternalFactHandle handle2=(InternalFactHandle)session.insert(tick2);
  assertNotNull(handle1);
  assertNotNull(handle2);
  assertTrue(handle1.isEvent());
  assertTrue(handle2.isEvent());
  session.fireAllRules();
  assertEquals(1,results.size());
  assertEquals(tick2,results.get(0));
}
