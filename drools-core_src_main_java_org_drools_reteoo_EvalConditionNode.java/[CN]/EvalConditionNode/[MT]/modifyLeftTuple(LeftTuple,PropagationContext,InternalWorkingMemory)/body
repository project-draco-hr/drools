{
  final EvalMemory memory=(EvalMemory)workingMemory.getNodeMemory(this);
  boolean wasPropagated=false;
  if (memory.tupleMemory.contains(leftTuple)) {
    memory.tupleMemory.remove(leftTuple);
    wasPropagated=true;
  }
  final boolean allowed=this.condition.isAllowed(leftTuple,workingMemory,memory.context);
  if (allowed) {
    memory.tupleMemory.add(leftTuple);
    if (wasPropagated) {
      this.sink.propagateModifyChildLeftTuple(leftTuple,context,workingMemory,this.tupleMemoryEnabled);
    }
 else {
      this.sink.propagateAssertLeftTuple(leftTuple,context,workingMemory,this.tupleMemoryEnabled);
    }
  }
 else {
    if (wasPropagated) {
      this.sink.propagateRetractLeftTuple(leftTuple,context,workingMemory);
    }
  }
}
