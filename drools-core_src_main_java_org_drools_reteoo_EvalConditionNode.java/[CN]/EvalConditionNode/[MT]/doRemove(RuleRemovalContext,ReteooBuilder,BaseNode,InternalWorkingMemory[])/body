{
  if (!node.isInUse()) {
    removeTupleSink((LeftTupleSink)node);
  }
  if (!this.isInUse()) {
    for (    InternalWorkingMemory workingMemory : workingMemories) {
      workingMemory.clearNodeMemory(this);
    }
  }
 else {
    Entry<Rule,RuleComponent> next=this.getAssociations().entrySet().iterator().next();
    this.condition=(EvalCondition)next.getValue();
  }
  this.leftInput.remove(context,builder,this,workingMemories);
}
