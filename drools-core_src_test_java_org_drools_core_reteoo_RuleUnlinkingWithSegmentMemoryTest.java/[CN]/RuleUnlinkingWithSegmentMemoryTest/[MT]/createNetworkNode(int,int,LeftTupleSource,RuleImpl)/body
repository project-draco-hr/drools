{
  MockObjectSource mockObjectSource=new MockObjectSource(8);
  LeftTupleSink networkNode=null;
switch (type) {
case JOIN_NODE:
{
      networkNode=new JoinNode(id,leftTupleSource,mockObjectSource,new EmptyBetaConstraints(),buildContext);
      break;
    }
case EXISTS_NODE:
{
    networkNode=new ExistsNode(id,leftTupleSource,mockObjectSource,new EmptyBetaConstraints(),buildContext);
    break;
  }
case NOT_NODE:
{
  networkNode=new NotNode(id,leftTupleSource,mockObjectSource,new EmptyBetaConstraints(),buildContext);
  break;
}
case RULE_TERMINAL_NODE:
{
networkNode=new RuleTerminalNode(id,leftTupleSource,rule,new GroupElement(Type.AND),0,buildContext);
break;
}
}
mockObjectSource.attach();
if (NodeTypeEnums.isLeftTupleSource(networkNode)) {
((LeftTupleSource)networkNode).attach(buildContext);
}
 else {
((RuleTerminalNode)networkNode).attach(buildContext);
}
return networkNode;
}
