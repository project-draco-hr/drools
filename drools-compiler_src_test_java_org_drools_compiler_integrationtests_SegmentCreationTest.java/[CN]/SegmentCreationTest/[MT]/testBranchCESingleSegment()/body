{
  KnowledgeBase kbase=buildKnowledgeBase("   $a : A() \n" + "   if ( $a != null ) do[t1] \n" + "   B() \n");
  InternalWorkingMemory wm=((InternalWorkingMemory)kbase.newStatefulKnowledgeSession());
  ObjectTypeNode aotn=getObjectTypeNode(kbase,LinkingTest.A.class);
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)aotn.getSinkPropagator().getSinks()[0];
  ConditionalBranchNode cen1Node=(ConditionalBranchNode)liaNode.getSinkPropagator().getSinks()[0];
  JoinNode bNode=(JoinNode)cen1Node.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn1=(RuleTerminalNode)bNode.getSinkPropagator().getSinks()[0];
  FactHandle bFh=wm.insert(new LinkingTest.B());
  wm.flushPropagations();
  LiaNodeMemory liaMem=(LiaNodeMemory)wm.getNodeMemory(liaNode);
  SegmentMemory smem=liaMem.getSegmentMemory();
  assertEquals(1,smem.getAllLinkedMaskTest());
  assertEquals(4,smem.getLinkedNodeMask());
  assertFalse(smem.isSegmentLinked());
  PathMemory pmem=(PathMemory)wm.getNodeMemory(rtn1);
  assertEquals(1,pmem.getAllLinkedMaskTest());
  assertEquals(0,pmem.getLinkedSegmentMask());
  assertFalse(pmem.isRuleLinked());
  wm.insert(new LinkingTest.A());
  wm.flushPropagations();
  assertEquals(5,smem.getLinkedNodeMask());
  assertTrue(smem.isSegmentLinked());
  assertEquals(1,pmem.getLinkedSegmentMask());
  assertTrue(pmem.isRuleLinked());
  wm.delete(bFh);
  wm.flushPropagations();
  assertEquals(1,pmem.getLinkedSegmentMask());
  assertTrue(pmem.isRuleLinked());
}
