{
  KnowledgeBase kbase=buildKnowledgeBase("   $a : A() \n","   $a : A() \n" + "   if ( $a != null ) do[t1] \n" + "   B() \n","   $a : A() \n" + "   if ( $a != null ) do[t1] \n" + "   B() \n"+ "   C() \n");
  InternalWorkingMemory wm=((InternalWorkingMemory)kbase.newStatefulKnowledgeSession());
  ObjectTypeNode aotn=getObjectTypeNode(kbase,LinkingTest.A.class);
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)aotn.getSinkPropagator().getSinks()[0];
  ConditionalBranchNode cen1Node=(ConditionalBranchNode)liaNode.getSinkPropagator().getSinks()[1];
  JoinNode bNode=(JoinNode)cen1Node.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn2=(RuleTerminalNode)bNode.getSinkPropagator().getSinks()[0];
  JoinNode cNode=(JoinNode)bNode.getSinkPropagator().getSinks()[1];
  RuleTerminalNode rtn3=(RuleTerminalNode)cNode.getSinkPropagator().getSinks()[0];
  FactHandle bFh=wm.insert(new LinkingTest.B());
  FactHandle cFh=wm.insert(new LinkingTest.C());
  wm.flushPropagations();
  BetaMemory bNodeBm=(BetaMemory)wm.getNodeMemory(bNode);
  SegmentMemory bNodeSmem=bNodeBm.getSegmentMemory();
  assertEquals(0,bNodeSmem.getAllLinkedMaskTest());
  assertEquals(2,bNodeSmem.getLinkedNodeMask());
  PathMemory pmemr2=(PathMemory)wm.getNodeMemory(rtn2);
  assertEquals(1,pmemr2.getAllLinkedMaskTest());
  assertEquals(2,pmemr2.getLinkedSegmentMask());
  assertEquals(3,pmemr2.getSegmentMemories().length);
  assertFalse(pmemr2.isRuleLinked());
  PathMemory pmemr3=(PathMemory)wm.getNodeMemory(rtn3);
  assertEquals(1,pmemr3.getAllLinkedMaskTest());
  assertEquals(3,pmemr3.getSegmentMemories().length);
  assertFalse(pmemr3.isRuleLinked());
  BetaMemory cNodeBm=(BetaMemory)wm.getNodeMemory(cNode);
  SegmentMemory cNodeSmem=cNodeBm.getSegmentMemory();
  assertEquals(1,cNodeSmem.getAllLinkedMaskTest());
  assertEquals(1,cNodeSmem.getLinkedNodeMask());
  wm.insert(new LinkingTest.A());
  wm.flushPropagations();
  assertTrue(pmemr2.isRuleLinked());
  assertTrue(pmemr3.isRuleLinked());
  wm.delete(bFh);
  wm.delete(cFh);
  wm.flushPropagations();
  assertEquals(3,pmemr2.getLinkedSegmentMask());
  assertTrue(pmemr2.isRuleLinked());
  assertEquals(3,pmemr3.getLinkedSegmentMask());
  assertTrue(pmemr3.isRuleLinked());
}
