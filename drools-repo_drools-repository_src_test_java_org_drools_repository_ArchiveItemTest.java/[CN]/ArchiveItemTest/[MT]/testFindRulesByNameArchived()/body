{
  RulesRepository repo=RepositorySessionUtil.getRepository();
  repo.loadDefaultPackage().addAsset("findRulesByNameArchived1","X");
  repo.loadDefaultPackage().addAsset("findRulesByNameArchived2","X");
  repo.save();
  AssetItem item2=RepositorySessionUtil.getRepository().loadDefaultPackage().loadAsset("findRulesByNameArchived1");
  assertFalse(item2.isArchived());
  item2.archiveItem(true);
  List list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived1"));
  assertEquals(1,list.size());
  list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived1",true));
  assertEquals(1,list.size());
  list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived2"));
  assertEquals(1,list.size());
  list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived%"));
  assertEquals(2,list.size());
  repo.createPackageSnapshot(RulesRepository.DEFAULT_PACKAGE,"testFindRulesByName2");
  repo.save();
  list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived2"));
  AssetItem item=(AssetItem)list.get(0);
  assertEquals("findRulesByNameArchived2",item.getName());
  assertEquals("X",item.getDescription());
  assertEquals(1,list.size());
  list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived1",true));
  assertEquals(1,list.size());
  list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived1"));
  assertEquals(0,list.size());
  list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived%"));
  assertEquals(1,list.size());
  list=iteratorToList(repo.findAssetsByName("findRulesByNameArchived%",true));
  assertEquals(2,list.size());
}
