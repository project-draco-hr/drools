{
  AbstractRuleBase ruleBase=(AbstractRuleBase)RuleBaseFactory.newRuleBase();
  InternalWorkingMemory workingMemory=new ReteooWorkingMemory(1,ruleBase);
  RuleFlowProcessInstance processInstance=new RuleFlowProcessInstance(){
    public void signalEvent(    String type,    Object event){
      if ("timerTriggered".equals(type)) {
        Timer timer=(Timer)event;
        System.out.println("Timer " + timer.getId() + " triggered");
        counter++;
      }
    }
  }
;
  processInstance.setId(1234);
  workingMemory.addProcessInstance(processInstance);
  TimerManager timerManager=workingMemory.getTimerManager();
  Timer timer=new Timer();
  timerManager.registerTimer(timer,processInstance);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(1,counter);
  counter=0;
  timer=new Timer();
  timer.setDelay(500);
  timerManager.registerTimer(timer,processInstance);
  assertEquals(0,counter);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(1,counter);
  counter=0;
  timer=new Timer();
  timer.setDelay(500);
  timer.setPeriod(300);
  timerManager.registerTimer(timer,processInstance);
  assertEquals(0,counter);
  try {
    Thread.sleep(700);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(1,counter);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  assertTrue(counter >= 4);
  timerManager.cancelTimer(timer);
  int lastCount=counter;
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(lastCount,counter);
}
