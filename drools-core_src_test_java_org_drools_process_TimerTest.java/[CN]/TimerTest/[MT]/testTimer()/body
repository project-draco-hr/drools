{
  AbstractRuleBase ruleBase=(AbstractRuleBase)RuleBaseFactory.newRuleBase();
  ExecutorService executorService=new DefaultExecutorService();
  final StatefulSession workingMemory=new ReteooStatefulSession(1,ruleBase,executorService);
  executorService.setCommandExecutor(new CommandExecutor(workingMemory));
  RuleFlowProcessInstance processInstance=new RuleFlowProcessInstance(){
    private static final long serialVersionUID=4L;
    public void signalEvent(    String type,    Object event){
      if ("timerTriggered".equals(type)) {
        TimerInstance timer=(TimerInstance)event;
        System.out.println("Timer " + timer.getId() + " triggered");
        counter++;
      }
    }
  }
;
  processInstance.setWorkingMemory((InternalWorkingMemory)workingMemory);
  processInstance.setId(1234);
  ((InternalWorkingMemory)workingMemory).getProcessInstanceManager().internalAddProcessInstance(processInstance);
  new Thread(new Runnable(){
    public void run(){
      workingMemory.fireUntilHalt();
    }
  }
).start();
  TimerManager timerManager=workingMemory.getTimerManager();
  TimerInstance timer=new TimerInstance();
  timerManager.registerTimer(timer,processInstance);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(1,counter);
  counter=0;
  timer=new TimerInstance();
  timer.setDelay(500);
  timerManager.registerTimer(timer,processInstance);
  assertEquals(0,counter);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(1,counter);
  counter=0;
  timer=new TimerInstance();
  timer.setDelay(500);
  timer.setPeriod(300);
  timerManager.registerTimer(timer,processInstance);
  assertEquals(0,counter);
  try {
    Thread.sleep(700);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(1,counter);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  assertTrue(counter >= 4);
  timerManager.cancelTimer(timer.getId());
  int lastCount=counter;
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  assertEquals(lastCount,counter);
}
