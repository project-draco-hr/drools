{
  this.attachingNewNode=true;
  TupleSource source=null;
  for (Iterator it=this.getTupleSinks().iterator(); it.hasNext(); ) {
    source=(TupleSource)it.next();
    if (source.hasMemory) {
      break;
    }
  }
  if (source != null && source.hasMemory()) {
    Object object=workingMemory.getNodeMemory((NodeMemory)source);
    if (object instanceof BetaMemory) {
      BetaMemory memory=(BetaMemory)object;
      memory.getLeftMemory();
      for (Iterator it=memory.getLeftMemory().values().iterator(); it.hasNext(); ) {
        ReteTuple tuple=((TupleMatches)it.next()).getTuple();
        propagateAssertTuple(tuple,context,workingMemory);
      }
    }
 else     if (object instanceof Map) {
      Map map=(Map)object;
      for (Iterator it=map.values().iterator(); it.hasNext(); ) {
        propagateAssertTuple((ReteTuple)it.next(),context,workingMemory);
      }
    }
  }
 else {
    BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
    Map map=memory.getLeftMemory();
    Set set=memory.getRightMemory();
    workingMemory.clearNodeMemory(this);
    memory=(BetaMemory)workingMemory.getNodeMemory(this);
    for (Iterator it=set.iterator(); it.hasNext(); ) {
      FactHandleImpl handle=(FactHandleImpl)it.next();
      Object object=workingMemory.getObject(handle);
      assertObject(object,handle,context,workingMemory);
    }
    for (Iterator it=map.values().iterator(); it.hasNext(); ) {
      ReteTuple tuple=((TupleMatches)it.next()).getTuple();
      assertTuple(tuple,context,workingMemory);
    }
  }
  this.attachingNewNode=true;
}
