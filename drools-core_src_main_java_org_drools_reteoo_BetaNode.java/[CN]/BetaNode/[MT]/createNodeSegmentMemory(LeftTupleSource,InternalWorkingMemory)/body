{
  while (parentInSameSegment(tupleSource)) {
    tupleSource=tupleSource.getLeftTupleSource();
  }
  LeftTupleSource segmentRoot=tupleSource;
  SegmentMemory smem=new SegmentMemory();
  long nodePosMask=1;
  long allLinkedTestMask=0;
  while (true) {
    if (NodeTypeEnums.isBetaNode(tupleSource)) {
      BetaMemory betaMemory;
      if (NodeTypeEnums.AccumulateNode == tupleSource.getType()) {
        betaMemory=((AccumulateMemory)wm.getNodeMemory((AccumulateNode)tupleSource)).getBetaMemory();
      }
 else {
        betaMemory=(BetaMemory)wm.getNodeMemory((BetaNode)tupleSource);
      }
      betaMemory.createStagingMemory();
      betaMemory.setSegmentMemory(smem);
      betaMemory.setNodePosMaskBit(nodePosMask);
      allLinkedTestMask=allLinkedTestMask | nodePosMask;
      if (NodeTypeEnums.NotNode == tupleSource.getType() || NodeTypeEnums.AccumulateNode == tupleSource.getType()) {
        smem.linkNode(nodePosMask,wm);
      }
      nodePosMask=nodePosMask << 1;
    }
 else     if (tupleSource.getType() == NodeTypeEnums.LeftInputAdapterNode) {
      LiaNodeMemory liaMemory=(LiaNodeMemory)wm.getNodeMemory((LeftInputAdapterNode)tupleSource);
      liaMemory.setSegmentMemory(smem);
      liaMemory.setNodePosMaskBit(nodePosMask);
      allLinkedTestMask=allLinkedTestMask | nodePosMask;
      nodePosMask=nodePosMask << 1;
    }
    if (tupleSource.sink.getSinks().length == 1) {
      if (NodeTypeEnums.isLeftTupleSource(tupleSource.sink.getSinks()[0])) {
        tupleSource=(LeftTupleSource)tupleSource.sink.getSinks()[0];
      }
 else {
        break;
      }
    }
 else     if (tupleSource.sink.getSinks().length == 2 && NodeTypeEnums.isBetaNode(tupleSource.sink.getSinks()[1]) && ((BetaNode)tupleSource.sink.getSinks()[1]).isRightInputIsRiaNode()) {
      tupleSource=(LeftTupleSource)tupleSource.sink.getSinks()[1];
    }
 else {
      break;
    }
  }
  smem.setAllLinkedMaskTest(allLinkedTestMask);
  LeftTupleSource parent=segmentRoot;
  int ruleSegmentPosMask=1;
  int counter=0;
  while (parent.getLeftTupleSource() != null) {
    if (!parentInSameSegment(parent)) {
      ruleSegmentPosMask=ruleSegmentPosMask << 1;
      counter++;
    }
    parent=parent.getLeftTupleSource();
  }
  smem.setSegmentPosMaskBit(ruleSegmentPosMask);
  smem.setPos(counter);
  updateRiaAndTerminalMemory(0,tupleSource,tupleSource,smem,wm);
  if (smem.isSegmentLinked()) {
    smem.notifyRuleLinkSegment(wm);
  }
}
