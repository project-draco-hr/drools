{
  LinkedList constraints=this.constraints.getConstraints();
  BetaMemory memory=null;
  if (constraints != null) {
    for (LinkedListEntry entry=(LinkedListEntry)constraints.getFirst(); entry != null; entry=(LinkedListEntry)entry.getNext()) {
      BetaNodeFieldConstraint constraint=(BetaNodeFieldConstraint)entry.getObject();
      if (constraint.getClass() == VariableConstraint.class) {
        VariableConstraint variableConstraint=(VariableConstraint)constraint;
        FieldExtractor extractor=variableConstraint.getFieldExtractor();
        Evaluator evaluator=variableConstraint.getEvaluator();
        if (evaluator.getOperator() == Operator.EQUAL) {
          if (constraints.getFirst() != entry) {
            constraints.remove(entry);
            constraints.insertAfter(null,entry);
          }
          memory=new BetaMemory(new TupleHashTable(),new FieldIndexHashTable(extractor,variableConstraint.getRequiredDeclarations()[0]));
          break;
        }
      }
    }
  }
  if (memory == null) {
    memory=new BetaMemory(new TupleHashTable(),new FactHashTable());
  }
  return memory;
}
