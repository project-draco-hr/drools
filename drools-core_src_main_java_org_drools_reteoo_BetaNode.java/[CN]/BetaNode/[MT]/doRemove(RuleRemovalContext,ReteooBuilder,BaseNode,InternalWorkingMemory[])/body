{
  if (!node.isInUse()) {
    removeTupleSink((LeftTupleSink)node);
  }
  if (!this.isInUse() || context.getCleanupAdapter() != null) {
    for (int i=0, length=workingMemories.length; i < length; i++) {
      BetaMemory memory;
      Object object=workingMemories[i].getNodeMemory(this);
      if (object instanceof AccumulateMemory) {
        memory=((AccumulateMemory)object).betaMemory;
      }
 else {
        memory=(BetaMemory)object;
      }
      FastIterator it=memory.getLeftTupleMemory().fullFastIterator();
      for (LeftTuple leftTuple=getFirstLeftTuple(memory.getLeftTupleMemory(),it); leftTuple != null; ) {
        LeftTuple tmp=(LeftTuple)it.next(leftTuple);
        if (context.getCleanupAdapter() != null) {
          for (LeftTuple child=leftTuple.getFirstChild(); child != null; child=child.getLeftParentNext()) {
            if (child.getLeftTupleSink() == this) {
              leftTuple.unlinkFromLeftParent();
              leftTuple.unlinkFromRightParent();
            }
 else {
              context.getCleanupAdapter().cleanUp(child,workingMemories[i]);
            }
          }
        }
        memory.getLeftTupleMemory().remove(leftTuple);
        leftTuple.unlinkFromLeftParent();
        leftTuple.unlinkFromRightParent();
        leftTuple=tmp;
      }
      if (object instanceof AccumulateMemory) {
        ((AccumulateNode)this).doRemove(workingMemories[i],(AccumulateMemory)object);
      }
      if (!this.isInUse()) {
        it=memory.getRightTupleMemory().fullFastIterator();
        for (RightTuple rightTuple=getFirstRightTuple(memory.getRightTupleMemory(),it); rightTuple != null; ) {
          RightTuple tmp=(RightTuple)it.next(rightTuple);
          if (rightTuple.getBlocked() != null) {
            for (LeftTuple leftTuple=rightTuple.getBlocked(); leftTuple != null; ) {
              LeftTuple temp=leftTuple.getBlockedNext();
              leftTuple.setBlocker(null);
              leftTuple.setBlockedPrevious(null);
              leftTuple.setBlockedNext(null);
              leftTuple.unlinkFromLeftParent();
              leftTuple=temp;
            }
          }
          memory.getRightTupleMemory().remove(rightTuple);
          rightTuple.unlinkFromRightParent();
          rightTuple=tmp;
        }
        workingMemories[i].clearNodeMemory(this);
      }
    }
    context.setCleanupAdapter(null);
  }
  this.rightInput.remove(context,builder,this,workingMemories);
  this.leftInput.remove(context,builder,this,workingMemories);
}
