{
  String file="[consequence][$policy]Add surcharge {surcharge} to Policy=modify(policy) \\{price = {surcharge}\\}";
  try {
    final Reader reader=new StringReader(file);
    this.file=new DSLTokenizedMappingFile();
    final boolean parsingResult=this.file.parseAndLoad(reader);
    reader.close();
    assertTrue(this.file.getErrors().toString(),parsingResult);
    assertTrue(this.file.getErrors().isEmpty());
    assertEquals(1,this.file.getMapping().getEntries().size());
    DSLMappingEntry entry=(DSLMappingEntry)this.file.getMapping().getEntries().get(0);
    assertEquals(DSLMappingEntry.CONSEQUENCE,entry.getSection());
    assertEquals("$policy",entry.getMetaData().toString());
    assertEquals("Add surcharge {surcharge} to Policy",entry.getMappingKey());
    assertEquals("modify(policy) \\{price = {surcharge}\\}",entry.getMappingValue());
    String input="rule x\nwhen\nthen\nAdd surcharge 300 to Policy\nend\n";
    String expected="rule x\nwhen\nthen\nmodify(policy) {price = 300}\nend\n";
    DefaultExpander de=new DefaultExpander();
    de.addDSLMapping(this.file.getMapping());
    final String result=de.expand(input);
    assertEquals(expected,result);
  }
 catch (  final IOException e) {
    e.printStackTrace();
    fail("Should not raise exception ");
  }
}
