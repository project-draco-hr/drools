{
  final LeapsRuleBase ruleBase=(LeapsRuleBase)RuleBaseFactory.newRuleBase(RuleBase.LEAPS);
  final ClassObjectType cheeseObjectType=new ClassObjectType(Cheese.class);
  final Evaluator evaluator=ValueType.STRING_TYPE.getEvaluator(Operator.EQUAL);
  final Query query=new Query("query-1");
  final Column cheeseColumn=new Column(0,cheeseObjectType,"cheese");
  cheeseColumn.addConstraint(getLiteralConstraint(cheeseColumn,"type","stilton",evaluator));
  query.addPattern(cheeseColumn);
  ruleBase.addRule(query);
  final WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  workingMemory.fireAllRules();
  LeapsQueryResults results=(LeapsQueryResults)workingMemory.getQueryResults("query-1");
  assertNull(results);
  final Cheese stilton1=new Cheese("stilton",100);
  final FactHandle handle1=workingMemory.assertObject(stilton1);
  workingMemory.fireAllRules();
  results=(LeapsQueryResults)workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  final Cheese cheddar=new Cheese("cheddar",55);
  workingMemory.assertObject(cheddar);
  workingMemory.fireAllRules();
  results=(LeapsQueryResults)workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  final Cheese stilton2=new Cheese("stilton",5);
  final FactHandle handle2=workingMemory.assertObject(stilton2);
  workingMemory.fireAllRules();
  results=(LeapsQueryResults)workingMemory.getQueryResults("query-1");
  assertEquals(2,results.size());
  LeapsQueryResult result=(LeapsQueryResult)results.get(0);
  assertEquals(1,result.size());
  boolean wasStilton1=(stilton1 == result.get(0));
  result=(LeapsQueryResult)results.get(1);
  boolean wasStilton2=(stilton2 == result.get(0));
  assertEquals(1,result.size());
  assertTrue((wasStilton1 && wasStilton2) || (!wasStilton1 && !wasStilton2));
  Object result1=null, result2=null;
  int i=0;
  for (final Iterator it=results.iterator(); it.hasNext(); ) {
    result=(LeapsQueryResult)it.next();
    assertEquals(1,result.size());
    if (i == 0) {
      result1=result.get(0);
    }
 else {
      result2=result.get(0);
    }
    i++;
  }
  wasStilton1=(stilton1 == result1);
  wasStilton2=(stilton2 == result2);
  assertTrue((wasStilton1 && wasStilton2) || (!wasStilton1 && !wasStilton2));
  workingMemory.retractObject(handle1);
  workingMemory.fireAllRules();
  results=(LeapsQueryResults)workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  workingMemory.retractObject(handle2);
  workingMemory.fireAllRules();
  results=(LeapsQueryResults)workingMemory.getQueryResults("query-1");
  assertNull(results);
}
