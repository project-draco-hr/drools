{
  if (previous) {
    mv.visitLdcInsn(", ");
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(StringBuilder.class),"append","(Ljava/lang/String;)Ljava/lang/StringBuilder;");
  }
  mv.visitLdcInsn(field.getName());
  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(StringBuilder.class),"append","(Ljava/lang/String;)Ljava/lang/StringBuilder;");
  mv.visitLdcInsn("=");
  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(StringBuilder.class),"append","(Ljava/lang/String;)Ljava/lang/StringBuilder;");
  mv.visitVarInsn(Opcodes.ALOAD,0);
  visitFieldOrGetter(mv,classDef,field);
  if (BuildUtils.isPrimitive(field.getTypeName())) {
    String type=field.getTypeName().matches("(byte|short)") ? "int" : field.getTypeName();
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(StringBuilder.class),"append",Type.getMethodDescriptor(Type.getType(StringBuilder.class),new Type[]{Type.getType(BuildUtils.getTypeDescriptor(type))}));
  }
 else   if (BuildUtils.isArray(field.getTypeName()) && BuildUtils.arrayDimSize(field.getTypeName()) == 1) {
    mv.visitMethodInsn(INVOKESTATIC,"java/util/Arrays","toString","(" + BuildUtils.getTypeDescriptor(BuildUtils.arrayType(field.getTypeName())) + ")Ljava/lang/String;");
    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/Object;)Ljava/lang/StringBuilder;");
  }
 else {
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(StringBuilder.class),"append",Type.getMethodDescriptor(Type.getType(StringBuilder.class),new Type[]{Type.getType(Object.class)}));
  }
  previous=true;
  return previous;
}
