{
  mv.visitVarInsn(Opcodes.ALOAD,0);
  String sup="";
  try {
    sup=Type.getInternalName(Class.forName(classDef.getSuperClass()));
  }
 catch (  ClassNotFoundException e) {
    sup=BuildUtils.getInternalType(classDef.getSuperClass());
  }
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,sup,"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{}));
  int index=1;
  for (  FieldDefinition field : fieldDefs) {
    if (this.debug) {
      Label l11=new Label();
      mv.visitLabel(l11);
    }
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Type.getType(BuildUtils.getTypeDescriptor(field.getTypeName())).getOpcode(Opcodes.ILOAD),index++);
    if (field.getTypeName().equals("long") || field.getTypeName().equals("double")) {
      index++;
    }
    if (!field.isInherited()) {
      mv.visitFieldInsn(Opcodes.PUTFIELD,BuildUtils.getInternalType(classDef.getClassName()),field.getName(),BuildUtils.getTypeDescriptor(field.getTypeName()));
    }
 else {
      mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,BuildUtils.getInternalType(classDef.getClassName()),field.getWriteMethod(),Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.getType(BuildUtils.getTypeDescriptor(field.getTypeName()))}));
    }
  }
  if (classDef.isTraitable()) {
    initializeDynamicTypeStructures(mv,classDef);
  }
}
