{
  MethodVisitor mv;
{
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{}),null,null);
    mv.visitCode();
    Label l0=null;
    if (this.debug) {
      l0=new Label();
      mv.visitLabel(l0);
    }
    mv.visitVarInsn(Opcodes.ALOAD,0);
    String sup="";
    try {
      sup=Type.getInternalName(Class.forName(classDef.getSuperClass()));
    }
 catch (    ClassNotFoundException e) {
      sup=BuildUtils.getInternalType(classDef.getSuperClass());
    }
    mv.visitMethodInsn(Opcodes.INVOKESPECIAL,sup,"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{}));
    boolean hasObjects=false;
    for (    FieldDefinition field : classDef.getFieldsDefinitions()) {
      if (!field.isInherited()) {
        Object val=BuildUtils.getDefaultValue(field);
        if (val != null) {
          mv.visitVarInsn(Opcodes.ALOAD,0);
          if (BuildUtils.isPrimitive(field.getTypeName()) || BuildUtils.isBoxed(field.getTypeName()) || String.class.getName().equals(field.getTypeName())) {
            mv.visitLdcInsn(val);
            if (BuildUtils.isBoxed(field.getTypeName())) {
              mv.visitMethodInsn(Opcodes.INVOKESTATIC,BuildUtils.getInternalType(field.getTypeName()),"valueOf","(" + BuildUtils.unBox(field.getTypeName()) + ")"+ BuildUtils.getTypeDescriptor(field.getTypeName()));
            }
          }
 else {
            hasObjects=true;
            String type=BuildUtils.getInternalType(val.getClass().getName());
            mv.visitTypeInsn(NEW,type);
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL,type,"<init>","()V");
          }
          mv.visitFieldInsn(Opcodes.PUTFIELD,BuildUtils.getInternalType(classDef.getClassName()),field.getName(),BuildUtils.getTypeDescriptor(field.getTypeName()));
        }
      }
    }
    if (classDef.isTraitable()) {
      initializeDynamicTypeStructures(mv,classDef);
    }
    mv.visitInsn(Opcodes.RETURN);
    Label l1=null;
    if (this.debug) {
      l1=new Label();
      mv.visitLabel(l1);
      mv.visitLocalVariable("this",BuildUtils.getTypeDescriptor(classDef.getClassName()),null,l0,l1,0);
    }
    mv.visitMaxs(hasObjects ? 3 : 0,hasObjects ? 1 : 0);
    mv.visitEnd();
  }
}
