{
  Object val=BuildUtils.getDefaultValue(field);
  boolean hasObjects=false;
  if (val != null) {
    mv.visitVarInsn(Opcodes.ALOAD,0);
    if (BuildUtils.isPrimitive(field.getTypeName()) || BuildUtils.isBoxed(field.getTypeName()) || String.class.getName().equals(field.getTypeName())) {
      mv.visitLdcInsn(val);
      if (BuildUtils.isBoxed(field.getTypeName())) {
        mv.visitMethodInsn(Opcodes.INVOKESTATIC,BuildUtils.getInternalType(field.getTypeName()),"valueOf","(" + BuildUtils.unBox(field.getTypeName()) + ")"+ BuildUtils.getTypeDescriptor(field.getTypeName()));
      }
    }
 else {
      hasObjects=true;
      String type=BuildUtils.getInternalType(val.getClass().getName());
      mv.visitTypeInsn(NEW,type);
      mv.visitInsn(DUP);
      mv.visitMethodInsn(INVOKESPECIAL,type,"<init>","()V");
    }
  }
 else {
    if (field.getInitExpr() != null) {
      mv.visitVarInsn(ALOAD,0);
      mv.visitLdcInsn(field.getInitExpr());
      mv.visitMethodInsn(INVOKESTATIC,"org/mvel2/MVEL","eval","(Ljava/lang/String;)Ljava/lang/Object;");
      mv.visitTypeInsn(CHECKCAST,BuildUtils.getInternalType(field.getTypeName()));
      val=field.getInitExpr();
    }
  }
  if (val != null) {
    if (!field.isInherited()) {
      mv.visitFieldInsn(Opcodes.PUTFIELD,BuildUtils.getInternalType(classDef.getClassName()),field.getName(),BuildUtils.getTypeDescriptor(field.getTypeName()));
    }
 else {
      mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,BuildUtils.getInternalType(classDef.getClassName()),field.getWriteMethod(),Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.getType(BuildUtils.getTypeDescriptor(field.getTypeName()))}));
    }
  }
  return hasObjects;
}
