{
  final AbstractWorkingMemory workingMemory=(AbstractWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final List list=new ArrayList();
  final Consequence consequence=new Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
      list.add(knowledgeHelper.getRule());
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
;
  final Rule rule0=new Rule("test-rule0");
  rule0.setAgendaGroup("rule-flow-group-0");
  rule0.setConsequence(consequence);
  final RuleTerminalNode node0=new RuleTerminalNode(3,new MockTupleSource(2),rule0,rule0.getLhs(),0,buildContext);
  final Rule rule1=new Rule("test-rule1");
  rule1.setAgendaGroup("rule-flow-group-1");
  rule1.setConsequence(consequence);
  final RuleTerminalNode node1=new RuleTerminalNode(4,new MockTupleSource(2),rule1,rule1.getLhs(),0,buildContext);
  final Rule rule2=new Rule("test-rule2");
  rule2.setAgendaGroup("rule-flow-group-2");
  rule2.setConsequence(consequence);
  rule2.setSalience(new SalienceInteger(10));
  final RuleTerminalNode node2=new RuleTerminalNode(5,new MockTupleSource(2),rule2,rule2.getLhs(),0,buildContext);
  final PropagationContext context0=pctxFactory.createPropagationContextImpl(0,PropagationContext.INSERTION,rule0,null,new DefaultFactHandle());
  final RuleFlowGroup ruleFlowGroup0=agenda.getRuleFlowGroup("rule-flow-group-0");
  final RuleFlowGroup ruleFlowGroup1=agenda.getRuleFlowGroup("rule-flow-group-1");
  final RuleFlowGroup ruleFlowGroup2=agenda.getRuleFlowGroup("rule-flow-group-2");
  final RuleTerminalNodeLeftTuple tuple0=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node0,true);
  node0.assertLeftTuple(tuple0,context0,workingMemory);
  final RuleTerminalNodeLeftTuple tuple1=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node1,true);
  node0.assertLeftTuple(tuple1,context0,workingMemory);
  final RuleTerminalNodeLeftTuple tuple2=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node2,true);
  node1.assertLeftTuple(tuple2,context0,workingMemory);
  final RuleTerminalNodeLeftTuple tuple3=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node0,true);
  node2.assertLeftTuple(tuple3,context0,workingMemory);
  agenda.unstageActivations();
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(1,ruleFlowGroup1.size());
  assertEquals(1,ruleFlowGroup2.size());
  assertEquals(4,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(4,agenda.agendaSize());
  agenda.fireNextItem(null,0,-1);
  assertEquals(1,ruleFlowGroup0.size());
  assertEquals(3,agenda.agendaSize());
  agenda.fireNextItem(null,0,-1);
  assertEquals(0,ruleFlowGroup0.size());
  assertEquals(2,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-1");
  agenda.activateRuleFlowGroup("rule-flow-group-2");
  assertEquals(1,ruleFlowGroup1.size());
  assertEquals(1,ruleFlowGroup2.size());
  assertEquals(2,agenda.agendaSize());
  agenda.fireNextItem(null,0,-1);
  assertEquals(1,ruleFlowGroup1.size());
  assertEquals(0,ruleFlowGroup2.size());
  assertEquals(1,agenda.agendaSize());
  agenda.fireNextItem(null,0,-1);
  assertEquals(0,ruleFlowGroup0.size());
  assertEquals(0,ruleFlowGroup1.size());
  assertEquals(0,ruleFlowGroup2.size());
  assertEquals(0,agenda.agendaSize());
}
