{
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final InternalAgendaGroup agendaGroup=new AgendaGroupQueueImpl("agendaGroup",ruleBase);
  agenda.addAgendaGroup(agendaGroup);
  final Rule rule=new Rule("test-rule","agendaGroup");
  final RuleTerminalNode node=new RuleTerminalNode(2,new MockTupleSource(2),rule,rule.getLhs(),0,buildContext);
  final RuleTerminalNodeLeftTuple tuple=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node,true);
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.INSERTION,rule,null,new DefaultFactHandle());
  rule.setLockOnActive(true);
  ((InternalRuleFlowGroup)agendaGroup).setAutoDeactivate(false);
  agendaGroup.setActive(true);
  node.assertLeftTuple(tuple,context,workingMemory);
  assertEquals(0,agendaGroup.size());
  rule.setLockOnActive(false);
  node.assertLeftTuple(tuple,context,workingMemory);
  agenda.unstageActivations();
  assertEquals(1,agendaGroup.size());
  rule.setLockOnActive(true);
  agendaGroup.setActive(false);
  node.assertLeftTuple(tuple,context,workingMemory);
  agenda.unstageActivations();
  assertEquals(2,agendaGroup.size());
}
