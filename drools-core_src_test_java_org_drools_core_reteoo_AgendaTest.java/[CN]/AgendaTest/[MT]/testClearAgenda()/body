{
  final AbstractWorkingMemory workingMemory=(AbstractWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final Rule rule1=new Rule("test-rule1");
  final Rule rule2=new Rule("test-rule2");
  final RuleTerminalNode node1=new RuleTerminalNode(3,new MockTupleSource(2),rule1,rule1.getLhs(),0,buildContext);
  final RuleTerminalNode node2=new RuleTerminalNode(5,new MockTupleSource(4),rule2,rule2.getLhs(),0,buildContext);
  final RuleTerminalNodeLeftTuple tuple1=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node1,true);
  final RuleTerminalNodeLeftTuple tuple2=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(2,"cheese"),node2,true);
  final PropagationContext context1=pctxFactory.createPropagationContextImpl(0,PropagationContext.INSERTION,rule1,null,new DefaultFactHandle());
  rule1.setConsequence(new org.drools.core.spi.Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
);
  rule2.setConsequence(new org.drools.core.spi.Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
);
  assertEquals(0,agenda.getFocus().size());
  rule1.setNoLoop(false);
  rule2.setTimer(new DurationTimer(5000));
  node1.assertLeftTuple(tuple1,context1,workingMemory);
  node2.assertLeftTuple(tuple2,context1,workingMemory);
  agenda.unstageActivations();
  assertEquals(1,agenda.getFocus().size());
  assertEquals(1,agenda.getScheduledActivations().length);
  agenda.clearAndCancel();
  assertEquals(0,agenda.getFocus().size());
  assertEquals(0,agenda.getScheduledActivations().length);
}
