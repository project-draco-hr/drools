{
  final AbstractWorkingMemory workingMemory=(AbstractWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final RuleFlowGroup ruleFlowGroup=(RuleFlowGroup)agenda.getRuleFlowGroup("rule-flow-group-0");
  final Rule rule=new Rule("test-rule");
  rule.setAgendaGroup("rule-flow-group-0");
  final RuleTerminalNode node=new RuleTerminalNode(2,new MockTupleSource(2),rule,rule.getLhs(),0,buildContext);
  final RuleTerminalNodeLeftTuple tuple1=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node,true);
  final RuleTerminalNodeLeftTuple tuple2=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node,true);
  final RuleTerminalNodeLeftTuple tuple3=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node,true);
  final PropagationContext context=pctxFactory.createPropagationContextImpl(0,PropagationContext.INSERTION,rule,null,new DefaultFactHandle());
  rule.setLockOnActive(true);
  ruleFlowGroup.setAutoDeactivate(false);
  ((InternalRuleFlowGroup)ruleFlowGroup).setActive(true);
  node.assertLeftTuple(tuple1,context,workingMemory);
  assertEquals(0,ruleFlowGroup.size());
  rule.setLockOnActive(false);
  node.assertLeftTuple(tuple2,context,workingMemory);
  agenda.unstageActivations();
  assertEquals(1,ruleFlowGroup.size());
  rule.setLockOnActive(true);
  ((InternalAgendaGroup)ruleFlowGroup).setActive(false);
  node.assertLeftTuple(tuple3,context,workingMemory);
  agenda.unstageActivations();
  assertEquals(2,ruleFlowGroup.size());
}
