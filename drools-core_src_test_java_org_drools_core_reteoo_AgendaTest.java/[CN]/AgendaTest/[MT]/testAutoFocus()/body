{
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final AgendaGroup agendaGroup=new BinaryHeapQueueAgendaGroup("agendaGroup",ruleBase);
  agenda.addAgendaGroup(agendaGroup);
  final Consequence consequence=new Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
;
  final LeftTupleImpl tuple=new LeftTupleImpl(new DefaultFactHandle(1,"cheese"),null,true);
  final Rule rule=new Rule("test-rule","agendaGroup");
  final RuleTerminalNode node=new RuleTerminalNode(2,new MockTupleSource(2),rule,rule.getLhs(),0,buildContext);
  rule.setConsequence(consequence);
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.INSERTION,rule,null,new DefaultFactHandle());
  rule.setAutoFocus(false);
  node.assertLeftTuple(tuple,context,workingMemory);
  agenda.unstageActivations();
  assertEquals(1,agendaGroup.size());
  agenda.fireNextItem(null,0,-1);
  assertEquals(1,agendaGroup.size());
  agenda.clearAndCancel();
  assertEquals(0,agendaGroup.size());
  rule.setAutoFocus(true);
  node.assertLeftTuple(tuple,context,workingMemory);
  agenda.unstageActivations();
  assertEquals(1,agendaGroup.size());
  agenda.fireNextItem(null,0,-1);
  assertEquals(0,agendaGroup.size());
}
