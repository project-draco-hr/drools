{
  int j=0;
  for (  FieldDefinition field : trait.getFieldsDefinitions()) {
    boolean isSoftField=TraitRegistry.isSoftField(field,j++,mask);
    if (isSoftField) {
      mv.visitVarInsn(ALOAD,varNum);
      mv.visitLdcInsn(field.resolveAlias());
      mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Map.class),"containsKey",Type.getMethodDescriptor(Type.getType(boolean.class),new Type[]{Type.getType(Object.class)}));
      Label l0=new Label();
      mv.visitJumpInsn(IFNE,l0);
      mv.visitVarInsn(ALOAD,varNum);
      mv.visitLdcInsn(field.resolveAlias());
      mv.visitInsn(BuildUtils.zero(field.getTypeName()));
      if (BuildUtils.isPrimitive(field.getTypeName())) {
        TraitFactory.valueOf(mv,field.getTypeName());
      }
      mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Map.class),"put",Type.getMethodDescriptor(Type.getType(Object.class),new Type[]{Type.getType(Object.class),Type.getType(Object.class)}));
      mv.visitInsn(POP);
      if (core.isFullTraiting()) {
        mv.visitVarInsn(ALOAD,0);
        mv.visitFieldInsn(GETFIELD,internalWrapper,"object",Type.getDescriptor(core.getDefinedClass()));
        mv.visitTypeInsn(CHECKCAST,Type.getInternalName(TraitableBean.class));
        mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(TraitableBean.class),"_getFieldTMS",Type.getMethodDescriptor(Type.getType(TraitFieldTMS.class),new Type[]{}));
        mv.visitVarInsn(ASTORE,1);
        mv.visitVarInsn(ALOAD,1);
        mv.visitLdcInsn(field.resolveAlias());
        mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(TraitFieldTMS.class),"isManagingField",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,new Type[]{Type.getType(String.class)}));
        Label l1=new Label();
        mv.visitJumpInsn(IFNE,l1);
        mv.visitVarInsn(ALOAD,1);
        mv.visitLdcInsn(Type.getType(BuildUtils.getTypeDescriptor(core.getClassName())));
        mv.visitLdcInsn(field.resolveAlias());
        mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(TraitFieldTMS.class),"registerField",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.getType(Class.class),Type.getType(String.class)}));
        mv.visitLabel(l1);
      }
      mv.visitLabel(l0);
    }
  }
  return 0;
}
