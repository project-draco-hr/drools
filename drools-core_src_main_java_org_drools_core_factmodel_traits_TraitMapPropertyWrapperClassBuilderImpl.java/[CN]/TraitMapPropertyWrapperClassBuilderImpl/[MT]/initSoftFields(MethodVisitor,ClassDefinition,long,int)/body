{
  int j=0;
  int stackSize=0;
  for (  FieldDefinition field : trait.getFieldsDefinitions()) {
    boolean isSoftField=TraitRegistry.isSoftField(field,j++,mask);
    if (isSoftField) {
      mv.visitVarInsn(ALOAD,varNum);
      mv.visitLdcInsn(field.getName());
      mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Map.class),"containsKey",Type.getMethodDescriptor(Type.getType(boolean.class),new Type[]{Type.getType(Object.class)}));
      Label l0=new Label();
      mv.visitJumpInsn(IFNE,l0);
      mv.visitVarInsn(ALOAD,varNum);
      mv.visitLdcInsn(field.getName());
      mv.visitInsn(BuildUtils.zero(field.getTypeName()));
      if (BuildUtils.isPrimitive(field.getTypeName())) {
        TraitFactory.valueOf(mv,field.getTypeName());
        int size=BuildUtils.sizeOf(field.getTypeName());
        stackSize=Math.max(stackSize,size);
      }
 else {
        stackSize=Math.max(stackSize,2);
      }
      mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Map.class),"put","(" + Type.getDescriptor(Object.class) + Type.getDescriptor(Object.class)+ ")"+ Type.getDescriptor(Object.class));
      mv.visitInsn(POP);
      mv.visitLabel(l0);
    }
  }
  return stackSize;
}
