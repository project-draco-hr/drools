{
  final Package pkg=new Package("pkg1");
  final RuleDescr ruleDescr=new RuleDescr("rule 1");
  ruleDescr.setSalience("p.age + 20");
  ruleDescr.setConsequence("");
  MVELDialect mvelDialect=new MVELDialect(new PackageBuilder(pkg));
  DialectRegistry registry=new DialectRegistry();
  registry.addDialect("mvel",mvelDialect);
  final InstrumentedBuildContent context=new InstrumentedBuildContent(pkg,ruleDescr,registry,mvelDialect);
  final InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final ObjectType personObjeectType=new ClassObjectType(Person.class);
  final Pattern pattern=new Pattern(0,personObjeectType);
  final PatternExtractor extractor=new PatternExtractor(personObjeectType);
  final Declaration declaration=new Declaration("p",extractor,pattern);
  final Map map=new HashMap();
  map.put("p",declaration);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final WorkingMemory wm=ruleBase.newStatefulSession();
  final Person p=new Person("mark","",31);
  final InternalFactHandle f0=(InternalFactHandle)wm.assertObject(p);
  final ReteTuple tuple=new ReteTuple(f0);
  SalienceBuilder salienceBuilder=new MVELSalienceBuilder();
  salienceBuilder.build(context);
  assertEquals(51,context.getRule().getSalience().getValue(tuple,wm));
}
