{
  final Package pkg=new Package("pkg1");
  ProcessDescr processDescr=new ProcessDescr();
  processDescr.setClassName("Process1");
  processDescr.setName("Process1");
  WorkflowProcessImpl process=new WorkflowProcessImpl();
  process.setName("Process1");
  process.setPackageName("pkg1");
  ReturnValueDescr descr=new ReturnValueDescr();
  descr.setText("return value;");
  PackageBuilder pkgBuilder=new PackageBuilder(pkg);
  final PackageBuilderConfiguration conf=pkgBuilder.getPackageBuilderConfiguration();
  DialectCompiletimeRegistry dialectRegistry=pkgBuilder.getPackageRegistry(pkg.getName()).getDialectCompiletimeRegistry();
  JavaDialect javaDialect=(JavaDialect)dialectRegistry.getDialect("java");
  ProcessBuildContext context=new ProcessBuildContext(pkgBuilder,pkg,process,processDescr,dialectRegistry,javaDialect);
  pkgBuilder.addPackageFromDrl(new StringReader("package pkg1;\nglobal Boolean value;"));
  ReturnValueConstraintEvaluator node=new ReturnValueConstraintEvaluator();
  final JavaReturnValueEvaluatorBuilder builder=new JavaReturnValueEvaluatorBuilder();
  builder.build(context,node,descr,null);
  javaDialect.addProcess(context);
  javaDialect.compileAll();
  assertEquals(0,javaDialect.getResults().size());
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(pkgBuilder.getPackage());
  final InternalWorkingMemory wm=(InternalWorkingMemory)ruleBase.newStatefulSession();
  wm.setGlobal("value",true);
  RuleFlowProcessInstance processInstance=new RuleFlowProcessInstance();
  processInstance.setWorkingMemory(wm);
  SplitInstance splitInstance=new SplitInstance();
  splitInstance.setProcessInstance(processInstance);
  assertTrue(node.evaluate(splitInstance,null,null));
  wm.setGlobal("value",false);
  assertFalse(node.evaluate(splitInstance,null,null));
}
