{
  Map previousMap=new HashMap();
  for (int i=0, length=previousDeclarations.length; i < length; i++) {
    previousMap.put(previousDeclarations[i].getIdentifier(),previousDeclarations[i]);
  }
  Map localMap=new HashMap();
  for (int i=0, length=localDeclarations.length; i < length; i++) {
    localMap.put(localDeclarations[i].getIdentifier(),localDeclarations[i]);
  }
  try {
    final DroolsMVELFactory factory=new DroolsMVELFactory(previousMap,localMap,context.getPkg().getGlobals());
    factory.setNextFactory(((MVELDialect)context.getDialect()).getClassImportResolverFactory());
    final ParserContext parserContext=new ParserContext(((MVELDialect)context.getDialect()).getClassImportResolverFactory().getImportedClasses(),null,null);
    parserContext.setStrictTypeEnforcement(true);
    Dialect.AnalysisResult analysis=context.getDialect().analyzeExpression(context,predicateDescr,predicateDescr.getContent());
    final Serializable expr=((MVELDialect)context.getDialect()).compile((String)predicateDescr.getContent(),analysis,null,context);
    predicate.setPredicateExpression(new MVELPredicateExpression(expr,factory));
  }
 catch (  final Exception e) {
    context.getErrors().add(new RuleError(context.getRule(),predicateDescr,null,"Unable to build expression for 'predicate' node '" + predicateDescr.getContent() + "'"));
  }
}
