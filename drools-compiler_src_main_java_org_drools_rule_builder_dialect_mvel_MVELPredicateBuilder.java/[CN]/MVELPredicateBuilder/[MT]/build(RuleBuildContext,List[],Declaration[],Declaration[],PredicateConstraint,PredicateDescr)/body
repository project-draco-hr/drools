{
  Map previousMap=new HashMap();
  for (int i=0, length=previousDeclarations.length; i < length; i++) {
    previousMap.put(previousDeclarations[i].getIdentifier(),previousDeclarations[i]);
  }
  Map localMap=new HashMap();
  for (int i=0, length=localDeclarations.length; i < length; i++) {
    localMap.put(localDeclarations[i].getIdentifier(),localDeclarations[i]);
  }
  try {
    final DroolsMVELFactory factory=new DroolsMVELFactory(previousMap,localMap,context.getPkg().getGlobals());
    Dialect.AnalysisResult analysis=context.getDialect().analyzeExpression(context,predicateDescr,predicateDescr.getContent(),new Set[]{context.getDeclarationResolver().getDeclarations().keySet(),context.getPkg().getGlobals().keySet()});
    final Serializable expr=((MVELDialect)context.getDialect()).compile((String)predicateDescr.getContent(),analysis,null,null,null,context);
    predicate.setPredicateExpression(new MVELPredicateExpression(expr,factory));
  }
 catch (  final Exception e) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),predicateDescr,e,"Unable to build expression for 'inline-eval' node '" + predicateDescr.getContent() + "'\n"+ e.getMessage()));
  }
}
