{
  KBase kbase=kproject.getKBases().get(kbaseQName);
  Folder kbasePath=null;
  Properties props=new Properties();
  props.setProperty("namespace",kbase.getNamespace());
  props.setProperty("name",kbase.getName());
  props.setProperty("eventProcessingMode",kbase.getEventProcessingMode().toExternalForm());
  props.setProperty("equalsBehavior",kbase.getEqualsBehavior().toString());
  Collections.sort(kbase.getAnnotations());
  StringBuilder sbuilder=new StringBuilder();
  boolean first=true;
  for (  String str : kbase.getAnnotations()) {
    if (!first) {
      sbuilder.append(", ");
    }
    sbuilder.append(str);
    first=false;
  }
  props.setProperty("annotations",sbuilder.toString());
  List<String> files=new ArrayList<String>(kbase.getFiles().size());
  for (  String file : kbase.getFiles()) {
    files.add(fs.getFile(file).getPath().toRelativePortableString(kbasePath.getPath()));
  }
  Collections.sort(files);
  sbuilder=new StringBuilder();
  first=true;
  for (  String file : files) {
    if (!first) {
      sbuilder.append(", ");
    }
    sbuilder.append(file);
    first=false;
  }
  props.setProperty("files",sbuilder.toString());
  List<String> ksessions=new ArrayList(kbase.getKSessions().keySet());
  Collections.sort(ksessions);
  sbuilder=new StringBuilder();
  first=true;
  for (  String ksessionQName : ksessions) {
    if (!first) {
      sbuilder.append(", ");
    }
    sbuilder.append(ksessionQName);
    writeKSession(ksessionQName,kbase,kproject,props);
    first=false;
  }
  props.setProperty("ksessions",sbuilder.toString());
  try {
    kbasePath.create();
    saveProperties(kbasePath.getFile(kbase.getQName() + ".properties"),props);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
