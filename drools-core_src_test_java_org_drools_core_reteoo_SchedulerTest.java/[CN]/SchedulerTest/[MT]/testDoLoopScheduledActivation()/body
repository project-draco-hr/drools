{
  IdGenerator idGenerator=ruleBase.getReteooBuilder().getIdGenerator();
  final AbstractWorkingMemory workingMemory=(AbstractWorkingMemory)ruleBase.newStatefulSession();
  final Agenda agenda=workingMemory.getAgenda();
  final Rule rule=new Rule("test-rule");
  final RuleTerminalNode node=new RuleTerminalNode(idGenerator.getNextId(),new MockTupleSource(idGenerator.getNextId()),rule,rule.getLhs(),0,buildContext);
  final List data=new ArrayList();
  rule.setConsequence(new org.drools.core.spi.Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
      if (data.size() < 3) {
        final PropagationContext context2=new PropagationContextImpl(0,0,rule,(RuleTerminalNodeLeftTuple)knowledgeHelper.getTuple(),null);
        final RuleTerminalNodeLeftTuple tuple2=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(2,"cheese"),node,true);
        node.assertLeftTuple(tuple2,context2,(AbstractWorkingMemory)workingMemory);
      }
      data.add("tested");
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.INSERTION,null,null,null);
  final RuleTerminalNodeLeftTuple tuple1=new RuleTerminalNodeLeftTuple(new DefaultFactHandle(1,"cheese"),node,true);
  rule.setTimer(new DurationTimer(50));
  node.assertLeftTuple(tuple1,context1,workingMemory);
  assertEquals(0,data.size());
  workingMemory.fireAllRules();
  Thread.sleep(2000);
  assertEquals(4,data.size());
}
