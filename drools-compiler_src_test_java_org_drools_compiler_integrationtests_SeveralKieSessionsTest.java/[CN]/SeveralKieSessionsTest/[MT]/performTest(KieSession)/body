{
  final KieBase kbase=ksession.getKieBase();
  FactType manType=kbase.getFactType(PACKAGE,"Man");
  FactType womanType=kbase.getFactType(PACKAGE,"Woman");
  FactType parentType=kbase.getFactType(PACKAGE,"Parent");
  List<Command<?>> commands=new ArrayList<Command<?>>();
  ListHolder listHolder=new ListHolder();
  commands.add(CommandFactory.newInsert(listHolder));
  Object parent1=parentType.newInstance();
  parentType.set(parent1,"parent","Eva");
  parentType.set(parent1,"child","Abel");
  commands.add(CommandFactory.newInsert(parent1));
  Object parent2=parentType.newInstance();
  parentType.set(parent2,"parent","Eva");
  parentType.set(parent2,"child","Kain");
  commands.add(CommandFactory.newInsert(parent2));
  Object parent3=parentType.newInstance();
  parentType.set(parent3,"parent","Adam");
  parentType.set(parent3,"child","Abel");
  commands.add(CommandFactory.newInsert(parent3));
  Object parent4=parentType.newInstance();
  parentType.set(parent4,"parent","Adam");
  parentType.set(parent4,"child","Kain");
  commands.add(CommandFactory.newInsert(parent4));
  Object parent5=parentType.newInstance();
  parentType.set(parent5,"parent","Abel");
  parentType.set(parent5,"child","Josef");
  commands.add(CommandFactory.newInsert(parent5));
  Object adam=manType.newInstance();
  manType.set(adam,"name","Adam");
  commands.add(CommandFactory.newInsert(adam));
  Object eva=womanType.newInstance();
  womanType.set(eva,"name","Eva");
  womanType.set(eva,"age",101);
  commands.add(CommandFactory.newInsert(eva));
  Object abel=manType.newInstance();
  manType.set(abel,"name","Abel");
  commands.add(CommandFactory.newInsert(abel));
  Object kain=manType.newInstance();
  manType.set(kain,"name","Kain");
  commands.add(CommandFactory.newInsert(kain));
  Object josef=manType.newInstance();
  manType.set(josef,"name","Josef");
  commands.add(CommandFactory.newInsert(josef));
  commands.add(CommandFactory.newFireAllRules());
  ksession.execute(CommandFactory.newBatchExecution(commands));
  List<String> manList=listHolder.getManList();
  assertEquals(manList.size(),4);
  assertTrue(manList.contains("Adam"));
  assertTrue(manList.contains("Kain"));
  assertTrue(manList.contains("Abel"));
  assertTrue(manList.contains("Josef"));
  List<String> personList=listHolder.getPersonList();
  assertEquals(personList.size(),5);
  assertTrue(personList.contains("Adam"));
  assertTrue(personList.contains("Kain"));
  assertTrue(personList.contains("Abel"));
  assertTrue(personList.contains("Josef"));
  assertTrue(personList.contains("Eva"));
  List<String> parentList=listHolder.getParentList();
  assertEquals(parentList.size(),5);
  assertTrue(parentList.contains("Adam"));
  assertTrue(parentList.contains("Eva"));
  assertTrue(parentList.contains("Abel"));
  List<String> motherList=listHolder.getMotherList();
  assertEquals(motherList.size(),2);
  assertTrue(motherList.contains("Eva"));
  List<String> fatherList=listHolder.getFatherList();
  assertEquals(fatherList.size(),3);
  assertTrue(fatherList.contains("Adam"));
  assertTrue(fatherList.contains("Abel"));
  assertFalse(fatherList.contains("Eva"));
  assertFalse(fatherList.contains("Kain"));
  assertFalse(fatherList.contains("Josef"));
  List<String> grandparentList=listHolder.getGrandparentList();
  assertEquals(grandparentList.size(),2);
  assertTrue(grandparentList.contains("Eva"));
  assertTrue(grandparentList.contains("Adam"));
  assertTrue(listHolder.isGrandmaBlessedAgeTriggered());
}
