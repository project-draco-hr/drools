{
  DRL5xParser.or_restr_connective_return retval=new DRL5xParser.or_restr_connective_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOUBLE_PIPE241=null;
  DRL5xParser.and_restr_connective_return and_restr_connective240=null;
  DRL5xParser.and_restr_connective_return and_restr_connective242=null;
  Object DOUBLE_PIPE241_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4096);
      and_restr_connective240=and_restr_connective();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,and_restr_connective240.getTree());
      loop88:       do {
        int alt88=2;
        int LA88_0=input.LA(1);
        if ((LA88_0 == DOUBLE_PIPE)) {
          int LA88_2=input.LA(2);
          if ((((validateRestr())))) {
            alt88=1;
          }
        }
switch (alt88) {
case 1:
{
            if (!(((validateRestr())))) {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              throw new FailedPredicateException(input,"or_restr_connective","(validateRestr())");
            }
            DOUBLE_PIPE241=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_restr_connective4102);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              DOUBLE_PIPE241_tree=(Object)adaptor.create(DOUBLE_PIPE241);
              root_0=(Object)adaptor.becomeRoot(DOUBLE_PIPE241_tree,root_0);
            }
            if (state.backtracking == 0) {
              emit(DOUBLE_PIPE241,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4110);
            and_restr_connective242=and_restr_connective();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,and_restr_connective242.getTree());
          }
        break;
default :
      break loop88;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
if (!lookaheadTest) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 else {
throw re;
}
}
 finally {
}
return retval;
}
