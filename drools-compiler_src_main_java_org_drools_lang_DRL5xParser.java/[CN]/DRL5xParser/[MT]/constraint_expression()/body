{
  DRL5xParser.constraint_expression_return retval=new DRL5xParser.constraint_expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN248=null;
  Token RIGHT_PAREN250=null;
  DRL5xParser.compound_operator_return compound_operator246=null;
  DRL5xParser.simple_operator_return simple_operator247=null;
  DRL5xParser.or_restr_connective_return or_restr_connective249=null;
  Object LEFT_PAREN248_tree=null;
  Object RIGHT_PAREN250_tree=null;
  try {
    int alt90=3;
    alt90=dfa90.predict(input);
switch (alt90) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_compound_operator_in_constraint_expression4172);
        compound_operator246=compound_operator();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,compound_operator246.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_simple_operator_in_constraint_expression4177);
    simple_operator247=simple_operator();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,simple_operator247.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN248=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constraint_expression4182);
if (state.failed) return retval;
if (state.backtracking == 0) {
  emit(LEFT_PAREN248,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_or_restr_connective_in_constraint_expression4191);
or_restr_connective249=or_restr_connective();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,or_restr_connective249.getTree());
RIGHT_PAREN250=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constraint_expression4196);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_PAREN250_tree=(Object)adaptor.create(RIGHT_PAREN250);
  adaptor.addChild(root_0,RIGHT_PAREN250_tree);
}
if (state.backtracking == 0) {
  emit(RIGHT_PAREN250,DroolsEditorType.SYMBOL);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
if (!lookaheadTest) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 else {
throw re;
}
}
 finally {
if (isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == ID) {
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
emit(input.LT(1),DroolsEditorType.KEYWORD);
input.consume();
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
 else if (isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && input.LA(2) == ID && validateLT(1,DroolsSoftKeywords.NOT)) {
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.KEYWORD);
input.consume();
input.consume();
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
 else if (isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && validateLT(1,DroolsSoftKeywords.IN)) {
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
input.consume();
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
 else if (isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID) {
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.IDENTIFIER);
input.consume();
input.consume();
if (input.get(input.index() - 1).getType() == WS) {
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
}
return retval;
}
