{
  DRL5xParser.lhs_or_return retval=new DRL5xParser.lhs_or_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token pipe=null;
  Token LEFT_PAREN127=null;
  Token RIGHT_PAREN129=null;
  DRL5xParser.or_key_return or=null;
  DRL5xParser.or_key_return value=null;
  DRL5xParser.lhs_and_return lhs_and128=null;
  DRL5xParser.lhs_and_return lhs_and130=null;
  DRL5xParser.lhs_and_return lhs_and131=null;
  Object pipe_tree=null;
  Object LEFT_PAREN127_tree=null;
  Object RIGHT_PAREN129_tree=null;
  RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
  RewriteRuleSubtreeStream stream_lhs_and=new RewriteRuleSubtreeStream(adaptor,"rule lhs_and");
  Token orToken=null;
  try {
    int alt51=2;
    int LA51_0=input.LA(1);
    if ((LA51_0 == LEFT_PAREN)) {
      int LA51_1=input.LA(2);
      if ((synpred1_DRL5x())) {
        alt51=1;
      }
 else       if ((true)) {
        alt51=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",51,1,input);
        throw nvae;
      }
    }
 else     if ((LA51_0 == ID)) {
      alt51=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",51,0,input);
      throw nvae;
    }
switch (alt51) {
case 1:
{
        LEFT_PAREN127=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or2152);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_LEFT_PAREN.add(LEFT_PAREN127);
        if (state.backtracking == 0) {
          emit(LEFT_PAREN127,DroolsEditorType.SYMBOL);
        }
        pushFollow(FOLLOW_or_key_in_lhs_or2162);
        or=or_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_or_key.add(or.getTree());
        if (state.backtracking == 0) {
          emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
        }
        int cnt48=0;
        loop48:         do {
          int alt48=2;
          int LA48_0=input.LA(1);
          if ((LA48_0 == ID || LA48_0 == LEFT_PAREN)) {
            alt48=1;
          }
switch (alt48) {
case 1:
{
              pushFollow(FOLLOW_lhs_and_in_lhs_or2170);
              lhs_and128=lhs_and();
              state._fsp--;
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_lhs_and.add(lhs_and128.getTree());
            }
          break;
default :
        if (cnt48 >= 1)         break loop48;
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
    EarlyExitException eee=new EarlyExitException(48,input);
  throw eee;
}
cnt48++;
}
 while (true);
RIGHT_PAREN129=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or2176);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN129);
if (state.backtracking == 0) {
emit(RIGHT_PAREN129,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_PREFIX,(or != null ? ((Token)or.start) : null)),root_1);
  if (!(stream_lhs_and.hasNext())) {
    throw new RewriteEarlyExitException();
  }
  while (stream_lhs_and.hasNext()) {
    adaptor.addChild(root_1,stream_lhs_and.nextTree());
  }
  stream_lhs_and.reset();
  adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_lhs_and_in_lhs_or2199);
lhs_and130=lhs_and();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_lhs_and.add(lhs_and130.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
adaptor.addChild(root_0,stream_lhs_and.nextTree());
}
retval.tree=root_0;
}
}
loop50: do {
int alt50=2;
int LA50_0=input.LA(1);
if ((LA50_0 == ID)) {
int LA50_1=input.LA(2);
if (((synpred2_DRL5x() && ((validateIdentifierKey(DroolsSoftKeywords.OR)))))) {
alt50=1;
}
}
 else if ((LA50_0 == DOUBLE_PIPE)) {
int LA50_3=input.LA(2);
if ((synpred2_DRL5x())) {
alt50=1;
}
}
switch (alt50) {
case 1:
{
int alt49=2;
int LA49_0=input.LA(1);
if ((LA49_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.OR))))) {
alt49=1;
}
 else if ((LA49_0 == DOUBLE_PIPE)) {
alt49=2;
}
 else {
if (state.backtracking > 0) {
  state.failed=true;
  return retval;
}
NoViableAltException nvae=new NoViableAltException("",49,0,input);
throw nvae;
}
switch (alt49) {
case 1:
{
  pushFollow(FOLLOW_or_key_in_lhs_or2221);
  value=or_key();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_or_key.add(value.getTree());
  if (state.backtracking == 0) {
    orToken=(value != null ? ((Token)value.start) : null);
  }
}
break;
case 2:
{
pipe=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_lhs_or2228);
if (state.failed) return retval;
if (state.backtracking == 0) stream_DOUBLE_PIPE.add(pipe);
if (state.backtracking == 0) {
orToken=pipe;
emit(pipe,DroolsEditorType.SYMBOL);
}
}
break;
}
if (state.backtracking == 0) {
emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
}
pushFollow(FOLLOW_lhs_and_in_lhs_or2239);
lhs_and131=lhs_and();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_lhs_and.add(lhs_and131.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_INFIX,orToken),root_1);
adaptor.addChild(root_1,stream_retval.nextTree());
adaptor.addChild(root_1,stream_lhs_and.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
default :
break loop50;
}
}
 while (true);
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
