{
  DRL5xParser.compound_operator_return retval=new DRL5xParser.compound_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN264=null;
  Token COMMA266=null;
  Token RIGHT_PAREN268=null;
  DRL5xParser.in_key_return in_key261=null;
  DRL5xParser.not_key_return not_key262=null;
  DRL5xParser.in_key_return in_key263=null;
  DRL5xParser.expression_value_return expression_value265=null;
  DRL5xParser.expression_value_return expression_value267=null;
  Object LEFT_PAREN264_tree=null;
  Object COMMA266_tree=null;
  Object RIGHT_PAREN268_tree=null;
  if (state.backtracking == 0)   emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt94=2;
      int LA94_0=input.LA(1);
      if ((LA94_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((validateIdentifierKey(DroolsSoftKeywords.IN)))))) {
        int LA94_1=input.LA(2);
        if ((LA94_1 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.IN))))) {
          alt94=1;
        }
 else         if ((LA94_1 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
          alt94=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",94,1,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",94,0,input);
        throw nvae;
      }
switch (alt94) {
case 1:
{
          pushFollow(FOLLOW_in_key_in_compound_operator4323);
          in_key261=in_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           root_0=(Object)adaptor.becomeRoot(in_key261.getTree(),root_0);
        }
      break;
case 2:
{
      pushFollow(FOLLOW_not_key_in_compound_operator4328);
      not_key262=not_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,not_key262.getTree());
      pushFollow(FOLLOW_in_key_in_compound_operator4330);
      in_key263=in_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       root_0=(Object)adaptor.becomeRoot(in_key263.getTree(),root_0);
    }
  break;
}
if (state.backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
LEFT_PAREN264=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator4341);
if (state.failed) return retval;
if (state.backtracking == 0) {
emit(LEFT_PAREN264,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_value_in_compound_operator4349);
expression_value265=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value265.getTree());
loop95: do {
int alt95=2;
int LA95_0=input.LA(1);
if ((LA95_0 == COMMA)) {
  alt95=1;
}
switch (alt95) {
case 1:
{
    COMMA266=(Token)match(input,COMMA,FOLLOW_COMMA_in_compound_operator4353);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      emit(COMMA266,DroolsEditorType.SYMBOL);
    }
    pushFollow(FOLLOW_expression_value_in_compound_operator4358);
    expression_value267=expression_value();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,expression_value267.getTree());
  }
break;
default :
break loop95;
}
}
 while (true);
RIGHT_PAREN268=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator4366);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_PAREN268_tree=(Object)adaptor.create(RIGHT_PAREN268);
adaptor.addChild(root_0,RIGHT_PAREN268_tree);
}
if (state.backtracking == 0) {
emit(RIGHT_PAREN268,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == DOUBLE_PIPE) {
emit(input.LT(1),DroolsEditorType.SYMBOL);
input.consume();
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
}
}
return retval;
}
