{
  DRL5xParser.rule_return retval=new DRL5xParser.rule_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRL5xParser.rule_key_return rule_key66=null;
  DRL5xParser.rule_id_return rule_id67=null;
  DRL5xParser.extend_key_return extend_key68=null;
  DRL5xParser.rule_id_return rule_id69=null;
  DRL5xParser.decl_metadata_return decl_metadata70=null;
  DRL5xParser.rule_attributes_return rule_attributes71=null;
  DRL5xParser.when_part_return when_part72=null;
  DRL5xParser.rhs_chunk_return rhs_chunk73=null;
  RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
  RewriteRuleSubtreeStream stream_rhs_chunk=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk");
  RewriteRuleSubtreeStream stream_rule_attributes=new RewriteRuleSubtreeStream(adaptor,"rule rule_attributes");
  RewriteRuleSubtreeStream stream_rule_key=new RewriteRuleSubtreeStream(adaptor,"rule rule_key");
  RewriteRuleSubtreeStream stream_extend_key=new RewriteRuleSubtreeStream(adaptor,"rule extend_key");
  RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
  RewriteRuleSubtreeStream stream_when_part=new RewriteRuleSubtreeStream(adaptor,"rule when_part");
  boolean isFailed=true;
  pushParaphrases(DroolsParaphraseTypes.RULE);
  try {
{
      if (state.backtracking == 0) {
        beginSentence(DroolsSentenceType.RULE);
      }
      pushFollow(FOLLOW_rule_key_in_rule1446);
      rule_key66=rule_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_rule_key.add(rule_key66.getTree());
      pushFollow(FOLLOW_rule_id_in_rule1448);
      rule_id67=rule_id();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_rule_id.add(rule_id67.getTree());
      if (state.backtracking == 0) {
        emit(Location.LOCATION_RULE_HEADER);
      }
      int alt29=2;
      alt29=dfa29.predict(input);
switch (alt29) {
case 1:
{
          pushFollow(FOLLOW_extend_key_in_rule1457);
          extend_key68=extend_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_extend_key.add(extend_key68.getTree());
          pushFollow(FOLLOW_rule_id_in_rule1459);
          rule_id69=rule_id();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_rule_id.add(rule_id69.getTree());
        }
      break;
  }
  loop30:   do {
    int alt30=2;
    int LA30_0=input.LA(1);
    if ((LA30_0 == AT)) {
      alt30=1;
    }
switch (alt30) {
case 1:
{
        pushFollow(FOLLOW_decl_metadata_in_rule1463);
        decl_metadata70=decl_metadata();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_decl_metadata.add(decl_metadata70.getTree());
      }
    break;
default :
  break loop30;
}
}
 while (true);
int alt31=2;
int LA31_0=input.LA(1);
if ((LA31_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.CALENDARS))) || ((validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))) || ((validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)))|| ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE)))|| ((validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP)))|| ((validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))|| ((validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((validateIdentifierKey(DroolsSoftKeywords.DIALECT)))|| ((validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)))|| ((validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)))|| ((validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
alt31=1;
}
switch (alt31) {
case 1:
{
pushFollow(FOLLOW_rule_attributes_in_rule1466);
rule_attributes71=rule_attributes();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_rule_attributes.add(rule_attributes71.getTree());
}
break;
}
int alt32=2;
int LA32_0=input.LA(1);
if ((LA32_0 == WHEN)) {
alt32=1;
}
switch (alt32) {
case 1:
{
pushFollow(FOLLOW_when_part_in_rule1469);
when_part72=when_part();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_when_part.add(when_part72.getTree());
}
break;
}
pushFollow(FOLLOW_rhs_chunk_in_rule1472);
rhs_chunk73=rhs_chunk();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_rhs_chunk.add(rhs_chunk73.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_rule_key.nextNode(),root_1);
adaptor.addChild(root_1,stream_rule_id.nextTree());
if (stream_rule_id.hasNext() || stream_extend_key.hasNext()) {
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_extend_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_rule_id.nextTree());
adaptor.addChild(root_1,root_2);
}
}
stream_rule_id.reset();
stream_extend_key.reset();
while (stream_decl_metadata.hasNext()) {
adaptor.addChild(root_1,stream_decl_metadata.nextTree());
}
stream_decl_metadata.reset();
if (stream_rule_attributes.hasNext()) {
adaptor.addChild(root_1,stream_rule_attributes.nextTree());
}
stream_rule_attributes.reset();
if (stream_when_part.hasNext()) {
adaptor.addChild(root_1,stream_when_part.nextTree());
}
stream_when_part.reset();
adaptor.addChild(root_1,stream_rhs_chunk.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
paraphrases.pop();
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (isEditorInterfaceEnabled && isFailed) {
if (input.LA(6) == EOF && input.LA(1) == ID && input.LA(2) == MISC && input.LA(3) == ID && input.LA(5) == MISC && input.LA(6) == ID && validateLT(1,DroolsSoftKeywords.LOCK) && validateLT(3,DroolsSoftKeywords.ON) && validateLT(5,DroolsSoftKeywords.ACTIVE)) {
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.KEYWORD);
emit(input.LT(3),DroolsEditorType.KEYWORD);
emit(input.LT(4),DroolsEditorType.KEYWORD);
emit(input.LT(5),DroolsEditorType.KEYWORD);
emit(Location.LOCATION_RULE_HEADER_KEYWORD);
input.consume();
input.consume();
input.consume();
input.consume();
input.consume();
}
 else if (input.LA(4) == EOF && input.LA(1) == ID && input.LA(2) == MISC && input.LA(3) == ID && ((validateLT(1,DroolsSoftKeywords.ACTIVATION) && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateLT(1,DroolsSoftKeywords.DATE) && validateLT(3,DroolsSoftKeywords.EXPIRES)) || (validateLT(1,DroolsSoftKeywords.NO) && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateLT(1,DroolsSoftKeywords.DATE) && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateLT(1,DroolsSoftKeywords.AUTO) && validateLT(3,DroolsSoftKeywords.FOCUS))|| (validateLT(1,DroolsSoftKeywords.ACTIVATION) && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateLT(1,DroolsSoftKeywords.RULEFLOW) && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateLT(1,DroolsSoftKeywords.AGENDA) && validateLT(3,DroolsSoftKeywords.GROUP)))) {
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.KEYWORD);
emit(input.LT(3),DroolsEditorType.KEYWORD);
emit(Location.LOCATION_RULE_HEADER_KEYWORD);
input.consume();
input.consume();
input.consume();
}
 else if (input.LA(2) == EOF && input.LA(1) == ID && (validateLT(1,DroolsSoftKeywords.DIALECT) || validateLT(1,DroolsSoftKeywords.ENABLED) || validateLT(1,DroolsSoftKeywords.SALIENCE)|| validateLT(1,DroolsSoftKeywords.DURATION)|| validateLT(1,DroolsSoftKeywords.TIMER))) {
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(Location.LOCATION_RULE_HEADER_KEYWORD);
input.consume();
}
}
}
return retval;
}
