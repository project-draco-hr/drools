{
  DRL5xParser.expression_chain_return retval=new DRL5xParser.expression_chain_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT199=null;
  Token ID200=null;
  DRL5xParser.paren_chunk_return paren_chunk201=null;
  DRL5xParser.square_chunk_return square_chunk202=null;
  DRL5xParser.expression_chain_return expression_chain203=null;
  Object DOT199_tree=null;
  Object ID200_tree=null;
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
  RewriteRuleSubtreeStream stream_expression_chain=new RewriteRuleSubtreeStream(adaptor,"rule expression_chain");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      DOT199=(Token)match(input,DOT,FOLLOW_DOT_in_expression_chain3510);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_DOT.add(DOT199);
      if (state.backtracking == 0) {
        emit(DOT199,DroolsEditorType.IDENTIFIER);
      }
      ID200=(Token)match(input,ID,FOLLOW_ID_in_expression_chain3517);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(ID200);
      if (state.backtracking == 0) {
        emit(ID200,DroolsEditorType.IDENTIFIER);
      }
      int alt75=3;
      alt75=dfa75.predict(input);
switch (alt75) {
case 1:
{
          if (!((input.LA(1) == LEFT_PAREN))) {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            throw new FailedPredicateException(input,"expression_chain","input.LA(1) == LEFT_PAREN");
          }
          pushFollow(FOLLOW_paren_chunk_in_expression_chain3533);
          paren_chunk201=paren_chunk();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_paren_chunk.add(paren_chunk201.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_square_chunk_in_expression_chain3547);
      square_chunk202=square_chunk();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_square_chunk.add(square_chunk202.getTree());
    }
  break;
}
int alt76=2;
int LA76_0=input.LA(1);
if ((LA76_0 == DOT)) {
alt76=1;
}
switch (alt76) {
case 1:
{
  pushFollow(FOLLOW_expression_chain_in_expression_chain3558);
  expression_chain203=expression_chain();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_expression_chain.add(expression_chain203.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_EXPRESSION_CHAIN,DOT199),root_1);
adaptor.addChild(root_1,stream_ID.nextNode());
if (stream_square_chunk.hasNext()) {
  adaptor.addChild(root_1,stream_square_chunk.nextTree());
}
stream_square_chunk.reset();
if (stream_paren_chunk.hasNext()) {
  adaptor.addChild(root_1,stream_paren_chunk.nextTree());
}
stream_paren_chunk.reset();
if (stream_expression_chain.hasNext()) {
  adaptor.addChild(root_1,stream_expression_chain.nextTree());
}
stream_expression_chain.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
