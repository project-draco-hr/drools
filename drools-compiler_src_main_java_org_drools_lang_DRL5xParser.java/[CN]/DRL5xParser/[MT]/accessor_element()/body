{
  DRL5xParser.accessor_element_return retval=new DRL5xParser.accessor_element_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID284=null;
  DRL5xParser.square_chunk_return square_chunk285=null;
  Object ID284_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
  try {
{
      ID284=(Token)match(input,ID,FOLLOW_ID_in_accessor_element4702);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(ID284);
      if (state.backtracking == 0) {
        emit(ID284,DroolsEditorType.IDENTIFIER);
      }
      loop103:       do {
        int alt103=2;
        int LA103_0=input.LA(1);
        if ((LA103_0 == LEFT_SQUARE)) {
          alt103=1;
        }
switch (alt103) {
case 1:
{
            pushFollow(FOLLOW_square_chunk_in_accessor_element4708);
            square_chunk285=square_chunk();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_square_chunk.add(square_chunk285.getTree());
          }
        break;
default :
      break loop103;
  }
}
 while (true);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_ELEMENT,"VT_ACCESSOR_ELEMENT"),root_1);
      adaptor.addChild(root_1,stream_ID.nextNode());
      while (stream_square_chunk.hasNext()) {
        adaptor.addChild(root_1,stream_square_chunk.nextTree());
      }
      stream_square_chunk.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
