{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA1_1=input.LA(1);
  int index1_1=input.index();
input.rewind();
s=-1;
if ((LA1_1 == MISC) && ((((validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))) || ((validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))) || ((validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS)))|| ((validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)))|| ((validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)))|| ((validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)))|| ((validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE)))))) {
s=3;
}
 else if ((LA1_1 == ID)) {
s=4;
}
 else if ((LA1_1 == INT) && ((((validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE))) || ((validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
s=5;
}
 else if ((LA1_1 == LEFT_PAREN) && ((((validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE))) || ((validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
s=6;
}
 else if ((LA1_1 == BOOL) && (((validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {
s=7;
}
 else if ((LA1_1 == STRING)) {
s=8;
}
input.seek(index1_1);
if (s >= 0) return s;
break;
case 1:
int LA1_4=input.LA(1);
int index1_4=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.PACKAGE))))) {
s=9;
}
 else if ((true)) {
s=8;
}
input.seek(index1_4);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),1,_s,input);
error(nvae);
throw nvae;
}
