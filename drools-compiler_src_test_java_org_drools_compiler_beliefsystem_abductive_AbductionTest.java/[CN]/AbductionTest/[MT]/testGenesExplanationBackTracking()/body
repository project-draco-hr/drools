{
  String droolsSource="package org.drools.tms.test; \n" + "import org.kie.api.runtime.rule.Match;\n" + ""+ "declare entry-point \"neg\" end "+ "declare Amount "+ "   enz : String @key "+ "   level : String @key "+ "end "+ "query feed( String $enz ) "+ "   $enz := String() from 'lactose' "+ "   ?make( 'permease' ; ) "+ "   ?make( 'galactosidase' ; ) "+ "end "+ "query make( String $enz ) "+ "   ?code( $gen, $enz ; ) and ?express( $gen ; ) "+ "end "+ "query code( String $gen, String $enz ) "+ "   ( $gen := String() from 'lacY' and $enz := String() from 'permease' ) "+ "   or "+ "   ( $gen := String() from 'lacZ' and $enz := String() from 'galactosidase' ) "+ "end "+ "query express( String $gen ) "+ "  ( ?amount( 'glucose', 'low' ; ) and ?amount( 'lactose', 'hi' ; ) ) "+ "  or "+ "  ( ?amount( 'glucose', 'medium' ; ) and ?amount( 'lactose', 'medium' ; ) ) "+ "end "+ "query amount( String $enz, String $lev ) @Abductive( target=Amount.class ) end "+ "rule Check "+ "when "+ "   ?feed( 'lactose' ; ) "+ "then "+ "   System.out.println( 'YES' ); "+ "end "+ "rule Match "+ "when "+ "   $m : Match( rule.name != 'Match' ) "+ "then"+ "   System.out.println( $m ); "+ "end  "+ "";
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(DeclarativeAgendaOption.ENABLED);
  KieSession session=getSessionFromString(droolsSource,kconf);
  session.fireAllRules();
  for (  Object o : session.getObjects()) {
    System.out.println(">>> " + o);
  }
}
