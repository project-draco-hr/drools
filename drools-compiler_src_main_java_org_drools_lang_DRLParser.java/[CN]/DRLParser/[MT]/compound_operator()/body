{
  compound_operator_return retval=new compound_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN265=null;
  Token COMMA267=null;
  Token RIGHT_PAREN269=null;
  in_key_return in_key262=null;
  not_key_return not_key263=null;
  in_key_return in_key264=null;
  expression_value_return expression_value266=null;
  expression_value_return expression_value268=null;
  Object LEFT_PAREN265_tree=null;
  Object COMMA267_tree=null;
  Object RIGHT_PAREN269_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
      }
      int alt86=2;
      int LA86_0=input.LA(1);
      if ((LA86_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.IN))))) {
        int LA86_1=input.LA(2);
        if ((LA86_1 == ID) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
          alt86=2;
        }
 else         if ((LA86_1 == LEFT_PAREN) && ((validateIdentifierKey(DroolsSoftKeywords.IN)))) {
          alt86=1;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("1189:2: ( in_key | not_key in_key )",86,1,input);
          throw nvae;
        }
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("1189:2: ( in_key | not_key in_key )",86,0,input);
        throw nvae;
      }
switch (alt86) {
case 1:
{
          pushFollow(FOLLOW_in_key_in_compound_operator4297);
          in_key262=in_key();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           root_0=(Object)adaptor.becomeRoot(in_key262.getTree(),root_0);
        }
      break;
case 2:
{
      pushFollow(FOLLOW_not_key_in_compound_operator4302);
      not_key263=not_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,not_key263.getTree());
      pushFollow(FOLLOW_in_key_in_compound_operator4304);
      in_key264=in_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       root_0=(Object)adaptor.becomeRoot(in_key264.getTree(),root_0);
    }
  break;
}
if (backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
LEFT_PAREN265=(Token)input.LT(1);
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator4315);
if (failed) return retval;
if (backtracking == 0) {
emit(LEFT_PAREN265,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_value_in_compound_operator4323);
expression_value266=expression_value();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression_value266.getTree());
loop87: do {
int alt87=2;
int LA87_0=input.LA(1);
if ((LA87_0 == COMMA)) {
  alt87=1;
}
switch (alt87) {
case 1:
{
    COMMA267=(Token)input.LT(1);
    match(input,COMMA,FOLLOW_COMMA_in_compound_operator4327);
    if (failed)     return retval;
    if (backtracking == 0) {
      emit(COMMA267,DroolsEditorType.SYMBOL);
    }
    pushFollow(FOLLOW_expression_value_in_compound_operator4332);
    expression_value268=expression_value();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,expression_value268.getTree());
  }
break;
default :
break loop87;
}
}
 while (true);
RIGHT_PAREN269=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator4340);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_PAREN269_tree=(Object)adaptor.create(RIGHT_PAREN269);
adaptor.addChild(root_0,RIGHT_PAREN269_tree);
}
if (backtracking == 0) {
emit(RIGHT_PAREN269,DroolsEditorType.SYMBOL);
}
if (backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == DOUBLE_PIPE) {
emit(input.LT(1),DroolsEditorType.SYMBOL);
input.consume();
emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
}
}
return retval;
}
