{
  DRLParser.compound_operator_return retval=new DRLParser.compound_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN270=null;
  Token COMMA272=null;
  Token RIGHT_PAREN274=null;
  DRLParser.in_key_return in_key267=null;
  DRLParser.not_key_return not_key268=null;
  DRLParser.in_key_return in_key269=null;
  DRLParser.expression_value_return expression_value271=null;
  DRLParser.expression_value_return expression_value273=null;
  Object LEFT_PAREN270_tree=null;
  Object COMMA272_tree=null;
  Object RIGHT_PAREN274_tree=null;
  if (state.backtracking == 0)   helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt83=2;
      int LA83_0=input.LA(1);
      if ((LA83_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))))) {
        int LA83_1=input.LA(2);
        if ((LA83_1 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
          alt83=1;
        }
 else         if ((LA83_1 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
          alt83=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",83,1,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",83,0,input);
        throw nvae;
      }
switch (alt83) {
case 1:
{
          pushFollow(FOLLOW_in_key_in_compound_operator4498);
          in_key267=in_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           root_0=(Object)adaptor.becomeRoot(in_key267.getTree(),root_0);
        }
      break;
case 2:
{
      pushFollow(FOLLOW_not_key_in_compound_operator4503);
      not_key268=not_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,not_key268.getTree());
      pushFollow(FOLLOW_in_key_in_compound_operator4505);
      in_key269=in_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       root_0=(Object)adaptor.becomeRoot(in_key269.getTree(),root_0);
    }
  break;
}
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
LEFT_PAREN270=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator4516);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(LEFT_PAREN270,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_value_in_compound_operator4524);
expression_value271=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value271.getTree());
loop84: do {
int alt84=2;
int LA84_0=input.LA(1);
if ((LA84_0 == COMMA)) {
  alt84=1;
}
switch (alt84) {
case 1:
{
    COMMA272=(Token)match(input,COMMA,FOLLOW_COMMA_in_compound_operator4528);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      helper.emit(COMMA272,DroolsEditorType.SYMBOL);
    }
    pushFollow(FOLLOW_expression_value_in_compound_operator4533);
    expression_value273=expression_value();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,expression_value273.getTree());
  }
break;
default :
break loop84;
}
}
 while (true);
RIGHT_PAREN274=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator4541);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_PAREN274_tree=(Object)adaptor.create(RIGHT_PAREN274);
adaptor.addChild(root_0,RIGHT_PAREN274_tree);
}
if (state.backtracking == 0) {
helper.emit(RIGHT_PAREN274,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == DOUBLE_PIPE) {
helper.emit(input.LT(1),DroolsEditorType.SYMBOL);
input.consume();
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
}
}
return retval;
}
