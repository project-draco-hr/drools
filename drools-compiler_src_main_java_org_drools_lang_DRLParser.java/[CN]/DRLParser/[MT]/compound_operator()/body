{
  compound_operator_return retval=new compound_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN272=null;
  Token COMMA274=null;
  Token RIGHT_PAREN276=null;
  in_key_return in_key269=null;
  not_key_return not_key270=null;
  in_key_return in_key271=null;
  expression_value_return expression_value273=null;
  expression_value_return expression_value275=null;
  Object LEFT_PAREN272_tree=null;
  Object COMMA274_tree=null;
  Object RIGHT_PAREN276_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt85=2;
      int LA85_0=input.LA(1);
      if ((LA85_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.IN)) || (validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
        int LA85_1=input.LA(2);
        if ((LA85_1 == LEFT_PAREN) && ((validateIdentifierKey(DroolsSoftKeywords.IN)))) {
          alt85=1;
        }
 else         if ((LA85_1 == ID) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
          alt85=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("755:4: ( in_key | not_key in_key )",85,1,input);
          throw nvae;
        }
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("755:4: ( in_key | not_key in_key )",85,0,input);
        throw nvae;
      }
switch (alt85) {
case 1:
{
          pushFollow(FOLLOW_in_key_in_compound_operator3524);
          in_key269=in_key();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           root_0=(Object)adaptor.becomeRoot(in_key269.getTree(),root_0);
        }
      break;
case 2:
{
      pushFollow(FOLLOW_not_key_in_compound_operator3529);
      not_key270=not_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,not_key270.getTree());
      pushFollow(FOLLOW_in_key_in_compound_operator3531);
      in_key271=in_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       root_0=(Object)adaptor.becomeRoot(in_key271.getTree(),root_0);
    }
  break;
}
LEFT_PAREN272=(Token)input.LT(1);
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator3536);
if (failed) return retval;
pushFollow(FOLLOW_expression_value_in_compound_operator3539);
expression_value273=expression_value();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression_value273.getTree());
loop86: do {
int alt86=2;
int LA86_0=input.LA(1);
if ((LA86_0 == COMMA)) {
  alt86=1;
}
switch (alt86) {
case 1:
{
    COMMA274=(Token)input.LT(1);
    match(input,COMMA,FOLLOW_COMMA_in_compound_operator3543);
    if (failed)     return retval;
    pushFollow(FOLLOW_expression_value_in_compound_operator3546);
    expression_value275=expression_value();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,expression_value275.getTree());
  }
break;
default :
break loop86;
}
}
 while (true);
RIGHT_PAREN276=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator3551);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_PAREN276_tree=(Object)adaptor.create(RIGHT_PAREN276);
adaptor.addChild(root_0,RIGHT_PAREN276_tree);
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
