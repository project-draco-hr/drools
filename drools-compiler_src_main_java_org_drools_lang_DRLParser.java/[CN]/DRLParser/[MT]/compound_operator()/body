{
  compound_operator_return retval=new compound_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN278=null;
  Token COMMA280=null;
  Token RIGHT_PAREN282=null;
  in_key_return in_key275=null;
  not_key_return not_key276=null;
  in_key_return in_key277=null;
  expression_value_return expression_value279=null;
  expression_value_return expression_value281=null;
  Object LEFT_PAREN278_tree=null;
  Object COMMA280_tree=null;
  Object RIGHT_PAREN282_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt87=2;
      int LA87_0=input.LA(1);
      if ((LA87_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.IN)) || (validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
        int LA87_1=input.LA(2);
        if ((LA87_1 == ID) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
          alt87=2;
        }
 else         if ((LA87_1 == LEFT_PAREN) && ((validateIdentifierKey(DroolsSoftKeywords.IN)))) {
          alt87=1;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("822:4: ( in_key | not_key in_key )",87,1,input);
          throw nvae;
        }
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("822:4: ( in_key | not_key in_key )",87,0,input);
        throw nvae;
      }
switch (alt87) {
case 1:
{
          pushFollow(FOLLOW_in_key_in_compound_operator3579);
          in_key275=in_key();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           root_0=(Object)adaptor.becomeRoot(in_key275.getTree(),root_0);
        }
      break;
case 2:
{
      pushFollow(FOLLOW_not_key_in_compound_operator3584);
      not_key276=not_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,not_key276.getTree());
      pushFollow(FOLLOW_in_key_in_compound_operator3586);
      in_key277=in_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       root_0=(Object)adaptor.becomeRoot(in_key277.getTree(),root_0);
    }
  break;
}
LEFT_PAREN278=(Token)input.LT(1);
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator3591);
if (failed) return retval;
pushFollow(FOLLOW_expression_value_in_compound_operator3594);
expression_value279=expression_value();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression_value279.getTree());
loop88: do {
int alt88=2;
int LA88_0=input.LA(1);
if ((LA88_0 == COMMA)) {
  alt88=1;
}
switch (alt88) {
case 1:
{
    COMMA280=(Token)input.LT(1);
    match(input,COMMA,FOLLOW_COMMA_in_compound_operator3598);
    if (failed)     return retval;
    pushFollow(FOLLOW_expression_value_in_compound_operator3601);
    expression_value281=expression_value();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,expression_value281.getTree());
  }
break;
default :
break loop88;
}
}
 while (true);
RIGHT_PAREN282=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator3606);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_PAREN282_tree=(Object)adaptor.create(RIGHT_PAREN282);
adaptor.addChild(root_0,RIGHT_PAREN282_tree);
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
