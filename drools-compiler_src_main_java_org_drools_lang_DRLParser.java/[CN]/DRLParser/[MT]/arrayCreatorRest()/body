{
  DRLParser.arrayCreatorRest_return retval=new DRLParser.arrayCreatorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE603=null;
  Token RIGHT_SQUARE604=null;
  Token LEFT_SQUARE605=null;
  Token RIGHT_SQUARE606=null;
  Token RIGHT_SQUARE609=null;
  Token LEFT_SQUARE610=null;
  Token RIGHT_SQUARE612=null;
  Token LEFT_SQUARE613=null;
  Token RIGHT_SQUARE614=null;
  DRLParser.arrayInitializer_return arrayInitializer607=null;
  DRLParser.expression_return expression608=null;
  DRLParser.expression_return expression611=null;
  Object LEFT_SQUARE603_tree=null;
  Object RIGHT_SQUARE604_tree=null;
  Object LEFT_SQUARE605_tree=null;
  Object RIGHT_SQUARE606_tree=null;
  Object RIGHT_SQUARE609_tree=null;
  Object LEFT_SQUARE610_tree=null;
  Object RIGHT_SQUARE612_tree=null;
  Object LEFT_SQUARE613_tree=null;
  Object RIGHT_SQUARE614_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE603=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8073);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE603_tree=(Object)adaptor.create(LEFT_SQUARE603);
        adaptor.addChild(root_0,LEFT_SQUARE603_tree);
      }
      int alt189=2;
      int LA189_0=input.LA(1);
      if ((LA189_0 == RIGHT_SQUARE)) {
        alt189=1;
      }
 else       if ((LA189_0 == ID || LA189_0 == STRING || (LA189_0 >= BOOL && LA189_0 <= LEFT_PAREN) || LA189_0 == DECIMAL || LA189_0 == LESS || LA189_0 == LEFT_SQUARE || (LA189_0 >= NULL && LA189_0 <= FLOAT) || (LA189_0 >= INCR && LA189_0 <= NEGATION))) {
        alt189=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",189,0,input);
        throw nvae;
      }
switch (alt189) {
case 1:
{
          RIGHT_SQUARE604=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8081);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            RIGHT_SQUARE604_tree=(Object)adaptor.create(RIGHT_SQUARE604);
            adaptor.addChild(root_0,RIGHT_SQUARE604_tree);
          }
          loop186:           do {
            int alt186=2;
            int LA186_0=input.LA(1);
            if ((LA186_0 == LEFT_SQUARE)) {
              alt186=1;
            }
switch (alt186) {
case 1:
{
                LEFT_SQUARE605=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8084);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE605_tree=(Object)adaptor.create(LEFT_SQUARE605);
                  adaptor.addChild(root_0,LEFT_SQUARE605_tree);
                }
                RIGHT_SQUARE606=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8086);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE606_tree=(Object)adaptor.create(RIGHT_SQUARE606);
                  adaptor.addChild(root_0,RIGHT_SQUARE606_tree);
                }
              }
            break;
default :
          break loop186;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest8090);
    arrayInitializer607=arrayInitializer();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arrayInitializer607.getTree());
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest8104);
expression608=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression608.getTree());
RIGHT_SQUARE609=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8106);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE609_tree=(Object)adaptor.create(RIGHT_SQUARE609);
  adaptor.addChild(root_0,RIGHT_SQUARE609_tree);
}
loop187: do {
  int alt187=2;
  alt187=dfa187.predict(input);
switch (alt187) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      LEFT_SQUARE610=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8111);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE610_tree=(Object)adaptor.create(LEFT_SQUARE610);
        adaptor.addChild(root_0,LEFT_SQUARE610_tree);
      }
      pushFollow(FOLLOW_expression_in_arrayCreatorRest8113);
      expression611=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression611.getTree());
      RIGHT_SQUARE612=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8115);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_SQUARE612_tree=(Object)adaptor.create(RIGHT_SQUARE612);
        adaptor.addChild(root_0,RIGHT_SQUARE612_tree);
      }
    }
  break;
default :
break loop187;
}
}
 while (true);
loop188: do {
int alt188=2;
int LA188_0=input.LA(1);
if ((LA188_0 == LEFT_SQUARE)) {
int LA188_2=input.LA(2);
if ((LA188_2 == RIGHT_SQUARE)) {
int LA188_3=input.LA(3);
if ((synpred66_DRL())) {
  alt188=1;
}
}
}
switch (alt188) {
case 1:
{
LEFT_SQUARE613=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8127);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_SQUARE613_tree=(Object)adaptor.create(LEFT_SQUARE613);
  adaptor.addChild(root_0,LEFT_SQUARE613_tree);
}
RIGHT_SQUARE614=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8129);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE614_tree=(Object)adaptor.create(RIGHT_SQUARE614);
  adaptor.addChild(root_0,RIGHT_SQUARE614_tree);
}
}
break;
default :
break loop188;
}
}
 while (true);
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
