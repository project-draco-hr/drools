{
  DRLParser.arrayCreatorRest_return retval=new DRLParser.arrayCreatorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE495=null;
  Token RIGHT_SQUARE496=null;
  Token LEFT_SQUARE497=null;
  Token RIGHT_SQUARE498=null;
  Token RIGHT_SQUARE501=null;
  Token LEFT_SQUARE502=null;
  Token RIGHT_SQUARE504=null;
  Token LEFT_SQUARE505=null;
  Token RIGHT_SQUARE506=null;
  DRLParser.arrayInitializer_return arrayInitializer499=null;
  DRLParser.expression_return expression500=null;
  DRLParser.expression_return expression503=null;
  Object LEFT_SQUARE495_tree=null;
  Object RIGHT_SQUARE496_tree=null;
  Object LEFT_SQUARE497_tree=null;
  Object RIGHT_SQUARE498_tree=null;
  Object RIGHT_SQUARE501_tree=null;
  Object LEFT_SQUARE502_tree=null;
  Object RIGHT_SQUARE504_tree=null;
  Object LEFT_SQUARE505_tree=null;
  Object RIGHT_SQUARE506_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE495=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7416);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE495_tree=(Object)adaptor.create(LEFT_SQUARE495);
        adaptor.addChild(root_0,LEFT_SQUARE495_tree);
      }
      int alt162=2;
      int LA162_0=input.LA(1);
      if ((LA162_0 == RIGHT_SQUARE)) {
        alt162=1;
      }
 else       if ((LA162_0 == ID || LA162_0 == STRING || (LA162_0 >= BOOL && LA162_0 <= LEFT_PAREN) || LA162_0 == DECIMAL || LA162_0 == LESS || LA162_0 == LEFT_SQUARE || (LA162_0 >= NULL && LA162_0 <= FLOAT) || (LA162_0 >= INCR && LA162_0 <= NEGATION))) {
        alt162=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",162,0,input);
        throw nvae;
      }
switch (alt162) {
case 1:
{
          RIGHT_SQUARE496=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7424);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            RIGHT_SQUARE496_tree=(Object)adaptor.create(RIGHT_SQUARE496);
            adaptor.addChild(root_0,RIGHT_SQUARE496_tree);
          }
          loop159:           do {
            int alt159=2;
            int LA159_0=input.LA(1);
            if ((LA159_0 == LEFT_SQUARE)) {
              alt159=1;
            }
switch (alt159) {
case 1:
{
                LEFT_SQUARE497=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7427);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE497_tree=(Object)adaptor.create(LEFT_SQUARE497);
                  adaptor.addChild(root_0,LEFT_SQUARE497_tree);
                }
                RIGHT_SQUARE498=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7429);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE498_tree=(Object)adaptor.create(RIGHT_SQUARE498);
                  adaptor.addChild(root_0,RIGHT_SQUARE498_tree);
                }
              }
            break;
default :
          break loop159;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest7433);
    arrayInitializer499=arrayInitializer();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arrayInitializer499.getTree());
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest7447);
expression500=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression500.getTree());
RIGHT_SQUARE501=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7449);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE501_tree=(Object)adaptor.create(RIGHT_SQUARE501);
  adaptor.addChild(root_0,RIGHT_SQUARE501_tree);
}
loop160: do {
  int alt160=2;
  alt160=dfa160.predict(input);
switch (alt160) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      LEFT_SQUARE502=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7454);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE502_tree=(Object)adaptor.create(LEFT_SQUARE502);
        adaptor.addChild(root_0,LEFT_SQUARE502_tree);
      }
      pushFollow(FOLLOW_expression_in_arrayCreatorRest7456);
      expression503=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression503.getTree());
      RIGHT_SQUARE504=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7458);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_SQUARE504_tree=(Object)adaptor.create(RIGHT_SQUARE504);
        adaptor.addChild(root_0,RIGHT_SQUARE504_tree);
      }
    }
  break;
default :
break loop160;
}
}
 while (true);
loop161: do {
int alt161=2;
int LA161_0=input.LA(1);
if ((LA161_0 == LEFT_SQUARE)) {
int LA161_2=input.LA(2);
if ((LA161_2 == RIGHT_SQUARE)) {
int LA161_3=input.LA(3);
if ((synpred44_DRL())) {
  alt161=1;
}
}
}
switch (alt161) {
case 1:
{
LEFT_SQUARE505=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7470);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_SQUARE505_tree=(Object)adaptor.create(LEFT_SQUARE505);
  adaptor.addChild(root_0,LEFT_SQUARE505_tree);
}
RIGHT_SQUARE506=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7472);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE506_tree=(Object)adaptor.create(RIGHT_SQUARE506);
  adaptor.addChild(root_0,RIGHT_SQUARE506_tree);
}
}
break;
default :
break loop161;
}
}
 while (true);
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
