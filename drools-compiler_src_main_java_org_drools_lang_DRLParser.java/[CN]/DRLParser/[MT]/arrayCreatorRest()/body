{
  DRLParser.arrayCreatorRest_return retval=new DRLParser.arrayCreatorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE460=null;
  Token RIGHT_SQUARE461=null;
  Token LEFT_SQUARE462=null;
  Token RIGHT_SQUARE463=null;
  Token RIGHT_SQUARE466=null;
  Token LEFT_SQUARE467=null;
  Token RIGHT_SQUARE469=null;
  Token LEFT_SQUARE470=null;
  Token RIGHT_SQUARE471=null;
  DRLParser.arrayInitializer_return arrayInitializer464=null;
  DRLParser.expression_return expression465=null;
  DRLParser.expression_return expression468=null;
  Object LEFT_SQUARE460_tree=null;
  Object RIGHT_SQUARE461_tree=null;
  Object LEFT_SQUARE462_tree=null;
  Object RIGHT_SQUARE463_tree=null;
  Object RIGHT_SQUARE466_tree=null;
  Object LEFT_SQUARE467_tree=null;
  Object RIGHT_SQUARE469_tree=null;
  Object LEFT_SQUARE470_tree=null;
  Object RIGHT_SQUARE471_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE460=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6815);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE460_tree=(Object)adaptor.create(LEFT_SQUARE460);
        adaptor.addChild(root_0,LEFT_SQUARE460_tree);
      }
      int alt153=2;
      int LA153_0=input.LA(1);
      if ((LA153_0 == RIGHT_SQUARE)) {
        alt153=1;
      }
 else       if ((LA153_0 == ID || LA153_0 == STRING || (LA153_0 >= BOOL && LA153_0 <= LEFT_PAREN) || LA153_0 == LESS || (LA153_0 >= NULL && LA153_0 <= LEFT_SQUARE) || (LA153_0 >= INCR && LA153_0 <= NEGATION))) {
        alt153=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",153,0,input);
        throw nvae;
      }
switch (alt153) {
case 1:
{
          RIGHT_SQUARE461=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6823);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            RIGHT_SQUARE461_tree=(Object)adaptor.create(RIGHT_SQUARE461);
            adaptor.addChild(root_0,RIGHT_SQUARE461_tree);
          }
          loop150:           do {
            int alt150=2;
            int LA150_0=input.LA(1);
            if ((LA150_0 == LEFT_SQUARE)) {
              alt150=1;
            }
switch (alt150) {
case 1:
{
                LEFT_SQUARE462=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6826);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE462_tree=(Object)adaptor.create(LEFT_SQUARE462);
                  adaptor.addChild(root_0,LEFT_SQUARE462_tree);
                }
                RIGHT_SQUARE463=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6828);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE463_tree=(Object)adaptor.create(RIGHT_SQUARE463);
                  adaptor.addChild(root_0,RIGHT_SQUARE463_tree);
                }
              }
            break;
default :
          break loop150;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest6832);
    arrayInitializer464=arrayInitializer();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arrayInitializer464.getTree());
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest6846);
expression465=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression465.getTree());
RIGHT_SQUARE466=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6848);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE466_tree=(Object)adaptor.create(RIGHT_SQUARE466);
  adaptor.addChild(root_0,RIGHT_SQUARE466_tree);
}
loop151: do {
  int alt151=2;
  alt151=dfa151.predict(input);
switch (alt151) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      LEFT_SQUARE467=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6853);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE467_tree=(Object)adaptor.create(LEFT_SQUARE467);
        adaptor.addChild(root_0,LEFT_SQUARE467_tree);
      }
      pushFollow(FOLLOW_expression_in_arrayCreatorRest6855);
      expression468=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression468.getTree());
      RIGHT_SQUARE469=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6857);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_SQUARE469_tree=(Object)adaptor.create(RIGHT_SQUARE469);
        adaptor.addChild(root_0,RIGHT_SQUARE469_tree);
      }
    }
  break;
default :
break loop151;
}
}
 while (true);
loop152: do {
int alt152=2;
int LA152_0=input.LA(1);
if ((LA152_0 == LEFT_SQUARE)) {
int LA152_2=input.LA(2);
if ((LA152_2 == RIGHT_SQUARE)) {
int LA152_3=input.LA(3);
if ((synpred41_DRL())) {
  alt152=1;
}
}
}
switch (alt152) {
case 1:
{
LEFT_SQUARE470=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6869);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_SQUARE470_tree=(Object)adaptor.create(LEFT_SQUARE470);
  adaptor.addChild(root_0,LEFT_SQUARE470_tree);
}
RIGHT_SQUARE471=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6871);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE471_tree=(Object)adaptor.create(RIGHT_SQUARE471);
  adaptor.addChild(root_0,RIGHT_SQUARE471_tree);
}
}
break;
default :
break loop152;
}
}
 while (true);
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
