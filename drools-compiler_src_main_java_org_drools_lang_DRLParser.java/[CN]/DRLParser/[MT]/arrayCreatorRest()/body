{
  DRLParser.arrayCreatorRest_return retval=new DRLParser.arrayCreatorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE490=null;
  Token RIGHT_SQUARE491=null;
  Token LEFT_SQUARE492=null;
  Token RIGHT_SQUARE493=null;
  Token RIGHT_SQUARE496=null;
  Token LEFT_SQUARE497=null;
  Token RIGHT_SQUARE499=null;
  Token LEFT_SQUARE500=null;
  Token RIGHT_SQUARE501=null;
  DRLParser.arrayInitializer_return arrayInitializer494=null;
  DRLParser.expression_return expression495=null;
  DRLParser.expression_return expression498=null;
  Object LEFT_SQUARE490_tree=null;
  Object RIGHT_SQUARE491_tree=null;
  Object LEFT_SQUARE492_tree=null;
  Object RIGHT_SQUARE493_tree=null;
  Object RIGHT_SQUARE496_tree=null;
  Object LEFT_SQUARE497_tree=null;
  Object RIGHT_SQUARE499_tree=null;
  Object LEFT_SQUARE500_tree=null;
  Object RIGHT_SQUARE501_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE490=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7355);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE490_tree=(Object)adaptor.create(LEFT_SQUARE490);
        adaptor.addChild(root_0,LEFT_SQUARE490_tree);
      }
      int alt160=2;
      int LA160_0=input.LA(1);
      if ((LA160_0 == RIGHT_SQUARE)) {
        alt160=1;
      }
 else       if ((LA160_0 == ID || LA160_0 == STRING || (LA160_0 >= BOOL && LA160_0 <= LEFT_PAREN) || LA160_0 == DECIMAL || LA160_0 == LESS || LA160_0 == LEFT_SQUARE || (LA160_0 >= NULL && LA160_0 <= FLOAT) || (LA160_0 >= INCR && LA160_0 <= NEGATION))) {
        alt160=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",160,0,input);
        throw nvae;
      }
switch (alt160) {
case 1:
{
          RIGHT_SQUARE491=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7363);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            RIGHT_SQUARE491_tree=(Object)adaptor.create(RIGHT_SQUARE491);
            adaptor.addChild(root_0,RIGHT_SQUARE491_tree);
          }
          loop157:           do {
            int alt157=2;
            int LA157_0=input.LA(1);
            if ((LA157_0 == LEFT_SQUARE)) {
              alt157=1;
            }
switch (alt157) {
case 1:
{
                LEFT_SQUARE492=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7366);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE492_tree=(Object)adaptor.create(LEFT_SQUARE492);
                  adaptor.addChild(root_0,LEFT_SQUARE492_tree);
                }
                RIGHT_SQUARE493=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7368);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE493_tree=(Object)adaptor.create(RIGHT_SQUARE493);
                  adaptor.addChild(root_0,RIGHT_SQUARE493_tree);
                }
              }
            break;
default :
          break loop157;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest7372);
    arrayInitializer494=arrayInitializer();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arrayInitializer494.getTree());
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest7386);
expression495=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression495.getTree());
RIGHT_SQUARE496=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7388);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE496_tree=(Object)adaptor.create(RIGHT_SQUARE496);
  adaptor.addChild(root_0,RIGHT_SQUARE496_tree);
}
loop158: do {
  int alt158=2;
  alt158=dfa158.predict(input);
switch (alt158) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      LEFT_SQUARE497=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7393);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE497_tree=(Object)adaptor.create(LEFT_SQUARE497);
        adaptor.addChild(root_0,LEFT_SQUARE497_tree);
      }
      pushFollow(FOLLOW_expression_in_arrayCreatorRest7395);
      expression498=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression498.getTree());
      RIGHT_SQUARE499=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7397);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_SQUARE499_tree=(Object)adaptor.create(RIGHT_SQUARE499);
        adaptor.addChild(root_0,RIGHT_SQUARE499_tree);
      }
    }
  break;
default :
break loop158;
}
}
 while (true);
loop159: do {
int alt159=2;
int LA159_0=input.LA(1);
if ((LA159_0 == LEFT_SQUARE)) {
int LA159_2=input.LA(2);
if ((LA159_2 == RIGHT_SQUARE)) {
int LA159_3=input.LA(3);
if ((synpred44_DRL())) {
  alt159=1;
}
}
}
switch (alt159) {
case 1:
{
LEFT_SQUARE500=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7409);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_SQUARE500_tree=(Object)adaptor.create(LEFT_SQUARE500);
  adaptor.addChild(root_0,LEFT_SQUARE500_tree);
}
RIGHT_SQUARE501=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7411);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE501_tree=(Object)adaptor.create(RIGHT_SQUARE501);
  adaptor.addChild(root_0,RIGHT_SQUARE501_tree);
}
}
break;
default :
break loop159;
}
}
 while (true);
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
