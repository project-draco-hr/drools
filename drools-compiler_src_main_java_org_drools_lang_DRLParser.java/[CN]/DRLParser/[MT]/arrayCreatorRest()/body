{
  DRLParser.arrayCreatorRest_return retval=new DRLParser.arrayCreatorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE618=null;
  Token RIGHT_SQUARE619=null;
  Token LEFT_SQUARE620=null;
  Token RIGHT_SQUARE621=null;
  Token RIGHT_SQUARE624=null;
  Token LEFT_SQUARE625=null;
  Token RIGHT_SQUARE627=null;
  Token LEFT_SQUARE628=null;
  Token RIGHT_SQUARE629=null;
  DRLParser.arrayInitializer_return arrayInitializer622=null;
  DRLParser.expression_return expression623=null;
  DRLParser.expression_return expression626=null;
  Object LEFT_SQUARE618_tree=null;
  Object RIGHT_SQUARE619_tree=null;
  Object LEFT_SQUARE620_tree=null;
  Object RIGHT_SQUARE621_tree=null;
  Object RIGHT_SQUARE624_tree=null;
  Object LEFT_SQUARE625_tree=null;
  Object RIGHT_SQUARE627_tree=null;
  Object LEFT_SQUARE628_tree=null;
  Object RIGHT_SQUARE629_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE618=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8176);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE618_tree=(Object)adaptor.create(LEFT_SQUARE618);
        adaptor.addChild(root_0,LEFT_SQUARE618_tree);
      }
      int alt191=2;
      int LA191_0=input.LA(1);
      if ((LA191_0 == RIGHT_SQUARE)) {
        alt191=1;
      }
 else       if ((LA191_0 == ID || LA191_0 == STRING || (LA191_0 >= BOOL && LA191_0 <= LEFT_PAREN) || LA191_0 == DECIMAL || LA191_0 == LESS || LA191_0 == LEFT_SQUARE || (LA191_0 >= NULL && LA191_0 <= FLOAT) || (LA191_0 >= INCR && LA191_0 <= NEGATION))) {
        alt191=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",191,0,input);
        throw nvae;
      }
switch (alt191) {
case 1:
{
          RIGHT_SQUARE619=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8184);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            RIGHT_SQUARE619_tree=(Object)adaptor.create(RIGHT_SQUARE619);
            adaptor.addChild(root_0,RIGHT_SQUARE619_tree);
          }
          loop188:           do {
            int alt188=2;
            int LA188_0=input.LA(1);
            if ((LA188_0 == LEFT_SQUARE)) {
              alt188=1;
            }
switch (alt188) {
case 1:
{
                LEFT_SQUARE620=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8187);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE620_tree=(Object)adaptor.create(LEFT_SQUARE620);
                  adaptor.addChild(root_0,LEFT_SQUARE620_tree);
                }
                RIGHT_SQUARE621=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8189);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE621_tree=(Object)adaptor.create(RIGHT_SQUARE621);
                  adaptor.addChild(root_0,RIGHT_SQUARE621_tree);
                }
              }
            break;
default :
          break loop188;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest8193);
    arrayInitializer622=arrayInitializer();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arrayInitializer622.getTree());
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest8207);
expression623=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression623.getTree());
RIGHT_SQUARE624=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8209);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE624_tree=(Object)adaptor.create(RIGHT_SQUARE624);
  adaptor.addChild(root_0,RIGHT_SQUARE624_tree);
}
loop189: do {
  int alt189=2;
  alt189=dfa189.predict(input);
switch (alt189) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      LEFT_SQUARE625=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8214);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE625_tree=(Object)adaptor.create(LEFT_SQUARE625);
        adaptor.addChild(root_0,LEFT_SQUARE625_tree);
      }
      pushFollow(FOLLOW_expression_in_arrayCreatorRest8216);
      expression626=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression626.getTree());
      RIGHT_SQUARE627=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8218);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_SQUARE627_tree=(Object)adaptor.create(RIGHT_SQUARE627);
        adaptor.addChild(root_0,RIGHT_SQUARE627_tree);
      }
    }
  break;
default :
break loop189;
}
}
 while (true);
loop190: do {
int alt190=2;
int LA190_0=input.LA(1);
if ((LA190_0 == LEFT_SQUARE)) {
int LA190_2=input.LA(2);
if ((LA190_2 == RIGHT_SQUARE)) {
int LA190_3=input.LA(3);
if ((synpred66_DRL())) {
  alt190=1;
}
}
}
switch (alt190) {
case 1:
{
LEFT_SQUARE628=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8230);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_SQUARE628_tree=(Object)adaptor.create(LEFT_SQUARE628);
  adaptor.addChild(root_0,LEFT_SQUARE628_tree);
}
RIGHT_SQUARE629=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8232);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_SQUARE629_tree=(Object)adaptor.create(RIGHT_SQUARE629);
  adaptor.addChild(root_0,RIGHT_SQUARE629_tree);
}
}
break;
default :
break loop190;
}
}
 while (true);
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
