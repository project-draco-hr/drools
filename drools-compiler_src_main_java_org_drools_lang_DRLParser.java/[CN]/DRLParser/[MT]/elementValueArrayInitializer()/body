{
  DRLParser.elementValueArrayInitializer_return retval=new DRLParser.elementValueArrayInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY855=null;
  Token COMMA857=null;
  Token RIGHT_CURLY859=null;
  DRLParser.elementValue_return elementValue856=null;
  DRLParser.elementValue_return elementValue858=null;
  Object LEFT_CURLY855_tree=null;
  Object COMMA857_tree=null;
  Object RIGHT_CURLY859_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY855=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_elementValueArrayInitializer10042);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY855_tree=(Object)adaptor.create(LEFT_CURLY855);
        adaptor.addChild(root_0,LEFT_CURLY855_tree);
      }
      int alt259=2;
      int LA259_0=input.LA(1);
      if ((LA259_0 == ID || LA259_0 == STRING || (LA259_0 >= BOOL && LA259_0 <= LEFT_PAREN) || (LA259_0 >= TimePeriod && LA259_0 <= DECIMAL) || LA259_0 == LESS || LA259_0 == LEFT_SQUARE || (LA259_0 >= NULL && LA259_0 <= FLOAT) || LA259_0 == LEFT_CURLY || (LA259_0 >= INCR && LA259_0 <= NEGATION) || LA259_0 == AT)) {
        alt259=1;
      }
switch (alt259) {
case 1:
{
          pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer10045);
          elementValue856=elementValue();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,elementValue856.getTree());
          loop258:           do {
            int alt258=2;
            int LA258_0=input.LA(1);
            if ((LA258_0 == COMMA)) {
              alt258=1;
            }
switch (alt258) {
case 1:
{
                COMMA857=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer10048);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  COMMA857_tree=(Object)adaptor.create(COMMA857);
                  adaptor.addChild(root_0,COMMA857_tree);
                }
                pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer10050);
                elementValue858=elementValue();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 adaptor.addChild(root_0,elementValue858.getTree());
              }
            break;
default :
          break loop258;
      }
    }
 while (true);
  }
break;
}
RIGHT_CURLY859=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_elementValueArrayInitializer10057);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY859_tree=(Object)adaptor.create(RIGHT_CURLY859);
adaptor.addChild(root_0,RIGHT_CURLY859_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
