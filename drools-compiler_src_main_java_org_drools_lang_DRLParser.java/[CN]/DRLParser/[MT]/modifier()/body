{
  DRLParser.modifier_return retval=new DRLParser.modifier_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.annotation_return annotation691=null;
  DRLParser.public_key_return public_key692=null;
  DRLParser.protected_key_return protected_key693=null;
  DRLParser.private_key_return private_key694=null;
  DRLParser.static_key_return static_key695=null;
  DRLParser.abstract_key_return abstract_key696=null;
  DRLParser.final_key_return final_key697=null;
  DRLParser.native_key_return native_key698=null;
  DRLParser.synchronized_key_return synchronized_key699=null;
  DRLParser.transient_key_return transient_key700=null;
  DRLParser.volatile_key_return volatile_key701=null;
  DRLParser.strictfp_key_return strictfp_key702=null;
  try {
    int alt211=12;
    alt211=dfa211.predict(input);
switch (alt211) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_annotation_in_modifier8807);
        annotation691=annotation();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,annotation691.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_public_key_in_modifier8817);
    public_key692=public_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,public_key692.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_protected_key_in_modifier8827);
protected_key693=protected_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,protected_key693.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_private_key_in_modifier8837);
private_key694=private_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,private_key694.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_static_key_in_modifier8847);
static_key695=static_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,static_key695.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_abstract_key_in_modifier8857);
abstract_key696=abstract_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,abstract_key696.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_final_key_in_modifier8867);
final_key697=final_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,final_key697.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_native_key_in_modifier8877);
native_key698=native_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,native_key698.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_synchronized_key_in_modifier8887);
synchronized_key699=synchronized_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,synchronized_key699.getTree());
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_transient_key_in_modifier8897);
transient_key700=transient_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,transient_key700.getTree());
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_volatile_key_in_modifier8907);
volatile_key701=volatile_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,volatile_key701.getTree());
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_strictfp_key_in_modifier8917);
strictfp_key702=strictfp_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,strictfp_key702.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
