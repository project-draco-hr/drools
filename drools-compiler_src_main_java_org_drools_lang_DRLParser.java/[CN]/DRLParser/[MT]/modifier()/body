{
  DRLParser.modifier_return retval=new DRLParser.modifier_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.annotation_return annotation706=null;
  DRLParser.public_key_return public_key707=null;
  DRLParser.protected_key_return protected_key708=null;
  DRLParser.private_key_return private_key709=null;
  DRLParser.static_key_return static_key710=null;
  DRLParser.abstract_key_return abstract_key711=null;
  DRLParser.final_key_return final_key712=null;
  DRLParser.native_key_return native_key713=null;
  DRLParser.synchronized_key_return synchronized_key714=null;
  DRLParser.transient_key_return transient_key715=null;
  DRLParser.volatile_key_return volatile_key716=null;
  DRLParser.strictfp_key_return strictfp_key717=null;
  try {
    int alt213=12;
    alt213=dfa213.predict(input);
switch (alt213) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_annotation_in_modifier8910);
        annotation706=annotation();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,annotation706.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_public_key_in_modifier8920);
    public_key707=public_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,public_key707.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_protected_key_in_modifier8930);
protected_key708=protected_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,protected_key708.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_private_key_in_modifier8940);
private_key709=private_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,private_key709.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_static_key_in_modifier8950);
static_key710=static_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,static_key710.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_abstract_key_in_modifier8960);
abstract_key711=abstract_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,abstract_key711.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_final_key_in_modifier8970);
final_key712=final_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,final_key712.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_native_key_in_modifier8980);
native_key713=native_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,native_key713.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_synchronized_key_in_modifier8990);
synchronized_key714=synchronized_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,synchronized_key714.getTree());
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_transient_key_in_modifier9000);
transient_key715=transient_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,transient_key715.getTree());
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_volatile_key_in_modifier9010);
volatile_key716=volatile_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,volatile_key716.getTree());
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_strictfp_key_in_modifier9020);
strictfp_key717=strictfp_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,strictfp_key717.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
