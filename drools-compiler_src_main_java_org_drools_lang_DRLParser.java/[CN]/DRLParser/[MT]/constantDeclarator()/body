{
  DRLParser.constantDeclarator_return retval=new DRLParser.constantDeclarator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID811=null;
  DRLParser.constantDeclaratorRest_return constantDeclaratorRest812=null;
  Object ID811_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      ID811=(Token)match(input,ID,FOLLOW_ID_in_constantDeclarator9639);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID811_tree=(Object)adaptor.create(ID811);
        adaptor.addChild(root_0,ID811_tree);
      }
      pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator9641);
      constantDeclaratorRest812=constantDeclaratorRest();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,constantDeclaratorRest812.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
