{
  AccumulateDescr d=null;
  Token loc=null;
  BaseDescr pattern=null;
  String text=null;
  d=factory.createAccumulate();
  try {
{
      loc=(Token)input.LT(1);
      match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement2056);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        d.setStartCharacter(((CommonToken)loc).getStartIndex());
        location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE);
      }
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement2066);
      if (failed)       return d;
      pushFollow(FOLLOW_lhs_pattern_in_accumulate_statement2070);
      pattern=lhs_pattern();
      _fsp--;
      if (failed)       return d;
      int alt31=2;
      int LA31_0=input.LA(1);
      if ((LA31_0 == COMMA)) {
        alt31=1;
      }
switch (alt31) {
case 1:
{
          match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2072);
          if (failed)           return d;
        }
      break;
  }
  if (backtracking == 0) {
    d.setSourcePattern((PatternDescr)pattern);
  }
  match(input,INIT,FOLLOW_INIT_in_accumulate_statement2082);
  if (failed)   return d;
  if (backtracking == 0) {
    location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);
  }
  pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2093);
  text=paren_chunk(null);
  _fsp--;
  if (failed)   return d;
  int alt32=2;
  int LA32_0=input.LA(1);
  if ((LA32_0 == COMMA)) {
    alt32=1;
  }
switch (alt32) {
case 1:
{
      match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2096);
      if (failed)       return d;
    }
  break;
}
if (backtracking == 0) {
if (text != null) {
  d.setInitCode(text.substring(1,text.length() - 1));
  location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_INIT_CONTENT,d.getInitCode());
  location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);
}
}
match(input,ACTION,FOLLOW_ACTION_in_accumulate_statement2105);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2109);
text=paren_chunk(null);
_fsp--;
if (failed) return d;
int alt33=2;
int LA33_0=input.LA(1);
if ((LA33_0 == COMMA)) {
alt33=1;
}
switch (alt33) {
case 1:
{
  match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2112);
  if (failed)   return d;
}
break;
}
if (backtracking == 0) {
if (text != null) {
d.setActionCode(text.substring(1,text.length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_ACTION_CONTENT,d.getActionCode());
location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
}
}
match(input,RESULT,FOLLOW_RESULT_in_accumulate_statement2121);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2125);
text=paren_chunk(null);
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (text != null) {
d.setResultCode(text.substring(1,text.length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_RESULT_CONTENT,d.getResultCode());
}
}
loc=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement2137);
if (failed) return d;
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
d.setEndCharacter(((CommonToken)loc).getStopIndex());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
