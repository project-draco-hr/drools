{
  AccumulateDescr d=null;
  Token loc=null;
  BaseDescr column=null;
  String text=null;
  d=factory.createAccumulate();
  try {
{
      loc=(Token)input.LT(1);
      match(input,47,FOLLOW_47_in_accumulate_statement1547);
      if (failed)       return d;
      match(input,48,FOLLOW_48_in_accumulate_statement1549);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      }
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement1559);
      if (failed)       return d;
      pushFollow(FOLLOW_lhs_column_in_accumulate_statement1563);
      column=lhs_column();
      _fsp--;
      if (failed)       return d;
      match(input,36,FOLLOW_36_in_accumulate_statement1565);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setSourceColumn((ColumnDescr)column);
      }
      match(input,49,FOLLOW_49_in_accumulate_statement1574);
      if (failed)       return d;
      pushFollow(FOLLOW_paren_chunk_in_accumulate_statement1578);
      text=paren_chunk();
      _fsp--;
      if (failed)       return d;
      match(input,36,FOLLOW_36_in_accumulate_statement1580);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setInitCode(text.substring(1,text.length() - 1));
      }
      match(input,50,FOLLOW_50_in_accumulate_statement1589);
      if (failed)       return d;
      pushFollow(FOLLOW_paren_chunk_in_accumulate_statement1593);
      text=paren_chunk();
      _fsp--;
      if (failed)       return d;
      match(input,36,FOLLOW_36_in_accumulate_statement1595);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setActionCode(text.substring(1,text.length() - 1));
      }
      match(input,51,FOLLOW_51_in_accumulate_statement1604);
      if (failed)       return d;
      pushFollow(FOLLOW_paren_chunk_in_accumulate_statement1608);
      text=paren_chunk();
      _fsp--;
      if (failed)       return d;
      match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement1610);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setResultCode(text.substring(1,text.length() - 1));
      }
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return d;
}
