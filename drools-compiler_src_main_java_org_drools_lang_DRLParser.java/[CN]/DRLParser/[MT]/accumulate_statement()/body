{
  AccumulateDescr d=null;
  Token id=null;
  Token ACCUMULATE45=null;
  Token RIGHT_PAREN46=null;
  BaseDescr inputCE=null;
  paren_chunk_return text=null;
  d=factory.createAccumulate();
  try {
{
      ACCUMULATE45=(Token)input.LT(1);
      match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement2733);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setLocation(offset(ACCUMULATE45.getLine()),ACCUMULATE45.getCharPositionInLine());
        d.setStartCharacter(((CommonToken)ACCUMULATE45).getStartIndex());
        location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE);
      }
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement2743);
      if (failed)       return d;
      pushFollow(FOLLOW_lhs_or_in_accumulate_statement2747);
      inputCE=lhs_or();
      _fsp--;
      if (failed)       return d;
      int alt44=2;
      int LA44_0=input.LA(1);
      if ((LA44_0 == COMMA)) {
        alt44=1;
      }
switch (alt44) {
case 1:
{
          match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2749);
          if (failed)           return d;
        }
      break;
  }
  if (backtracking == 0) {
    d.setInput(inputCE);
  }
  int alt49=2;
  int LA49_0=input.LA(1);
  if ((LA49_0 == INIT)) {
    alt49=1;
  }
 else   if ((LA49_0 == ID)) {
    alt49=2;
  }
 else {
    if (backtracking > 0) {
      failed=true;
      return d;
    }
    NoViableAltException nvae=new NoViableAltException("988:3: ( ( INIT text= paren_chunk ( COMMA )? ACTION text= paren_chunk ( COMMA )? ( REVERSE text= paren_chunk ( COMMA )? )? RESULT text= paren_chunk ) | (id= ID text= paren_chunk ) )",49,0,input);
    throw nvae;
  }
switch (alt49) {
case 1:
{
{
        match(input,INIT,FOLLOW_INIT_in_accumulate_statement2767);
        if (failed)         return d;
        if (backtracking == 0) {
          location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);
        }
        pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2780);
        text=paren_chunk();
        _fsp--;
        if (failed)         return d;
        int alt45=2;
        int LA45_0=input.LA(1);
        if ((LA45_0 == COMMA)) {
          alt45=1;
        }
switch (alt45) {
case 1:
{
            match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2782);
            if (failed)             return d;
          }
        break;
    }
    if (backtracking == 0) {
      if (input.toString(text.start,text.stop) != null) {
        d.setInitCode(safeSubstring(input.toString(text.start,text.stop),1,input.toString(text.start,text.stop).length() - 1));
        location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_INIT_CONTENT,d.getInitCode());
        location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);
      }
    }
    match(input,ACTION,FOLLOW_ACTION_in_accumulate_statement2793);
    if (failed)     return d;
    pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2797);
    text=paren_chunk();
    _fsp--;
    if (failed)     return d;
    int alt46=2;
    int LA46_0=input.LA(1);
    if ((LA46_0 == COMMA)) {
      alt46=1;
    }
switch (alt46) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2799);
        if (failed)         return d;
      }
    break;
}
if (backtracking == 0) {
  if (input.toString(text.start,text.stop) != null) {
    d.setActionCode(safeSubstring(input.toString(text.start,text.stop),1,input.toString(text.start,text.stop).length() - 1));
    location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_ACTION_CONTENT,d.getActionCode());
    location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);
  }
}
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == REVERSE)) {
  alt48=1;
}
switch (alt48) {
case 1:
{
    match(input,REVERSE,FOLLOW_REVERSE_in_accumulate_statement2812);
    if (failed)     return d;
    pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2816);
    text=paren_chunk();
    _fsp--;
    if (failed)     return d;
    int alt47=2;
    int LA47_0=input.LA(1);
    if ((LA47_0 == COMMA)) {
      alt47=1;
    }
switch (alt47) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2818);
        if (failed)         return d;
      }
    break;
}
if (backtracking == 0) {
  if (input.toString(text.start,text.stop) != null) {
    d.setReverseCode(safeSubstring(input.toString(text.start,text.stop),1,input.toString(text.start,text.stop).length() - 1));
    location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_REVERSE_CONTENT,d.getReverseCode());
    location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
  }
}
}
break;
}
match(input,RESULT,FOLLOW_RESULT_in_accumulate_statement2835);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2839);
text=paren_chunk();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (input.toString(text.start,text.stop) != null) {
d.setResultCode(safeSubstring(input.toString(text.start,text.stop),1,input.toString(text.start,text.stop).length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_RESULT_CONTENT,d.getResultCode());
}
}
}
}
break;
case 2:
{
{
id=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_accumulate_statement2865);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2869);
text=paren_chunk();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (id.getText() != null) {
d.setExternalFunction(true);
d.setFunctionIdentifier(id.getText());
}
if (input.toString(text.start,text.stop) != null) {
d.setExpression(safeSubstring(input.toString(text.start,text.stop),1,input.toString(text.start,text.stop).length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_EXPRESSION_CONTENT,d.getExpression());
}
}
}
}
break;
}
RIGHT_PAREN46=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement2886);
if (failed) return d;
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
d.setEndCharacter(((CommonToken)RIGHT_PAREN46).getStopIndex());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
