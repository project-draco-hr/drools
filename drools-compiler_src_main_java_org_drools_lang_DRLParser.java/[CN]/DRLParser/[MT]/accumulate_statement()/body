{
  DRLParser.accumulate_statement_return retval=new DRLParser.accumulate_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ACCUMULATE184=null;
  Token LEFT_PAREN185=null;
  Token COMMA187=null;
  Token RIGHT_PAREN190=null;
  DRLParser.lhs_or_return lhs_or186=null;
  DRLParser.accumulate_init_clause_return accumulate_init_clause188=null;
  DRLParser.accumulate_id_clause_return accumulate_id_clause189=null;
  Object ACCUMULATE184_tree=null;
  Object LEFT_PAREN185_tree=null;
  Object COMMA187_tree=null;
  Object RIGHT_PAREN190_tree=null;
  RewriteRuleTokenStream stream_ACCUMULATE=new RewriteRuleTokenStream(adaptor,"token ACCUMULATE");
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_accumulate_init_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_init_clause");
  RewriteRuleSubtreeStream stream_accumulate_id_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_id_clause");
  RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
  try {
{
      ACCUMULATE184=(Token)match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement3193);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ACCUMULATE.add(ACCUMULATE184);
      if (state.backtracking == 0) {
        helper.emit(ACCUMULATE184,DroolsEditorType.KEYWORD);
      }
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE);
      }
      LEFT_PAREN185=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement3202);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN185);
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN185,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_lhs_or_in_accumulate_statement3210);
      lhs_or186=lhs_or();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_lhs_or.add(lhs_or186.getTree());
      int alt56=2;
      int LA56_0=input.LA(1);
      if ((LA56_0 == COMMA)) {
        alt56=1;
      }
switch (alt56) {
case 1:
{
          COMMA187=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement3215);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_COMMA.add(COMMA187);
        }
      break;
  }
  if (state.backtracking == 0) {
    helper.emit(COMMA187,DroolsEditorType.SYMBOL);
  }
  int alt57=2;
  int LA57_0=input.LA(1);
  if ((LA57_0 == ID)) {
    int LA57_1=input.LA(2);
    if ((((helper.validateIdentifierKey(DroolsSoftKeywords.INIT))))) {
      alt57=1;
    }
 else     if ((true)) {
      alt57=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",57,1,input);
      throw nvae;
    }
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",57,0,input);
    throw nvae;
  }
switch (alt57) {
case 1:
{
      pushFollow(FOLLOW_accumulate_init_clause_in_accumulate_statement3225);
      accumulate_init_clause188=accumulate_init_clause();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_accumulate_init_clause.add(accumulate_init_clause188.getTree());
    }
  break;
case 2:
{
  pushFollow(FOLLOW_accumulate_id_clause_in_accumulate_statement3231);
  accumulate_id_clause189=accumulate_id_clause();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_accumulate_id_clause.add(accumulate_id_clause189.getTree());
}
break;
}
RIGHT_PAREN190=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement3239);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN190);
if (state.backtracking == 0) {
helper.emit(RIGHT_PAREN190,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_ACCUMULATE.nextNode(),root_1);
adaptor.addChild(root_1,stream_lhs_or.nextTree());
if (stream_accumulate_init_clause.hasNext()) {
  adaptor.addChild(root_1,stream_accumulate_init_clause.nextTree());
}
stream_accumulate_init_clause.reset();
if (stream_accumulate_id_clause.hasNext()) {
  adaptor.addChild(root_1,stream_accumulate_id_clause.nextTree());
}
stream_accumulate_id_clause.reset();
adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
