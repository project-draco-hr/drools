{
  AccumulateDescr d=null;
  Token ACCUMULATE44=null;
  Token RIGHT_PAREN45=null;
  BaseDescr pattern=null;
  paren_chunk_return text=null;
  d=factory.createAccumulate();
  try {
{
      ACCUMULATE44=(Token)input.LT(1);
      match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement2851);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setLocation(offset(ACCUMULATE44.getLine()),ACCUMULATE44.getCharPositionInLine());
        d.setStartCharacter(((CommonToken)ACCUMULATE44).getStartIndex());
        location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE);
      }
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement2861);
      if (failed)       return d;
      pushFollow(FOLLOW_lhs_pattern_in_accumulate_statement2865);
      pattern=lhs_pattern();
      _fsp--;
      if (failed)       return d;
      int alt53=2;
      int LA53_0=input.LA(1);
      if ((LA53_0 == COMMA)) {
        alt53=1;
      }
switch (alt53) {
case 1:
{
          match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2867);
          if (failed)           return d;
        }
      break;
  }
  if (backtracking == 0) {
    d.setSourcePattern((PatternDescr)pattern);
  }
  match(input,INIT,FOLLOW_INIT_in_accumulate_statement2877);
  if (failed)   return d;
  if (backtracking == 0) {
    location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);
  }
  pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2888);
  text=paren_chunk();
  _fsp--;
  if (failed)   return d;
  int alt54=2;
  int LA54_0=input.LA(1);
  if ((LA54_0 == COMMA)) {
    alt54=1;
  }
switch (alt54) {
case 1:
{
      match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2890);
      if (failed)       return d;
    }
  break;
}
if (backtracking == 0) {
if (input.toString(text.start,text.stop) != null) {
  d.setInitCode(input.toString(text.start,text.stop).substring(1,input.toString(text.start,text.stop).length() - 1));
  location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_INIT_CONTENT,d.getInitCode());
  location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);
}
}
match(input,ACTION,FOLLOW_ACTION_in_accumulate_statement2899);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2903);
text=paren_chunk();
_fsp--;
if (failed) return d;
int alt55=2;
int LA55_0=input.LA(1);
if ((LA55_0 == COMMA)) {
alt55=1;
}
switch (alt55) {
case 1:
{
  match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2905);
  if (failed)   return d;
}
break;
}
if (backtracking == 0) {
if (input.toString(text.start,text.stop) != null) {
d.setActionCode(input.toString(text.start,text.stop).substring(1,input.toString(text.start,text.stop).length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_ACTION_CONTENT,d.getActionCode());
location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);
}
}
int alt57=2;
int LA57_0=input.LA(1);
if ((LA57_0 == REVERSE)) {
alt57=1;
}
switch (alt57) {
case 1:
{
match(input,REVERSE,FOLLOW_REVERSE_in_accumulate_statement2916);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2920);
text=paren_chunk();
_fsp--;
if (failed) return d;
int alt56=2;
int LA56_0=input.LA(1);
if ((LA56_0 == COMMA)) {
alt56=1;
}
switch (alt56) {
case 1:
{
  match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2922);
  if (failed)   return d;
}
break;
}
if (backtracking == 0) {
if (input.toString(text.start,text.stop) != null) {
d.setReverseCode(input.toString(text.start,text.stop).substring(1,input.toString(text.start,text.stop).length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_REVERSE_CONTENT,d.getReverseCode());
location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
}
}
}
break;
}
match(input,RESULT,FOLLOW_RESULT_in_accumulate_statement2936);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2940);
text=paren_chunk();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (input.toString(text.start,text.stop) != null) {
d.setResultCode(input.toString(text.start,text.stop).substring(1,input.toString(text.start,text.stop).length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_RESULT_CONTENT,d.getResultCode());
}
}
RIGHT_PAREN45=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement2949);
if (failed) return d;
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
d.setEndCharacter(((CommonToken)RIGHT_PAREN45).getStopIndex());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
