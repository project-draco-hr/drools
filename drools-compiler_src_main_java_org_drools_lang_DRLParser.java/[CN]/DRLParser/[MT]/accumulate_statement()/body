{
  AccumulateDescr d=null;
  Token ACCUMULATE44=null;
  Token RIGHT_PAREN45=null;
  BaseDescr pattern=null;
  String text=null;
  d=factory.createAccumulate();
  try {
{
      ACCUMULATE44=(Token)input.LT(1);
      match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement2859);
      if (failed)       return d;
      if (backtracking == 0) {
        d.setLocation(offset(ACCUMULATE44.getLine()),ACCUMULATE44.getCharPositionInLine());
        d.setStartCharacter(((CommonToken)ACCUMULATE44).getStartIndex());
        location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE);
      }
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement2869);
      if (failed)       return d;
      pushFollow(FOLLOW_lhs_pattern_in_accumulate_statement2873);
      pattern=lhs_pattern();
      _fsp--;
      if (failed)       return d;
      int alt51=2;
      int LA51_0=input.LA(1);
      if ((LA51_0 == COMMA)) {
        alt51=1;
      }
switch (alt51) {
case 1:
{
          match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2875);
          if (failed)           return d;
        }
      break;
  }
  if (backtracking == 0) {
    d.setSourcePattern((PatternDescr)pattern);
  }
  match(input,INIT,FOLLOW_INIT_in_accumulate_statement2885);
  if (failed)   return d;
  if (backtracking == 0) {
    location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);
  }
  pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2896);
  text=paren_chunk(null);
  _fsp--;
  if (failed)   return d;
  int alt52=2;
  int LA52_0=input.LA(1);
  if ((LA52_0 == COMMA)) {
    alt52=1;
  }
switch (alt52) {
case 1:
{
      match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2899);
      if (failed)       return d;
    }
  break;
}
if (backtracking == 0) {
if (text != null) {
  d.setInitCode(text.substring(1,text.length() - 1));
  location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_INIT_CONTENT,d.getInitCode());
  location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);
}
}
match(input,ACTION,FOLLOW_ACTION_in_accumulate_statement2908);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2912);
text=paren_chunk(null);
_fsp--;
if (failed) return d;
int alt53=2;
int LA53_0=input.LA(1);
if ((LA53_0 == COMMA)) {
alt53=1;
}
switch (alt53) {
case 1:
{
  match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2915);
  if (failed)   return d;
}
break;
}
if (backtracking == 0) {
if (text != null) {
d.setActionCode(text.substring(1,text.length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_ACTION_CONTENT,d.getActionCode());
location.setType(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
}
}
match(input,RESULT,FOLLOW_RESULT_in_accumulate_statement2924);
if (failed) return d;
pushFollow(FOLLOW_paren_chunk_in_accumulate_statement2928);
text=paren_chunk(null);
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (text != null) {
d.setResultCode(text.substring(1,text.length() - 1));
location.setProperty(Location.LOCATION_PROPERTY_FROM_ACCUMULATE_RESULT_CONTENT,d.getResultCode());
}
}
RIGHT_PAREN45=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement2938);
if (failed) return d;
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
d.setEndCharacter(((CommonToken)RIGHT_PAREN45).getStopIndex());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
