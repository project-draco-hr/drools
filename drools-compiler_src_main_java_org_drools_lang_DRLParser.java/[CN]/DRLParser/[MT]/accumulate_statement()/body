{
  accumulate_statement_return retval=new accumulate_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ACCUMULATE170=null;
  Token LEFT_PAREN171=null;
  Token COMMA173=null;
  Token RIGHT_PAREN176=null;
  lhs_or_return lhs_or172=null;
  accumulate_init_clause_return accumulate_init_clause174=null;
  accumulate_id_clause_return accumulate_id_clause175=null;
  Object ACCUMULATE170_tree=null;
  Object LEFT_PAREN171_tree=null;
  Object COMMA173_tree=null;
  Object RIGHT_PAREN176_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_ACCUMULATE=new RewriteRuleTokenStream(adaptor,"token ACCUMULATE");
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
  RewriteRuleSubtreeStream stream_accumulate_init_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_init_clause");
  RewriteRuleSubtreeStream stream_accumulate_id_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_id_clause");
  try {
{
      ACCUMULATE170=(Token)input.LT(1);
      match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement2873);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ACCUMULATE.add(ACCUMULATE170);
      if (backtracking == 0) {
        emit(ACCUMULATE170,DroolsEditorType.KEYWORD);
      }
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_FROM_ACCUMULATE);
      }
      LEFT_PAREN171=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement2882);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN171);
      if (backtracking == 0) {
        emit(LEFT_PAREN171,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_lhs_or_in_accumulate_statement2890);
      lhs_or172=lhs_or();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_lhs_or.add(lhs_or172.getTree());
      int alt58=2;
      int LA58_0=input.LA(1);
      if ((LA58_0 == COMMA)) {
        alt58=1;
      }
switch (alt58) {
case 1:
{
          COMMA173=(Token)input.LT(1);
          match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2895);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COMMA.add(COMMA173);
        }
      break;
  }
  if (backtracking == 0) {
    emit(COMMA173,DroolsEditorType.SYMBOL);
  }
  int alt59=2;
  int LA59_0=input.LA(1);
  if ((LA59_0 == INIT)) {
    alt59=1;
  }
 else   if ((LA59_0 == ID)) {
    alt59=2;
  }
 else {
    if (backtracking > 0) {
      failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("898:3: ( accumulate_init_clause | accumulate_id_clause )",59,0,input);
    throw nvae;
  }
switch (alt59) {
case 1:
{
      pushFollow(FOLLOW_accumulate_init_clause_in_accumulate_statement2905);
      accumulate_init_clause174=accumulate_init_clause();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_accumulate_init_clause.add(accumulate_init_clause174.getTree());
    }
  break;
case 2:
{
  pushFollow(FOLLOW_accumulate_id_clause_in_accumulate_statement2911);
  accumulate_id_clause175=accumulate_id_clause();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_accumulate_id_clause.add(accumulate_id_clause175.getTree());
}
break;
}
RIGHT_PAREN176=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement2919);
if (failed) return retval;
if (backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN176);
if (backtracking == 0) {
emit(RIGHT_PAREN176,DroolsEditorType.SYMBOL);
}
if (backtracking == 0) {
emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_ACCUMULATE.next(),root_1);
adaptor.addChild(root_1,stream_lhs_or.next());
if (stream_accumulate_init_clause.hasNext()) {
  adaptor.addChild(root_1,stream_accumulate_init_clause.next());
}
stream_accumulate_init_clause.reset();
if (stream_accumulate_id_clause.hasNext()) {
  adaptor.addChild(root_1,stream_accumulate_id_clause.next());
}
stream_accumulate_id_clause.reset();
adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
