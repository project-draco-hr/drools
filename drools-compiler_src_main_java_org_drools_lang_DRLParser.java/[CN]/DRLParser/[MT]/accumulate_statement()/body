{
  DRLParser.accumulate_statement_return retval=new DRLParser.accumulate_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ACCUMULATE175=null;
  Token LEFT_PAREN176=null;
  Token COMMA178=null;
  Token RIGHT_PAREN181=null;
  DRLParser.lhs_or_return lhs_or177=null;
  DRLParser.accumulate_init_clause_return accumulate_init_clause179=null;
  DRLParser.accumulate_id_clause_return accumulate_id_clause180=null;
  Object ACCUMULATE175_tree=null;
  Object LEFT_PAREN176_tree=null;
  Object COMMA178_tree=null;
  Object RIGHT_PAREN181_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_ACCUMULATE=new RewriteRuleTokenStream(adaptor,"token ACCUMULATE");
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
  RewriteRuleSubtreeStream stream_accumulate_init_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_init_clause");
  RewriteRuleSubtreeStream stream_accumulate_id_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_id_clause");
  try {
{
      ACCUMULATE175=(Token)match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement2914);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ACCUMULATE.add(ACCUMULATE175);
      if (state.backtracking == 0) {
        emit(ACCUMULATE175,DroolsEditorType.KEYWORD);
      }
      if (state.backtracking == 0) {
        emit(Location.LOCATION_LHS_FROM_ACCUMULATE);
      }
      LEFT_PAREN176=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement2923);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN176);
      if (state.backtracking == 0) {
        emit(LEFT_PAREN176,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_lhs_or_in_accumulate_statement2931);
      lhs_or177=lhs_or();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_lhs_or.add(lhs_or177.getTree());
      int alt62=2;
      int LA62_0=input.LA(1);
      if ((LA62_0 == COMMA)) {
        alt62=1;
      }
switch (alt62) {
case 1:
{
          COMMA178=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2936);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_COMMA.add(COMMA178);
        }
      break;
  }
  if (state.backtracking == 0) {
    emit(COMMA178,DroolsEditorType.SYMBOL);
  }
  int alt63=2;
  int LA63_0=input.LA(1);
  if ((LA63_0 == INIT)) {
    alt63=1;
  }
 else   if ((LA63_0 == ID)) {
    alt63=2;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",63,0,input);
    throw nvae;
  }
switch (alt63) {
case 1:
{
      pushFollow(FOLLOW_accumulate_init_clause_in_accumulate_statement2946);
      accumulate_init_clause179=accumulate_init_clause();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_accumulate_init_clause.add(accumulate_init_clause179.getTree());
    }
  break;
case 2:
{
  pushFollow(FOLLOW_accumulate_id_clause_in_accumulate_statement2952);
  accumulate_id_clause180=accumulate_id_clause();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_accumulate_id_clause.add(accumulate_id_clause180.getTree());
}
break;
}
RIGHT_PAREN181=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement2960);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN181);
if (state.backtracking == 0) {
emit(RIGHT_PAREN181,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_ACCUMULATE.nextNode(),root_1);
adaptor.addChild(root_1,stream_lhs_or.nextTree());
if (stream_accumulate_init_clause.hasNext()) {
  adaptor.addChild(root_1,stream_accumulate_init_clause.nextTree());
}
stream_accumulate_init_clause.reset();
if (stream_accumulate_id_clause.hasNext()) {
  adaptor.addChild(root_1,stream_accumulate_id_clause.nextTree());
}
stream_accumulate_id_clause.reset();
adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
