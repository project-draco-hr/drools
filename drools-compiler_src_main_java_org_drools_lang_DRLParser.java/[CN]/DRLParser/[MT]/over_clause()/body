{
  over_clause_return retval=new over_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OVER164=null;
  Token COMMA166=null;
  over_elements_return over_elements165=null;
  over_elements_return over_elements167=null;
  Object OVER164_tree=null;
  Object COMMA166_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      OVER164=(Token)input.LT(1);
      match(input,OVER,FOLLOW_OVER_in_over_clause2816);
      if (failed)       return retval;
      if (backtracking == 0) {
        OVER164_tree=(Object)adaptor.create(OVER164);
        root_0=(Object)adaptor.becomeRoot(OVER164_tree,root_0);
      }
      if (backtracking == 0) {
        emit(OVER164,DroolsEditorType.KEYWORD);
      }
      pushFollow(FOLLOW_over_elements_in_over_clause2821);
      over_elements165=over_elements();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,over_elements165.getTree());
      loop57:       do {
        int alt57=2;
        int LA57_0=input.LA(1);
        if ((LA57_0 == COMMA)) {
          int LA57_2=input.LA(2);
          if ((LA57_2 == ID)) {
            int LA57_3=input.LA(3);
            if ((LA57_3 == COLON)) {
              alt57=1;
            }
          }
        }
switch (alt57) {
case 1:
{
            COMMA166=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_over_clause2828);
            if (failed)             return retval;
            if (backtracking == 0) {
              emit(COMMA166,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_over_elements_in_over_clause2833);
            over_elements167=over_elements();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             adaptor.addChild(root_0,over_elements167.getTree());
          }
        break;
default :
      break loop57;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
