{
  DRLParser.over_clause_return retval=new DRLParser.over_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OVER168=null;
  Token COMMA170=null;
  DRLParser.over_elements_return over_elements169=null;
  DRLParser.over_elements_return over_elements171=null;
  Object OVER168_tree=null;
  Object COMMA170_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      OVER168=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause2810);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        OVER168_tree=(Object)adaptor.create(OVER168);
        root_0=(Object)adaptor.becomeRoot(OVER168_tree,root_0);
      }
      if (state.backtracking == 0) {
        emit(OVER168,DroolsEditorType.KEYWORD);
      }
      pushFollow(FOLLOW_over_elements_in_over_clause2815);
      over_elements169=over_elements();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,over_elements169.getTree());
      loop60:       do {
        int alt60=2;
        int LA60_0=input.LA(1);
        if ((LA60_0 == COMMA)) {
          int LA60_2=input.LA(2);
          if ((LA60_2 == ID)) {
            int LA60_3=input.LA(3);
            if ((LA60_3 == COLON)) {
              alt60=1;
            }
          }
        }
switch (alt60) {
case 1:
{
            COMMA170=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause2822);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              emit(COMMA170,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_over_elements_in_over_clause2827);
            over_elements171=over_elements();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,over_elements171.getTree());
          }
        break;
default :
      break loop60;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
