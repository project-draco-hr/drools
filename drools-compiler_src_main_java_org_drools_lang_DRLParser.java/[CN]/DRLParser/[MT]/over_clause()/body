{
  DRLParser.over_clause_return retval=new DRLParser.over_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OVER183=null;
  Token COMMA185=null;
  DRLParser.over_elements_return over_elements184=null;
  DRLParser.over_elements_return over_elements186=null;
  Object OVER183_tree=null;
  Object COMMA185_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      OVER183=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause3098);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        OVER183_tree=(Object)adaptor.create(OVER183);
        root_0=(Object)adaptor.becomeRoot(OVER183_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(OVER183,DroolsEditorType.KEYWORD);
      }
      pushFollow(FOLLOW_over_elements_in_over_clause3103);
      over_elements184=over_elements();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,over_elements184.getTree());
      loop56:       do {
        int alt56=2;
        int LA56_0=input.LA(1);
        if ((LA56_0 == COMMA)) {
          int LA56_2=input.LA(2);
          if ((LA56_2 == ID)) {
            int LA56_3=input.LA(3);
            if ((LA56_3 == COLON)) {
              alt56=1;
            }
          }
        }
switch (alt56) {
case 1:
{
            COMMA185=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause3110);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              helper.emit(COMMA185,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_over_elements_in_over_clause3115);
            over_elements186=over_elements();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,over_elements186.getTree());
          }
        break;
default :
      break loop56;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
