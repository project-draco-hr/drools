{
  DRLParser.over_clause_return retval=new DRLParser.over_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OVER169=null;
  Token COMMA171=null;
  DRLParser.over_elements_return over_elements170=null;
  DRLParser.over_elements_return over_elements172=null;
  Object OVER169_tree=null;
  Object COMMA171_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      OVER169=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause2833);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        OVER169_tree=(Object)adaptor.create(OVER169);
        root_0=(Object)adaptor.becomeRoot(OVER169_tree,root_0);
      }
      if (state.backtracking == 0) {
        emit(OVER169,DroolsEditorType.KEYWORD);
      }
      pushFollow(FOLLOW_over_elements_in_over_clause2838);
      over_elements170=over_elements();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,over_elements170.getTree());
      loop61:       do {
        int alt61=2;
        int LA61_0=input.LA(1);
        if ((LA61_0 == COMMA)) {
          int LA61_2=input.LA(2);
          if ((LA61_2 == ID)) {
            int LA61_3=input.LA(3);
            if ((LA61_3 == COLON)) {
              alt61=1;
            }
          }
        }
switch (alt61) {
case 1:
{
            COMMA171=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause2845);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              emit(COMMA171,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_over_elements_in_over_clause2850);
            over_elements172=over_elements();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,over_elements172.getTree());
          }
        break;
default :
      break loop61;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
