{
  DRLParser.over_clause_return retval=new DRLParser.over_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OVER177=null;
  Token COMMA179=null;
  DRLParser.over_elements_return over_elements178=null;
  DRLParser.over_elements_return over_elements180=null;
  Object OVER177_tree=null;
  Object COMMA179_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      OVER177=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause3080);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        OVER177_tree=(Object)adaptor.create(OVER177);
        root_0=(Object)adaptor.becomeRoot(OVER177_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(OVER177,DroolsEditorType.KEYWORD);
      }
      pushFollow(FOLLOW_over_elements_in_over_clause3085);
      over_elements178=over_elements();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,over_elements178.getTree());
      loop54:       do {
        int alt54=2;
        int LA54_0=input.LA(1);
        if ((LA54_0 == COMMA)) {
          int LA54_2=input.LA(2);
          if ((LA54_2 == ID)) {
            int LA54_3=input.LA(3);
            if ((LA54_3 == COLON)) {
              alt54=1;
            }
          }
        }
switch (alt54) {
case 1:
{
            COMMA179=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause3092);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              helper.emit(COMMA179,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_over_elements_in_over_clause3097);
            over_elements180=over_elements();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,over_elements180.getTree());
          }
        break;
default :
      break loop54;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
