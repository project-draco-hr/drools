{
  DRLParser.calendars_return retval=new DRLParser.calendars_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.calendars_key_return calendars_key115=null;
  DRLParser.string_list_return string_list116=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_calendars_key_in_calendars2133);
      calendars_key115=calendars_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       root_0=(Object)adaptor.becomeRoot(calendars_key115.getTree(),root_0);
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
      }
      pushFollow(FOLLOW_string_list_in_calendars2138);
      string_list116=string_list();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,string_list116.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
