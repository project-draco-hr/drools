{
  DRLParser.decl_field_return retval=new DRLParser.decl_field_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID51=null;
  Token COLON53=null;
  DRLParser.decl_field_initialization_return decl_field_initialization52=null;
  DRLParser.data_type_return data_type54=null;
  DRLParser.decl_metadata_return decl_metadata55=null;
  Object ID51_tree=null;
  Object COLON53_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_decl_field_initialization=new RewriteRuleSubtreeStream(adaptor,"rule decl_field_initialization");
  RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
  RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
  try {
{
      ID51=(Token)match(input,ID,FOLLOW_ID_in_decl_field1438);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(ID51);
      if (state.backtracking == 0) {
        helper.emit(ID51,DroolsEditorType.IDENTIFIER);
      }
      int alt19=2;
      int LA19_0=input.LA(1);
      if ((LA19_0 == EQUALS_ASSIGN)) {
        alt19=1;
      }
switch (alt19) {
case 1:
{
          pushFollow(FOLLOW_decl_field_initialization_in_decl_field1444);
          decl_field_initialization52=decl_field_initialization();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_decl_field_initialization.add(decl_field_initialization52.getTree());
        }
      break;
  }
  COLON53=(Token)match(input,COLON,FOLLOW_COLON_in_decl_field1450);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_COLON.add(COLON53);
  if (state.backtracking == 0) {
    helper.emit(COLON53,DroolsEditorType.SYMBOL);
  }
  pushFollow(FOLLOW_data_type_in_decl_field1456);
  data_type54=data_type();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_data_type.add(data_type54.getTree());
  loop20:   do {
    int alt20=2;
    int LA20_0=input.LA(1);
    if ((LA20_0 == AT)) {
      alt20=1;
    }
switch (alt20) {
case 1:
{
        pushFollow(FOLLOW_decl_metadata_in_decl_field1460);
        decl_metadata55=decl_metadata();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_decl_metadata.add(decl_metadata55.getTree());
      }
    break;
default :
  break loop20;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot(stream_ID.nextNode(),root_1);
  if (stream_decl_field_initialization.hasNext()) {
    adaptor.addChild(root_1,stream_decl_field_initialization.nextTree());
  }
  stream_decl_field_initialization.reset();
  adaptor.addChild(root_1,stream_data_type.nextTree());
  while (stream_decl_metadata.hasNext()) {
    adaptor.addChild(root_1,stream_decl_metadata.nextTree());
  }
  stream_decl_metadata.reset();
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
