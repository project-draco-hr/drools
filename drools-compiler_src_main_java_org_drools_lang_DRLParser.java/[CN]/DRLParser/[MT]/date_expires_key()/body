{
  DRLParser.date_expires_key_return retval=new DRLParser.date_expires_key_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id1=null;
  Token mis1=null;
  Token id2=null;
  Object id1_tree=null;
  Object mis1_tree=null;
  Object id2_tree=null;
  RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  String text="";
  try {
{
      if (!(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES))))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"date_expires_key","(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES))");
      }
      id1=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key10555);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(id1);
      mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_expires_key10559);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_MINUS.add(mis1);
      id2=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key10563);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(id2);
      if (state.backtracking == 0) {
        text=input.toString(retval.start,input.LT(-1));
      }
      if (state.backtracking == 0) {
        helper.emit(id1,DroolsEditorType.KEYWORD);
        helper.emit(mis1,DroolsEditorType.KEYWORD);
        helper.emit(id2,DroolsEditorType.KEYWORD);
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,(Object)adaptor.create(VK_DATE_EXPIRES,((Token)retval.start),text));
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
