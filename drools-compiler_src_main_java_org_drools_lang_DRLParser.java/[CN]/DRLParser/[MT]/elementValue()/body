{
  DRLParser.elementValue_return retval=new DRLParser.elementValue_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token TimePeriod866=null;
  DRLParser.conditionalExpression_return conditionalExpression867=null;
  DRLParser.annotation_return annotation868=null;
  DRLParser.elementValueArrayInitializer_return elementValueArrayInitializer869=null;
  Object TimePeriod866_tree=null;
  try {
    int alt259=4;
switch (input.LA(1)) {
case TimePeriod:
{
        alt259=1;
      }
    break;
case ID:
case STRING:
case BOOL:
case LEFT_PAREN:
case DECIMAL:
case LESS:
case LEFT_SQUARE:
case NULL:
case PLUS:
case MINUS:
case HEX:
case FLOAT:
case INCR:
case DECR:
case TILDE:
case NEGATION:
{
    alt259=2;
  }
break;
case AT:
{
alt259=3;
}
break;
case LEFT_CURLY:
{
alt259=4;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",259,0,input);
throw nvae;
}
switch (alt259) {
case 1:
{
root_0=(Object)adaptor.nil();
TimePeriod866=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_elementValue10115);
if (state.failed) return retval;
if (state.backtracking == 0) {
TimePeriod866_tree=(Object)adaptor.create(TimePeriod866);
adaptor.addChild(root_0,TimePeriod866_tree);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_conditionalExpression_in_elementValue10120);
conditionalExpression867=conditionalExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,conditionalExpression867.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_annotation_in_elementValue10127);
annotation868=annotation();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,annotation868.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue10134);
elementValueArrayInitializer869=elementValueArrayInitializer();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,elementValueArrayInitializer869.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
