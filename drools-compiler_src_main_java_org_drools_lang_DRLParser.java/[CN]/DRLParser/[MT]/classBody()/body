{
  DRLParser.classBody_return retval=new DRLParser.classBody_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY682=null;
  Token RIGHT_CURLY684=null;
  DRLParser.classBodyDeclaration_return classBodyDeclaration683=null;
  Object LEFT_CURLY682_tree=null;
  Object RIGHT_CURLY684_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY682=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_classBody8727);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY682_tree=(Object)adaptor.create(LEFT_CURLY682);
        adaptor.addChild(root_0,LEFT_CURLY682_tree);
      }
      loop208:       do {
        int alt208=2;
        int LA208_0=input.LA(1);
        if (((LA208_0 >= SEMICOLON && LA208_0 <= ID) || LA208_0 == LESS || LA208_0 == LEFT_CURLY || LA208_0 == AT)) {
          alt208=1;
        }
switch (alt208) {
case 1:
{
            pushFollow(FOLLOW_classBodyDeclaration_in_classBody8729);
            classBodyDeclaration683=classBodyDeclaration();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,classBodyDeclaration683.getTree());
          }
        break;
default :
      break loop208;
  }
}
 while (true);
RIGHT_CURLY684=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_classBody8732);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_CURLY684_tree=(Object)adaptor.create(RIGHT_CURLY684);
  adaptor.addChild(root_0,RIGHT_CURLY684_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
