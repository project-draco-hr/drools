{
  RuleDescr rule=null;
  Token loc=null;
  String ruleName=null;
  rule=null;
  String consequence="";
  AndDescr lhs=null;
  try {
{
      loc=(Token)input.LT(1);
      match(input,RULE,FOLLOW_RULE_in_rule937);
      if (failed)       return rule;
      pushFollow(FOLLOW_name_in_rule941);
      ruleName=name();
      _fsp--;
      if (failed)       return rule;
      if (backtracking == 0) {
        location.setType(Location.LOCATION_RULE_HEADER);
        debug("start rule: " + ruleName);
        rule=new RuleDescr(ruleName,null);
        rule.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        rule.setStartCharacter(((CommonToken)loc).getStartIndex());
      }
      pushFollow(FOLLOW_rule_attributes_in_rule950);
      rule_attributes(rule);
      _fsp--;
      if (failed)       return rule;
      int alt20=2;
      int LA20_0=input.LA(1);
      if ((LA20_0 == WHEN)) {
        alt20=1;
      }
switch (alt20) {
case 1:
{
          loc=(Token)input.LT(1);
          match(input,WHEN,FOLLOW_WHEN_in_rule959);
          if (failed)           return rule;
          int alt19=2;
          int LA19_0=input.LA(1);
          if ((LA19_0 == 70)) {
            alt19=1;
          }
switch (alt19) {
case 1:
{
              match(input,70,FOLLOW_70_in_rule961);
              if (failed)               return rule;
            }
          break;
      }
      if (backtracking == 0) {
        this.location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
        lhs=new AndDescr();
        rule.setLhs(lhs);
        lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        lhs.setStartCharacter(((CommonToken)loc).getStartIndex());
      }
{
        pushFollow(FOLLOW_normal_lhs_block_in_rule979);
        normal_lhs_block(lhs);
        _fsp--;
        if (failed)         return rule;
      }
    }
  break;
}
pushFollow(FOLLOW_rhs_chunk_in_rule1000);
rhs_chunk(rule);
_fsp--;
if (failed) return rule;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
