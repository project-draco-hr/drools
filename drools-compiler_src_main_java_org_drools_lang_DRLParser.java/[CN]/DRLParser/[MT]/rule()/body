{
  rule_return retval=new rule_return();
  retval.start=input.LT(1);
  Object root_0=null;
  rule_key_return rule_key68=null;
  rule_id_return rule_id69=null;
  extend_key_return extend_key70=null;
  rule_id_return rule_id71=null;
  decl_metadata_return decl_metadata72=null;
  rule_attributes_return rule_attributes73=null;
  when_part_return when_part74=null;
  rhs_chunk_return rhs_chunk75=null;
  RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
  RewriteRuleSubtreeStream stream_rhs_chunk=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk");
  RewriteRuleSubtreeStream stream_rule_attributes=new RewriteRuleSubtreeStream(adaptor,"rule rule_attributes");
  RewriteRuleSubtreeStream stream_rule_key=new RewriteRuleSubtreeStream(adaptor,"rule rule_key");
  RewriteRuleSubtreeStream stream_extend_key=new RewriteRuleSubtreeStream(adaptor,"rule extend_key");
  RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
  RewriteRuleSubtreeStream stream_when_part=new RewriteRuleSubtreeStream(adaptor,"rule when_part");
  pushParaphrases(DroolsParaphraseTypes.RULE);
  try {
{
      if (backtracking == 0) {
        beginSentence(DroolsSentenceType.RULE);
      }
      pushFollow(FOLLOW_rule_key_in_rule1488);
      rule_key68=rule_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_rule_key.add(rule_key68.getTree());
      pushFollow(FOLLOW_rule_id_in_rule1490);
      rule_id69=rule_id();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_rule_id.add(rule_id69.getTree());
      if (backtracking == 0) {
        emit(Location.LOCATION_RULE_HEADER);
      }
      int alt28=2;
      int LA28_0=input.LA(1);
      if ((LA28_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| (validateIdentifierKey(DroolsSoftKeywords.DIALECT))|| (validateIdentifierKey(DroolsSoftKeywords.EXTEND))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))))) {
        int LA28_1=input.LA(2);
        if ((LA28_1 == STRING) && (((validateIdentifierKey(DroolsSoftKeywords.DIALECT)) || (validateIdentifierKey(DroolsSoftKeywords.EXTEND))))) {
          int LA28_5=input.LA(3);
          if (((validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) {
            alt28=1;
          }
        }
 else         if ((LA28_1 == ID) && ((validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) {
          alt28=1;
        }
      }
switch (alt28) {
case 1:
{
          pushFollow(FOLLOW_extend_key_in_rule1499);
          extend_key70=extend_key();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_extend_key.add(extend_key70.getTree());
          pushFollow(FOLLOW_rule_id_in_rule1501);
          rule_id71=rule_id();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_rule_id.add(rule_id71.getTree());
        }
      break;
  }
  loop29:   do {
    int alt29=2;
    int LA29_0=input.LA(1);
    if ((LA29_0 == AT)) {
      alt29=1;
    }
switch (alt29) {
case 1:
{
        pushFollow(FOLLOW_decl_metadata_in_rule1505);
        decl_metadata72=decl_metadata();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_decl_metadata.add(decl_metadata72.getTree());
      }
    break;
default :
  break loop29;
}
}
 while (true);
int alt30=2;
int LA30_0=input.LA(1);
if ((LA30_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| (validateIdentifierKey(DroolsSoftKeywords.DIALECT))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))))) {
alt30=1;
}
switch (alt30) {
case 1:
{
pushFollow(FOLLOW_rule_attributes_in_rule1508);
rule_attributes73=rule_attributes();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_rule_attributes.add(rule_attributes73.getTree());
}
break;
}
int alt31=2;
int LA31_0=input.LA(1);
if ((LA31_0 == WHEN)) {
alt31=1;
}
switch (alt31) {
case 1:
{
pushFollow(FOLLOW_when_part_in_rule1511);
when_part74=when_part();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_when_part.add(when_part74.getTree());
}
break;
}
pushFollow(FOLLOW_rhs_chunk_in_rule1514);
rhs_chunk75=rhs_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_rhs_chunk.add(rhs_chunk75.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_rule_key.nextNode(),root_1);
adaptor.addChild(root_1,stream_rule_id.next());
if (stream_rule_id.hasNext() || stream_extend_key.hasNext()) {
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_extend_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_rule_id.next());
adaptor.addChild(root_1,root_2);
}
}
stream_rule_id.reset();
stream_extend_key.reset();
while (stream_decl_metadata.hasNext()) {
adaptor.addChild(root_1,stream_decl_metadata.next());
}
stream_decl_metadata.reset();
if (stream_rule_attributes.hasNext()) {
adaptor.addChild(root_1,stream_rule_attributes.next());
}
stream_rule_attributes.reset();
if (stream_when_part.hasNext()) {
adaptor.addChild(root_1,stream_when_part.next());
}
stream_when_part.reset();
adaptor.addChild(root_1,stream_rhs_chunk.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
