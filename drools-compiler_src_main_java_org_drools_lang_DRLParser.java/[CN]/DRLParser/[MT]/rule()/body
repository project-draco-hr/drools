{
  RuleDescr rule=null;
  Token RULE11=null;
  Token WHEN12=null;
  name_return ruleName=null;
  rule=null;
  AndDescr lhs=null;
  try {
{
      RULE11=(Token)input.LT(1);
      match(input,RULE,FOLLOW_RULE_in_rule1270);
      if (failed)       return rule;
      pushFollow(FOLLOW_name_in_rule1274);
      ruleName=name();
      _fsp--;
      if (failed)       return rule;
      if (backtracking == 0) {
        location.setType(Location.LOCATION_RULE_HEADER);
        debug("start rule: " + ruleName.name);
        rule=new RuleDescr(ruleName.name,null);
        rule.setLocation(offset(RULE11.getLine()),RULE11.getCharPositionInLine());
        rule.setStartCharacter(((CommonToken)RULE11).getStartIndex());
        lhs=new AndDescr();
        rule.setLhs(lhs);
      }
      int alt23=2;
      int LA23_0=input.LA(1);
      if (((LA23_0 >= ATTRIBUTES && LA23_0 <= DATE_EFFECTIVE) || (LA23_0 >= DATE_EXPIRES && LA23_0 <= ENABLED) || LA23_0 == SALIENCE || (LA23_0 >= NO_LOOP && LA23_0 <= LOCK_ON_ACTIVE))) {
        alt23=1;
      }
switch (alt23) {
case 1:
{
          pushFollow(FOLLOW_rule_attributes_in_rule1283);
          rule_attributes(rule);
          _fsp--;
          if (failed)           return rule;
        }
      break;
  }
  int alt25=2;
  int LA25_0=input.LA(1);
  if ((LA25_0 == WHEN)) {
    alt25=1;
  }
switch (alt25) {
case 1:
{
      WHEN12=(Token)input.LT(1);
      match(input,WHEN,FOLLOW_WHEN_in_rule1295);
      if (failed)       return rule;
      int alt24=2;
      int LA24_0=input.LA(1);
      if ((LA24_0 == COLON)) {
        alt24=1;
      }
switch (alt24) {
case 1:
{
          match(input,COLON,FOLLOW_COLON_in_rule1297);
          if (failed)           return rule;
        }
      break;
  }
  if (backtracking == 0) {
    this.location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
    lhs.setLocation(offset(WHEN12.getLine()),WHEN12.getCharPositionInLine());
    lhs.setStartCharacter(((CommonToken)WHEN12).getStartIndex());
  }
  pushFollow(FOLLOW_normal_lhs_block_in_rule1308);
  normal_lhs_block(lhs);
  _fsp--;
  if (failed)   return rule;
}
break;
}
pushFollow(FOLLOW_rhs_chunk_in_rule1318);
rhs_chunk(rule);
_fsp--;
if (failed) return rule;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
