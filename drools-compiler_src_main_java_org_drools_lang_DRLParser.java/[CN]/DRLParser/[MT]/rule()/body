{
  RuleDescr rule=null;
  Token loc=null;
  Token rhs=null;
  String ruleName=null;
  rule=null;
  String consequence="";
  AndDescr lhs=null;
  try {
{
      loc=(Token)input.LT(1);
      match(input,37,FOLLOW_37_in_rule649);
      if (failed)       return rule;
      pushFollow(FOLLOW_word_in_rule653);
      ruleName=word();
      _fsp--;
      if (failed)       return rule;
      if (backtracking == 0) {
        debug("start rule: " + ruleName);
        rule=new RuleDescr(ruleName,null);
        rule.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      }
      pushFollow(FOLLOW_rule_attributes_in_rule662);
      rule_attributes(rule);
      _fsp--;
      if (failed)       return rule;
      int alt14=2;
      int LA14_0=input.LA(1);
      if ((LA14_0 == 38)) {
        alt14=1;
      }
switch (alt14) {
case 1:
{
          loc=(Token)input.LT(1);
          match(input,38,FOLLOW_38_in_rule671);
          if (failed)           return rule;
          int alt13=2;
          int LA13_0=input.LA(1);
          if ((LA13_0 == 39)) {
            alt13=1;
          }
switch (alt13) {
case 1:
{
              match(input,39,FOLLOW_39_in_rule673);
              if (failed)               return rule;
            }
          break;
      }
      if (backtracking == 0) {
        lhs=new AndDescr();
        rule.setLhs(lhs);
        lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      }
{
        pushFollow(FOLLOW_normal_lhs_block_in_rule691);
        normal_lhs_block(lhs);
        _fsp--;
        if (failed)         return rule;
      }
    }
  break;
}
rhs=(Token)input.LT(1);
match(input,RHS,FOLLOW_RHS_in_rule714);
if (failed) return rule;
if (backtracking == 0) {
consequence=rhs.getText();
consequence=consequence.substring(4,consequence.length() - 3);
if (expander != null) {
  String expanded=runThenExpander(consequence,offset(rhs.getLine()));
  rule.setConsequence(expanded);
}
 else {
  rule.setConsequence(consequence);
}
rule.setConsequenceLocation(offset(rhs.getLine()),rhs.getCharPositionInLine());
debug("end rule: " + ruleName);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
