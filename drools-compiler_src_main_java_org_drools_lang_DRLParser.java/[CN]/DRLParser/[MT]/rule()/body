{
  RuleDescr rule=null;
  Token loc=null;
  String ruleName=null;
  rule=null;
  final String consequence="";
  AndDescr lhs=null;
  try {
{
      loc=(Token)this.input.LT(1);
      match(this.input,RULE,FOLLOW_RULE_in_rule800);
      if (this.failed) {
        return rule;
      }
      pushFollow(FOLLOW_name_in_rule804);
      ruleName=name();
      this._fsp--;
      if (this.failed) {
        return rule;
      }
      if (this.backtracking == 0) {
        debug("start rule: " + ruleName);
        rule=new RuleDescr(ruleName,null);
        rule.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        rule.setStartCharacter(((CommonToken)loc).getStartIndex());
      }
      pushFollow(FOLLOW_rule_attributes_in_rule813);
      rule_attributes(rule);
      this._fsp--;
      if (this.failed) {
        return rule;
      }
      int alt14=2;
      final int LA14_0=this.input.LA(1);
      if ((LA14_0 == WHEN)) {
        alt14=1;
      }
switch (alt14) {
case 1:
{
          loc=(Token)this.input.LT(1);
          match(this.input,WHEN,FOLLOW_WHEN_in_rule822);
          if (this.failed) {
            return rule;
          }
          int alt13=2;
          final int LA13_0=this.input.LA(1);
          if ((LA13_0 == 67)) {
            alt13=1;
          }
switch (alt13) {
case 1:
{
              match(this.input,67,FOLLOW_67_in_rule824);
              if (this.failed) {
                return rule;
              }
            }
          break;
      }
      if (this.backtracking == 0) {
        lhs=new AndDescr();
        rule.setLhs(lhs);
        lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        lhs.setStartCharacter(((CommonToken)loc).getStartIndex());
      }
{
        pushFollow(FOLLOW_normal_lhs_block_in_rule842);
        normal_lhs_block(lhs);
        this._fsp--;
        if (this.failed) {
          return rule;
        }
      }
    }
  break;
}
pushFollow(FOLLOW_rhs_chunk_in_rule863);
rhs_chunk(rule);
this._fsp--;
if (this.failed) {
return rule;
}
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return rule;
}
