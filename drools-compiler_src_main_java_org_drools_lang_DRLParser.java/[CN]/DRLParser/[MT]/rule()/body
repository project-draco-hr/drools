{
  DRLParser.rule_return retval=new DRLParser.rule_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.rule_key_return rule_key58=null;
  DRLParser.rule_id_return rule_id59=null;
  DRLParser.extend_key_return extend_key60=null;
  DRLParser.rule_id_return rule_id61=null;
  DRLParser.decl_metadata_return decl_metadata62=null;
  DRLParser.rule_attributes_return rule_attributes63=null;
  DRLParser.when_part_return when_part64=null;
  DRLParser.rhs_chunk_return rhs_chunk65=null;
  RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
  RewriteRuleSubtreeStream stream_rhs_chunk=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk");
  RewriteRuleSubtreeStream stream_rule_attributes=new RewriteRuleSubtreeStream(adaptor,"rule rule_attributes");
  RewriteRuleSubtreeStream stream_rule_key=new RewriteRuleSubtreeStream(adaptor,"rule rule_key");
  RewriteRuleSubtreeStream stream_extend_key=new RewriteRuleSubtreeStream(adaptor,"rule extend_key");
  RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
  RewriteRuleSubtreeStream stream_when_part=new RewriteRuleSubtreeStream(adaptor,"rule when_part");
  boolean isFailed=true;
  helper.pushParaphrases(DroolsParaphraseTypes.RULE);
  if (state.backtracking == 0)   helper.beginSentence(DroolsSentenceType.RULE);
  try {
{
      pushFollow(FOLLOW_rule_key_in_rule1538);
      rule_key58=rule_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_rule_key.add(rule_key58.getTree());
      pushFollow(FOLLOW_rule_id_in_rule1556);
      rule_id59=rule_id();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_rule_id.add(rule_id59.getTree());
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_RULE_HEADER);
      }
      int alt21=2;
      alt21=dfa21.predict(input);
switch (alt21) {
case 1:
{
          pushFollow(FOLLOW_extend_key_in_rule1565);
          extend_key60=extend_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_extend_key.add(extend_key60.getTree());
          pushFollow(FOLLOW_rule_id_in_rule1567);
          rule_id61=rule_id();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_rule_id.add(rule_id61.getTree());
        }
      break;
  }
  loop22:   do {
    int alt22=2;
    int LA22_0=input.LA(1);
    if ((LA22_0 == AT)) {
      alt22=1;
    }
switch (alt22) {
case 1:
{
        pushFollow(FOLLOW_decl_metadata_in_rule1571);
        decl_metadata62=decl_metadata();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_decl_metadata.add(decl_metadata62.getTree());
      }
    break;
default :
  break loop22;
}
}
 while (true);
int alt23=2;
int LA23_0=input.LA(1);
if ((LA23_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))))) {
alt23=1;
}
switch (alt23) {
case 1:
{
pushFollow(FOLLOW_rule_attributes_in_rule1574);
rule_attributes63=rule_attributes();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_rule_attributes.add(rule_attributes63.getTree());
}
break;
}
int alt24=2;
int LA24_0=input.LA(1);
if ((LA24_0 == WHEN)) {
alt24=1;
}
switch (alt24) {
case 1:
{
pushFollow(FOLLOW_when_part_in_rule1577);
when_part64=when_part();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_when_part.add(when_part64.getTree());
}
break;
}
pushFollow(FOLLOW_rhs_chunk_in_rule1580);
rhs_chunk65=rhs_chunk();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_rhs_chunk.add(rhs_chunk65.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_rule_key.nextNode(),root_1);
adaptor.addChild(root_1,stream_rule_id.nextTree());
if (stream_rule_id.hasNext() || stream_extend_key.hasNext()) {
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_extend_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_rule_id.nextTree());
adaptor.addChild(root_1,root_2);
}
}
stream_rule_id.reset();
stream_extend_key.reset();
while (stream_decl_metadata.hasNext()) {
adaptor.addChild(root_1,stream_decl_metadata.nextTree());
}
stream_decl_metadata.reset();
if (stream_rule_attributes.hasNext()) {
adaptor.addChild(root_1,stream_rule_attributes.nextTree());
}
stream_rule_attributes.reset();
if (stream_when_part.hasNext()) {
adaptor.addChild(root_1,stream_when_part.nextTree());
}
stream_when_part.reset();
adaptor.addChild(root_1,stream_rhs_chunk.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
helper.popParaphrases();
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (helper.isEditorInterfaceEnabled && isFailed) {
if (input.LA(6) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && input.LA(5) == MINUS && input.LA(6) == ID && helper.validateLT(1,DroolsSoftKeywords.LOCK) && helper.validateLT(3,DroolsSoftKeywords.ON) && helper.validateLT(5,DroolsSoftKeywords.ACTIVE)) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.KEYWORD);
helper.emit(input.LT(3),DroolsEditorType.KEYWORD);
helper.emit(input.LT(4),DroolsEditorType.KEYWORD);
helper.emit(input.LT(5),DroolsEditorType.KEYWORD);
helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
input.consume();
input.consume();
input.consume();
input.consume();
input.consume();
}
 else if (input.LA(4) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && ((helper.validateLT(1,DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3,DroolsSoftKeywords.GROUP)) || (helper.validateLT(1,DroolsSoftKeywords.DATE) && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)) || (helper.validateLT(1,DroolsSoftKeywords.NO) && helper.validateLT(3,DroolsSoftKeywords.LOOP))|| (helper.validateLT(1,DroolsSoftKeywords.DATE) && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (helper.validateLT(1,DroolsSoftKeywords.AUTO) && helper.validateLT(3,DroolsSoftKeywords.FOCUS))|| (helper.validateLT(1,DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3,DroolsSoftKeywords.GROUP))|| (helper.validateLT(1,DroolsSoftKeywords.RULEFLOW) && helper.validateLT(3,DroolsSoftKeywords.GROUP))|| (helper.validateLT(1,DroolsSoftKeywords.AGENDA) && helper.validateLT(3,DroolsSoftKeywords.GROUP)))) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.KEYWORD);
helper.emit(input.LT(3),DroolsEditorType.KEYWORD);
helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
input.consume();
input.consume();
input.consume();
}
 else if (input.LA(2) == EOF && input.LA(1) == ID && (helper.validateLT(1,DroolsSoftKeywords.DIALECT) || helper.validateLT(1,DroolsSoftKeywords.ENABLED) || helper.validateLT(1,DroolsSoftKeywords.SALIENCE)|| helper.validateLT(1,DroolsSoftKeywords.DURATION)|| helper.validateLT(1,DroolsSoftKeywords.TIMER))) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
input.consume();
}
}
}
return retval;
}
