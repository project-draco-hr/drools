{
  RuleDescrBuilder rule=null;
  try {
    rule=helper.start(RuleDescrBuilder.class,null,null);
    match(input,DRLLexer.ID,DroolsSoftKeywords.RULE,null,DroolsEditorType.KEYWORD);
    if (state.failed)     return null;
    if (helper.validateIdentifierKey(DroolsSoftKeywords.WHEN) || helper.validateIdentifierKey(DroolsSoftKeywords.THEN) || helper.validateIdentifierKey(DroolsSoftKeywords.END)) {
      failMissingTokenException();
      return null;
    }
    String name=stringId();
    if (state.failed)     return null;
    if (state.backtracking == 0) {
      rule.name(name);
      helper.setParaphrasesValue(DroolsParaphraseTypes.RULE,"\"" + name + "\"");
      if (input.LA(1) != DRLLexer.EOF) {
        helper.emit(Location.LOCATION_RULE_HEADER);
      }
    }
    if (helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)) {
      match(input,DRLLexer.ID,DroolsSoftKeywords.EXTENDS,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return null;
      String parent=stringId();
      if (state.backtracking == 0)       rule.extendsRule(parent);
      if (state.failed)       return null;
    }
    if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
      helper.emit(Location.LOCATION_RULE_HEADER);
    }
    while (input.LA(1) == DRLLexer.AT) {
      annotation(rule);
      if (state.failed)       return null;
    }
    attributes(rule);
    if (helper.validateIdentifierKey(DroolsSoftKeywords.WHEN)) {
      lhs(rule);
    }
 else {
      rule.lhs();
    }
    rhs(rule);
    match(input,DRLLexer.ID,DroolsSoftKeywords.END,null,DroolsEditorType.KEYWORD);
    if (state.failed)     return null;
    if (input.LA(1) == DRLLexer.SEMICOLON) {
      match(input,DRLLexer.SEMICOLON,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return null;
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
  }
 finally {
    helper.end(RuleDescrBuilder.class,null);
  }
  return (rule != null) ? rule.getDescr() : null;
}
