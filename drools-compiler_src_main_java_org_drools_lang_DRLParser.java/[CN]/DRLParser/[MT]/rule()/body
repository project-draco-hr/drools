{
  RuleDescr rule=null;
  Token RULE12=null;
  Token WHEN13=null;
  String ruleName=null;
  rule=null;
  AndDescr lhs=null;
  try {
{
      RULE12=(Token)input.LT(1);
      match(input,RULE,FOLLOW_RULE_in_rule1009);
      if (failed)       return rule;
      pushFollow(FOLLOW_name_in_rule1013);
      ruleName=name();
      _fsp--;
      if (failed)       return rule;
      if (backtracking == 0) {
        location.setType(Location.LOCATION_RULE_HEADER);
        debug("start rule: " + ruleName);
        rule=new RuleDescr(ruleName,null);
        rule.setLocation(offset(RULE12.getLine()),RULE12.getCharPositionInLine());
        rule.setStartCharacter(((CommonToken)RULE12).getStartIndex());
        lhs=new AndDescr();
        rule.setLhs(lhs);
      }
      int alt19=2;
      int LA19_0=input.LA(1);
      if (((LA19_0 >= ATTRIBUTES && LA19_0 <= DATE_EFFECTIVE) || (LA19_0 >= DATE_EXPIRES && LA19_0 <= ENABLED) || LA19_0 == SALIENCE || (LA19_0 >= NO_LOOP && LA19_0 <= LOCK_ON_ACTIVE))) {
        alt19=1;
      }
switch (alt19) {
case 1:
{
          pushFollow(FOLLOW_rule_attributes_in_rule1022);
          rule_attributes(rule);
          _fsp--;
          if (failed)           return rule;
        }
      break;
  }
  int alt21=2;
  int LA21_0=input.LA(1);
  if ((LA21_0 == WHEN)) {
    alt21=1;
  }
switch (alt21) {
case 1:
{
      WHEN13=(Token)input.LT(1);
      match(input,WHEN,FOLLOW_WHEN_in_rule1034);
      if (failed)       return rule;
      int alt20=2;
      int LA20_0=input.LA(1);
      if ((LA20_0 == 76)) {
        alt20=1;
      }
switch (alt20) {
case 1:
{
          match(input,76,FOLLOW_76_in_rule1036);
          if (failed)           return rule;
        }
      break;
  }
  if (backtracking == 0) {
    this.location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
    lhs.setLocation(offset(WHEN13.getLine()),WHEN13.getCharPositionInLine());
    lhs.setStartCharacter(((CommonToken)WHEN13).getStartIndex());
  }
  pushFollow(FOLLOW_normal_lhs_block_in_rule1047);
  normal_lhs_block(lhs);
  _fsp--;
  if (failed)   return rule;
}
break;
}
pushFollow(FOLLOW_rhs_chunk_in_rule1057);
rhs_chunk(rule);
_fsp--;
if (failed) return rule;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
