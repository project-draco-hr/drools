{
  DRLParser.arguments_return retval=new DRLParser.arguments_return();
  retval.start=input.LT(1);
  int arguments_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_PAREN537=null;
  Token RIGHT_PAREN539=null;
  DRLParser.expressionList_return expressionList538=null;
  Object LEFT_PAREN537_tree=null;
  Object RIGHT_PAREN539_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,154)) {
      return retval;
    }
{
      LEFT_PAREN537=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments7688);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN537);
      int alt171=2;
      int LA171_0=input.LA(1);
      if ((LA171_0 == ID || LA171_0 == STRING || (LA171_0 >= BOOL && LA171_0 <= LEFT_PAREN) || LA171_0 == DECIMAL || LA171_0 == LESS || LA171_0 == LEFT_SQUARE || (LA171_0 >= NULL && LA171_0 <= FLOAT) || (LA171_0 >= INCR && LA171_0 <= NEGATION))) {
        alt171=1;
      }
switch (alt171) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_arguments7690);
          expressionList538=expressionList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_expressionList.add(expressionList538.getTree());
        }
      break;
  }
  RIGHT_PAREN539=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments7693);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_RIGHT_PAREN.add(RIGHT_PAREN539);
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_ARGUMENTS,"VT_ARGUMENTS"),root_1);
        if (stream_expressionList.hasNext()) {
          adaptor.addChild(root_1,stream_expressionList.nextTree());
        }
        stream_expressionList.reset();
        adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
  memoize(input,154,arguments_StartIndex);
}
}
return retval;
}
