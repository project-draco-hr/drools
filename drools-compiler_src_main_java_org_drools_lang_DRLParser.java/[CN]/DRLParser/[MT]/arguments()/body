{
  DRLParser.arguments_return retval=new DRLParser.arguments_return();
  retval.start=input.LT(1);
  int arguments_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_PAREN651=null;
  Token RIGHT_PAREN653=null;
  DRLParser.expressionList_return expressionList652=null;
  Object LEFT_PAREN651_tree=null;
  Object RIGHT_PAREN653_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,172)) {
      return retval;
    }
{
      root_0=(Object)adaptor.nil();
      LEFT_PAREN651=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments8410);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_PAREN651_tree=(Object)adaptor.create(LEFT_PAREN651);
        adaptor.addChild(root_0,LEFT_PAREN651_tree);
      }
      int alt201=2;
      int LA201_0=input.LA(1);
      if ((LA201_0 == ID || LA201_0 == STRING || (LA201_0 >= BOOL && LA201_0 <= LEFT_PAREN) || LA201_0 == DECIMAL || LA201_0 == LESS || LA201_0 == LEFT_SQUARE || (LA201_0 >= NULL && LA201_0 <= FLOAT) || (LA201_0 >= INCR && LA201_0 <= NEGATION))) {
        alt201=1;
      }
switch (alt201) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_arguments8412);
          expressionList652=expressionList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expressionList652.getTree());
        }
      break;
  }
  RIGHT_PAREN653=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments8415);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    RIGHT_PAREN653_tree=(Object)adaptor.create(RIGHT_PAREN653);
    adaptor.addChild(root_0,RIGHT_PAREN653_tree);
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
  memoize(input,172,arguments_StartIndex);
}
}
return retval;
}
