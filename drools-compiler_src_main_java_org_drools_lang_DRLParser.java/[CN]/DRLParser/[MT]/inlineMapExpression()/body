{
  DRLParser.inlineMapExpression_return retval=new DRLParser.inlineMapExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE428=null;
  Token RIGHT_SQUARE430=null;
  DRLParser.mapExpressionList_return mapExpressionList429=null;
  Object LEFT_SQUARE428_tree=null;
  Object RIGHT_SQUARE430_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE428=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression6561);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE428_tree=(Object)adaptor.create(LEFT_SQUARE428);
        adaptor.addChild(root_0,LEFT_SQUARE428_tree);
      }
      int cnt139=0;
      loop139:       do {
        int alt139=2;
        int LA139_0=input.LA(1);
        if ((LA139_0 == ID || LA139_0 == STRING || (LA139_0 >= BOOL && LA139_0 <= LEFT_PAREN) || LA139_0 == LESS || (LA139_0 >= NULL && LA139_0 <= LEFT_SQUARE) || (LA139_0 >= INCR && LA139_0 <= NEGATION))) {
          alt139=1;
        }
switch (alt139) {
case 1:
{
            pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression6563);
            mapExpressionList429=mapExpressionList();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,mapExpressionList429.getTree());
          }
        break;
default :
      if (cnt139 >= 1)       break loop139;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(139,input);
throw eee;
}
cnt139++;
}
 while (true);
RIGHT_SQUARE430=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression6566);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE430_tree=(Object)adaptor.create(RIGHT_SQUARE430);
adaptor.addChild(root_0,RIGHT_SQUARE430_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
