{
  DRLParser.inlineMapExpression_return retval=new DRLParser.inlineMapExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE571=null;
  Token RIGHT_SQUARE573=null;
  DRLParser.mapExpressionList_return mapExpressionList572=null;
  Object LEFT_SQUARE571_tree=null;
  Object RIGHT_SQUARE573_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE571=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression7819);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE571_tree=(Object)adaptor.create(LEFT_SQUARE571);
        adaptor.addChild(root_0,LEFT_SQUARE571_tree);
      }
      int cnt175=0;
      loop175:       do {
        int alt175=2;
        int LA175_0=input.LA(1);
        if ((LA175_0 == ID || LA175_0 == STRING || (LA175_0 >= BOOL && LA175_0 <= LEFT_PAREN) || LA175_0 == DECIMAL || LA175_0 == LESS || LA175_0 == LEFT_SQUARE || (LA175_0 >= NULL && LA175_0 <= FLOAT) || (LA175_0 >= INCR && LA175_0 <= NEGATION))) {
          alt175=1;
        }
switch (alt175) {
case 1:
{
            pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression7821);
            mapExpressionList572=mapExpressionList();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,mapExpressionList572.getTree());
          }
        break;
default :
      if (cnt175 >= 1)       break loop175;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(175,input);
throw eee;
}
cnt175++;
}
 while (true);
RIGHT_SQUARE573=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7824);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE573_tree=(Object)adaptor.create(RIGHT_SQUARE573);
adaptor.addChild(root_0,RIGHT_SQUARE573_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
