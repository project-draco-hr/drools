{
  DRLParser.inlineMapExpression_return retval=new DRLParser.inlineMapExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE586=null;
  Token RIGHT_SQUARE588=null;
  DRLParser.mapExpressionList_return mapExpressionList587=null;
  Object LEFT_SQUARE586_tree=null;
  Object RIGHT_SQUARE588_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE586=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression7922);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE586_tree=(Object)adaptor.create(LEFT_SQUARE586);
        adaptor.addChild(root_0,LEFT_SQUARE586_tree);
      }
      int cnt177=0;
      loop177:       do {
        int alt177=2;
        int LA177_0=input.LA(1);
        if ((LA177_0 == ID || LA177_0 == STRING || (LA177_0 >= BOOL && LA177_0 <= LEFT_PAREN) || LA177_0 == DECIMAL || LA177_0 == LESS || LA177_0 == LEFT_SQUARE || (LA177_0 >= NULL && LA177_0 <= FLOAT) || (LA177_0 >= INCR && LA177_0 <= NEGATION))) {
          alt177=1;
        }
switch (alt177) {
case 1:
{
            pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression7924);
            mapExpressionList587=mapExpressionList();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,mapExpressionList587.getTree());
          }
        break;
default :
      if (cnt177 >= 1)       break loop177;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(177,input);
throw eee;
}
cnt177++;
}
 while (true);
RIGHT_SQUARE588=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7927);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE588_tree=(Object)adaptor.create(RIGHT_SQUARE588);
adaptor.addChild(root_0,RIGHT_SQUARE588_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
