{
  DRLParser.inlineMapExpression_return retval=new DRLParser.inlineMapExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE458=null;
  Token RIGHT_SQUARE460=null;
  DRLParser.mapExpressionList_return mapExpressionList459=null;
  Object LEFT_SQUARE458_tree=null;
  Object RIGHT_SQUARE460_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE458=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression7101);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE458_tree=(Object)adaptor.create(LEFT_SQUARE458);
        adaptor.addChild(root_0,LEFT_SQUARE458_tree);
      }
      int cnt146=0;
      loop146:       do {
        int alt146=2;
        int LA146_0=input.LA(1);
        if ((LA146_0 == ID || LA146_0 == STRING || (LA146_0 >= BOOL && LA146_0 <= LEFT_PAREN) || LA146_0 == DECIMAL || LA146_0 == LESS || LA146_0 == LEFT_SQUARE || (LA146_0 >= NULL && LA146_0 <= FLOAT) || (LA146_0 >= INCR && LA146_0 <= NEGATION))) {
          alt146=1;
        }
switch (alt146) {
case 1:
{
            pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression7103);
            mapExpressionList459=mapExpressionList();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,mapExpressionList459.getTree());
          }
        break;
default :
      if (cnt146 >= 1)       break loop146;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(146,input);
throw eee;
}
cnt146++;
}
 while (true);
RIGHT_SQUARE460=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7106);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE460_tree=(Object)adaptor.create(RIGHT_SQUARE460);
adaptor.addChild(root_0,RIGHT_SQUARE460_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
