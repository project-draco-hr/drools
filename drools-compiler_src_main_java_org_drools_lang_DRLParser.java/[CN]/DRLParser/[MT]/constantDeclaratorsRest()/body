{
  DRLParser.constantDeclaratorsRest_return retval=new DRLParser.constantDeclaratorsRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA829=null;
  DRLParser.constantDeclaratorRest_return constantDeclaratorRest828=null;
  DRLParser.constantDeclarator_return constantDeclarator830=null;
  Object COMMA829_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest9760);
      constantDeclaratorRest828=constantDeclaratorRest();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,constantDeclaratorRest828.getTree());
      loop243:       do {
        int alt243=2;
        int LA243_0=input.LA(1);
        if ((LA243_0 == COMMA)) {
          alt243=1;
        }
switch (alt243) {
case 1:
{
            COMMA829=(Token)match(input,COMMA,FOLLOW_COMMA_in_constantDeclaratorsRest9763);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA829_tree=(Object)adaptor.create(COMMA829);
              adaptor.addChild(root_0,COMMA829_tree);
            }
            pushFollow(FOLLOW_constantDeclarator_in_constantDeclaratorsRest9765);
            constantDeclarator830=constantDeclarator();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,constantDeclarator830.getTree());
          }
        break;
default :
      break loop243;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
