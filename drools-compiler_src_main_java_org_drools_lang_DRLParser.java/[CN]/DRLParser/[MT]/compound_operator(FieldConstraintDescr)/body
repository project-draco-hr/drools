{
  RestrictionDescr rd=null;
  String op=null;
  try {
    int alt44=2;
    int LA44_0=input.LA(1);
    if ((LA44_0 == IN)) {
      alt44=1;
    }
 else     if ((LA44_0 == NOT)) {
      alt44=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("1026:1: compound_operator[FieldConstraintDescr fc] : ( ( IN LEFT_PAREN rd= expression_value[op] ( COMMA rd= expression_value[op] )* RIGHT_PAREN ) | ( NOT IN LEFT_PAREN rd= expression_value[op] ( COMMA rd= expression_value[op] )* RIGHT_PAREN ) );",44,0,input);
      throw nvae;
    }
switch (alt44) {
case 1:
{
{
          match(input,IN,FOLLOW_IN_in_compound_operator2779);
          if (failed)           return;
          if (backtracking == 0) {
            op="==";
          }
          match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator2790);
          if (failed)           return;
          pushFollow(FOLLOW_expression_value_in_compound_operator2794);
          rd=expression_value(op);
          _fsp--;
          if (failed)           return;
          if (backtracking == 0) {
            if (rd != null) {
              fc.addRestriction(rd);
            }
          }
          loop42:           do {
            int alt42=2;
            int LA42_0=input.LA(1);
            if ((LA42_0 == COMMA)) {
              alt42=1;
            }
switch (alt42) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_compound_operator2805);
                if (failed)                 return;
                pushFollow(FOLLOW_expression_value_in_compound_operator2809);
                rd=expression_value(op);
                _fsp--;
                if (failed)                 return;
                if (backtracking == 0) {
                  if (rd != null) {
                    fc.addRestriction(new RestrictionConnectiveDescr(RestrictionConnectiveDescr.OR));
                    fc.addRestriction(rd);
                  }
                }
              }
            break;
default :
          break loop42;
      }
    }
 while (true);
    match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator2824);
    if (failed)     return;
  }
}
break;
case 2:
{
{
match(input,NOT,FOLLOW_NOT_in_compound_operator2839);
if (failed) return;
match(input,IN,FOLLOW_IN_in_compound_operator2841);
if (failed) return;
if (backtracking == 0) {
  op="!=";
}
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator2852);
if (failed) return;
pushFollow(FOLLOW_expression_value_in_compound_operator2856);
rd=expression_value(op);
_fsp--;
if (failed) return;
if (backtracking == 0) {
  if (rd != null) {
    fc.addRestriction(rd);
  }
}
loop43: do {
  int alt43=2;
  int LA43_0=input.LA(1);
  if ((LA43_0 == COMMA)) {
    alt43=1;
  }
switch (alt43) {
case 1:
{
      match(input,COMMA,FOLLOW_COMMA_in_compound_operator2867);
      if (failed)       return;
      pushFollow(FOLLOW_expression_value_in_compound_operator2871);
      rd=expression_value(op);
      _fsp--;
      if (failed)       return;
      if (backtracking == 0) {
        if (rd != null) {
          fc.addRestriction(new RestrictionConnectiveDescr(RestrictionConnectiveDescr.AND));
          fc.addRestriction(rd);
        }
      }
    }
  break;
default :
break loop43;
}
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator2886);
if (failed) return;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
