{
  DRLParser.elementValuePairs_return retval=new DRLParser.elementValuePairs_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA863=null;
  DRLParser.elementValuePair_return elementValuePair862=null;
  DRLParser.elementValuePair_return elementValuePair864=null;
  Object COMMA863_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_elementValuePair_in_elementValuePairs10044);
      elementValuePair862=elementValuePair();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,elementValuePair862.getTree());
      loop257:       do {
        int alt257=2;
        int LA257_0=input.LA(1);
        if ((LA257_0 == COMMA)) {
          alt257=1;
        }
switch (alt257) {
case 1:
{
            COMMA863=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairs10047);
            if (state.failed)             return retval;
            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs10050);
            elementValuePair864=elementValuePair();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,elementValuePair864.getTree());
          }
        break;
default :
      break loop257;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
