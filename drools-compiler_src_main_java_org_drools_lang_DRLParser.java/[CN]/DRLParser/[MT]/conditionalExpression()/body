{
  DRLParser.conditionalExpression_return retval=new DRLParser.conditionalExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token QUESTION486=null;
  Token COLON488=null;
  DRLParser.conditionalOrExpression_return conditionalOrExpression485=null;
  DRLParser.expression_return expression487=null;
  DRLParser.expression_return expression489=null;
  Object QUESTION486_tree=null;
  Object COLON488_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression6954);
      conditionalOrExpression485=conditionalOrExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,conditionalOrExpression485.getTree());
      int alt153=2;
      int LA153_0=input.LA(1);
      if ((LA153_0 == QUESTION)) {
        alt153=1;
      }
switch (alt153) {
case 1:
{
          QUESTION486=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression6958);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            QUESTION486_tree=(Object)adaptor.create(QUESTION486);
            adaptor.addChild(root_0,QUESTION486_tree);
          }
          pushFollow(FOLLOW_expression_in_conditionalExpression6960);
          expression487=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expression487.getTree());
          COLON488=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression6962);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            COLON488_tree=(Object)adaptor.create(COLON488);
            adaptor.addChild(root_0,COLON488_tree);
          }
          pushFollow(FOLLOW_expression_in_conditionalExpression6964);
          expression489=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expression489.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
