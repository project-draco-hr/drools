{
  curly_chunk_return retval=new curly_chunk_return();
  retval.start=input.LT(1);
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_chunk4908);
      if (failed)       return retval;
      loop76:       do {
        int alt76=3;
        int LA76_0=input.LA(1);
        if (((LA76_0 >= PACKAGE && LA76_0 <= DECLARE) || (LA76_0 >= STRING && LA76_0 <= 85))) {
          alt76=1;
        }
 else         if ((LA76_0 == LEFT_CURLY)) {
          alt76=2;
        }
switch (alt76) {
case 1:
{
            if ((input.LA(1) >= PACKAGE && input.LA(1) <= DECLARE) || (input.LA(1) >= STRING && input.LA(1) <= 85)) {
              input.consume();
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_curly_chunk4912);
              throw mse;
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_curly_chunk_in_curly_chunk4921);
        curly_chunk();
        _fsp--;
        if (failed)         return retval;
      }
    break;
default :
  break loop76;
}
}
 while (true);
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_chunk4926);
if (failed) return retval;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
