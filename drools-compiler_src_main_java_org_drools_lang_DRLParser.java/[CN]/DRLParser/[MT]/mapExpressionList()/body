{
  DRLParser.mapExpressionList_return retval=new DRLParser.mapExpressionList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA467=null;
  DRLParser.mapEntry_return mapEntry466=null;
  DRLParser.mapEntry_return mapEntry468=null;
  Object COMMA467_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_mapEntry_in_mapExpressionList7184);
      mapEntry466=mapEntry();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,mapEntry466.getTree());
      loop149:       do {
        int alt149=2;
        int LA149_0=input.LA(1);
        if ((LA149_0 == COMMA)) {
          alt149=1;
        }
switch (alt149) {
case 1:
{
            COMMA467=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapExpressionList7187);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA467_tree=(Object)adaptor.create(COMMA467);
              adaptor.addChild(root_0,COMMA467_tree);
            }
            pushFollow(FOLLOW_mapEntry_in_mapExpressionList7189);
            mapEntry468=mapEntry();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,mapEntry468.getTree());
          }
        break;
default :
      break loop149;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
