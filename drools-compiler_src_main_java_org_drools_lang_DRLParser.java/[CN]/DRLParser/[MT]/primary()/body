{
  DRLParser.primary_return retval=new DRLParser.primary_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE415=null;
  Token RIGHT_SQUARE416=null;
  Token DOT417=null;
  Token ID421=null;
  Token DOT422=null;
  Token ID423=null;
  DRLParser.parExpression_return parExpression404=null;
  DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments405=null;
  DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix406=null;
  DRLParser.this_key_return this_key407=null;
  DRLParser.arguments_return arguments408=null;
  DRLParser.literal_return literal409=null;
  DRLParser.super_key_return super_key410=null;
  DRLParser.superSuffix_return superSuffix411=null;
  DRLParser.new_key_return new_key412=null;
  DRLParser.creator_return creator413=null;
  DRLParser.primitiveType_return primitiveType414=null;
  DRLParser.class_key_return class_key418=null;
  DRLParser.inlineMapExpression_return inlineMapExpression419=null;
  DRLParser.inlineListExpression_return inlineListExpression420=null;
  DRLParser.identifierSuffix_return identifierSuffix424=null;
  Object LEFT_SQUARE415_tree=null;
  Object RIGHT_SQUARE416_tree=null;
  Object DOT417_tree=null;
  Object ID421_tree=null;
  Object DOT422_tree=null;
  Object ID423_tree=null;
  try {
    int alt137=9;
    alt137=dfa137.predict(input);
switch (alt137) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_parExpression_in_primary6339);
        parExpression404=parExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,parExpression404.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6354);
    nonWildcardTypeArguments405=nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,nonWildcardTypeArguments405.getTree());
    int alt133=2;
    int LA133_0=input.LA(1);
    if ((LA133_0 == ID)) {
      int LA133_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt133=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt133=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",133,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",133,0,input);
      throw nvae;
    }
switch (alt133) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6357);
        explicitGenericInvocationSuffix406=explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,explicitGenericInvocationSuffix406.getTree());
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary6361);
    this_key407=this_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,this_key407.getTree());
    pushFollow(FOLLOW_arguments_in_primary6363);
    arguments408=arguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arguments408.getTree());
  }
break;
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_literal_in_primary6379);
literal409=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal409.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_super_key_in_primary6399);
super_key410=super_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,super_key410.getTree());
pushFollow(FOLLOW_superSuffix_in_primary6401);
superSuffix411=superSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,superSuffix411.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_new_key_in_primary6416);
new_key412=new_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,new_key412.getTree());
pushFollow(FOLLOW_creator_in_primary6418);
creator413=creator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,creator413.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primitiveType_in_primary6433);
primitiveType414=primitiveType();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primitiveType414.getTree());
loop134: do {
int alt134=2;
int LA134_0=input.LA(1);
if ((LA134_0 == LEFT_SQUARE)) {
alt134=1;
}
switch (alt134) {
case 1:
{
LEFT_SQUARE415=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary6436);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE415_tree=(Object)adaptor.create(LEFT_SQUARE415);
adaptor.addChild(root_0,LEFT_SQUARE415_tree);
}
RIGHT_SQUARE416=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary6438);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE416_tree=(Object)adaptor.create(RIGHT_SQUARE416);
adaptor.addChild(root_0,RIGHT_SQUARE416_tree);
}
}
break;
default :
break loop134;
}
}
 while (true);
DOT417=(Token)match(input,DOT,FOLLOW_DOT_in_primary6442);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT417_tree=(Object)adaptor.create(DOT417);
adaptor.addChild(root_0,DOT417_tree);
}
pushFollow(FOLLOW_class_key_in_primary6444);
class_key418=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key418.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineMapExpression_in_primary6464);
inlineMapExpression419=inlineMapExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineMapExpression419.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineListExpression_in_primary6479);
inlineListExpression420=inlineListExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineListExpression420.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
ID421=(Token)match(input,ID,FOLLOW_ID_in_primary6493);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID421_tree=(Object)adaptor.create(ID421);
adaptor.addChild(root_0,ID421_tree);
}
loop135: do {
int alt135=2;
int LA135_0=input.LA(1);
if ((LA135_0 == DOT)) {
int LA135_2=input.LA(2);
if ((LA135_2 == ID)) {
int LA135_3=input.LA(3);
if ((synpred36_DRL())) {
alt135=1;
}
}
}
switch (alt135) {
case 1:
{
DOT422=(Token)match(input,DOT,FOLLOW_DOT_in_primary6502);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT422_tree=(Object)adaptor.create(DOT422);
adaptor.addChild(root_0,DOT422_tree);
}
ID423=(Token)match(input,ID,FOLLOW_ID_in_primary6504);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID423_tree=(Object)adaptor.create(ID423);
adaptor.addChild(root_0,ID423_tree);
}
}
break;
default :
break loop135;
}
}
 while (true);
int alt136=2;
alt136=dfa136.predict(input);
switch (alt136) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary6513);
identifierSuffix424=identifierSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,identifierSuffix424.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
