{
  DRLParser.primary_return retval=new DRLParser.primary_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE573=null;
  Token RIGHT_SQUARE574=null;
  Token DOT575=null;
  Token ID579=null;
  Token DOT580=null;
  Token ID581=null;
  DRLParser.parExpression_return parExpression562=null;
  DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments563=null;
  DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix564=null;
  DRLParser.this_key_return this_key565=null;
  DRLParser.arguments_return arguments566=null;
  DRLParser.literal_return literal567=null;
  DRLParser.super_key_return super_key568=null;
  DRLParser.superSuffix_return superSuffix569=null;
  DRLParser.new_key_return new_key570=null;
  DRLParser.creator_return creator571=null;
  DRLParser.primitiveType_return primitiveType572=null;
  DRLParser.class_key_return class_key576=null;
  DRLParser.inlineMapExpression_return inlineMapExpression577=null;
  DRLParser.inlineListExpression_return inlineListExpression578=null;
  DRLParser.identifierSuffix_return identifierSuffix582=null;
  Object LEFT_SQUARE573_tree=null;
  Object RIGHT_SQUARE574_tree=null;
  Object DOT575_tree=null;
  Object ID579_tree=null;
  Object DOT580_tree=null;
  Object ID581_tree=null;
  try {
    int alt175=9;
    alt175=dfa175.predict(input);
switch (alt175) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_parExpression_in_primary7700);
        parExpression562=parExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,parExpression562.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary7715);
    nonWildcardTypeArguments563=nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,nonWildcardTypeArguments563.getTree());
    int alt171=2;
    int LA171_0=input.LA(1);
    if ((LA171_0 == ID)) {
      int LA171_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt171=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt171=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",171,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",171,0,input);
      throw nvae;
    }
switch (alt171) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary7718);
        explicitGenericInvocationSuffix564=explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,explicitGenericInvocationSuffix564.getTree());
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary7722);
    this_key565=this_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,this_key565.getTree());
    pushFollow(FOLLOW_arguments_in_primary7724);
    arguments566=arguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arguments566.getTree());
  }
break;
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_literal_in_primary7740);
literal567=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal567.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_super_key_in_primary7760);
super_key568=super_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,super_key568.getTree());
pushFollow(FOLLOW_superSuffix_in_primary7762);
superSuffix569=superSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,superSuffix569.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_new_key_in_primary7777);
new_key570=new_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,new_key570.getTree());
pushFollow(FOLLOW_creator_in_primary7779);
creator571=creator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,creator571.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primitiveType_in_primary7794);
primitiveType572=primitiveType();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primitiveType572.getTree());
loop172: do {
int alt172=2;
int LA172_0=input.LA(1);
if ((LA172_0 == LEFT_SQUARE)) {
alt172=1;
}
switch (alt172) {
case 1:
{
LEFT_SQUARE573=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary7797);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE573_tree=(Object)adaptor.create(LEFT_SQUARE573);
adaptor.addChild(root_0,LEFT_SQUARE573_tree);
}
RIGHT_SQUARE574=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary7799);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE574_tree=(Object)adaptor.create(RIGHT_SQUARE574);
adaptor.addChild(root_0,RIGHT_SQUARE574_tree);
}
}
break;
default :
break loop172;
}
}
 while (true);
DOT575=(Token)match(input,DOT,FOLLOW_DOT_in_primary7803);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT575_tree=(Object)adaptor.create(DOT575);
adaptor.addChild(root_0,DOT575_tree);
}
pushFollow(FOLLOW_class_key_in_primary7805);
class_key576=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key576.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineMapExpression_in_primary7825);
inlineMapExpression577=inlineMapExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineMapExpression577.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineListExpression_in_primary7840);
inlineListExpression578=inlineListExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineListExpression578.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
ID579=(Token)match(input,ID,FOLLOW_ID_in_primary7854);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID579_tree=(Object)adaptor.create(ID579);
adaptor.addChild(root_0,ID579_tree);
}
loop173: do {
int alt173=2;
int LA173_0=input.LA(1);
if ((LA173_0 == DOT)) {
int LA173_2=input.LA(2);
if ((LA173_2 == ID)) {
int LA173_3=input.LA(3);
if ((synpred61_DRL())) {
alt173=1;
}
}
}
switch (alt173) {
case 1:
{
DOT580=(Token)match(input,DOT,FOLLOW_DOT_in_primary7863);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT580_tree=(Object)adaptor.create(DOT580);
adaptor.addChild(root_0,DOT580_tree);
}
ID581=(Token)match(input,ID,FOLLOW_ID_in_primary7865);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID581_tree=(Object)adaptor.create(ID581);
adaptor.addChild(root_0,ID581_tree);
}
}
break;
default :
break loop173;
}
}
 while (true);
int alt174=2;
alt174=dfa174.predict(input);
switch (alt174) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary7874);
identifierSuffix582=identifierSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,identifierSuffix582.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
