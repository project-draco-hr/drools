{
  DRLParser.primary_return retval=new DRLParser.primary_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE558=null;
  Token RIGHT_SQUARE559=null;
  Token DOT560=null;
  Token ID564=null;
  Token DOT565=null;
  Token ID566=null;
  DRLParser.parExpression_return parExpression547=null;
  DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments548=null;
  DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix549=null;
  DRLParser.this_key_return this_key550=null;
  DRLParser.arguments_return arguments551=null;
  DRLParser.literal_return literal552=null;
  DRLParser.super_key_return super_key553=null;
  DRLParser.superSuffix_return superSuffix554=null;
  DRLParser.new_key_return new_key555=null;
  DRLParser.creator_return creator556=null;
  DRLParser.primitiveType_return primitiveType557=null;
  DRLParser.class_key_return class_key561=null;
  DRLParser.inlineMapExpression_return inlineMapExpression562=null;
  DRLParser.inlineListExpression_return inlineListExpression563=null;
  DRLParser.identifierSuffix_return identifierSuffix567=null;
  Object LEFT_SQUARE558_tree=null;
  Object RIGHT_SQUARE559_tree=null;
  Object DOT560_tree=null;
  Object ID564_tree=null;
  Object DOT565_tree=null;
  Object ID566_tree=null;
  try {
    int alt173=9;
    alt173=dfa173.predict(input);
switch (alt173) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_parExpression_in_primary7597);
        parExpression547=parExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,parExpression547.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary7612);
    nonWildcardTypeArguments548=nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,nonWildcardTypeArguments548.getTree());
    int alt169=2;
    int LA169_0=input.LA(1);
    if ((LA169_0 == ID)) {
      int LA169_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt169=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt169=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",169,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",169,0,input);
      throw nvae;
    }
switch (alt169) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary7615);
        explicitGenericInvocationSuffix549=explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,explicitGenericInvocationSuffix549.getTree());
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary7619);
    this_key550=this_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,this_key550.getTree());
    pushFollow(FOLLOW_arguments_in_primary7621);
    arguments551=arguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arguments551.getTree());
  }
break;
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_literal_in_primary7637);
literal552=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal552.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_super_key_in_primary7657);
super_key553=super_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,super_key553.getTree());
pushFollow(FOLLOW_superSuffix_in_primary7659);
superSuffix554=superSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,superSuffix554.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_new_key_in_primary7674);
new_key555=new_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,new_key555.getTree());
pushFollow(FOLLOW_creator_in_primary7676);
creator556=creator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,creator556.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primitiveType_in_primary7691);
primitiveType557=primitiveType();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primitiveType557.getTree());
loop170: do {
int alt170=2;
int LA170_0=input.LA(1);
if ((LA170_0 == LEFT_SQUARE)) {
alt170=1;
}
switch (alt170) {
case 1:
{
LEFT_SQUARE558=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary7694);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE558_tree=(Object)adaptor.create(LEFT_SQUARE558);
adaptor.addChild(root_0,LEFT_SQUARE558_tree);
}
RIGHT_SQUARE559=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary7696);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE559_tree=(Object)adaptor.create(RIGHT_SQUARE559);
adaptor.addChild(root_0,RIGHT_SQUARE559_tree);
}
}
break;
default :
break loop170;
}
}
 while (true);
DOT560=(Token)match(input,DOT,FOLLOW_DOT_in_primary7700);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT560_tree=(Object)adaptor.create(DOT560);
adaptor.addChild(root_0,DOT560_tree);
}
pushFollow(FOLLOW_class_key_in_primary7702);
class_key561=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key561.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineMapExpression_in_primary7722);
inlineMapExpression562=inlineMapExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineMapExpression562.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineListExpression_in_primary7737);
inlineListExpression563=inlineListExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineListExpression563.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
ID564=(Token)match(input,ID,FOLLOW_ID_in_primary7751);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID564_tree=(Object)adaptor.create(ID564);
adaptor.addChild(root_0,ID564_tree);
}
loop171: do {
int alt171=2;
int LA171_0=input.LA(1);
if ((LA171_0 == DOT)) {
int LA171_2=input.LA(2);
if ((LA171_2 == ID)) {
int LA171_3=input.LA(3);
if ((synpred61_DRL())) {
alt171=1;
}
}
}
switch (alt171) {
case 1:
{
DOT565=(Token)match(input,DOT,FOLLOW_DOT_in_primary7760);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT565_tree=(Object)adaptor.create(DOT565);
adaptor.addChild(root_0,DOT565_tree);
}
ID566=(Token)match(input,ID,FOLLOW_ID_in_primary7762);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID566_tree=(Object)adaptor.create(ID566);
adaptor.addChild(root_0,ID566_tree);
}
}
break;
default :
break loop171;
}
}
 while (true);
int alt172=2;
alt172=dfa172.predict(input);
switch (alt172) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary7771);
identifierSuffix567=identifierSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,identifierSuffix567.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
