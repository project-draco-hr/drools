{
  DRLParser.primary_return retval=new DRLParser.primary_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE450=null;
  Token RIGHT_SQUARE451=null;
  Token DOT452=null;
  Token ID456=null;
  Token DOT457=null;
  Token ID458=null;
  DRLParser.parExpression_return parExpression439=null;
  DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments440=null;
  DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix441=null;
  DRLParser.this_key_return this_key442=null;
  DRLParser.arguments_return arguments443=null;
  DRLParser.literal_return literal444=null;
  DRLParser.super_key_return super_key445=null;
  DRLParser.superSuffix_return superSuffix446=null;
  DRLParser.new_key_return new_key447=null;
  DRLParser.creator_return creator448=null;
  DRLParser.primitiveType_return primitiveType449=null;
  DRLParser.class_key_return class_key453=null;
  DRLParser.inlineMapExpression_return inlineMapExpression454=null;
  DRLParser.inlineListExpression_return inlineListExpression455=null;
  DRLParser.identifierSuffix_return identifierSuffix459=null;
  Object LEFT_SQUARE450_tree=null;
  Object RIGHT_SQUARE451_tree=null;
  Object DOT452_tree=null;
  Object ID456_tree=null;
  Object DOT457_tree=null;
  Object ID458_tree=null;
  try {
    int alt146=9;
    alt146=dfa146.predict(input);
switch (alt146) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_parExpression_in_primary6946);
        parExpression439=parExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,parExpression439.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6961);
    nonWildcardTypeArguments440=nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,nonWildcardTypeArguments440.getTree());
    int alt142=2;
    int LA142_0=input.LA(1);
    if ((LA142_0 == ID)) {
      int LA142_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt142=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt142=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",142,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",142,0,input);
      throw nvae;
    }
switch (alt142) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6964);
        explicitGenericInvocationSuffix441=explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,explicitGenericInvocationSuffix441.getTree());
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary6968);
    this_key442=this_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,this_key442.getTree());
    pushFollow(FOLLOW_arguments_in_primary6970);
    arguments443=arguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arguments443.getTree());
  }
break;
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_literal_in_primary6986);
literal444=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal444.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_super_key_in_primary7006);
super_key445=super_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,super_key445.getTree());
pushFollow(FOLLOW_superSuffix_in_primary7008);
superSuffix446=superSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,superSuffix446.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_new_key_in_primary7023);
new_key447=new_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,new_key447.getTree());
pushFollow(FOLLOW_creator_in_primary7025);
creator448=creator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,creator448.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primitiveType_in_primary7040);
primitiveType449=primitiveType();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primitiveType449.getTree());
loop143: do {
int alt143=2;
int LA143_0=input.LA(1);
if ((LA143_0 == LEFT_SQUARE)) {
alt143=1;
}
switch (alt143) {
case 1:
{
LEFT_SQUARE450=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary7043);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE450_tree=(Object)adaptor.create(LEFT_SQUARE450);
adaptor.addChild(root_0,LEFT_SQUARE450_tree);
}
RIGHT_SQUARE451=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary7045);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE451_tree=(Object)adaptor.create(RIGHT_SQUARE451);
adaptor.addChild(root_0,RIGHT_SQUARE451_tree);
}
}
break;
default :
break loop143;
}
}
 while (true);
DOT452=(Token)match(input,DOT,FOLLOW_DOT_in_primary7049);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT452_tree=(Object)adaptor.create(DOT452);
adaptor.addChild(root_0,DOT452_tree);
}
pushFollow(FOLLOW_class_key_in_primary7051);
class_key453=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key453.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineMapExpression_in_primary7071);
inlineMapExpression454=inlineMapExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineMapExpression454.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineListExpression_in_primary7086);
inlineListExpression455=inlineListExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineListExpression455.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
ID456=(Token)match(input,ID,FOLLOW_ID_in_primary7100);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID456_tree=(Object)adaptor.create(ID456);
adaptor.addChild(root_0,ID456_tree);
}
loop144: do {
int alt144=2;
int LA144_0=input.LA(1);
if ((LA144_0 == DOT)) {
int LA144_2=input.LA(2);
if ((LA144_2 == ID)) {
int LA144_3=input.LA(3);
if ((synpred39_DRL())) {
alt144=1;
}
}
}
switch (alt144) {
case 1:
{
DOT457=(Token)match(input,DOT,FOLLOW_DOT_in_primary7109);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT457_tree=(Object)adaptor.create(DOT457);
adaptor.addChild(root_0,DOT457_tree);
}
ID458=(Token)match(input,ID,FOLLOW_ID_in_primary7111);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID458_tree=(Object)adaptor.create(ID458);
adaptor.addChild(root_0,ID458_tree);
}
}
break;
default :
break loop144;
}
}
 while (true);
int alt145=2;
alt145=dfa145.predict(input);
switch (alt145) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary7120);
identifierSuffix459=identifierSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,identifierSuffix459.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
