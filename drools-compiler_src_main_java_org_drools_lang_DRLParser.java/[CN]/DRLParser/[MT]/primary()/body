{
  DRLParser.primary_return retval=new DRLParser.primary_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE445=null;
  Token RIGHT_SQUARE446=null;
  Token DOT447=null;
  Token ID451=null;
  Token DOT452=null;
  Token ID453=null;
  DRLParser.parExpression_return parExpression434=null;
  DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments435=null;
  DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix436=null;
  DRLParser.this_key_return this_key437=null;
  DRLParser.arguments_return arguments438=null;
  DRLParser.literal_return literal439=null;
  DRLParser.super_key_return super_key440=null;
  DRLParser.superSuffix_return superSuffix441=null;
  DRLParser.new_key_return new_key442=null;
  DRLParser.creator_return creator443=null;
  DRLParser.primitiveType_return primitiveType444=null;
  DRLParser.class_key_return class_key448=null;
  DRLParser.inlineMapExpression_return inlineMapExpression449=null;
  DRLParser.inlineListExpression_return inlineListExpression450=null;
  DRLParser.identifierSuffix_return identifierSuffix454=null;
  Object LEFT_SQUARE445_tree=null;
  Object RIGHT_SQUARE446_tree=null;
  Object DOT447_tree=null;
  Object ID451_tree=null;
  Object DOT452_tree=null;
  Object ID453_tree=null;
  try {
    int alt144=9;
    alt144=dfa144.predict(input);
switch (alt144) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_parExpression_in_primary6879);
        parExpression434=parExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,parExpression434.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6894);
    nonWildcardTypeArguments435=nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,nonWildcardTypeArguments435.getTree());
    int alt140=2;
    int LA140_0=input.LA(1);
    if ((LA140_0 == ID)) {
      int LA140_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt140=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt140=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",140,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",140,0,input);
      throw nvae;
    }
switch (alt140) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6897);
        explicitGenericInvocationSuffix436=explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,explicitGenericInvocationSuffix436.getTree());
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary6901);
    this_key437=this_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,this_key437.getTree());
    pushFollow(FOLLOW_arguments_in_primary6903);
    arguments438=arguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arguments438.getTree());
  }
break;
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_literal_in_primary6919);
literal439=literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,literal439.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_super_key_in_primary6939);
super_key440=super_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,super_key440.getTree());
pushFollow(FOLLOW_superSuffix_in_primary6941);
superSuffix441=superSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,superSuffix441.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_new_key_in_primary6956);
new_key442=new_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,new_key442.getTree());
pushFollow(FOLLOW_creator_in_primary6958);
creator443=creator();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,creator443.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primitiveType_in_primary6973);
primitiveType444=primitiveType();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primitiveType444.getTree());
loop141: do {
int alt141=2;
int LA141_0=input.LA(1);
if ((LA141_0 == LEFT_SQUARE)) {
alt141=1;
}
switch (alt141) {
case 1:
{
LEFT_SQUARE445=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary6976);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE445_tree=(Object)adaptor.create(LEFT_SQUARE445);
adaptor.addChild(root_0,LEFT_SQUARE445_tree);
}
RIGHT_SQUARE446=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary6978);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE446_tree=(Object)adaptor.create(RIGHT_SQUARE446);
adaptor.addChild(root_0,RIGHT_SQUARE446_tree);
}
}
break;
default :
break loop141;
}
}
 while (true);
DOT447=(Token)match(input,DOT,FOLLOW_DOT_in_primary6982);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT447_tree=(Object)adaptor.create(DOT447);
adaptor.addChild(root_0,DOT447_tree);
}
pushFollow(FOLLOW_class_key_in_primary6984);
class_key448=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key448.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineMapExpression_in_primary7004);
inlineMapExpression449=inlineMapExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineMapExpression449.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_inlineListExpression_in_primary7019);
inlineListExpression450=inlineListExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,inlineListExpression450.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
ID451=(Token)match(input,ID,FOLLOW_ID_in_primary7033);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID451_tree=(Object)adaptor.create(ID451);
adaptor.addChild(root_0,ID451_tree);
}
loop142: do {
int alt142=2;
int LA142_0=input.LA(1);
if ((LA142_0 == DOT)) {
int LA142_2=input.LA(2);
if ((LA142_2 == ID)) {
int LA142_3=input.LA(3);
if ((synpred39_DRL())) {
alt142=1;
}
}
}
switch (alt142) {
case 1:
{
DOT452=(Token)match(input,DOT,FOLLOW_DOT_in_primary7042);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT452_tree=(Object)adaptor.create(DOT452);
adaptor.addChild(root_0,DOT452_tree);
}
ID453=(Token)match(input,ID,FOLLOW_ID_in_primary7044);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID453_tree=(Object)adaptor.create(ID453);
adaptor.addChild(root_0,ID453_tree);
}
}
break;
default :
break loop142;
}
}
 while (true);
int alt143=2;
alt143=dfa143.predict(input);
switch (alt143) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary7053);
identifierSuffix454=identifierSuffix();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,identifierSuffix454.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
