{
  DRLParser.import_name_return retval=new DRLParser.import_name_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  List list_id=null;
  Object id_tree=null;
  RewriteRuleTokenStream stream_DOT_STAR=new RewriteRuleTokenStream(adaptor,"token DOT_STAR");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  try {
{
      id=(Token)match(input,ID,FOLLOW_ID_in_import_name971);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(id);
      if (list_id == null)       list_id=new ArrayList();
      list_id.add(id);
      loop7:       do {
        int alt7=2;
        int LA7_0=input.LA(1);
        if ((LA7_0 == DOT)) {
          alt7=1;
        }
switch (alt7) {
case 1:
{
            id=(Token)match(input,DOT,FOLLOW_DOT_in_import_name977);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_DOT.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
            id=(Token)match(input,ID,FOLLOW_ID_in_import_name981);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_ID.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
          }
        break;
default :
      break loop7;
  }
}
 while (true);
int alt8=2;
int LA8_0=input.LA(1);
if ((LA8_0 == DOT_STAR)) {
  alt8=1;
}
switch (alt8) {
case 1:
{
    id=(Token)match(input,DOT_STAR,FOLLOW_DOT_STAR_in_import_name988);
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_DOT_STAR.add(id);
    if (list_id == null)     list_id=new ArrayList();
    list_id.add(id);
  }
break;
}
if (state.backtracking == 0) {
helper.emit(list_id,DroolsEditorType.IDENTIFIER);
helper.setParaphrasesValue(importType,helper.buildStringFromTokens(list_id));
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_IMPORT_ID,"VT_IMPORT_ID"),root_1);
  if (!(stream_ID.hasNext())) {
    throw new RewriteEarlyExitException();
  }
  while (stream_ID.hasNext()) {
    adaptor.addChild(root_1,stream_ID.nextNode());
  }
  stream_ID.reset();
  if (stream_DOT_STAR.hasNext()) {
    adaptor.addChild(root_1,stream_DOT_STAR.nextNode());
  }
  stream_DOT_STAR.reset();
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
