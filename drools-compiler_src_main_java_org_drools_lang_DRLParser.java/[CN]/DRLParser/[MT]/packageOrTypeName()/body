{
  DRLParser.packageOrTypeName_return retval=new DRLParser.packageOrTypeName_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  List list_id=null;
  Object id_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  try {
{
      id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5873);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(id);
      if (list_id == null)       list_id=new ArrayList();
      list_id.add(id);
      loop113:       do {
        int alt113=2;
        int LA113_0=input.LA(1);
        if ((LA113_0 == DOT)) {
          alt113=1;
        }
switch (alt113) {
case 1:
{
            id=(Token)match(input,DOT,FOLLOW_DOT_in_packageOrTypeName5879);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_DOT.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
            id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5883);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_ID.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
          }
        break;
default :
      break loop113;
  }
}
 while (true);
if (state.backtracking == 0) {
  helper.emit(list_id,DroolsEditorType.IDENTIFIER);
  helper.setParaphrasesValue(DroolsParaphraseTypes.PACKAGE,helper.buildStringFromTokens(list_id));
}
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_PACKAGE_ID,"VT_PACKAGE_ID"),root_1);
      if (!(stream_ID.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_ID.hasNext()) {
        adaptor.addChild(root_1,stream_ID.nextNode());
      }
      stream_ID.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
