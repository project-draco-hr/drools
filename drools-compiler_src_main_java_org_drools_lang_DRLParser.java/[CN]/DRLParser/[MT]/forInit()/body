{
  DRLParser.forInit_return retval=new DRLParser.forInit_return();
  retval.start=input.LT(1);
  int forInit_StartIndex=input.index();
  Object root_0=null;
  DRLParser.variableModifier_return variableModifier447=null;
  DRLParser.type_return type448=null;
  DRLParser.variableDeclarators_return variableDeclarators449=null;
  DRLParser.expressionList_return expressionList450=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,127)) {
      return retval;
    }
    int alt143=2;
    alt143=dfa143.predict(input);
switch (alt143) {
case 1:
{
        root_0=(Object)adaptor.nil();
        loop142:         do {
          int alt142=2;
          alt142=dfa142.predict(input);
switch (alt142) {
case 1:
{
              pushFollow(FOLLOW_variableModifier_in_forInit6668);
              variableModifier447=variableModifier();
              state._fsp--;
              if (state.failed)               return retval;
              if (state.backtracking == 0)               adaptor.addChild(root_0,variableModifier447.getTree());
            }
          break;
default :
        break loop142;
    }
  }
 while (true);
  pushFollow(FOLLOW_type_in_forInit6671);
  type448=type();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,type448.getTree());
  pushFollow(FOLLOW_variableDeclarators_in_forInit6673);
  variableDeclarators449=variableDeclarators();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,variableDeclarators449.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_expressionList_in_forInit6678);
expressionList450=expressionList();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expressionList450.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,127,forInit_StartIndex);
}
}
return retval;
}
