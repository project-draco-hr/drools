{
  DRLParser.forInit_return retval=new DRLParser.forInit_return();
  retval.start=input.LT(1);
  int forInit_StartIndex=input.index();
  Object root_0=null;
  DRLParser.variableModifier_return variableModifier432=null;
  DRLParser.type_return type433=null;
  DRLParser.variableDeclarators_return variableDeclarators434=null;
  DRLParser.expressionList_return expressionList435=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,124)) {
      return retval;
    }
    int alt141=2;
    alt141=dfa141.predict(input);
switch (alt141) {
case 1:
{
        root_0=(Object)adaptor.nil();
        loop140:         do {
          int alt140=2;
          alt140=dfa140.predict(input);
switch (alt140) {
case 1:
{
              pushFollow(FOLLOW_variableModifier_in_forInit6565);
              variableModifier432=variableModifier();
              state._fsp--;
              if (state.failed)               return retval;
              if (state.backtracking == 0)               adaptor.addChild(root_0,variableModifier432.getTree());
            }
          break;
default :
        break loop140;
    }
  }
 while (true);
  pushFollow(FOLLOW_type_in_forInit6568);
  type433=type();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,type433.getTree());
  pushFollow(FOLLOW_variableDeclarators_in_forInit6570);
  variableDeclarators434=variableDeclarators();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,variableDeclarators434.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_expressionList_in_forInit6575);
expressionList435=expressionList();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expressionList435.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,124,forInit_StartIndex);
}
}
return retval;
}
