{
  DRLParser.voidInterfaceMethodDeclaratorRest_return retval=new DRLParser.voidInterfaceMethodDeclaratorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON810=null;
  DRLParser.formalParameters_return formalParameters807=null;
  DRLParser.throws_key_return throws_key808=null;
  DRLParser.typeNameList_return typeNameList809=null;
  Object SEMICOLON810_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest9617);
      formalParameters807=formalParameters();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,formalParameters807.getTree());
      int alt240=2;
      int LA240_0=input.LA(1);
      if ((LA240_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
        alt240=1;
      }
switch (alt240) {
case 1:
{
          pushFollow(FOLLOW_throws_key_in_voidInterfaceMethodDeclaratorRest9620);
          throws_key808=throws_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,throws_key808.getTree());
          pushFollow(FOLLOW_typeNameList_in_voidInterfaceMethodDeclaratorRest9622);
          typeNameList809=typeNameList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,typeNameList809.getTree());
        }
      break;
  }
  SEMICOLON810=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidInterfaceMethodDeclaratorRest9626);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    SEMICOLON810_tree=(Object)adaptor.create(SEMICOLON810);
    adaptor.addChild(root_0,SEMICOLON810_tree);
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
