{
  DRLParser.castExpression_return retval=new DRLParser.castExpression_return();
  retval.start=input.LT(1);
  int castExpression_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_PAREN384=null;
  Token RIGHT_PAREN386=null;
  Token LEFT_PAREN388=null;
  Token RIGHT_PAREN390=null;
  Token LEFT_PAREN392=null;
  Token RIGHT_PAREN394=null;
  DRLParser.primitiveType_return primitiveType385=null;
  DRLParser.unaryExpression_return unaryExpression387=null;
  DRLParser.type_return type389=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus391=null;
  DRLParser.expression_return expression393=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus395=null;
  Object LEFT_PAREN384_tree=null;
  Object RIGHT_PAREN386_tree=null;
  Object LEFT_PAREN388_tree=null;
  Object RIGHT_PAREN390_tree=null;
  Object LEFT_PAREN392_tree=null;
  Object RIGHT_PAREN394_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,124)) {
      return retval;
    }
    int alt131=3;
    int LA131_0=input.LA(1);
    if ((LA131_0 == LEFT_PAREN)) {
      int LA131_1=input.LA(2);
      if ((synpred18_DRL())) {
        alt131=1;
      }
 else       if ((synpred19_DRL())) {
        alt131=2;
      }
 else       if ((true)) {
        alt131=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",131,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",131,0,input);
      throw nvae;
    }
switch (alt131) {
case 1:
{
        root_0=(Object)adaptor.nil();
        LEFT_PAREN384=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6179);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          LEFT_PAREN384_tree=(Object)adaptor.create(LEFT_PAREN384);
          adaptor.addChild(root_0,LEFT_PAREN384_tree);
        }
        pushFollow(FOLLOW_primitiveType_in_castExpression6181);
        primitiveType385=primitiveType();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,primitiveType385.getTree());
        RIGHT_PAREN386=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6183);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          RIGHT_PAREN386_tree=(Object)adaptor.create(RIGHT_PAREN386);
          adaptor.addChild(root_0,RIGHT_PAREN386_tree);
        }
        pushFollow(FOLLOW_unaryExpression_in_castExpression6185);
        unaryExpression387=unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,unaryExpression387.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    LEFT_PAREN388=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6202);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      LEFT_PAREN388_tree=(Object)adaptor.create(LEFT_PAREN388);
      adaptor.addChild(root_0,LEFT_PAREN388_tree);
    }
    pushFollow(FOLLOW_type_in_castExpression6204);
    type389=type();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,type389.getTree());
    RIGHT_PAREN390=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6206);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      RIGHT_PAREN390_tree=(Object)adaptor.create(RIGHT_PAREN390);
      adaptor.addChild(root_0,RIGHT_PAREN390_tree);
    }
    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6208);
    unaryExpressionNotPlusMinus391=unaryExpressionNotPlusMinus();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,unaryExpressionNotPlusMinus391.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN392=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6217);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_PAREN392_tree=(Object)adaptor.create(LEFT_PAREN392);
  adaptor.addChild(root_0,LEFT_PAREN392_tree);
}
pushFollow(FOLLOW_expression_in_castExpression6219);
expression393=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression393.getTree());
RIGHT_PAREN394=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6221);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_PAREN394_tree=(Object)adaptor.create(RIGHT_PAREN394);
  adaptor.addChild(root_0,RIGHT_PAREN394_tree);
}
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6223);
unaryExpressionNotPlusMinus395=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus395.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,124,castExpression_StartIndex);
}
}
return retval;
}
