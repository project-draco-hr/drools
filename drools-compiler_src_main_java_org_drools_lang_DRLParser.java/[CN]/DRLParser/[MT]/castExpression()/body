{
  DRLParser.castExpression_return retval=new DRLParser.castExpression_return();
  retval.start=input.LT(1);
  int castExpression_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_PAREN542=null;
  Token RIGHT_PAREN544=null;
  Token LEFT_PAREN546=null;
  Token RIGHT_PAREN548=null;
  Token LEFT_PAREN550=null;
  Token RIGHT_PAREN552=null;
  DRLParser.primitiveType_return primitiveType543=null;
  DRLParser.unaryExpression_return unaryExpression545=null;
  DRLParser.type_return type547=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus549=null;
  DRLParser.expression_return expression551=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus553=null;
  Object LEFT_PAREN542_tree=null;
  Object RIGHT_PAREN544_tree=null;
  Object LEFT_PAREN546_tree=null;
  Object RIGHT_PAREN548_tree=null;
  Object LEFT_PAREN550_tree=null;
  Object RIGHT_PAREN552_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,154)) {
      return retval;
    }
    int alt169=3;
    int LA169_0=input.LA(1);
    if ((LA169_0 == LEFT_PAREN)) {
      int LA169_1=input.LA(2);
      if ((synpred43_DRL())) {
        alt169=1;
      }
 else       if ((synpred44_DRL())) {
        alt169=2;
      }
 else       if ((true)) {
        alt169=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",169,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",169,0,input);
      throw nvae;
    }
switch (alt169) {
case 1:
{
        root_0=(Object)adaptor.nil();
        LEFT_PAREN542=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7540);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          LEFT_PAREN542_tree=(Object)adaptor.create(LEFT_PAREN542);
          adaptor.addChild(root_0,LEFT_PAREN542_tree);
        }
        pushFollow(FOLLOW_primitiveType_in_castExpression7542);
        primitiveType543=primitiveType();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,primitiveType543.getTree());
        RIGHT_PAREN544=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7544);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          RIGHT_PAREN544_tree=(Object)adaptor.create(RIGHT_PAREN544);
          adaptor.addChild(root_0,RIGHT_PAREN544_tree);
        }
        pushFollow(FOLLOW_unaryExpression_in_castExpression7546);
        unaryExpression545=unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,unaryExpression545.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    LEFT_PAREN546=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7563);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      LEFT_PAREN546_tree=(Object)adaptor.create(LEFT_PAREN546);
      adaptor.addChild(root_0,LEFT_PAREN546_tree);
    }
    pushFollow(FOLLOW_type_in_castExpression7565);
    type547=type();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,type547.getTree());
    RIGHT_PAREN548=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7567);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      RIGHT_PAREN548_tree=(Object)adaptor.create(RIGHT_PAREN548);
      adaptor.addChild(root_0,RIGHT_PAREN548_tree);
    }
    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7569);
    unaryExpressionNotPlusMinus549=unaryExpressionNotPlusMinus();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,unaryExpressionNotPlusMinus549.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN550=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7578);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_PAREN550_tree=(Object)adaptor.create(LEFT_PAREN550);
  adaptor.addChild(root_0,LEFT_PAREN550_tree);
}
pushFollow(FOLLOW_expression_in_castExpression7580);
expression551=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression551.getTree());
RIGHT_PAREN552=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7582);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_PAREN552_tree=(Object)adaptor.create(RIGHT_PAREN552);
  adaptor.addChild(root_0,RIGHT_PAREN552_tree);
}
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7584);
unaryExpressionNotPlusMinus553=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus553.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,154,castExpression_StartIndex);
}
}
return retval;
}
