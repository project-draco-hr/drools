{
  DRLParser.castExpression_return retval=new DRLParser.castExpression_return();
  retval.start=input.LT(1);
  int castExpression_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_PAREN527=null;
  Token RIGHT_PAREN529=null;
  Token LEFT_PAREN531=null;
  Token RIGHT_PAREN533=null;
  Token LEFT_PAREN535=null;
  Token RIGHT_PAREN537=null;
  DRLParser.primitiveType_return primitiveType528=null;
  DRLParser.unaryExpression_return unaryExpression530=null;
  DRLParser.type_return type532=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus534=null;
  DRLParser.expression_return expression536=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus538=null;
  Object LEFT_PAREN527_tree=null;
  Object RIGHT_PAREN529_tree=null;
  Object LEFT_PAREN531_tree=null;
  Object RIGHT_PAREN533_tree=null;
  Object LEFT_PAREN535_tree=null;
  Object RIGHT_PAREN537_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,151)) {
      return retval;
    }
    int alt167=3;
    int LA167_0=input.LA(1);
    if ((LA167_0 == LEFT_PAREN)) {
      int LA167_1=input.LA(2);
      if ((synpred43_DRL())) {
        alt167=1;
      }
 else       if ((synpred44_DRL())) {
        alt167=2;
      }
 else       if ((true)) {
        alt167=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",167,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",167,0,input);
      throw nvae;
    }
switch (alt167) {
case 1:
{
        root_0=(Object)adaptor.nil();
        LEFT_PAREN527=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7437);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          LEFT_PAREN527_tree=(Object)adaptor.create(LEFT_PAREN527);
          adaptor.addChild(root_0,LEFT_PAREN527_tree);
        }
        pushFollow(FOLLOW_primitiveType_in_castExpression7439);
        primitiveType528=primitiveType();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,primitiveType528.getTree());
        RIGHT_PAREN529=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7441);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          RIGHT_PAREN529_tree=(Object)adaptor.create(RIGHT_PAREN529);
          adaptor.addChild(root_0,RIGHT_PAREN529_tree);
        }
        pushFollow(FOLLOW_unaryExpression_in_castExpression7443);
        unaryExpression530=unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,unaryExpression530.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    LEFT_PAREN531=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7460);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      LEFT_PAREN531_tree=(Object)adaptor.create(LEFT_PAREN531);
      adaptor.addChild(root_0,LEFT_PAREN531_tree);
    }
    pushFollow(FOLLOW_type_in_castExpression7462);
    type532=type();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,type532.getTree());
    RIGHT_PAREN533=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7464);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      RIGHT_PAREN533_tree=(Object)adaptor.create(RIGHT_PAREN533);
      adaptor.addChild(root_0,RIGHT_PAREN533_tree);
    }
    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7466);
    unaryExpressionNotPlusMinus534=unaryExpressionNotPlusMinus();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,unaryExpressionNotPlusMinus534.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN535=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7475);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_PAREN535_tree=(Object)adaptor.create(LEFT_PAREN535);
  adaptor.addChild(root_0,LEFT_PAREN535_tree);
}
pushFollow(FOLLOW_expression_in_castExpression7477);
expression536=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression536.getTree());
RIGHT_PAREN537=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7479);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_PAREN537_tree=(Object)adaptor.create(RIGHT_PAREN537);
  adaptor.addChild(root_0,RIGHT_PAREN537_tree);
}
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7481);
unaryExpressionNotPlusMinus538=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus538.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,151,castExpression_StartIndex);
}
}
return retval;
}
