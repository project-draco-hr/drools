{
  DRLParser.castExpression_return retval=new DRLParser.castExpression_return();
  retval.start=input.LT(1);
  int castExpression_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_PAREN419=null;
  Token RIGHT_PAREN421=null;
  Token LEFT_PAREN423=null;
  Token RIGHT_PAREN425=null;
  Token LEFT_PAREN427=null;
  Token RIGHT_PAREN429=null;
  DRLParser.primitiveType_return primitiveType420=null;
  DRLParser.unaryExpression_return unaryExpression422=null;
  DRLParser.type_return type424=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus426=null;
  DRLParser.expression_return expression428=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus430=null;
  Object LEFT_PAREN419_tree=null;
  Object RIGHT_PAREN421_tree=null;
  Object LEFT_PAREN423_tree=null;
  Object RIGHT_PAREN425_tree=null;
  Object LEFT_PAREN427_tree=null;
  Object RIGHT_PAREN429_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,135)) {
      return retval;
    }
    int alt140=3;
    int LA140_0=input.LA(1);
    if ((LA140_0 == LEFT_PAREN)) {
      int LA140_1=input.LA(2);
      if ((synpred21_DRL())) {
        alt140=1;
      }
 else       if ((synpred22_DRL())) {
        alt140=2;
      }
 else       if ((true)) {
        alt140=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",140,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",140,0,input);
      throw nvae;
    }
switch (alt140) {
case 1:
{
        root_0=(Object)adaptor.nil();
        LEFT_PAREN419=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6780);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          LEFT_PAREN419_tree=(Object)adaptor.create(LEFT_PAREN419);
          adaptor.addChild(root_0,LEFT_PAREN419_tree);
        }
        pushFollow(FOLLOW_primitiveType_in_castExpression6782);
        primitiveType420=primitiveType();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,primitiveType420.getTree());
        RIGHT_PAREN421=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6784);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          RIGHT_PAREN421_tree=(Object)adaptor.create(RIGHT_PAREN421);
          adaptor.addChild(root_0,RIGHT_PAREN421_tree);
        }
        pushFollow(FOLLOW_unaryExpression_in_castExpression6786);
        unaryExpression422=unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,unaryExpression422.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    LEFT_PAREN423=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6803);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      LEFT_PAREN423_tree=(Object)adaptor.create(LEFT_PAREN423);
      adaptor.addChild(root_0,LEFT_PAREN423_tree);
    }
    pushFollow(FOLLOW_type_in_castExpression6805);
    type424=type();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,type424.getTree());
    RIGHT_PAREN425=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6807);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      RIGHT_PAREN425_tree=(Object)adaptor.create(RIGHT_PAREN425);
      adaptor.addChild(root_0,RIGHT_PAREN425_tree);
    }
    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6809);
    unaryExpressionNotPlusMinus426=unaryExpressionNotPlusMinus();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,unaryExpressionNotPlusMinus426.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN427=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6818);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_PAREN427_tree=(Object)adaptor.create(LEFT_PAREN427);
  adaptor.addChild(root_0,LEFT_PAREN427_tree);
}
pushFollow(FOLLOW_expression_in_castExpression6820);
expression428=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression428.getTree());
RIGHT_PAREN429=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6822);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_PAREN429_tree=(Object)adaptor.create(RIGHT_PAREN429);
  adaptor.addChild(root_0,RIGHT_PAREN429_tree);
}
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6824);
unaryExpressionNotPlusMinus430=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus430.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,135,castExpression_StartIndex);
}
}
return retval;
}
