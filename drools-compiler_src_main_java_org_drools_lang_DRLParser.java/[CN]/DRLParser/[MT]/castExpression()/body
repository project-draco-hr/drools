{
  DRLParser.castExpression_return retval=new DRLParser.castExpression_return();
  retval.start=input.LT(1);
  int castExpression_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_PAREN414=null;
  Token RIGHT_PAREN416=null;
  Token LEFT_PAREN418=null;
  Token RIGHT_PAREN420=null;
  Token LEFT_PAREN422=null;
  Token RIGHT_PAREN424=null;
  DRLParser.primitiveType_return primitiveType415=null;
  DRLParser.unaryExpression_return unaryExpression417=null;
  DRLParser.type_return type419=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus421=null;
  DRLParser.expression_return expression423=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus425=null;
  Object LEFT_PAREN414_tree=null;
  Object RIGHT_PAREN416_tree=null;
  Object LEFT_PAREN418_tree=null;
  Object RIGHT_PAREN420_tree=null;
  Object LEFT_PAREN422_tree=null;
  Object RIGHT_PAREN424_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,133)) {
      return retval;
    }
    int alt138=3;
    int LA138_0=input.LA(1);
    if ((LA138_0 == LEFT_PAREN)) {
      int LA138_1=input.LA(2);
      if ((synpred21_DRL())) {
        alt138=1;
      }
 else       if ((synpred22_DRL())) {
        alt138=2;
      }
 else       if ((true)) {
        alt138=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",138,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",138,0,input);
      throw nvae;
    }
switch (alt138) {
case 1:
{
        root_0=(Object)adaptor.nil();
        LEFT_PAREN414=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6719);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          LEFT_PAREN414_tree=(Object)adaptor.create(LEFT_PAREN414);
          adaptor.addChild(root_0,LEFT_PAREN414_tree);
        }
        pushFollow(FOLLOW_primitiveType_in_castExpression6721);
        primitiveType415=primitiveType();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,primitiveType415.getTree());
        RIGHT_PAREN416=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6723);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          RIGHT_PAREN416_tree=(Object)adaptor.create(RIGHT_PAREN416);
          adaptor.addChild(root_0,RIGHT_PAREN416_tree);
        }
        pushFollow(FOLLOW_unaryExpression_in_castExpression6725);
        unaryExpression417=unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,unaryExpression417.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    LEFT_PAREN418=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6742);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      LEFT_PAREN418_tree=(Object)adaptor.create(LEFT_PAREN418);
      adaptor.addChild(root_0,LEFT_PAREN418_tree);
    }
    pushFollow(FOLLOW_type_in_castExpression6744);
    type419=type();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,type419.getTree());
    RIGHT_PAREN420=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6746);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      RIGHT_PAREN420_tree=(Object)adaptor.create(RIGHT_PAREN420);
      adaptor.addChild(root_0,RIGHT_PAREN420_tree);
    }
    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6748);
    unaryExpressionNotPlusMinus421=unaryExpressionNotPlusMinus();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,unaryExpressionNotPlusMinus421.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN422=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6757);
if (state.failed) return retval;
if (state.backtracking == 0) {
  LEFT_PAREN422_tree=(Object)adaptor.create(LEFT_PAREN422);
  adaptor.addChild(root_0,LEFT_PAREN422_tree);
}
pushFollow(FOLLOW_expression_in_castExpression6759);
expression423=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression423.getTree());
RIGHT_PAREN424=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6761);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_PAREN424_tree=(Object)adaptor.create(RIGHT_PAREN424);
  adaptor.addChild(root_0,RIGHT_PAREN424_tree);
}
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6763);
unaryExpressionNotPlusMinus425=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus425.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,133,castExpression_StartIndex);
}
}
return retval;
}
