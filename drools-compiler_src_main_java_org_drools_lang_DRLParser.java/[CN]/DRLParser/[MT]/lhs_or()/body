{
  lhs_or_return retval=new lhs_or_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token pipe=null;
  Token LEFT_PAREN119=null;
  Token RIGHT_PAREN121=null;
  or_key_return or=null;
  or_key_return value=null;
  lhs_and_return lhs_and120=null;
  lhs_and_return lhs_and122=null;
  lhs_and_return lhs_and123=null;
  Object pipe_tree=null;
  Object LEFT_PAREN119_tree=null;
  Object RIGHT_PAREN121_tree=null;
  RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
  RewriteRuleSubtreeStream stream_lhs_and=new RewriteRuleSubtreeStream(adaptor,"rule lhs_and");
  Token orToken=null;
  try {
    int alt44=2;
    int LA44_0=input.LA(1);
    if ((LA44_0 == LEFT_PAREN)) {
      int LA44_1=input.LA(2);
      if ((LA44_1 == ID)) {
switch (input.LA(3)) {
case DOT:
case COLON:
case LEFT_SQUARE:
{
            alt44=2;
          }
        break;
case ID:
{
        int LA44_4=input.LA(4);
        if ((synpred1())) {
          alt44=1;
        }
 else         if ((true)) {
          alt44=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("813:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key | DOUBLE_PIPE )=> (value= or_key | pipe= DOUBLE_PIPE ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );",44,4,input);
          throw nvae;
        }
      }
    break;
case LEFT_PAREN:
{
    int LA44_5=input.LA(4);
    if ((synpred1())) {
      alt44=1;
    }
 else     if ((true)) {
      alt44=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("813:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key | DOUBLE_PIPE )=> (value= or_key | pipe= DOUBLE_PIPE ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );",44,5,input);
      throw nvae;
    }
  }
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("813:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key | DOUBLE_PIPE )=> (value= or_key | pipe= DOUBLE_PIPE ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );",44,3,input);
throw nvae;
}
}
 else if ((LA44_1 == LEFT_PAREN)) {
alt44=2;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("813:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key | DOUBLE_PIPE )=> (value= or_key | pipe= DOUBLE_PIPE ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );",44,1,input);
throw nvae;
}
}
 else if ((LA44_0 == ID)) {
alt44=2;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("813:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key | DOUBLE_PIPE )=> (value= or_key | pipe= DOUBLE_PIPE ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );",44,0,input);
throw nvae;
}
switch (alt44) {
case 1:
{
LEFT_PAREN119=(Token)input.LT(1);
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or2048);
if (failed) return retval;
if (backtracking == 0) stream_LEFT_PAREN.add(LEFT_PAREN119);
if (backtracking == 0) {
emit(LEFT_PAREN119,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_or_key_in_lhs_or2058);
or=or_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_or_key.add(or.getTree());
if (backtracking == 0) {
emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
}
int cnt41=0;
loop41: do {
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == ID || LA41_0 == LEFT_PAREN)) {
alt41=1;
}
switch (alt41) {
case 1:
{
pushFollow(FOLLOW_lhs_and_in_lhs_or2066);
lhs_and120=lhs_and();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_lhs_and.add(lhs_and120.getTree());
}
break;
default :
if (cnt41 >= 1) break loop41;
if (backtracking > 0) {
failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(41,input);
throw eee;
}
cnt41++;
}
 while (true);
RIGHT_PAREN121=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or2072);
if (failed) return retval;
if (backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN121);
if (backtracking == 0) {
emit(RIGHT_PAREN121,DroolsEditorType.SYMBOL);
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_OR_PREFIX,((Token)or.start)),root_1);
if (!(stream_lhs_and.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_lhs_and.hasNext()) {
adaptor.addChild(root_1,stream_lhs_and.next());
}
stream_lhs_and.reset();
adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_lhs_and_in_lhs_or2095);
lhs_and122=lhs_and();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_lhs_and.add(lhs_and122.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
adaptor.addChild(root_0,stream_lhs_and.next());
}
}
}
loop43: do {
int alt43=2;
int LA43_0=input.LA(1);
if ((LA43_0 == ID)) {
int LA43_2=input.LA(2);
if (((synpred2() && (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
alt43=1;
}
}
 else if ((LA43_0 == DOUBLE_PIPE)) {
int LA43_3=input.LA(2);
if ((synpred2())) {
alt43=1;
}
}
switch (alt43) {
case 1:
{
int alt42=2;
int LA42_0=input.LA(1);
if ((LA42_0 == ID) && ((validateIdentifierKey(DroolsSoftKeywords.OR)))) {
alt42=1;
}
 else if ((LA42_0 == DOUBLE_PIPE)) {
alt42=2;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("824:28: (value= or_key | pipe= DOUBLE_PIPE )",42,0,input);
throw nvae;
}
switch (alt42) {
case 1:
{
pushFollow(FOLLOW_or_key_in_lhs_or2117);
value=or_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_or_key.add(value.getTree());
if (backtracking == 0) {
orToken=((Token)value.start);
}
}
break;
case 2:
{
pipe=(Token)input.LT(1);
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_lhs_or2124);
if (failed) return retval;
if (backtracking == 0) stream_DOUBLE_PIPE.add(pipe);
if (backtracking == 0) {
orToken=pipe;
emit(pipe,DroolsEditorType.SYMBOL);
}
}
break;
}
if (backtracking == 0) {
emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
}
pushFollow(FOLLOW_lhs_and_in_lhs_or2135);
lhs_and123=lhs_and();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_lhs_and.add(lhs_and123.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_OR_INFIX,orToken),root_1);
adaptor.addChild(root_1,stream_retval.next());
adaptor.addChild(root_1,stream_lhs_and.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
break;
default :
break loop43;
}
}
 while (true);
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
