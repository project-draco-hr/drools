{
  BaseDescr d=null;
  BaseDescr lhsand=null;
  BaseDescr left=null;
  BaseDescr right=null;
  d=null;
  OrDescr or=null;
  try {
    int alt37=2;
    int LA37_0=input.LA(1);
    if ((LA37_0 == LEFT_PAREN)) {
      int LA37_1=input.LA(2);
      if ((LA37_1 == OR)) {
        alt37=1;
      }
 else       if ((LA37_1 == ID || LA37_1 == LEFT_PAREN || LA37_1 == AND || (LA37_1 >= EXISTS && LA37_1 <= FORALL))) {
        alt37=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return d;
        }
        NoViableAltException nvae=new NoViableAltException("712:1: lhs_or returns [BaseDescr d] : ( LEFT_PAREN OR (lhsand= lhs_and )+ RIGHT_PAREN | left= lhs_and ( ( OR | DOUBLE_PIPE ) right= lhs_and )* );",37,1,input);
        throw nvae;
      }
    }
 else     if ((LA37_0 == ID || (LA37_0 >= EXISTS && LA37_0 <= FORALL))) {
      alt37=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return d;
      }
      NoViableAltException nvae=new NoViableAltException("712:1: lhs_or returns [BaseDescr d] : ( LEFT_PAREN OR (lhsand= lhs_and )+ RIGHT_PAREN | left= lhs_and ( ( OR | DOUBLE_PIPE ) right= lhs_and )* );",37,0,input);
      throw nvae;
    }
switch (alt37) {
case 1:
{
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or1765);
        if (failed)         return d;
        match(input,OR,FOLLOW_OR_in_lhs_or1767);
        if (failed)         return d;
        if (backtracking == 0) {
          or=new OrDescr();
          d=or;
          location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
        }
        int cnt35=0;
        loop35:         do {
          int alt35=2;
          int LA35_0=input.LA(1);
          if ((LA35_0 == ID || LA35_0 == LEFT_PAREN || (LA35_0 >= EXISTS && LA35_0 <= FORALL))) {
            alt35=1;
          }
switch (alt35) {
case 1:
{
              pushFollow(FOLLOW_lhs_and_in_lhs_or1778);
              lhsand=lhs_and();
              _fsp--;
              if (failed)               return d;
            }
          break;
default :
        if (cnt35 >= 1)         break loop35;
      if (backtracking > 0) {
        failed=true;
        return d;
      }
    EarlyExitException eee=new EarlyExitException(35,input);
  throw eee;
}
cnt35++;
}
 while (true);
if (backtracking == 0) {
or.addDescr(lhsand);
}
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or1788);
if (failed) return d;
}
break;
case 2:
{
pushFollow(FOLLOW_lhs_and_in_lhs_or1806);
left=lhs_and();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
d=left;
}
loop36: do {
int alt36=2;
int LA36_0=input.LA(1);
if (((LA36_0 >= OR && LA36_0 <= DOUBLE_PIPE))) {
alt36=1;
}
switch (alt36) {
case 1:
{
if ((input.LA(1) >= OR && input.LA(1) <= DOUBLE_PIPE)) {
input.consume();
errorRecovery=false;
failed=false;
}
 else {
if (backtracking > 0) {
  failed=true;
  return d;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
recoverFromMismatchedSet(input,mse,FOLLOW_set_in_lhs_or1814);
throw mse;
}
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
}
pushFollow(FOLLOW_lhs_and_in_lhs_or1830);
right=lhs_and();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (or == null) {
  or=new OrDescr();
  or.addDescr(left);
  d=or;
}
or.addDescr(right);
}
}
break;
default :
break loop36;
}
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
