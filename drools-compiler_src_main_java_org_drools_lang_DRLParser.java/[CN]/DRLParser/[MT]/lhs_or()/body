{
  BaseDescr d=null;
  BaseDescr lhsand=null;
  BaseDescr left=null;
  BaseDescr right=null;
  d=null;
  OrDescr or=null;
  try {
    int alt33=2;
    int LA33_0=input.LA(1);
    if ((LA33_0 == LEFT_PAREN)) {
      int LA33_1=input.LA(2);
      if ((LA33_1 == ID || LA33_1 == LEFT_PAREN || LA33_1 == AND || (LA33_1 >= EXISTS && LA33_1 <= FORALL))) {
        alt33=2;
      }
 else       if ((LA33_1 == OR)) {
        alt33=1;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return d;
        }
        NoViableAltException nvae=new NoViableAltException("728:1: lhs_or returns [BaseDescr d] : ( LEFT_PAREN OR (lhsand= lhs_and )+ RIGHT_PAREN | left= lhs_and ( ( OR | DOUBLE_PIPE ) right= lhs_and )* );",33,1,input);
        throw nvae;
      }
    }
 else     if ((LA33_0 == ID || (LA33_0 >= EXISTS && LA33_0 <= FORALL))) {
      alt33=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return d;
      }
      NoViableAltException nvae=new NoViableAltException("728:1: lhs_or returns [BaseDescr d] : ( LEFT_PAREN OR (lhsand= lhs_and )+ RIGHT_PAREN | left= lhs_and ( ( OR | DOUBLE_PIPE ) right= lhs_and )* );",33,0,input);
      throw nvae;
    }
switch (alt33) {
case 1:
{
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or1711);
        if (failed)         return d;
        match(input,OR,FOLLOW_OR_in_lhs_or1713);
        if (failed)         return d;
        if (backtracking == 0) {
          or=new OrDescr();
          d=or;
          location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
        }
        int cnt31=0;
        loop31:         do {
          int alt31=2;
          int LA31_0=input.LA(1);
          if ((LA31_0 == ID || LA31_0 == LEFT_PAREN || (LA31_0 >= EXISTS && LA31_0 <= FORALL))) {
            alt31=1;
          }
switch (alt31) {
case 1:
{
              pushFollow(FOLLOW_lhs_and_in_lhs_or1726);
              lhsand=lhs_and();
              _fsp--;
              if (failed)               return d;
              if (backtracking == 0) {
                or.addDescr(lhsand);
              }
            }
          break;
default :
        if (cnt31 >= 1)         break loop31;
      if (backtracking > 0) {
        failed=true;
        return d;
      }
    EarlyExitException eee=new EarlyExitException(31,input);
  throw eee;
}
cnt31++;
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or1737);
if (failed) return d;
}
break;
case 2:
{
pushFollow(FOLLOW_lhs_and_in_lhs_or1755);
left=lhs_and();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
d=left;
}
loop32: do {
int alt32=2;
int LA32_0=input.LA(1);
if (((LA32_0 >= OR && LA32_0 <= DOUBLE_PIPE))) {
alt32=1;
}
switch (alt32) {
case 1:
{
if ((input.LA(1) >= OR && input.LA(1) <= DOUBLE_PIPE)) {
input.consume();
errorRecovery=false;
failed=false;
}
 else {
if (backtracking > 0) {
  failed=true;
  return d;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
recoverFromMismatchedSet(input,mse,FOLLOW_set_in_lhs_or1763);
throw mse;
}
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
}
pushFollow(FOLLOW_lhs_and_in_lhs_or1779);
right=lhs_and();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (or == null) {
  or=new OrDescr();
  or.addDescr(left);
  d=or;
}
or.addDescr(right);
}
}
break;
default :
break loop32;
}
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
