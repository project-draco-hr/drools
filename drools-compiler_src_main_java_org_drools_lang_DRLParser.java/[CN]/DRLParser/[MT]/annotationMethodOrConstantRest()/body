{
  DRLParser.annotationMethodOrConstantRest_return retval=new DRLParser.annotationMethodOrConstantRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.annotationMethodRest_return annotationMethodRest878=null;
  DRLParser.annotationConstantRest_return annotationConstantRest879=null;
  try {
    int alt266=2;
    int LA266_0=input.LA(1);
    if ((LA266_0 == ID)) {
      int LA266_1=input.LA(2);
      if ((LA266_1 == LEFT_PAREN)) {
        alt266=1;
      }
 else       if ((LA266_1 == SEMICOLON || LA266_1 == EQUALS_ASSIGN || LA266_1 == COMMA || LA266_1 == LEFT_SQUARE)) {
        alt266=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",266,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",266,0,input);
      throw nvae;
    }
switch (alt266) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest10181);
        annotationMethodRest878=annotationMethodRest();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,annotationMethodRest878.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest10188);
    annotationConstantRest879=annotationConstantRest();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,annotationConstantRest879.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
