{
  DRLParser.boolean_key_return retval=new DRLParser.boolean_key_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  Object id_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
{
      if (!(((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"boolean_key","(helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))");
      }
      id=(Token)match(input,ID,FOLLOW_ID_in_boolean_key11690);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(id);
      if (state.backtracking == 0) {
        helper.emit(id,DroolsEditorType.KEYWORD);
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,(Object)adaptor.create(VK_PRIMITIVE_TYPE,id));
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
