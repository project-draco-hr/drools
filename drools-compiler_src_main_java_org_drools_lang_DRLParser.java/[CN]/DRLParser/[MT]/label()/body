{
  label_return retval=new label_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token value=null;
  Token COLON207=null;
  Object value_tree=null;
  Object COLON207_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
{
      value=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_label3038);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(value);
      COLON207=(Token)input.LT(1);
      match(input,COLON,FOLLOW_COLON_in_label3040);
      if (failed)       return retval;
      if (backtracking == 0)       stream_COLON.add(COLON207);
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,adaptor.create(VT_LABEL,value));
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
