{
  lhs_eval_return retval=new lhs_eval_return();
  retval.start=input.LT(1);
  Object root_0=null;
  eval_key_return ev=null;
  paren_chunk_return pc=null;
  RewriteRuleSubtreeStream stream_eval_key=new RewriteRuleSubtreeStream(adaptor,"rule eval_key");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      pushFollow(FOLLOW_eval_key_in_lhs_eval2608);
      ev=eval_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_eval_key.add(ev.getTree());
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_INSIDE_EVAL);
      }
      pushFollow(FOLLOW_paren_chunk_in_lhs_eval2617);
      pc=paren_chunk();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_paren_chunk.add(pc.getTree());
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
      }
      if (backtracking == 0) {
        String body=safeSubstring(input.toString(pc.start,pc.stop),1,input.toString(pc.start,pc.stop).length() - 1);
        checkTrailingSemicolon(body,((Token)ev.start));
      }
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(stream_eval_key.nextNode(),root_1);
            adaptor.addChild(root_1,stream_paren_chunk.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
