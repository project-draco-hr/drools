{
  DRLParser.arrayInitializer_return retval=new DRLParser.arrayInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY632=null;
  Token COMMA634=null;
  Token COMMA636=null;
  Token RIGHT_CURLY637=null;
  DRLParser.variableInitializer_return variableInitializer633=null;
  DRLParser.variableInitializer_return variableInitializer635=null;
  Object LEFT_CURLY632_tree=null;
  Object COMMA634_tree=null;
  Object COMMA636_tree=null;
  Object RIGHT_CURLY637_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY632=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer8278);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY632_tree=(Object)adaptor.create(LEFT_CURLY632);
        adaptor.addChild(root_0,LEFT_CURLY632_tree);
      }
      int alt195=2;
      int LA195_0=input.LA(1);
      if ((LA195_0 == ID || LA195_0 == STRING || (LA195_0 >= BOOL && LA195_0 <= LEFT_PAREN) || LA195_0 == DECIMAL || LA195_0 == LESS || LA195_0 == LEFT_SQUARE || (LA195_0 >= NULL && LA195_0 <= FLOAT) || LA195_0 == LEFT_CURLY || (LA195_0 >= INCR && LA195_0 <= NEGATION))) {
        alt195=1;
      }
switch (alt195) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer8281);
          variableInitializer633=variableInitializer();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,variableInitializer633.getTree());
          loop193:           do {
            int alt193=2;
            int LA193_0=input.LA(1);
            if ((LA193_0 == COMMA)) {
              int LA193_1=input.LA(2);
              if ((LA193_1 == ID || LA193_1 == STRING || (LA193_1 >= BOOL && LA193_1 <= LEFT_PAREN) || LA193_1 == DECIMAL || LA193_1 == LESS || LA193_1 == LEFT_SQUARE || (LA193_1 >= NULL && LA193_1 <= FLOAT) || LA193_1 == LEFT_CURLY || (LA193_1 >= INCR && LA193_1 <= NEGATION))) {
                alt193=1;
              }
            }
switch (alt193) {
case 1:
{
                COMMA634=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer8284);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  COMMA634_tree=(Object)adaptor.create(COMMA634);
                  adaptor.addChild(root_0,COMMA634_tree);
                }
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer8286);
                variableInitializer635=variableInitializer();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 adaptor.addChild(root_0,variableInitializer635.getTree());
              }
            break;
default :
          break loop193;
      }
    }
 while (true);
    int alt194=2;
    int LA194_0=input.LA(1);
    if ((LA194_0 == COMMA)) {
      alt194=1;
    }
switch (alt194) {
case 1:
{
        COMMA636=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer8291);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          COMMA636_tree=(Object)adaptor.create(COMMA636);
          adaptor.addChild(root_0,COMMA636_tree);
        }
      }
    break;
}
}
break;
}
RIGHT_CURLY637=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer8298);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY637_tree=(Object)adaptor.create(RIGHT_CURLY637);
adaptor.addChild(root_0,RIGHT_CURLY637_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
