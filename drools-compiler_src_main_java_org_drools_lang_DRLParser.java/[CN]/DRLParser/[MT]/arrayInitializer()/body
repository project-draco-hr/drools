{
  DRLParser.arrayInitializer_return retval=new DRLParser.arrayInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY474=null;
  Token COMMA476=null;
  Token COMMA478=null;
  Token RIGHT_CURLY479=null;
  DRLParser.variableInitializer_return variableInitializer475=null;
  DRLParser.variableInitializer_return variableInitializer477=null;
  Object LEFT_CURLY474_tree=null;
  Object COMMA476_tree=null;
  Object COMMA478_tree=null;
  Object RIGHT_CURLY479_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY474=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer6917);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY474_tree=(Object)adaptor.create(LEFT_CURLY474);
        adaptor.addChild(root_0,LEFT_CURLY474_tree);
      }
      int alt157=2;
      int LA157_0=input.LA(1);
      if ((LA157_0 == ID || LA157_0 == STRING || (LA157_0 >= BOOL && LA157_0 <= LEFT_PAREN) || LA157_0 == LESS || (LA157_0 >= NULL && LA157_0 <= LEFT_SQUARE) || LA157_0 == LEFT_CURLY || (LA157_0 >= INCR && LA157_0 <= NEGATION))) {
        alt157=1;
      }
switch (alt157) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6920);
          variableInitializer475=variableInitializer();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,variableInitializer475.getTree());
          loop155:           do {
            int alt155=2;
            int LA155_0=input.LA(1);
            if ((LA155_0 == COMMA)) {
              int LA155_1=input.LA(2);
              if ((LA155_1 == ID || LA155_1 == STRING || (LA155_1 >= BOOL && LA155_1 <= LEFT_PAREN) || LA155_1 == LESS || (LA155_1 >= NULL && LA155_1 <= LEFT_SQUARE) || LA155_1 == LEFT_CURLY || (LA155_1 >= INCR && LA155_1 <= NEGATION))) {
                alt155=1;
              }
            }
switch (alt155) {
case 1:
{
                COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6923);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  COMMA476_tree=(Object)adaptor.create(COMMA476);
                  adaptor.addChild(root_0,COMMA476_tree);
                }
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6925);
                variableInitializer477=variableInitializer();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 adaptor.addChild(root_0,variableInitializer477.getTree());
              }
            break;
default :
          break loop155;
      }
    }
 while (true);
    int alt156=2;
    int LA156_0=input.LA(1);
    if ((LA156_0 == COMMA)) {
      alt156=1;
    }
switch (alt156) {
case 1:
{
        COMMA478=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6930);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          COMMA478_tree=(Object)adaptor.create(COMMA478);
          adaptor.addChild(root_0,COMMA478_tree);
        }
      }
    break;
}
}
break;
}
RIGHT_CURLY479=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer6937);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY479_tree=(Object)adaptor.create(RIGHT_CURLY479);
adaptor.addChild(root_0,RIGHT_CURLY479_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
