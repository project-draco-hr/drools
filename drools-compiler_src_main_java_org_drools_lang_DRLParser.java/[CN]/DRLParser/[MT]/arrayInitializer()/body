{
  DRLParser.arrayInitializer_return retval=new DRLParser.arrayInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY504=null;
  Token COMMA506=null;
  Token COMMA508=null;
  Token RIGHT_CURLY509=null;
  DRLParser.variableInitializer_return variableInitializer505=null;
  DRLParser.variableInitializer_return variableInitializer507=null;
  Object LEFT_CURLY504_tree=null;
  Object COMMA506_tree=null;
  Object COMMA508_tree=null;
  Object RIGHT_CURLY509_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY504=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer7457);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY504_tree=(Object)adaptor.create(LEFT_CURLY504);
        adaptor.addChild(root_0,LEFT_CURLY504_tree);
      }
      int alt164=2;
      int LA164_0=input.LA(1);
      if ((LA164_0 == ID || LA164_0 == STRING || (LA164_0 >= BOOL && LA164_0 <= LEFT_PAREN) || LA164_0 == DECIMAL || LA164_0 == LESS || LA164_0 == LEFT_SQUARE || (LA164_0 >= NULL && LA164_0 <= FLOAT) || LA164_0 == LEFT_CURLY || (LA164_0 >= INCR && LA164_0 <= NEGATION))) {
        alt164=1;
      }
switch (alt164) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7460);
          variableInitializer505=variableInitializer();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,variableInitializer505.getTree());
          loop162:           do {
            int alt162=2;
            int LA162_0=input.LA(1);
            if ((LA162_0 == COMMA)) {
              int LA162_1=input.LA(2);
              if ((LA162_1 == ID || LA162_1 == STRING || (LA162_1 >= BOOL && LA162_1 <= LEFT_PAREN) || LA162_1 == DECIMAL || LA162_1 == LESS || LA162_1 == LEFT_SQUARE || (LA162_1 >= NULL && LA162_1 <= FLOAT) || LA162_1 == LEFT_CURLY || (LA162_1 >= INCR && LA162_1 <= NEGATION))) {
                alt162=1;
              }
            }
switch (alt162) {
case 1:
{
                COMMA506=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7463);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  COMMA506_tree=(Object)adaptor.create(COMMA506);
                  adaptor.addChild(root_0,COMMA506_tree);
                }
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7465);
                variableInitializer507=variableInitializer();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 adaptor.addChild(root_0,variableInitializer507.getTree());
              }
            break;
default :
          break loop162;
      }
    }
 while (true);
    int alt163=2;
    int LA163_0=input.LA(1);
    if ((LA163_0 == COMMA)) {
      alt163=1;
    }
switch (alt163) {
case 1:
{
        COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7470);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          COMMA508_tree=(Object)adaptor.create(COMMA508);
          adaptor.addChild(root_0,COMMA508_tree);
        }
      }
    break;
}
}
break;
}
RIGHT_CURLY509=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer7477);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY509_tree=(Object)adaptor.create(RIGHT_CURLY509);
adaptor.addChild(root_0,RIGHT_CURLY509_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
