{
  DRLParser.literal_return retval=new DRLParser.literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING315=null;
  Token DECIMAL316=null;
  Token HEX317=null;
  Token FLOAT318=null;
  Token BOOL319=null;
  Token NULL320=null;
  Object STRING315_tree=null;
  Object DECIMAL316_tree=null;
  Object HEX317_tree=null;
  Object FLOAT318_tree=null;
  Object BOOL319_tree=null;
  Object NULL320_tree=null;
  try {
    int alt103=6;
switch (input.LA(1)) {
case STRING:
{
        alt103=1;
      }
    break;
case DECIMAL:
{
    alt103=2;
  }
break;
case HEX:
{
alt103=3;
}
break;
case FLOAT:
{
alt103=4;
}
break;
case BOOL:
{
alt103=5;
}
break;
case NULL:
{
alt103=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",103,0,input);
throw nvae;
}
switch (alt103) {
case 1:
{
root_0=(Object)adaptor.nil();
STRING315=(Token)match(input,STRING,FOLLOW_STRING_in_literal5585);
if (state.failed) return retval;
if (state.backtracking == 0) {
STRING315_tree=(Object)adaptor.create(STRING315);
adaptor.addChild(root_0,STRING315_tree);
}
if (state.backtracking == 0) {
helper.emit(STRING315,DroolsEditorType.STRING_CONST);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
DECIMAL316=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5608);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECIMAL316_tree=(Object)adaptor.create(DECIMAL316);
adaptor.addChild(root_0,DECIMAL316_tree);
}
if (state.backtracking == 0) {
helper.emit(DECIMAL316,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
HEX317=(Token)match(input,HEX,FOLLOW_HEX_in_literal5617);
if (state.failed) return retval;
if (state.backtracking == 0) {
HEX317_tree=(Object)adaptor.create(HEX317);
adaptor.addChild(root_0,HEX317_tree);
}
if (state.backtracking == 0) {
helper.emit(HEX317,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
FLOAT318=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5630);
if (state.failed) return retval;
if (state.backtracking == 0) {
FLOAT318_tree=(Object)adaptor.create(FLOAT318);
adaptor.addChild(root_0,FLOAT318_tree);
}
if (state.backtracking == 0) {
helper.emit(FLOAT318,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
BOOL319=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5641);
if (state.failed) return retval;
if (state.backtracking == 0) {
BOOL319_tree=(Object)adaptor.create(BOOL319);
adaptor.addChild(root_0,BOOL319_tree);
}
if (state.backtracking == 0) {
helper.emit(BOOL319,DroolsEditorType.BOOLEAN_CONST);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
NULL320=(Token)match(input,NULL,FOLLOW_NULL_in_literal5666);
if (state.failed) return retval;
if (state.backtracking == 0) {
NULL320_tree=(Object)adaptor.create(NULL320);
adaptor.addChild(root_0,NULL320_tree);
}
if (state.backtracking == 0) {
helper.emit(NULL320,DroolsEditorType.NULL_CONST);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
