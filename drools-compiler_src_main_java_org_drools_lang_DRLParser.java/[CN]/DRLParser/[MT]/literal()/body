{
  DRLParser.literal_return retval=new DRLParser.literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING300=null;
  Token DECIMAL301=null;
  Token HEX302=null;
  Token FLOAT303=null;
  Token BOOL304=null;
  Token NULL305=null;
  Object STRING300_tree=null;
  Object DECIMAL301_tree=null;
  Object HEX302_tree=null;
  Object FLOAT303_tree=null;
  Object BOOL304_tree=null;
  Object NULL305_tree=null;
  try {
    int alt101=6;
switch (input.LA(1)) {
case STRING:
{
        alt101=1;
      }
    break;
case DECIMAL:
{
    alt101=2;
  }
break;
case HEX:
{
alt101=3;
}
break;
case FLOAT:
{
alt101=4;
}
break;
case BOOL:
{
alt101=5;
}
break;
case NULL:
{
alt101=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",101,0,input);
throw nvae;
}
switch (alt101) {
case 1:
{
root_0=(Object)adaptor.nil();
STRING300=(Token)match(input,STRING,FOLLOW_STRING_in_literal5479);
if (state.failed) return retval;
if (state.backtracking == 0) {
STRING300_tree=(Object)adaptor.create(STRING300);
adaptor.addChild(root_0,STRING300_tree);
}
if (state.backtracking == 0) {
helper.emit(STRING300,DroolsEditorType.STRING_CONST);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
DECIMAL301=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5502);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECIMAL301_tree=(Object)adaptor.create(DECIMAL301);
adaptor.addChild(root_0,DECIMAL301_tree);
}
if (state.backtracking == 0) {
helper.emit(DECIMAL301,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
HEX302=(Token)match(input,HEX,FOLLOW_HEX_in_literal5511);
if (state.failed) return retval;
if (state.backtracking == 0) {
HEX302_tree=(Object)adaptor.create(HEX302);
adaptor.addChild(root_0,HEX302_tree);
}
if (state.backtracking == 0) {
helper.emit(HEX302,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
FLOAT303=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5524);
if (state.failed) return retval;
if (state.backtracking == 0) {
FLOAT303_tree=(Object)adaptor.create(FLOAT303);
adaptor.addChild(root_0,FLOAT303_tree);
}
if (state.backtracking == 0) {
helper.emit(FLOAT303,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
BOOL304=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5535);
if (state.failed) return retval;
if (state.backtracking == 0) {
BOOL304_tree=(Object)adaptor.create(BOOL304);
adaptor.addChild(root_0,BOOL304_tree);
}
if (state.backtracking == 0) {
helper.emit(BOOL304,DroolsEditorType.BOOLEAN_CONST);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
NULL305=(Token)match(input,NULL,FOLLOW_NULL_in_literal5560);
if (state.failed) return retval;
if (state.backtracking == 0) {
NULL305_tree=(Object)adaptor.create(NULL305);
adaptor.addChild(root_0,NULL305_tree);
}
if (state.backtracking == 0) {
helper.emit(NULL305,DroolsEditorType.NULL_CONST);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
