{
  DRLParser.literal_return retval=new DRLParser.literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING281=null;
  Token DECIMAL282=null;
  Token HEX283=null;
  Token FLOAT284=null;
  Token BOOL285=null;
  Token NULL286=null;
  Object STRING281_tree=null;
  Object DECIMAL282_tree=null;
  Object HEX283_tree=null;
  Object FLOAT284_tree=null;
  Object BOOL285_tree=null;
  Object NULL286_tree=null;
  try {
    int alt95=6;
switch (input.LA(1)) {
case STRING:
{
        alt95=1;
      }
    break;
case DECIMAL:
{
    alt95=2;
  }
break;
case HEX:
{
alt95=3;
}
break;
case FLOAT:
{
alt95=4;
}
break;
case BOOL:
{
alt95=5;
}
break;
case NULL:
{
alt95=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",95,0,input);
throw nvae;
}
switch (alt95) {
case 1:
{
root_0=(Object)adaptor.nil();
STRING281=(Token)match(input,STRING,FOLLOW_STRING_in_literal5097);
if (state.failed) return retval;
if (state.backtracking == 0) {
STRING281_tree=(Object)adaptor.create(STRING281);
adaptor.addChild(root_0,STRING281_tree);
}
if (state.backtracking == 0) {
helper.emit(STRING281,DroolsEditorType.STRING_CONST);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
DECIMAL282=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5120);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECIMAL282_tree=(Object)adaptor.create(DECIMAL282);
adaptor.addChild(root_0,DECIMAL282_tree);
}
if (state.backtracking == 0) {
helper.emit(DECIMAL282,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
HEX283=(Token)match(input,HEX,FOLLOW_HEX_in_literal5129);
if (state.failed) return retval;
if (state.backtracking == 0) {
HEX283_tree=(Object)adaptor.create(HEX283);
adaptor.addChild(root_0,HEX283_tree);
}
if (state.backtracking == 0) {
helper.emit(HEX283,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
FLOAT284=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5142);
if (state.failed) return retval;
if (state.backtracking == 0) {
FLOAT284_tree=(Object)adaptor.create(FLOAT284);
adaptor.addChild(root_0,FLOAT284_tree);
}
if (state.backtracking == 0) {
helper.emit(FLOAT284,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
BOOL285=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5153);
if (state.failed) return retval;
if (state.backtracking == 0) {
BOOL285_tree=(Object)adaptor.create(BOOL285);
adaptor.addChild(root_0,BOOL285_tree);
}
if (state.backtracking == 0) {
helper.emit(BOOL285,DroolsEditorType.BOOLEAN_CONST);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
NULL286=(Token)match(input,NULL,FOLLOW_NULL_in_literal5178);
if (state.failed) return retval;
if (state.backtracking == 0) {
NULL286_tree=(Object)adaptor.create(NULL286);
adaptor.addChild(root_0,NULL286_tree);
}
if (state.backtracking == 0) {
helper.emit(NULL286,DroolsEditorType.NULL_CONST);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
