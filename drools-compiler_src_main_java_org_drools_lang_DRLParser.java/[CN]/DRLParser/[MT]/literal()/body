{
  DRLParser.literal_return retval=new DRLParser.literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING314=null;
  Token DECIMAL315=null;
  Token HEX316=null;
  Token FLOAT317=null;
  Token BOOL318=null;
  Token NULL319=null;
  Object STRING314_tree=null;
  Object DECIMAL315_tree=null;
  Object HEX316_tree=null;
  Object FLOAT317_tree=null;
  Object BOOL318_tree=null;
  Object NULL319_tree=null;
  try {
    int alt103=6;
switch (input.LA(1)) {
case STRING:
{
        alt103=1;
      }
    break;
case DECIMAL:
{
    alt103=2;
  }
break;
case HEX:
{
alt103=3;
}
break;
case FLOAT:
{
alt103=4;
}
break;
case BOOL:
{
alt103=5;
}
break;
case NULL:
{
alt103=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",103,0,input);
throw nvae;
}
switch (alt103) {
case 1:
{
root_0=(Object)adaptor.nil();
STRING314=(Token)match(input,STRING,FOLLOW_STRING_in_literal5645);
if (state.failed) return retval;
if (state.backtracking == 0) {
STRING314_tree=(Object)adaptor.create(STRING314);
adaptor.addChild(root_0,STRING314_tree);
}
if (state.backtracking == 0) {
helper.emit(STRING314,DroolsEditorType.STRING_CONST);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
DECIMAL315=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5668);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECIMAL315_tree=(Object)adaptor.create(DECIMAL315);
adaptor.addChild(root_0,DECIMAL315_tree);
}
if (state.backtracking == 0) {
helper.emit(DECIMAL315,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
HEX316=(Token)match(input,HEX,FOLLOW_HEX_in_literal5677);
if (state.failed) return retval;
if (state.backtracking == 0) {
HEX316_tree=(Object)adaptor.create(HEX316);
adaptor.addChild(root_0,HEX316_tree);
}
if (state.backtracking == 0) {
helper.emit(HEX316,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
FLOAT317=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5690);
if (state.failed) return retval;
if (state.backtracking == 0) {
FLOAT317_tree=(Object)adaptor.create(FLOAT317);
adaptor.addChild(root_0,FLOAT317_tree);
}
if (state.backtracking == 0) {
helper.emit(FLOAT317,DroolsEditorType.NUMERIC_CONST);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
BOOL318=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5701);
if (state.failed) return retval;
if (state.backtracking == 0) {
BOOL318_tree=(Object)adaptor.create(BOOL318);
adaptor.addChild(root_0,BOOL318_tree);
}
if (state.backtracking == 0) {
helper.emit(BOOL318,DroolsEditorType.BOOLEAN_CONST);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
NULL319=(Token)match(input,NULL,FOLLOW_NULL_in_literal5726);
if (state.failed) return retval;
if (state.backtracking == 0) {
NULL319_tree=(Object)adaptor.create(NULL319);
adaptor.addChild(root_0,NULL319_tree);
}
if (state.backtracking == 0) {
helper.emit(NULL319,DroolsEditorType.NULL_CONST);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
