{
  DRLParser.interfaceMethodOrFieldRest_return retval=new DRLParser.interfaceMethodOrFieldRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON794=null;
  DRLParser.constantDeclaratorsRest_return constantDeclaratorsRest793=null;
  DRLParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest795=null;
  Object SEMICOLON794_tree=null;
  try {
    int alt236=2;
    int LA236_0=input.LA(1);
    if ((LA236_0 == EQUALS || LA236_0 == LEFT_SQUARE)) {
      alt236=1;
    }
 else     if ((LA236_0 == LEFT_PAREN)) {
      alt236=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",236,0,input);
      throw nvae;
    }
switch (alt236) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest9538);
        constantDeclaratorsRest793=constantDeclaratorsRest();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,constantDeclaratorsRest793.getTree());
        SEMICOLON794=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceMethodOrFieldRest9540);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          SEMICOLON794_tree=(Object)adaptor.create(SEMICOLON794);
          adaptor.addChild(root_0,SEMICOLON794_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest9545);
    interfaceMethodDeclaratorRest795=interfaceMethodDeclaratorRest();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,interfaceMethodDeclaratorRest795.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
