{
  DRLParser.accessor_path_return retval=new DRLParser.accessor_path_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT298=null;
  DRLParser.accessor_element_return accessor_element297=null;
  DRLParser.accessor_element_return accessor_element299=null;
  Object DOT298_tree=null;
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleSubtreeStream stream_accessor_element=new RewriteRuleSubtreeStream(adaptor,"rule accessor_element");
  try {
{
      pushFollow(FOLLOW_accessor_element_in_accessor_path5193);
      accessor_element297=accessor_element();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_accessor_element.add(accessor_element297.getTree());
      loop94:       do {
        int alt94=2;
        int LA94_0=input.LA(1);
        if ((LA94_0 == DOT)) {
          alt94=1;
        }
switch (alt94) {
case 1:
{
            DOT298=(Token)match(input,DOT,FOLLOW_DOT_in_accessor_path5197);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_DOT.add(DOT298);
            if (state.backtracking == 0) {
              helper.emit(DOT298,DroolsEditorType.IDENTIFIER);
            }
            pushFollow(FOLLOW_accessor_element_in_accessor_path5201);
            accessor_element299=accessor_element();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_accessor_element.add(accessor_element299.getTree());
          }
        break;
default :
      break loop94;
  }
}
 while (true);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_PATH,"VT_ACCESSOR_PATH"),root_1);
      if (!(stream_accessor_element.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_accessor_element.hasNext()) {
        adaptor.addChild(root_1,stream_accessor_element.nextTree());
      }
      stream_accessor_element.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
