{
  accessor_path_return retval=new accessor_path_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT287=null;
  accessor_element_return accessor_element286=null;
  accessor_element_return accessor_element288=null;
  Object DOT287_tree=null;
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleSubtreeStream stream_accessor_element=new RewriteRuleSubtreeStream(adaptor,"rule accessor_element");
  try {
{
      pushFollow(FOLLOW_accessor_element_in_accessor_path4610);
      accessor_element286=accessor_element();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_accessor_element.add(accessor_element286.getTree());
      loop97:       do {
        int alt97=2;
        int LA97_0=input.LA(1);
        if ((LA97_0 == DOT)) {
          alt97=1;
        }
switch (alt97) {
case 1:
{
            DOT287=(Token)input.LT(1);
            match(input,DOT,FOLLOW_DOT_in_accessor_path4614);
            if (failed)             return retval;
            if (backtracking == 0)             stream_DOT.add(DOT287);
            if (backtracking == 0) {
              emit(DOT287,DroolsEditorType.IDENTIFIER);
            }
            pushFollow(FOLLOW_accessor_element_in_accessor_path4618);
            accessor_element288=accessor_element();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_accessor_element.add(accessor_element288.getTree());
          }
        break;
default :
      break loop97;
  }
}
 while (true);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_ACCESSOR_PATH,"VT_ACCESSOR_PATH"),root_1);
      if (!(stream_accessor_element.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_accessor_element.hasNext()) {
        adaptor.addChild(root_1,stream_accessor_element.next());
      }
      stream_accessor_element.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
