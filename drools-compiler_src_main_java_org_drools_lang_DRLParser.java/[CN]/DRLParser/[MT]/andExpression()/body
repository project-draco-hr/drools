{
  DRLParser.andExpression_return retval=new DRLParser.andExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AMPER345=null;
  DRLParser.equalityExpression_return equalityExpression344=null;
  DRLParser.equalityExpression_return equalityExpression346=null;
  Object AMPER345_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_equalityExpression_in_andExpression5757);
      equalityExpression344=equalityExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,equalityExpression344.getTree());
      loop120:       do {
        int alt120=2;
        int LA120_0=input.LA(1);
        if ((LA120_0 == AMPER)) {
          alt120=1;
        }
switch (alt120) {
case 1:
{
            AMPER345=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression5761);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              AMPER345_tree=(Object)adaptor.create(AMPER345);
              adaptor.addChild(root_0,AMPER345_tree);
            }
            pushFollow(FOLLOW_equalityExpression_in_andExpression5763);
            equalityExpression346=equalityExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,equalityExpression346.getTree());
          }
        break;
default :
      break loop120;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
