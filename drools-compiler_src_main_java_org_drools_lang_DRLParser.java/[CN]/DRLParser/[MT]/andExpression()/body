{
  DRLParser.andExpression_return retval=new DRLParser.andExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AMPER375=null;
  DRLParser.equalityExpression_return equalityExpression374=null;
  DRLParser.equalityExpression_return equalityExpression376=null;
  Object AMPER375_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_equalityExpression_in_andExpression6276);
      equalityExpression374=equalityExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,equalityExpression374.getTree());
      loop127:       do {
        int alt127=2;
        int LA127_0=input.LA(1);
        if ((LA127_0 == AMPER)) {
          alt127=1;
        }
switch (alt127) {
case 1:
{
            AMPER375=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression6280);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              AMPER375_tree=(Object)adaptor.create(AMPER375);
              adaptor.addChild(root_0,AMPER375_tree);
            }
            pushFollow(FOLLOW_equalityExpression_in_andExpression6282);
            equalityExpression376=equalityExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,equalityExpression376.getTree());
          }
        break;
default :
      break loop127;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
