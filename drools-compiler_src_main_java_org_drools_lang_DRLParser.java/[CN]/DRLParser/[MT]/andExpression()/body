{
  DRLParser.andExpression_return retval=new DRLParser.andExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AMPER488=null;
  DRLParser.equalityExpression_return equalityExpression487=null;
  DRLParser.equalityExpression_return equalityExpression489=null;
  Object AMPER488_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_equalityExpression_in_andExpression6979);
      equalityExpression487=equalityExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,equalityExpression487.getTree());
      loop156:       do {
        int alt156=2;
        int LA156_0=input.LA(1);
        if ((LA156_0 == AMPER)) {
          alt156=1;
        }
switch (alt156) {
case 1:
{
            AMPER488=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression6983);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              AMPER488_tree=(Object)adaptor.create(AMPER488);
              adaptor.addChild(root_0,AMPER488_tree);
            }
            pushFollow(FOLLOW_equalityExpression_in_andExpression6985);
            equalityExpression489=equalityExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,equalityExpression489.getTree());
          }
        break;
default :
      break loop156;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
