{
  DRLParser.andExpression_return retval=new DRLParser.andExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AMPER503=null;
  DRLParser.equalityExpression_return equalityExpression502=null;
  DRLParser.equalityExpression_return equalityExpression504=null;
  Object AMPER503_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_equalityExpression_in_andExpression7082);
      equalityExpression502=equalityExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,equalityExpression502.getTree());
      loop158:       do {
        int alt158=2;
        int LA158_0=input.LA(1);
        if ((LA158_0 == AMPER)) {
          alt158=1;
        }
switch (alt158) {
case 1:
{
            AMPER503=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression7086);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              AMPER503_tree=(Object)adaptor.create(AMPER503);
              adaptor.addChild(root_0,AMPER503_tree);
            }
            pushFollow(FOLLOW_equalityExpression_in_andExpression7088);
            equalityExpression504=equalityExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,equalityExpression504.getTree());
          }
        break;
default :
      break loop158;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
