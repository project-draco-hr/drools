{
  EnumLiteralDescrBuilder literal=null;
  String lit=null;
  try {
    Token enumLit=match(input,DRLLexer.ID,null,null,DroolsEditorType.IDENTIFIER);
    lit=enumLit.getText();
    if (state.failed)     return;
  }
 catch (  RecognitionException re) {
    reportError(re);
  }
  try {
    literal=helper.start(declare,EnumLiteralDescrBuilder.class,lit);
    if (input.LA(1) == DRLLexer.LEFT_PAREN) {
      match(input,DRLLexer.LEFT_PAREN,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return;
      boolean more;
      do {
        int first=input.index();
        exprParser.conditionalExpression();
        if (state.failed)         return;
        if (state.backtracking == 0 && input.index() > first) {
          String arg=input.toString(first,input.LT(-1).getTokenIndex());
          literal.constructorArg(arg);
        }
        more=input.LA(1) == DRLLexer.COMMA;
        if (more) {
          match(input,DRLLexer.COMMA,null,null,DroolsEditorType.SYMBOL);
        }
      }
 while (more);
      match(input,DRLLexer.RIGHT_PAREN,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return;
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
  }
 finally {
    helper.end(FieldDescrBuilder.class,literal);
  }
}
