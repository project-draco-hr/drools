{
  DRLParser.typeArguments_return retval=new DRLParser.typeArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS339=null;
  Token COMMA341=null;
  Token GREATER343=null;
  DRLParser.typeArgument_return typeArgument340=null;
  DRLParser.typeArgument_return typeArgument342=null;
  Object LESS339_tree=null;
  Object COMMA341_tree=null;
  Object GREATER343_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS339=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5971);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS339_tree=(Object)adaptor.create(LESS339);
        adaptor.addChild(root_0,LESS339_tree);
      }
      pushFollow(FOLLOW_typeArgument_in_typeArguments5973);
      typeArgument340=typeArgument();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeArgument340.getTree());
      loop114:       do {
        int alt114=2;
        int LA114_0=input.LA(1);
        if ((LA114_0 == COMMA)) {
          alt114=1;
        }
switch (alt114) {
case 1:
{
            COMMA341=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5976);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA341_tree=(Object)adaptor.create(COMMA341);
              adaptor.addChild(root_0,COMMA341_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5978);
            typeArgument342=typeArgument();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,typeArgument342.getTree());
          }
        break;
default :
      break loop114;
  }
}
 while (true);
GREATER343=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5982);
if (state.failed) return retval;
if (state.backtracking == 0) {
  GREATER343_tree=(Object)adaptor.create(GREATER343);
  adaptor.addChild(root_0,GREATER343_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
