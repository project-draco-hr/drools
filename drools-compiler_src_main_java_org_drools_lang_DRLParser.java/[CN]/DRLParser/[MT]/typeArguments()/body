{
  DRLParser.typeArguments_return retval=new DRLParser.typeArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS304=null;
  Token COMMA306=null;
  Token GREATER308=null;
  DRLParser.typeArgument_return typeArgument305=null;
  DRLParser.typeArgument_return typeArgument307=null;
  Object LESS304_tree=null;
  Object COMMA306_tree=null;
  Object GREATER308_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS304=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5397);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS304_tree=(Object)adaptor.create(LESS304);
        adaptor.addChild(root_0,LESS304_tree);
      }
      pushFollow(FOLLOW_typeArgument_in_typeArguments5399);
      typeArgument305=typeArgument();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeArgument305.getTree());
      loop105:       do {
        int alt105=2;
        int LA105_0=input.LA(1);
        if ((LA105_0 == COMMA)) {
          alt105=1;
        }
switch (alt105) {
case 1:
{
            COMMA306=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5402);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA306_tree=(Object)adaptor.create(COMMA306);
              adaptor.addChild(root_0,COMMA306_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5404);
            typeArgument307=typeArgument();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,typeArgument307.getTree());
          }
        break;
default :
      break loop105;
  }
}
 while (true);
GREATER308=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5408);
if (state.failed) return retval;
if (state.backtracking == 0) {
  GREATER308_tree=(Object)adaptor.create(GREATER308);
  adaptor.addChild(root_0,GREATER308_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
