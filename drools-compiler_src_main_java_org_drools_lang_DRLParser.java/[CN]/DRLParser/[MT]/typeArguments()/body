{
  DRLParser.typeArguments_return retval=new DRLParser.typeArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS334=null;
  Token COMMA336=null;
  Token GREATER338=null;
  DRLParser.typeArgument_return typeArgument335=null;
  DRLParser.typeArgument_return typeArgument337=null;
  Object LESS334_tree=null;
  Object COMMA336_tree=null;
  Object GREATER338_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS334=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5893);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS334_tree=(Object)adaptor.create(LESS334);
        adaptor.addChild(root_0,LESS334_tree);
      }
      pushFollow(FOLLOW_typeArgument_in_typeArguments5895);
      typeArgument335=typeArgument();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeArgument335.getTree());
      loop112:       do {
        int alt112=2;
        int LA112_0=input.LA(1);
        if ((LA112_0 == COMMA)) {
          alt112=1;
        }
switch (alt112) {
case 1:
{
            COMMA336=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5898);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA336_tree=(Object)adaptor.create(COMMA336);
              adaptor.addChild(root_0,COMMA336_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5900);
            typeArgument337=typeArgument();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,typeArgument337.getTree());
          }
        break;
default :
      break loop112;
  }
}
 while (true);
GREATER338=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5904);
if (state.failed) return retval;
if (state.backtracking == 0) {
  GREATER338_tree=(Object)adaptor.create(GREATER338);
  adaptor.addChild(root_0,GREATER338_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
