{
  DRLParser.typeArguments_return retval=new DRLParser.typeArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS340=null;
  Token COMMA342=null;
  Token GREATER344=null;
  DRLParser.typeArgument_return typeArgument341=null;
  DRLParser.typeArgument_return typeArgument343=null;
  Object LESS340_tree=null;
  Object COMMA342_tree=null;
  Object GREATER344_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS340=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5911);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS340_tree=(Object)adaptor.create(LESS340);
        adaptor.addChild(root_0,LESS340_tree);
      }
      pushFollow(FOLLOW_typeArgument_in_typeArguments5913);
      typeArgument341=typeArgument();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeArgument341.getTree());
      loop114:       do {
        int alt114=2;
        int LA114_0=input.LA(1);
        if ((LA114_0 == COMMA)) {
          alt114=1;
        }
switch (alt114) {
case 1:
{
            COMMA342=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5916);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA342_tree=(Object)adaptor.create(COMMA342);
              adaptor.addChild(root_0,COMMA342_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5918);
            typeArgument343=typeArgument();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,typeArgument343.getTree());
          }
        break;
default :
      break loop114;
  }
}
 while (true);
GREATER344=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5922);
if (state.failed) return retval;
if (state.backtracking == 0) {
  GREATER344_tree=(Object)adaptor.create(GREATER344);
  adaptor.addChild(root_0,GREATER344_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
