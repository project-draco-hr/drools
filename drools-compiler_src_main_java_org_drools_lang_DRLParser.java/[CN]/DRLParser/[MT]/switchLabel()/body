{
  DRLParser.switchLabel_return retval=new DRLParser.switchLabel_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON457=null;
  Token ID459=null;
  Token COLON460=null;
  Token COLON462=null;
  DRLParser.case_key_return case_key455=null;
  DRLParser.expression_return expression456=null;
  DRLParser.case_key_return case_key458=null;
  DRLParser.default_key_return default_key461=null;
  Object COLON457_tree=null;
  Object ID459_tree=null;
  Object COLON460_tree=null;
  Object COLON462_tree=null;
  try {
    int alt147=3;
    int LA147_0=input.LA(1);
    if ((LA147_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))))) {
      int LA147_1=input.LA(2);
      if ((LA147_1 == STRING || (LA147_1 >= BOOL && LA147_1 <= LEFT_PAREN) || LA147_1 == DECIMAL || LA147_1 == LESS || LA147_1 == LEFT_SQUARE || (LA147_1 >= NULL && LA147_1 <= FLOAT) || (LA147_1 >= INCR && LA147_1 <= NEGATION)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
        alt147=1;
      }
 else       if ((LA147_1 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
        int LA147_3=input.LA(3);
        if ((LA147_3 == COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
          int LA147_5=input.LA(4);
          if ((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
            alt147=1;
          }
 else           if ((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
            alt147=2;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",147,5,input);
            throw nvae;
          }
        }
 else         if (((LA147_3 >= ID && LA147_3 <= DOT) || LA147_3 == EQUALS_ASSIGN || LA147_3 == LEFT_PAREN || (LA147_3 >= DOUBLE_PIPE && LA147_3 <= DOUBLE_AMPER) || (LA147_3 >= EQUALS && LA147_3 <= LEFT_SQUARE) || (LA147_3 >= PLUS && LA147_3 <= MINUS) || (LA147_3 >= QUESTION && LA147_3 <= DECR) || (LA147_3 >= PLUS_ASSIGN && LA147_3 <= MOD_ASSIGN)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
          alt147=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",147,3,input);
          throw nvae;
        }
      }
 else       if ((LA147_1 == COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) {
        alt147=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",147,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",147,0,input);
      throw nvae;
    }
switch (alt147) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_case_key_in_switchLabel6704);
        case_key455=case_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,case_key455.getTree());
        pushFollow(FOLLOW_expression_in_switchLabel6706);
        expression456=expression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,expression456.getTree());
        COLON457=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6708);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          COLON457_tree=(Object)adaptor.create(COLON457);
          adaptor.addChild(root_0,COLON457_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_case_key_in_switchLabel6714);
    case_key458=case_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,case_key458.getTree());
    ID459=(Token)match(input,ID,FOLLOW_ID_in_switchLabel6716);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID459_tree=(Object)adaptor.create(ID459);
      adaptor.addChild(root_0,ID459_tree);
    }
    COLON460=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6718);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      COLON460_tree=(Object)adaptor.create(COLON460);
      adaptor.addChild(root_0,COLON460_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_default_key_in_switchLabel6723);
default_key461=default_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,default_key461.getTree());
COLON462=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6725);
if (state.failed) return retval;
if (state.backtracking == 0) {
  COLON462_tree=(Object)adaptor.create(COLON462);
  adaptor.addChild(root_0,COLON462_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
