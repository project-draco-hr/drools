{
  DRLParser.switchLabel_return retval=new DRLParser.switchLabel_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON472=null;
  Token ID474=null;
  Token COLON475=null;
  Token COLON477=null;
  DRLParser.case_key_return case_key470=null;
  DRLParser.expression_return expression471=null;
  DRLParser.case_key_return case_key473=null;
  DRLParser.default_key_return default_key476=null;
  Object COLON472_tree=null;
  Object ID474_tree=null;
  Object COLON475_tree=null;
  Object COLON477_tree=null;
  try {
    int alt149=3;
    int LA149_0=input.LA(1);
    if ((LA149_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))))) {
      int LA149_1=input.LA(2);
      if ((LA149_1 == COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) {
        alt149=3;
      }
 else       if ((LA149_1 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
        int LA149_3=input.LA(3);
        if ((LA149_3 == COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
          int LA149_5=input.LA(4);
          if ((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
            alt149=1;
          }
 else           if ((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
            alt149=2;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",149,5,input);
            throw nvae;
          }
        }
 else         if (((LA149_3 >= ID && LA149_3 <= DOT) || LA149_3 == EQUALS_ASSIGN || LA149_3 == LEFT_PAREN || (LA149_3 >= DOUBLE_PIPE && LA149_3 <= DOUBLE_AMPER) || (LA149_3 >= EQUALS && LA149_3 <= LEFT_SQUARE) || (LA149_3 >= PLUS && LA149_3 <= MINUS) || (LA149_3 >= QUESTION && LA149_3 <= DECR) || (LA149_3 >= PLUS_ASSIGN && LA149_3 <= MOD_ASSIGN)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
          alt149=1;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",149,3,input);
          throw nvae;
        }
      }
 else       if ((LA149_1 == STRING || (LA149_1 >= BOOL && LA149_1 <= LEFT_PAREN) || LA149_1 == DECIMAL || LA149_1 == LESS || LA149_1 == LEFT_SQUARE || (LA149_1 >= NULL && LA149_1 <= FLOAT) || (LA149_1 >= INCR && LA149_1 <= NEGATION)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
        alt149=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",149,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",149,0,input);
      throw nvae;
    }
switch (alt149) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_case_key_in_switchLabel6807);
        case_key470=case_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,case_key470.getTree());
        pushFollow(FOLLOW_expression_in_switchLabel6809);
        expression471=expression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,expression471.getTree());
        COLON472=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6811);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          COLON472_tree=(Object)adaptor.create(COLON472);
          adaptor.addChild(root_0,COLON472_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_case_key_in_switchLabel6817);
    case_key473=case_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,case_key473.getTree());
    ID474=(Token)match(input,ID,FOLLOW_ID_in_switchLabel6819);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID474_tree=(Object)adaptor.create(ID474);
      adaptor.addChild(root_0,ID474_tree);
    }
    COLON475=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6821);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      COLON475_tree=(Object)adaptor.create(COLON475);
      adaptor.addChild(root_0,COLON475_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_default_key_in_switchLabel6826);
default_key476=default_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,default_key476.getTree());
COLON477=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6828);
if (state.failed) return retval;
if (state.backtracking == 0) {
  COLON477_tree=(Object)adaptor.create(COLON477);
  adaptor.addChild(root_0,COLON477_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
