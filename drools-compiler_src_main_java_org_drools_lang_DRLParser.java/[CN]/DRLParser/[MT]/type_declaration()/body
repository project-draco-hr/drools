{
  TypeDeclarationDescr declaration=null;
  identifier_return id=null;
  declaration=factory.createTypeDeclaration();
  try {
{
      match(input,DECLARE,FOLLOW_DECLARE_in_type_declaration645);
      if (failed)       return declaration;
      pushFollow(FOLLOW_identifier_in_type_declaration649);
      id=identifier();
      _fsp--;
      if (failed)       return declaration;
      if (backtracking == 0) {
        declaration.setTypeName(input.toString(id.start,id.stop));
      }
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_type_declaration694);
      if (failed)       return declaration;
      pushFollow(FOLLOW_type_decl_attribute_in_type_declaration720);
      type_decl_attribute(declaration);
      _fsp--;
      if (failed)       return declaration;
      loop13:       do {
        int alt13=2;
        int LA13_0=input.LA(1);
        if ((LA13_0 == COMMA)) {
          alt13=1;
        }
switch (alt13) {
case 1:
{
            match(input,COMMA,FOLLOW_COMMA_in_type_declaration725);
            if (failed)             return declaration;
            pushFollow(FOLLOW_type_decl_attribute_in_type_declaration727);
            type_decl_attribute(declaration);
            _fsp--;
            if (failed)             return declaration;
          }
        break;
default :
      break loop13;
  }
}
 while (true);
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_type_declaration749);
if (failed) return declaration;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return declaration;
}
