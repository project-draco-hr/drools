{
  DRLParser.type_declaration_return retval=new DRLParser.type_declaration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.declare_key_return declare_key37=null;
  DRLParser.type_declare_id_return type_declare_id38=null;
  DRLParser.type_decl_extends_return type_decl_extends39=null;
  DRLParser.type_decl_implements_return type_decl_implements40=null;
  DRLParser.decl_metadata_return decl_metadata41=null;
  DRLParser.decl_field_return decl_field42=null;
  DRLParser.end_key_return end_key43=null;
  RewriteRuleSubtreeStream stream_decl_field=new RewriteRuleSubtreeStream(adaptor,"rule decl_field");
  RewriteRuleSubtreeStream stream_type_declare_id=new RewriteRuleSubtreeStream(adaptor,"rule type_declare_id");
  RewriteRuleSubtreeStream stream_type_decl_extends=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_extends");
  RewriteRuleSubtreeStream stream_type_decl_implements=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_implements");
  RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
  RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
  RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
  helper.pushParaphrases(DroolsParaphraseTypes.TYPE_DECLARE);
  if (state.backtracking == 0)   helper.beginSentence(DroolsSentenceType.TYPE_DECLARATION);
  try {
{
      pushFollow(FOLLOW_declare_key_in_type_declaration1282);
      declare_key37=declare_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_declare_key.add(declare_key37.getTree());
      pushFollow(FOLLOW_type_declare_id_in_type_declaration1285);
      type_declare_id38=type_declare_id();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_type_declare_id.add(type_declare_id38.getTree());
      int alt14=2;
      int LA14_0=input.LA(1);
      if ((LA14_0 == ID)) {
        int LA14_1=input.LA(2);
        if ((LA14_1 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
          int LA14_3=input.LA(3);
          if ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))))) {
            alt14=1;
          }
        }
      }
switch (alt14) {
case 1:
{
          pushFollow(FOLLOW_type_decl_extends_in_type_declaration1287);
          type_decl_extends39=type_decl_extends();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_type_decl_extends.add(type_decl_extends39.getTree());
        }
      break;
  }
  int alt15=2;
  int LA15_0=input.LA(1);
  if ((LA15_0 == ID)) {
    int LA15_1=input.LA(2);
    if ((LA15_1 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))))) {
      int LA15_3=input.LA(3);
      if ((LA15_3 == DOT || LA15_3 == AT || LA15_3 == COMMA) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
        alt15=1;
      }
 else       if ((LA15_3 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))))) {
        int LA15_6=input.LA(4);
        if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
          alt15=1;
        }
      }
    }
  }
switch (alt15) {
case 1:
{
      pushFollow(FOLLOW_type_decl_implements_in_type_declaration1290);
      type_decl_implements40=type_decl_implements();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_type_decl_implements.add(type_decl_implements40.getTree());
    }
  break;
}
loop16: do {
int alt16=2;
int LA16_0=input.LA(1);
if ((LA16_0 == AT)) {
  alt16=1;
}
switch (alt16) {
case 1:
{
    pushFollow(FOLLOW_decl_metadata_in_type_declaration1295);
    decl_metadata41=decl_metadata();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_decl_metadata.add(decl_metadata41.getTree());
  }
break;
default :
break loop16;
}
}
 while (true);
loop17: do {
int alt17=2;
int LA17_0=input.LA(1);
if ((LA17_0 == ID)) {
int LA17_1=input.LA(2);
if (((LA17_1 >= COLON && LA17_1 <= EQUALS_ASSIGN))) {
alt17=1;
}
}
switch (alt17) {
case 1:
{
pushFollow(FOLLOW_decl_field_in_type_declaration1300);
decl_field42=decl_field();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_decl_field.add(decl_field42.getTree());
}
break;
default :
break loop17;
}
}
 while (true);
pushFollow(FOLLOW_end_key_in_type_declaration1306);
end_key43=end_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_end_key.add(end_key43.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_declare_key.nextNode(),root_1);
adaptor.addChild(root_1,stream_type_declare_id.nextTree());
if (stream_type_decl_extends.hasNext()) {
adaptor.addChild(root_1,stream_type_decl_extends.nextTree());
}
stream_type_decl_extends.reset();
if (stream_type_decl_implements.hasNext()) {
adaptor.addChild(root_1,stream_type_decl_implements.nextTree());
}
stream_type_decl_implements.reset();
while (stream_decl_metadata.hasNext()) {
adaptor.addChild(root_1,stream_decl_metadata.nextTree());
}
stream_decl_metadata.reset();
while (stream_decl_field.hasNext()) {
adaptor.addChild(root_1,stream_decl_field.nextTree());
}
stream_decl_field.reset();
adaptor.addChild(root_1,stream_end_key.nextTree());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
helper.popParaphrases();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
