{
  DRLParser.type_declaration_return retval=new DRLParser.type_declaration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token END50=null;
  DRLParser.declare_key_return declare_key46=null;
  DRLParser.type_declare_id_return type_declare_id47=null;
  DRLParser.decl_metadata_return decl_metadata48=null;
  DRLParser.decl_field_return decl_field49=null;
  Object END50_tree=null;
  RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
  RewriteRuleSubtreeStream stream_decl_field=new RewriteRuleSubtreeStream(adaptor,"rule decl_field");
  RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
  RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
  RewriteRuleSubtreeStream stream_type_declare_id=new RewriteRuleSubtreeStream(adaptor,"rule type_declare_id");
  pushParaphrases(DroolsParaphraseTypes.TYPE_DECLARE);
  if (state.backtracking == 0)   beginSentence(DroolsSentenceType.TYPE_DECLARATION);
  try {
{
      pushFollow(FOLLOW_declare_key_in_type_declaration1064);
      declare_key46=declare_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_declare_key.add(declare_key46.getTree());
      pushFollow(FOLLOW_type_declare_id_in_type_declaration1067);
      type_declare_id47=type_declare_id();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_type_declare_id.add(type_declare_id47.getTree());
      loop19:       do {
        int alt19=2;
        int LA19_0=input.LA(1);
        if ((LA19_0 == AT)) {
          alt19=1;
        }
switch (alt19) {
case 1:
{
            pushFollow(FOLLOW_decl_metadata_in_type_declaration1071);
            decl_metadata48=decl_metadata();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_decl_metadata.add(decl_metadata48.getTree());
          }
        break;
default :
      break loop19;
  }
}
 while (true);
loop20: do {
  int alt20=2;
  int LA20_0=input.LA(1);
  if ((LA20_0 == ID)) {
    alt20=1;
  }
switch (alt20) {
case 1:
{
      pushFollow(FOLLOW_decl_field_in_type_declaration1076);
      decl_field49=decl_field();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_decl_field.add(decl_field49.getTree());
    }
  break;
default :
break loop20;
}
}
 while (true);
END50=(Token)match(input,END,FOLLOW_END_in_type_declaration1081);
if (state.failed) return retval;
if (state.backtracking == 0) stream_END.add(END50);
if (state.backtracking == 0) {
emit(END50,DroolsEditorType.KEYWORD);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_declare_key.nextNode(),root_1);
adaptor.addChild(root_1,stream_type_declare_id.nextTree());
while (stream_decl_metadata.hasNext()) {
  adaptor.addChild(root_1,stream_decl_metadata.nextTree());
}
stream_decl_metadata.reset();
while (stream_decl_field.hasNext()) {
  adaptor.addChild(root_1,stream_decl_field.nextTree());
}
stream_decl_field.reset();
adaptor.addChild(root_1,stream_END.nextNode());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
