{
  TypeDeclarationDescr declaration=null;
  identifier_return id=null;
  declaration=factory.createTypeDeclaration();
  try {
{
      match(input,DECLARE,FOLLOW_DECLARE_in_type_declaration645);
      if (failed)       return declaration;
      pushFollow(FOLLOW_identifier_in_type_declaration649);
      id=identifier();
      _fsp--;
      if (failed)       return declaration;
      if (backtracking == 0) {
        declaration.setTypeName(input.toString(id.start,id.stop));
      }
      loop13:       do {
        int alt13=2;
        int LA13_0=input.LA(1);
        if ((LA13_0 == AT)) {
          alt13=1;
        }
switch (alt13) {
case 1:
{
            pushFollow(FOLLOW_decl_metadata_in_type_declaration702);
            decl_metadata(declaration);
            _fsp--;
            if (failed)             return declaration;
          }
        break;
default :
      break loop13;
  }
}
 while (true);
loop14: do {
  int alt14=2;
  int LA14_0=input.LA(1);
  if ((LA14_0 == END)) {
    int LA14_1=input.LA(2);
    if (((LA14_1 >= COLON && LA14_1 <= EQUALS))) {
      alt14=1;
    }
  }
 else   if (((LA14_0 >= PACKAGE && LA14_0 <= ID) || LA14_0 == GLOBAL || (LA14_0 >= QUERY && LA14_0 <= ATTRIBUTES) || LA14_0 == ENABLED || LA14_0 == SALIENCE || (LA14_0 >= DURATION && LA14_0 <= DIALECT) || LA14_0 == FROM || (LA14_0 >= INIT && LA14_0 <= RESULT) || LA14_0 == IN || (LA14_0 >= THEN && LA14_0 <= EVENT))) {
    alt14=1;
  }
switch (alt14) {
case 1:
{
      pushFollow(FOLLOW_decl_field_in_type_declaration730);
      decl_field(declaration);
      _fsp--;
      if (failed)       return declaration;
    }
  break;
default :
break loop14;
}
}
 while (true);
match(input,END,FOLLOW_END_in_type_declaration750);
if (failed) return declaration;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return declaration;
}
