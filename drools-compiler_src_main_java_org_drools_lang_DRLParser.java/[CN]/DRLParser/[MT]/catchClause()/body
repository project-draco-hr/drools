{
  DRLParser.catchClause_return retval=new DRLParser.catchClause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN460=null;
  Token RIGHT_PAREN462=null;
  DRLParser.catch_key_return catch_key459=null;
  DRLParser.formalParameter_return formalParameter461=null;
  DRLParser.block_return block463=null;
  Object LEFT_PAREN460_tree=null;
  Object RIGHT_PAREN462_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_catch_key_in_catchClause6739);
      catch_key459=catch_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,catch_key459.getTree());
      LEFT_PAREN460=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_catchClause6741);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_PAREN460_tree=(Object)adaptor.create(LEFT_PAREN460);
        adaptor.addChild(root_0,LEFT_PAREN460_tree);
      }
      pushFollow(FOLLOW_formalParameter_in_catchClause6743);
      formalParameter461=formalParameter();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,formalParameter461.getTree());
      RIGHT_PAREN462=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_catchClause6745);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_PAREN462_tree=(Object)adaptor.create(RIGHT_PAREN462);
        adaptor.addChild(root_0,RIGHT_PAREN462_tree);
      }
      pushFollow(FOLLOW_block_in_catchClause6747);
      block463=block();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,block463.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
