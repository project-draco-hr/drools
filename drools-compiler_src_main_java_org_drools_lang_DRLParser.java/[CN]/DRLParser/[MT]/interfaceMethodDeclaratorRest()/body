{
  DRLParser.interfaceMethodDeclaratorRest_return retval=new DRLParser.interfaceMethodDeclaratorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE797=null;
  Token RIGHT_SQUARE798=null;
  Token SEMICOLON801=null;
  DRLParser.formalParameters_return formalParameters796=null;
  DRLParser.throws_key_return throws_key799=null;
  DRLParser.typeNameList_return typeNameList800=null;
  Object LEFT_SQUARE797_tree=null;
  Object RIGHT_SQUARE798_tree=null;
  Object SEMICOLON801_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest9557);
      formalParameters796=formalParameters();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,formalParameters796.getTree());
      loop237:       do {
        int alt237=2;
        int LA237_0=input.LA(1);
        if ((LA237_0 == LEFT_SQUARE)) {
          alt237=1;
        }
switch (alt237) {
case 1:
{
            LEFT_SQUARE797=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_interfaceMethodDeclaratorRest9560);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              LEFT_SQUARE797_tree=(Object)adaptor.create(LEFT_SQUARE797);
              adaptor.addChild(root_0,LEFT_SQUARE797_tree);
            }
            RIGHT_SQUARE798=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_interfaceMethodDeclaratorRest9562);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              RIGHT_SQUARE798_tree=(Object)adaptor.create(RIGHT_SQUARE798);
              adaptor.addChild(root_0,RIGHT_SQUARE798_tree);
            }
          }
        break;
default :
      break loop237;
  }
}
 while (true);
int alt238=2;
int LA238_0=input.LA(1);
if ((LA238_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
  alt238=1;
}
switch (alt238) {
case 1:
{
    pushFollow(FOLLOW_throws_key_in_interfaceMethodDeclaratorRest9567);
    throws_key799=throws_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,throws_key799.getTree());
    pushFollow(FOLLOW_typeNameList_in_interfaceMethodDeclaratorRest9569);
    typeNameList800=typeNameList();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,typeNameList800.getTree());
  }
break;
}
SEMICOLON801=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceMethodDeclaratorRest9573);
if (state.failed) return retval;
if (state.backtracking == 0) {
SEMICOLON801_tree=(Object)adaptor.create(SEMICOLON801);
adaptor.addChild(root_0,SEMICOLON801_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
