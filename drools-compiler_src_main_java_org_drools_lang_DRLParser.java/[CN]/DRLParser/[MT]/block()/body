{
  DRLParser.block_return retval=new DRLParser.block_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY345=null;
  Token RIGHT_CURLY347=null;
  DRLParser.blockStatement_return blockStatement346=null;
  Object LEFT_CURLY345_tree=null;
  Object RIGHT_CURLY347_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY345=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_block6000);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY345_tree=(Object)adaptor.create(LEFT_CURLY345);
        adaptor.addChild(root_0,LEFT_CURLY345_tree);
      }
      loop121:       do {
        int alt121=2;
        int LA121_0=input.LA(1);
        if (((LA121_0 >= SEMICOLON && LA121_0 <= ID) || LA121_0 == STRING || (LA121_0 >= BOOL && LA121_0 <= LEFT_PAREN) || LA121_0 == DECIMAL || LA121_0 == LESS || LA121_0 == LEFT_SQUARE || (LA121_0 >= NULL && LA121_0 <= FLOAT) || LA121_0 == LEFT_CURLY || (LA121_0 >= INCR && LA121_0 <= NEGATION))) {
          alt121=1;
        }
switch (alt121) {
case 1:
{
            pushFollow(FOLLOW_blockStatement_in_block6002);
            blockStatement346=blockStatement();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,blockStatement346.getTree());
          }
        break;
default :
      break loop121;
  }
}
 while (true);
RIGHT_CURLY347=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_block6005);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_CURLY347_tree=(Object)adaptor.create(RIGHT_CURLY347);
  adaptor.addChild(root_0,RIGHT_CURLY347_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
