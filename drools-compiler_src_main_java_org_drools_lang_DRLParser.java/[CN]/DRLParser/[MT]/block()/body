{
  DRLParser.block_return retval=new DRLParser.block_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY360=null;
  Token RIGHT_CURLY362=null;
  DRLParser.blockStatement_return blockStatement361=null;
  Object LEFT_CURLY360_tree=null;
  Object RIGHT_CURLY362_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY360=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_block6106);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY360_tree=(Object)adaptor.create(LEFT_CURLY360);
        adaptor.addChild(root_0,LEFT_CURLY360_tree);
      }
      loop123:       do {
        int alt123=2;
        int LA123_0=input.LA(1);
        if (((LA123_0 >= SEMICOLON && LA123_0 <= ID) || LA123_0 == STRING || (LA123_0 >= BOOL && LA123_0 <= LEFT_PAREN) || LA123_0 == DECIMAL || LA123_0 == LESS || LA123_0 == LEFT_SQUARE || (LA123_0 >= NULL && LA123_0 <= FLOAT) || LA123_0 == LEFT_CURLY || (LA123_0 >= INCR && LA123_0 <= NEGATION))) {
          alt123=1;
        }
switch (alt123) {
case 1:
{
            pushFollow(FOLLOW_blockStatement_in_block6108);
            blockStatement361=blockStatement();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,blockStatement361.getTree());
          }
        break;
default :
      break loop123;
  }
}
 while (true);
RIGHT_CURLY362=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_block6111);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_CURLY362_tree=(Object)adaptor.create(RIGHT_CURLY362);
  adaptor.addChild(root_0,RIGHT_CURLY362_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
