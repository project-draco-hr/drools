{
  constraints_return retval=new constraints_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA186=null;
  constraint_return constraint185=null;
  constraint_return constraint187=null;
  Object COMMA186_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_constraint_in_constraints2830);
      constraint185=constraint();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,constraint185.getTree());
      loop68:       do {
        int alt68=2;
        int LA68_0=input.LA(1);
        if ((LA68_0 == COMMA)) {
          alt68=1;
        }
switch (alt68) {
case 1:
{
            COMMA186=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_constraints2834);
            if (failed)             return retval;
            pushFollow(FOLLOW_constraint_in_constraints2837);
            constraint187=constraint();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             adaptor.addChild(root_0,constraint187.getTree());
          }
        break;
default :
      break loop68;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
