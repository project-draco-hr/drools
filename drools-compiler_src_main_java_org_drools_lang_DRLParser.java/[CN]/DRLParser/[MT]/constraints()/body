{
  DRLParser.constraints_return retval=new DRLParser.constraints_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA222=null;
  DRLParser.constraint_return constraint221=null;
  DRLParser.constraint_return constraint223=null;
  Object COMMA222_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_constraint_in_constraints3999);
      constraint221=constraint();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,constraint221.getTree());
      loop71:       do {
        int alt71=2;
        int LA71_0=input.LA(1);
        if ((LA71_0 == COMMA)) {
          alt71=1;
        }
switch (alt71) {
case 1:
{
            COMMA222=(Token)match(input,COMMA,FOLLOW_COMMA_in_constraints4003);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              helper.emit(COMMA222,DroolsEditorType.SYMBOL);
              helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);
            }
            pushFollow(FOLLOW_constraint_in_constraints4010);
            constraint223=constraint();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,constraint223.getTree());
          }
        break;
default :
      break loop71;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
