{
  DRLParser.signed_hex_match_return retval=new DRLParser.signed_hex_match_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS287=null;
  Token MINUS288=null;
  Token HEX289=null;
  Object PLUS287_tree=null;
  Object MINUS288_tree=null;
  Object HEX289_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt88=3;
      int LA88_0=input.LA(1);
      if ((LA88_0 == PLUS)) {
        alt88=1;
      }
 else       if ((LA88_0 == MINUS)) {
        alt88=2;
      }
switch (alt88) {
case 1:
{
          PLUS287=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_hex_match4926);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            PLUS287_tree=(Object)adaptor.create(PLUS287);
            adaptor.addChild(root_0,PLUS287_tree);
          }
          if (state.backtracking == 0) {
            helper.emit(PLUS287,DroolsEditorType.NUMERIC_CONST);
          }
        }
      break;
case 2:
{
      MINUS288=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_hex_match4932);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        MINUS288_tree=(Object)adaptor.create(MINUS288);
        adaptor.addChild(root_0,MINUS288_tree);
      }
      if (state.backtracking == 0) {
        helper.emit(MINUS288,DroolsEditorType.NUMERIC_CONST);
      }
    }
  break;
}
HEX289=(Token)match(input,HEX,FOLLOW_HEX_in_signed_hex_match4954);
if (state.failed) return retval;
if (state.backtracking == 0) {
HEX289_tree=(Object)adaptor.create(HEX289);
adaptor.addChild(root_0,HEX289_tree);
}
if (state.backtracking == 0) {
helper.emit(HEX289,DroolsEditorType.NUMERIC_CONST);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
