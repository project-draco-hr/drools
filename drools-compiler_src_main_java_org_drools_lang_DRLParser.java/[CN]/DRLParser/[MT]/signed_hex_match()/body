{
  DRLParser.signed_hex_match_return retval=new DRLParser.signed_hex_match_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS292=null;
  Token MINUS293=null;
  Token HEX294=null;
  Object PLUS292_tree=null;
  Object MINUS293_tree=null;
  Object HEX294_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt90=3;
      int LA90_0=input.LA(1);
      if ((LA90_0 == PLUS)) {
        alt90=1;
      }
 else       if ((LA90_0 == MINUS)) {
        alt90=2;
      }
switch (alt90) {
case 1:
{
          PLUS292=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_hex_match5004);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            PLUS292_tree=(Object)adaptor.create(PLUS292);
            adaptor.addChild(root_0,PLUS292_tree);
          }
          if (state.backtracking == 0) {
            helper.emit(PLUS292,DroolsEditorType.NUMERIC_CONST);
          }
        }
      break;
case 2:
{
      MINUS293=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_hex_match5010);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        MINUS293_tree=(Object)adaptor.create(MINUS293);
        adaptor.addChild(root_0,MINUS293_tree);
      }
      if (state.backtracking == 0) {
        helper.emit(MINUS293,DroolsEditorType.NUMERIC_CONST);
      }
    }
  break;
}
HEX294=(Token)match(input,HEX,FOLLOW_HEX_in_signed_hex_match5032);
if (state.failed) return retval;
if (state.backtracking == 0) {
HEX294_tree=(Object)adaptor.create(HEX294);
adaptor.addChild(root_0,HEX294_tree);
}
if (state.backtracking == 0) {
helper.emit(HEX294,DroolsEditorType.NUMERIC_CONST);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
