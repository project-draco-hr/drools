{
  over_elements_return retval=new over_elements_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id1=null;
  Token id2=null;
  Token COLON169=null;
  paren_chunk_return paren_chunk170=null;
  Object id1_tree=null;
  Object id2_tree=null;
  Object COLON169_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      id1=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_over_elements2854);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(id1);
      if (backtracking == 0) {
        emit(id1,DroolsEditorType.IDENTIFIER);
      }
      COLON169=(Token)input.LT(1);
      match(input,COLON,FOLLOW_COLON_in_over_elements2861);
      if (failed)       return retval;
      if (backtracking == 0)       stream_COLON.add(COLON169);
      if (backtracking == 0) {
        emit(COLON169,DroolsEditorType.SYMBOL);
      }
      id2=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_over_elements2870);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(id2);
      if (backtracking == 0) {
        emit(id2,DroolsEditorType.IDENTIFIER);
      }
      pushFollow(FOLLOW_paren_chunk_in_over_elements2877);
      paren_chunk170=paren_chunk();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_paren_chunk.add(paren_chunk170.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
        RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_BEHAVIOR,"VT_BEHAVIOR"),root_1);
            adaptor.addChild(root_1,stream_id1.next());
            adaptor.addChild(root_1,stream_id2.next());
            adaptor.addChild(root_1,stream_paren_chunk.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
