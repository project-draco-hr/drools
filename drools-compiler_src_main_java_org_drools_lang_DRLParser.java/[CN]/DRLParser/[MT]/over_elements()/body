{
  DRLParser.over_elements_return retval=new DRLParser.over_elements_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id1=null;
  Token id2=null;
  Token t=null;
  Token COLON172=null;
  Token LEFT_PAREN173=null;
  Token RIGHT_PAREN174=null;
  Object id1_tree=null;
  Object id2_tree=null;
  Object t_tree=null;
  Object COLON172_tree=null;
  Object LEFT_PAREN173_tree=null;
  Object RIGHT_PAREN174_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_TimePeriod=new RewriteRuleTokenStream(adaptor,"token TimePeriod");
  try {
{
      id1=(Token)match(input,ID,FOLLOW_ID_in_over_elements3024);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(id1);
      if (state.backtracking == 0) {
        helper.emit(id1,DroolsEditorType.IDENTIFIER);
      }
      COLON172=(Token)match(input,COLON,FOLLOW_COLON_in_over_elements3031);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_COLON.add(COLON172);
      if (state.backtracking == 0) {
        helper.emit(COLON172,DroolsEditorType.SYMBOL);
      }
      id2=(Token)match(input,ID,FOLLOW_ID_in_over_elements3040);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(id2);
      if (state.backtracking == 0) {
        helper.emit(id2,DroolsEditorType.IDENTIFIER);
      }
      LEFT_PAREN173=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_over_elements3047);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN173);
      int alt55=2;
      int LA55_0=input.LA(1);
      if ((LA55_0 == TimePeriod)) {
        alt55=1;
      }
 else       if ((LA55_0 == DECIMAL)) {
        alt55=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",55,0,input);
        throw nvae;
      }
switch (alt55) {
case 1:
{
          t=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_over_elements3062);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_TimePeriod.add(t);
        }
      break;
case 2:
{
      t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_over_elements3068);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_DECIMAL.add(t);
    }
  break;
}
RIGHT_PAREN174=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_over_elements3078);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN174);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_BEHAVIOR,"VT_BEHAVIOR"),root_1);
    adaptor.addChild(root_1,stream_id1.nextNode());
    adaptor.addChild(root_1,stream_id2.nextNode());
    adaptor.addChild(root_1,(Object)adaptor.create(VT_PAREN_CHUNK,t));
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
