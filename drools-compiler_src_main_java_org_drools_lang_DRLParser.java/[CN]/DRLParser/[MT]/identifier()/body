{
  Token tok=null;
  Token t=null;
  try {
{
      int alt56=31;
switch (input.LA(1)) {
case ID:
        alt56=1;
      break;
case PACKAGE:
    alt56=2;
  break;
case FUNCTION:
alt56=3;
break;
case GLOBAL:
alt56=4;
break;
case IMPORT:
alt56=5;
break;
case RULE:
alt56=6;
break;
case QUERY:
alt56=7;
break;
case TEMPLATE:
alt56=8;
break;
case ATTRIBUTES:
alt56=9;
break;
case ENABLED:
alt56=10;
break;
case SALIENCE:
alt56=11;
break;
case DURATION:
alt56=12;
break;
case FROM:
alt56=13;
break;
case ACCUMULATE:
alt56=14;
break;
case INIT:
alt56=15;
break;
case ACTION:
alt56=16;
break;
case RESULT:
alt56=17;
break;
case COLLECT:
alt56=18;
break;
case OR:
alt56=19;
break;
case AND:
alt56=20;
break;
case CONTAINS:
alt56=21;
break;
case EXCLUDES:
alt56=22;
break;
case MATCHES:
alt56=23;
break;
case NULL:
alt56=24;
break;
case EXISTS:
alt56=25;
break;
case NOT:
alt56=26;
break;
case EVAL:
alt56=27;
break;
case FORALL:
alt56=28;
break;
case WHEN:
alt56=29;
break;
case THEN:
alt56=30;
break;
case END:
alt56=31;
break;
default :
if (backtracking > 0) {
failed=true;
return tok;
}
NoViableAltException nvae=new NoViableAltException("1353:2: ( ( ID )=>t= ID | ( PACKAGE )=>t= PACKAGE | ( FUNCTION )=>t= FUNCTION | ( GLOBAL )=>t= GLOBAL | ( IMPORT )=>t= IMPORT | ( RULE )=>t= RULE | ( QUERY )=>t= QUERY | ( TEMPLATE )=>t= TEMPLATE | ( ATTRIBUTES )=>t= ATTRIBUTES | ( ENABLED )=>t= ENABLED | ( SALIENCE )=>t= SALIENCE | ( DURATION )=>t= DURATION | ( FROM )=>t= FROM | ( ACCUMULATE )=>t= ACCUMULATE | ( INIT )=>t= INIT | ( ACTION )=>t= ACTION | ( RESULT )=>t= RESULT | ( COLLECT )=>t= COLLECT | ( OR )=>t= OR | ( AND )=>t= AND | ( CONTAINS )=>t= CONTAINS | ( EXCLUDES )=>t= EXCLUDES | ( MATCHES )=>t= MATCHES | ( NULL )=>t= NULL | ( EXISTS )=>t= EXISTS | ( NOT )=>t= NOT | ( EVAL )=>t= EVAL | ( FORALL )=>t= FORALL | ( WHEN )=>t= WHEN | ( THEN )=>t= THEN | t= END )",56,0,input);
throw nvae;
}
switch (alt56) {
case 1:
{
t=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_identifier3978);
if (failed) return tok;
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,PACKAGE,FOLLOW_PACKAGE_in_identifier3991);
if (failed) return tok;
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,FUNCTION,FOLLOW_FUNCTION_in_identifier3998);
if (failed) return tok;
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,GLOBAL,FOLLOW_GLOBAL_in_identifier4005);
if (failed) return tok;
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,IMPORT,FOLLOW_IMPORT_in_identifier4012);
if (failed) return tok;
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,RULE,FOLLOW_RULE_in_identifier4021);
if (failed) return tok;
}
break;
case 7:
{
t=(Token)input.LT(1);
match(input,QUERY,FOLLOW_QUERY_in_identifier4028);
if (failed) return tok;
}
break;
case 8:
{
t=(Token)input.LT(1);
match(input,TEMPLATE,FOLLOW_TEMPLATE_in_identifier4049);
if (failed) return tok;
}
break;
case 9:
{
t=(Token)input.LT(1);
match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_identifier4077);
if (failed) return tok;
}
break;
case 10:
{
t=(Token)input.LT(1);
match(input,ENABLED,FOLLOW_ENABLED_in_identifier4103);
if (failed) return tok;
}
break;
case 11:
{
t=(Token)input.LT(1);
match(input,SALIENCE,FOLLOW_SALIENCE_in_identifier4132);
if (failed) return tok;
}
break;
case 12:
{
t=(Token)input.LT(1);
match(input,DURATION,FOLLOW_DURATION_in_identifier4154);
if (failed) return tok;
}
break;
case 13:
{
t=(Token)input.LT(1);
match(input,FROM,FOLLOW_FROM_in_identifier4176);
if (failed) return tok;
}
break;
case 14:
{
t=(Token)input.LT(1);
match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_identifier4205);
if (failed) return tok;
}
break;
case 15:
{
t=(Token)input.LT(1);
match(input,INIT,FOLLOW_INIT_in_identifier4227);
if (failed) return tok;
}
break;
case 16:
{
t=(Token)input.LT(1);
match(input,ACTION,FOLLOW_ACTION_in_identifier4256);
if (failed) return tok;
}
break;
case 17:
{
t=(Token)input.LT(1);
match(input,RESULT,FOLLOW_RESULT_in_identifier4285);
if (failed) return tok;
}
break;
case 18:
{
t=(Token)input.LT(1);
match(input,COLLECT,FOLLOW_COLLECT_in_identifier4314);
if (failed) return tok;
}
break;
case 19:
{
t=(Token)input.LT(1);
match(input,OR,FOLLOW_OR_in_identifier4343);
if (failed) return tok;
}
break;
case 20:
{
t=(Token)input.LT(1);
match(input,AND,FOLLOW_AND_in_identifier4372);
if (failed) return tok;
}
break;
case 21:
{
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_identifier4401);
if (failed) return tok;
}
break;
case 22:
{
t=(Token)input.LT(1);
match(input,EXCLUDES,FOLLOW_EXCLUDES_in_identifier4423);
if (failed) return tok;
}
break;
case 23:
{
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_identifier4445);
if (failed) return tok;
}
break;
case 24:
{
t=(Token)input.LT(1);
match(input,NULL,FOLLOW_NULL_in_identifier4474);
if (failed) return tok;
}
break;
case 25:
{
t=(Token)input.LT(1);
match(input,EXISTS,FOLLOW_EXISTS_in_identifier4503);
if (failed) return tok;
}
break;
case 26:
{
t=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_identifier4532);
if (failed) return tok;
}
break;
case 27:
{
t=(Token)input.LT(1);
match(input,EVAL,FOLLOW_EVAL_in_identifier4561);
if (failed) return tok;
}
break;
case 28:
{
t=(Token)input.LT(1);
match(input,FORALL,FOLLOW_FORALL_in_identifier4590);
if (failed) return tok;
}
break;
case 29:
{
t=(Token)input.LT(1);
match(input,WHEN,FOLLOW_WHEN_in_identifier4628);
if (failed) return tok;
}
break;
case 30:
{
t=(Token)input.LT(1);
match(input,THEN,FOLLOW_THEN_in_identifier4660);
if (failed) return tok;
}
break;
case 31:
{
t=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_identifier4689);
if (failed) return tok;
}
break;
}
if (backtracking == 0) {
tok=t;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return tok;
}
