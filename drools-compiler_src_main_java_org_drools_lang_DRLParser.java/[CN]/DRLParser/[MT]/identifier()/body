{
  Token tok=null;
  Token t=null;
  try {
{
      int alt73=33;
switch (input.LA(1)) {
case ID:
{
          alt73=1;
        }
      break;
case PACKAGE:
{
      alt73=2;
    }
  break;
case FUNCTION:
{
  alt73=3;
}
break;
case GLOBAL:
{
alt73=4;
}
break;
case IMPORT:
{
alt73=5;
}
break;
case RULE:
{
alt73=6;
}
break;
case QUERY:
{
alt73=7;
}
break;
case TEMPLATE:
{
alt73=8;
}
break;
case ATTRIBUTES:
{
alt73=9;
}
break;
case ENABLED:
{
alt73=10;
}
break;
case SALIENCE:
{
alt73=11;
}
break;
case DURATION:
{
alt73=12;
}
break;
case FROM:
{
alt73=13;
}
break;
case ACCUMULATE:
{
alt73=14;
}
break;
case INIT:
{
alt73=15;
}
break;
case ACTION:
{
alt73=16;
}
break;
case RESULT:
{
alt73=17;
}
break;
case COLLECT:
{
alt73=18;
}
break;
case OR:
{
alt73=19;
}
break;
case AND:
{
alt73=20;
}
break;
case CONTAINS:
{
alt73=21;
}
break;
case EXCLUDES:
{
alt73=22;
}
break;
case MEMBEROF:
{
alt73=23;
}
break;
case MATCHES:
{
alt73=24;
}
break;
case NULL:
{
alt73=25;
}
break;
case EXISTS:
{
alt73=26;
}
break;
case NOT:
{
alt73=27;
}
break;
case EVAL:
{
alt73=28;
}
break;
case FORALL:
{
alt73=29;
}
break;
case WHEN:
{
alt73=30;
}
break;
case THEN:
{
alt73=31;
}
break;
case END:
{
alt73=32;
}
break;
case IN:
{
alt73=33;
}
break;
default :
if (backtracking > 0) {
failed=true;
return tok;
}
NoViableAltException nvae=new NoViableAltException("1722:2: (t= ID | t= PACKAGE | t= FUNCTION | t= GLOBAL | t= IMPORT | t= RULE | t= QUERY | t= TEMPLATE | t= ATTRIBUTES | t= ENABLED | t= SALIENCE | t= DURATION | t= FROM | t= ACCUMULATE | t= INIT | t= ACTION | t= RESULT | t= COLLECT | t= OR | t= AND | t= CONTAINS | t= EXCLUDES | t= MEMBEROF | t= MATCHES | t= NULL | t= EXISTS | t= NOT | t= EVAL | t= FORALL | t= WHEN | t= THEN | t= END | t= IN )",73,0,input);
throw nvae;
}
switch (alt73) {
case 1:
{
t=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_identifier5041);
if (failed) return tok;
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,PACKAGE,FOLLOW_PACKAGE_in_identifier5054);
if (failed) return tok;
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,FUNCTION,FOLLOW_FUNCTION_in_identifier5061);
if (failed) return tok;
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,GLOBAL,FOLLOW_GLOBAL_in_identifier5068);
if (failed) return tok;
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,IMPORT,FOLLOW_IMPORT_in_identifier5075);
if (failed) return tok;
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,RULE,FOLLOW_RULE_in_identifier5084);
if (failed) return tok;
}
break;
case 7:
{
t=(Token)input.LT(1);
match(input,QUERY,FOLLOW_QUERY_in_identifier5091);
if (failed) return tok;
}
break;
case 8:
{
t=(Token)input.LT(1);
match(input,TEMPLATE,FOLLOW_TEMPLATE_in_identifier5112);
if (failed) return tok;
}
break;
case 9:
{
t=(Token)input.LT(1);
match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_identifier5140);
if (failed) return tok;
}
break;
case 10:
{
t=(Token)input.LT(1);
match(input,ENABLED,FOLLOW_ENABLED_in_identifier5166);
if (failed) return tok;
}
break;
case 11:
{
t=(Token)input.LT(1);
match(input,SALIENCE,FOLLOW_SALIENCE_in_identifier5195);
if (failed) return tok;
}
break;
case 12:
{
t=(Token)input.LT(1);
match(input,DURATION,FOLLOW_DURATION_in_identifier5217);
if (failed) return tok;
}
break;
case 13:
{
t=(Token)input.LT(1);
match(input,FROM,FOLLOW_FROM_in_identifier5239);
if (failed) return tok;
}
break;
case 14:
{
t=(Token)input.LT(1);
match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_identifier5268);
if (failed) return tok;
}
break;
case 15:
{
t=(Token)input.LT(1);
match(input,INIT,FOLLOW_INIT_in_identifier5290);
if (failed) return tok;
}
break;
case 16:
{
t=(Token)input.LT(1);
match(input,ACTION,FOLLOW_ACTION_in_identifier5319);
if (failed) return tok;
}
break;
case 17:
{
t=(Token)input.LT(1);
match(input,RESULT,FOLLOW_RESULT_in_identifier5348);
if (failed) return tok;
}
break;
case 18:
{
t=(Token)input.LT(1);
match(input,COLLECT,FOLLOW_COLLECT_in_identifier5377);
if (failed) return tok;
}
break;
case 19:
{
t=(Token)input.LT(1);
match(input,OR,FOLLOW_OR_in_identifier5406);
if (failed) return tok;
}
break;
case 20:
{
t=(Token)input.LT(1);
match(input,AND,FOLLOW_AND_in_identifier5435);
if (failed) return tok;
}
break;
case 21:
{
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_identifier5464);
if (failed) return tok;
}
break;
case 22:
{
t=(Token)input.LT(1);
match(input,EXCLUDES,FOLLOW_EXCLUDES_in_identifier5486);
if (failed) return tok;
}
break;
case 23:
{
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_identifier5508);
if (failed) return tok;
}
break;
case 24:
{
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_identifier5528);
if (failed) return tok;
}
break;
case 25:
{
t=(Token)input.LT(1);
match(input,NULL,FOLLOW_NULL_in_identifier5557);
if (failed) return tok;
}
break;
case 26:
{
t=(Token)input.LT(1);
match(input,EXISTS,FOLLOW_EXISTS_in_identifier5586);
if (failed) return tok;
}
break;
case 27:
{
t=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_identifier5615);
if (failed) return tok;
}
break;
case 28:
{
t=(Token)input.LT(1);
match(input,EVAL,FOLLOW_EVAL_in_identifier5644);
if (failed) return tok;
}
break;
case 29:
{
t=(Token)input.LT(1);
match(input,FORALL,FOLLOW_FORALL_in_identifier5673);
if (failed) return tok;
}
break;
case 30:
{
t=(Token)input.LT(1);
match(input,WHEN,FOLLOW_WHEN_in_identifier5711);
if (failed) return tok;
}
break;
case 31:
{
t=(Token)input.LT(1);
match(input,THEN,FOLLOW_THEN_in_identifier5743);
if (failed) return tok;
}
break;
case 32:
{
t=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_identifier5772);
if (failed) return tok;
}
break;
case 33:
{
t=(Token)input.LT(1);
match(input,IN,FOLLOW_IN_in_identifier5791);
if (failed) return tok;
}
break;
}
if (backtracking == 0) {
tok=t;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return tok;
}
