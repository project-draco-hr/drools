{
  Token tok=null;
  Token t=null;
  try {
{
      int alt69=33;
switch (input.LA(1)) {
case ID:
{
          alt69=1;
        }
      break;
case PACKAGE:
{
      alt69=2;
    }
  break;
case FUNCTION:
{
  alt69=3;
}
break;
case GLOBAL:
{
alt69=4;
}
break;
case IMPORT:
{
alt69=5;
}
break;
case RULE:
{
alt69=6;
}
break;
case QUERY:
{
alt69=7;
}
break;
case TEMPLATE:
{
alt69=8;
}
break;
case ATTRIBUTES:
{
alt69=9;
}
break;
case ENABLED:
{
alt69=10;
}
break;
case SALIENCE:
{
alt69=11;
}
break;
case DURATION:
{
alt69=12;
}
break;
case FROM:
{
alt69=13;
}
break;
case ACCUMULATE:
{
alt69=14;
}
break;
case INIT:
{
alt69=15;
}
break;
case ACTION:
{
alt69=16;
}
break;
case RESULT:
{
alt69=17;
}
break;
case COLLECT:
{
alt69=18;
}
break;
case OR:
{
alt69=19;
}
break;
case AND:
{
alt69=20;
}
break;
case CONTAINS:
{
alt69=21;
}
break;
case EXCLUDES:
{
alt69=22;
}
break;
case MEMBEROF:
{
alt69=23;
}
break;
case MATCHES:
{
alt69=24;
}
break;
case NULL:
{
alt69=25;
}
break;
case EXISTS:
{
alt69=26;
}
break;
case NOT:
{
alt69=27;
}
break;
case EVAL:
{
alt69=28;
}
break;
case FORALL:
{
alt69=29;
}
break;
case WHEN:
{
alt69=30;
}
break;
case THEN:
{
alt69=31;
}
break;
case END:
{
alt69=32;
}
break;
case IN:
{
alt69=33;
}
break;
default :
if (backtracking > 0) {
failed=true;
return tok;
}
NoViableAltException nvae=new NoViableAltException("1700:2: (t= ID | t= PACKAGE | t= FUNCTION | t= GLOBAL | t= IMPORT | t= RULE | t= QUERY | t= TEMPLATE | t= ATTRIBUTES | t= ENABLED | t= SALIENCE | t= DURATION | t= FROM | t= ACCUMULATE | t= INIT | t= ACTION | t= RESULT | t= COLLECT | t= OR | t= AND | t= CONTAINS | t= EXCLUDES | t= MEMBEROF | t= MATCHES | t= NULL | t= EXISTS | t= NOT | t= EVAL | t= FORALL | t= WHEN | t= THEN | t= END | t= IN )",69,0,input);
throw nvae;
}
switch (alt69) {
case 1:
{
t=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_identifier4902);
if (failed) return tok;
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,PACKAGE,FOLLOW_PACKAGE_in_identifier4915);
if (failed) return tok;
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,FUNCTION,FOLLOW_FUNCTION_in_identifier4922);
if (failed) return tok;
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,GLOBAL,FOLLOW_GLOBAL_in_identifier4929);
if (failed) return tok;
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,IMPORT,FOLLOW_IMPORT_in_identifier4936);
if (failed) return tok;
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,RULE,FOLLOW_RULE_in_identifier4945);
if (failed) return tok;
}
break;
case 7:
{
t=(Token)input.LT(1);
match(input,QUERY,FOLLOW_QUERY_in_identifier4952);
if (failed) return tok;
}
break;
case 8:
{
t=(Token)input.LT(1);
match(input,TEMPLATE,FOLLOW_TEMPLATE_in_identifier4973);
if (failed) return tok;
}
break;
case 9:
{
t=(Token)input.LT(1);
match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_identifier5001);
if (failed) return tok;
}
break;
case 10:
{
t=(Token)input.LT(1);
match(input,ENABLED,FOLLOW_ENABLED_in_identifier5027);
if (failed) return tok;
}
break;
case 11:
{
t=(Token)input.LT(1);
match(input,SALIENCE,FOLLOW_SALIENCE_in_identifier5056);
if (failed) return tok;
}
break;
case 12:
{
t=(Token)input.LT(1);
match(input,DURATION,FOLLOW_DURATION_in_identifier5078);
if (failed) return tok;
}
break;
case 13:
{
t=(Token)input.LT(1);
match(input,FROM,FOLLOW_FROM_in_identifier5100);
if (failed) return tok;
}
break;
case 14:
{
t=(Token)input.LT(1);
match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_identifier5129);
if (failed) return tok;
}
break;
case 15:
{
t=(Token)input.LT(1);
match(input,INIT,FOLLOW_INIT_in_identifier5151);
if (failed) return tok;
}
break;
case 16:
{
t=(Token)input.LT(1);
match(input,ACTION,FOLLOW_ACTION_in_identifier5180);
if (failed) return tok;
}
break;
case 17:
{
t=(Token)input.LT(1);
match(input,RESULT,FOLLOW_RESULT_in_identifier5209);
if (failed) return tok;
}
break;
case 18:
{
t=(Token)input.LT(1);
match(input,COLLECT,FOLLOW_COLLECT_in_identifier5238);
if (failed) return tok;
}
break;
case 19:
{
t=(Token)input.LT(1);
match(input,OR,FOLLOW_OR_in_identifier5267);
if (failed) return tok;
}
break;
case 20:
{
t=(Token)input.LT(1);
match(input,AND,FOLLOW_AND_in_identifier5296);
if (failed) return tok;
}
break;
case 21:
{
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_identifier5325);
if (failed) return tok;
}
break;
case 22:
{
t=(Token)input.LT(1);
match(input,EXCLUDES,FOLLOW_EXCLUDES_in_identifier5347);
if (failed) return tok;
}
break;
case 23:
{
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_identifier5369);
if (failed) return tok;
}
break;
case 24:
{
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_identifier5389);
if (failed) return tok;
}
break;
case 25:
{
t=(Token)input.LT(1);
match(input,NULL,FOLLOW_NULL_in_identifier5418);
if (failed) return tok;
}
break;
case 26:
{
t=(Token)input.LT(1);
match(input,EXISTS,FOLLOW_EXISTS_in_identifier5447);
if (failed) return tok;
}
break;
case 27:
{
t=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_identifier5476);
if (failed) return tok;
}
break;
case 28:
{
t=(Token)input.LT(1);
match(input,EVAL,FOLLOW_EVAL_in_identifier5505);
if (failed) return tok;
}
break;
case 29:
{
t=(Token)input.LT(1);
match(input,FORALL,FOLLOW_FORALL_in_identifier5534);
if (failed) return tok;
}
break;
case 30:
{
t=(Token)input.LT(1);
match(input,WHEN,FOLLOW_WHEN_in_identifier5572);
if (failed) return tok;
}
break;
case 31:
{
t=(Token)input.LT(1);
match(input,THEN,FOLLOW_THEN_in_identifier5604);
if (failed) return tok;
}
break;
case 32:
{
t=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_identifier5633);
if (failed) return tok;
}
break;
case 33:
{
t=(Token)input.LT(1);
match(input,IN,FOLLOW_IN_in_identifier5652);
if (failed) return tok;
}
break;
}
if (backtracking == 0) {
tok=t;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return tok;
}
