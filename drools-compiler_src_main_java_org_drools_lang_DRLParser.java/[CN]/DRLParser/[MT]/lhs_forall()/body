{
  DRLParser.lhs_forall_return retval=new DRLParser.lhs_forall_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN158=null;
  Token RIGHT_PAREN160=null;
  DRLParser.forall_key_return forall_key157=null;
  DRLParser.pattern_source_return pattern_source159=null;
  Object LEFT_PAREN158_tree=null;
  Object RIGHT_PAREN160_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
  RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
  try {
{
      pushFollow(FOLLOW_forall_key_in_lhs_forall2679);
      forall_key157=forall_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_forall_key.add(forall_key157.getTree());
      LEFT_PAREN158=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_forall2684);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN158);
      if (state.backtracking == 0) {
        emit(LEFT_PAREN158,DroolsEditorType.SYMBOL);
      }
      int cnt59=0;
      loop59:       do {
        int alt59=2;
        int LA59_0=input.LA(1);
        if ((LA59_0 == ID)) {
          alt59=1;
        }
switch (alt59) {
case 1:
{
            pushFollow(FOLLOW_pattern_source_in_lhs_forall2692);
            pattern_source159=pattern_source();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_pattern_source.add(pattern_source159.getTree());
          }
        break;
default :
      if (cnt59 >= 1)       break loop59;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(59,input);
throw eee;
}
cnt59++;
}
 while (true);
RIGHT_PAREN160=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_forall2698);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN160);
if (state.backtracking == 0) {
emit(RIGHT_PAREN160,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_forall_key.nextNode(),root_1);
if (!(stream_pattern_source.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_pattern_source.hasNext()) {
  adaptor.addChild(root_1,stream_pattern_source.nextTree());
}
stream_pattern_source.reset();
adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
