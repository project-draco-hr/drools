{
  ForallDescr d=null;
  Token FORALL42=null;
  Token RIGHT_PAREN43=null;
  BaseDescr base=null;
  BaseDescr pattern=null;
  d=factory.createForall();
  try {
{
      FORALL42=(Token)input.LT(1);
      match(input,FORALL,FOLLOW_FORALL_in_lhs_forall2527);
      if (failed)       return d;
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_forall2529);
      if (failed)       return d;
      pushFollow(FOLLOW_lhs_pattern_in_lhs_forall2533);
      base=lhs_pattern();
      _fsp--;
      if (failed)       return d;
      if (backtracking == 0) {
        d.setStartCharacter(((CommonToken)FORALL42).getStartIndex());
        d.addDescr(base);
        d.setLocation(offset(FORALL42.getLine()),FORALL42.getCharPositionInLine());
      }
      int cnt45=0;
      loop45:       do {
        int alt45=2;
        int LA45_0=input.LA(1);
        if ((LA45_0 == ID || LA45_0 == COMMA)) {
          alt45=1;
        }
switch (alt45) {
case 1:
{
            int alt44=2;
            int LA44_0=input.LA(1);
            if ((LA44_0 == COMMA)) {
              alt44=1;
            }
switch (alt44) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_lhs_forall2547);
                if (failed)                 return d;
              }
            break;
        }
        pushFollow(FOLLOW_lhs_pattern_in_lhs_forall2553);
        pattern=lhs_pattern();
        _fsp--;
        if (failed)         return d;
        if (backtracking == 0) {
          d.addDescr(pattern);
        }
      }
    break;
default :
  if (cnt45 >= 1)   break loop45;
if (backtracking > 0) {
  failed=true;
  return d;
}
EarlyExitException eee=new EarlyExitException(45,input);
throw eee;
}
cnt45++;
}
 while (true);
RIGHT_PAREN43=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_forall2566);
if (failed) return d;
if (backtracking == 0) {
d.setEndCharacter(((CommonToken)RIGHT_PAREN43).getStopIndex());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
