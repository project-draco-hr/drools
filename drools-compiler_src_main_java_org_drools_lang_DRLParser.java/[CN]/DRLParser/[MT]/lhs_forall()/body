{
  lhs_forall_return retval=new lhs_forall_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN137=null;
  Token RIGHT_PAREN139=null;
  forall_key_return forall_key136=null;
  lhs_pattern_return lhs_pattern138=null;
  Object LEFT_PAREN137_tree=null;
  Object RIGHT_PAREN139_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
  RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
  try {
{
      pushFollow(FOLLOW_forall_key_in_lhs_forall2108);
      forall_key136=forall_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_forall_key.add(forall_key136.getTree());
      LEFT_PAREN137=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_forall2110);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN137);
      int cnt49=0;
      loop49:       do {
        int alt49=2;
        int LA49_0=input.LA(1);
        if ((LA49_0 == ID)) {
          alt49=1;
        }
switch (alt49) {
case 1:
{
            pushFollow(FOLLOW_lhs_pattern_in_lhs_forall2112);
            lhs_pattern138=lhs_pattern();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_lhs_pattern.add(lhs_pattern138.getTree());
          }
        break;
default :
      if (cnt49 >= 1)       break loop49;
    if (backtracking > 0) {
      failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(49,input);
throw eee;
}
cnt49++;
}
 while (true);
RIGHT_PAREN139=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_forall2115);
if (failed) return retval;
if (backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN139);
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_forall_key.nextNode(),root_1);
if (!(stream_lhs_pattern.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_lhs_pattern.hasNext()) {
  adaptor.addChild(root_1,stream_lhs_pattern.next());
}
stream_lhs_pattern.reset();
adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
