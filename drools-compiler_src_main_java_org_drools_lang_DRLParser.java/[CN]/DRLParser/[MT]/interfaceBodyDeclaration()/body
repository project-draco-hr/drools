{
  DRLParser.interfaceBodyDeclaration_return retval=new DRLParser.interfaceBodyDeclaration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON779=null;
  DRLParser.modifiedInterfaceMember_return modifiedInterfaceMember778=null;
  Object SEMICOLON779_tree=null;
  try {
    int alt233=2;
    int LA233_0=input.LA(1);
    if ((LA233_0 == ID || LA233_0 == LESS || LA233_0 == AT)) {
      alt233=1;
    }
 else     if ((LA233_0 == SEMICOLON)) {
      alt233=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",233,0,input);
      throw nvae;
    }
switch (alt233) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_modifiedInterfaceMember_in_interfaceBodyDeclaration9422);
        modifiedInterfaceMember778=modifiedInterfaceMember();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,modifiedInterfaceMember778.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    SEMICOLON779=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceBodyDeclaration9429);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      SEMICOLON779_tree=(Object)adaptor.create(SEMICOLON779);
      adaptor.addChild(root_0,SEMICOLON779_tree);
    }
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
