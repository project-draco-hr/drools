{
  DRLParser.bound_return retval=new DRLParser.bound_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AMPER765=null;
  DRLParser.type_return type764=null;
  DRLParser.type_return type766=null;
  Object AMPER765_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_type_in_bound9335);
      type764=type();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,type764.getTree());
      loop228:       do {
        int alt228=2;
        int LA228_0=input.LA(1);
        if ((LA228_0 == AMPER)) {
          alt228=1;
        }
switch (alt228) {
case 1:
{
            AMPER765=(Token)match(input,AMPER,FOLLOW_AMPER_in_bound9338);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              AMPER765_tree=(Object)adaptor.create(AMPER765);
              adaptor.addChild(root_0,AMPER765_tree);
            }
            pushFollow(FOLLOW_type_in_bound9340);
            type766=type();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,type766.getTree());
          }
        break;
default :
      break loop228;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
