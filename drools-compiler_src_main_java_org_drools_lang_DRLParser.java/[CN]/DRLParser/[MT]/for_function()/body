{
  DRLParser.for_function_return retval=new DRLParser.for_function_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID168=null;
  DRLParser.label_return label167=null;
  DRLParser.arguments_as_string_return arguments_as_string169=null;
  Object ID168_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
  RewriteRuleSubtreeStream stream_arguments_as_string=new RewriteRuleSubtreeStream(adaptor,"rule arguments_as_string");
  try {
{
      pushFollow(FOLLOW_label_in_for_function2926);
      label167=label();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_label.add(label167.getTree());
      ID168=(Token)match(input,ID,FOLLOW_ID_in_for_function2928);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(ID168);
      pushFollow(FOLLOW_arguments_as_string_in_for_function2930);
      arguments_as_string169=arguments_as_string();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_arguments_as_string.add(arguments_as_string169.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(stream_ID.nextNode(),root_1);
            adaptor.addChild(root_1,stream_label.nextTree());
            adaptor.addChild(root_1,stream_arguments_as_string.nextTree());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
