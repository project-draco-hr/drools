{
  DRLParser.for_function_return retval=new DRLParser.for_function_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID174=null;
  DRLParser.label_return label173=null;
  DRLParser.arguments_return arguments175=null;
  Object ID174_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_label_in_for_function2957);
      label173=label();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,label173.getTree());
      ID174=(Token)match(input,ID,FOLLOW_ID_in_for_function2959);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID174_tree=(Object)adaptor.create(ID174);
        adaptor.addChild(root_0,ID174_tree);
      }
      pushFollow(FOLLOW_arguments_in_for_function2961);
      arguments175=arguments();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,arguments175.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
