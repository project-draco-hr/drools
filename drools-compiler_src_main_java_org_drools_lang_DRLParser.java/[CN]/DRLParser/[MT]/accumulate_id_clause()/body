{
  DRLParser.accumulate_id_clause_return retval=new DRLParser.accumulate_id_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID186=null;
  DRLParser.paren_chunk_return paren_chunk187=null;
  Object ID186_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      ID186=(Token)match(input,ID,FOLLOW_ID_in_accumulate_id_clause3412);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(ID186);
      if (state.backtracking == 0) {
        helper.emit(ID186,DroolsEditorType.IDENTIFIER);
      }
      pushFollow(FOLLOW_paren_chunk_in_accumulate_id_clause3418);
      paren_chunk187=paren_chunk();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_paren_chunk.add(paren_chunk187.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_ID_CLAUSE,"VT_ACCUMULATE_ID_CLAUSE"),root_1);
            adaptor.addChild(root_1,stream_ID.nextNode());
            adaptor.addChild(root_1,stream_paren_chunk.nextTree());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
