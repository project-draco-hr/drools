{
  DRLParser.entrypoint_statement_return retval=new DRLParser.entrypoint_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.entry_point_key_return entry_point_key192=null;
  DRLParser.entrypoint_id_return entrypoint_id193=null;
  RewriteRuleSubtreeStream stream_entrypoint_id=new RewriteRuleSubtreeStream(adaptor,"rule entrypoint_id");
  RewriteRuleSubtreeStream stream_entry_point_key=new RewriteRuleSubtreeStream(adaptor,"rule entry_point_key");
  try {
{
      pushFollow(FOLLOW_entry_point_key_in_entrypoint_statement3488);
      entry_point_key192=entry_point_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_entry_point_key.add(entry_point_key192.getTree());
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_FROM_COLLECT);
      }
      pushFollow(FOLLOW_entrypoint_id_in_entrypoint_statement3496);
      entrypoint_id193=entrypoint_id();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_entrypoint_id.add(entrypoint_id193.getTree());
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(stream_entry_point_key.nextNode(),root_1);
            adaptor.addChild(root_1,stream_entrypoint_id.nextTree());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
