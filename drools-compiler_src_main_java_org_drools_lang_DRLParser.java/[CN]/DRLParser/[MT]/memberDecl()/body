{
  DRLParser.memberDecl_return retval=new DRLParser.memberDecl_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID721=null;
  Token ID723=null;
  DRLParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl718=null;
  DRLParser.methodDeclaration_return methodDeclaration719=null;
  DRLParser.void_key_return void_key720=null;
  DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest722=null;
  DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest724=null;
  DRLParser.fieldDeclaration_return fieldDeclaration725=null;
  DRLParser.interfaceDeclaration_return interfaceDeclaration726=null;
  DRLParser.classDeclaration_return classDeclaration727=null;
  Object ID721_tree=null;
  Object ID723_tree=null;
  try {
    int alt214=7;
switch (input.LA(1)) {
case LESS:
{
        alt214=1;
      }
    break;
case ID:
{
    int LA214_2=input.LA(2);
    if ((((synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))) || (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))) || (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| synpred74_DRL()))) {
      alt214=2;
    }
 else     if (((synpred75_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))))) {
      alt214=3;
    }
 else     if ((synpred76_DRL())) {
      alt214=4;
    }
 else     if ((((synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) || (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))) || synpred77_DRL()|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))) {
      alt214=5;
    }
 else     if (((synpred78_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))))) {
      alt214=6;
    }
 else     if (((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {
      alt214=7;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",214,2,input);
      throw nvae;
    }
  }
break;
case AT:
{
alt214=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",214,0,input);
throw nvae;
}
switch (alt214) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl9043);
genericMethodOrConstructorDecl718=genericMethodOrConstructorDecl();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,genericMethodOrConstructorDecl718.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_methodDeclaration_in_memberDecl9053);
methodDeclaration719=methodDeclaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,methodDeclaration719.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_void_key_in_memberDecl9058);
void_key720=void_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,void_key720.getTree());
ID721=(Token)match(input,ID,FOLLOW_ID_in_memberDecl9060);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID721_tree=(Object)adaptor.create(ID721);
adaptor.addChild(root_0,ID721_tree);
}
pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl9062);
voidMethodDeclaratorRest722=voidMethodDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,voidMethodDeclaratorRest722.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
ID723=(Token)match(input,ID,FOLLOW_ID_in_memberDecl9067);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID723_tree=(Object)adaptor.create(ID723);
adaptor.addChild(root_0,ID723_tree);
}
pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl9069);
constructorDeclaratorRest724=constructorDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,constructorDeclaratorRest724.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_fieldDeclaration_in_memberDecl9076);
fieldDeclaration725=fieldDeclaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,fieldDeclaration725.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl9084);
interfaceDeclaration726=interfaceDeclaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,interfaceDeclaration726.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_classDeclaration_in_memberDecl9089);
classDeclaration727=classDeclaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,classDeclaration727.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
