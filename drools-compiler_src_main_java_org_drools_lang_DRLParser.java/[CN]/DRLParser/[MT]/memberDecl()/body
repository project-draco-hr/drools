{
  DRLParser.memberDecl_return retval=new DRLParser.memberDecl_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID706=null;
  Token ID708=null;
  DRLParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl703=null;
  DRLParser.methodDeclaration_return methodDeclaration704=null;
  DRLParser.void_key_return void_key705=null;
  DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest707=null;
  DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest709=null;
  DRLParser.fieldDeclaration_return fieldDeclaration710=null;
  DRLParser.interfaceDeclaration_return interfaceDeclaration711=null;
  DRLParser.classDeclaration_return classDeclaration712=null;
  Object ID706_tree=null;
  Object ID708_tree=null;
  try {
    int alt212=7;
switch (input.LA(1)) {
case LESS:
{
        alt212=1;
      }
    break;
case ID:
{
    int LA212_2=input.LA(2);
    if ((((synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))) || (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))) || (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| synpred74_DRL()|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))|| (synpred74_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))) {
      alt212=2;
    }
 else     if (((synpred75_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))))) {
      alt212=3;
    }
 else     if ((synpred76_DRL())) {
      alt212=4;
    }
 else     if ((((synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) || (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))) || synpred77_DRL()|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred77_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))))) {
      alt212=5;
    }
 else     if (((synpred78_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))))) {
      alt212=6;
    }
 else     if (((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))))) {
      alt212=7;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",212,2,input);
      throw nvae;
    }
  }
break;
case AT:
{
alt212=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",212,0,input);
throw nvae;
}
switch (alt212) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl8940);
genericMethodOrConstructorDecl703=genericMethodOrConstructorDecl();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,genericMethodOrConstructorDecl703.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_methodDeclaration_in_memberDecl8950);
methodDeclaration704=methodDeclaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,methodDeclaration704.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_void_key_in_memberDecl8955);
void_key705=void_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,void_key705.getTree());
ID706=(Token)match(input,ID,FOLLOW_ID_in_memberDecl8957);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID706_tree=(Object)adaptor.create(ID706);
adaptor.addChild(root_0,ID706_tree);
}
pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl8959);
voidMethodDeclaratorRest707=voidMethodDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,voidMethodDeclaratorRest707.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
ID708=(Token)match(input,ID,FOLLOW_ID_in_memberDecl8964);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID708_tree=(Object)adaptor.create(ID708);
adaptor.addChild(root_0,ID708_tree);
}
pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl8966);
constructorDeclaratorRest709=constructorDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,constructorDeclaratorRest709.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_fieldDeclaration_in_memberDecl8973);
fieldDeclaration710=fieldDeclaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,fieldDeclaration710.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl8981);
interfaceDeclaration711=interfaceDeclaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,interfaceDeclaration711.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_classDeclaration_in_memberDecl8986);
classDeclaration712=classDeclaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,classDeclaration712.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
