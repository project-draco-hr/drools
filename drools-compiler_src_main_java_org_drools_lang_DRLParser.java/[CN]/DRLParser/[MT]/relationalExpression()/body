{
  DRLParser.relationalExpression_return retval=new DRLParser.relationalExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.shiftExpression_return shiftExpression383=null;
  DRLParser.relationalOp_return relationalOp384=null;
  DRLParser.shiftExpression_return shiftExpression385=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_shiftExpression_in_relationalExpression6357);
      shiftExpression383=shiftExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,shiftExpression383.getTree());
      loop130:       do {
        int alt130=2;
        alt130=dfa130.predict(input);
switch (alt130) {
case 1:
{
            pushFollow(FOLLOW_relationalOp_in_relationalExpression6366);
            relationalOp384=relationalOp();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,relationalOp384.getTree());
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression6368);
            shiftExpression385=shiftExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,shiftExpression385.getTree());
          }
        break;
default :
      break loop130;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
