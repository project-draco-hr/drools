{
  DRLParser.inlineListExpression_return retval=new DRLParser.inlineListExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE568=null;
  Token RIGHT_SQUARE570=null;
  DRLParser.expressionList_return expressionList569=null;
  Object LEFT_SQUARE568_tree=null;
  Object RIGHT_SQUARE570_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE568=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression7792);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE568_tree=(Object)adaptor.create(LEFT_SQUARE568);
        adaptor.addChild(root_0,LEFT_SQUARE568_tree);
      }
      int alt174=2;
      int LA174_0=input.LA(1);
      if ((LA174_0 == ID || LA174_0 == STRING || (LA174_0 >= BOOL && LA174_0 <= LEFT_PAREN) || LA174_0 == DECIMAL || LA174_0 == LESS || LA174_0 == LEFT_SQUARE || (LA174_0 >= NULL && LA174_0 <= FLOAT) || (LA174_0 >= INCR && LA174_0 <= NEGATION))) {
        alt174=1;
      }
switch (alt174) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_inlineListExpression7794);
          expressionList569=expressionList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expressionList569.getTree());
        }
      break;
  }
  RIGHT_SQUARE570=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression7797);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    RIGHT_SQUARE570_tree=(Object)adaptor.create(RIGHT_SQUARE570);
    adaptor.addChild(root_0,RIGHT_SQUARE570_tree);
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
