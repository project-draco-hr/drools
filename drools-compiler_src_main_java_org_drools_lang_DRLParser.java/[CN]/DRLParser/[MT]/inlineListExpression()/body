{
  DRLParser.inlineListExpression_return retval=new DRLParser.inlineListExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE455=null;
  Token RIGHT_SQUARE457=null;
  DRLParser.expressionList_return expressionList456=null;
  Object LEFT_SQUARE455_tree=null;
  Object RIGHT_SQUARE457_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE455=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression7074);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_SQUARE455_tree=(Object)adaptor.create(LEFT_SQUARE455);
        adaptor.addChild(root_0,LEFT_SQUARE455_tree);
      }
      int alt145=2;
      int LA145_0=input.LA(1);
      if ((LA145_0 == ID || LA145_0 == STRING || (LA145_0 >= BOOL && LA145_0 <= LEFT_PAREN) || LA145_0 == DECIMAL || LA145_0 == LESS || LA145_0 == LEFT_SQUARE || (LA145_0 >= NULL && LA145_0 <= FLOAT) || (LA145_0 >= INCR && LA145_0 <= NEGATION))) {
        alt145=1;
      }
switch (alt145) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_inlineListExpression7076);
          expressionList456=expressionList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expressionList456.getTree());
        }
      break;
  }
  RIGHT_SQUARE457=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression7079);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    RIGHT_SQUARE457_tree=(Object)adaptor.create(RIGHT_SQUARE457);
    adaptor.addChild(root_0,RIGHT_SQUARE457_tree);
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
