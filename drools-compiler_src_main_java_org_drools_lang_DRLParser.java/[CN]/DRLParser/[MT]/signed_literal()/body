{
  DRLParser.signed_literal_return retval=new DRLParser.signed_literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING250=null;
  Token BOOL254=null;
  Token NULL255=null;
  DRLParser.signed_decimal_return signed_decimal251=null;
  DRLParser.signed_hex_return signed_hex252=null;
  DRLParser.signed_float_return signed_float253=null;
  Object STRING250_tree=null;
  Object BOOL254_tree=null;
  Object NULL255_tree=null;
  try {
    int alt80=6;
switch (input.LA(1)) {
case STRING:
{
        alt80=1;
      }
    break;
case PLUS:
{
switch (input.LA(2)) {
case FLOAT:
{
        alt80=4;
      }
    break;
case HEX:
{
    alt80=3;
  }
break;
case DECIMAL:
{
alt80=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",80,2,input);
throw nvae;
}
}
break;
case MINUS:
{
switch (input.LA(2)) {
case HEX:
{
alt80=3;
}
break;
case FLOAT:
{
alt80=4;
}
break;
case DECIMAL:
{
alt80=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",80,3,input);
throw nvae;
}
}
break;
case DECIMAL:
{
alt80=2;
}
break;
case HEX:
{
alt80=3;
}
break;
case FLOAT:
{
alt80=4;
}
break;
case BOOL:
{
alt80=5;
}
break;
case NULL:
{
alt80=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",80,0,input);
throw nvae;
}
switch (alt80) {
case 1:
{
root_0=(Object)adaptor.nil();
STRING250=(Token)match(input,STRING,FOLLOW_STRING_in_signed_literal4135);
if (state.failed) return retval;
if (state.backtracking == 0) {
STRING250_tree=(Object)adaptor.create(STRING250);
adaptor.addChild(root_0,STRING250_tree);
}
if (state.backtracking == 0) {
helper.emit(STRING250,DroolsEditorType.STRING_CONST);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_signed_decimal_in_signed_literal4172);
signed_decimal251=signed_decimal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,signed_decimal251.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_signed_hex_in_signed_literal4190);
signed_hex252=signed_hex();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,signed_hex252.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_signed_float_in_signed_literal4208);
signed_float253=signed_float();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,signed_float253.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
BOOL254=(Token)match(input,BOOL,FOLLOW_BOOL_in_signed_literal4226);
if (state.failed) return retval;
if (state.backtracking == 0) {
BOOL254_tree=(Object)adaptor.create(BOOL254);
adaptor.addChild(root_0,BOOL254_tree);
}
if (state.backtracking == 0) {
helper.emit(BOOL254,DroolsEditorType.BOOLEAN_CONST);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
NULL255=(Token)match(input,NULL,FOLLOW_NULL_in_signed_literal4265);
if (state.failed) return retval;
if (state.backtracking == 0) {
NULL255_tree=(Object)adaptor.create(NULL255);
adaptor.addChild(root_0,NULL255_tree);
}
if (state.backtracking == 0) {
helper.emit(NULL255,DroolsEditorType.NULL_CONST);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
