{
  DRLParser.signed_literal_return retval=new DRLParser.signed_literal_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING284=null;
  Token BOOL288=null;
  Token NULL289=null;
  DRLParser.signed_decimal_return signed_decimal285=null;
  DRLParser.signed_hex_return signed_hex286=null;
  DRLParser.signed_float_return signed_float287=null;
  Object STRING284_tree=null;
  Object BOOL288_tree=null;
  Object NULL289_tree=null;
  try {
    int alt88=6;
switch (input.LA(1)) {
case STRING:
{
        alt88=1;
      }
    break;
case PLUS:
{
switch (input.LA(2)) {
case HEX:
{
        alt88=3;
      }
    break;
case FLOAT:
{
    alt88=4;
  }
break;
case DECIMAL:
{
alt88=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",88,2,input);
throw nvae;
}
}
break;
case MINUS:
{
switch (input.LA(2)) {
case HEX:
{
alt88=3;
}
break;
case DECIMAL:
{
alt88=2;
}
break;
case FLOAT:
{
alt88=4;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",88,3,input);
throw nvae;
}
}
break;
case DECIMAL:
{
alt88=2;
}
break;
case HEX:
{
alt88=3;
}
break;
case FLOAT:
{
alt88=4;
}
break;
case BOOL:
{
alt88=5;
}
break;
case NULL:
{
alt88=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",88,0,input);
throw nvae;
}
switch (alt88) {
case 1:
{
root_0=(Object)adaptor.nil();
STRING284=(Token)match(input,STRING,FOLLOW_STRING_in_signed_literal4623);
if (state.failed) return retval;
if (state.backtracking == 0) {
STRING284_tree=(Object)adaptor.create(STRING284);
adaptor.addChild(root_0,STRING284_tree);
}
if (state.backtracking == 0) {
helper.emit(STRING284,DroolsEditorType.STRING_CONST);
}
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_signed_decimal_in_signed_literal4660);
signed_decimal285=signed_decimal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,signed_decimal285.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_signed_hex_in_signed_literal4678);
signed_hex286=signed_hex();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,signed_hex286.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_signed_float_in_signed_literal4696);
signed_float287=signed_float();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,signed_float287.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
BOOL288=(Token)match(input,BOOL,FOLLOW_BOOL_in_signed_literal4714);
if (state.failed) return retval;
if (state.backtracking == 0) {
BOOL288_tree=(Object)adaptor.create(BOOL288);
adaptor.addChild(root_0,BOOL288_tree);
}
if (state.backtracking == 0) {
helper.emit(BOOL288,DroolsEditorType.BOOLEAN_CONST);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
NULL289=(Token)match(input,NULL,FOLLOW_NULL_in_signed_literal4753);
if (state.failed) return retval;
if (state.backtracking == 0) {
NULL289_tree=(Object)adaptor.create(NULL289);
adaptor.addChild(root_0,NULL289_tree);
}
if (state.backtracking == 0) {
helper.emit(NULL289,DroolsEditorType.NULL_CONST);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
