{
  BaseDescr pd=null;
  BaseDescr fe=null;
  BaseDescr f=null;
  pd=null;
  boolean multi=false;
  try {
    int alt29=2;
    final int LA29_0=this.input.LA(1);
    if ((LA29_0 == LEFT_PAREN)) {
      alt29=1;
    }
 else     if ((LA29_0 == ID)) {
      alt29=2;
    }
 else {
      if (this.backtracking > 0) {
        this.failed=true;
        return pd;
      }
      final NoViableAltException nvae=new NoViableAltException("839:2: fact_expression[String id] returns [BaseDescr pd] : ( ( '(' fact_expression[id] ')' )=> '(' fe= fact_expression[id] ')' | f= fact ( ( (OR|'||') fact )=> (OR|'||')f= fact )* );",29,0,this.input);
      throw nvae;
    }
switch (alt29) {
case 1:
{
        match(this.input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_expression2166);
        if (this.failed) {
          return pd;
        }
        pushFollow(FOLLOW_fact_expression_in_fact_expression2170);
        fe=fact_expression(id);
        this._fsp--;
        if (this.failed) {
          return pd;
        }
        match(this.input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_expression2173);
        if (this.failed) {
          return pd;
        }
        if (this.backtracking == 0) {
          pd=fe;
        }
      }
    break;
case 2:
{
    pushFollow(FOLLOW_fact_in_fact_expression2184);
    f=fact();
    this._fsp--;
    if (this.failed) {
      return pd;
    }
    if (this.backtracking == 0) {
      ((ColumnDescr)f).setIdentifier(id);
      pd=f;
    }
    loop28:     do {
      int alt28=2;
      final int LA28_0=this.input.LA(1);
      if ((LA28_0 == OR || LA28_0 == 68)) {
        if ((synpred44())) {
          alt28=1;
        }
      }
switch (alt28) {
case 1:
{
          if (this.input.LA(1) == OR || this.input.LA(1) == 68) {
            this.input.consume();
            this.errorRecovery=false;
            this.failed=false;
          }
 else {
            if (this.backtracking > 0) {
              this.failed=true;
              return pd;
            }
            final MismatchedSetException mse=new MismatchedSetException(null,this.input);
            recoverFromMismatchedSet(this.input,mse,FOLLOW_set_in_fact_expression2197);
            throw mse;
          }
          if (this.backtracking == 0) {
            if (!multi) {
              final BaseDescr first=pd;
              pd=new OrDescr();
              ((OrDescr)pd).addDescr(first);
              multi=true;
            }
          }
          pushFollow(FOLLOW_fact_in_fact_expression2214);
          f=fact();
          this._fsp--;
          if (this.failed) {
            return pd;
          }
          if (this.backtracking == 0) {
            ((ColumnDescr)f).setIdentifier(id);
            ((OrDescr)pd).addDescr(f);
          }
        }
      break;
default :
    break loop28;
}
}
 while (true);
}
break;
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return pd;
}
