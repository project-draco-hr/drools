{
  BaseDescr pd=null;
  BaseDescr fe=null;
  BaseDescr f=null;
  pd=null;
  boolean multi=false;
  try {
    int alt35=2;
    int LA35_0=input.LA(1);
    if ((LA35_0 == LEFT_PAREN)) {
      alt35=1;
    }
 else     if ((LA35_0 == ID)) {
      alt35=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return pd;
      }
      NoViableAltException nvae=new NoViableAltException("907:2: fact_expression[String id] returns [BaseDescr pd] : ( LEFT_PAREN fe= fact_expression[id] RIGHT_PAREN | f= fact ( ( OR | DOUBLE_PIPE ) f= fact )* );",35,0,input);
      throw nvae;
    }
switch (alt35) {
case 1:
{
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_expression2279);
        if (failed)         return pd;
        pushFollow(FOLLOW_fact_expression_in_fact_expression2283);
        fe=fact_expression(id);
        _fsp--;
        if (failed)         return pd;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_expression2286);
        if (failed)         return pd;
        if (backtracking == 0) {
          pd=fe;
        }
      }
    break;
case 2:
{
    pushFollow(FOLLOW_fact_in_fact_expression2297);
    f=fact();
    _fsp--;
    if (failed)     return pd;
    if (backtracking == 0) {
      ((PatternDescr)f).setIdentifier(id);
      pd=f;
    }
    loop34:     do {
      int alt34=2;
      int LA34_0=input.LA(1);
      if (((LA34_0 >= OR && LA34_0 <= DOUBLE_PIPE))) {
        int LA34_7=input.LA(2);
        if ((synpred52())) {
          alt34=1;
        }
      }
switch (alt34) {
case 1:
{
          if ((input.LA(1) >= OR && input.LA(1) <= DOUBLE_PIPE)) {
            input.consume();
            errorRecovery=false;
            failed=false;
          }
 else {
            if (backtracking > 0) {
              failed=true;
              return pd;
            }
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_fact_expression2309);
            throw mse;
          }
          if (backtracking == 0) {
            if (!multi) {
              BaseDescr first=pd;
              pd=new OrDescr();
              ((OrDescr)pd).addDescr(first);
              multi=true;
            }
          }
          pushFollow(FOLLOW_fact_in_fact_expression2327);
          f=fact();
          _fsp--;
          if (failed)           return pd;
          if (backtracking == 0) {
            ((PatternDescr)f).setIdentifier(id);
            ((OrDescr)pd).addDescr(f);
          }
        }
      break;
default :
    break loop34;
}
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return pd;
}
