{
  DRLParser.forVarControl_return retval=new DRLParser.forVarControl_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID453=null;
  Token COLON454=null;
  DRLParser.variableModifier_return variableModifier451=null;
  DRLParser.type_return type452=null;
  DRLParser.expression_return expression455=null;
  Object ID453_tree=null;
  Object COLON454_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      loop144:       do {
        int alt144=2;
        int LA144_0=input.LA(1);
        if ((LA144_0 == ID)) {
          int LA144_1=input.LA(2);
          if ((LA144_1 == ID)) {
            int LA144_3=input.LA(3);
            if (((LA144_3 >= ID && LA144_3 <= DOT) || LA144_3 == LESS || LA144_3 == LEFT_SQUARE) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
              alt144=1;
            }
          }
        }
switch (alt144) {
case 1:
{
            pushFollow(FOLLOW_variableModifier_in_forVarControl6689);
            variableModifier451=variableModifier();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,variableModifier451.getTree());
          }
        break;
default :
      break loop144;
  }
}
 while (true);
pushFollow(FOLLOW_type_in_forVarControl6692);
type452=type();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,type452.getTree());
ID453=(Token)match(input,ID,FOLLOW_ID_in_forVarControl6694);
if (state.failed) return retval;
if (state.backtracking == 0) {
  ID453_tree=(Object)adaptor.create(ID453);
  adaptor.addChild(root_0,ID453_tree);
}
COLON454=(Token)match(input,COLON,FOLLOW_COLON_in_forVarControl6696);
if (state.failed) return retval;
if (state.backtracking == 0) {
  COLON454_tree=(Object)adaptor.create(COLON454);
  adaptor.addChild(root_0,COLON454_tree);
}
pushFollow(FOLLOW_expression_in_forVarControl6698);
expression455=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression455.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
