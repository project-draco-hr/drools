{
  DRLParser.forVarControl_return retval=new DRLParser.forVarControl_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID438=null;
  Token COLON439=null;
  DRLParser.variableModifier_return variableModifier436=null;
  DRLParser.type_return type437=null;
  DRLParser.expression_return expression440=null;
  Object ID438_tree=null;
  Object COLON439_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      loop142:       do {
        int alt142=2;
        int LA142_0=input.LA(1);
        if ((LA142_0 == ID)) {
          int LA142_1=input.LA(2);
          if ((LA142_1 == ID)) {
            int LA142_3=input.LA(3);
            if (((LA142_3 >= ID && LA142_3 <= DOT) || LA142_3 == LESS || LA142_3 == LEFT_SQUARE) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
              alt142=1;
            }
          }
        }
switch (alt142) {
case 1:
{
            pushFollow(FOLLOW_variableModifier_in_forVarControl6586);
            variableModifier436=variableModifier();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,variableModifier436.getTree());
          }
        break;
default :
      break loop142;
  }
}
 while (true);
pushFollow(FOLLOW_type_in_forVarControl6589);
type437=type();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,type437.getTree());
ID438=(Token)match(input,ID,FOLLOW_ID_in_forVarControl6591);
if (state.failed) return retval;
if (state.backtracking == 0) {
  ID438_tree=(Object)adaptor.create(ID438);
  adaptor.addChild(root_0,ID438_tree);
}
COLON439=(Token)match(input,COLON,FOLLOW_COLON_in_forVarControl6593);
if (state.failed) return retval;
if (state.backtracking == 0) {
  COLON439_tree=(Object)adaptor.create(COLON439);
  adaptor.addChild(root_0,COLON439_tree);
}
pushFollow(FOLLOW_expression_in_forVarControl6595);
expression440=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression440.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
