{
  RestrictionDescr rd=null;
  Token ID52=null;
  String lc=null;
  String rvc=null;
  rd=null;
  try {
{
      int alt69=4;
switch (input.LA(1)) {
case ID:
{
          int LA69_1=input.LA(2);
          if ((LA69_1 == EOF || (LA69_1 >= COMMA && LA69_1 <= RIGHT_PAREN) || LA69_1 == DOUBLE_PIPE || LA69_1 == DOUBLE_AMPER)) {
            alt69=1;
          }
 else           if ((LA69_1 == DOT)) {
            alt69=2;
          }
 else {
            if (backtracking > 0) {
              failed=true;
              return rd;
            }
            NoViableAltException nvae=new NoViableAltException("1389:3: ( ID | lc= enum_constraint | lc= literal_constraint | rvc= retval_constraint )",69,1,input);
            throw nvae;
          }
        }
      break;
case STRING:
case BOOL:
case INT:
case FLOAT:
case NULL:
{
      alt69=3;
    }
  break;
case LEFT_PAREN:
{
  alt69=4;
}
break;
default :
if (backtracking > 0) {
failed=true;
return rd;
}
NoViableAltException nvae=new NoViableAltException("1389:3: ( ID | lc= enum_constraint | lc= literal_constraint | rvc= retval_constraint )",69,0,input);
throw nvae;
}
switch (alt69) {
case 1:
{
ID52=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_expression_value3949);
if (failed) return rd;
if (backtracking == 0) {
rd=new VariableRestrictionDescr(op,ID52.getText());
}
}
break;
case 2:
{
pushFollow(FOLLOW_enum_constraint_in_expression_value3962);
lc=enum_constraint();
_fsp--;
if (failed) return rd;
if (backtracking == 0) {
rd=new QualifiedIdentifierRestrictionDescr(op,lc);
}
}
break;
case 3:
{
pushFollow(FOLLOW_literal_constraint_in_expression_value3982);
lc=literal_constraint();
_fsp--;
if (failed) return rd;
if (backtracking == 0) {
rd=new LiteralRestrictionDescr(op,lc);
}
}
break;
case 4:
{
pushFollow(FOLLOW_retval_constraint_in_expression_value3996);
rvc=retval_constraint();
_fsp--;
if (failed) return rd;
if (backtracking == 0) {
rd=new ReturnValueRestrictionDescr(op,rvc);
}
}
break;
}
if (backtracking == 0) {
if (rd != null) {
base.addRestriction(rd);
}
location.setType(Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rd;
}
