{
  DRLParser.expressionList_return retval=new DRLParser.expressionList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA546=null;
  DRLParser.expression_return expression545=null;
  DRLParser.expression_return expression547=null;
  Object COMMA546_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_expression_in_expressionList7776);
      expression545=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression545.getTree());
      loop174:       do {
        int alt174=2;
        int LA174_0=input.LA(1);
        if ((LA174_0 == COMMA)) {
          alt174=1;
        }
switch (alt174) {
case 1:
{
            COMMA546=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList7779);
            if (state.failed)             return retval;
            pushFollow(FOLLOW_expression_in_expressionList7782);
            expression547=expression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,expression547.getTree());
          }
        break;
default :
      break loop174;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
