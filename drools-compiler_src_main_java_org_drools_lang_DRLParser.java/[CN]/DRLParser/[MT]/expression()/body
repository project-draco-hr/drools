{
  DRLParser.expression_return retval=new DRLParser.expression_return();
  retval.start=input.LT(1);
  int expression_StartIndex=input.index();
  Object root_0=null;
  DRLParser.conditionalExpression_return conditionalExpression324=null;
  DRLParser.assignmentOperator_return assignmentOperator325=null;
  DRLParser.expression_return expression326=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,107)) {
      return retval;
    }
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_conditionalExpression_in_expression5592);
      conditionalExpression324=conditionalExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,conditionalExpression324.getTree());
      int alt114=2;
      alt114=dfa114.predict(input);
switch (alt114) {
case 1:
{
          pushFollow(FOLLOW_assignmentOperator_in_expression5601);
          assignmentOperator325=assignmentOperator();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,assignmentOperator325.getTree());
          pushFollow(FOLLOW_expression_in_expression5603);
          expression326=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,expression326.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
  memoize(input,107,expression_StartIndex);
}
}
return retval;
}
