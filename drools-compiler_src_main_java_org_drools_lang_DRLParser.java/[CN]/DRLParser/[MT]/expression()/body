{
  DRLParser.expression_return retval=new DRLParser.expression_return();
  retval.start=input.LT(1);
  int expression_StartIndex=input.index();
  Object root_0=null;
  DRLParser.conditionalExpression_return conditionalExpression354=null;
  DRLParser.assignmentOperator_return assignmentOperator355=null;
  DRLParser.expression_return expression356=null;
  RewriteRuleSubtreeStream stream_assignmentOperator=new RewriteRuleSubtreeStream(adaptor,"rule assignmentOperator");
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,116)) {
      return retval;
    }
{
      pushFollow(FOLLOW_conditionalExpression_in_expression6094);
      conditionalExpression354=conditionalExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_conditionalExpression.add(conditionalExpression354.getTree());
      int alt121=2;
      alt121=dfa121.predict(input);
switch (alt121) {
case 1:
{
          pushFollow(FOLLOW_assignmentOperator_in_expression6103);
          assignmentOperator355=assignmentOperator();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_assignmentOperator.add(assignmentOperator355.getTree());
          pushFollow(FOLLOW_expression_in_expression6105);
          expression356=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_expression.add(expression356.getTree());
        }
      break;
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_EXPRESSION,"VT_EXPRESSION"),root_1);
        adaptor.addChild(root_1,stream_conditionalExpression.nextTree());
        if (stream_expression.hasNext() || stream_assignmentOperator.hasNext()) {
          adaptor.addChild(root_1,stream_assignmentOperator.nextTree());
          adaptor.addChild(root_1,stream_expression.nextTree());
        }
        stream_expression.reset();
        stream_assignmentOperator.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
  memoize(input,116,expression_StartIndex);
}
}
return retval;
}
