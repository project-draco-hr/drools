{
  DRLParser.fact_return retval=new DRLParser.fact_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN204=null;
  Token RIGHT_PAREN206=null;
  DRLParser.pattern_type_return pattern_type203=null;
  DRLParser.constraints_return constraints205=null;
  Object LEFT_PAREN204_tree=null;
  Object RIGHT_PAREN206_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
  RewriteRuleSubtreeStream stream_pattern_type=new RewriteRuleSubtreeStream(adaptor,"rule pattern_type");
  boolean isFailedOnConstraints=true;
  helper.pushParaphrases(DroolsParaphraseTypes.PATTERN);
  try {
{
      pushFollow(FOLLOW_pattern_type_in_fact3773);
      pattern_type203=pattern_type();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_pattern_type.add(pattern_type203.getTree());
      LEFT_PAREN204=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact3778);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN204);
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN204,DroolsEditorType.SYMBOL);
      }
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);
      }
      int alt68=2;
      int LA68_0=input.LA(1);
      if ((LA68_0 == ID || LA68_0 == LEFT_PAREN)) {
        alt68=1;
      }
switch (alt68) {
case 1:
{
          pushFollow(FOLLOW_constraints_in_fact3789);
          constraints205=constraints();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_constraints.add(constraints205.getTree());
        }
      break;
  }
  RIGHT_PAREN206=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact3795);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_RIGHT_PAREN.add(RIGHT_PAREN206);
  if (state.backtracking == 0) {
    isFailedOnConstraints=false;
  }
  if (state.backtracking == 0) {
    if ((RIGHT_PAREN206 != null ? RIGHT_PAREN206.getText() : null).equals(")")) {
      helper.emit(RIGHT_PAREN206,DroolsEditorType.SYMBOL);
      helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
    }
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT,"VT_FACT"),root_1);
        adaptor.addChild(root_1,stream_pattern_type.nextTree());
        if (stream_constraints.hasNext()) {
          adaptor.addChild(root_1,stream_constraints.nextTree());
        }
        stream_constraints.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
  helper.popParaphrases();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (helper.isEditorInterfaceEnabled && isFailedOnConstraints && input.LA(1) == EOF && input.get(input.index() - 1).getType() == WS) {
  if (!(helper.getActiveSentence().getContent().getLast() instanceof Integer) && input.LA(-1) != COLON) {
    helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  }
}
}
return retval;
}
