{
  fact_return retval=new fact_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN207=null;
  Token RIGHT_PAREN209=null;
  pattern_type_return pattern_type206=null;
  constraints_return constraints208=null;
  Object LEFT_PAREN207_tree=null;
  Object RIGHT_PAREN209_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_pattern_type=new RewriteRuleSubtreeStream(adaptor,"rule pattern_type");
  RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
  pushParaphrases(DroolsParaphareseTypes.PATTERN);
  try {
{
      pushFollow(FOLLOW_pattern_type_in_fact3050);
      pattern_type206=pattern_type();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_pattern_type.add(pattern_type206.getTree());
      LEFT_PAREN207=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact3052);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN207);
      int alt73=2;
      int LA73_0=input.LA(1);
      if ((LA73_0 == ID || LA73_0 == LEFT_PAREN)) {
        alt73=1;
      }
switch (alt73) {
case 1:
{
          pushFollow(FOLLOW_constraints_in_fact3054);
          constraints208=constraints();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_constraints.add(constraints208.getTree());
        }
      break;
  }
  RIGHT_PAREN209=(Token)input.LT(1);
  match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact3057);
  if (failed)   return retval;
  if (backtracking == 0)   stream_RIGHT_PAREN.add(RIGHT_PAREN209);
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_FACT,"VT_FACT"),root_1);
        adaptor.addChild(root_1,stream_pattern_type.next());
        if (stream_constraints.hasNext()) {
          adaptor.addChild(root_1,stream_constraints.next());
        }
        stream_constraints.reset();
        adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
  paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
