{
  BaseDescr d=null;
  Token loc=null;
  Token endLoc=null;
  String id=null;
  d=null;
  PatternDescr pattern=null;
  try {
{
      if (backtracking == 0) {
        pattern=new PatternDescr();
        d=pattern;
      }
      pushFollow(FOLLOW_dotted_name_in_fact2509);
      id=dotted_name(d);
      _fsp--;
      if (failed)       return d;
      if (backtracking == 0) {
        pattern.setObjectType(id);
        pattern.setEndCharacter(-1);
      }
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact2523);
      if (failed)       return d;
      if (backtracking == 0) {
        location.setType(Location.LOCATION_LHS_INSIDE_CONDITION_START);
        location.setProperty(Location.LOCATION_PROPERTY_CLASS_NAME,id);
        pattern.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        pattern.setLeftParentCharacter(((CommonToken)loc).getStartIndex());
      }
      int alt40=2;
      int LA40_0=input.LA(1);
      if (((LA40_0 >= ATTRIBUTES && LA40_0 <= ID) || (LA40_0 >= END && LA40_0 <= WHEN) || LA40_0 == ENABLED || LA40_0 == SALIENCE || LA40_0 == DURATION || LA40_0 == ACCUMULATE || (LA40_0 >= INIT && LA40_0 <= OR) || (LA40_0 >= EVAL && LA40_0 <= IN) || LA40_0 == NULL || (LA40_0 >= AND && LA40_0 <= THEN))) {
        alt40=1;
      }
switch (alt40) {
case 1:
{
          pushFollow(FOLLOW_constraints_in_fact2533);
          constraints(pattern);
          _fsp--;
          if (failed)           return d;
        }
      break;
  }
  endLoc=(Token)input.LT(1);
  match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact2546);
  if (failed)   return d;
  if (backtracking == 0) {
    if (endLoc.getType() == RIGHT_PAREN) {
      this.location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
      pattern.setEndLocation(offset(endLoc.getLine()),endLoc.getCharPositionInLine());
      pattern.setEndCharacter(((CommonToken)endLoc).getStopIndex());
      pattern.setRightParentCharacter(((CommonToken)endLoc).getStartIndex());
    }
  }
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
