{
  DRLParser.parExpression_return retval=new DRLParser.parExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN595=null;
  Token RIGHT_PAREN597=null;
  DRLParser.expression_return expression596=null;
  Object LEFT_PAREN595_tree=null;
  Object RIGHT_PAREN597_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_PAREN595=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parExpression7990);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_PAREN595_tree=(Object)adaptor.create(LEFT_PAREN595);
        adaptor.addChild(root_0,LEFT_PAREN595_tree);
      }
      pushFollow(FOLLOW_expression_in_parExpression7992);
      expression596=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression596.getTree());
      RIGHT_PAREN597=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parExpression7994);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_PAREN597_tree=(Object)adaptor.create(RIGHT_PAREN597);
        adaptor.addChild(root_0,RIGHT_PAREN597_tree);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
