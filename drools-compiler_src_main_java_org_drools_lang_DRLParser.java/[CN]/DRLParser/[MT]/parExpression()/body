{
  DRLParser.parExpression_return retval=new DRLParser.parExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN437=null;
  Token RIGHT_PAREN439=null;
  DRLParser.expression_return expression438=null;
  Object LEFT_PAREN437_tree=null;
  Object RIGHT_PAREN439_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_PAREN437=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parExpression6629);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_PAREN437_tree=(Object)adaptor.create(LEFT_PAREN437);
        adaptor.addChild(root_0,LEFT_PAREN437_tree);
      }
      pushFollow(FOLLOW_expression_in_parExpression6631);
      expression438=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression438.getTree());
      RIGHT_PAREN439=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parExpression6633);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_PAREN439_tree=(Object)adaptor.create(RIGHT_PAREN439);
        adaptor.addChild(root_0,RIGHT_PAREN439_tree);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
