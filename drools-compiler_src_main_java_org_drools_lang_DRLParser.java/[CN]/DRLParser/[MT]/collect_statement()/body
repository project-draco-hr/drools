{
  DRLParser.collect_statement_return retval=new DRLParser.collect_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLLECT202=null;
  Token LEFT_PAREN203=null;
  Token RIGHT_PAREN205=null;
  DRLParser.pattern_source_return pattern_source204=null;
  Object COLLECT202_tree=null;
  Object LEFT_PAREN203_tree=null;
  Object RIGHT_PAREN205_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_COLLECT=new RewriteRuleTokenStream(adaptor,"token COLLECT");
  RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
  try {
{
      COLLECT202=(Token)match(input,COLLECT,FOLLOW_COLLECT_in_collect_statement3606);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_COLLECT.add(COLLECT202);
      if (state.backtracking == 0) {
        helper.emit(COLLECT202,DroolsEditorType.KEYWORD);
      }
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_FROM_COLLECT);
      }
      LEFT_PAREN203=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_collect_statement3615);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN203);
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN203,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_pattern_source_in_collect_statement3622);
      pattern_source204=pattern_source();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_pattern_source.add(pattern_source204.getTree());
      RIGHT_PAREN205=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_collect_statement3627);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_RIGHT_PAREN.add(RIGHT_PAREN205);
      if (state.backtracking == 0) {
        helper.emit(RIGHT_PAREN205,DroolsEditorType.SYMBOL);
      }
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(stream_COLLECT.nextNode(),root_1);
            adaptor.addChild(root_1,stream_pattern_source.nextTree());
            adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
