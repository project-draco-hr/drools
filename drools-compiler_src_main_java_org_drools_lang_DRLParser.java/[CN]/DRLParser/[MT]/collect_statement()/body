{
  collect_statement_return retval=new collect_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN192=null;
  Token RIGHT_PAREN194=null;
  collect_key_return collect_key191=null;
  pattern_source_return pattern_source193=null;
  Object LEFT_PAREN192_tree=null;
  Object RIGHT_PAREN194_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_collect_key=new RewriteRuleSubtreeStream(adaptor,"rule collect_key");
  RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
  try {
{
      pushFollow(FOLLOW_collect_key_in_collect_statement2727);
      collect_key191=collect_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_collect_key.add(collect_key191.getTree());
      LEFT_PAREN192=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_collect_statement2731);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN192);
      pushFollow(FOLLOW_pattern_source_in_collect_statement2733);
      pattern_source193=pattern_source();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_pattern_source.add(pattern_source193.getTree());
      RIGHT_PAREN194=(Token)input.LT(1);
      match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_collect_statement2735);
      if (failed)       return retval;
      if (backtracking == 0)       stream_RIGHT_PAREN.add(RIGHT_PAREN194);
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(stream_collect_key.nextNode(),root_1);
            adaptor.addChild(root_1,stream_pattern_source.next());
            adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
