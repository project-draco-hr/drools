{
  collect_statement_return retval=new collect_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLLECT185=null;
  Token LEFT_PAREN186=null;
  Token RIGHT_PAREN188=null;
  pattern_source_return pattern_source187=null;
  Object COLLECT185_tree=null;
  Object LEFT_PAREN186_tree=null;
  Object RIGHT_PAREN188_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_COLLECT=new RewriteRuleTokenStream(adaptor,"token COLLECT");
  RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
  try {
{
      COLLECT185=(Token)input.LT(1);
      match(input,COLLECT,FOLLOW_COLLECT_in_collect_statement3263);
      if (failed)       return retval;
      if (backtracking == 0)       stream_COLLECT.add(COLLECT185);
      if (backtracking == 0) {
        emit(COLLECT185,DroolsEditorType.KEYWORD);
      }
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_FROM_COLLECT);
      }
      LEFT_PAREN186=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_collect_statement3272);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN186);
      if (backtracking == 0) {
        emit(LEFT_PAREN186,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_pattern_source_in_collect_statement3279);
      pattern_source187=pattern_source();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_pattern_source.add(pattern_source187.getTree());
      RIGHT_PAREN188=(Token)input.LT(1);
      match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_collect_statement3284);
      if (failed)       return retval;
      if (backtracking == 0)       stream_RIGHT_PAREN.add(RIGHT_PAREN188);
      if (backtracking == 0) {
        emit(RIGHT_PAREN188,DroolsEditorType.SYMBOL);
      }
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
      }
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(stream_COLLECT.next(),root_1);
            adaptor.addChild(root_1,stream_pattern_source.next());
            adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
