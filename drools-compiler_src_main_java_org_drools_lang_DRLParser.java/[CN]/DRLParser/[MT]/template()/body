{
  template_return retval=new template_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON47=null;
  Token END49=null;
  Token SEMICOLON50=null;
  template_key_return template_key45=null;
  template_id_return template_id46=null;
  template_slot_return template_slot48=null;
  Object SEMICOLON47_tree=null;
  Object END49_tree=null;
  Object SEMICOLON50_tree=null;
  RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_template_id=new RewriteRuleSubtreeStream(adaptor,"rule template_id");
  RewriteRuleSubtreeStream stream_template_slot=new RewriteRuleSubtreeStream(adaptor,"rule template_slot");
  RewriteRuleSubtreeStream stream_template_key=new RewriteRuleSubtreeStream(adaptor,"rule template_key");
  pushParaphrases(DroolsParaphareseTypes.TEMPLATE);
  try {
{
      pushFollow(FOLLOW_template_key_in_template1020);
      template_key45=template_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_template_key.add(template_key45.getTree());
      pushFollow(FOLLOW_template_id_in_template1022);
      template_id46=template_id();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_template_id.add(template_id46.getTree());
      int alt19=2;
      int LA19_0=input.LA(1);
      if ((LA19_0 == SEMICOLON)) {
        alt19=1;
      }
switch (alt19) {
case 1:
{
          SEMICOLON47=(Token)input.LT(1);
          match(input,SEMICOLON,FOLLOW_SEMICOLON_in_template1024);
          if (failed)           return retval;
          if (backtracking == 0)           stream_SEMICOLON.add(SEMICOLON47);
        }
      break;
  }
  int cnt20=0;
  loop20:   do {
    int alt20=2;
    int LA20_0=input.LA(1);
    if ((LA20_0 == ID)) {
      alt20=1;
    }
switch (alt20) {
case 1:
{
        pushFollow(FOLLOW_template_slot_in_template1029);
        template_slot48=template_slot();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_template_slot.add(template_slot48.getTree());
      }
    break;
default :
  if (cnt20 >= 1)   break loop20;
if (backtracking > 0) {
  failed=true;
  return retval;
}
EarlyExitException eee=new EarlyExitException(20,input);
throw eee;
}
cnt20++;
}
 while (true);
END49=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_template1034);
if (failed) return retval;
if (backtracking == 0) stream_END.add(END49);
int alt21=2;
int LA21_0=input.LA(1);
if ((LA21_0 == SEMICOLON)) {
alt21=1;
}
switch (alt21) {
case 1:
{
SEMICOLON50=(Token)input.LT(1);
match(input,SEMICOLON,FOLLOW_SEMICOLON_in_template1036);
if (failed) return retval;
if (backtracking == 0) stream_SEMICOLON.add(SEMICOLON50);
}
break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_template_key.nextNode(),root_1);
adaptor.addChild(root_1,stream_template_id.next());
if (!(stream_template_slot.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_template_slot.hasNext()) {
adaptor.addChild(root_1,stream_template_slot.next());
}
stream_template_slot.reset();
adaptor.addChild(root_1,stream_END.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
