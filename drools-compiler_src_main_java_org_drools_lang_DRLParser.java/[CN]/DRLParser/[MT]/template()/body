{
  template_return retval=new template_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON63=null;
  Token END65=null;
  Token SEMICOLON66=null;
  template_key_return template_key61=null;
  template_id_return template_id62=null;
  template_slot_return template_slot64=null;
  Object SEMICOLON63_tree=null;
  Object END65_tree=null;
  Object SEMICOLON66_tree=null;
  RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_template_id=new RewriteRuleSubtreeStream(adaptor,"rule template_id");
  RewriteRuleSubtreeStream stream_template_slot=new RewriteRuleSubtreeStream(adaptor,"rule template_slot");
  RewriteRuleSubtreeStream stream_template_key=new RewriteRuleSubtreeStream(adaptor,"rule template_key");
  pushParaphrases(DroolsParaphareseTypes.TEMPLATE);
  try {
{
      pushFollow(FOLLOW_template_key_in_template1215);
      template_key61=template_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_template_key.add(template_key61.getTree());
      pushFollow(FOLLOW_template_id_in_template1217);
      template_id62=template_id();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_template_id.add(template_id62.getTree());
      int alt23=2;
      int LA23_0=input.LA(1);
      if ((LA23_0 == SEMICOLON)) {
        alt23=1;
      }
switch (alt23) {
case 1:
{
          SEMICOLON63=(Token)input.LT(1);
          match(input,SEMICOLON,FOLLOW_SEMICOLON_in_template1219);
          if (failed)           return retval;
          if (backtracking == 0)           stream_SEMICOLON.add(SEMICOLON63);
        }
      break;
  }
  int cnt24=0;
  loop24:   do {
    int alt24=2;
    int LA24_0=input.LA(1);
    if ((LA24_0 == ID)) {
      alt24=1;
    }
switch (alt24) {
case 1:
{
        pushFollow(FOLLOW_template_slot_in_template1224);
        template_slot64=template_slot();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_template_slot.add(template_slot64.getTree());
      }
    break;
default :
  if (cnt24 >= 1)   break loop24;
if (backtracking > 0) {
  failed=true;
  return retval;
}
EarlyExitException eee=new EarlyExitException(24,input);
throw eee;
}
cnt24++;
}
 while (true);
END65=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_template1229);
if (failed) return retval;
if (backtracking == 0) stream_END.add(END65);
int alt25=2;
int LA25_0=input.LA(1);
if ((LA25_0 == SEMICOLON)) {
alt25=1;
}
switch (alt25) {
case 1:
{
SEMICOLON66=(Token)input.LT(1);
match(input,SEMICOLON,FOLLOW_SEMICOLON_in_template1231);
if (failed) return retval;
if (backtracking == 0) stream_SEMICOLON.add(SEMICOLON66);
}
break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_template_key.nextNode(),root_1);
adaptor.addChild(root_1,stream_template_id.next());
if (!(stream_template_slot.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_template_slot.hasNext()) {
adaptor.addChild(root_1,stream_template_slot.next());
}
stream_template_slot.reset();
adaptor.addChild(root_1,stream_END.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
