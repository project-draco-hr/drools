{
  paren_chunk_data_return retval=new paren_chunk_data_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN276=null;
  Token set277=null;
  Token RIGHT_PAREN279=null;
  paren_chunk_data_return paren_chunk_data278=null;
  Object LEFT_PAREN276_tree=null;
  Object set277_tree=null;
  Object RIGHT_PAREN279_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_PAREN276=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_chunk_data3652);
      if (failed)       return retval;
      if (backtracking == 0) {
        LEFT_PAREN276_tree=(Object)adaptor.create(LEFT_PAREN276);
        adaptor.addChild(root_0,LEFT_PAREN276_tree);
      }
      loop91:       do {
        int alt91=3;
        int LA91_0=input.LA(1);
        if (((LA91_0 >= VT_COMPILATION_UNIT && LA91_0 <= STRING) || LA91_0 == COMMA || (LA91_0 >= COLON && LA91_0 <= MULTI_LINE_COMMENT))) {
          alt91=1;
        }
 else         if ((LA91_0 == LEFT_PAREN)) {
          alt91=2;
        }
switch (alt91) {
case 1:
{
            set277=(Token)input.LT(1);
            if ((input.LA(1) >= VT_COMPILATION_UNIT && input.LA(1) <= STRING) || input.LA(1) == COMMA || (input.LA(1) >= COLON && input.LA(1) <= MULTI_LINE_COMMENT)) {
              input.consume();
              if (backtracking == 0)               adaptor.addChild(root_0,adaptor.create(set277));
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_paren_chunk_data3655);
              throw mse;
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk_data3669);
        paren_chunk_data278=paren_chunk_data();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,paren_chunk_data278.getTree());
      }
    break;
default :
  break loop91;
}
}
 while (true);
RIGHT_PAREN279=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_paren_chunk_data3674);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_PAREN279_tree=(Object)adaptor.create(RIGHT_PAREN279);
adaptor.addChild(root_0,RIGHT_PAREN279_tree);
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
