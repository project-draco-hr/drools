{
  paren_chunk_data_return retval=new paren_chunk_data_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN301=null;
  Token set302=null;
  Token RIGHT_PAREN304=null;
  paren_chunk_data_return paren_chunk_data303=null;
  Object LEFT_PAREN301_tree=null;
  Object set302_tree=null;
  Object RIGHT_PAREN304_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_PAREN301=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_chunk_data3904);
      if (failed)       return retval;
      if (backtracking == 0) {
        LEFT_PAREN301_tree=(Object)adaptor.create(LEFT_PAREN301);
        adaptor.addChild(root_0,LEFT_PAREN301_tree);
      }
      loop97:       do {
        int alt97=3;
        int LA97_0=input.LA(1);
        if (((LA97_0 >= VT_COMPILATION_UNIT && LA97_0 <= STRING) || LA97_0 == COMMA || (LA97_0 >= AT && LA97_0 <= MULTI_LINE_COMMENT))) {
          alt97=1;
        }
 else         if ((LA97_0 == LEFT_PAREN)) {
          alt97=2;
        }
switch (alt97) {
case 1:
{
            set302=(Token)input.LT(1);
            if ((input.LA(1) >= VT_COMPILATION_UNIT && input.LA(1) <= STRING) || input.LA(1) == COMMA || (input.LA(1) >= AT && input.LA(1) <= MULTI_LINE_COMMENT)) {
              input.consume();
              if (backtracking == 0)               adaptor.addChild(root_0,adaptor.create(set302));
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_paren_chunk_data3907);
              throw mse;
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk_data3921);
        paren_chunk_data303=paren_chunk_data();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,paren_chunk_data303.getTree());
      }
    break;
default :
  break loop97;
}
}
 while (true);
RIGHT_PAREN304=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_paren_chunk_data3926);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_PAREN304_tree=(Object)adaptor.create(RIGHT_PAREN304);
adaptor.addChild(root_0,RIGHT_PAREN304_tree);
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
