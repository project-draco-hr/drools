{
  DRLParser.type_return retval=new DRLParser.type_return();
  retval.start=input.LT(1);
  int type_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_SQUARE328=null;
  Token RIGHT_SQUARE329=null;
  Token ID330=null;
  Token DOT332=null;
  Token ID333=null;
  Token LEFT_SQUARE335=null;
  Token RIGHT_SQUARE336=null;
  DRLParser.primitiveType_return primitiveType327=null;
  DRLParser.typeArguments_return typeArguments331=null;
  DRLParser.typeArguments_return typeArguments334=null;
  Object LEFT_SQUARE328_tree=null;
  Object RIGHT_SQUARE329_tree=null;
  Object ID330_tree=null;
  Object DOT332_tree=null;
  Object ID333_tree=null;
  Object LEFT_SQUARE335_tree=null;
  Object RIGHT_SQUARE336_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,108)) {
      return retval;
    }
    int alt111=2;
    int LA111_0=input.LA(1);
    if ((LA111_0 == ID)) {
      int LA111_1=input.LA(2);
      if ((((synpred11_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) || (synpred11_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) || (synpred11_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred11_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred11_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| (synpred11_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))|| (synpred11_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))|| (synpred11_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))))) {
        alt111=1;
      }
 else       if ((true)) {
        alt111=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",111,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",111,0,input);
      throw nvae;
    }
switch (alt111) {
case 1:
{
        root_0=(Object)adaptor.nil();
{
          pushFollow(FOLLOW_primitiveType_in_type5762);
          primitiveType327=primitiveType();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,primitiveType327.getTree());
          loop106:           do {
            int alt106=2;
            int LA106_0=input.LA(1);
            if ((LA106_0 == LEFT_SQUARE)) {
              int LA106_2=input.LA(2);
              if ((LA106_2 == RIGHT_SQUARE)) {
                int LA106_3=input.LA(3);
                if ((synpred12_DRL())) {
                  alt106=1;
                }
              }
            }
switch (alt106) {
case 1:
{
                LEFT_SQUARE328=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5772);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE328_tree=(Object)adaptor.create(LEFT_SQUARE328);
                  adaptor.addChild(root_0,LEFT_SQUARE328_tree);
                }
                RIGHT_SQUARE329=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5774);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE329_tree=(Object)adaptor.create(RIGHT_SQUARE329);
                  adaptor.addChild(root_0,RIGHT_SQUARE329_tree);
                }
              }
            break;
default :
          break loop106;
      }
    }
 while (true);
  }
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
{
ID330=(Token)match(input,ID,FOLLOW_ID_in_type5785);
if (state.failed) return retval;
if (state.backtracking == 0) {
  ID330_tree=(Object)adaptor.create(ID330);
  adaptor.addChild(root_0,ID330_tree);
}
int alt107=2;
alt107=dfa107.predict(input);
switch (alt107) {
case 1:
{
    pushFollow(FOLLOW_typeArguments_in_type5792);
    typeArguments331=typeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,typeArguments331.getTree());
  }
break;
}
loop109: do {
int alt109=2;
int LA109_0=input.LA(1);
if ((LA109_0 == DOT)) {
int LA109_2=input.LA(2);
if ((LA109_2 == ID)) {
  alt109=1;
}
}
switch (alt109) {
case 1:
{
  DOT332=(Token)match(input,DOT,FOLLOW_DOT_in_type5797);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    DOT332_tree=(Object)adaptor.create(DOT332);
    adaptor.addChild(root_0,DOT332_tree);
  }
  ID333=(Token)match(input,ID,FOLLOW_ID_in_type5799);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    ID333_tree=(Object)adaptor.create(ID333);
    adaptor.addChild(root_0,ID333_tree);
  }
  int alt108=2;
  alt108=dfa108.predict(input);
switch (alt108) {
case 1:
{
      pushFollow(FOLLOW_typeArguments_in_type5806);
      typeArguments334=typeArguments();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeArguments334.getTree());
    }
  break;
}
}
break;
default :
break loop109;
}
}
 while (true);
loop110: do {
int alt110=2;
int LA110_0=input.LA(1);
if ((LA110_0 == LEFT_SQUARE)) {
int LA110_2=input.LA(2);
if ((LA110_2 == RIGHT_SQUARE)) {
int LA110_3=input.LA(3);
if ((synpred15_DRL())) {
alt110=1;
}
}
}
switch (alt110) {
case 1:
{
LEFT_SQUARE335=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5821);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE335_tree=(Object)adaptor.create(LEFT_SQUARE335);
adaptor.addChild(root_0,LEFT_SQUARE335_tree);
}
RIGHT_SQUARE336=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5823);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE336_tree=(Object)adaptor.create(RIGHT_SQUARE336);
adaptor.addChild(root_0,RIGHT_SQUARE336_tree);
}
}
break;
default :
break loop110;
}
}
 while (true);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,108,type_StartIndex);
}
}
return retval;
}
