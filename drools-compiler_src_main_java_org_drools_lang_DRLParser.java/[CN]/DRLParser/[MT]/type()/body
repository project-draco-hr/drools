{
  DRLParser.type_return retval=new DRLParser.type_return();
  retval.start=input.LT(1);
  int type_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_SQUARE291=null;
  Token RIGHT_SQUARE292=null;
  Token ID293=null;
  Token DOT295=null;
  Token ID296=null;
  Token LEFT_SQUARE298=null;
  Token RIGHT_SQUARE299=null;
  DRLParser.primitiveType_return primitiveType290=null;
  DRLParser.typeArguments_return typeArguments294=null;
  DRLParser.typeArguments_return typeArguments297=null;
  Object LEFT_SQUARE291_tree=null;
  Object RIGHT_SQUARE292_tree=null;
  Object ID293_tree=null;
  Object DOT295_tree=null;
  Object ID296_tree=null;
  Object LEFT_SQUARE298_tree=null;
  Object RIGHT_SQUARE299_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,98)) {
      return retval;
    }
    int alt102=2;
    int LA102_0=input.LA(1);
    if ((LA102_0 == ID)) {
      int LA102_1=input.LA(2);
      if ((((synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) || (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) || (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))))) {
        alt102=1;
      }
 else       if ((true)) {
        alt102=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",102,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",102,0,input);
      throw nvae;
    }
switch (alt102) {
case 1:
{
        root_0=(Object)adaptor.nil();
{
          pushFollow(FOLLOW_primitiveType_in_type5253);
          primitiveType290=primitiveType();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,primitiveType290.getTree());
          loop97:           do {
            int alt97=2;
            int LA97_0=input.LA(1);
            if ((LA97_0 == LEFT_SQUARE)) {
              int LA97_2=input.LA(2);
              if ((LA97_2 == RIGHT_SQUARE)) {
                int LA97_3=input.LA(3);
                if ((synpred9_DRL())) {
                  alt97=1;
                }
              }
            }
switch (alt97) {
case 1:
{
                LEFT_SQUARE291=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5263);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE291_tree=(Object)adaptor.create(LEFT_SQUARE291);
                  adaptor.addChild(root_0,LEFT_SQUARE291_tree);
                }
                RIGHT_SQUARE292=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5265);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE292_tree=(Object)adaptor.create(RIGHT_SQUARE292);
                  adaptor.addChild(root_0,RIGHT_SQUARE292_tree);
                }
              }
            break;
default :
          break loop97;
      }
    }
 while (true);
  }
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
{
ID293=(Token)match(input,ID,FOLLOW_ID_in_type5276);
if (state.failed) return retval;
if (state.backtracking == 0) {
  ID293_tree=(Object)adaptor.create(ID293);
  adaptor.addChild(root_0,ID293_tree);
}
int alt98=2;
alt98=dfa98.predict(input);
switch (alt98) {
case 1:
{
    pushFollow(FOLLOW_typeArguments_in_type5283);
    typeArguments294=typeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,typeArguments294.getTree());
  }
break;
}
loop100: do {
int alt100=2;
int LA100_0=input.LA(1);
if ((LA100_0 == DOT)) {
alt100=1;
}
switch (alt100) {
case 1:
{
  DOT295=(Token)match(input,DOT,FOLLOW_DOT_in_type5288);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    DOT295_tree=(Object)adaptor.create(DOT295);
    adaptor.addChild(root_0,DOT295_tree);
  }
  ID296=(Token)match(input,ID,FOLLOW_ID_in_type5290);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    ID296_tree=(Object)adaptor.create(ID296);
    adaptor.addChild(root_0,ID296_tree);
  }
  int alt99=2;
  alt99=dfa99.predict(input);
switch (alt99) {
case 1:
{
      pushFollow(FOLLOW_typeArguments_in_type5297);
      typeArguments297=typeArguments();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeArguments297.getTree());
    }
  break;
}
}
break;
default :
break loop100;
}
}
 while (true);
loop101: do {
int alt101=2;
int LA101_0=input.LA(1);
if ((LA101_0 == LEFT_SQUARE)) {
int LA101_2=input.LA(2);
if ((LA101_2 == RIGHT_SQUARE)) {
int LA101_3=input.LA(3);
if ((synpred12_DRL())) {
alt101=1;
}
}
}
switch (alt101) {
case 1:
{
LEFT_SQUARE298=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5312);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE298_tree=(Object)adaptor.create(LEFT_SQUARE298);
adaptor.addChild(root_0,LEFT_SQUARE298_tree);
}
RIGHT_SQUARE299=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5314);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE299_tree=(Object)adaptor.create(RIGHT_SQUARE299);
adaptor.addChild(root_0,RIGHT_SQUARE299_tree);
}
}
break;
default :
break loop101;
}
}
 while (true);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,98,type_StartIndex);
}
}
return retval;
}
