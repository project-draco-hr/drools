{
  DRLParser.type_return retval=new DRLParser.type_return();
  retval.start=input.LT(1);
  int type_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_SQUARE322=null;
  Token RIGHT_SQUARE323=null;
  Token ID324=null;
  Token DOT326=null;
  Token ID327=null;
  Token LEFT_SQUARE329=null;
  Token RIGHT_SQUARE330=null;
  DRLParser.primitiveType_return primitiveType321=null;
  DRLParser.typeArguments_return typeArguments325=null;
  DRLParser.typeArguments_return typeArguments328=null;
  Object LEFT_SQUARE322_tree=null;
  Object RIGHT_SQUARE323_tree=null;
  Object ID324_tree=null;
  Object DOT326_tree=null;
  Object ID327_tree=null;
  Object LEFT_SQUARE329_tree=null;
  Object RIGHT_SQUARE330_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,107)) {
      return retval;
    }
    int alt109=2;
    int LA109_0=input.LA(1);
    if ((LA109_0 == ID)) {
      int LA109_1=input.LA(2);
      if ((((synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) || (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) || (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| (synpred8_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))))) {
        alt109=1;
      }
 else       if ((true)) {
        alt109=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",109,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",109,0,input);
      throw nvae;
    }
switch (alt109) {
case 1:
{
        root_0=(Object)adaptor.nil();
{
          pushFollow(FOLLOW_primitiveType_in_type5744);
          primitiveType321=primitiveType();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,primitiveType321.getTree());
          loop104:           do {
            int alt104=2;
            int LA104_0=input.LA(1);
            if ((LA104_0 == LEFT_SQUARE)) {
              int LA104_2=input.LA(2);
              if ((LA104_2 == RIGHT_SQUARE)) {
                int LA104_3=input.LA(3);
                if ((synpred9_DRL())) {
                  alt104=1;
                }
              }
            }
switch (alt104) {
case 1:
{
                LEFT_SQUARE322=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5754);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  LEFT_SQUARE322_tree=(Object)adaptor.create(LEFT_SQUARE322);
                  adaptor.addChild(root_0,LEFT_SQUARE322_tree);
                }
                RIGHT_SQUARE323=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5756);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  RIGHT_SQUARE323_tree=(Object)adaptor.create(RIGHT_SQUARE323);
                  adaptor.addChild(root_0,RIGHT_SQUARE323_tree);
                }
              }
            break;
default :
          break loop104;
      }
    }
 while (true);
  }
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
{
ID324=(Token)match(input,ID,FOLLOW_ID_in_type5767);
if (state.failed) return retval;
if (state.backtracking == 0) {
  ID324_tree=(Object)adaptor.create(ID324);
  adaptor.addChild(root_0,ID324_tree);
}
int alt105=2;
alt105=dfa105.predict(input);
switch (alt105) {
case 1:
{
    pushFollow(FOLLOW_typeArguments_in_type5774);
    typeArguments325=typeArguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,typeArguments325.getTree());
  }
break;
}
loop107: do {
int alt107=2;
int LA107_0=input.LA(1);
if ((LA107_0 == DOT)) {
alt107=1;
}
switch (alt107) {
case 1:
{
  DOT326=(Token)match(input,DOT,FOLLOW_DOT_in_type5779);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    DOT326_tree=(Object)adaptor.create(DOT326);
    adaptor.addChild(root_0,DOT326_tree);
  }
  ID327=(Token)match(input,ID,FOLLOW_ID_in_type5781);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    ID327_tree=(Object)adaptor.create(ID327);
    adaptor.addChild(root_0,ID327_tree);
  }
  int alt106=2;
  alt106=dfa106.predict(input);
switch (alt106) {
case 1:
{
      pushFollow(FOLLOW_typeArguments_in_type5788);
      typeArguments328=typeArguments();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeArguments328.getTree());
    }
  break;
}
}
break;
default :
break loop107;
}
}
 while (true);
loop108: do {
int alt108=2;
int LA108_0=input.LA(1);
if ((LA108_0 == LEFT_SQUARE)) {
int LA108_2=input.LA(2);
if ((LA108_2 == RIGHT_SQUARE)) {
int LA108_3=input.LA(3);
if ((synpred12_DRL())) {
alt108=1;
}
}
}
switch (alt108) {
case 1:
{
LEFT_SQUARE329=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5803);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE329_tree=(Object)adaptor.create(LEFT_SQUARE329);
adaptor.addChild(root_0,LEFT_SQUARE329_tree);
}
RIGHT_SQUARE330=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5805);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE330_tree=(Object)adaptor.create(RIGHT_SQUARE330);
adaptor.addChild(root_0,RIGHT_SQUARE330_tree);
}
}
break;
default :
break loop108;
}
}
 while (true);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,107,type_StartIndex);
}
}
return retval;
}
