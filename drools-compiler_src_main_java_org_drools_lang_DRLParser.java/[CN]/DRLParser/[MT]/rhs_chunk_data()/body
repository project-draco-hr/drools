{
  DRLParser.rhs_chunk_data_return retval=new DRLParser.rhs_chunk_data_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token any=null;
  Token end1=null;
  Token THEN282=null;
  Token SEMICOLON283=null;
  Object any_tree=null;
  Object end1_tree=null;
  Object THEN282_tree=null;
  Object SEMICOLON283_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      THEN282=(Token)match(input,THEN,FOLLOW_THEN_in_rhs_chunk_data4647);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        THEN282_tree=(Object)adaptor.create(THEN282);
        adaptor.addChild(root_0,THEN282_tree);
      }
      if (state.backtracking == 0) {
        if ((THEN282 != null ? THEN282.getText() : null).equalsIgnoreCase("then")) {
          emit(THEN282,DroolsEditorType.KEYWORD);
          emit(Location.LOCATION_RHS);
        }
      }
      loop100:       do {
        int alt100=2;
        int LA100_0=input.LA(1);
        if (((LA100_0 >= VT_COMPILATION_UNIT && LA100_0 <= DOT_STAR) || (LA100_0 >= STRING && LA100_0 <= MULTI_LINE_COMMENT))) {
          alt100=1;
        }
switch (alt100) {
case 1:
{
            any=(Token)input.LT(1);
            if ((input.LA(1) >= VT_COMPILATION_UNIT && input.LA(1) <= DOT_STAR) || (input.LA(1) >= STRING && input.LA(1) <= MULTI_LINE_COMMENT)) {
              input.consume();
              if (state.backtracking == 0)               adaptor.addChild(root_0,(Object)adaptor.create(any));
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            if (state.backtracking == 0) {
              emit(any,DroolsEditorType.CODE_CHUNK);
            }
          }
        break;
default :
      break loop100;
  }
}
 while (true);
end1=(Token)match(input,END,FOLLOW_END_in_rhs_chunk_data4673);
if (state.failed) return retval;
if (state.backtracking == 0) {
  end1_tree=(Object)adaptor.create(end1);
  adaptor.addChild(root_0,end1_tree);
}
if (state.backtracking == 0) {
  emit(end1,DroolsEditorType.KEYWORD);
}
int alt101=2;
int LA101_0=input.LA(1);
if ((LA101_0 == SEMICOLON)) {
  alt101=1;
}
switch (alt101) {
case 1:
{
    SEMICOLON283=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_chunk_data4679);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      SEMICOLON283_tree=(Object)adaptor.create(SEMICOLON283);
      adaptor.addChild(root_0,SEMICOLON283_tree);
    }
  }
break;
}
if (state.backtracking == 0) {
emit(SEMICOLON283,DroolsEditorType.KEYWORD);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
