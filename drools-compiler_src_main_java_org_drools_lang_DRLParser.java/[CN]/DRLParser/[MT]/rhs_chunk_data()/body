{
  DRLParser.rhs_chunk_data_return retval=new DRLParser.rhs_chunk_data_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token any=null;
  Token end1=null;
  Token THEN283=null;
  Token SEMICOLON284=null;
  Object any_tree=null;
  Object end1_tree=null;
  Object THEN283_tree=null;
  Object SEMICOLON284_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      THEN283=(Token)match(input,THEN,FOLLOW_THEN_in_rhs_chunk_data4670);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        THEN283_tree=(Object)adaptor.create(THEN283);
        adaptor.addChild(root_0,THEN283_tree);
      }
      if (state.backtracking == 0) {
        if ((THEN283 != null ? THEN283.getText() : null).equalsIgnoreCase("then")) {
          emit(THEN283,DroolsEditorType.KEYWORD);
          emit(Location.LOCATION_RHS);
        }
      }
      loop101:       do {
        int alt101=2;
        int LA101_0=input.LA(1);
        if (((LA101_0 >= VT_COMPILATION_UNIT && LA101_0 <= DOT_STAR) || (LA101_0 >= STRING && LA101_0 <= MULTI_LINE_COMMENT))) {
          alt101=1;
        }
switch (alt101) {
case 1:
{
            any=(Token)input.LT(1);
            if ((input.LA(1) >= VT_COMPILATION_UNIT && input.LA(1) <= DOT_STAR) || (input.LA(1) >= STRING && input.LA(1) <= MULTI_LINE_COMMENT)) {
              input.consume();
              if (state.backtracking == 0)               adaptor.addChild(root_0,(Object)adaptor.create(any));
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            if (state.backtracking == 0) {
              emit(any,DroolsEditorType.CODE_CHUNK);
            }
          }
        break;
default :
      break loop101;
  }
}
 while (true);
end1=(Token)match(input,END,FOLLOW_END_in_rhs_chunk_data4696);
if (state.failed) return retval;
if (state.backtracking == 0) {
  end1_tree=(Object)adaptor.create(end1);
  adaptor.addChild(root_0,end1_tree);
}
if (state.backtracking == 0) {
  emit(end1,DroolsEditorType.KEYWORD);
}
int alt102=2;
int LA102_0=input.LA(1);
if ((LA102_0 == SEMICOLON)) {
  alt102=1;
}
switch (alt102) {
case 1:
{
    SEMICOLON284=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_chunk_data4702);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      SEMICOLON284_tree=(Object)adaptor.create(SEMICOLON284);
      adaptor.addChild(root_0,SEMICOLON284_tree);
    }
  }
break;
}
if (state.backtracking == 0) {
emit(SEMICOLON284,DroolsEditorType.KEYWORD);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
