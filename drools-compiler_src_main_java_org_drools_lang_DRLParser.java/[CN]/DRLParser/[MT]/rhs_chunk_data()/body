{
  rhs_chunk_data_return retval=new rhs_chunk_data_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token any=null;
  Token end1=null;
  Token THEN289=null;
  Token SEMICOLON290=null;
  Object any_tree=null;
  Object end1_tree=null;
  Object THEN289_tree=null;
  Object SEMICOLON290_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      THEN289=(Token)input.LT(1);
      match(input,THEN,FOLLOW_THEN_in_rhs_chunk_data4678);
      if (failed)       return retval;
      if (backtracking == 0) {
        THEN289_tree=(Object)adaptor.create(THEN289);
        adaptor.addChild(root_0,THEN289_tree);
      }
      if (backtracking == 0) {
        if (THEN289.getText().equalsIgnoreCase("then")) {
          emit(THEN289,DroolsEditorType.KEYWORD);
          emit(Location.LOCATION_RHS);
        }
      }
      loop98:       do {
        int alt98=2;
        int LA98_0=input.LA(1);
        if (((LA98_0 >= VT_COMPILATION_UNIT && LA98_0 <= DOT_STAR) || (LA98_0 >= STRING && LA98_0 <= MULTI_LINE_COMMENT))) {
          alt98=1;
        }
switch (alt98) {
case 1:
{
            any=(Token)input.LT(1);
            if ((input.LA(1) >= VT_COMPILATION_UNIT && input.LA(1) <= DOT_STAR) || (input.LA(1) >= STRING && input.LA(1) <= MULTI_LINE_COMMENT)) {
              input.consume();
              if (backtracking == 0)               adaptor.addChild(root_0,adaptor.create(any));
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_rhs_chunk_data4691);
              throw mse;
            }
            if (backtracking == 0) {
              emit(any,DroolsEditorType.CODE_CHUNK);
            }
          }
        break;
default :
      break loop98;
  }
}
 while (true);
end1=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_rhs_chunk_data4704);
if (failed) return retval;
if (backtracking == 0) {
  end1_tree=(Object)adaptor.create(end1);
  adaptor.addChild(root_0,end1_tree);
}
if (backtracking == 0) {
  emit(end1,DroolsEditorType.KEYWORD);
}
int alt99=2;
int LA99_0=input.LA(1);
if ((LA99_0 == SEMICOLON)) {
  alt99=1;
}
switch (alt99) {
case 1:
{
    SEMICOLON290=(Token)input.LT(1);
    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_chunk_data4710);
    if (failed)     return retval;
    if (backtracking == 0) {
      SEMICOLON290_tree=(Object)adaptor.create(SEMICOLON290);
      adaptor.addChild(root_0,SEMICOLON290_tree);
    }
  }
break;
}
if (backtracking == 0) {
emit(SEMICOLON290,DroolsEditorType.KEYWORD);
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
