{
  DRLParser.decl_field_initialization_return retval=new DRLParser.decl_field_initialization_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS59=null;
  DRLParser.paren_chunk_return paren_chunk60=null;
  Object EQUALS59_tree=null;
  RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      EQUALS59=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_decl_field_initialization1223);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_EQUALS.add(EQUALS59);
      if (state.backtracking == 0) {
        emit(EQUALS59,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_paren_chunk_in_decl_field_initialization1229);
      paren_chunk60=paren_chunk();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_paren_chunk.add(paren_chunk60.getTree());
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(stream_EQUALS.nextNode(),root_1);
            adaptor.addChild(root_1,stream_paren_chunk.nextTree());
            adaptor.addChild(root_0,root_1);
          }
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
