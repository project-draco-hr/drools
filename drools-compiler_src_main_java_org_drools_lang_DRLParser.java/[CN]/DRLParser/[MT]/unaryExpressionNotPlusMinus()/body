{
  DRLParser.unaryExpressionNotPlusMinus_return retval=new DRLParser.unaryExpressionNotPlusMinus_return();
  retval.start=input.LT(1);
  int unaryExpressionNotPlusMinus_StartIndex=input.index();
  Object root_0=null;
  Token TILDE376=null;
  Token NEGATION378=null;
  Token set383=null;
  DRLParser.unaryExpression_return unaryExpression377=null;
  DRLParser.unaryExpression_return unaryExpression379=null;
  DRLParser.castExpression_return castExpression380=null;
  DRLParser.primary_return primary381=null;
  DRLParser.selector_return selector382=null;
  Object TILDE376_tree=null;
  Object NEGATION378_tree=null;
  Object set383_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,123)) {
      return retval;
    }
    int alt130=4;
    alt130=dfa130.predict(input);
switch (alt130) {
case 1:
{
        root_0=(Object)adaptor.nil();
        TILDE376=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus6086);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          TILDE376_tree=(Object)adaptor.create(TILDE376);
          adaptor.addChild(root_0,TILDE376_tree);
        }
        pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6088);
        unaryExpression377=unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,unaryExpression377.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    NEGATION378=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus6097);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      NEGATION378_tree=(Object)adaptor.create(NEGATION378);
      adaptor.addChild(root_0,NEGATION378_tree);
    }
    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6099);
    unaryExpression379=unaryExpression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,unaryExpression379.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6109);
castExpression380=castExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,castExpression380.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus6119);
primary381=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary381.getTree());
loop128: do {
int alt128=2;
alt128=dfa128.predict(input);
switch (alt128) {
case 1:
{
  pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus6126);
  selector382=selector();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,selector382.getTree());
}
break;
default :
break loop128;
}
}
 while (true);
int alt129=2;
alt129=dfa129.predict(input);
switch (alt129) {
case 1:
{
set383=(Token)input.LT(1);
if ((input.LA(1) >= INCR && input.LA(1) <= DECR)) {
input.consume();
if (state.backtracking == 0) adaptor.addChild(root_0,(Object)adaptor.create(set383));
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,123,unaryExpressionNotPlusMinus_StartIndex);
}
}
return retval;
}
