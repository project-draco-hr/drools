{
  DRLParser.rhs_chunk_return retval=new DRLParser.rhs_chunk_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.rhs_chunk_data_return rc=null;
  RewriteRuleSubtreeStream stream_rhs_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk_data");
  String text="";
  try {
{
      pushFollow(FOLLOW_rhs_chunk_data_in_rhs_chunk5281);
      rc=rhs_chunk_data();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_rhs_chunk_data.add(rc.getTree());
      if (state.backtracking == 0) {
        text=(rc != null ? input.toString(rc.start,rc.stop) : null);
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,(Object)adaptor.create(VT_RHS_CHUNK,(rc != null ? ((Token)rc.start) : null),text));
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
