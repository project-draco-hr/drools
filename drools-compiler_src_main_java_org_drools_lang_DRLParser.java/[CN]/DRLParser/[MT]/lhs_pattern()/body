{
  DRLParser.lhs_pattern_return retval=new DRLParser.lhs_pattern_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.fact_binding_return fact_binding209=null;
  DRLParser.fact_return fact210=null;
  RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
  RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
  try {
    int alt66=2;
    int LA66_0=input.LA(1);
    if ((LA66_0 == ID)) {
      int LA66_1=input.LA(2);
      if ((LA66_1 == COLON)) {
        alt66=1;
      }
 else       if ((LA66_1 == DOT || LA66_1 == LEFT_PAREN || LA66_1 == LEFT_SQUARE)) {
        alt66=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",66,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",66,0,input);
      throw nvae;
    }
switch (alt66) {
case 1:
{
        pushFollow(FOLLOW_fact_binding_in_lhs_pattern3713);
        fact_binding209=fact_binding();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_fact_binding.add(fact_binding209.getTree());
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(Object)adaptor.nil();
{
{
              Object root_1=(Object)adaptor.nil();
              root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN,"VT_PATTERN"),root_1);
              adaptor.addChild(root_1,stream_fact_binding.nextTree());
              adaptor.addChild(root_0,root_1);
            }
          }
          retval.tree=root_0;
        }
      }
    break;
case 2:
{
    pushFollow(FOLLOW_fact_in_lhs_pattern3726);
    fact210=fact();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_fact.add(fact210.getTree());
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
{
          Object root_1=(Object)adaptor.nil();
          root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN,"VT_PATTERN"),root_1);
          adaptor.addChild(root_1,stream_fact.nextTree());
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
