{
  curly_chunk_data_return retval=new curly_chunk_data_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token lc1=null;
  Token any=null;
  Token rc1=null;
  curly_chunk_data_return curly_chunk_data291=null;
  Object lc1_tree=null;
  Object any_tree=null;
  Object rc1_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      lc1=(Token)input.LT(1);
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_chunk_data4752);
      if (failed)       return retval;
      if (backtracking == 0) {
        lc1_tree=(Object)adaptor.create(lc1);
        adaptor.addChild(root_0,lc1_tree);
      }
      if (backtracking == 0) {
        if (!isRecursive) {
          emit(lc1,DroolsEditorType.SYMBOL);
        }
 else {
          emit(lc1,DroolsEditorType.CODE_CHUNK);
        }
      }
      loop100:       do {
        int alt100=3;
        int LA100_0=input.LA(1);
        if (((LA100_0 >= VT_COMPILATION_UNIT && LA100_0 <= THEN) || (LA100_0 >= MISC && LA100_0 <= MULTI_LINE_COMMENT))) {
          alt100=1;
        }
 else         if ((LA100_0 == LEFT_CURLY)) {
          alt100=2;
        }
switch (alt100) {
case 1:
{
            any=(Token)input.LT(1);
            if ((input.LA(1) >= VT_COMPILATION_UNIT && input.LA(1) <= THEN) || (input.LA(1) >= MISC && input.LA(1) <= MULTI_LINE_COMMENT)) {
              input.consume();
              if (backtracking == 0)               adaptor.addChild(root_0,adaptor.create(any));
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_curly_chunk_data4764);
              throw mse;
            }
            if (backtracking == 0) {
              emit(any,DroolsEditorType.CODE_CHUNK);
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk_data4780);
        curly_chunk_data291=curly_chunk_data(true);
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,curly_chunk_data291.getTree());
      }
    break;
default :
  break loop100;
}
}
 while (true);
rc1=(Token)input.LT(1);
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_chunk_data4791);
if (failed) return retval;
if (backtracking == 0) {
rc1_tree=(Object)adaptor.create(rc1);
adaptor.addChild(root_0,rc1_tree);
}
if (backtracking == 0) {
if (!isRecursive) {
emit(rc1,DroolsEditorType.SYMBOL);
}
 else {
emit(rc1,DroolsEditorType.CODE_CHUNK);
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
