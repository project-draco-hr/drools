{
  DRLParser.enumDeclaration_return retval=new DRLParser.enumDeclaration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID836=null;
  DRLParser.enum_key_return enum_key835=null;
  DRLParser.implements_key_return implements_key837=null;
  DRLParser.typeList_return typeList838=null;
  DRLParser.enumBody_return enumBody839=null;
  Object ID836_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_enum_key_in_enumDeclaration9808);
      enum_key835=enum_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,enum_key835.getTree());
      ID836=(Token)match(input,ID,FOLLOW_ID_in_enumDeclaration9810);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID836_tree=(Object)adaptor.create(ID836);
        adaptor.addChild(root_0,ID836_tree);
      }
      int alt245=2;
      int LA245_0=input.LA(1);
      if ((LA245_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
        alt245=1;
      }
switch (alt245) {
case 1:
{
          pushFollow(FOLLOW_implements_key_in_enumDeclaration9813);
          implements_key837=implements_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,implements_key837.getTree());
          pushFollow(FOLLOW_typeList_in_enumDeclaration9815);
          typeList838=typeList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,typeList838.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_enumBody_in_enumDeclaration9819);
  enumBody839=enumBody();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,enumBody839.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
