{
  DRLParser.enumDeclaration_return retval=new DRLParser.enumDeclaration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID821=null;
  DRLParser.enum_key_return enum_key820=null;
  DRLParser.implements_key_return implements_key822=null;
  DRLParser.typeList_return typeList823=null;
  DRLParser.enumBody_return enumBody824=null;
  Object ID821_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_enum_key_in_enumDeclaration9705);
      enum_key820=enum_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,enum_key820.getTree());
      ID821=(Token)match(input,ID,FOLLOW_ID_in_enumDeclaration9707);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID821_tree=(Object)adaptor.create(ID821);
        adaptor.addChild(root_0,ID821_tree);
      }
      int alt243=2;
      int LA243_0=input.LA(1);
      if ((LA243_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
        alt243=1;
      }
switch (alt243) {
case 1:
{
          pushFollow(FOLLOW_implements_key_in_enumDeclaration9710);
          implements_key822=implements_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,implements_key822.getTree());
          pushFollow(FOLLOW_typeList_in_enumDeclaration9712);
          typeList823=typeList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,typeList823.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_enumBody_in_enumDeclaration9716);
  enumBody824=enumBody();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,enumBody824.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
