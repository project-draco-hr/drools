{
  DRLParser.constraint_expression_return retval=new DRLParser.constraint_expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN238=null;
  Token RIGHT_PAREN240=null;
  DRLParser.compound_operator_return compound_operator236=null;
  DRLParser.simple_operator_return simple_operator237=null;
  DRLParser.or_restr_connective_return or_restr_connective239=null;
  Object LEFT_PAREN238_tree=null;
  Object RIGHT_PAREN240_tree=null;
  try {
    int alt77=3;
    alt77=dfa77.predict(input);
switch (alt77) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_compound_operator_in_constraint_expression4188);
        compound_operator236=compound_operator();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,compound_operator236.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_simple_operator_in_constraint_expression4193);
    simple_operator237=simple_operator();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,simple_operator237.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN238=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constraint_expression4198);
if (state.failed) return retval;
if (state.backtracking == 0) {
  helper.emit(LEFT_PAREN238,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_or_restr_connective_in_constraint_expression4207);
or_restr_connective239=or_restr_connective();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,or_restr_connective239.getTree());
RIGHT_PAREN240=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constraint_expression4212);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_PAREN240_tree=(Object)adaptor.create(RIGHT_PAREN240);
  adaptor.addChild(root_0,RIGHT_PAREN240_tree);
}
if (state.backtracking == 0) {
  helper.emit(RIGHT_PAREN240,DroolsEditorType.SYMBOL);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
if (!helper.lookaheadTest) {
helper.reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 else {
throw re;
}
}
 finally {
if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == ID) {
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
input.consume();
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
 else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && input.LA(2) == ID && helper.validateLT(1,DroolsSoftKeywords.NOT)) {
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.KEYWORD);
input.consume();
input.consume();
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
 else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && helper.validateLT(1,DroolsSoftKeywords.IN)) {
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
input.consume();
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
 else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID) {
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.IDENTIFIER);
input.consume();
input.consume();
if (input.get(input.index() - 1).getType() == WS) {
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
}
return retval;
}
