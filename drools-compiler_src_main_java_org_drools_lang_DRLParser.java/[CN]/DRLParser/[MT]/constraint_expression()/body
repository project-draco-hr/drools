{
  constraint_expression_return retval=new constraint_expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN216=null;
  Token RIGHT_PAREN218=null;
  compound_operator_return compound_operator214=null;
  simple_operator_return simple_operator215=null;
  or_restr_connective_return or_restr_connective217=null;
  Object LEFT_PAREN216_tree=null;
  Object RIGHT_PAREN218_tree=null;
  try {
    int alt76=3;
switch (input.LA(1)) {
case ID:
{
        int LA76_1=input.LA(2);
        if ((LA76_1 == ID)) {
          int LA76_10=input.LA(3);
          if ((LA76_10 == ID || LA76_10 == STRING || (LA76_10 >= BOOL && LA76_10 <= INT) || (LA76_10 >= FLOAT && LA76_10 <= NULL)) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
            alt76=2;
          }
 else           if ((LA76_10 == LEFT_PAREN) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
            int LA76_16=input.LA(4);
            if (((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
              alt76=1;
            }
 else             if (((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
              alt76=2;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("682:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );",76,16,input);
              throw nvae;
            }
          }
 else           if ((LA76_10 == DOT || (LA76_10 >= COMMA && LA76_10 <= RIGHT_PAREN) || (LA76_10 >= DOUBLE_PIPE && LA76_10 <= DOUBLE_AMPER) || LA76_10 == LEFT_SQUARE)) {
            alt76=2;
          }
 else {
            if (backtracking > 0) {
              failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("682:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );",76,10,input);
            throw nvae;
          }
        }
 else         if ((LA76_1 == STRING || (LA76_1 >= BOOL && LA76_1 <= INT) || (LA76_1 >= FLOAT && LA76_1 <= NULL))) {
          alt76=2;
        }
 else         if ((LA76_1 == LEFT_PAREN)) {
switch (input.LA(3)) {
case ID:
{
              int LA76_23=input.LA(4);
              if (((validateIdentifierKey(DroolsSoftKeywords.IN)))) {
                alt76=1;
              }
 else               if ((true)) {
                alt76=2;
              }
 else {
                if (backtracking > 0) {
                  failed=true;
                  return retval;
                }
                NoViableAltException nvae=new NoViableAltException("682:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );",76,23,input);
                throw nvae;
              }
            }
          break;
case STRING:
case BOOL:
case INT:
case FLOAT:
case NULL:
{
          int LA76_24=input.LA(4);
          if (((validateIdentifierKey(DroolsSoftKeywords.IN)))) {
            alt76=1;
          }
 else           if ((true)) {
            alt76=2;
          }
 else {
            if (backtracking > 0) {
              failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("682:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );",76,24,input);
            throw nvae;
          }
        }
      break;
case LEFT_PAREN:
{
      int LA76_25=input.LA(4);
      if (((validateIdentifierKey(DroolsSoftKeywords.IN)))) {
        alt76=1;
      }
 else       if ((true)) {
        alt76=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("682:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );",76,25,input);
        throw nvae;
      }
    }
  break;
case VT_COMPILATION_UNIT:
case VT_FUNCTION_IMPORT:
case VT_FACT:
case VT_CONSTRAINTS:
case VT_LABEL:
case VT_QUERY_ID:
case VT_TEMPLATE_ID:
case VT_RULE_ID:
case VT_ENTRYPOINT_ID:
case VT_SLOT_ID:
case VT_SLOT:
case VT_RULE_ATTRIBUTES:
case VT_RHS_CHUNK:
case VT_CURLY_CHUNK:
case VT_SQUARE_CHUNK:
case VT_PAREN_CHUNK:
case VT_AND_IMPLICIT:
case VT_AND_PREFIX:
case VT_OR_PREFIX:
case VT_AND_INFIX:
case VT_OR_INFIX:
case VT_ACCUMULATE_INIT_CLAUSE:
case VT_ACCUMULATE_ID_CLAUSE:
case VT_FROM_SOURCE:
case VT_EXPRESSION_CHAIN:
case VT_PATTERN:
case VT_FACT_BINDING:
case VT_FACT_OR:
case VT_BIND_FIELD:
case VT_FIELD:
case VT_ACCESSOR_PATH:
case VT_ACCESSOR_ELEMENT:
case VT_DATA_TYPE:
case VT_PATTERN_TYPE:
case VT_PACKAGE_ID:
case VT_IMPORT_ID:
case VT_GLOBAL_ID:
case VT_FUNCTION_ID:
case VT_PARAM_LIST:
case VK_DATE_EFFECTIVE:
case VK_DATE_EXPIRES:
case VK_LOCK_ON_ACTIVE:
case VK_NO_LOOP:
case VK_AUTO_FOCUS:
case VK_ACTIVATION_GROUP:
case VK_AGENDA_GROUP:
case VK_RULEFLOW_GROUP:
case VK_DURATION:
case VK_DIALECT:
case VK_SALIENCE:
case VK_ENABLED:
case VK_ATTRIBUTES:
case VK_WHEN:
case VK_RULE:
case VK_IMPORT:
case VK_PACKAGE:
case VK_TEMPLATE:
case VK_QUERY:
case VK_DECLARE:
case VK_FUNCTION:
case VK_GLOBAL:
case VK_EVAL:
case VK_CONTAINS:
case VK_MATCHES:
case VK_EXCLUDES:
case VK_SOUNDSLIKE:
case VK_MEMBEROF:
case VK_ENTRY_POINT:
case VK_NOT:
case VK_IN:
case VK_OR:
case VK_AND:
case VK_EXISTS:
case VK_FORALL:
case VK_FROM:
case VK_ACCUMULATE:
case VK_INIT:
case VK_ACTION:
case VK_REVERSE:
case VK_RESULT:
case VK_COLLECT:
case SEMICOLON:
case DOT:
case DOT_STAR:
case END:
case COMMA:
case RIGHT_PAREN:
case COLON:
case DOUBLE_PIPE:
case DOUBLE_AMPER:
case ARROW:
case EQUAL:
case GREATER:
case GREATER_EQUAL:
case LESS:
case LESS_EQUAL:
case NOT_EQUAL:
case GRAVE_ACCENT:
case LEFT_SQUARE:
case RIGHT_SQUARE:
case THEN:
case LEFT_CURLY:
case RIGHT_CURLY:
case MISC:
case EOL:
case WS:
case EscapeSequence:
case HexDigit:
case UnicodeEscape:
case OctalEscape:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
{
  alt76=2;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("682:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );",76,12,input);
throw nvae;
}
}
 else if ((LA76_1 == GRAVE_ACCENT) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
alt76=2;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("682:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );",76,1,input);
throw nvae;
}
}
break;
case EQUAL:
case GREATER:
case GREATER_EQUAL:
case LESS:
case LESS_EQUAL:
case NOT_EQUAL:
case GRAVE_ACCENT:
{
alt76=2;
}
break;
case LEFT_PAREN:
{
alt76=3;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("682:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );",76,0,input);
throw nvae;
}
switch (alt76) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_compound_operator_in_constraint_expression3115);
compound_operator214=compound_operator();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,compound_operator214.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_simple_operator_in_constraint_expression3120);
simple_operator215=simple_operator();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,simple_operator215.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN216=(Token)input.LT(1);
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constraint_expression3125);
if (failed) return retval;
pushFollow(FOLLOW_or_restr_connective_in_constraint_expression3128);
or_restr_connective217=or_restr_connective();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,or_restr_connective217.getTree());
RIGHT_PAREN218=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constraint_expression3130);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_PAREN218_tree=(Object)adaptor.create(RIGHT_PAREN218);
adaptor.addChild(root_0,RIGHT_PAREN218_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
