{
  expression_chain_return retval=new expression_chain_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token startToken=null;
  Token ID199=null;
  square_chunk_return square_chunk200=null;
  paren_chunk_return paren_chunk201=null;
  expression_chain_return expression_chain202=null;
  Object startToken_tree=null;
  Object ID199_tree=null;
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
  RewriteRuleSubtreeStream stream_expression_chain=new RewriteRuleSubtreeStream(adaptor,"rule expression_chain");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      startToken=(Token)input.LT(1);
      match(input,DOT,FOLLOW_DOT_in_expression_chain2862);
      if (failed)       return retval;
      if (backtracking == 0)       stream_DOT.add(startToken);
      ID199=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_expression_chain2864);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID199);
      int alt69=3;
      int LA69_0=input.LA(1);
      if ((LA69_0 == LEFT_SQUARE) && (synpred9())) {
        alt69=1;
      }
 else       if ((LA69_0 == LEFT_PAREN)) {
        int LA69_2=input.LA(2);
        if ((LA69_2 == LEFT_PAREN)) {
          int LA69_4=input.LA(3);
          if ((synpred10())) {
            alt69=2;
          }
        }
 else         if ((LA69_2 == ID)) {
          int LA69_5=input.LA(3);
          if ((synpred10())) {
            alt69=2;
          }
        }
 else         if (((LA69_2 >= VT_COMPILATION_UNIT && LA69_2 <= SEMICOLON) || (LA69_2 >= DOT && LA69_2 <= STRING) || LA69_2 == COMMA || (LA69_2 >= AT && LA69_2 <= MULTI_LINE_COMMENT)) && (synpred10())) {
          alt69=2;
        }
 else         if ((LA69_2 == RIGHT_PAREN) && (synpred10())) {
          alt69=2;
        }
      }
switch (alt69) {
case 1:
{
          pushFollow(FOLLOW_square_chunk_in_expression_chain2884);
          square_chunk200=square_chunk();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_square_chunk.add(square_chunk200.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_paren_chunk_in_expression_chain2906);
      paren_chunk201=paren_chunk();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_paren_chunk.add(paren_chunk201.getTree());
    }
  break;
}
int alt70=2;
int LA70_0=input.LA(1);
if ((LA70_0 == DOT)) {
alt70=1;
}
switch (alt70) {
case 1:
{
  pushFollow(FOLLOW_expression_chain_in_expression_chain2917);
  expression_chain202=expression_chain();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_expression_chain.add(expression_chain202.getTree());
}
break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_EXPRESSION_CHAIN,startToken),root_1);
adaptor.addChild(root_1,stream_ID.next());
if (stream_square_chunk.hasNext()) {
  adaptor.addChild(root_1,stream_square_chunk.next());
}
stream_square_chunk.reset();
if (stream_paren_chunk.hasNext()) {
  adaptor.addChild(root_1,stream_paren_chunk.next());
}
stream_paren_chunk.reset();
if (stream_expression_chain.hasNext()) {
  adaptor.addChild(root_1,stream_expression_chain.next());
}
stream_expression_chain.reset();
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
