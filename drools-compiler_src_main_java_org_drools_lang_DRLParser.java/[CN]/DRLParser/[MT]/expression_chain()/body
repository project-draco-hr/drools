{
  expression_chain_return retval=new expression_chain_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT191=null;
  Token ID192=null;
  paren_chunk_return paren_chunk193=null;
  square_chunk_return square_chunk194=null;
  expression_chain_return expression_chain195=null;
  Object DOT191_tree=null;
  Object ID192_tree=null;
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
  RewriteRuleSubtreeStream stream_expression_chain=new RewriteRuleSubtreeStream(adaptor,"rule expression_chain");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      DOT191=(Token)input.LT(1);
      match(input,DOT,FOLLOW_DOT_in_expression_chain3407);
      if (failed)       return retval;
      if (backtracking == 0)       stream_DOT.add(DOT191);
      if (backtracking == 0) {
        emit(DOT191,DroolsEditorType.IDENTIFIER);
      }
      ID192=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_expression_chain3414);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID192);
      if (backtracking == 0) {
        emit(ID192,DroolsEditorType.IDENTIFIER);
      }
      int alt68=3;
      int LA68_0=input.LA(1);
      if ((LA68_0 == LEFT_PAREN)) {
switch (input.LA(2)) {
case LEFT_PAREN:
{
            int LA68_4=input.LA(3);
            if ((input.LA(1) == LEFT_PAREN)) {
              alt68=1;
            }
          }
        break;
case ID:
{
        int LA68_5=input.LA(3);
        if ((input.LA(1) == LEFT_PAREN)) {
          alt68=1;
        }
      }
    break;
case VT_COMPILATION_UNIT:
case VT_FUNCTION_IMPORT:
case VT_FACT:
case VT_CONSTRAINTS:
case VT_LABEL:
case VT_QUERY_ID:
case VT_TEMPLATE_ID:
case VT_TYPE_DECLARE_ID:
case VT_RULE_ID:
case VT_ENTRYPOINT_ID:
case VT_SLOT_ID:
case VT_SLOT:
case VT_RULE_ATTRIBUTES:
case VT_RHS_CHUNK:
case VT_CURLY_CHUNK:
case VT_SQUARE_CHUNK:
case VT_PAREN_CHUNK:
case VT_BEHAVIOR:
case VT_AND_IMPLICIT:
case VT_AND_PREFIX:
case VT_OR_PREFIX:
case VT_AND_INFIX:
case VT_OR_INFIX:
case VT_ACCUMULATE_INIT_CLAUSE:
case VT_ACCUMULATE_ID_CLAUSE:
case VT_FROM_SOURCE:
case VT_EXPRESSION_CHAIN:
case VT_PATTERN:
case VT_FACT_BINDING:
case VT_FACT_OR:
case VT_BIND_FIELD:
case VT_FIELD:
case VT_ACCESSOR_PATH:
case VT_ACCESSOR_ELEMENT:
case VT_DATA_TYPE:
case VT_PATTERN_TYPE:
case VT_PACKAGE_ID:
case VT_IMPORT_ID:
case VT_GLOBAL_ID:
case VT_FUNCTION_ID:
case VT_PARAM_LIST:
case VK_DATE_EFFECTIVE:
case VK_DATE_EXPIRES:
case VK_LOCK_ON_ACTIVE:
case VK_NO_LOOP:
case VK_AUTO_FOCUS:
case VK_ACTIVATION_GROUP:
case VK_AGENDA_GROUP:
case VK_RULEFLOW_GROUP:
case VK_DURATION:
case VK_DIALECT:
case VK_SALIENCE:
case VK_ENABLED:
case VK_ATTRIBUTES:
case VK_RULE:
case VK_IMPORT:
case VK_PACKAGE:
case VK_TEMPLATE:
case VK_QUERY:
case VK_DECLARE:
case VK_FUNCTION:
case VK_GLOBAL:
case VK_EVAL:
case VK_CONTAINS:
case VK_MATCHES:
case VK_EXCLUDES:
case VK_SOUNDSLIKE:
case VK_MEMBEROF:
case VK_ENTRY_POINT:
case VK_NOT:
case VK_IN:
case VK_OR:
case VK_AND:
case VK_EXISTS:
case VK_FORALL:
case VK_ACTION:
case VK_REVERSE:
case VK_RESULT:
case SEMICOLON:
case DOT:
case DOT_STAR:
case END:
case STRING:
case COMMA:
case RIGHT_PAREN:
case AT:
case COLON:
case EQUALS:
case WHEN:
case BOOL:
case INT:
case DOUBLE_PIPE:
case DOUBLE_AMPER:
case FROM:
case OVER:
case ACCUMULATE:
case INIT:
case COLLECT:
case ARROW:
case EQUAL:
case GREATER:
case GREATER_EQUAL:
case LESS:
case LESS_EQUAL:
case NOT_EQUAL:
case GRAVE_ACCENT:
case FLOAT:
case NULL:
case LEFT_SQUARE:
case RIGHT_SQUARE:
case THEN:
case LEFT_CURLY:
case RIGHT_CURLY:
case MISC:
case EOL:
case WS:
case EscapeSequence:
case HexDigit:
case UnicodeEscape:
case OctalEscape:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
{
    alt68=1;
  }
break;
}
}
 else if ((LA68_0 == LEFT_SQUARE)) {
alt68=2;
}
switch (alt68) {
case 1:
{
if (!(input.LA(1) == LEFT_PAREN)) {
if (backtracking > 0) {
  failed=true;
  return retval;
}
throw new FailedPredicateException(input,"expression_chain","input.LA(1) == LEFT_PAREN");
}
pushFollow(FOLLOW_paren_chunk_in_expression_chain3430);
paren_chunk193=paren_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_paren_chunk.add(paren_chunk193.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_square_chunk_in_expression_chain3444);
square_chunk194=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_square_chunk.add(square_chunk194.getTree());
}
break;
}
int alt69=2;
int LA69_0=input.LA(1);
if ((LA69_0 == DOT)) {
alt69=1;
}
switch (alt69) {
case 1:
{
pushFollow(FOLLOW_expression_chain_in_expression_chain3455);
expression_chain195=expression_chain();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_expression_chain.add(expression_chain195.getTree());
}
break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_EXPRESSION_CHAIN,DOT191),root_1);
adaptor.addChild(root_1,stream_ID.next());
if (stream_square_chunk.hasNext()) {
adaptor.addChild(root_1,stream_square_chunk.next());
}
stream_square_chunk.reset();
if (stream_paren_chunk.hasNext()) {
adaptor.addChild(root_1,stream_paren_chunk.next());
}
stream_paren_chunk.reset();
if (stream_expression_chain.hasNext()) {
adaptor.addChild(root_1,stream_expression_chain.next());
}
stream_expression_chain.reset();
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
