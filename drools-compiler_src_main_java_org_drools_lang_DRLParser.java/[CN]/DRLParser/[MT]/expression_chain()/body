{
  expression_chain_return retval=new expression_chain_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT191=null;
  Token ID192=null;
  square_chunk_return square_chunk193=null;
  paren_chunk_return paren_chunk194=null;
  expression_chain_return expression_chain195=null;
  Object DOT191_tree=null;
  Object ID192_tree=null;
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
  RewriteRuleSubtreeStream stream_expression_chain=new RewriteRuleSubtreeStream(adaptor,"rule expression_chain");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      DOT191=(Token)input.LT(1);
      match(input,DOT,FOLLOW_DOT_in_expression_chain3407);
      if (failed)       return retval;
      if (backtracking == 0)       stream_DOT.add(DOT191);
      if (backtracking == 0) {
        emit(DOT191,DroolsEditorType.IDENTIFIER);
      }
      ID192=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_expression_chain3414);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID192);
      if (backtracking == 0) {
        emit(ID192,DroolsEditorType.IDENTIFIER);
      }
      int alt68=3;
      alt68=dfa68.predict(input);
switch (alt68) {
case 1:
{
          pushFollow(FOLLOW_square_chunk_in_expression_chain3436);
          square_chunk193=square_chunk();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_square_chunk.add(square_chunk193.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_paren_chunk_in_expression_chain3458);
      paren_chunk194=paren_chunk();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_paren_chunk.add(paren_chunk194.getTree());
    }
  break;
}
int alt69=2;
int LA69_0=input.LA(1);
if ((LA69_0 == DOT)) {
alt69=1;
}
switch (alt69) {
case 1:
{
  pushFollow(FOLLOW_expression_chain_in_expression_chain3469);
  expression_chain195=expression_chain();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_expression_chain.add(expression_chain195.getTree());
}
break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_EXPRESSION_CHAIN,DOT191),root_1);
adaptor.addChild(root_1,stream_ID.next());
if (stream_square_chunk.hasNext()) {
  adaptor.addChild(root_1,stream_square_chunk.next());
}
stream_square_chunk.reset();
if (stream_paren_chunk.hasNext()) {
  adaptor.addChild(root_1,stream_paren_chunk.next());
}
stream_paren_chunk.reset();
if (stream_expression_chain.hasNext()) {
  adaptor.addChild(root_1,stream_expression_chain.next());
}
stream_expression_chain.reset();
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
