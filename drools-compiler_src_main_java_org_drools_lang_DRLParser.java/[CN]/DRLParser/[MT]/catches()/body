{
  DRLParser.catches_return retval=new DRLParser.catches_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.catchClause_return catchClause442=null;
  DRLParser.catchClause_return catchClause443=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_catchClause_in_catches6619);
      catchClause442=catchClause();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,catchClause442.getTree());
      loop143:       do {
        int alt143=2;
        alt143=dfa143.predict(input);
switch (alt143) {
case 1:
{
            pushFollow(FOLLOW_catchClause_in_catches6622);
            catchClause443=catchClause();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,catchClause443.getTree());
          }
        break;
default :
      break loop143;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
