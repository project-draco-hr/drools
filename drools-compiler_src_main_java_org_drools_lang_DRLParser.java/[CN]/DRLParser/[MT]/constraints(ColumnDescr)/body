{
  try {
{
      int alt31=2;
      int LA31_0=input.LA(1);
      if (((LA31_0 >= PACKAGE && LA31_0 <= ATTRIBUTES) || LA31_0 == ENABLED || LA31_0 == SALIENCE || LA31_0 == DURATION || (LA31_0 >= ACCUMULATE && LA31_0 <= OR) || (LA31_0 >= CONTAINS && LA31_0 <= EXCLUDES) || LA31_0 == NULL || (LA31_0 >= AND && LA31_0 <= THEN))) {
        alt31=1;
      }
 else       if ((LA31_0 == LEFT_PAREN)) {
        alt31=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("898:4: ( ( constraint[column] )=> constraint[column] | predicate[column] )",31,0,input);
        throw nvae;
      }
switch (alt31) {
case 1:
{
          pushFollow(FOLLOW_constraint_in_constraints2333);
          constraint(column);
          _fsp--;
          if (failed)           return;
        }
      break;
case 2:
{
      pushFollow(FOLLOW_predicate_in_constraints2336);
      predicate(column);
      _fsp--;
      if (failed)       return;
    }
  break;
}
loop33: do {
int alt33=2;
int LA33_0=input.LA(1);
if ((LA33_0 == 66)) {
  alt33=1;
}
switch (alt33) {
case 1:
{
    match(input,66,FOLLOW_66_in_constraints2344);
    if (failed)     return;
    int alt32=2;
    int LA32_0=input.LA(1);
    if (((LA32_0 >= PACKAGE && LA32_0 <= ATTRIBUTES) || LA32_0 == ENABLED || LA32_0 == SALIENCE || LA32_0 == DURATION || (LA32_0 >= ACCUMULATE && LA32_0 <= OR) || (LA32_0 >= CONTAINS && LA32_0 <= EXCLUDES) || LA32_0 == NULL || (LA32_0 >= AND && LA32_0 <= THEN))) {
      alt32=1;
    }
 else     if ((LA32_0 == LEFT_PAREN)) {
      alt32=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("899:9: ( ( constraint[column] )=> constraint[column] | predicate[column] )",32,0,input);
      throw nvae;
    }
switch (alt32) {
case 1:
{
        pushFollow(FOLLOW_constraint_in_constraints2347);
        constraint(column);
        _fsp--;
        if (failed)         return;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_predicate_in_constraints2350);
    predicate(column);
    _fsp--;
    if (failed)     return;
  }
break;
}
}
break;
default :
break loop33;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
