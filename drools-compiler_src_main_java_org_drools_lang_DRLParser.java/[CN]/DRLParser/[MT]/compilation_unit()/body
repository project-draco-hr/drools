{
  compilation_unit_return retval=new compilation_unit_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EOF3=null;
  package_statement_return package_statement1=null;
  statement_return statement2=null;
  Object EOF3_tree=null;
  RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
  RewriteRuleSubtreeStream stream_package_statement=new RewriteRuleSubtreeStream(adaptor,"rule package_statement");
  RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
  try {
{
      int alt1=2;
      int LA1_0=input.LA(1);
      if ((LA1_0 == ID) && ((((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT))) || (validateIdentifierKey(DroolsSoftKeywords.QUERY)) || (validateIdentifierKey(DroolsSoftKeywords.DIALECT))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| (validateIdentifierKey(DroolsSoftKeywords.FUNCTION))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.RULE))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.IMPORT))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.PACKAGE))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| (validateIdentifierKey(DroolsSoftKeywords.GLOBAL))|| (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))))) {
        int LA1_1=input.LA(2);
        if ((LA1_1 == ID) && ((((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE))) || ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE))) || ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.PACKAGE))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.QUERY))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.FUNCTION))|| (validateIdentifierKey(DroolsSoftKeywords.RULE))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.IMPORT))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.GLOBAL))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))))) {
          int LA1_4=input.LA(3);
          if (((validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) {
            alt1=1;
          }
        }
      }
switch (alt1) {
case 1:
{
          pushFollow(FOLLOW_package_statement_in_compilation_unit388);
          package_statement1=package_statement();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_package_statement.add(package_statement1.getTree());
        }
      break;
  }
  loop2:   do {
    int alt2=2;
    int LA2_0=input.LA(1);
    if ((LA2_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.QUERY)) || (validateIdentifierKey(DroolsSoftKeywords.GLOBAL)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.DIALECT))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.FUNCTION))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.RULE))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.IMPORT))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))))) {
      alt2=1;
    }
switch (alt2) {
case 1:
{
        pushFollow(FOLLOW_statement_in_compilation_unit393);
        statement2=statement();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_statement.add(statement2.getTree());
      }
    break;
default :
  break loop2;
}
}
 while (true);
EOF3=(Token)input.LT(1);
match(input,EOF,FOLLOW_EOF_in_compilation_unit398);
if (failed) return retval;
if (backtracking == 0) stream_EOF.add(EOF3);
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_COMPILATION_UNIT,"VT_COMPILATION_UNIT"),root_1);
  if (stream_package_statement.hasNext()) {
    adaptor.addChild(root_1,stream_package_statement.next());
  }
  stream_package_statement.reset();
  while (stream_statement.hasNext()) {
    adaptor.addChild(root_1,stream_statement.next());
  }
  stream_statement.reset();
  adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
reportError(e);
}
catch (RewriteEmptyStreamException e) {
}
 finally {
if (isEditorInterfaceEnabled && retval.tree == null) {
retval.tree=root_0;
root_0=(Object)adaptor.nil();
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_COMPILATION_UNIT,"VT_COMPILATION_UNIT"),root_1);
if (stream_package_statement.hasNext()) {
adaptor.addChild(root_1,stream_package_statement.next());
}
while (stream_statement.hasNext()) {
adaptor.addChild(root_1,stream_statement.next());
}
adaptor.addChild(root_0,root_1);
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (isEditorInterfaceEnabled && hasErrors()) {
DroolsTree rootNode=(DroolsTree)retval.tree;
for (int i=0; i < rootNode.getChildCount(); i++) {
DroolsTree childNode=(DroolsTree)rootNode.getChild(i);
if (childNode.getStartCharOffset() >= errors.get(0).getOffset()) {
rootNode.deleteChild(i);
}
}
}
}
return retval;
}
