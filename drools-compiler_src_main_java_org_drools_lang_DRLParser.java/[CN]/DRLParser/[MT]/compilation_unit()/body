{
  DRLParser.compilation_unit_return retval=new DRLParser.compilation_unit_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EOF5=null;
  DRLParser.package_statement_return package_statement1=null;
  DRLParser.resync_return resync2=null;
  DRLParser.statement_return statement3=null;
  DRLParser.resync_return resync4=null;
  Object EOF5_tree=null;
  RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
  RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
  RewriteRuleSubtreeStream stream_package_statement=new RewriteRuleSubtreeStream(adaptor,"rule package_statement");
  RewriteRuleSubtreeStream stream_resync=new RewriteRuleSubtreeStream(adaptor,"rule resync");
  try {
{
      int alt1=2;
      alt1=dfa1.predict(input);
switch (alt1) {
case 1:
{
          pushFollow(FOLLOW_package_statement_in_compilation_unit618);
          package_statement1=package_statement();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_package_statement.add(package_statement1.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_resync_in_compilation_unit637);
  resync2=resync();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_resync.add(resync2.getTree());
  loop2:   do {
    int alt2=2;
    int LA2_0=input.LA(1);
    if ((LA2_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))))) {
      alt2=1;
    }
switch (alt2) {
case 1:
{
        pushFollow(FOLLOW_statement_in_compilation_unit644);
        statement3=statement();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_statement.add(statement3.getTree());
        pushFollow(FOLLOW_resync_in_compilation_unit646);
        resync4=resync();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_resync.add(resync4.getTree());
      }
    break;
default :
  break loop2;
}
}
 while (true);
EOF5=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit653);
if (state.failed) return retval;
if (state.backtracking == 0) stream_EOF.add(EOF5);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_COMPILATION_UNIT,"VT_COMPILATION_UNIT"),root_1);
  if (stream_package_statement.hasNext()) {
    adaptor.addChild(root_1,stream_package_statement.nextTree());
  }
  stream_package_statement.reset();
  while (stream_statement.hasNext()) {
    adaptor.addChild(root_1,stream_statement.nextTree());
  }
  stream_statement.reset();
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException e) {
helper.reportError(e);
}
catch (RewriteEmptyStreamException e) {
}
 finally {
if (helper.isEditorInterfaceEnabled && retval.tree == null) {
retval.tree=root_0;
root_0=(Object)adaptor.nil();
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_COMPILATION_UNIT,"VT_COMPILATION_UNIT"),root_1);
if (stream_package_statement.hasNext()) {
adaptor.addChild(root_1,stream_package_statement.nextTree());
}
while (stream_statement.hasNext()) {
adaptor.addChild(root_1,stream_statement.nextTree());
}
adaptor.addChild(root_0,root_1);
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (helper.isEditorInterfaceEnabled && helper.hasErrors()) {
Tree rootNode=(Tree)adaptor.becomeRoot(adaptor.create(VT_COMPILATION_UNIT,"VT_COMPILATION_UNIT"),adaptor.nil());
for (int i=0; i < ((Tree)retval.tree).getChildCount(); i++) {
Tree childNode=(Tree)((Tree)retval.tree).getChild(i);
if (!(childNode instanceof CommonErrorNode)) {
rootNode.addChild(childNode);
}
}
retval.tree=rootNode;
}
}
return retval;
}
