{
  DRLParser.nonWildcardTypeArguments_return retval=new DRLParser.nonWildcardTypeArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS518=null;
  Token GREATER520=null;
  DRLParser.typeList_return typeList519=null;
  Object LESS518_tree=null;
  Object GREATER520_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS518=(Token)match(input,LESS,FOLLOW_LESS_in_nonWildcardTypeArguments7582);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS518_tree=(Object)adaptor.create(LESS518);
        adaptor.addChild(root_0,LESS518_tree);
      }
      pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments7584);
      typeList519=typeList();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeList519.getTree());
      GREATER520=(Token)match(input,GREATER,FOLLOW_GREATER_in_nonWildcardTypeArguments7586);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER520_tree=(Object)adaptor.create(GREATER520);
        adaptor.addChild(root_0,GREATER520_tree);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
