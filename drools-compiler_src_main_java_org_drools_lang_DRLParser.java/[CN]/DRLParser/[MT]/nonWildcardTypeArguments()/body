{
  DRLParser.nonWildcardTypeArguments_return retval=new DRLParser.nonWildcardTypeArguments_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS642=null;
  Token GREATER644=null;
  DRLParser.typeList_return typeList643=null;
  Object LESS642_tree=null;
  Object GREATER644_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS642=(Token)match(input,LESS,FOLLOW_LESS_in_nonWildcardTypeArguments8340);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS642_tree=(Object)adaptor.create(LESS642);
        adaptor.addChild(root_0,LESS642_tree);
      }
      pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments8342);
      typeList643=typeList();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeList643.getTree());
      GREATER644=(Token)match(input,GREATER,FOLLOW_GREATER_in_nonWildcardTypeArguments8344);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER644_tree=(Object)adaptor.create(GREATER644);
        adaptor.addChild(root_0,GREATER644_tree);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
