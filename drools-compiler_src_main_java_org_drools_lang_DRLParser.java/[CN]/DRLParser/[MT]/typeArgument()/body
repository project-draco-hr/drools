{
  DRLParser.typeArgument_return retval=new DRLParser.typeArgument_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token QUESTION310=null;
  DRLParser.type_return type309=null;
  DRLParser.extends_key_return extends_key311=null;
  DRLParser.super_key_return super_key312=null;
  DRLParser.type_return type313=null;
  Object QUESTION310_tree=null;
  try {
    int alt108=2;
    int LA108_0=input.LA(1);
    if ((LA108_0 == ID)) {
      alt108=1;
    }
 else     if ((LA108_0 == QUESTION)) {
      alt108=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",108,0,input);
      throw nvae;
    }
switch (alt108) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_type_in_typeArgument5420);
        type309=type();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,type309.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    QUESTION310=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_typeArgument5425);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      QUESTION310_tree=(Object)adaptor.create(QUESTION310);
      adaptor.addChild(root_0,QUESTION310_tree);
    }
    int alt107=2;
    int LA107_0=input.LA(1);
    if ((LA107_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))))) {
      alt107=1;
    }
switch (alt107) {
case 1:
{
        int alt106=2;
        int LA106_0=input.LA(1);
        if ((LA106_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))))) {
          int LA106_1=input.LA(2);
          if ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))))) {
            alt106=1;
          }
 else           if ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))) {
            alt106=2;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",106,1,input);
            throw nvae;
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",106,0,input);
          throw nvae;
        }
switch (alt106) {
case 1:
{
            pushFollow(FOLLOW_extends_key_in_typeArgument5429);
            extends_key311=extends_key();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,extends_key311.getTree());
          }
        break;
case 2:
{
        pushFollow(FOLLOW_super_key_in_typeArgument5433);
        super_key312=super_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,super_key312.getTree());
      }
    break;
}
pushFollow(FOLLOW_type_in_typeArgument5436);
type313=type();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,type313.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
