{
  DRLParser.signed_decimal_match_return retval=new DRLParser.signed_decimal_match_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS290=null;
  Token MINUS291=null;
  Token DECIMAL292=null;
  Object PLUS290_tree=null;
  Object MINUS291_tree=null;
  Object DECIMAL292_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt89=3;
      int LA89_0=input.LA(1);
      if ((LA89_0 == PLUS)) {
        alt89=1;
      }
 else       if ((LA89_0 == MINUS)) {
        alt89=2;
      }
switch (alt89) {
case 1:
{
          PLUS290=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_decimal_match4844);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            PLUS290_tree=(Object)adaptor.create(PLUS290);
            adaptor.addChild(root_0,PLUS290_tree);
          }
          if (state.backtracking == 0) {
            helper.emit(PLUS290,DroolsEditorType.NUMERIC_CONST);
          }
        }
      break;
case 2:
{
      MINUS291=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_decimal_match4850);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        MINUS291_tree=(Object)adaptor.create(MINUS291);
        adaptor.addChild(root_0,MINUS291_tree);
      }
      if (state.backtracking == 0) {
        helper.emit(MINUS291,DroolsEditorType.NUMERIC_CONST);
      }
    }
  break;
}
DECIMAL292=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_signed_decimal_match4872);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECIMAL292_tree=(Object)adaptor.create(DECIMAL292);
adaptor.addChild(root_0,DECIMAL292_tree);
}
if (state.backtracking == 0) {
helper.emit(DECIMAL292,DroolsEditorType.NUMERIC_CONST);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
