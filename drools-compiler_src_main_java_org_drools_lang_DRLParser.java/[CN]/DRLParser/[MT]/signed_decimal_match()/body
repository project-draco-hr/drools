{
  DRLParser.signed_decimal_match_return retval=new DRLParser.signed_decimal_match_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS256=null;
  Token MINUS257=null;
  Token DECIMAL258=null;
  Object PLUS256_tree=null;
  Object MINUS257_tree=null;
  Object DECIMAL258_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt81=3;
      int LA81_0=input.LA(1);
      if ((LA81_0 == PLUS)) {
        alt81=1;
      }
 else       if ((LA81_0 == MINUS)) {
        alt81=2;
      }
switch (alt81) {
case 1:
{
          PLUS256=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_decimal_match4356);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            PLUS256_tree=(Object)adaptor.create(PLUS256);
            adaptor.addChild(root_0,PLUS256_tree);
          }
          if (state.backtracking == 0) {
            helper.emit(PLUS256,DroolsEditorType.NUMERIC_CONST);
          }
        }
      break;
case 2:
{
      MINUS257=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_decimal_match4362);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        MINUS257_tree=(Object)adaptor.create(MINUS257);
        adaptor.addChild(root_0,MINUS257_tree);
      }
      if (state.backtracking == 0) {
        helper.emit(MINUS257,DroolsEditorType.NUMERIC_CONST);
      }
    }
  break;
}
DECIMAL258=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_signed_decimal_match4384);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECIMAL258_tree=(Object)adaptor.create(DECIMAL258);
adaptor.addChild(root_0,DECIMAL258_tree);
}
if (state.backtracking == 0) {
helper.emit(DECIMAL258,DroolsEditorType.NUMERIC_CONST);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
