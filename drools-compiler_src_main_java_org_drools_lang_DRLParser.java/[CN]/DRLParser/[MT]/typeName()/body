{
  DRLParser.typeName_return retval=new DRLParser.typeName_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID322=null;
  Token DOT323=null;
  Token ID324=null;
  Object ID322_tree=null;
  Object DOT323_tree=null;
  Object ID324_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  try {
{
      ID322=(Token)match(input,ID,FOLLOW_ID_in_typeName5734);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(ID322);
      loop110:       do {
        int alt110=2;
        int LA110_0=input.LA(1);
        if ((LA110_0 == DOT)) {
          alt110=1;
        }
switch (alt110) {
case 1:
{
            DOT323=(Token)match(input,DOT,FOLLOW_DOT_in_typeName5737);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_DOT.add(DOT323);
            ID324=(Token)match(input,ID,FOLLOW_ID_in_typeName5739);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_ID.add(ID324);
          }
        break;
default :
      break loop110;
  }
}
 while (true);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
    adaptor.addChild(root_0,(Object)adaptor.create(VT_TYPE_NAME,input.toString(retval.start,input.LT(-1))));
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
