{
  DRLParser.typeName_return retval=new DRLParser.typeName_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID300=null;
  Token DOT302=null;
  Token ID303=null;
  DRLParser.packageOrTypeName_return packageOrTypeName301=null;
  Object ID300_tree=null;
  Object DOT302_tree=null;
  Object ID303_tree=null;
  try {
    int alt103=2;
    int LA103_0=input.LA(1);
    if ((LA103_0 == ID)) {
      int LA103_1=input.LA(2);
      if ((LA103_1 == EOF)) {
        alt103=1;
      }
 else       if ((LA103_1 == DOT)) {
        alt103=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",103,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",103,0,input);
      throw nvae;
    }
switch (alt103) {
case 1:
{
        root_0=(Object)adaptor.nil();
        ID300=(Token)match(input,ID,FOLLOW_ID_in_typeName5331);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          ID300_tree=(Object)adaptor.create(ID300);
          adaptor.addChild(root_0,ID300_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_packageOrTypeName_in_typeName5342);
    packageOrTypeName301=packageOrTypeName();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,packageOrTypeName301.getTree());
    DOT302=(Token)match(input,DOT,FOLLOW_DOT_in_typeName5344);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      DOT302_tree=(Object)adaptor.create(DOT302);
      adaptor.addChild(root_0,DOT302_tree);
    }
    ID303=(Token)match(input,ID,FOLLOW_ID_in_typeName5346);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID303_tree=(Object)adaptor.create(ID303);
      adaptor.addChild(root_0,ID303_tree);
    }
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
