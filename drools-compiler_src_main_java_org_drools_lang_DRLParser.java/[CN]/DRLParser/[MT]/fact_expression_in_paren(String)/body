{
  BaseDescr pd=null;
  BaseDescr fe=null;
  BaseDescr f=null;
  pd=null;
  boolean multi=false;
  try {
    int alt30=2;
    int LA30_0=input.LA(1);
    if ((LA30_0 == LEFT_SQUARE)) {
      alt30=1;
    }
 else     if ((LA30_0 == ID)) {
      alt30=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("854:2: fact_expression_in_paren[String id] returns [BaseDescr pd] : ( '(' fe= fact_expression_in_paren[id] ')' | f= fact ( ('or'|'||')f= fact )* );",30,0,input);
      throw nvae;
    }
switch (alt30) {
case 1:
{
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_fact_expression_in_paren1874);
        pushFollow(FOLLOW_fact_expression_in_paren_in_fact_expression_in_paren1878);
        fe=fact_expression_in_paren(id);
        _fsp--;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_fact_expression_in_paren1880);
        pd=fe;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_fact_in_fact_expression_in_paren1891);
    f=fact();
    _fsp--;
    ((ColumnDescr)f).setIdentifier(id);
    pd=f;
    loop29:     do {
      int alt29=2;
      int LA29_0=input.LA(1);
      if (((LA29_0 >= 55 && LA29_0 <= 56))) {
        alt29=1;
      }
switch (alt29) {
case 1:
{
          if ((input.LA(1) >= 55 && input.LA(1) <= 56)) {
            input.consume();
            errorRecovery=false;
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_fact_expression_in_paren1904);
            throw mse;
          }
          if (!multi) {
            BaseDescr first=pd;
            pd=new OrDescr();
            ((OrDescr)pd).addDescr(first);
            multi=true;
          }
          pushFollow(FOLLOW_fact_in_fact_expression_in_paren1921);
          f=fact();
          _fsp--;
          ((ColumnDescr)f).setIdentifier(id);
          ((OrDescr)pd).addDescr(f);
        }
      break;
default :
    break loop29;
}
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return pd;
}
