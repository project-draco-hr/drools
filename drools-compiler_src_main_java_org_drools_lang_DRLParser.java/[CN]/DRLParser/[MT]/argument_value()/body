{
  ArgumentValueDescr value=null;
  Token t=null;
  ArgumentValueDescr.MapDescr m=null;
  List a=null;
  value=null;
  String text=null;
  try {
{
      int alt27=8;
switch (input.LA(1)) {
case STRING:
        alt27=1;
      break;
case INT:
    alt27=2;
  break;
case FLOAT:
alt27=3;
break;
case BOOL:
alt27=4;
break;
case ID:
alt27=5;
break;
case 54:
alt27=6;
break;
case CURLY_CHUNK:
alt27=7;
break;
case 47:
alt27=8;
break;
default :
NoViableAltException nvae=new NoViableAltException("817:4: (t= STRING | t= INT | t= FLOAT | t= BOOL | t= ID | t= 'null' | m= inline_map | a= inline_array )",27,0,input);
throw nvae;
}
switch (alt27) {
case 1:
{
t=(Token)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_argument_value1686);
text=getString(t);
value=new ArgumentValueDescr(ArgumentValueDescr.STRING,text);
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,INT,FOLLOW_INT_in_argument_value1697);
text=t.getText();
value=new ArgumentValueDescr(ArgumentValueDescr.INTEGRAL,text);
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,FLOAT,FOLLOW_FLOAT_in_argument_value1710);
text=t.getText();
value=new ArgumentValueDescr(ArgumentValueDescr.DECIMAL,text);
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,BOOL,FOLLOW_BOOL_in_argument_value1721);
text=t.getText();
value=new ArgumentValueDescr(ArgumentValueDescr.BOOLEAN,text);
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_argument_value1733);
text=t.getText();
value=new ArgumentValueDescr(ArgumentValueDescr.VARIABLE,text);
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,54,FOLLOW_54_in_argument_value1744);
text="null";
value=new ArgumentValueDescr(ArgumentValueDescr.NULL,text);
}
break;
case 7:
{
pushFollow(FOLLOW_inline_map_in_argument_value1761);
m=inline_map();
_fsp--;
value=new ArgumentValueDescr(ArgumentValueDescr.MAP,m.getKeyValuePairs());
}
break;
case 8:
{
pushFollow(FOLLOW_inline_array_in_argument_value1777);
a=inline_array();
_fsp--;
value=new ArgumentValueDescr(ArgumentValueDescr.LIST,a);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return value;
}
