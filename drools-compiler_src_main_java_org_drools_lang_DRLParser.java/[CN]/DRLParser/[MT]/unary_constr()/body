{
  unary_constr_return retval=new unary_constr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN226=null;
  Token RIGHT_PAREN228=null;
  eval_key_return eval_key223=null;
  paren_chunk_return paren_chunk224=null;
  field_constraint_return field_constraint225=null;
  or_constr_return or_constr227=null;
  Object LEFT_PAREN226_tree=null;
  Object RIGHT_PAREN228_tree=null;
  boolean isFailed=true;
  try {
    int alt81=3;
    int LA81_0=input.LA(1);
    if ((LA81_0 == ID)) {
      int LA81_1=input.LA(2);
      if (((LA81_1 >= ID && LA81_1 <= DOT) || LA81_1 == COLON || (LA81_1 >= EQUAL && LA81_1 <= TILDE) || LA81_1 == LEFT_SQUARE)) {
        alt81=2;
      }
 else       if ((LA81_1 == LEFT_PAREN)) {
        int LA81_14=input.LA(3);
        if (((validateIdentifierKey(DroolsSoftKeywords.EVAL)))) {
          alt81=1;
        }
 else         if ((true)) {
          alt81=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("1139:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );",81,14,input);
          throw nvae;
        }
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("1139:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );",81,1,input);
        throw nvae;
      }
    }
 else     if ((LA81_0 == LEFT_PAREN)) {
      alt81=3;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("1139:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );",81,0,input);
      throw nvae;
    }
switch (alt81) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_eval_key_in_unary_constr3864);
        eval_key223=eval_key();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         root_0=(Object)adaptor.becomeRoot(eval_key223.getTree(),root_0);
        pushFollow(FOLLOW_paren_chunk_in_unary_constr3867);
        paren_chunk224=paren_chunk();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,paren_chunk224.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_field_constraint_in_unary_constr3872);
    field_constraint225=field_constraint();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,field_constraint225.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
LEFT_PAREN226=(Token)input.LT(1);
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_constr3878);
if (failed) return retval;
if (backtracking == 0) {
  emit(LEFT_PAREN226,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_or_constr_in_unary_constr3888);
or_constr227=or_constr();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,or_constr227.getTree());
RIGHT_PAREN228=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_constr3893);
if (failed) return retval;
if (backtracking == 0) {
  RIGHT_PAREN228_tree=(Object)adaptor.create(RIGHT_PAREN228);
  adaptor.addChild(root_0,RIGHT_PAREN228_tree);
}
if (backtracking == 0) {
  emit(RIGHT_PAREN228,DroolsEditorType.SYMBOL);
}
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (isEditorInterfaceEnabled && isFailed && input.LA(2) == EOF && input.LA(1) == ID) {
emit(input.LT(1),DroolsEditorType.IDENTIFIER);
input.consume();
if (input.get(input.index() - 1).getType() == WS) emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
}
}
return retval;
}
