{
  DeclarativeInvokerDescr ds=null;
  Token ident=null;
  String args=null;
  ds=null;
  AccessorDescr ad=null;
  try {
{
      pushFollow(FOLLOW_identifier_in_from_source1992);
      ident=identifier();
      _fsp--;
      if (failed)       return ds;
      if (backtracking == 0) {
        ad=new AccessorDescr(ident.getText());
        ad.setLocation(offset(ident.getLine()),ident.getCharPositionInLine());
        ad.setStartCharacter(((CommonToken)ident).getStartIndex());
        ad.setEndCharacter(((CommonToken)ident).getStopIndex());
        ds=ad;
        location.setProperty(Location.LOCATION_FROM_CONTENT,ident.getText());
      }
      int alt31=2;
      int LA31_0=input.LA(1);
      if ((LA31_0 == LEFT_PAREN)) {
        int LA31_1=input.LA(2);
        if ((synpred46())) {
          alt31=1;
        }
      }
switch (alt31) {
case 1:
{
          pushFollow(FOLLOW_paren_chunk_in_from_source2003);
          args=paren_chunk(from);
          _fsp--;
          if (failed)           return ds;
          if (backtracking == 0) {
            if (args != null) {
              ad.setVariableName(null);
              FunctionCallDescr fc=new FunctionCallDescr(ident.getText());
              fc.setLocation(offset(ident.getLine()),ident.getCharPositionInLine());
              fc.setArguments(args);
              fc.setStartCharacter(((CommonToken)ident).getStartIndex());
              fc.setEndCharacter(((CommonToken)ident).getStopIndex());
              ad.addInvoker(fc);
              location.setProperty(Location.LOCATION_FROM_CONTENT,args);
            }
          }
        }
      break;
  }
  int alt32=2;
  int LA32_0=input.LA(1);
  if ((LA32_0 == 71)) {
    alt32=1;
  }
switch (alt32) {
case 1:
{
      pushFollow(FOLLOW_expression_chain_in_from_source2017);
      expression_chain(from,ad);
      _fsp--;
      if (failed)       return ds;
    }
  break;
}
if (backtracking == 0) {
if (ad != null) {
  location.setProperty(Location.LOCATION_FROM_CONTENT,ad.toString());
}
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return ds;
}
