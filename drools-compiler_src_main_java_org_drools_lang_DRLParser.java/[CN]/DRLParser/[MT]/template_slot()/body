{
  template_slot_return retval=new template_slot_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON67=null;
  data_type_return data_type65=null;
  slot_id_return slot_id66=null;
  Object SEMICOLON67_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_slot_id=new RewriteRuleSubtreeStream(adaptor,"rule slot_id");
  RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
  try {
{
      pushFollow(FOLLOW_data_type_in_template_slot1406);
      data_type65=data_type();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_data_type.add(data_type65.getTree());
      pushFollow(FOLLOW_slot_id_in_template_slot1408);
      slot_id66=slot_id();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_slot_id.add(slot_id66.getTree());
      int alt27=2;
      int LA27_0=input.LA(1);
      if ((LA27_0 == SEMICOLON)) {
        alt27=1;
      }
switch (alt27) {
case 1:
{
          SEMICOLON67=(Token)input.LT(1);
          match(input,SEMICOLON,FOLLOW_SEMICOLON_in_template_slot1410);
          if (failed)           return retval;
          if (backtracking == 0)           stream_SEMICOLON.add(SEMICOLON67);
        }
      break;
  }
  if (backtracking == 0) {
    emit(SEMICOLON67,DroolsEditorType.SYMBOL);
  }
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_SLOT,"VT_SLOT"),root_1);
        adaptor.addChild(root_1,stream_data_type.next());
        adaptor.addChild(root_1,stream_slot_id.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
