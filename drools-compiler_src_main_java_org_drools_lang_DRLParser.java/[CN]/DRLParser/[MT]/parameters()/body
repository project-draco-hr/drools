{
  parameters_return retval=new parameters_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN37=null;
  Token COMMA39=null;
  Token RIGHT_PAREN41=null;
  param_definition_return param_definition38=null;
  param_definition_return param_definition40=null;
  Object LEFT_PAREN37_tree=null;
  Object COMMA39_tree=null;
  Object RIGHT_PAREN41_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_param_definition=new RewriteRuleSubtreeStream(adaptor,"rule param_definition");
  try {
{
      LEFT_PAREN37=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parameters1022);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN37);
      if (backtracking == 0) {
        emit(LEFT_PAREN37,DroolsEditorType.SYMBOL);
      }
      int alt16=2;
      int LA16_0=input.LA(1);
      if ((LA16_0 == ID)) {
        alt16=1;
      }
switch (alt16) {
case 1:
{
          pushFollow(FOLLOW_param_definition_in_parameters1031);
          param_definition38=param_definition();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_param_definition.add(param_definition38.getTree());
          loop15:           do {
            int alt15=2;
            int LA15_0=input.LA(1);
            if ((LA15_0 == COMMA)) {
              alt15=1;
            }
switch (alt15) {
case 1:
{
                COMMA39=(Token)input.LT(1);
                match(input,COMMA,FOLLOW_COMMA_in_parameters1034);
                if (failed)                 return retval;
                if (backtracking == 0)                 stream_COMMA.add(COMMA39);
                if (backtracking == 0) {
                  emit(COMMA39,DroolsEditorType.SYMBOL);
                }
                pushFollow(FOLLOW_param_definition_in_parameters1038);
                param_definition40=param_definition();
                _fsp--;
                if (failed)                 return retval;
                if (backtracking == 0)                 stream_param_definition.add(param_definition40.getTree());
              }
            break;
default :
          break loop15;
      }
    }
 while (true);
  }
break;
}
RIGHT_PAREN41=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parameters1047);
if (failed) return retval;
if (backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN41);
if (backtracking == 0) {
emit(RIGHT_PAREN41,DroolsEditorType.SYMBOL);
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_PARAM_LIST,"VT_PARAM_LIST"),root_1);
  while (stream_param_definition.hasNext()) {
    adaptor.addChild(root_1,stream_param_definition.next());
  }
  stream_param_definition.reset();
  adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
  adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
