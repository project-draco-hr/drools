{
  DRLParser.parameters_return retval=new DRLParser.parameters_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN344=null;
  Token COMMA346=null;
  Token RIGHT_PAREN348=null;
  DRLParser.param_definition_return param_definition345=null;
  DRLParser.param_definition_return param_definition347=null;
  Object LEFT_PAREN344_tree=null;
  Object COMMA346_tree=null;
  Object RIGHT_PAREN348_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_param_definition=new RewriteRuleSubtreeStream(adaptor,"rule param_definition");
  try {
{
      LEFT_PAREN344=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parameters5945);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN344);
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN344,DroolsEditorType.SYMBOL);
      }
      int alt117=2;
      int LA117_0=input.LA(1);
      if ((LA117_0 == ID)) {
        alt117=1;
      }
switch (alt117) {
case 1:
{
          pushFollow(FOLLOW_param_definition_in_parameters5954);
          param_definition345=param_definition();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_param_definition.add(param_definition345.getTree());
          loop116:           do {
            int alt116=2;
            int LA116_0=input.LA(1);
            if ((LA116_0 == COMMA)) {
              alt116=1;
            }
switch (alt116) {
case 1:
{
                COMMA346=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameters5957);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_COMMA.add(COMMA346);
                if (state.backtracking == 0) {
                  helper.emit(COMMA346,DroolsEditorType.SYMBOL);
                }
                pushFollow(FOLLOW_param_definition_in_parameters5961);
                param_definition347=param_definition();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_param_definition.add(param_definition347.getTree());
              }
            break;
default :
          break loop116;
      }
    }
 while (true);
  }
break;
}
RIGHT_PAREN348=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parameters5970);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN348);
if (state.backtracking == 0) {
helper.emit(RIGHT_PAREN348,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_PARAM_LIST,"VT_PARAM_LIST"),root_1);
  while (stream_param_definition.hasNext()) {
    adaptor.addChild(root_1,stream_param_definition.nextTree());
  }
  stream_param_definition.reset();
  adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
