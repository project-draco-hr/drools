{
  DRLParser.explicitGenericInvocationSuffix_return retval=new DRLParser.explicitGenericInvocationSuffix_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID647=null;
  DRLParser.super_key_return super_key645=null;
  DRLParser.superSuffix_return superSuffix646=null;
  DRLParser.arguments_return arguments648=null;
  Object ID647_tree=null;
  try {
    int alt197=2;
    int LA197_0=input.LA(1);
    if ((LA197_0 == ID)) {
      int LA197_1=input.LA(2);
      if ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))) {
        alt197=1;
      }
 else       if ((true)) {
        alt197=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",197,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",197,0,input);
      throw nvae;
    }
switch (alt197) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_super_key_in_explicitGenericInvocationSuffix8356);
        super_key645=super_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,super_key645.getTree());
        pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix8358);
        superSuffix646=superSuffix();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,superSuffix646.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    ID647=(Token)match(input,ID,FOLLOW_ID_in_explicitGenericInvocationSuffix8366);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID647_tree=(Object)adaptor.create(ID647);
      adaptor.addChild(root_0,ID647_tree);
    }
    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix8368);
    arguments648=arguments();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,arguments648.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
