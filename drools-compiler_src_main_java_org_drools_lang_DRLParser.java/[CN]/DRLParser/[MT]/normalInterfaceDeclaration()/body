{
  DRLParser.normalInterfaceDeclaration_return retval=new DRLParser.normalInterfaceDeclaration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID785=null;
  DRLParser.interface_key_return interface_key784=null;
  DRLParser.typeParameters_return typeParameters786=null;
  DRLParser.extends_key_return extends_key787=null;
  DRLParser.typeList_return typeList788=null;
  DRLParser.interfaceBody_return interfaceBody789=null;
  Object ID785_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_interface_key_in_normalInterfaceDeclaration9483);
      interface_key784=interface_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,interface_key784.getTree());
      ID785=(Token)match(input,ID,FOLLOW_ID_in_normalInterfaceDeclaration9485);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID785_tree=(Object)adaptor.create(ID785);
        adaptor.addChild(root_0,ID785_tree);
      }
      int alt232=2;
      int LA232_0=input.LA(1);
      if ((LA232_0 == LESS)) {
        alt232=1;
      }
switch (alt232) {
case 1:
{
          pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration9487);
          typeParameters786=typeParameters();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,typeParameters786.getTree());
        }
      break;
  }
  int alt233=2;
  int LA233_0=input.LA(1);
  if ((LA233_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))))) {
    alt233=1;
  }
switch (alt233) {
case 1:
{
      pushFollow(FOLLOW_extends_key_in_normalInterfaceDeclaration9491);
      extends_key787=extends_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,extends_key787.getTree());
      pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration9493);
      typeList788=typeList();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeList788.getTree());
    }
  break;
}
pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration9497);
interfaceBody789=interfaceBody();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,interfaceBody789.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
