{
  DRLParser.modifyStatement_return retval=new DRLParser.modifyStatement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY479=null;
  Token COMMA480=null;
  Token RIGHT_CURLY481=null;
  DRLParser.modify_key_return s=null;
  DRLParser.expression_return e=null;
  DRLParser.parExpression_return parExpression478=null;
  Object LEFT_CURLY479_tree=null;
  Object COMMA480_tree=null;
  Object RIGHT_CURLY481_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_modify_key_in_modifyStatement6850);
      s=modify_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,s.getTree());
      pushFollow(FOLLOW_parExpression_in_modifyStatement6852);
      parExpression478=parExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,parExpression478.getTree());
      LEFT_CURLY479=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_modifyStatement6856);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY479_tree=(Object)adaptor.create(LEFT_CURLY479);
        adaptor.addChild(root_0,LEFT_CURLY479_tree);
      }
      int alt151=2;
      int LA151_0=input.LA(1);
      if ((LA151_0 == ID || LA151_0 == STRING || (LA151_0 >= BOOL && LA151_0 <= LEFT_PAREN) || LA151_0 == DECIMAL || LA151_0 == LESS || LA151_0 == LEFT_SQUARE || (LA151_0 >= NULL && LA151_0 <= FLOAT) || (LA151_0 >= INCR && LA151_0 <= NEGATION))) {
        alt151=1;
      }
switch (alt151) {
case 1:
{
          pushFollow(FOLLOW_expression_in_modifyStatement6864);
          e=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,e.getTree());
          loop150:           do {
            int alt150=2;
            int LA150_0=input.LA(1);
            if ((LA150_0 == COMMA)) {
              alt150=1;
            }
switch (alt150) {
case 1:
{
                COMMA480=(Token)match(input,COMMA,FOLLOW_COMMA_in_modifyStatement6867);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  COMMA480_tree=(Object)adaptor.create(COMMA480);
                  adaptor.addChild(root_0,COMMA480_tree);
                }
                pushFollow(FOLLOW_expression_in_modifyStatement6871);
                e=expression();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 adaptor.addChild(root_0,e.getTree());
              }
            break;
default :
          break loop150;
      }
    }
 while (true);
  }
break;
}
RIGHT_CURLY481=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_modifyStatement6880);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY481_tree=(Object)adaptor.create(RIGHT_CURLY481);
adaptor.addChild(root_0,RIGHT_CURLY481_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
