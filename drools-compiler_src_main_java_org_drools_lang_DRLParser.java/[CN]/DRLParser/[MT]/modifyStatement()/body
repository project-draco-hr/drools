{
  DRLParser.modifyStatement_return retval=new DRLParser.modifyStatement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY464=null;
  Token COMMA465=null;
  Token RIGHT_CURLY466=null;
  DRLParser.modify_key_return s=null;
  DRLParser.expression_return e=null;
  DRLParser.parExpression_return parExpression463=null;
  Object LEFT_CURLY464_tree=null;
  Object COMMA465_tree=null;
  Object RIGHT_CURLY466_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_modify_key_in_modifyStatement6747);
      s=modify_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,s.getTree());
      pushFollow(FOLLOW_parExpression_in_modifyStatement6749);
      parExpression463=parExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,parExpression463.getTree());
      LEFT_CURLY464=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_modifyStatement6753);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY464_tree=(Object)adaptor.create(LEFT_CURLY464);
        adaptor.addChild(root_0,LEFT_CURLY464_tree);
      }
      int alt149=2;
      int LA149_0=input.LA(1);
      if ((LA149_0 == ID || LA149_0 == STRING || (LA149_0 >= BOOL && LA149_0 <= LEFT_PAREN) || LA149_0 == DECIMAL || LA149_0 == LESS || LA149_0 == LEFT_SQUARE || (LA149_0 >= NULL && LA149_0 <= FLOAT) || (LA149_0 >= INCR && LA149_0 <= NEGATION))) {
        alt149=1;
      }
switch (alt149) {
case 1:
{
          pushFollow(FOLLOW_expression_in_modifyStatement6761);
          e=expression();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,e.getTree());
          loop148:           do {
            int alt148=2;
            int LA148_0=input.LA(1);
            if ((LA148_0 == COMMA)) {
              alt148=1;
            }
switch (alt148) {
case 1:
{
                COMMA465=(Token)match(input,COMMA,FOLLOW_COMMA_in_modifyStatement6764);
                if (state.failed)                 return retval;
                if (state.backtracking == 0) {
                  COMMA465_tree=(Object)adaptor.create(COMMA465);
                  adaptor.addChild(root_0,COMMA465_tree);
                }
                pushFollow(FOLLOW_expression_in_modifyStatement6768);
                e=expression();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 adaptor.addChild(root_0,e.getTree());
              }
            break;
default :
          break loop148;
      }
    }
 while (true);
  }
break;
}
RIGHT_CURLY466=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_modifyStatement6777);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_CURLY466_tree=(Object)adaptor.create(RIGHT_CURLY466);
adaptor.addChild(root_0,RIGHT_CURLY466_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
