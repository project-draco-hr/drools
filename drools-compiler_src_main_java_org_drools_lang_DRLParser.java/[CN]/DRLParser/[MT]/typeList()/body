{
  DRLParser.typeList_return retval=new DRLParser.typeList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA322=null;
  DRLParser.type_return type321=null;
  DRLParser.type_return type323=null;
  Object COMMA322_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_type_in_typeList5697);
      type321=type();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,type321.getTree());
      loop104:       do {
        int alt104=2;
        int LA104_0=input.LA(1);
        if ((LA104_0 == COMMA)) {
          alt104=1;
        }
switch (alt104) {
case 1:
{
            COMMA322=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5700);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA322_tree=(Object)adaptor.create(COMMA322);
              adaptor.addChild(root_0,COMMA322_tree);
            }
            pushFollow(FOLLOW_type_in_typeList5702);
            type323=type();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,type323.getTree());
          }
        break;
default :
      break loop104;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
