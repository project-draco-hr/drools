{
  BaseDescr d=null;
  BaseDescr u=null;
  FromDescr fm=null;
  AccumulateDescr ac=null;
  CollectDescr cs=null;
  d=null;
  try {
{
      int alt45=6;
switch (input.LA(1)) {
case 73:
        alt45=1;
      break;
case 74:
    alt45=2;
  break;
case 75:
alt45=3;
break;
case ID:
alt45=4;
break;
case 76:
alt45=5;
break;
case LEFT_PAREN:
alt45=6;
break;
default :
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1235:4: ( ( lhs_exist )=>u= lhs_exist | ( lhs_not )=>u= lhs_not | ( lhs_eval )=>u= lhs_eval | ( lhs_column ( ( ( from_statement ) )=> ( from_statement ) | ( ( accumulate_statement ) )=> ( accumulate_statement ) | ( ( collect_statement ) )=> ( collect_statement ) )? )=>u= lhs_column ( ( ( from_statement ) )=> (fm= from_statement ) | ( ( accumulate_statement ) )=> (ac= accumulate_statement ) | ( ( collect_statement ) )=> (cs= collect_statement ) )? | ( lhs_forall )=>u= lhs_forall | '(' u= lhs ')' )",45,0,input);
throw nvae;
}
switch (alt45) {
case 1:
{
pushFollow(FOLLOW_lhs_exist_in_lhs_unary3184);
u=lhs_exist();
_fsp--;
if (failed) return d;
}
break;
case 2:
{
pushFollow(FOLLOW_lhs_not_in_lhs_unary3192);
u=lhs_not();
_fsp--;
if (failed) return d;
}
break;
case 3:
{
pushFollow(FOLLOW_lhs_eval_in_lhs_unary3200);
u=lhs_eval();
_fsp--;
if (failed) return d;
}
break;
case 4:
{
pushFollow(FOLLOW_lhs_column_in_lhs_unary3208);
u=lhs_column();
_fsp--;
if (failed) return d;
int alt44=4;
int LA44_0=input.LA(1);
if ((LA44_0 == 50)) {
switch (input.LA(2)) {
case 51:
alt44=2;
break;
case 55:
alt44=3;
break;
case ID:
alt44=1;
break;
}
}
switch (alt44) {
case 1:
{
{
pushFollow(FOLLOW_from_statement_in_lhs_unary3228);
fm=from_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
fm.setColumn((ColumnDescr)u);
u=fm;
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_accumulate_statement_in_lhs_unary3250);
ac=accumulate_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
ac.setResultColumn((ColumnDescr)u);
u=ac;
}
}
}
break;
case 3:
{
{
pushFollow(FOLLOW_collect_statement_in_lhs_unary3271);
cs=collect_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
cs.setResultColumn((ColumnDescr)u);
u=cs;
}
}
}
break;
}
}
break;
case 5:
{
pushFollow(FOLLOW_lhs_forall_in_lhs_unary3296);
u=lhs_forall();
_fsp--;
if (failed) return d;
}
break;
case 6:
{
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary3304);
if (failed) return d;
pushFollow(FOLLOW_lhs_in_lhs_unary3308);
u=lhs();
_fsp--;
if (failed) return d;
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary3310);
if (failed) return d;
}
break;
}
if (backtracking == 0) {
d=u;
}
pushFollow(FOLLOW_opt_semicolon_in_lhs_unary3320);
opt_semicolon();
_fsp--;
if (failed) return d;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
