{
  BaseDescr d=null;
  BaseDescr u=null;
  AccumulateDescr ac=null;
  CollectDescr cs=null;
  FromDescr fm=null;
  d=null;
  try {
{
      int alt63=6;
switch (input.LA(1)) {
case EXISTS:
{
          alt63=1;
        }
      break;
case NOT:
{
      alt63=2;
    }
  break;
case EVAL:
{
  alt63=3;
}
break;
case ID:
{
alt63=4;
}
break;
case FORALL:
{
alt63=5;
}
break;
case LEFT_PAREN:
{
alt63=6;
}
break;
default :
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1500:4: (u= lhs_exist | u= lhs_not | u= lhs_eval | u= lhs_pattern ( FROM ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (~ ( ACCUMULATE | COLLECT ) )=> (fm= from_statement ) ) )? | u= lhs_forall | '(' u= lhs_or ')' )",63,0,input);
throw nvae;
}
switch (alt63) {
case 1:
{
pushFollow(FOLLOW_lhs_exist_in_lhs_unary4101);
u=lhs_exist();
_fsp--;
if (failed) return d;
}
break;
case 2:
{
pushFollow(FOLLOW_lhs_not_in_lhs_unary4109);
u=lhs_not();
_fsp--;
if (failed) return d;
}
break;
case 3:
{
pushFollow(FOLLOW_lhs_eval_in_lhs_unary4117);
u=lhs_eval();
_fsp--;
if (failed) return d;
}
break;
case 4:
{
pushFollow(FOLLOW_lhs_pattern_in_lhs_unary4125);
u=lhs_pattern();
_fsp--;
if (failed) return d;
int alt62=2;
int LA62_0=input.LA(1);
if ((LA62_0 == FROM)) {
alt62=1;
}
switch (alt62) {
case 1:
{
match(input,FROM,FOLLOW_FROM_in_lhs_unary4141);
if (failed) return d;
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_FROM);
location.setProperty(Location.LOCATION_FROM_CONTENT,"");
}
int alt61=3;
int LA61_0=input.LA(1);
if ((LA61_0 == ACCUMULATE)) {
int LA61_1=input.LA(2);
if ((synpred108())) {
alt61=1;
}
 else if ((synpred111())) {
alt61=3;
}
 else {
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1509:13: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (~ ( ACCUMULATE | COLLECT ) )=> (fm= from_statement ) )",61,1,input);
throw nvae;
}
}
 else if ((LA61_0 == COLLECT)) {
int LA61_2=input.LA(2);
if ((synpred109())) {
alt61=2;
}
 else if ((synpred111())) {
alt61=3;
}
 else {
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1509:13: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (~ ( ACCUMULATE | COLLECT ) )=> (fm= from_statement ) )",61,2,input);
throw nvae;
}
}
 else if ((LA61_0 == ID) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == PACKAGE) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == FUNCTION) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == GLOBAL) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == IMPORT) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == RULE) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == QUERY) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == TEMPLATE) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == ATTRIBUTES) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == ENABLED) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == SALIENCE) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == DURATION) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == FROM) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == INIT) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == ACTION) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == RESULT) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == OR) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == AND) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == CONTAINS) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == EXCLUDES) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == MEMBEROF) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == MATCHES) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == NULL) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == EXISTS) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == NOT) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == EVAL) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == FORALL) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == WHEN) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == THEN) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == END) && (synpred111())) {
alt61=3;
}
 else if ((LA61_0 == IN) && (synpred111())) {
alt61=3;
}
 else {
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1509:13: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (~ ( ACCUMULATE | COLLECT ) )=> (fm= from_statement ) )",61,0,input);
throw nvae;
}
switch (alt61) {
case 1:
{
{
pushFollow(FOLLOW_accumulate_statement_in_lhs_unary4196);
ac=accumulate_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
ac.setResultPattern((PatternDescr)u);
u=ac;
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_collect_statement_in_lhs_unary4225);
cs=collect_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
cs.setResultPattern((PatternDescr)u);
u=cs;
}
}
}
break;
case 3:
{
{
pushFollow(FOLLOW_from_statement_in_lhs_unary4260);
fm=from_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
fm.setPattern((PatternDescr)u);
u=fm;
}
}
}
break;
}
}
break;
}
}
break;
case 5:
{
pushFollow(FOLLOW_lhs_forall_in_lhs_unary4299);
u=lhs_forall();
_fsp--;
if (failed) return d;
}
break;
case 6:
{
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary4307);
if (failed) return d;
pushFollow(FOLLOW_lhs_or_in_lhs_unary4311);
u=lhs_or();
_fsp--;
if (failed) return d;
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary4313);
if (failed) return d;
}
break;
}
if (backtracking == 0) {
d=u;
}
pushFollow(FOLLOW_opt_semicolon_in_lhs_unary4323);
opt_semicolon();
_fsp--;
if (failed) return d;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
