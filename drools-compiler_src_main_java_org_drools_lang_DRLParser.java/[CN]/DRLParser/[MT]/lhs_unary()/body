{
  DRLParser.lhs_unary_return retval=new DRLParser.lhs_unary_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN134=null;
  Token RIGHT_PAREN136=null;
  DRLParser.lhs_exist_return lhs_exist128=null;
  DRLParser.lhs_not_binding_return lhs_not_binding129=null;
  DRLParser.lhs_not_return lhs_not130=null;
  DRLParser.lhs_eval_return lhs_eval131=null;
  DRLParser.lhs_forall_return lhs_forall132=null;
  DRLParser.lhs_for_return lhs_for133=null;
  DRLParser.lhs_or_return lhs_or135=null;
  DRLParser.pattern_source_return pattern_source137=null;
  Object LEFT_PAREN134_tree=null;
  Object RIGHT_PAREN136_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt45=8;
      alt45=dfa45.predict(input);
switch (alt45) {
case 1:
{
          pushFollow(FOLLOW_lhs_exist_in_lhs_unary2440);
          lhs_exist128=lhs_exist();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,lhs_exist128.getTree());
        }
      break;
case 2:
{
      if (!((helper.validateNotWithBinding()))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"lhs_unary","helper.validateNotWithBinding()");
      }
      pushFollow(FOLLOW_lhs_not_binding_in_lhs_unary2448);
      lhs_not_binding129=lhs_not_binding();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,lhs_not_binding129.getTree());
    }
  break;
case 3:
{
  pushFollow(FOLLOW_lhs_not_in_lhs_unary2454);
  lhs_not130=lhs_not();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,lhs_not130.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_lhs_eval_in_lhs_unary2460);
lhs_eval131=lhs_eval();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,lhs_eval131.getTree());
}
break;
case 5:
{
pushFollow(FOLLOW_lhs_forall_in_lhs_unary2466);
lhs_forall132=lhs_forall();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,lhs_forall132.getTree());
}
break;
case 6:
{
pushFollow(FOLLOW_lhs_for_in_lhs_unary2473);
lhs_for133=lhs_for();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,lhs_for133.getTree());
}
break;
case 7:
{
LEFT_PAREN134=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary2479);
if (state.failed) return retval;
if (state.backtracking == 0) {
helper.emit(LEFT_PAREN134,DroolsEditorType.SYMBOL);
helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
}
pushFollow(FOLLOW_lhs_or_in_lhs_unary2490);
lhs_or135=lhs_or();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,lhs_or135.getTree());
RIGHT_PAREN136=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary2496);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_PAREN136_tree=(Object)adaptor.create(RIGHT_PAREN136);
adaptor.addChild(root_0,RIGHT_PAREN136_tree);
}
if (state.backtracking == 0) {
helper.emit(RIGHT_PAREN136,DroolsEditorType.SYMBOL);
}
}
break;
case 8:
{
pushFollow(FOLLOW_pattern_source_in_lhs_unary2504);
pattern_source137=pattern_source();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,pattern_source137.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
