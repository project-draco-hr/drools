{
  BaseDescr d=null;
  BaseDescr u=null;
  AccumulateDescr ac=null;
  CollectDescr cs=null;
  FromDescr fm=null;
  d=null;
  try {
{
      int alt55=6;
switch (input.LA(1)) {
case EXISTS:
{
          alt55=1;
        }
      break;
case NOT:
{
      alt55=2;
    }
  break;
case EVAL:
{
  alt55=3;
}
break;
case ID:
{
alt55=4;
}
break;
case FORALL:
{
alt55=5;
}
break;
case LEFT_PAREN:
{
alt55=6;
}
break;
default :
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1320:4: (u= lhs_exist | u= lhs_not | u= lhs_eval | u= lhs_pattern ( FROM ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (~ ( ACCUMULATE | COLLECT ) )=> (fm= from_statement ) ) )? | u= lhs_forall | '(' u= lhs_or ')' )",55,0,input);
throw nvae;
}
switch (alt55) {
case 1:
{
pushFollow(FOLLOW_lhs_exist_in_lhs_unary3718);
u=lhs_exist();
_fsp--;
if (failed) return d;
}
break;
case 2:
{
pushFollow(FOLLOW_lhs_not_in_lhs_unary3726);
u=lhs_not();
_fsp--;
if (failed) return d;
}
break;
case 3:
{
pushFollow(FOLLOW_lhs_eval_in_lhs_unary3734);
u=lhs_eval();
_fsp--;
if (failed) return d;
}
break;
case 4:
{
pushFollow(FOLLOW_lhs_pattern_in_lhs_unary3742);
u=lhs_pattern();
_fsp--;
if (failed) return d;
int alt54=2;
int LA54_0=input.LA(1);
if ((LA54_0 == FROM)) {
alt54=1;
}
switch (alt54) {
case 1:
{
match(input,FROM,FOLLOW_FROM_in_lhs_unary3758);
if (failed) return d;
int alt53=3;
int LA53_0=input.LA(1);
if ((LA53_0 == ACCUMULATE) && ((synpred100() || synpred97()))) {
int LA53_1=input.LA(2);
if ((synpred97())) {
alt53=1;
}
 else if ((synpred100())) {
alt53=3;
}
 else {
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1324:18: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (~ ( ACCUMULATE | COLLECT ) )=> (fm= from_statement ) )",53,1,input);
throw nvae;
}
}
 else if ((LA53_0 == COLLECT) && ((synpred98() || synpred100()))) {
int LA53_2=input.LA(2);
if ((synpred98())) {
alt53=2;
}
 else if ((synpred100())) {
alt53=3;
}
 else {
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1324:18: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (~ ( ACCUMULATE | COLLECT ) )=> (fm= from_statement ) )",53,2,input);
throw nvae;
}
}
 else if (((LA53_0 >= ATTRIBUTES && LA53_0 <= WHEN) || LA53_0 == ENABLED || LA53_0 == SALIENCE || LA53_0 == DURATION || (LA53_0 >= INIT && LA53_0 <= RESULT) || (LA53_0 >= ID && LA53_0 <= OR) || (LA53_0 >= CONTAINS && LA53_0 <= IN) || LA53_0 == NULL || (LA53_0 >= AND && LA53_0 <= THEN)) && (synpred100())) {
alt53=3;
}
 else {
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1324:18: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (~ ( ACCUMULATE | COLLECT ) )=> (fm= from_statement ) )",53,0,input);
throw nvae;
}
switch (alt53) {
case 1:
{
{
pushFollow(FOLLOW_accumulate_statement_in_lhs_unary3786);
ac=accumulate_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
ac.setResultPattern((PatternDescr)u);
u=ac;
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_collect_statement_in_lhs_unary3815);
cs=collect_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
cs.setResultPattern((PatternDescr)u);
u=cs;
}
}
}
break;
case 3:
{
{
pushFollow(FOLLOW_from_statement_in_lhs_unary3850);
fm=from_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
fm.setPattern((PatternDescr)u);
u=fm;
}
}
}
break;
}
}
break;
}
}
break;
case 5:
{
pushFollow(FOLLOW_lhs_forall_in_lhs_unary3889);
u=lhs_forall();
_fsp--;
if (failed) return d;
}
break;
case 6:
{
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary3897);
if (failed) return d;
pushFollow(FOLLOW_lhs_or_in_lhs_unary3901);
u=lhs_or();
_fsp--;
if (failed) return d;
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary3903);
if (failed) return d;
}
break;
}
if (backtracking == 0) {
d=u;
}
pushFollow(FOLLOW_opt_semicolon_in_lhs_unary3913);
opt_semicolon();
_fsp--;
if (failed) return d;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
