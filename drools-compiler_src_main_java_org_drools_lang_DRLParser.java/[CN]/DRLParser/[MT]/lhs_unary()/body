{
  lhs_unary_return retval=new lhs_unary_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN139=null;
  Token RIGHT_PAREN141=null;
  Token SEMICOLON143=null;
  lhs_exist_return lhs_exist134=null;
  lhs_not_binding_return lhs_not_binding135=null;
  lhs_not_return lhs_not136=null;
  lhs_eval_return lhs_eval137=null;
  lhs_forall_return lhs_forall138=null;
  lhs_or_return lhs_or140=null;
  pattern_source_return pattern_source142=null;
  Object LEFT_PAREN139_tree=null;
  Object RIGHT_PAREN141_tree=null;
  Object SEMICOLON143_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt51=7;
      int LA51_0=input.LA(1);
      if ((LA51_0 == ID)) {
        int LA51_1=input.LA(2);
        if (((validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) {
          alt51=1;
        }
 else         if (((validateNotWithBinding() && (validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
          alt51=2;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
          alt51=3;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.EVAL)))) {
          alt51=4;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.FORALL)))) {
          alt51=5;
        }
 else         if ((true)) {
          alt51=7;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("589:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )",51,1,input);
          throw nvae;
        }
      }
 else       if ((LA51_0 == LEFT_PAREN)) {
        alt51=6;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("589:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )",51,0,input);
        throw nvae;
      }
switch (alt51) {
case 1:
{
          pushFollow(FOLLOW_lhs_exist_in_lhs_unary2063);
          lhs_exist134=lhs_exist();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,lhs_exist134.getTree());
        }
      break;
case 2:
{
      if (!(validateNotWithBinding())) {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"lhs_unary","validateNotWithBinding()");
      }
      pushFollow(FOLLOW_lhs_not_binding_in_lhs_unary2071);
      lhs_not_binding135=lhs_not_binding();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,lhs_not_binding135.getTree());
    }
  break;
case 3:
{
  pushFollow(FOLLOW_lhs_not_in_lhs_unary2077);
  lhs_not136=lhs_not();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   adaptor.addChild(root_0,lhs_not136.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_lhs_eval_in_lhs_unary2083);
lhs_eval137=lhs_eval();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,lhs_eval137.getTree());
}
break;
case 5:
{
pushFollow(FOLLOW_lhs_forall_in_lhs_unary2089);
lhs_forall138=lhs_forall();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,lhs_forall138.getTree());
}
break;
case 6:
{
LEFT_PAREN139=(Token)input.LT(1);
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary2095);
if (failed) return retval;
pushFollow(FOLLOW_lhs_or_in_lhs_unary2098);
lhs_or140=lhs_or();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,lhs_or140.getTree());
RIGHT_PAREN141=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary2100);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_PAREN141_tree=(Object)adaptor.create(RIGHT_PAREN141);
adaptor.addChild(root_0,RIGHT_PAREN141_tree);
}
}
break;
case 7:
{
pushFollow(FOLLOW_pattern_source_in_lhs_unary2106);
pattern_source142=pattern_source();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,pattern_source142.getTree());
}
break;
}
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == SEMICOLON)) {
int LA52_1=input.LA(2);
if ((synpred5())) {
alt52=1;
}
}
switch (alt52) {
case 1:
{
SEMICOLON143=(Token)input.LT(1);
match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_unary2120);
if (failed) return retval;
}
break;
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
