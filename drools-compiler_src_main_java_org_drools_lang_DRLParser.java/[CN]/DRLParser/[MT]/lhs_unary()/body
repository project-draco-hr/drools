{
  BaseDescr d=null;
  BaseDescr u=null;
  AccumulateDescr ac=null;
  CollectDescr cs=null;
  FromDescr fm=null;
  d=null;
  try {
{
      int alt46=6;
switch (input.LA(1)) {
case EXISTS:
        alt46=1;
      break;
case NOT:
    alt46=2;
  break;
case EVAL:
alt46=3;
break;
case ID:
alt46=4;
break;
case FORALL:
alt46=5;
break;
case LEFT_PAREN:
alt46=6;
break;
default :
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1134:4: ( ( lhs_exist )=>u= lhs_exist | ( lhs_not )=>u= lhs_not | ( lhs_eval )=>u= lhs_eval | ( lhs_column ( ( FROM ( ( ACCUMULATE )=> ( accumulate_statement ) | ( COLLECT )=> ( collect_statement ) | ( from_statement ) ) )=> FROM ( ( ACCUMULATE )=> ( accumulate_statement ) | ( COLLECT )=> ( collect_statement ) | ( from_statement ) ) )? )=>u= lhs_column ( ( FROM ( ( ACCUMULATE )=> ( accumulate_statement ) | ( COLLECT )=> ( collect_statement ) | ( from_statement ) ) )=> FROM ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (fm= from_statement ) ) )? | ( lhs_forall )=>u= lhs_forall | '(' u= lhs ')' )",46,0,input);
throw nvae;
}
switch (alt46) {
case 1:
{
pushFollow(FOLLOW_lhs_exist_in_lhs_unary3202);
u=lhs_exist();
_fsp--;
if (failed) return d;
}
break;
case 2:
{
pushFollow(FOLLOW_lhs_not_in_lhs_unary3210);
u=lhs_not();
_fsp--;
if (failed) return d;
}
break;
case 3:
{
pushFollow(FOLLOW_lhs_eval_in_lhs_unary3218);
u=lhs_eval();
_fsp--;
if (failed) return d;
}
break;
case 4:
{
pushFollow(FOLLOW_lhs_column_in_lhs_unary3226);
u=lhs_column();
_fsp--;
if (failed) return d;
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == FROM)) {
alt45=1;
}
switch (alt45) {
case 1:
{
match(input,FROM,FOLLOW_FROM_in_lhs_unary3242);
if (failed) return d;
int alt44=3;
switch (input.LA(1)) {
case ACCUMULATE:
if ((synpred71())) {
alt44=1;
}
 else if ((true)) {
alt44=3;
}
 else {
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1138:18: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (fm= from_statement ) )",44,1,input);
throw nvae;
}
break;
case COLLECT:
if ((synpred72())) {
alt44=2;
}
 else if ((true)) {
alt44=3;
}
 else {
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1138:18: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (fm= from_statement ) )",44,2,input);
throw nvae;
}
break;
case PACKAGE:
case IMPORT:
case FUNCTION:
case GLOBAL:
case QUERY:
case END:
case TEMPLATE:
case RULE:
case WHEN:
case ATTRIBUTES:
case ENABLED:
case SALIENCE:
case DURATION:
case INIT:
case ACTION:
case RESULT:
case ID:
case OR:
case CONTAINS:
case MATCHES:
case EXCLUDES:
case NULL:
case AND:
case FROM:
case EXISTS:
case NOT:
case EVAL:
case FORALL:
case THEN:
alt44=3;
break;
default :
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("1138:18: ( ( ACCUMULATE )=> (ac= accumulate_statement ) | ( COLLECT )=> (cs= collect_statement ) | (fm= from_statement ) )",44,0,input);
throw nvae;
}
switch (alt44) {
case 1:
{
{
pushFollow(FOLLOW_accumulate_statement_in_lhs_unary3270);
ac=accumulate_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
ac.setResultColumn((ColumnDescr)u);
u=ac;
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_collect_statement_in_lhs_unary3299);
cs=collect_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
cs.setResultColumn((ColumnDescr)u);
u=cs;
}
}
}
break;
case 3:
{
{
pushFollow(FOLLOW_from_statement_in_lhs_unary3321);
fm=from_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
fm.setColumn((ColumnDescr)u);
u=fm;
}
}
}
break;
}
}
break;
}
}
break;
case 5:
{
pushFollow(FOLLOW_lhs_forall_in_lhs_unary3360);
u=lhs_forall();
_fsp--;
if (failed) return d;
}
break;
case 6:
{
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary3368);
if (failed) return d;
pushFollow(FOLLOW_lhs_in_lhs_unary3372);
u=lhs();
_fsp--;
if (failed) return d;
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary3374);
if (failed) return d;
}
break;
}
if (backtracking == 0) {
d=u;
}
pushFollow(FOLLOW_opt_semicolon_in_lhs_unary3384);
opt_semicolon();
_fsp--;
if (failed) return d;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
