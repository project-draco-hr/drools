{
  DRLParser.constructorDeclaratorRest_return retval=new DRLParser.constructorDeclaratorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.formalParameters_return formalParameters736=null;
  DRLParser.throws_key_return throws_key737=null;
  DRLParser.typeNameList_return typeNameList738=null;
  DRLParser.block_return block739=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest9191);
      formalParameters736=formalParameters();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,formalParameters736.getTree());
      int alt220=2;
      int LA220_0=input.LA(1);
      if ((LA220_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
        alt220=1;
      }
switch (alt220) {
case 1:
{
          pushFollow(FOLLOW_throws_key_in_constructorDeclaratorRest9194);
          throws_key737=throws_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,throws_key737.getTree());
          pushFollow(FOLLOW_typeNameList_in_constructorDeclaratorRest9196);
          typeNameList738=typeNameList();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,typeNameList738.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_block_in_constructorDeclaratorRest9200);
  block739=block();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,block739.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
