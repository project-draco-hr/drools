{
  package_statement_return retval=new package_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON6=null;
  package_key_return package_key4=null;
  package_id_return package_id5=null;
  Object SEMICOLON6_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
  RewriteRuleSubtreeStream stream_package_id=new RewriteRuleSubtreeStream(adaptor,"rule package_id");
  pushParaphrases(DroolsParaphraseTypes.PACKAGE);
  try {
{
      if (backtracking == 0) {
        beginSentence(DroolsSentenceType.PACKAGE);
      }
      pushFollow(FOLLOW_package_key_in_package_statement450);
      package_key4=package_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_package_key.add(package_key4.getTree());
      pushFollow(FOLLOW_package_id_in_package_statement454);
      package_id5=package_id();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_package_id.add(package_id5.getTree());
      int alt3=2;
      int LA3_0=input.LA(1);
      if ((LA3_0 == SEMICOLON)) {
        alt3=1;
      }
switch (alt3) {
case 1:
{
          SEMICOLON6=(Token)input.LT(1);
          match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_statement456);
          if (failed)           return retval;
          if (backtracking == 0)           stream_SEMICOLON.add(SEMICOLON6);
        }
      break;
  }
  if (backtracking == 0) {
    emit(SEMICOLON6,DroolsEditorType.SYMBOL);
  }
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_package_key.nextNode(),root_1);
        adaptor.addChild(root_1,stream_package_id.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
  paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
