{
  global_return retval=new global_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON24=null;
  global_key_return global_key21=null;
  data_type_return data_type22=null;
  global_id_return global_id23=null;
  Object SEMICOLON24_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
  RewriteRuleSubtreeStream stream_global_id=new RewriteRuleSubtreeStream(adaptor,"rule global_id");
  RewriteRuleSubtreeStream stream_global_key=new RewriteRuleSubtreeStream(adaptor,"rule global_key");
  pushParaphrases(DroolsParaphareseTypes.GLOBAL);
  try {
{
      pushFollow(FOLLOW_global_key_in_global722);
      global_key21=global_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_global_key.add(global_key21.getTree());
      pushFollow(FOLLOW_data_type_in_global724);
      data_type22=data_type();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_data_type.add(data_type22.getTree());
      pushFollow(FOLLOW_global_id_in_global726);
      global_id23=global_id();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_global_id.add(global_id23.getTree());
      int alt10=2;
      int LA10_0=input.LA(1);
      if ((LA10_0 == SEMICOLON)) {
        alt10=1;
      }
switch (alt10) {
case 1:
{
          SEMICOLON24=(Token)input.LT(1);
          match(input,SEMICOLON,FOLLOW_SEMICOLON_in_global728);
          if (failed)           return retval;
          if (backtracking == 0)           stream_SEMICOLON.add(SEMICOLON24);
        }
      break;
  }
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_global_key.nextNode(),root_1);
        adaptor.addChild(root_1,stream_data_type.next());
        adaptor.addChild(root_1,stream_global_id.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
  paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
