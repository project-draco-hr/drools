{
  DRLParser.global_return retval=new DRLParser.global_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON26=null;
  DRLParser.global_key_return global_key23=null;
  DRLParser.data_type_return data_type24=null;
  DRLParser.global_id_return global_id25=null;
  Object SEMICOLON26_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_global_key=new RewriteRuleSubtreeStream(adaptor,"rule global_key");
  RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
  RewriteRuleSubtreeStream stream_global_id=new RewriteRuleSubtreeStream(adaptor,"rule global_id");
  helper.pushParaphrases(DroolsParaphraseTypes.GLOBAL);
  if (state.backtracking == 0)   helper.beginSentence(DroolsSentenceType.GLOBAL);
  try {
{
      pushFollow(FOLLOW_global_key_in_global1021);
      global_key23=global_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_global_key.add(global_key23.getTree());
      pushFollow(FOLLOW_data_type_in_global1023);
      data_type24=data_type();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_data_type.add(data_type24.getTree());
      pushFollow(FOLLOW_global_id_in_global1025);
      global_id25=global_id();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_global_id.add(global_id25.getTree());
      int alt9=2;
      int LA9_0=input.LA(1);
      if ((LA9_0 == SEMICOLON)) {
        alt9=1;
      }
switch (alt9) {
case 1:
{
          SEMICOLON26=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_global1027);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_SEMICOLON.add(SEMICOLON26);
        }
      break;
  }
  if (state.backtracking == 0) {
    helper.emit(SEMICOLON26,DroolsEditorType.SYMBOL);
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_global_key.nextNode(),root_1);
        adaptor.addChild(root_1,stream_data_type.nextTree());
        adaptor.addChild(root_1,stream_global_id.nextTree());
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
  helper.popParaphrases();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
