{
  expression_value_return retval=new expression_value_return();
  retval.start=input.LT(1);
  Object root_0=null;
  accessor_path_return accessor_path277=null;
  literal_constraint_return literal_constraint278=null;
  paren_chunk_return paren_chunk279=null;
  try {
    int alt87=3;
switch (input.LA(1)) {
case ID:
{
        alt87=1;
      }
    break;
case STRING:
case BOOL:
case INT:
case FLOAT:
case NULL:
{
    alt87=2;
  }
break;
case LEFT_PAREN:
{
alt87=3;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("758:1: expression_value : ( accessor_path | literal_constraint | paren_chunk );",87,0,input);
throw nvae;
}
switch (alt87) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_accessor_path_in_expression_value3562);
accessor_path277=accessor_path();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,accessor_path277.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_literal_constraint_in_expression_value3567);
literal_constraint278=literal_constraint();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,literal_constraint278.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_paren_chunk_in_expression_value3573);
paren_chunk279=paren_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,paren_chunk279.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
