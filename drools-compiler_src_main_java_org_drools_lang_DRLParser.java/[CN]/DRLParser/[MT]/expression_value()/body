{
  expression_value_return retval=new expression_value_return();
  retval.start=input.LT(1);
  Object root_0=null;
  accessor_path_return accessor_path252=null;
  literal_constraint_return literal_constraint253=null;
  paren_chunk_return paren_chunk254=null;
  try {
    int alt81=3;
switch (input.LA(1)) {
case ID:
{
        alt81=1;
      }
    break;
case STRING:
case BOOL:
case INT:
case FLOAT:
case NULL:
{
    alt81=2;
  }
break;
case LEFT_PAREN:
{
alt81=3;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("713:1: expression_value : ( accessor_path | literal_constraint | paren_chunk );",81,0,input);
throw nvae;
}
switch (alt81) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_accessor_path_in_expression_value3310);
accessor_path252=accessor_path();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,accessor_path252.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_literal_constraint_in_expression_value3315);
literal_constraint253=literal_constraint();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,literal_constraint253.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_paren_chunk_in_expression_value3321);
paren_chunk254=paren_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,paren_chunk254.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
