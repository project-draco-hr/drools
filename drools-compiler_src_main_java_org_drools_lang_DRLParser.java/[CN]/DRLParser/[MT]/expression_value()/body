{
  DRLParser.expression_value_return retval=new DRLParser.expression_value_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.accessor_path_return accessor_path280=null;
  DRLParser.signed_literal_return signed_literal281=null;
  DRLParser.paren_chunk_return paren_chunk282=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt87=3;
switch (input.LA(1)) {
case ID:
{
          alt87=1;
        }
      break;
case STRING:
case BOOL:
case DECIMAL:
case NULL:
case PLUS:
case MINUS:
case HEX:
case FLOAT:
{
      alt87=2;
    }
  break;
case LEFT_PAREN:
{
  alt87=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",87,0,input);
throw nvae;
}
switch (alt87) {
case 1:
{
pushFollow(FOLLOW_accessor_path_in_expression_value4646);
accessor_path280=accessor_path();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,accessor_path280.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_signed_literal_in_expression_value4651);
signed_literal281=signed_literal();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,signed_literal281.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_paren_chunk_in_expression_value4657);
paren_chunk282=paren_chunk();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,paren_chunk282.getTree());
}
break;
}
if (state.backtracking == 0) {
if (helper.isEditorInterfaceEnabled && !(input.LA(1) == EOF && input.get(input.index() - 1).getType() != WS)) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF) {
if (input.LA(1) == DOUBLE_PIPE) {
helper.emit(input.LT(1),DroolsEditorType.SYMBOL);
input.consume();
helper.emit(true,Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
}
}
}
return retval;
}
