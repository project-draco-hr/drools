{
  DRLParser.genericMethodOrConstructorRest_return retval=new DRLParser.genericMethodOrConstructorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID717=null;
  Token ID719=null;
  DRLParser.type_return type715=null;
  DRLParser.void_key_return void_key716=null;
  DRLParser.methodDeclaratorRest_return methodDeclaratorRest718=null;
  DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest720=null;
  Object ID717_tree=null;
  Object ID719_tree=null;
  try {
    int alt214=2;
    int LA214_0=input.LA(1);
    if ((LA214_0 == ID)) {
      int LA214_1=input.LA(2);
      if (((LA214_1 >= ID && LA214_1 <= DOT) || LA214_1 == LESS || LA214_1 == LEFT_SQUARE)) {
        alt214=1;
      }
 else       if ((LA214_1 == LEFT_PAREN)) {
        alt214=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",214,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",214,0,input);
      throw nvae;
    }
switch (alt214) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int alt213=2;
        int LA213_0=input.LA(1);
        if ((LA213_0 == ID)) {
          int LA213_1=input.LA(2);
          if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.VOID))))))) {
            alt213=1;
          }
 else           if ((((helper.validateIdentifierKey(DroolsSoftKeywords.VOID))))) {
            alt213=2;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",213,1,input);
            throw nvae;
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",213,0,input);
          throw nvae;
        }
switch (alt213) {
case 1:
{
            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest9015);
            type715=type();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,type715.getTree());
          }
        break;
case 2:
{
        pushFollow(FOLLOW_void_key_in_genericMethodOrConstructorRest9019);
        void_key716=void_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,void_key716.getTree());
      }
    break;
}
ID717=(Token)match(input,ID,FOLLOW_ID_in_genericMethodOrConstructorRest9022);
if (state.failed) return retval;
if (state.backtracking == 0) {
  ID717_tree=(Object)adaptor.create(ID717);
  adaptor.addChild(root_0,ID717_tree);
}
pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest9024);
methodDeclaratorRest718=methodDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,methodDeclaratorRest718.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
ID719=(Token)match(input,ID,FOLLOW_ID_in_genericMethodOrConstructorRest9029);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID719_tree=(Object)adaptor.create(ID719);
adaptor.addChild(root_0,ID719_tree);
}
pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest9031);
constructorDeclaratorRest720=constructorDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,constructorDeclaratorRest720.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
