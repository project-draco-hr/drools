{
  DRLParser.genericMethodOrConstructorRest_return retval=new DRLParser.genericMethodOrConstructorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID732=null;
  Token ID734=null;
  DRLParser.type_return type730=null;
  DRLParser.void_key_return void_key731=null;
  DRLParser.methodDeclaratorRest_return methodDeclaratorRest733=null;
  DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest735=null;
  Object ID732_tree=null;
  Object ID734_tree=null;
  try {
    int alt216=2;
    int LA216_0=input.LA(1);
    if ((LA216_0 == ID)) {
      int LA216_1=input.LA(2);
      if (((LA216_1 >= ID && LA216_1 <= DOT) || LA216_1 == LESS || LA216_1 == LEFT_SQUARE)) {
        alt216=1;
      }
 else       if ((LA216_1 == LEFT_PAREN)) {
        alt216=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",216,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",216,0,input);
      throw nvae;
    }
switch (alt216) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int alt215=2;
        int LA215_0=input.LA(1);
        if ((LA215_0 == ID)) {
          int LA215_1=input.LA(2);
          if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.VOID))))))) {
            alt215=1;
          }
 else           if ((((helper.validateIdentifierKey(DroolsSoftKeywords.VOID))))) {
            alt215=2;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("",215,1,input);
            throw nvae;
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",215,0,input);
          throw nvae;
        }
switch (alt215) {
case 1:
{
            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest9118);
            type730=type();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,type730.getTree());
          }
        break;
case 2:
{
        pushFollow(FOLLOW_void_key_in_genericMethodOrConstructorRest9122);
        void_key731=void_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,void_key731.getTree());
      }
    break;
}
ID732=(Token)match(input,ID,FOLLOW_ID_in_genericMethodOrConstructorRest9125);
if (state.failed) return retval;
if (state.backtracking == 0) {
  ID732_tree=(Object)adaptor.create(ID732);
  adaptor.addChild(root_0,ID732_tree);
}
pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest9127);
methodDeclaratorRest733=methodDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,methodDeclaratorRest733.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
ID734=(Token)match(input,ID,FOLLOW_ID_in_genericMethodOrConstructorRest9132);
if (state.failed) return retval;
if (state.backtracking == 0) {
ID734_tree=(Object)adaptor.create(ID734);
adaptor.addChild(root_0,ID734_tree);
}
pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest9134);
constructorDeclaratorRest735=constructorDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,constructorDeclaratorRest735.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
