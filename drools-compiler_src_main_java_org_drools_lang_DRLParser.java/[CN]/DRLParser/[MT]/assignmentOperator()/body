{
  DRLParser.assignmentOperator_return retval=new DRLParser.assignmentOperator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS_ASSIGN548=null;
  Token PLUS_ASSIGN549=null;
  Token MINUS_ASSIGN550=null;
  Token MULT_ASSIGN551=null;
  Token DIV_ASSIGN552=null;
  Token AND_ASSIGN553=null;
  Token OR_ASSIGN554=null;
  Token XOR_ASSIGN555=null;
  Token MOD_ASSIGN556=null;
  Token SHIFT_LEFT557=null;
  Token EQUALS_ASSIGN558=null;
  Token SHIFT_RIGHT559=null;
  Token EQUALS_ASSIGN560=null;
  Token SHIFT_RIGHT_UNSIG561=null;
  Token EQUALS_ASSIGN562=null;
  Object EQUALS_ASSIGN548_tree=null;
  Object PLUS_ASSIGN549_tree=null;
  Object MINUS_ASSIGN550_tree=null;
  Object MULT_ASSIGN551_tree=null;
  Object DIV_ASSIGN552_tree=null;
  Object AND_ASSIGN553_tree=null;
  Object OR_ASSIGN554_tree=null;
  Object XOR_ASSIGN555_tree=null;
  Object MOD_ASSIGN556_tree=null;
  Object SHIFT_LEFT557_tree=null;
  Object EQUALS_ASSIGN558_tree=null;
  Object SHIFT_RIGHT559_tree=null;
  Object EQUALS_ASSIGN560_tree=null;
  Object SHIFT_RIGHT_UNSIG561_tree=null;
  Object EQUALS_ASSIGN562_tree=null;
  try {
    int alt175=12;
    alt175=dfa175.predict(input);
switch (alt175) {
case 1:
{
        root_0=(Object)adaptor.nil();
        EQUALS_ASSIGN548=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7809);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          EQUALS_ASSIGN548_tree=(Object)adaptor.create(EQUALS_ASSIGN548);
          adaptor.addChild(root_0,EQUALS_ASSIGN548_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    PLUS_ASSIGN549=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator7823);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      PLUS_ASSIGN549_tree=(Object)adaptor.create(PLUS_ASSIGN549);
      adaptor.addChild(root_0,PLUS_ASSIGN549_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
MINUS_ASSIGN550=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator7837);
if (state.failed) return retval;
if (state.backtracking == 0) {
  MINUS_ASSIGN550_tree=(Object)adaptor.create(MINUS_ASSIGN550);
  adaptor.addChild(root_0,MINUS_ASSIGN550_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
MULT_ASSIGN551=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator7851);
if (state.failed) return retval;
if (state.backtracking == 0) {
MULT_ASSIGN551_tree=(Object)adaptor.create(MULT_ASSIGN551);
adaptor.addChild(root_0,MULT_ASSIGN551_tree);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
DIV_ASSIGN552=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator7865);
if (state.failed) return retval;
if (state.backtracking == 0) {
DIV_ASSIGN552_tree=(Object)adaptor.create(DIV_ASSIGN552);
adaptor.addChild(root_0,DIV_ASSIGN552_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
AND_ASSIGN553=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator7879);
if (state.failed) return retval;
if (state.backtracking == 0) {
AND_ASSIGN553_tree=(Object)adaptor.create(AND_ASSIGN553);
adaptor.addChild(root_0,AND_ASSIGN553_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
OR_ASSIGN554=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator7893);
if (state.failed) return retval;
if (state.backtracking == 0) {
OR_ASSIGN554_tree=(Object)adaptor.create(OR_ASSIGN554);
adaptor.addChild(root_0,OR_ASSIGN554_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
XOR_ASSIGN555=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator7907);
if (state.failed) return retval;
if (state.backtracking == 0) {
XOR_ASSIGN555_tree=(Object)adaptor.create(XOR_ASSIGN555);
adaptor.addChild(root_0,XOR_ASSIGN555_tree);
}
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
MOD_ASSIGN556=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator7921);
if (state.failed) return retval;
if (state.backtracking == 0) {
MOD_ASSIGN556_tree=(Object)adaptor.create(MOD_ASSIGN556);
adaptor.addChild(root_0,MOD_ASSIGN556_tree);
}
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
SHIFT_LEFT557=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator7935);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_LEFT557_tree=(Object)adaptor.create(SHIFT_LEFT557);
adaptor.addChild(root_0,SHIFT_LEFT557_tree);
}
EQUALS_ASSIGN558=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7937);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN558_tree=(Object)adaptor.create(EQUALS_ASSIGN558);
adaptor.addChild(root_0,EQUALS_ASSIGN558_tree);
}
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT559=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator7951);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT559_tree=(Object)adaptor.create(SHIFT_RIGHT559);
adaptor.addChild(root_0,SHIFT_RIGHT559_tree);
}
EQUALS_ASSIGN560=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7953);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN560_tree=(Object)adaptor.create(EQUALS_ASSIGN560);
adaptor.addChild(root_0,EQUALS_ASSIGN560_tree);
}
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT_UNSIG561=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7967);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT_UNSIG561_tree=(Object)adaptor.create(SHIFT_RIGHT_UNSIG561);
adaptor.addChild(root_0,SHIFT_RIGHT_UNSIG561_tree);
}
EQUALS_ASSIGN562=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7969);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN562_tree=(Object)adaptor.create(EQUALS_ASSIGN562);
adaptor.addChild(root_0,EQUALS_ASSIGN562_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
