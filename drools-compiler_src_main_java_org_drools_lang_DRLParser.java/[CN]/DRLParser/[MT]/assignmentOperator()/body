{
  DRLParser.assignmentOperator_return retval=new DRLParser.assignmentOperator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS_ASSIGN657=null;
  Token PLUS_ASSIGN658=null;
  Token MINUS_ASSIGN659=null;
  Token MULT_ASSIGN660=null;
  Token DIV_ASSIGN661=null;
  Token AND_ASSIGN662=null;
  Token OR_ASSIGN663=null;
  Token XOR_ASSIGN664=null;
  Token MOD_ASSIGN665=null;
  Token SHIFT_LEFT666=null;
  Token EQUALS_ASSIGN667=null;
  Token SHIFT_RIGHT668=null;
  Token EQUALS_ASSIGN669=null;
  Token SHIFT_RIGHT_UNSIG670=null;
  Token EQUALS_ASSIGN671=null;
  Object EQUALS_ASSIGN657_tree=null;
  Object PLUS_ASSIGN658_tree=null;
  Object MINUS_ASSIGN659_tree=null;
  Object MULT_ASSIGN660_tree=null;
  Object DIV_ASSIGN661_tree=null;
  Object AND_ASSIGN662_tree=null;
  Object OR_ASSIGN663_tree=null;
  Object XOR_ASSIGN664_tree=null;
  Object MOD_ASSIGN665_tree=null;
  Object SHIFT_LEFT666_tree=null;
  Object EQUALS_ASSIGN667_tree=null;
  Object SHIFT_RIGHT668_tree=null;
  Object EQUALS_ASSIGN669_tree=null;
  Object SHIFT_RIGHT_UNSIG670_tree=null;
  Object EQUALS_ASSIGN671_tree=null;
  try {
    int alt203=12;
    alt203=dfa203.predict(input);
switch (alt203) {
case 1:
{
        root_0=(Object)adaptor.nil();
        EQUALS_ASSIGN657=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8464);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          EQUALS_ASSIGN657_tree=(Object)adaptor.create(EQUALS_ASSIGN657);
          adaptor.addChild(root_0,EQUALS_ASSIGN657_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    PLUS_ASSIGN658=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator8478);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      PLUS_ASSIGN658_tree=(Object)adaptor.create(PLUS_ASSIGN658);
      adaptor.addChild(root_0,PLUS_ASSIGN658_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
MINUS_ASSIGN659=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator8492);
if (state.failed) return retval;
if (state.backtracking == 0) {
  MINUS_ASSIGN659_tree=(Object)adaptor.create(MINUS_ASSIGN659);
  adaptor.addChild(root_0,MINUS_ASSIGN659_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
MULT_ASSIGN660=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator8506);
if (state.failed) return retval;
if (state.backtracking == 0) {
MULT_ASSIGN660_tree=(Object)adaptor.create(MULT_ASSIGN660);
adaptor.addChild(root_0,MULT_ASSIGN660_tree);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
DIV_ASSIGN661=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator8520);
if (state.failed) return retval;
if (state.backtracking == 0) {
DIV_ASSIGN661_tree=(Object)adaptor.create(DIV_ASSIGN661);
adaptor.addChild(root_0,DIV_ASSIGN661_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
AND_ASSIGN662=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator8534);
if (state.failed) return retval;
if (state.backtracking == 0) {
AND_ASSIGN662_tree=(Object)adaptor.create(AND_ASSIGN662);
adaptor.addChild(root_0,AND_ASSIGN662_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
OR_ASSIGN663=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator8548);
if (state.failed) return retval;
if (state.backtracking == 0) {
OR_ASSIGN663_tree=(Object)adaptor.create(OR_ASSIGN663);
adaptor.addChild(root_0,OR_ASSIGN663_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
XOR_ASSIGN664=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator8562);
if (state.failed) return retval;
if (state.backtracking == 0) {
XOR_ASSIGN664_tree=(Object)adaptor.create(XOR_ASSIGN664);
adaptor.addChild(root_0,XOR_ASSIGN664_tree);
}
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
MOD_ASSIGN665=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator8576);
if (state.failed) return retval;
if (state.backtracking == 0) {
MOD_ASSIGN665_tree=(Object)adaptor.create(MOD_ASSIGN665);
adaptor.addChild(root_0,MOD_ASSIGN665_tree);
}
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
SHIFT_LEFT666=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator8590);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_LEFT666_tree=(Object)adaptor.create(SHIFT_LEFT666);
adaptor.addChild(root_0,SHIFT_LEFT666_tree);
}
EQUALS_ASSIGN667=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8592);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN667_tree=(Object)adaptor.create(EQUALS_ASSIGN667);
adaptor.addChild(root_0,EQUALS_ASSIGN667_tree);
}
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT668=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator8606);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT668_tree=(Object)adaptor.create(SHIFT_RIGHT668);
adaptor.addChild(root_0,SHIFT_RIGHT668_tree);
}
EQUALS_ASSIGN669=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8608);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN669_tree=(Object)adaptor.create(EQUALS_ASSIGN669);
adaptor.addChild(root_0,EQUALS_ASSIGN669_tree);
}
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT_UNSIG670=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator8622);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT_UNSIG670_tree=(Object)adaptor.create(SHIFT_RIGHT_UNSIG670);
adaptor.addChild(root_0,SHIFT_RIGHT_UNSIG670_tree);
}
EQUALS_ASSIGN671=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8624);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN671_tree=(Object)adaptor.create(EQUALS_ASSIGN671);
adaptor.addChild(root_0,EQUALS_ASSIGN671_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
