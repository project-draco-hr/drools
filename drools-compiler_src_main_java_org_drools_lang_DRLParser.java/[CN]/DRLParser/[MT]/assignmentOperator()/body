{
  DRLParser.assignmentOperator_return retval=new DRLParser.assignmentOperator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS_ASSIGN513=null;
  Token PLUS_ASSIGN514=null;
  Token MINUS_ASSIGN515=null;
  Token MULT_ASSIGN516=null;
  Token DIV_ASSIGN517=null;
  Token AND_ASSIGN518=null;
  Token OR_ASSIGN519=null;
  Token XOR_ASSIGN520=null;
  Token MOD_ASSIGN521=null;
  Token SHIFT_LEFT522=null;
  Token EQUALS_ASSIGN523=null;
  Token SHIFT_RIGHT524=null;
  Token EQUALS_ASSIGN525=null;
  Token SHIFT_RIGHT_UNSIG526=null;
  Token EQUALS_ASSIGN527=null;
  Object EQUALS_ASSIGN513_tree=null;
  Object PLUS_ASSIGN514_tree=null;
  Object MINUS_ASSIGN515_tree=null;
  Object MULT_ASSIGN516_tree=null;
  Object DIV_ASSIGN517_tree=null;
  Object AND_ASSIGN518_tree=null;
  Object OR_ASSIGN519_tree=null;
  Object XOR_ASSIGN520_tree=null;
  Object MOD_ASSIGN521_tree=null;
  Object SHIFT_LEFT522_tree=null;
  Object EQUALS_ASSIGN523_tree=null;
  Object SHIFT_RIGHT524_tree=null;
  Object EQUALS_ASSIGN525_tree=null;
  Object SHIFT_RIGHT_UNSIG526_tree=null;
  Object EQUALS_ASSIGN527_tree=null;
  try {
    int alt166=12;
    alt166=dfa166.predict(input);
switch (alt166) {
case 1:
{
        root_0=(Object)adaptor.nil();
        EQUALS_ASSIGN513=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7201);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          EQUALS_ASSIGN513_tree=(Object)adaptor.create(EQUALS_ASSIGN513);
          adaptor.addChild(root_0,EQUALS_ASSIGN513_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    PLUS_ASSIGN514=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator7215);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      PLUS_ASSIGN514_tree=(Object)adaptor.create(PLUS_ASSIGN514);
      adaptor.addChild(root_0,PLUS_ASSIGN514_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
MINUS_ASSIGN515=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator7229);
if (state.failed) return retval;
if (state.backtracking == 0) {
  MINUS_ASSIGN515_tree=(Object)adaptor.create(MINUS_ASSIGN515);
  adaptor.addChild(root_0,MINUS_ASSIGN515_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
MULT_ASSIGN516=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator7243);
if (state.failed) return retval;
if (state.backtracking == 0) {
MULT_ASSIGN516_tree=(Object)adaptor.create(MULT_ASSIGN516);
adaptor.addChild(root_0,MULT_ASSIGN516_tree);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
DIV_ASSIGN517=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator7257);
if (state.failed) return retval;
if (state.backtracking == 0) {
DIV_ASSIGN517_tree=(Object)adaptor.create(DIV_ASSIGN517);
adaptor.addChild(root_0,DIV_ASSIGN517_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
AND_ASSIGN518=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator7271);
if (state.failed) return retval;
if (state.backtracking == 0) {
AND_ASSIGN518_tree=(Object)adaptor.create(AND_ASSIGN518);
adaptor.addChild(root_0,AND_ASSIGN518_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
OR_ASSIGN519=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator7285);
if (state.failed) return retval;
if (state.backtracking == 0) {
OR_ASSIGN519_tree=(Object)adaptor.create(OR_ASSIGN519);
adaptor.addChild(root_0,OR_ASSIGN519_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
XOR_ASSIGN520=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator7299);
if (state.failed) return retval;
if (state.backtracking == 0) {
XOR_ASSIGN520_tree=(Object)adaptor.create(XOR_ASSIGN520);
adaptor.addChild(root_0,XOR_ASSIGN520_tree);
}
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
MOD_ASSIGN521=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator7313);
if (state.failed) return retval;
if (state.backtracking == 0) {
MOD_ASSIGN521_tree=(Object)adaptor.create(MOD_ASSIGN521);
adaptor.addChild(root_0,MOD_ASSIGN521_tree);
}
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
SHIFT_LEFT522=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator7327);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_LEFT522_tree=(Object)adaptor.create(SHIFT_LEFT522);
adaptor.addChild(root_0,SHIFT_LEFT522_tree);
}
EQUALS_ASSIGN523=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7329);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN523_tree=(Object)adaptor.create(EQUALS_ASSIGN523);
adaptor.addChild(root_0,EQUALS_ASSIGN523_tree);
}
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT524=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator7343);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT524_tree=(Object)adaptor.create(SHIFT_RIGHT524);
adaptor.addChild(root_0,SHIFT_RIGHT524_tree);
}
EQUALS_ASSIGN525=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7345);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN525_tree=(Object)adaptor.create(EQUALS_ASSIGN525);
adaptor.addChild(root_0,EQUALS_ASSIGN525_tree);
}
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT_UNSIG526=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7359);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT_UNSIG526_tree=(Object)adaptor.create(SHIFT_RIGHT_UNSIG526);
adaptor.addChild(root_0,SHIFT_RIGHT_UNSIG526_tree);
}
EQUALS_ASSIGN527=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7361);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN527_tree=(Object)adaptor.create(EQUALS_ASSIGN527);
adaptor.addChild(root_0,EQUALS_ASSIGN527_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
