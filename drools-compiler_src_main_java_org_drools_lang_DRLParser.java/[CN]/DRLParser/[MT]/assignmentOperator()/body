{
  DRLParser.assignmentOperator_return retval=new DRLParser.assignmentOperator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS_ASSIGN543=null;
  Token PLUS_ASSIGN544=null;
  Token MINUS_ASSIGN545=null;
  Token MULT_ASSIGN546=null;
  Token DIV_ASSIGN547=null;
  Token AND_ASSIGN548=null;
  Token OR_ASSIGN549=null;
  Token XOR_ASSIGN550=null;
  Token MOD_ASSIGN551=null;
  Token SHIFT_LEFT552=null;
  Token EQUALS_ASSIGN553=null;
  Token SHIFT_RIGHT554=null;
  Token EQUALS_ASSIGN555=null;
  Token SHIFT_RIGHT_UNSIG556=null;
  Token EQUALS_ASSIGN557=null;
  Object EQUALS_ASSIGN543_tree=null;
  Object PLUS_ASSIGN544_tree=null;
  Object MINUS_ASSIGN545_tree=null;
  Object MULT_ASSIGN546_tree=null;
  Object DIV_ASSIGN547_tree=null;
  Object AND_ASSIGN548_tree=null;
  Object OR_ASSIGN549_tree=null;
  Object XOR_ASSIGN550_tree=null;
  Object MOD_ASSIGN551_tree=null;
  Object SHIFT_LEFT552_tree=null;
  Object EQUALS_ASSIGN553_tree=null;
  Object SHIFT_RIGHT554_tree=null;
  Object EQUALS_ASSIGN555_tree=null;
  Object SHIFT_RIGHT_UNSIG556_tree=null;
  Object EQUALS_ASSIGN557_tree=null;
  try {
    int alt173=12;
    alt173=dfa173.predict(input);
switch (alt173) {
case 1:
{
        root_0=(Object)adaptor.nil();
        EQUALS_ASSIGN543=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7755);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          EQUALS_ASSIGN543_tree=(Object)adaptor.create(EQUALS_ASSIGN543);
          adaptor.addChild(root_0,EQUALS_ASSIGN543_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    PLUS_ASSIGN544=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator7769);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      PLUS_ASSIGN544_tree=(Object)adaptor.create(PLUS_ASSIGN544);
      adaptor.addChild(root_0,PLUS_ASSIGN544_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
MINUS_ASSIGN545=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator7783);
if (state.failed) return retval;
if (state.backtracking == 0) {
  MINUS_ASSIGN545_tree=(Object)adaptor.create(MINUS_ASSIGN545);
  adaptor.addChild(root_0,MINUS_ASSIGN545_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
MULT_ASSIGN546=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator7797);
if (state.failed) return retval;
if (state.backtracking == 0) {
MULT_ASSIGN546_tree=(Object)adaptor.create(MULT_ASSIGN546);
adaptor.addChild(root_0,MULT_ASSIGN546_tree);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
DIV_ASSIGN547=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator7811);
if (state.failed) return retval;
if (state.backtracking == 0) {
DIV_ASSIGN547_tree=(Object)adaptor.create(DIV_ASSIGN547);
adaptor.addChild(root_0,DIV_ASSIGN547_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
AND_ASSIGN548=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator7825);
if (state.failed) return retval;
if (state.backtracking == 0) {
AND_ASSIGN548_tree=(Object)adaptor.create(AND_ASSIGN548);
adaptor.addChild(root_0,AND_ASSIGN548_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
OR_ASSIGN549=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator7839);
if (state.failed) return retval;
if (state.backtracking == 0) {
OR_ASSIGN549_tree=(Object)adaptor.create(OR_ASSIGN549);
adaptor.addChild(root_0,OR_ASSIGN549_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
XOR_ASSIGN550=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator7853);
if (state.failed) return retval;
if (state.backtracking == 0) {
XOR_ASSIGN550_tree=(Object)adaptor.create(XOR_ASSIGN550);
adaptor.addChild(root_0,XOR_ASSIGN550_tree);
}
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
MOD_ASSIGN551=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator7867);
if (state.failed) return retval;
if (state.backtracking == 0) {
MOD_ASSIGN551_tree=(Object)adaptor.create(MOD_ASSIGN551);
adaptor.addChild(root_0,MOD_ASSIGN551_tree);
}
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
SHIFT_LEFT552=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator7881);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_LEFT552_tree=(Object)adaptor.create(SHIFT_LEFT552);
adaptor.addChild(root_0,SHIFT_LEFT552_tree);
}
EQUALS_ASSIGN553=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7883);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN553_tree=(Object)adaptor.create(EQUALS_ASSIGN553);
adaptor.addChild(root_0,EQUALS_ASSIGN553_tree);
}
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT554=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator7897);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT554_tree=(Object)adaptor.create(SHIFT_RIGHT554);
adaptor.addChild(root_0,SHIFT_RIGHT554_tree);
}
EQUALS_ASSIGN555=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7899);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN555_tree=(Object)adaptor.create(EQUALS_ASSIGN555);
adaptor.addChild(root_0,EQUALS_ASSIGN555_tree);
}
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT_UNSIG556=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7913);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT_UNSIG556_tree=(Object)adaptor.create(SHIFT_RIGHT_UNSIG556);
adaptor.addChild(root_0,SHIFT_RIGHT_UNSIG556_tree);
}
EQUALS_ASSIGN557=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7915);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN557_tree=(Object)adaptor.create(EQUALS_ASSIGN557);
adaptor.addChild(root_0,EQUALS_ASSIGN557_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
