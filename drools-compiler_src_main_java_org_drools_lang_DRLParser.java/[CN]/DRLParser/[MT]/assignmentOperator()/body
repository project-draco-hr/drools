{
  DRLParser.assignmentOperator_return retval=new DRLParser.assignmentOperator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS_ASSIGN672=null;
  Token PLUS_ASSIGN673=null;
  Token MINUS_ASSIGN674=null;
  Token MULT_ASSIGN675=null;
  Token DIV_ASSIGN676=null;
  Token AND_ASSIGN677=null;
  Token OR_ASSIGN678=null;
  Token XOR_ASSIGN679=null;
  Token MOD_ASSIGN680=null;
  Token SHIFT_LEFT681=null;
  Token EQUALS_ASSIGN682=null;
  Token SHIFT_RIGHT683=null;
  Token EQUALS_ASSIGN684=null;
  Token SHIFT_RIGHT_UNSIG685=null;
  Token EQUALS_ASSIGN686=null;
  Object EQUALS_ASSIGN672_tree=null;
  Object PLUS_ASSIGN673_tree=null;
  Object MINUS_ASSIGN674_tree=null;
  Object MULT_ASSIGN675_tree=null;
  Object DIV_ASSIGN676_tree=null;
  Object AND_ASSIGN677_tree=null;
  Object OR_ASSIGN678_tree=null;
  Object XOR_ASSIGN679_tree=null;
  Object MOD_ASSIGN680_tree=null;
  Object SHIFT_LEFT681_tree=null;
  Object EQUALS_ASSIGN682_tree=null;
  Object SHIFT_RIGHT683_tree=null;
  Object EQUALS_ASSIGN684_tree=null;
  Object SHIFT_RIGHT_UNSIG685_tree=null;
  Object EQUALS_ASSIGN686_tree=null;
  try {
    int alt205=12;
    alt205=dfa205.predict(input);
switch (alt205) {
case 1:
{
        root_0=(Object)adaptor.nil();
        EQUALS_ASSIGN672=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8567);
        if (state.failed)         return retval;
        if (state.backtracking == 0) {
          EQUALS_ASSIGN672_tree=(Object)adaptor.create(EQUALS_ASSIGN672);
          adaptor.addChild(root_0,EQUALS_ASSIGN672_tree);
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    PLUS_ASSIGN673=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator8581);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      PLUS_ASSIGN673_tree=(Object)adaptor.create(PLUS_ASSIGN673);
      adaptor.addChild(root_0,PLUS_ASSIGN673_tree);
    }
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
MINUS_ASSIGN674=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator8595);
if (state.failed) return retval;
if (state.backtracking == 0) {
  MINUS_ASSIGN674_tree=(Object)adaptor.create(MINUS_ASSIGN674);
  adaptor.addChild(root_0,MINUS_ASSIGN674_tree);
}
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
MULT_ASSIGN675=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator8609);
if (state.failed) return retval;
if (state.backtracking == 0) {
MULT_ASSIGN675_tree=(Object)adaptor.create(MULT_ASSIGN675);
adaptor.addChild(root_0,MULT_ASSIGN675_tree);
}
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
DIV_ASSIGN676=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator8623);
if (state.failed) return retval;
if (state.backtracking == 0) {
DIV_ASSIGN676_tree=(Object)adaptor.create(DIV_ASSIGN676);
adaptor.addChild(root_0,DIV_ASSIGN676_tree);
}
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
AND_ASSIGN677=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator8637);
if (state.failed) return retval;
if (state.backtracking == 0) {
AND_ASSIGN677_tree=(Object)adaptor.create(AND_ASSIGN677);
adaptor.addChild(root_0,AND_ASSIGN677_tree);
}
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
OR_ASSIGN678=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator8651);
if (state.failed) return retval;
if (state.backtracking == 0) {
OR_ASSIGN678_tree=(Object)adaptor.create(OR_ASSIGN678);
adaptor.addChild(root_0,OR_ASSIGN678_tree);
}
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
XOR_ASSIGN679=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator8665);
if (state.failed) return retval;
if (state.backtracking == 0) {
XOR_ASSIGN679_tree=(Object)adaptor.create(XOR_ASSIGN679);
adaptor.addChild(root_0,XOR_ASSIGN679_tree);
}
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
MOD_ASSIGN680=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator8679);
if (state.failed) return retval;
if (state.backtracking == 0) {
MOD_ASSIGN680_tree=(Object)adaptor.create(MOD_ASSIGN680);
adaptor.addChild(root_0,MOD_ASSIGN680_tree);
}
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
SHIFT_LEFT681=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator8693);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_LEFT681_tree=(Object)adaptor.create(SHIFT_LEFT681);
adaptor.addChild(root_0,SHIFT_LEFT681_tree);
}
EQUALS_ASSIGN682=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8695);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN682_tree=(Object)adaptor.create(EQUALS_ASSIGN682);
adaptor.addChild(root_0,EQUALS_ASSIGN682_tree);
}
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT683=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator8709);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT683_tree=(Object)adaptor.create(SHIFT_RIGHT683);
adaptor.addChild(root_0,SHIFT_RIGHT683_tree);
}
EQUALS_ASSIGN684=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8711);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN684_tree=(Object)adaptor.create(EQUALS_ASSIGN684);
adaptor.addChild(root_0,EQUALS_ASSIGN684_tree);
}
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
SHIFT_RIGHT_UNSIG685=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator8725);
if (state.failed) return retval;
if (state.backtracking == 0) {
SHIFT_RIGHT_UNSIG685_tree=(Object)adaptor.create(SHIFT_RIGHT_UNSIG685);
adaptor.addChild(root_0,SHIFT_RIGHT_UNSIG685_tree);
}
EQUALS_ASSIGN686=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8727);
if (state.failed) return retval;
if (state.backtracking == 0) {
EQUALS_ASSIGN686_tree=(Object)adaptor.create(EQUALS_ASSIGN686);
adaptor.addChild(root_0,EQUALS_ASSIGN686_tree);
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
