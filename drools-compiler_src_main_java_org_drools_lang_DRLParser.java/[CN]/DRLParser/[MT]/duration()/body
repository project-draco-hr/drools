{
  DRLParser.duration_return retval=new DRLParser.duration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token INT114=null;
  DRLParser.duration_key_return duration_key113=null;
  DRLParser.paren_chunk_return paren_chunk115=null;
  Object INT114_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_duration_key_in_duration1944);
      duration_key113=duration_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       root_0=(Object)adaptor.becomeRoot(duration_key113.getTree(),root_0);
      if (state.backtracking == 0) {
        emit(Location.LOCATION_RULE_HEADER_KEYWORD);
      }
      int alt43=2;
      int LA43_0=input.LA(1);
      if ((LA43_0 == INT)) {
        alt43=1;
      }
 else       if ((LA43_0 == LEFT_PAREN)) {
        alt43=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",43,0,input);
        throw nvae;
      }
switch (alt43) {
case 1:
{
          INT114=(Token)match(input,INT,FOLLOW_INT_in_duration1957);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            INT114_tree=(Object)adaptor.create(INT114);
            adaptor.addChild(root_0,INT114_tree);
          }
          if (state.backtracking == 0) {
            emit(INT114,DroolsEditorType.NUMERIC_CONST);
          }
        }
      break;
case 2:
{
      pushFollow(FOLLOW_paren_chunk_in_duration1968);
      paren_chunk115=paren_chunk();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,paren_chunk115.getTree());
    }
  break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
