{
  DRLParser.exclusiveOrExpression_return retval=new DRLParser.exclusiveOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token XOR342=null;
  DRLParser.andExpression_return andExpression341=null;
  DRLParser.andExpression_return andExpression343=null;
  Object XOR342_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5732);
      andExpression341=andExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,andExpression341.getTree());
      loop119:       do {
        int alt119=2;
        int LA119_0=input.LA(1);
        if ((LA119_0 == XOR)) {
          alt119=1;
        }
switch (alt119) {
case 1:
{
            XOR342=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression5736);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              XOR342_tree=(Object)adaptor.create(XOR342);
              adaptor.addChild(root_0,XOR342_tree);
            }
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5738);
            andExpression343=andExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,andExpression343.getTree());
          }
        break;
default :
      break loop119;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
