{
  DRLParser.exclusiveOrExpression_return retval=new DRLParser.exclusiveOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token XOR377=null;
  DRLParser.andExpression_return andExpression376=null;
  DRLParser.andExpression_return andExpression378=null;
  Object XOR377_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression6312);
      andExpression376=andExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,andExpression376.getTree());
      loop128:       do {
        int alt128=2;
        int LA128_0=input.LA(1);
        if ((LA128_0 == XOR)) {
          alt128=1;
        }
switch (alt128) {
case 1:
{
            XOR377=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression6316);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              XOR377_tree=(Object)adaptor.create(XOR377);
              adaptor.addChild(root_0,XOR377_tree);
            }
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression6318);
            andExpression378=andExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,andExpression378.getTree());
          }
        break;
default :
      break loop128;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
