{
  date_effective_key_return retval=new date_effective_key_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID315=null;
  Token MISC316=null;
  Token ID317=null;
  Object ID315_tree=null;
  Object MISC316_tree=null;
  Object ID317_tree=null;
  RewriteRuleTokenStream stream_MISC=new RewriteRuleTokenStream(adaptor,"token MISC");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  String text="";
  try {
{
      if (!((validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE)))) {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"date_effective_key","(validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2, \"-\") && validateLT(3, DroolsSoftKeywords.EFFECTIVE))");
      }
      ID315=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_date_effective_key4059);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID315);
      MISC316=(Token)input.LT(1);
      match(input,MISC,FOLLOW_MISC_in_date_effective_key4061);
      if (failed)       return retval;
      if (backtracking == 0)       stream_MISC.add(MISC316);
      ID317=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_date_effective_key4063);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID317);
      if (backtracking == 0) {
        text=input.toString(retval.start,input.LT(-1));
      }
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,adaptor.create(VK_DATE_EFFECTIVE,((Token)retval.start),text));
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
