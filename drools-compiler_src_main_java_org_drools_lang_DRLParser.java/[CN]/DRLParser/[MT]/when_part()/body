{
  when_part_return retval=new when_part_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON76=null;
  Token COLON79=null;
  when_key_return when_key75=null;
  normal_lhs_block_return normal_lhs_block77=null;
  when_key_return when_key78=null;
  normal_lhs_block_return normal_lhs_block80=null;
  Object COLON76_tree=null;
  Object COLON79_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
  RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
  try {
    int alt32=2;
    int LA32_0=input.LA(1);
    if ((LA32_0 == ID) && ((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
      int LA32_1=input.LA(2);
      if (((validateWhenWithParenthesis() && (validateIdentifierKey(DroolsSoftKeywords.WHEN))))) {
        alt32=1;
      }
 else       if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
        alt32=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("472:1: when_part : ({...}? when_key ( COLON )? normal_lhs_block -> when_key normal_lhs_block | when_key ( COLON )? normal_lhs_block -> when_key normal_lhs_block );",32,1,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("472:1: when_part : ({...}? when_key ( COLON )? normal_lhs_block -> when_key normal_lhs_block | when_key ( COLON )? normal_lhs_block -> when_key normal_lhs_block );",32,0,input);
      throw nvae;
    }
switch (alt32) {
case 1:
{
        if (!(validateWhenWithParenthesis())) {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          throw new FailedPredicateException(input,"when_part","validateWhenWithParenthesis()");
        }
        pushFollow(FOLLOW_when_key_in_when_part1396);
        when_key75=when_key();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_when_key.add(when_key75.getTree());
        int alt30=2;
        int LA30_0=input.LA(1);
        if ((LA30_0 == COLON)) {
          alt30=1;
        }
switch (alt30) {
case 1:
{
            COLON76=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_when_part1398);
            if (failed)             return retval;
            if (backtracking == 0)             stream_COLON.add(COLON76);
          }
        break;
    }
    pushFollow(FOLLOW_normal_lhs_block_in_when_part1401);
    normal_lhs_block77=normal_lhs_block();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     stream_normal_lhs_block.add(normal_lhs_block77.getTree());
    if (backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
        adaptor.addChild(root_0,stream_when_key.next());
        adaptor.addChild(root_0,stream_normal_lhs_block.next());
      }
    }
  }
break;
case 2:
{
pushFollow(FOLLOW_when_key_in_when_part1413);
when_key78=when_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_when_key.add(when_key78.getTree());
int alt31=2;
int LA31_0=input.LA(1);
if ((LA31_0 == COLON)) {
  alt31=1;
}
switch (alt31) {
case 1:
{
    COLON79=(Token)input.LT(1);
    match(input,COLON,FOLLOW_COLON_in_when_part1415);
    if (failed)     return retval;
    if (backtracking == 0)     stream_COLON.add(COLON79);
  }
break;
}
pushFollow(FOLLOW_normal_lhs_block_in_when_part1418);
normal_lhs_block80=normal_lhs_block();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_normal_lhs_block.add(normal_lhs_block80.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
adaptor.addChild(root_0,stream_when_key.next());
adaptor.addChild(root_0,stream_normal_lhs_block.next());
}
}
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
