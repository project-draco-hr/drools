{
  when_part_return retval=new when_part_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON76=null;
  when_key_return when_key75=null;
  normal_lhs_block_return normal_lhs_block77=null;
  Object COLON76_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
  RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
  try {
{
      pushFollow(FOLLOW_when_key_in_when_part1394);
      when_key75=when_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_when_key.add(when_key75.getTree());
      int alt30=2;
      int LA30_0=input.LA(1);
      if ((LA30_0 == COLON)) {
        alt30=1;
      }
switch (alt30) {
case 1:
{
          COLON76=(Token)input.LT(1);
          match(input,COLON,FOLLOW_COLON_in_when_part1396);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COLON.add(COLON76);
        }
      break;
  }
  pushFollow(FOLLOW_normal_lhs_block_in_when_part1399);
  normal_lhs_block77=normal_lhs_block();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_normal_lhs_block.add(normal_lhs_block77.getTree());
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
      adaptor.addChild(root_0,stream_when_key.next());
      adaptor.addChild(root_0,stream_normal_lhs_block.next());
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
