{
  DRLParser.when_part_return retval=new DRLParser.when_part_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token WHEN76=null;
  Token COLON77=null;
  DRLParser.normal_lhs_block_return normal_lhs_block78=null;
  Object WHEN76_tree=null;
  Object COLON77_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
  RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
  try {
{
      WHEN76=(Token)match(input,WHEN,FOLLOW_WHEN_in_when_part1501);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_WHEN.add(WHEN76);
      if (state.backtracking == 0) {
        emit(WHEN76,DroolsEditorType.KEYWORD);
      }
      int alt32=2;
      int LA32_0=input.LA(1);
      if ((LA32_0 == COLON)) {
        alt32=1;
      }
switch (alt32) {
case 1:
{
          COLON77=(Token)match(input,COLON,FOLLOW_COLON_in_when_part1507);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_COLON.add(COLON77);
        }
      break;
  }
  if (state.backtracking == 0) {
    emit(COLON77,DroolsEditorType.SYMBOL);
  }
  if (state.backtracking == 0) {
    emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
  }
  pushFollow(FOLLOW_normal_lhs_block_in_when_part1517);
  normal_lhs_block78=normal_lhs_block();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_normal_lhs_block.add(normal_lhs_block78.getTree());
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
      adaptor.addChild(root_0,stream_WHEN.nextNode());
      adaptor.addChild(root_0,stream_normal_lhs_block.nextTree());
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
