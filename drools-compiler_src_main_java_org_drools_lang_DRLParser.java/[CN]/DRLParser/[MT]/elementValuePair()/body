{
  DRLParser.elementValuePair_return retval=new DRLParser.elementValuePair_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token key=null;
  Token EQUALS_ASSIGN850=null;
  DRLParser.elementValue_return val=null;
  DRLParser.elementValue_return value=null;
  Object key_tree=null;
  Object EQUALS_ASSIGN850_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
  RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
  try {
    int alt256=2;
    int LA256_0=input.LA(1);
    if ((LA256_0 == ID)) {
      int LA256_1=input.LA(2);
      if ((LA256_1 == EQUALS_ASSIGN) && (synpred80_DRL())) {
        alt256=1;
      }
 else       if (((LA256_1 >= ID && LA256_1 <= DOT) || LA256_1 == COMMA || (LA256_1 >= LEFT_PAREN && LA256_1 <= RIGHT_PAREN) || (LA256_1 >= DOUBLE_PIPE && LA256_1 <= DOUBLE_AMPER) || (LA256_1 >= EQUALS && LA256_1 <= LEFT_SQUARE) || (LA256_1 >= PLUS && LA256_1 <= MINUS) || (LA256_1 >= QUESTION && LA256_1 <= DECR))) {
        alt256=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",256,1,input);
        throw nvae;
      }
    }
 else     if ((LA256_0 == STRING || (LA256_0 >= BOOL && LA256_0 <= LEFT_PAREN) || (LA256_0 >= TimePeriod && LA256_0 <= DECIMAL) || LA256_0 == LESS || LA256_0 == LEFT_SQUARE || (LA256_0 >= NULL && LA256_0 <= FLOAT) || LA256_0 == LEFT_CURLY || (LA256_0 >= INCR && LA256_0 <= NEGATION) || LA256_0 == AT)) {
      alt256=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",256,0,input);
      throw nvae;
    }
switch (alt256) {
case 1:
{
        key=(Token)match(input,ID,FOLLOW_ID_in_elementValuePair9970);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_ID.add(key);
        EQUALS_ASSIGN850=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_elementValuePair9972);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN850);
        pushFollow(FOLLOW_elementValue_in_elementValuePair9976);
        val=elementValue();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_elementValue.add(val.getTree());
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(Object)adaptor.nil();
{
{
              Object root_1=(Object)adaptor.nil();
              root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_PROP_KEY,key),root_1);
              adaptor.addChild(root_1,(Object)adaptor.create(VT_PROP_VALUE,(val != null ? input.toString(val.start,val.stop) : null)));
              adaptor.addChild(root_0,root_1);
            }
          }
          retval.tree=root_0;
        }
      }
    break;
case 2:
{
    pushFollow(FOLLOW_elementValue_in_elementValuePair9993);
    value=elementValue();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_elementValue.add(value.getTree());
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
{
          Object root_1=(Object)adaptor.nil();
          root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_PROP_KEY,(value != null ? input.toString(value.start,value.stop) : null)),root_1);
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
