{
  BaseDescr result=null;
  if (allowOr && input.LA(1) == DRLLexer.LEFT_PAREN && helper.validateLT(2,DroolsSoftKeywords.OR)) {
    CEDescrBuilder<?,OrDescr> or=null;
    if (state.backtracking == 0) {
      or=ce.or();
      result=or.getDescr();
      helper.start(CEDescrBuilder.class,null,or);
    }
    match(input,DRLLexer.LEFT_PAREN,null,null,DroolsEditorType.SYMBOL);
    if (state.failed)     return null;
    match(input,DRLLexer.ID,DroolsSoftKeywords.OR,null,DroolsEditorType.KEYWORD);
    if (state.failed)     return null;
    if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
      helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
    }
    while (input.LA(1) != DRLLexer.RIGHT_PAREN) {
      lhsAnd(or,allowOr);
      if (state.failed)       return null;
    }
    match(input,DRLLexer.RIGHT_PAREN,null,null,DroolsEditorType.SYMBOL);
    if (state.failed)     return null;
    if (state.backtracking == 0) {
      helper.end(CEDescrBuilder.class,or);
    }
  }
 else {
    Token first=input.LT(1);
    result=lhsAnd(ce,allowOr);
    if (state.failed)     return null;
    if (allowOr && helper.validateIdentifierKey(DroolsSoftKeywords.OR)) {
      CEDescrBuilder<?,OrDescr> or=null;
      if (state.backtracking == 0) {
        ((ConditionalElementDescr)ce.getDescr()).getDescrs().remove(result);
        or=ce.or();
        or.getDescr().addOrMerge(result);
        result=or.getDescr();
        helper.start(CEDescrBuilder.class,null,or);
        helper.setStart(or,first);
      }
      while (helper.validateIdentifierKey(DroolsSoftKeywords.OR) || input.LA(1) == DRLLexer.DOUBLE_PIPE) {
        if (input.LA(1) == DRLLexer.DOUBLE_PIPE) {
          match(input,DRLLexer.DOUBLE_PIPE,null,null,DroolsEditorType.SYMBOL);
        }
 else {
          match(input,DRLLexer.ID,DroolsSoftKeywords.OR,null,DroolsEditorType.KEYWORD);
        }
        if (state.failed)         return null;
        if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
          helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
        }
        lhsAnd(or,allowOr);
        if (state.failed)         return null;
        if (state.backtracking == 0) {
          helper.end(CEDescrBuilder.class,or);
        }
      }
    }
  }
  return result;
}
