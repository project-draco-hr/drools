{
  accessor_element_return retval=new accessor_element_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID287=null;
  square_chunk_return square_chunk288=null;
  Object ID287_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
  try {
{
      ID287=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_accessor_element4624);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID287);
      if (backtracking == 0) {
        emit(ID287,DroolsEditorType.IDENTIFIER);
      }
      loop97:       do {
        int alt97=2;
        int LA97_0=input.LA(1);
        if ((LA97_0 == LEFT_SQUARE)) {
          alt97=1;
        }
switch (alt97) {
case 1:
{
            pushFollow(FOLLOW_square_chunk_in_accessor_element4630);
            square_chunk288=square_chunk();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_square_chunk.add(square_chunk288.getTree());
          }
        break;
default :
      break loop97;
  }
}
 while (true);
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_ACCESSOR_ELEMENT,"VT_ACCESSOR_ELEMENT"),root_1);
      adaptor.addChild(root_1,stream_ID.next());
      while (stream_square_chunk.hasNext()) {
        adaptor.addChild(root_1,stream_square_chunk.next());
      }
      stream_square_chunk.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
