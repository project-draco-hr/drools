{
  function_return retval=new function_return();
  retval.start=input.LT(1);
  Object root_0=null;
  function_key_return function_key25=null;
  data_type_return data_type26=null;
  function_id_return function_id27=null;
  parameters_return parameters28=null;
  curly_chunk_return curly_chunk29=null;
  RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
  RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
  RewriteRuleSubtreeStream stream_curly_chunk=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk");
  RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
  RewriteRuleSubtreeStream stream_function_id=new RewriteRuleSubtreeStream(adaptor,"rule function_id");
  pushParaphrases(DroolsParaphareseTypes.FUNCTION);
  try {
{
      pushFollow(FOLLOW_function_key_in_function786);
      function_key25=function_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_function_key.add(function_key25.getTree());
      int alt11=2;
      int LA11_0=input.LA(1);
      if ((LA11_0 == ID)) {
        int LA11_1=input.LA(2);
        if (((LA11_1 >= ID && LA11_1 <= DOT) || LA11_1 == LEFT_SQUARE)) {
          alt11=1;
        }
      }
switch (alt11) {
case 1:
{
          pushFollow(FOLLOW_data_type_in_function788);
          data_type26=data_type();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_data_type.add(data_type26.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_function_id_in_function791);
  function_id27=function_id();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_function_id.add(function_id27.getTree());
  pushFollow(FOLLOW_parameters_in_function793);
  parameters28=parameters();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_parameters.add(parameters28.getTree());
  pushFollow(FOLLOW_curly_chunk_in_function795);
  curly_chunk29=curly_chunk();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_curly_chunk.add(curly_chunk29.getTree());
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_function_key.nextNode(),root_1);
        if (stream_data_type.hasNext()) {
          adaptor.addChild(root_1,stream_data_type.next());
        }
        stream_data_type.reset();
        adaptor.addChild(root_1,stream_function_id.next());
        adaptor.addChild(root_1,stream_parameters.next());
        adaptor.addChild(root_1,stream_curly_chunk.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
  paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
