{
  Token loc=null;
  String retType=null;
  Token n=null;
  String paramType=null;
  String paramName=null;
  String body=null;
  FunctionDescr f=null;
  try {
{
      loc=(Token)input.LT(1);
      match(input,FUNCTION,FOLLOW_FUNCTION_in_function507);
      if (failed)       return;
      int alt10=2;
      int LA10_0=input.LA(1);
      if ((LA10_0 == ID)) {
        int LA10_1=input.LA(2);
        if (((LA10_1 >= ATTRIBUTES && LA10_1 <= WHEN) || LA10_1 == ENABLED || LA10_1 == SALIENCE || LA10_1 == DURATION || (LA10_1 >= ACCUMULATE && LA10_1 <= OR) || (LA10_1 >= CONTAINS && LA10_1 <= EXCLUDES) || LA10_1 == NULL || LA10_1 == LEFT_SQUARE || (LA10_1 >= AND && LA10_1 <= THEN) || LA10_1 == 67)) {
          alt10=1;
        }
      }
switch (alt10) {
case 1:
{
          pushFollow(FOLLOW_dotted_name_in_function512);
          retType=dotted_name(null);
          _fsp--;
          if (failed)           return;
        }
      break;
  }
  pushFollow(FOLLOW_identifier_in_function519);
  n=identifier();
  _fsp--;
  if (failed)   return;
  if (backtracking == 0) {
    f=factory.createFunction(n.getText(),retType);
    f.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
    f.setStartCharacter(((CommonToken)loc).getStartIndex());
    packageDescr.addFunction(f);
  }
  match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_function528);
  if (failed)   return;
  int alt14=2;
  int LA14_0=input.LA(1);
  if (((LA14_0 >= ATTRIBUTES && LA14_0 <= WHEN) || LA14_0 == ENABLED || LA14_0 == SALIENCE || LA14_0 == DURATION || (LA14_0 >= ACCUMULATE && LA14_0 <= OR) || (LA14_0 >= CONTAINS && LA14_0 <= EXCLUDES) || LA14_0 == NULL || (LA14_0 >= AND && LA14_0 <= THEN))) {
    alt14=1;
  }
switch (alt14) {
case 1:
{
      int alt11=2;
      alt11=dfa11.predict(input);
switch (alt11) {
case 1:
{
          pushFollow(FOLLOW_dotted_name_in_function538);
          paramType=dotted_name(null);
          _fsp--;
          if (failed)           return;
        }
      break;
  }
  pushFollow(FOLLOW_argument_in_function545);
  paramName=argument();
  _fsp--;
  if (failed)   return;
  if (backtracking == 0) {
    f.addParameter(paramType,paramName);
  }
  loop13:   do {
    int alt13=2;
    int LA13_0=input.LA(1);
    if ((LA13_0 == 66)) {
      alt13=1;
    }
switch (alt13) {
case 1:
{
        match(input,66,FOLLOW_66_in_function559);
        if (failed)         return;
        int alt12=2;
        alt12=dfa12.predict(input);
switch (alt12) {
case 1:
{
            pushFollow(FOLLOW_dotted_name_in_function564);
            paramType=dotted_name(null);
            _fsp--;
            if (failed)             return;
          }
        break;
    }
    pushFollow(FOLLOW_argument_in_function571);
    paramName=argument();
    _fsp--;
    if (failed)     return;
    if (backtracking == 0) {
      f.addParameter(paramType,paramName);
    }
  }
break;
default :
break loop13;
}
}
 while (true);
}
break;
}
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_function595);
if (failed) return;
pushFollow(FOLLOW_curly_chunk_in_function601);
body=curly_chunk(f);
_fsp--;
if (failed) return;
if (backtracking == 0) {
f.setText(body.substring(1,body.length() - 1));
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
