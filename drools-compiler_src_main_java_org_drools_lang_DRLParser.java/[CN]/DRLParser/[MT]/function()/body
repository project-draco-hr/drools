{
  DRLParser.function_return retval=new DRLParser.function_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.function_key_return function_key27=null;
  DRLParser.data_type_return data_type28=null;
  DRLParser.function_id_return function_id29=null;
  DRLParser.parameters_return parameters30=null;
  DRLParser.curly_chunk_return curly_chunk31=null;
  RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
  RewriteRuleSubtreeStream stream_function_id=new RewriteRuleSubtreeStream(adaptor,"rule function_id");
  RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
  RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
  RewriteRuleSubtreeStream stream_curly_chunk=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk");
  helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION);
  if (state.backtracking == 0)   helper.beginSentence(DroolsSentenceType.FUNCTION);
  try {
{
      pushFollow(FOLLOW_function_key_in_function1090);
      function_key27=function_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_function_key.add(function_key27.getTree());
      int alt10=2;
      int LA10_0=input.LA(1);
      if ((LA10_0 == ID)) {
        int LA10_1=input.LA(2);
        if (((LA10_1 >= ID && LA10_1 <= DOT) || LA10_1 == LEFT_SQUARE)) {
          alt10=1;
        }
      }
switch (alt10) {
case 1:
{
          pushFollow(FOLLOW_data_type_in_function1092);
          data_type28=data_type();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_data_type.add(data_type28.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_function_id_in_function1095);
  function_id29=function_id();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_function_id.add(function_id29.getTree());
  pushFollow(FOLLOW_parameters_in_function1097);
  parameters30=parameters();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_parameters.add(parameters30.getTree());
  pushFollow(FOLLOW_curly_chunk_in_function1099);
  curly_chunk31=curly_chunk();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_curly_chunk.add(curly_chunk31.getTree());
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_function_key.nextNode(),root_1);
        if (stream_data_type.hasNext()) {
          adaptor.addChild(root_1,stream_data_type.nextTree());
        }
        stream_data_type.reset();
        adaptor.addChild(root_1,stream_function_id.nextTree());
        adaptor.addChild(root_1,stream_parameters.nextTree());
        adaptor.addChild(root_1,stream_curly_chunk.nextTree());
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
  helper.popParaphrases();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
