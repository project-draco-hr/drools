{
  DRLParser.mapEntry_return retval=new DRLParser.mapEntry_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON593=null;
  DRLParser.expression_return expression592=null;
  DRLParser.expression_return expression594=null;
  Object COLON593_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_expression_in_mapEntry7972);
      expression592=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression592.getTree());
      COLON593=(Token)match(input,COLON,FOLLOW_COLON_in_mapEntry7974);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        COLON593_tree=(Object)adaptor.create(COLON593);
        adaptor.addChild(root_0,COLON593_tree);
      }
      pushFollow(FOLLOW_expression_in_mapEntry7976);
      expression594=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,expression594.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
