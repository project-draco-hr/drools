{
  DRLParser.conditionalOrExpression_return retval=new DRLParser.conditionalOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOUBLE_PIPE491=null;
  DRLParser.conditionalAndExpression_return conditionalAndExpression490=null;
  DRLParser.conditionalAndExpression_return conditionalAndExpression492=null;
  Object DOUBLE_PIPE491_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6982);
      conditionalAndExpression490=conditionalAndExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,conditionalAndExpression490.getTree());
      loop154:       do {
        int alt154=2;
        int LA154_0=input.LA(1);
        if ((LA154_0 == DOUBLE_PIPE)) {
          alt154=1;
        }
switch (alt154) {
case 1:
{
            DOUBLE_PIPE491=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6986);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              DOUBLE_PIPE491_tree=(Object)adaptor.create(DOUBLE_PIPE491);
              adaptor.addChild(root_0,DOUBLE_PIPE491_tree);
            }
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6988);
            conditionalAndExpression492=conditionalAndExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,conditionalAndExpression492.getTree());
          }
        break;
default :
      break loop154;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
