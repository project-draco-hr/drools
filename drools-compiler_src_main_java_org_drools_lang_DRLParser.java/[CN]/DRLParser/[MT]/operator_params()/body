{
  DRLParser.operator_params_return retval=new DRLParser.operator_params_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.operator_args_return ops=null;
  DRLParser.square_chunk_return square_chunk251=null;
  RewriteRuleSubtreeStream stream_operator_args=new RewriteRuleSubtreeStream(adaptor,"rule operator_args");
  try {
    int alt81=2;
    alt81=dfa81.predict(input);
switch (alt81) {
case 1:
{
        pushFollow(FOLLOW_operator_args_in_operator_params4338);
        ops=operator_args();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_operator_args.add(ops.getTree());
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(Object)adaptor.nil();
{
            adaptor.addChild(root_0,(Object)adaptor.create(VT_SQUARE_CHUNK,(ops != null ? ((Token)ops.start) : null),(ops != null ? input.toString(ops.start,ops.stop) : null)));
          }
          retval.tree=root_0;
        }
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_square_chunk_in_operator_params4350);
    square_chunk251=square_chunk();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,square_chunk251.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
