{
  or_restr_connective_return retval=new or_restr_connective_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOUBLE_PIPE237=null;
  and_restr_connective_return and_restr_connective236=null;
  and_restr_connective_return and_restr_connective238=null;
  Object DOUBLE_PIPE237_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4041);
      and_restr_connective236=and_restr_connective();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,and_restr_connective236.getTree());
      loop84:       do {
        int alt84=2;
        alt84=dfa84.predict(input);
switch (alt84) {
case 1:
{
            if (!((validateRestr()))) {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              throw new FailedPredicateException(input,"or_restr_connective","(validateRestr())");
            }
            DOUBLE_PIPE237=(Token)input.LT(1);
            match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_restr_connective4047);
            if (failed)             return retval;
            if (backtracking == 0) {
              DOUBLE_PIPE237_tree=(Object)adaptor.create(DOUBLE_PIPE237);
              root_0=(Object)adaptor.becomeRoot(DOUBLE_PIPE237_tree,root_0);
            }
            if (backtracking == 0) {
              emit(DOUBLE_PIPE237,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4055);
            and_restr_connective238=and_restr_connective();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             adaptor.addChild(root_0,and_restr_connective238.getTree());
          }
        break;
default :
      break loop84;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
