{
  DRLParser.instanceOfExpression_return retval=new DRLParser.instanceOfExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.relationalExpression_return relationalExpression380=null;
  DRLParser.instanceof_key_return instanceof_key381=null;
  DRLParser.type_return type382=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression6334);
      relationalExpression380=relationalExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,relationalExpression380.getTree());
      int alt129=2;
      alt129=dfa129.predict(input);
switch (alt129) {
case 1:
{
          pushFollow(FOLLOW_instanceof_key_in_instanceOfExpression6337);
          instanceof_key381=instanceof_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,instanceof_key381.getTree());
          pushFollow(FOLLOW_type_in_instanceOfExpression6339);
          type382=type();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,type382.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
