{
  DRLParser.variableInitializer_return retval=new DRLParser.variableInitializer_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.arrayInitializer_return arrayInitializer472=null;
  DRLParser.expression_return expression473=null;
  try {
    int alt154=2;
    int LA154_0=input.LA(1);
    if ((LA154_0 == LEFT_CURLY)) {
      alt154=1;
    }
 else     if ((LA154_0 == ID || LA154_0 == STRING || (LA154_0 >= BOOL && LA154_0 <= LEFT_PAREN) || LA154_0 == LESS || (LA154_0 >= NULL && LA154_0 <= LEFT_SQUARE) || (LA154_0 >= INCR && LA154_0 <= NEGATION))) {
      alt154=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",154,0,input);
      throw nvae;
    }
switch (alt154) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_arrayInitializer_in_variableInitializer6894);
        arrayInitializer472=arrayInitializer();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arrayInitializer472.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_expression_in_variableInitializer6905);
    expression473=expression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,expression473.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
