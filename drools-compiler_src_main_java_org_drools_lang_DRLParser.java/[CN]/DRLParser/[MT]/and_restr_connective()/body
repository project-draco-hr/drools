{
  DRLParser.and_restr_connective_return retval=new DRLParser.and_restr_connective_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOUBLE_AMPER234=null;
  DRLParser.constraint_expression_return constraint_expression233=null;
  DRLParser.constraint_expression_return constraint_expression235=null;
  Object DOUBLE_AMPER234_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4145);
      constraint_expression233=constraint_expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,constraint_expression233.getTree());
      loop76:       do {
        int alt76=2;
        int LA76_0=input.LA(1);
        if ((LA76_0 == DOUBLE_AMPER)) {
          int LA76_2=input.LA(2);
          if ((((helper.validateRestr())))) {
            alt76=1;
          }
        }
switch (alt76) {
case 1:
{
            if (!(((helper.validateRestr())))) {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              throw new FailedPredicateException(input,"and_restr_connective","(helper.validateRestr())");
            }
            DOUBLE_AMPER234=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_restr_connective4151);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              DOUBLE_AMPER234_tree=(Object)adaptor.create(DOUBLE_AMPER234);
              root_0=(Object)adaptor.becomeRoot(DOUBLE_AMPER234_tree,root_0);
            }
            if (state.backtracking == 0) {
              helper.emit(DOUBLE_AMPER234,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4158);
            constraint_expression235=constraint_expression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,constraint_expression235.getTree());
          }
        break;
default :
      break loop76;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
if (!helper.lookaheadTest) {
helper.reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 else {
throw re;
}
}
 finally {
}
return retval;
}
