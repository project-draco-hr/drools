{
  DRLParser.annotation_return retval=new DRLParser.annotation_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AT855=null;
  Token LEFT_PAREN856=null;
  Token RIGHT_PAREN857=null;
  Token LEFT_PAREN858=null;
  Token RIGHT_PAREN860=null;
  DRLParser.annotationName_return ann=null;
  DRLParser.elementValuePairs_return elementValuePairs859=null;
  Object AT855_tree=null;
  Object LEFT_PAREN856_tree=null;
  Object RIGHT_PAREN857_tree=null;
  Object LEFT_PAREN858_tree=null;
  Object RIGHT_PAREN860_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
  RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
  RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
  try {
{
      AT855=(Token)match(input,AT,FOLLOW_AT_in_annotation9932);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_AT.add(AT855);
      if (state.backtracking == 0) {
        helper.emit(AT855,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_annotationName_in_annotation9940);
      ann=annotationName();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_annotationName.add(ann.getTree());
      int alt255=3;
      int LA255_0=input.LA(1);
      if ((LA255_0 == LEFT_PAREN)) {
        int LA255_1=input.LA(2);
        if ((LA255_1 == RIGHT_PAREN)) {
          alt255=1;
        }
 else         if ((LA255_1 == ID || LA255_1 == STRING || (LA255_1 >= BOOL && LA255_1 <= LEFT_PAREN) || (LA255_1 >= TimePeriod && LA255_1 <= DECIMAL) || LA255_1 == LESS || LA255_1 == LEFT_SQUARE || (LA255_1 >= NULL && LA255_1 <= FLOAT) || LA255_1 == LEFT_CURLY || (LA255_1 >= INCR && LA255_1 <= NEGATION) || LA255_1 == AT)) {
          alt255=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",255,1,input);
          throw nvae;
        }
      }
 else       if (((LA255_0 >= SEMICOLON && LA255_0 <= ID) || (LA255_0 >= WHEN && LA255_0 <= COMMA) || LA255_0 == RIGHT_PAREN || LA255_0 == LESS || LA255_0 == THEN || LA255_0 == RIGHT_CURLY || LA255_0 == AT)) {
        alt255=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",255,0,input);
        throw nvae;
      }
switch (alt255) {
case 1:
{
          LEFT_PAREN856=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation9952);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_LEFT_PAREN.add(LEFT_PAREN856);
          RIGHT_PAREN857=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation9954);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_RIGHT_PAREN.add(RIGHT_PAREN857);
        }
      break;
case 2:
{
      LEFT_PAREN858=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation9962);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN858);
      pushFollow(FOLLOW_elementValuePairs_in_annotation9964);
      elementValuePairs859=elementValuePairs();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_elementValuePairs.add(elementValuePairs859.getTree());
      RIGHT_PAREN860=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation9966);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_RIGHT_PAREN.add(RIGHT_PAREN860);
    }
  break;
case 3:
{
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_AT.nextNode(),root_1);
adaptor.addChild(root_1,(Object)adaptor.create(VT_TYPE_NAME,(ann != null ? ann.name : null)));
if (stream_elementValuePairs.hasNext()) {
  adaptor.addChild(root_1,stream_elementValuePairs.nextTree());
}
stream_elementValuePairs.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
