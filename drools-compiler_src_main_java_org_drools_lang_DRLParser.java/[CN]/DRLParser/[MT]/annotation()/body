{
  DRLParser.annotation_return retval=new DRLParser.annotation_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AT840=null;
  Token LEFT_PAREN841=null;
  Token RIGHT_PAREN842=null;
  Token LEFT_PAREN843=null;
  Token RIGHT_PAREN845=null;
  DRLParser.annotationName_return ann=null;
  DRLParser.elementValuePairs_return elementValuePairs844=null;
  Object AT840_tree=null;
  Object LEFT_PAREN841_tree=null;
  Object RIGHT_PAREN842_tree=null;
  Object LEFT_PAREN843_tree=null;
  Object RIGHT_PAREN845_tree=null;
  RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
  RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
  try {
{
      AT840=(Token)match(input,AT,FOLLOW_AT_in_annotation9829);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_AT.add(AT840);
      if (state.backtracking == 0) {
        helper.emit(AT840,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_annotationName_in_annotation9837);
      ann=annotationName();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_annotationName.add(ann.getTree());
      int alt253=3;
      int LA253_0=input.LA(1);
      if ((LA253_0 == LEFT_PAREN)) {
        int LA253_1=input.LA(2);
        if ((LA253_1 == RIGHT_PAREN)) {
          alt253=1;
        }
 else         if ((LA253_1 == ID || LA253_1 == STRING || (LA253_1 >= BOOL && LA253_1 <= LEFT_PAREN) || (LA253_1 >= TimePeriod && LA253_1 <= DECIMAL) || LA253_1 == LESS || LA253_1 == LEFT_SQUARE || (LA253_1 >= NULL && LA253_1 <= FLOAT) || LA253_1 == LEFT_CURLY || (LA253_1 >= INCR && LA253_1 <= NEGATION) || LA253_1 == AT)) {
          alt253=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",253,1,input);
          throw nvae;
        }
      }
 else       if (((LA253_0 >= SEMICOLON && LA253_0 <= ID) || (LA253_0 >= WHEN && LA253_0 <= COMMA) || LA253_0 == RIGHT_PAREN || LA253_0 == LESS || LA253_0 == THEN || LA253_0 == RIGHT_CURLY || LA253_0 == AT)) {
        alt253=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",253,0,input);
        throw nvae;
      }
switch (alt253) {
case 1:
{
          LEFT_PAREN841=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation9849);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_LEFT_PAREN.add(LEFT_PAREN841);
          RIGHT_PAREN842=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation9851);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_RIGHT_PAREN.add(RIGHT_PAREN842);
        }
      break;
case 2:
{
      LEFT_PAREN843=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation9859);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN843);
      pushFollow(FOLLOW_elementValuePairs_in_annotation9861);
      elementValuePairs844=elementValuePairs();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_elementValuePairs.add(elementValuePairs844.getTree());
      RIGHT_PAREN845=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation9863);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_RIGHT_PAREN.add(RIGHT_PAREN845);
    }
  break;
case 3:
{
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_AT.nextNode(),root_1);
adaptor.addChild(root_1,(Object)adaptor.create(VT_TYPE_NAME,(ann != null ? ann.name : null)));
if (stream_elementValuePairs.hasNext()) {
  adaptor.addChild(root_1,stream_elementValuePairs.nextTree());
}
stream_elementValuePairs.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
