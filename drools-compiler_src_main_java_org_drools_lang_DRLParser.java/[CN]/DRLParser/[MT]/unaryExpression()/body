{
  DRLParser.unaryExpression_return retval=new DRLParser.unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS525=null;
  Token MINUS527=null;
  Token INCR529=null;
  Token DECR531=null;
  DRLParser.unaryExpression_return unaryExpression526=null;
  DRLParser.unaryExpression_return unaryExpression528=null;
  DRLParser.primary_return primary530=null;
  DRLParser.primary_return primary532=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus533=null;
  Object PLUS525_tree=null;
  Object MINUS527_tree=null;
  Object INCR529_tree=null;
  Object DECR531_tree=null;
  try {
    int alt165=5;
switch (input.LA(1)) {
case PLUS:
{
        alt165=1;
      }
    break;
case MINUS:
{
    alt165=2;
  }
break;
case INCR:
{
alt165=3;
}
break;
case DECR:
{
alt165=4;
}
break;
case ID:
case STRING:
case BOOL:
case LEFT_PAREN:
case DECIMAL:
case LESS:
case LEFT_SQUARE:
case NULL:
case HEX:
case FLOAT:
case TILDE:
case NEGATION:
{
alt165=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",165,0,input);
throw nvae;
}
switch (alt165) {
case 1:
{
root_0=(Object)adaptor.nil();
PLUS525=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression7359);
if (state.failed) return retval;
if (state.backtracking == 0) {
PLUS525_tree=(Object)adaptor.create(PLUS525);
adaptor.addChild(root_0,PLUS525_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression7361);
unaryExpression526=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression526.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
MINUS527=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7369);
if (state.failed) return retval;
if (state.backtracking == 0) {
MINUS527_tree=(Object)adaptor.create(MINUS527);
adaptor.addChild(root_0,MINUS527_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression7371);
unaryExpression528=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression528.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
INCR529=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression7381);
if (state.failed) return retval;
if (state.backtracking == 0) {
INCR529_tree=(Object)adaptor.create(INCR529);
adaptor.addChild(root_0,INCR529_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression7383);
primary530=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary530.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
DECR531=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression7393);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECR531_tree=(Object)adaptor.create(DECR531);
adaptor.addChild(root_0,DECR531_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression7395);
primary532=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary532.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression7405);
unaryExpressionNotPlusMinus533=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus533.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
