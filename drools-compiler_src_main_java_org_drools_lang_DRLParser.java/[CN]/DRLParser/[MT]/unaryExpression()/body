{
  DRLParser.unaryExpression_return retval=new DRLParser.unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS402=null;
  Token MINUS404=null;
  Token INCR406=null;
  Token DECR408=null;
  DRLParser.unaryExpression_return unaryExpression403=null;
  DRLParser.unaryExpression_return unaryExpression405=null;
  DRLParser.primary_return primary407=null;
  DRLParser.primary_return primary409=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus410=null;
  Object PLUS402_tree=null;
  Object MINUS404_tree=null;
  Object INCR406_tree=null;
  Object DECR408_tree=null;
  try {
    int alt136=5;
switch (input.LA(1)) {
case PLUS:
{
        alt136=1;
      }
    break;
case MINUS:
{
    alt136=2;
  }
break;
case INCR:
{
alt136=3;
}
break;
case DECR:
{
alt136=4;
}
break;
case ID:
case STRING:
case BOOL:
case LEFT_PAREN:
case DECIMAL:
case LESS:
case LEFT_SQUARE:
case NULL:
case HEX:
case FLOAT:
case TILDE:
case NEGATION:
{
alt136=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",136,0,input);
throw nvae;
}
switch (alt136) {
case 1:
{
root_0=(Object)adaptor.nil();
PLUS402=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression6599);
if (state.failed) return retval;
if (state.backtracking == 0) {
PLUS402_tree=(Object)adaptor.create(PLUS402);
adaptor.addChild(root_0,PLUS402_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression6601);
unaryExpression403=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression403.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
MINUS404=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6609);
if (state.failed) return retval;
if (state.backtracking == 0) {
MINUS404_tree=(Object)adaptor.create(MINUS404);
adaptor.addChild(root_0,MINUS404_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression6611);
unaryExpression405=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression405.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
INCR406=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression6621);
if (state.failed) return retval;
if (state.backtracking == 0) {
INCR406_tree=(Object)adaptor.create(INCR406);
adaptor.addChild(root_0,INCR406_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression6623);
primary407=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary407.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
DECR408=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression6633);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECR408_tree=(Object)adaptor.create(DECR408);
adaptor.addChild(root_0,DECR408_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression6635);
primary409=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary409.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6645);
unaryExpressionNotPlusMinus410=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus410.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
