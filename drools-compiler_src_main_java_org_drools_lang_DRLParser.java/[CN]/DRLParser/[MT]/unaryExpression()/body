{
  DRLParser.unaryExpression_return retval=new DRLParser.unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS510=null;
  Token MINUS512=null;
  Token INCR514=null;
  Token DECR516=null;
  DRLParser.unaryExpression_return unaryExpression511=null;
  DRLParser.unaryExpression_return unaryExpression513=null;
  DRLParser.primary_return primary515=null;
  DRLParser.primary_return primary517=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus518=null;
  Object PLUS510_tree=null;
  Object MINUS512_tree=null;
  Object INCR514_tree=null;
  Object DECR516_tree=null;
  try {
    int alt163=5;
switch (input.LA(1)) {
case PLUS:
{
        alt163=1;
      }
    break;
case MINUS:
{
    alt163=2;
  }
break;
case INCR:
{
alt163=3;
}
break;
case DECR:
{
alt163=4;
}
break;
case ID:
case STRING:
case BOOL:
case LEFT_PAREN:
case DECIMAL:
case LESS:
case LEFT_SQUARE:
case NULL:
case HEX:
case FLOAT:
case TILDE:
case NEGATION:
{
alt163=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",163,0,input);
throw nvae;
}
switch (alt163) {
case 1:
{
root_0=(Object)adaptor.nil();
PLUS510=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression7256);
if (state.failed) return retval;
if (state.backtracking == 0) {
PLUS510_tree=(Object)adaptor.create(PLUS510);
adaptor.addChild(root_0,PLUS510_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression7258);
unaryExpression511=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression511.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
MINUS512=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7266);
if (state.failed) return retval;
if (state.backtracking == 0) {
MINUS512_tree=(Object)adaptor.create(MINUS512);
adaptor.addChild(root_0,MINUS512_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression7268);
unaryExpression513=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression513.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
INCR514=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression7278);
if (state.failed) return retval;
if (state.backtracking == 0) {
INCR514_tree=(Object)adaptor.create(INCR514);
adaptor.addChild(root_0,INCR514_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression7280);
primary515=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary515.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
DECR516=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression7290);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECR516_tree=(Object)adaptor.create(DECR516);
adaptor.addChild(root_0,DECR516_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression7292);
primary517=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary517.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression7302);
unaryExpressionNotPlusMinus518=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus518.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
