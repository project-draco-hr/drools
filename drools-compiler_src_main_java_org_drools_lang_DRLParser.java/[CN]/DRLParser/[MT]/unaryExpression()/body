{
  DRLParser.unaryExpression_return retval=new DRLParser.unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS367=null;
  Token MINUS369=null;
  Token INCR371=null;
  Token DECR373=null;
  DRLParser.unaryExpression_return unaryExpression368=null;
  DRLParser.unaryExpression_return unaryExpression370=null;
  DRLParser.primary_return primary372=null;
  DRLParser.primary_return primary374=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus375=null;
  Object PLUS367_tree=null;
  Object MINUS369_tree=null;
  Object INCR371_tree=null;
  Object DECR373_tree=null;
  try {
    int alt127=5;
switch (input.LA(1)) {
case PLUS:
{
        alt127=1;
      }
    break;
case MINUS:
{
    alt127=2;
  }
break;
case INCR:
{
alt127=3;
}
break;
case DECR:
{
alt127=4;
}
break;
case ID:
case STRING:
case BOOL:
case LEFT_PAREN:
case LESS:
case NULL:
case DECIMAL:
case HEX:
case FLOAT:
case LEFT_SQUARE:
case TILDE:
case NEGATION:
{
alt127=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",127,0,input);
throw nvae;
}
switch (alt127) {
case 1:
{
root_0=(Object)adaptor.nil();
PLUS367=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression6007);
if (state.failed) return retval;
if (state.backtracking == 0) {
PLUS367_tree=(Object)adaptor.create(PLUS367);
adaptor.addChild(root_0,PLUS367_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression6009);
unaryExpression368=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression368.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
MINUS369=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6017);
if (state.failed) return retval;
if (state.backtracking == 0) {
MINUS369_tree=(Object)adaptor.create(MINUS369);
adaptor.addChild(root_0,MINUS369_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression6019);
unaryExpression370=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression370.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
INCR371=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression6029);
if (state.failed) return retval;
if (state.backtracking == 0) {
INCR371_tree=(Object)adaptor.create(INCR371);
adaptor.addChild(root_0,INCR371_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression6031);
primary372=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary372.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
DECR373=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression6041);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECR373_tree=(Object)adaptor.create(DECR373);
adaptor.addChild(root_0,DECR373_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression6043);
primary374=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary374.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6053);
unaryExpressionNotPlusMinus375=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus375.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
