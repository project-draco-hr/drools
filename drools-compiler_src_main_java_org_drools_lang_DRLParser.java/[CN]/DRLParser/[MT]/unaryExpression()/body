{
  DRLParser.unaryExpression_return retval=new DRLParser.unaryExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS397=null;
  Token MINUS399=null;
  Token INCR401=null;
  Token DECR403=null;
  DRLParser.unaryExpression_return unaryExpression398=null;
  DRLParser.unaryExpression_return unaryExpression400=null;
  DRLParser.primary_return primary402=null;
  DRLParser.primary_return primary404=null;
  DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus405=null;
  Object PLUS397_tree=null;
  Object MINUS399_tree=null;
  Object INCR401_tree=null;
  Object DECR403_tree=null;
  try {
    int alt134=5;
switch (input.LA(1)) {
case PLUS:
{
        alt134=1;
      }
    break;
case MINUS:
{
    alt134=2;
  }
break;
case INCR:
{
alt134=3;
}
break;
case DECR:
{
alt134=4;
}
break;
case ID:
case STRING:
case BOOL:
case LEFT_PAREN:
case DECIMAL:
case LESS:
case LEFT_SQUARE:
case NULL:
case HEX:
case FLOAT:
case TILDE:
case NEGATION:
{
alt134=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",134,0,input);
throw nvae;
}
switch (alt134) {
case 1:
{
root_0=(Object)adaptor.nil();
PLUS397=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression6538);
if (state.failed) return retval;
if (state.backtracking == 0) {
PLUS397_tree=(Object)adaptor.create(PLUS397);
adaptor.addChild(root_0,PLUS397_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression6540);
unaryExpression398=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression398.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
MINUS399=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6548);
if (state.failed) return retval;
if (state.backtracking == 0) {
MINUS399_tree=(Object)adaptor.create(MINUS399);
adaptor.addChild(root_0,MINUS399_tree);
}
pushFollow(FOLLOW_unaryExpression_in_unaryExpression6550);
unaryExpression400=unaryExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpression400.getTree());
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
INCR401=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression6560);
if (state.failed) return retval;
if (state.backtracking == 0) {
INCR401_tree=(Object)adaptor.create(INCR401);
adaptor.addChild(root_0,INCR401_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression6562);
primary402=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary402.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
DECR403=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression6572);
if (state.failed) return retval;
if (state.backtracking == 0) {
DECR403_tree=(Object)adaptor.create(DECR403);
adaptor.addChild(root_0,DECR403_tree);
}
pushFollow(FOLLOW_primary_in_unaryExpression6574);
primary404=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,primary404.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6584);
unaryExpressionNotPlusMinus405=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,unaryExpressionNotPlusMinus405.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
