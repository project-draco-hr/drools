{
  field_constraint_return retval=new field_constraint_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token arw=null;
  label_return label226=null;
  accessor_path_return accessor_path227=null;
  or_restr_connective_return or_restr_connective228=null;
  paren_chunk_return paren_chunk229=null;
  accessor_path_return accessor_path230=null;
  or_restr_connective_return or_restr_connective231=null;
  Object arw_tree=null;
  RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  RewriteRuleSubtreeStream stream_or_restr_connective=new RewriteRuleSubtreeStream(adaptor,"rule or_restr_connective");
  RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
  RewriteRuleSubtreeStream stream_accessor_path=new RewriteRuleSubtreeStream(adaptor,"rule accessor_path");
  boolean isArrow=false;
  try {
    int alt81=2;
    int LA81_0=input.LA(1);
    if ((LA81_0 == ID)) {
      int LA81_1=input.LA(2);
      if ((LA81_1 == COLON)) {
        alt81=1;
      }
 else       if (((LA81_1 >= ID && LA81_1 <= DOT) || LA81_1 == LEFT_PAREN || (LA81_1 >= EQUAL && LA81_1 <= GRAVE_ACCENT) || LA81_1 == LEFT_SQUARE)) {
        alt81=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("1155:1: field_constraint : ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) );",81,1,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("1155:1: field_constraint : ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) );",81,0,input);
      throw nvae;
    }
switch (alt81) {
case 1:
{
        pushFollow(FOLLOW_label_in_field_constraint3871);
        label226=label();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_label.add(label226.getTree());
        pushFollow(FOLLOW_accessor_path_in_field_constraint3873);
        accessor_path227=accessor_path();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_accessor_path.add(accessor_path227.getTree());
        int alt80=3;
        int LA80_0=input.LA(1);
        if ((LA80_0 == ID || LA80_0 == LEFT_PAREN || (LA80_0 >= EQUAL && LA80_0 <= GRAVE_ACCENT))) {
          alt80=1;
        }
 else         if ((LA80_0 == ARROW)) {
          alt80=2;
        }
switch (alt80) {
case 1:
{
            pushFollow(FOLLOW_or_restr_connective_in_field_constraint3880);
            or_restr_connective228=or_restr_connective();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             stream_or_restr_connective.add(or_restr_connective228.getTree());
          }
        break;
case 2:
{
        arw=(Token)input.LT(1);
        match(input,ARROW,FOLLOW_ARROW_in_field_constraint3886);
        if (failed)         return retval;
        if (backtracking == 0)         stream_ARROW.add(arw);
        if (backtracking == 0) {
          emit(arw,DroolsEditorType.SYMBOL);
        }
        pushFollow(FOLLOW_paren_chunk_in_field_constraint3890);
        paren_chunk229=paren_chunk();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         stream_paren_chunk.add(paren_chunk229.getTree());
        if (backtracking == 0) {
          isArrow=true;
        }
      }
    break;
}
if (backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
  if (isArrow) {
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_BIND_FIELD,"VT_BIND_FIELD"),root_1);
      adaptor.addChild(root_1,stream_label.next());
{
        Object root_2=(Object)adaptor.nil();
        root_2=(Object)adaptor.becomeRoot(adaptor.create(VT_FIELD,"VT_FIELD"),root_2);
        adaptor.addChild(root_2,stream_accessor_path.next());
        adaptor.addChild(root_1,root_2);
      }
      adaptor.addChild(root_0,root_1);
    }
    if (stream_paren_chunk.hasNext()) {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VK_EVAL,arw),root_1);
        adaptor.addChild(root_1,stream_paren_chunk.next());
        adaptor.addChild(root_0,root_1);
      }
    }
    stream_paren_chunk.reset();
  }
 else {
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_BIND_FIELD,"VT_BIND_FIELD"),root_1);
      adaptor.addChild(root_1,stream_label.next());
{
        Object root_2=(Object)adaptor.nil();
        root_2=(Object)adaptor.becomeRoot(adaptor.create(VT_FIELD,"VT_FIELD"),root_2);
        adaptor.addChild(root_2,stream_accessor_path.next());
        if (stream_or_restr_connective.hasNext()) {
          adaptor.addChild(root_2,stream_or_restr_connective.next());
        }
        stream_or_restr_connective.reset();
        adaptor.addChild(root_1,root_2);
      }
      adaptor.addChild(root_0,root_1);
    }
  }
}
}
break;
case 2:
{
pushFollow(FOLLOW_accessor_path_in_field_constraint3944);
accessor_path230=accessor_path();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_accessor_path.add(accessor_path230.getTree());
pushFollow(FOLLOW_or_restr_connective_in_field_constraint3946);
or_restr_connective231=or_restr_connective();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_or_restr_connective.add(or_restr_connective231.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_FIELD,"VT_FIELD"),root_1);
  adaptor.addChild(root_1,stream_accessor_path.next());
  adaptor.addChild(root_1,stream_or_restr_connective.next());
  adaptor.addChild(root_0,root_1);
}
}
}
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
