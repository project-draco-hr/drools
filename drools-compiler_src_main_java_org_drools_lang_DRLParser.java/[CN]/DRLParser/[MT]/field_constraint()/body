{
  DRLParser.field_constraint_return retval=new DRLParser.field_constraint_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token arw=null;
  DRLParser.label_return label228=null;
  DRLParser.accessor_path_return accessor_path229=null;
  DRLParser.or_restr_connective_return or_restr_connective230=null;
  DRLParser.paren_chunk_return paren_chunk231=null;
  DRLParser.accessor_path_return accessor_path232=null;
  DRLParser.or_restr_connective_return or_restr_connective233=null;
  Object arw_tree=null;
  RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
  RewriteRuleSubtreeStream stream_accessor_path=new RewriteRuleSubtreeStream(adaptor,"rule accessor_path");
  RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  RewriteRuleSubtreeStream stream_or_restr_connective=new RewriteRuleSubtreeStream(adaptor,"rule or_restr_connective");
  boolean isArrow=false;
  try {
    int alt85=2;
    int LA85_0=input.LA(1);
    if ((LA85_0 == ID)) {
      int LA85_1=input.LA(2);
      if (((LA85_1 >= ID && LA85_1 <= DOT) || LA85_1 == LEFT_PAREN || (LA85_1 >= EQUAL && LA85_1 <= NOT_EQUAL) || LA85_1 == LEFT_SQUARE)) {
        alt85=2;
      }
 else       if ((LA85_1 == COLON)) {
        alt85=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",85,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",85,0,input);
      throw nvae;
    }
switch (alt85) {
case 1:
{
        pushFollow(FOLLOW_label_in_field_constraint3892);
        label228=label();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_label.add(label228.getTree());
        pushFollow(FOLLOW_accessor_path_in_field_constraint3894);
        accessor_path229=accessor_path();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_accessor_path.add(accessor_path229.getTree());
        int alt84=3;
        int LA84_0=input.LA(1);
        if ((LA84_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
          alt84=1;
        }
 else         if ((LA84_0 == LEFT_PAREN || (LA84_0 >= EQUAL && LA84_0 <= NOT_EQUAL))) {
          alt84=1;
        }
 else         if ((LA84_0 == ARROW)) {
          alt84=2;
        }
switch (alt84) {
case 1:
{
            pushFollow(FOLLOW_or_restr_connective_in_field_constraint3901);
            or_restr_connective230=or_restr_connective();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_or_restr_connective.add(or_restr_connective230.getTree());
          }
        break;
case 2:
{
        arw=(Token)match(input,ARROW,FOLLOW_ARROW_in_field_constraint3907);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_ARROW.add(arw);
        if (state.backtracking == 0) {
          emit(arw,DroolsEditorType.SYMBOL);
        }
        pushFollow(FOLLOW_paren_chunk_in_field_constraint3911);
        paren_chunk231=paren_chunk();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_paren_chunk.add(paren_chunk231.getTree());
        if (state.backtracking == 0) {
          isArrow=true;
        }
      }
    break;
}
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
  if (isArrow) {
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD,"VT_BIND_FIELD"),root_1);
      adaptor.addChild(root_1,stream_label.nextTree());
{
        Object root_2=(Object)adaptor.nil();
        root_2=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD,"VT_FIELD"),root_2);
        adaptor.addChild(root_2,stream_accessor_path.nextTree());
        adaptor.addChild(root_1,root_2);
      }
      adaptor.addChild(root_0,root_1);
    }
    if (stream_paren_chunk.hasNext()) {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VK_EVAL,arw),root_1);
        adaptor.addChild(root_1,stream_paren_chunk.nextTree());
        adaptor.addChild(root_0,root_1);
      }
    }
    stream_paren_chunk.reset();
  }
 else {
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD,"VT_BIND_FIELD"),root_1);
      adaptor.addChild(root_1,stream_label.nextTree());
{
        Object root_2=(Object)adaptor.nil();
        root_2=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD,"VT_FIELD"),root_2);
        adaptor.addChild(root_2,stream_accessor_path.nextTree());
        if (stream_or_restr_connective.hasNext()) {
          adaptor.addChild(root_2,stream_or_restr_connective.nextTree());
        }
        stream_or_restr_connective.reset();
        adaptor.addChild(root_1,root_2);
      }
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
break;
case 2:
{
pushFollow(FOLLOW_accessor_path_in_field_constraint3965);
accessor_path232=accessor_path();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_accessor_path.add(accessor_path232.getTree());
pushFollow(FOLLOW_or_restr_connective_in_field_constraint3967);
or_restr_connective233=or_restr_connective();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_or_restr_connective.add(or_restr_connective233.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD,"VT_FIELD"),root_1);
  adaptor.addChild(root_1,stream_accessor_path.nextTree());
  adaptor.addChild(root_1,stream_or_restr_connective.nextTree());
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
