{
  DRLParser.field_constraint_return retval=new DRLParser.field_constraint_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token arw=null;
  DRLParser.label_return label223=null;
  DRLParser.accessor_path_return accessor_path224=null;
  DRLParser.or_restr_connective_return or_restr_connective225=null;
  DRLParser.paren_chunk_return paren_chunk226=null;
  DRLParser.accessor_path_return accessor_path227=null;
  DRLParser.or_restr_connective_return or_restr_connective228=null;
  Object arw_tree=null;
  RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  RewriteRuleSubtreeStream stream_or_restr_connective=new RewriteRuleSubtreeStream(adaptor,"rule or_restr_connective");
  RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
  RewriteRuleSubtreeStream stream_accessor_path=new RewriteRuleSubtreeStream(adaptor,"rule accessor_path");
  boolean isArrow=false;
  try {
    int alt74=2;
    int LA74_0=input.LA(1);
    if ((LA74_0 == ID)) {
      int LA74_1=input.LA(2);
      if (((LA74_1 >= ID && LA74_1 <= DOT) || LA74_1 == LEFT_PAREN || (LA74_1 >= EQUALS && LA74_1 <= LEFT_SQUARE))) {
        alt74=2;
      }
 else       if ((LA74_1 == COLON)) {
        alt74=1;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",74,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",74,0,input);
      throw nvae;
    }
switch (alt74) {
case 1:
{
        pushFollow(FOLLOW_label_in_field_constraint3982);
        label223=label();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_label.add(label223.getTree());
        pushFollow(FOLLOW_accessor_path_in_field_constraint3984);
        accessor_path224=accessor_path();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_accessor_path.add(accessor_path224.getTree());
        int alt73=3;
        int LA73_0=input.LA(1);
        if ((LA73_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
          alt73=1;
        }
 else         if ((LA73_0 == LEFT_PAREN || (LA73_0 >= EQUALS && LA73_0 <= NOT_EQUALS))) {
          alt73=1;
        }
 else         if ((LA73_0 == ARROW)) {
          alt73=2;
        }
switch (alt73) {
case 1:
{
            pushFollow(FOLLOW_or_restr_connective_in_field_constraint3991);
            or_restr_connective225=or_restr_connective();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_or_restr_connective.add(or_restr_connective225.getTree());
          }
        break;
case 2:
{
        arw=(Token)match(input,ARROW,FOLLOW_ARROW_in_field_constraint3997);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_ARROW.add(arw);
        if (state.backtracking == 0) {
          helper.emit(arw,DroolsEditorType.SYMBOL);
        }
        pushFollow(FOLLOW_paren_chunk_in_field_constraint4001);
        paren_chunk226=paren_chunk();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_paren_chunk.add(paren_chunk226.getTree());
        if (state.backtracking == 0) {
          isArrow=true;
        }
      }
    break;
}
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
  if (isArrow) {
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD,"VT_BIND_FIELD"),root_1);
      adaptor.addChild(root_1,stream_label.nextTree());
{
        Object root_2=(Object)adaptor.nil();
        root_2=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD,"VT_FIELD"),root_2);
        adaptor.addChild(root_2,stream_accessor_path.nextTree());
        adaptor.addChild(root_1,root_2);
      }
      adaptor.addChild(root_0,root_1);
    }
    if (stream_paren_chunk.hasNext()) {
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VK_EVAL,arw),root_1);
        adaptor.addChild(root_1,stream_paren_chunk.nextTree());
        adaptor.addChild(root_0,root_1);
      }
    }
    stream_paren_chunk.reset();
  }
 else {
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD,"VT_BIND_FIELD"),root_1);
      adaptor.addChild(root_1,stream_label.nextTree());
{
        Object root_2=(Object)adaptor.nil();
        root_2=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD,"VT_FIELD"),root_2);
        adaptor.addChild(root_2,stream_accessor_path.nextTree());
        if (stream_or_restr_connective.hasNext()) {
          adaptor.addChild(root_2,stream_or_restr_connective.nextTree());
        }
        stream_or_restr_connective.reset();
        adaptor.addChild(root_1,root_2);
      }
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
break;
case 2:
{
pushFollow(FOLLOW_accessor_path_in_field_constraint4055);
accessor_path227=accessor_path();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_accessor_path.add(accessor_path227.getTree());
pushFollow(FOLLOW_or_restr_connective_in_field_constraint4057);
or_restr_connective228=or_restr_connective();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_or_restr_connective.add(or_restr_connective228.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD,"VT_FIELD"),root_1);
  adaptor.addChild(root_1,stream_accessor_path.nextTree());
  adaptor.addChild(root_1,stream_or_restr_connective.nextTree());
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
