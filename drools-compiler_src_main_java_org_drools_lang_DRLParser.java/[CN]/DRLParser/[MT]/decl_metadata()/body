{
  DRLParser.decl_metadata_return retval=new DRLParser.decl_metadata_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AT50=null;
  Token ID51=null;
  DRLParser.paren_chunk_return paren_chunk52=null;
  Object AT50_tree=null;
  Object ID51_tree=null;
  RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      AT50=(Token)match(input,AT,FOLLOW_AT_in_decl_metadata1146);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_AT.add(AT50);
      if (state.backtracking == 0) {
        emit(AT50,DroolsEditorType.SYMBOL);
      }
      ID51=(Token)match(input,ID,FOLLOW_ID_in_decl_metadata1154);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(ID51);
      if (state.backtracking == 0) {
        emit(ID51,DroolsEditorType.IDENTIFIER);
      }
      int alt21=2;
      int LA21_0=input.LA(1);
      if ((LA21_0 == LEFT_PAREN)) {
        alt21=1;
      }
switch (alt21) {
case 1:
{
          pushFollow(FOLLOW_paren_chunk_in_decl_metadata1161);
          paren_chunk52=paren_chunk();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_paren_chunk.add(paren_chunk52.getTree());
        }
      break;
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_AT.nextNode(),root_1);
        adaptor.addChild(root_1,stream_ID.nextNode());
        if (stream_paren_chunk.hasNext()) {
          adaptor.addChild(root_1,stream_paren_chunk.nextTree());
        }
        stream_paren_chunk.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
