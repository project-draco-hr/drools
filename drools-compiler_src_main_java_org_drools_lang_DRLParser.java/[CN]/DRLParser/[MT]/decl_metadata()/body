{
  decl_metadata_return retval=new decl_metadata_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AT51=null;
  Token ID52=null;
  paren_chunk_return paren_chunk53=null;
  Object AT51_tree=null;
  Object ID52_tree=null;
  RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      AT51=(Token)input.LT(1);
      match(input,AT,FOLLOW_AT_in_decl_metadata1116);
      if (failed)       return retval;
      if (backtracking == 0)       stream_AT.add(AT51);
      ID52=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_decl_metadata1118);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID52);
      pushFollow(FOLLOW_paren_chunk_in_decl_metadata1120);
      paren_chunk53=paren_chunk();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_paren_chunk.add(paren_chunk53.getTree());
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
{
            Object root_1=(Object)adaptor.nil();
            root_1=(Object)adaptor.becomeRoot(stream_AT.next(),root_1);
            adaptor.addChild(root_1,stream_ID.next());
            adaptor.addChild(root_1,stream_paren_chunk.next());
            adaptor.addChild(root_0,root_1);
          }
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
