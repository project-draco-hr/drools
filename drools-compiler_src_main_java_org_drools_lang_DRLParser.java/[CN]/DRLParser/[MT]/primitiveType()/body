{
  DRLParser.primitiveType_return retval=new DRLParser.primitiveType_return();
  retval.start=input.LT(1);
  int primitiveType_StartIndex=input.index();
  Object root_0=null;
  DRLParser.boolean_key_return boolean_key539=null;
  DRLParser.char_key_return char_key540=null;
  DRLParser.byte_key_return byte_key541=null;
  DRLParser.short_key_return short_key542=null;
  DRLParser.int_key_return int_key543=null;
  DRLParser.long_key_return long_key544=null;
  DRLParser.float_key_return float_key545=null;
  DRLParser.double_key_return double_key546=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,152)) {
      return retval;
    }
    int alt168=8;
    alt168=dfa168.predict(input);
switch (alt168) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_boolean_key_in_primitiveType7518);
        boolean_key539=boolean_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,boolean_key539.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_char_key_in_primitiveType7526);
    char_key540=char_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,char_key540.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_byte_key_in_primitiveType7534);
byte_key541=byte_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,byte_key541.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_short_key_in_primitiveType7542);
short_key542=short_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,short_key542.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_int_key_in_primitiveType7550);
int_key543=int_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,int_key543.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_long_key_in_primitiveType7558);
long_key544=long_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,long_key544.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_float_key_in_primitiveType7566);
float_key545=float_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,float_key545.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_double_key_in_primitiveType7574);
double_key546=double_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,double_key546.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,152,primitiveType_StartIndex);
}
}
return retval;
}
