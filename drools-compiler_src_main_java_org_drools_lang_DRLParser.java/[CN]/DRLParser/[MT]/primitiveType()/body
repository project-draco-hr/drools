{
  DRLParser.primitiveType_return retval=new DRLParser.primitiveType_return();
  retval.start=input.LT(1);
  int primitiveType_StartIndex=input.index();
  Object root_0=null;
  DRLParser.boolean_key_return boolean_key426=null;
  DRLParser.char_key_return char_key427=null;
  DRLParser.byte_key_return byte_key428=null;
  DRLParser.short_key_return short_key429=null;
  DRLParser.int_key_return int_key430=null;
  DRLParser.long_key_return long_key431=null;
  DRLParser.float_key_return float_key432=null;
  DRLParser.double_key_return double_key433=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,134)) {
      return retval;
    }
    int alt139=8;
    alt139=dfa139.predict(input);
switch (alt139) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_boolean_key_in_primitiveType6800);
        boolean_key426=boolean_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,boolean_key426.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_char_key_in_primitiveType6808);
    char_key427=char_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,char_key427.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_byte_key_in_primitiveType6816);
byte_key428=byte_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,byte_key428.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_short_key_in_primitiveType6824);
short_key429=short_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,short_key429.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_int_key_in_primitiveType6832);
int_key430=int_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,int_key430.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_long_key_in_primitiveType6840);
long_key431=long_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,long_key431.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_float_key_in_primitiveType6848);
float_key432=float_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,float_key432.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_double_key_in_primitiveType6856);
double_key433=double_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,double_key433.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,134,primitiveType_StartIndex);
}
}
return retval;
}
