{
  function_import_statement_return retval=new function_import_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON21=null;
  import_key_return imp=null;
  function_key_return function_key19=null;
  import_name_return import_name20=null;
  Object SEMICOLON21_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
  RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
  RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
  pushParaphrases(DroolsParaphraseTypes.FUNCTION_IMPORT);
  try {
{
      if (backtracking == 0) {
        beginSentence(DroolsSentenceType.FUNCTION_IMPORT_STATEMENT);
      }
      pushFollow(FOLLOW_import_key_in_function_import_statement663);
      imp=import_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_import_key.add(imp.getTree());
      pushFollow(FOLLOW_function_key_in_function_import_statement665);
      function_key19=function_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_function_key.add(function_key19.getTree());
      pushFollow(FOLLOW_import_name_in_function_import_statement667);
      import_name20=import_name(DroolsParaphraseTypes.FUNCTION_IMPORT);
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_import_name.add(import_name20.getTree());
      int alt7=2;
      int LA7_0=input.LA(1);
      if ((LA7_0 == SEMICOLON)) {
        alt7=1;
      }
switch (alt7) {
case 1:
{
          SEMICOLON21=(Token)input.LT(1);
          match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_import_statement670);
          if (failed)           return retval;
          if (backtracking == 0)           stream_SEMICOLON.add(SEMICOLON21);
        }
      break;
  }
  if (backtracking == 0) {
    emit(SEMICOLON21,DroolsEditorType.SYMBOL);
  }
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_FUNCTION_IMPORT,((Token)imp.start)),root_1);
        adaptor.addChild(root_1,stream_function_key.next());
        adaptor.addChild(root_1,stream_import_name.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
  paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
