{
  DRLParser.equalityExpression_return retval=new DRLParser.equalityExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token set378=null;
  DRLParser.instanceOfExpression_return instanceOfExpression377=null;
  DRLParser.instanceOfExpression_return instanceOfExpression379=null;
  Object set378_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression6301);
      instanceOfExpression377=instanceOfExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,instanceOfExpression377.getTree());
      loop128:       do {
        int alt128=2;
        int LA128_0=input.LA(1);
        if ((LA128_0 == EQUALS || LA128_0 == NOT_EQUALS)) {
          alt128=1;
        }
switch (alt128) {
case 1:
{
            set378=(Token)input.LT(1);
            if (input.LA(1) == EQUALS || input.LA(1) == NOT_EQUALS) {
              input.consume();
              if (state.backtracking == 0)               adaptor.addChild(root_0,(Object)adaptor.create(set378));
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression6315);
            instanceOfExpression379=instanceOfExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,instanceOfExpression379.getTree());
          }
        break;
default :
      break loop128;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
