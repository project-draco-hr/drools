{
  DRLParser.variableDeclarators_return retval=new DRLParser.variableDeclarators_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA359=null;
  DRLParser.variableDeclarator_return variableDeclarator358=null;
  DRLParser.variableDeclarator_return variableDeclarator360=null;
  Object COMMA359_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators6102);
      variableDeclarator358=variableDeclarator();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,variableDeclarator358.getTree());
      loop125:       do {
        int alt125=2;
        int LA125_0=input.LA(1);
        if ((LA125_0 == COMMA)) {
          alt125=1;
        }
switch (alt125) {
case 1:
{
            COMMA359=(Token)match(input,COMMA,FOLLOW_COMMA_in_variableDeclarators6105);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA359_tree=(Object)adaptor.create(COMMA359);
              adaptor.addChild(root_0,COMMA359_tree);
            }
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators6107);
            variableDeclarator360=variableDeclarator();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,variableDeclarator360.getTree());
          }
        break;
default :
      break loop125;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
