{
  Token fb=null;
  Token f=null;
  Token con=null;
  RestrictionDescr rd=null;
  BaseDescr d=null;
  FieldConstraintDescr fc=null;
  try {
{
      int alt32=2;
      int LA32_0=input.LA(1);
      if ((LA32_0 == ID)) {
        int LA32_1=input.LA(2);
        if ((LA32_1 == 40)) {
          alt32=1;
        }
      }
switch (alt32) {
case 1:
{
          fb=(Token)input.LT(1);
          match(input,ID,FOLLOW_ID_in_constraint1926);
          match(input,40,FOLLOW_40_in_constraint1928);
        }
      break;
  }
  f=(Token)input.LT(1);
  match(input,ID,FOLLOW_ID_in_constraint1938);
  if (fb != null) {
    d=new FieldBindingDescr(f.getText(),fb.getText());
    d.setLocation(offset(f.getLine()),f.getCharPositionInLine());
    constraints.add(d);
  }
  fc=new FieldConstraintDescr(f.getText());
  fc.setLocation(offset(f.getLine()),f.getCharPositionInLine());
  int alt34=2;
  int LA34_0=input.LA(1);
  if (((LA34_0 >= 58 && LA34_0 <= 66))) {
    alt34=1;
  }
switch (alt34) {
case 1:
{
      pushFollow(FOLLOW_constraint_expression_in_constraint1954);
      rd=constraint_expression();
      _fsp--;
      fc.addRestriction(rd);
      constraints.add(fc);
      loop33:       do {
        int alt33=2;
        int LA33_0=input.LA(1);
        if (((LA33_0 >= 56 && LA33_0 <= 57))) {
          alt33=1;
        }
switch (alt33) {
case 1:
{
            con=(Token)input.LT(1);
            if ((input.LA(1) >= 56 && input.LA(1) <= 57)) {
              input.consume();
              errorRecovery=false;
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_constraint1973);
              throw mse;
            }
            if (con.getText().equals("&")) {
              fc.addRestriction(new RestrictionConnectiveDescr(RestrictionConnectiveDescr.AND));
            }
 else {
              fc.addRestriction(new RestrictionConnectiveDescr(RestrictionConnectiveDescr.OR));
            }
            pushFollow(FOLLOW_constraint_expression_in_constraint1990);
            rd=constraint_expression();
            _fsp--;
            fc.addRestriction(rd);
          }
        break;
default :
      break loop33;
  }
}
 while (true);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
