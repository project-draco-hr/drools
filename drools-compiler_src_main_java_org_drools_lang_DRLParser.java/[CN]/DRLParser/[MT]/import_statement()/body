{
  import_statement_return retval=new import_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON17=null;
  import_key_return import_key15=null;
  import_name_return import_name16=null;
  Object SEMICOLON17_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
  RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
  pushParaphrases(DroolsParaphareseTypes.IMPORT);
  try {
{
      pushFollow(FOLLOW_import_key_in_import_statement589);
      import_key15=import_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_import_key.add(import_key15.getTree());
      pushFollow(FOLLOW_import_name_in_import_statement591);
      import_name16=import_name(DroolsParaphareseTypes.IMPORT);
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_import_name.add(import_name16.getTree());
      int alt6=2;
      int LA6_0=input.LA(1);
      if ((LA6_0 == SEMICOLON)) {
        alt6=1;
      }
switch (alt6) {
case 1:
{
          SEMICOLON17=(Token)input.LT(1);
          match(input,SEMICOLON,FOLLOW_SEMICOLON_in_import_statement594);
          if (failed)           return retval;
          if (backtracking == 0)           stream_SEMICOLON.add(SEMICOLON17);
        }
      break;
  }
  if (backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_import_key.nextNode(),root_1);
        adaptor.addChild(root_1,stream_import_name.next());
        adaptor.addChild(root_0,root_1);
      }
    }
  }
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
  paraphrases.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
