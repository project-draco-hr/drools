{
  FactTemplateDescr t=null;
  RuleDescr r=null;
  QueryDescr q=null;
  try {
{
      int alt4=7;
switch (input.LA(1)) {
case 29:
        int LA4_1=input.LA(2);
      if ((LA4_1 == 30)) {
        alt4=2;
      }
 else       if ((LA4_1 == ID)) {
        alt4=1;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("302:2: ( import_statement | function_import_statement | global | function | t= template | r= rule | q= query )",4,1,input);
        throw nvae;
      }
    break;
case 33:
  alt4=3;
break;
case 30:
alt4=4;
break;
case 37:
alt4=5;
break;
case 38:
alt4=6;
break;
case 35:
alt4=7;
break;
default :
NoViableAltException nvae=new NoViableAltException("302:2: ( import_statement | function_import_statement | global | function | t= template | r= rule | q= query )",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_import_statement_in_statement107);
import_statement();
_fsp--;
}
break;
case 2:
{
pushFollow(FOLLOW_function_import_statement_in_statement118);
function_import_statement();
_fsp--;
}
break;
case 3:
{
pushFollow(FOLLOW_global_in_statement123);
global();
_fsp--;
}
break;
case 4:
{
pushFollow(FOLLOW_function_in_statement128);
function();
_fsp--;
}
break;
case 5:
{
pushFollow(FOLLOW_template_in_statement141);
t=template();
_fsp--;
this.packageDescr.addFactTemplate(t);
}
break;
case 6:
{
pushFollow(FOLLOW_rule_in_statement150);
r=rule();
_fsp--;
this.packageDescr.addRule(r);
}
break;
case 7:
{
pushFollow(FOLLOW_query_in_statement160);
q=query();
_fsp--;
this.packageDescr.addRule(q);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
