{
  DRLParser.statement_return retval=new DRLParser.statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.rule_attribute_return rule_attribute9=null;
  DRLParser.function_import_statement_return function_import_statement10=null;
  DRLParser.import_statement_return import_statement11=null;
  DRLParser.global_return global12=null;
  DRLParser.function_return function13=null;
  DRLParser.type_declaration_return type_declaration14=null;
  DRLParser.rule_return rule15=null;
  DRLParser.query_return query16=null;
  try {
    int alt4=8;
    alt4=dfa4.predict(input);
switch (alt4) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_rule_attribute_in_statement794);
        rule_attribute9=rule_attribute();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,rule_attribute9.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_function_import_statement_in_statement799);
    function_import_statement10=function_import_statement();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,function_import_statement10.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_import_statement_in_statement812);
import_statement11=import_statement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,import_statement11.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_global_in_statement818);
global12=global();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,global12.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_function_in_statement824);
function13=function();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,function13.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_type_declaration_in_statement829);
type_declaration14=type_declaration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,type_declaration14.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_rule_in_statement834);
rule15=rule();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,rule15.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_query_in_statement839);
query16=query();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,query16.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
