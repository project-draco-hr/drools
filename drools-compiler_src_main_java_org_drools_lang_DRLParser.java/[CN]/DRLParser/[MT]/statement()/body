{
  AttributeDescr a=null;
  FactTemplateDescr t=null;
  RuleDescr r=null;
  QueryDescr q=null;
  TypeDeclarationDescr d=null;
  try {
    int alt4=9;
switch (input.LA(1)) {
case DATE_EFFECTIVE:
case DATE_EXPIRES:
case ENABLED:
case SALIENCE:
case NO_LOOP:
case AUTO_FOCUS:
case ACTIVATION_GROUP:
case RULEFLOW_GROUP:
case AGENDA_GROUP:
case DURATION:
case DIALECT:
case LOCK_ON_ACTIVE:
{
        alt4=1;
      }
    break;
case IMPORT:
{
    int LA4_2=input.LA(2);
    if ((LA4_2 == FUNCTION)) {
      alt4=2;
    }
 else     if ((LA4_2 == ID)) {
      alt4=3;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("223:1: statement : (a= rule_attribute | function_import_statement | import_statement | global | function | t= template | r= rule | q= query | d= type_declaration );",4,2,input);
      throw nvae;
    }
  }
break;
case GLOBAL:
{
alt4=4;
}
break;
case FUNCTION:
{
alt4=5;
}
break;
case TEMPLATE:
{
alt4=6;
}
break;
case RULE:
{
alt4=7;
}
break;
case QUERY:
{
alt4=8;
}
break;
case DECLARE:
{
alt4=9;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("223:1: statement : (a= rule_attribute | function_import_statement | import_statement | global | function | t= template | r= rule | q= query | d= type_declaration );",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_rule_attribute_in_statement121);
a=rule_attribute();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addAttribute(a);
}
}
break;
case 2:
{
pushFollow(FOLLOW_function_import_statement_in_statement128);
function_import_statement();
_fsp--;
if (failed) return;
}
break;
case 3:
{
pushFollow(FOLLOW_import_statement_in_statement134);
import_statement();
_fsp--;
if (failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_global_in_statement140);
global();
_fsp--;
if (failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_function_in_statement146);
function();
_fsp--;
if (failed) return;
}
break;
case 6:
{
pushFollow(FOLLOW_template_in_statement160);
t=template();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addFactTemplate(t);
}
}
break;
case 7:
{
pushFollow(FOLLOW_rule_in_statement169);
r=rule();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addRule(r);
}
}
break;
case 8:
{
pushFollow(FOLLOW_query_in_statement181);
q=query();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addRule(q);
}
}
break;
case 9:
{
pushFollow(FOLLOW_type_declaration_in_statement196);
d=type_declaration();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addTypeDeclaration(d);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
