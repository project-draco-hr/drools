{
  FactTemplateDescr t=null;
  RuleDescr r=null;
  QueryDescr q=null;
  try {
{
      int alt4=7;
switch (input.LA(1)) {
case IMPORT:
{
          int LA4_1=input.LA(2);
          if ((synpred4())) {
            alt4=1;
          }
 else           if ((synpred5())) {
            alt4=2;
          }
 else {
            if (backtracking > 0) {
              failed=true;
              return;
            }
            NoViableAltException nvae=new NoViableAltException("189:2: ( function_import_statement | import_statement | global | function | t= template | r= rule | q= query )",4,1,input);
            throw nvae;
          }
        }
      break;
case GLOBAL:
{
      alt4=3;
    }
  break;
case FUNCTION:
{
  alt4=4;
}
break;
case TEMPLATE:
{
alt4=5;
}
break;
case RULE:
{
alt4=6;
}
break;
case QUERY:
{
alt4=7;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("189:2: ( function_import_statement | import_statement | global | function | t= template | r= rule | q= query )",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_function_import_statement_in_statement114);
function_import_statement();
_fsp--;
if (failed) return;
}
break;
case 2:
{
pushFollow(FOLLOW_import_statement_in_statement120);
import_statement();
_fsp--;
if (failed) return;
}
break;
case 3:
{
pushFollow(FOLLOW_global_in_statement126);
global();
_fsp--;
if (failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_function_in_statement132);
function();
_fsp--;
if (failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_template_in_statement146);
t=template();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addFactTemplate(t);
}
}
break;
case 6:
{
pushFollow(FOLLOW_rule_in_statement155);
r=rule();
_fsp--;
if (failed) return;
if (backtracking == 0) {
if (r != null) this.packageDescr.addRule(r);
}
}
break;
case 7:
{
pushFollow(FOLLOW_query_in_statement167);
q=query();
_fsp--;
if (failed) return;
if (backtracking == 0) {
if (q != null) this.packageDescr.addRule(q);
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
