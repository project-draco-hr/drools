{
  statement_return retval=new statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  rule_attribute_return rule_attribute7=null;
  function_import_statement_return function_import_statement8=null;
  import_statement_return import_statement9=null;
  global_return global10=null;
  function_return function11=null;
  template_return template12=null;
  type_declaration_return type_declaration13=null;
  rule_return rule14=null;
  query_return query15=null;
  try {
    int alt5=9;
    int LA5_0=input.LA(1);
    if ((LA5_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.QUERY)) || ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE))) || (validateIdentifierKey(DroolsSoftKeywords.DIALECT))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.FUNCTION))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.RULE))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.IMPORT))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))|| (validateIdentifierKey(DroolsSoftKeywords.GLOBAL))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))))) {
      int LA5_1=input.LA(2);
      if ((LA5_1 == MISC) && (((validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))))) {
        alt5=1;
      }
 else       if ((LA5_1 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.QUERY)) || ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE))) || ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.FUNCTION))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.RULE))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.IMPORT))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| (validateIdentifierKey(DroolsSoftKeywords.GLOBAL))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT)))))) {
        int LA5_3=input.LA(3);
        if ((((validateLT(1,"import") && validateLT(2,"function")) && (validateIdentifierKey(DroolsSoftKeywords.IMPORT))))) {
          alt5=2;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) {
          alt5=3;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) {
          alt5=4;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) {
          alt5=5;
        }
 else         if ((((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE))))) {
          alt5=6;
        }
 else         if ((((validateLT(1,DroolsSoftKeywords.DECLARE)) && (validateIdentifierKey(DroolsSoftKeywords.DECLARE))))) {
          alt5=7;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.RULE)))) {
          alt5=8;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.QUERY)))) {
          alt5=9;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("425:1: statement options {k=2; } : ( rule_attribute | {...}? => function_import_statement | import_statement | global | function | {...}? => template | {...}? => type_declaration | rule | query );",5,3,input);
          throw nvae;
        }
      }
 else       if ((LA5_1 == INT) && (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)) || (validateIdentifierKey(DroolsSoftKeywords.DURATION))))) {
        alt5=1;
      }
 else       if ((LA5_1 == STRING) && (((validateIdentifierKey(DroolsSoftKeywords.QUERY)) || ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE))) || ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.DIALECT))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| (validateIdentifierKey(DroolsSoftKeywords.RULE))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))|| ((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE)))))) {
        int LA5_5=input.LA(3);
        if (((validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) {
          alt5=1;
        }
 else         if ((((validateLT(1,DroolsSoftKeywords.TEMPLATE)) && (validateIdentifierKey(DroolsSoftKeywords.TEMPLATE))))) {
          alt5=6;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.RULE)))) {
          alt5=8;
        }
 else         if (((validateIdentifierKey(DroolsSoftKeywords.QUERY)))) {
          alt5=9;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("425:1: statement options {k=2; } : ( rule_attribute | {...}? => function_import_statement | import_statement | global | function | {...}? => template | {...}? => type_declaration | rule | query );",5,5,input);
          throw nvae;
        }
      }
 else       if ((LA5_1 == LEFT_PAREN) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
        alt5=1;
      }
 else       if ((LA5_1 == BOOL) && ((validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) {
        alt5=1;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("425:1: statement options {k=2; } : ( rule_attribute | {...}? => function_import_statement | import_statement | global | function | {...}? => template | {...}? => type_declaration | rule | query );",5,1,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("425:1: statement options {k=2; } : ( rule_attribute | {...}? => function_import_statement | import_statement | global | function | {...}? => template | {...}? => type_declaration | rule | query );",5,0,input);
      throw nvae;
    }
switch (alt5) {
case 1:
{
        root_0=(Object)adaptor.nil();
        if (backtracking == 0) {
          beginSentence(DroolsSentenceType.RULE_ATTRIBUTE);
        }
        pushFollow(FOLLOW_rule_attribute_in_statement541);
        rule_attribute7=rule_attribute();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,rule_attribute7.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    if (!((validateLT(1,"import") && validateLT(2,"function")))) {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      throw new FailedPredicateException(input,"statement","(validateLT(1, \"import\") && validateLT(2, \"function\") )");
    }
    pushFollow(FOLLOW_function_import_statement_in_statement548);
    function_import_statement8=function_import_statement();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,function_import_statement8.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_import_statement_in_statement554);
import_statement9=import_statement();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,import_statement9.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_global_in_statement560);
global10=global();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,global10.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_function_in_statement566);
function11=function();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,function11.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
if (!((validateLT(1,DroolsSoftKeywords.TEMPLATE)))) {
if (backtracking > 0) {
failed=true;
return retval;
}
throw new FailedPredicateException(input,"statement","(validateLT(1, DroolsSoftKeywords.TEMPLATE))");
}
pushFollow(FOLLOW_template_in_statement574);
template12=template();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,template12.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
if (!((validateLT(1,DroolsSoftKeywords.DECLARE)))) {
if (backtracking > 0) {
failed=true;
return retval;
}
throw new FailedPredicateException(input,"statement","(validateLT(1, DroolsSoftKeywords.DECLARE))");
}
pushFollow(FOLLOW_type_declaration_in_statement582);
type_declaration13=type_declaration();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,type_declaration13.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_rule_in_statement587);
rule14=rule();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,rule14.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_query_in_statement592);
query15=query();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,query15.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
