{
  FactTemplateDescr t=null;
  RuleDescr r=null;
  QueryDescr q=null;
  try {
    int alt8=7;
switch (input.LA(1)) {
case IMPORT:
{
        int LA8_1=input.LA(2);
        if ((LA8_1 == FUNCTION)) {
          alt8=1;
        }
 else         if ((LA8_1 == ID)) {
          alt8=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return;
          }
          NoViableAltException nvae=new NoViableAltException("219:1: statement : ( function_import_statement | import_statement | global | function | t= template | r= rule | q= query );",8,1,input);
          throw nvae;
        }
      }
    break;
case GLOBAL:
{
    alt8=3;
  }
break;
case FUNCTION:
{
alt8=4;
}
break;
case TEMPLATE:
{
alt8=5;
}
break;
case RULE:
{
alt8=6;
}
break;
case QUERY:
{
alt8=7;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("219:1: statement : ( function_import_statement | import_statement | global | function | t= template | r= rule | q= query );",8,0,input);
throw nvae;
}
switch (alt8) {
case 1:
{
pushFollow(FOLLOW_function_import_statement_in_statement205);
function_import_statement();
_fsp--;
if (failed) return;
}
break;
case 2:
{
pushFollow(FOLLOW_import_statement_in_statement211);
import_statement();
_fsp--;
if (failed) return;
}
break;
case 3:
{
pushFollow(FOLLOW_global_in_statement217);
global();
_fsp--;
if (failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_function_in_statement223);
function();
_fsp--;
if (failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_template_in_statement237);
t=template();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addFactTemplate(t);
}
}
break;
case 6:
{
pushFollow(FOLLOW_rule_in_statement246);
r=rule();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addRule(r);
}
}
break;
case 7:
{
pushFollow(FOLLOW_query_in_statement258);
q=query();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addRule(q);
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
