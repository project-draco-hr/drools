{
  FactTemplateDescr t=null;
  RuleDescr r=null;
  QueryDescr q=null;
  try {
{
      int alt4=7;
      alt4=dfa4.predict(input);
switch (alt4) {
case 1:
{
          pushFollow(FOLLOW_import_statement_in_statement114);
          import_statement();
          _fsp--;
          if (failed)           return;
        }
      break;
case 2:
{
      pushFollow(FOLLOW_function_import_statement_in_statement126);
      function_import_statement();
      _fsp--;
      if (failed)       return;
    }
  break;
case 3:
{
  pushFollow(FOLLOW_global_in_statement132);
  global();
  _fsp--;
  if (failed)   return;
}
break;
case 4:
{
pushFollow(FOLLOW_function_in_statement138);
function();
_fsp--;
if (failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_template_in_statement152);
t=template();
_fsp--;
if (failed) return;
if (backtracking == 0) {
this.packageDescr.addFactTemplate(t);
}
}
break;
case 6:
{
pushFollow(FOLLOW_rule_in_statement161);
r=rule();
_fsp--;
if (failed) return;
if (backtracking == 0) {
if (r != null) this.packageDescr.addRule(r);
}
}
break;
case 7:
{
pushFollow(FOLLOW_query_in_statement173);
q=query();
_fsp--;
if (failed) return;
if (backtracking == 0) {
if (q != null) this.packageDescr.addRule(q);
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
