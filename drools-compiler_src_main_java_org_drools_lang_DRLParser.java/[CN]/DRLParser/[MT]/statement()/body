{
  statement_return retval=new statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  rule_attribute_return rule_attribute7=null;
  function_import_statement_return function_import_statement8=null;
  import_statement_return import_statement9=null;
  global_return global10=null;
  function_return function11=null;
  template_return template12=null;
  rule_return rule13=null;
  query_return query14=null;
  try {
    int alt5=8;
    alt5=dfa5.predict(input);
switch (alt5) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_rule_attribute_in_statement527);
        rule_attribute7=rule_attribute();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,rule_attribute7.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    if (!((validateLT(1,"import") && validateLT(2,"function")))) {
      if (backtracking > 0) {
        failed=true;
        return retval;
      }
      throw new FailedPredicateException(input,"statement","(validateLT(1, \"import\") && validateLT(2, \"function\") )");
    }
    pushFollow(FOLLOW_function_import_statement_in_statement534);
    function_import_statement8=function_import_statement();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     adaptor.addChild(root_0,function_import_statement8.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_import_statement_in_statement540);
import_statement9=import_statement();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,import_statement9.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_global_in_statement546);
global10=global();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,global10.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_function_in_statement552);
function11=function();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,function11.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_template_in_statement557);
template12=template();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,template12.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_rule_in_statement562);
rule13=rule();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,rule13.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_query_in_statement567);
query14=query();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,query14.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
