{
  DRLParser.inclusiveOrExpression_return retval=new DRLParser.inclusiveOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PIPE497=null;
  DRLParser.exclusiveOrExpression_return exclusiveOrExpression496=null;
  DRLParser.exclusiveOrExpression_return exclusiveOrExpression498=null;
  Object PIPE497_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7032);
      exclusiveOrExpression496=exclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,exclusiveOrExpression496.getTree());
      loop156:       do {
        int alt156=2;
        int LA156_0=input.LA(1);
        if ((LA156_0 == PIPE)) {
          alt156=1;
        }
switch (alt156) {
case 1:
{
            PIPE497=(Token)match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression7036);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              PIPE497_tree=(Object)adaptor.create(PIPE497);
              adaptor.addChild(root_0,PIPE497_tree);
            }
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7038);
            exclusiveOrExpression498=exclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,exclusiveOrExpression498.getTree());
          }
        break;
default :
      break loop156;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
