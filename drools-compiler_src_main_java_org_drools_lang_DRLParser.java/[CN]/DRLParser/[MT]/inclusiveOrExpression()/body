{
  DRLParser.inclusiveOrExpression_return retval=new DRLParser.inclusiveOrExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PIPE369=null;
  DRLParser.exclusiveOrExpression_return exclusiveOrExpression368=null;
  DRLParser.exclusiveOrExpression_return exclusiveOrExpression370=null;
  Object PIPE369_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6226);
      exclusiveOrExpression368=exclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,exclusiveOrExpression368.getTree());
      loop125:       do {
        int alt125=2;
        int LA125_0=input.LA(1);
        if ((LA125_0 == PIPE)) {
          alt125=1;
        }
switch (alt125) {
case 1:
{
            PIPE369=(Token)match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression6230);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              PIPE369_tree=(Object)adaptor.create(PIPE369);
              adaptor.addChild(root_0,PIPE369_tree);
            }
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6232);
            exclusiveOrExpression370=exclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,exclusiveOrExpression370.getTree());
          }
        break;
default :
      break loop125;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
