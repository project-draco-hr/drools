{
  String op=null;
  Token t=null;
  Token n=null;
  try {
{
      int alt41=11;
switch (input.LA(1)) {
case 74:
{
          alt41=1;
        }
      break;
case 75:
{
      alt41=2;
    }
  break;
case 76:
{
  alt41=3;
}
break;
case 77:
{
alt41=4;
}
break;
case 78:
{
alt41=5;
}
break;
case 79:
{
alt41=6;
}
break;
case CONTAINS:
{
alt41=7;
}
break;
case MATCHES:
{
alt41=8;
}
break;
case EXCLUDES:
{
alt41=9;
}
break;
case MEMBEROF:
{
alt41=10;
}
break;
case NOT:
{
alt41=11;
}
break;
default :
if (backtracking > 0) {
failed=true;
return op;
}
NoViableAltException nvae=new NoViableAltException("1017:3: (t= '==' | t= '>' | t= '>=' | t= '<' | t= '<=' | t= '!=' | t= CONTAINS | t= MATCHES | t= EXCLUDES | t= MEMBEROF | n= NOT t= MEMBEROF )",41,0,input);
throw nvae;
}
switch (alt41) {
case 1:
{
t=(Token)input.LT(1);
match(input,74,FOLLOW_74_in_operator2709);
if (failed) return op;
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,75,FOLLOW_75_in_operator2717);
if (failed) return op;
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,76,FOLLOW_76_in_operator2725);
if (failed) return op;
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,77,FOLLOW_77_in_operator2733);
if (failed) return op;
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,78,FOLLOW_78_in_operator2741);
if (failed) return op;
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,79,FOLLOW_79_in_operator2749);
if (failed) return op;
}
break;
case 7:
{
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_operator2757);
if (failed) return op;
}
break;
case 8:
{
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_operator2765);
if (failed) return op;
}
break;
case 9:
{
t=(Token)input.LT(1);
match(input,EXCLUDES,FOLLOW_EXCLUDES_in_operator2773);
if (failed) return op;
}
break;
case 10:
{
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_operator2781);
if (failed) return op;
}
break;
case 11:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_operator2789);
if (failed) return op;
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_operator2793);
if (failed) return op;
}
break;
}
if (backtracking == 0) {
if (n != null) {
op="not " + t.getText();
}
 else {
op=t.getText();
}
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return op;
}
