{
  DRLParser.arguments_as_string_return retval=new DRLParser.arguments_as_string_return();
  retval.start=input.LT(1);
  int arguments_as_string_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_PAREN170=null;
  Token COMMA172=null;
  Token RIGHT_PAREN174=null;
  DRLParser.expression_as_string_return expression_as_string171=null;
  DRLParser.expression_as_string_return expression_as_string173=null;
  Object LEFT_PAREN170_tree=null;
  Object COMMA172_tree=null;
  Object RIGHT_PAREN174_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_expression_as_string=new RewriteRuleSubtreeStream(adaptor,"rule expression_as_string");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,52)) {
      return retval;
    }
{
      LEFT_PAREN170=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments_as_string2976);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN170);
      int alt52=2;
      int LA52_0=input.LA(1);
      if ((LA52_0 == ID || LA52_0 == STRING || (LA52_0 >= BOOL && LA52_0 <= LEFT_PAREN) || LA52_0 == DECIMAL || LA52_0 == LESS || LA52_0 == LEFT_SQUARE || (LA52_0 >= NULL && LA52_0 <= FLOAT) || (LA52_0 >= INCR && LA52_0 <= NEGATION))) {
        alt52=1;
      }
switch (alt52) {
case 1:
{
          pushFollow(FOLLOW_expression_as_string_in_arguments_as_string2979);
          expression_as_string171=expression_as_string();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_expression_as_string.add(expression_as_string171.getTree());
          loop51:           do {
            int alt51=2;
            int LA51_0=input.LA(1);
            if ((LA51_0 == COMMA)) {
              alt51=1;
            }
switch (alt51) {
case 1:
{
                COMMA172=(Token)match(input,COMMA,FOLLOW_COMMA_in_arguments_as_string2982);
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_COMMA.add(COMMA172);
                pushFollow(FOLLOW_expression_as_string_in_arguments_as_string2984);
                expression_as_string173=expression_as_string();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_expression_as_string.add(expression_as_string173.getTree());
              }
            break;
default :
          break loop51;
      }
    }
 while (true);
  }
break;
}
RIGHT_PAREN174=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments_as_string2990);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN174);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_ARGUMENTS,"VT_ARGUMENTS"),root_1);
  while (stream_expression_as_string.hasNext()) {
    adaptor.addChild(root_1,stream_expression_as_string.nextTree());
  }
  stream_expression_as_string.reset();
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,52,arguments_as_string_StartIndex);
}
}
return retval;
}
