{
  square_chunk_data_return retval=new square_chunk_data_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE280=null;
  Token set281=null;
  Token RIGHT_SQUARE283=null;
  square_chunk_data_return square_chunk_data282=null;
  Object LEFT_SQUARE280_tree=null;
  Object set281_tree=null;
  Object RIGHT_SQUARE283_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE280=(Token)input.LT(1);
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_square_chunk_data3710);
      if (failed)       return retval;
      if (backtracking == 0) {
        LEFT_SQUARE280_tree=(Object)adaptor.create(LEFT_SQUARE280);
        adaptor.addChild(root_0,LEFT_SQUARE280_tree);
      }
      loop92:       do {
        int alt92=3;
        int LA92_0=input.LA(1);
        if (((LA92_0 >= VT_COMPILATION_UNIT && LA92_0 <= NULL) || (LA92_0 >= THEN && LA92_0 <= MULTI_LINE_COMMENT))) {
          alt92=1;
        }
 else         if ((LA92_0 == LEFT_SQUARE)) {
          alt92=2;
        }
switch (alt92) {
case 1:
{
            set281=(Token)input.LT(1);
            if ((input.LA(1) >= VT_COMPILATION_UNIT && input.LA(1) <= NULL) || (input.LA(1) >= THEN && input.LA(1) <= MULTI_LINE_COMMENT)) {
              input.consume();
              if (backtracking == 0)               adaptor.addChild(root_0,adaptor.create(set281));
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_square_chunk_data3713);
              throw mse;
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_square_chunk_data_in_square_chunk_data3727);
        square_chunk_data282=square_chunk_data();
        _fsp--;
        if (failed)         return retval;
        if (backtracking == 0)         adaptor.addChild(root_0,square_chunk_data282.getTree());
      }
    break;
default :
  break loop92;
}
}
 while (true);
RIGHT_SQUARE283=(Token)input.LT(1);
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_square_chunk_data3732);
if (failed) return retval;
if (backtracking == 0) {
RIGHT_SQUARE283_tree=(Object)adaptor.create(RIGHT_SQUARE283);
adaptor.addChild(root_0,RIGHT_SQUARE283_tree);
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
