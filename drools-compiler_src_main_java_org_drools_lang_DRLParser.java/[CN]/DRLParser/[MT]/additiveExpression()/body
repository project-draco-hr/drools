{
  DRLParser.additiveExpression_return retval=new DRLParser.additiveExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token set520=null;
  DRLParser.multiplicativeExpression_return multiplicativeExpression519=null;
  DRLParser.multiplicativeExpression_return multiplicativeExpression521=null;
  Object set520_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression7283);
      multiplicativeExpression519=multiplicativeExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,multiplicativeExpression519.getTree());
      loop163:       do {
        int alt163=2;
        alt163=dfa163.predict(input);
switch (alt163) {
case 1:
{
            set520=(Token)input.LT(1);
            if ((input.LA(1) >= PLUS && input.LA(1) <= MINUS)) {
              input.consume();
              if (state.backtracking == 0)               adaptor.addChild(root_0,(Object)adaptor.create(set520));
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression7302);
            multiplicativeExpression521=multiplicativeExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,multiplicativeExpression521.getTree());
          }
        break;
default :
      break loop163;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
