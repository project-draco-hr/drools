{
  AttributeDescr attr=null;
  try {
{
      int alt26=2;
      int LA26_0=input.LA(1);
      if ((LA26_0 == ATTRIBUTES)) {
        alt26=1;
      }
switch (alt26) {
case 1:
{
          match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_rule_attributes1055);
          if (failed)           return;
          match(input,71,FOLLOW_71_in_rule_attributes1057);
          if (failed)           return;
        }
      break;
  }
  pushFollow(FOLLOW_rule_attribute_in_rule_attributes1065);
  attr=rule_attribute();
  _fsp--;
  if (failed)   return;
  if (backtracking == 0) {
    rule.addAttribute(attr);
  }
  loop28:   do {
    int alt28=2;
    int LA28_0=input.LA(1);
    if ((LA28_0 == COMMA || LA28_0 == DATE_EFFECTIVE || (LA28_0 >= DATE_EXPIRES && LA28_0 <= ENABLED) || LA28_0 == SALIENCE || (LA28_0 >= NO_LOOP && LA28_0 <= LOCK_ON_ACTIVE))) {
      alt28=1;
    }
switch (alt28) {
case 1:
{
        int alt27=2;
        int LA27_0=input.LA(1);
        if ((LA27_0 == COMMA)) {
          alt27=1;
        }
switch (alt27) {
case 1:
{
            match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1072);
            if (failed)             return;
          }
        break;
    }
    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1077);
    attr=rule_attribute();
    _fsp--;
    if (failed)     return;
    if (backtracking == 0) {
      rule.addAttribute(attr);
    }
  }
break;
default :
break loop28;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
