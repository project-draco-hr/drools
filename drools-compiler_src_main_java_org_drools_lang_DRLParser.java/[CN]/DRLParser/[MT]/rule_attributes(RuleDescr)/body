{
  AttributeDescr attr=null;
  try {
{
      int alt24=2;
      int LA24_0=input.LA(1);
      if ((LA24_0 == ATTRIBUTES)) {
        alt24=1;
      }
switch (alt24) {
case 1:
{
          match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_rule_attributes1070);
          if (failed)           return;
          match(input,71,FOLLOW_71_in_rule_attributes1072);
          if (failed)           return;
        }
      break;
  }
  pushFollow(FOLLOW_rule_attribute_in_rule_attributes1080);
  attr=rule_attribute();
  _fsp--;
  if (failed)   return;
  if (backtracking == 0) {
    rule.addAttribute(attr);
  }
  loop26:   do {
    int alt26=2;
    int LA26_0=input.LA(1);
    if ((LA26_0 == COMMA || LA26_0 == DATE_EFFECTIVE || (LA26_0 >= DATE_EXPIRES && LA26_0 <= ENABLED) || LA26_0 == SALIENCE || (LA26_0 >= NO_LOOP && LA26_0 <= LOCK_ON_ACTIVE))) {
      alt26=1;
    }
switch (alt26) {
case 1:
{
        int alt25=2;
        int LA25_0=input.LA(1);
        if ((LA25_0 == COMMA)) {
          alt25=1;
        }
switch (alt25) {
case 1:
{
            match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1087);
            if (failed)             return;
          }
        break;
    }
    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1092);
    attr=rule_attribute();
    _fsp--;
    if (failed)     return;
    if (backtracking == 0) {
      rule.addAttribute(attr);
    }
  }
break;
default :
break loop26;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
