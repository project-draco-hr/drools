{
  DRLParser.for_functions_return retval=new DRLParser.for_functions_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA165=null;
  DRLParser.for_function_return for_function164=null;
  DRLParser.for_function_return for_function166=null;
  Object COMMA165_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_for_function=new RewriteRuleSubtreeStream(adaptor,"rule for_function");
  try {
{
      pushFollow(FOLLOW_for_function_in_for_functions2897);
      for_function164=for_function();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_for_function.add(for_function164.getTree());
      loop50:       do {
        int alt50=2;
        int LA50_0=input.LA(1);
        if ((LA50_0 == COMMA)) {
          alt50=1;
        }
switch (alt50) {
case 1:
{
            COMMA165=(Token)match(input,COMMA,FOLLOW_COMMA_in_for_functions2901);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_COMMA.add(COMMA165);
            pushFollow(FOLLOW_for_function_in_for_functions2903);
            for_function166=for_function();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_for_function.add(for_function166.getTree());
          }
        break;
default :
      break loop50;
  }
}
 while (true);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
{
      Object root_1=(Object)adaptor.nil();
      root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FOR_FUNCTIONS,"VT_FOR_FUNCTIONS"),root_1);
      if (!(stream_for_function.hasNext())) {
        throw new RewriteEarlyExitException();
      }
      while (stream_for_function.hasNext()) {
        adaptor.addChild(root_1,stream_for_function.nextTree());
      }
      stream_for_function.reset();
      adaptor.addChild(root_0,root_1);
    }
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
