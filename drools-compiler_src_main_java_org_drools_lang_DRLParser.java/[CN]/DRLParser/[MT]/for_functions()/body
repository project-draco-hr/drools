{
  DRLParser.for_functions_return retval=new DRLParser.for_functions_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA171=null;
  DRLParser.for_function_return for_function170=null;
  DRLParser.for_function_return for_function172=null;
  Object COMMA171_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_for_function_in_for_functions2936);
      for_function170=for_function();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,for_function170.getTree());
      loop52:       do {
        int alt52=2;
        int LA52_0=input.LA(1);
        if ((LA52_0 == COMMA)) {
          alt52=1;
        }
switch (alt52) {
case 1:
{
            COMMA171=(Token)match(input,COMMA,FOLLOW_COMMA_in_for_functions2939);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA171_tree=(Object)adaptor.create(COMMA171);
              adaptor.addChild(root_0,COMMA171_tree);
            }
            pushFollow(FOLLOW_for_function_in_for_functions2941);
            for_function172=for_function();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,for_function172.getTree());
          }
        break;
default :
      break loop52;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
