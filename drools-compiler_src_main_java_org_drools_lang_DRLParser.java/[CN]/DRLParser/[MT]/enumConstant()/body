{
  DRLParser.enumConstant_return retval=new DRLParser.enumConstant_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID849=null;
  DRLParser.annotations_return annotations848=null;
  DRLParser.arguments_return arguments850=null;
  DRLParser.classBody_return classBody851=null;
  Object ID849_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt250=2;
      int LA250_0=input.LA(1);
      if ((LA250_0 == AT)) {
        alt250=1;
      }
switch (alt250) {
case 1:
{
          pushFollow(FOLLOW_annotations_in_enumConstant9872);
          annotations848=annotations();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,annotations848.getTree());
        }
      break;
  }
  ID849=(Token)match(input,ID,FOLLOW_ID_in_enumConstant9875);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    ID849_tree=(Object)adaptor.create(ID849);
    adaptor.addChild(root_0,ID849_tree);
  }
  int alt251=2;
  int LA251_0=input.LA(1);
  if ((LA251_0 == LEFT_PAREN)) {
    alt251=1;
  }
switch (alt251) {
case 1:
{
      pushFollow(FOLLOW_arguments_in_enumConstant9878);
      arguments850=arguments();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,arguments850.getTree());
    }
  break;
}
int alt252=2;
int LA252_0=input.LA(1);
if ((LA252_0 == LEFT_CURLY)) {
alt252=1;
}
switch (alt252) {
case 1:
{
  pushFollow(FOLLOW_classBody_in_enumConstant9883);
  classBody851=classBody();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,classBody851.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
