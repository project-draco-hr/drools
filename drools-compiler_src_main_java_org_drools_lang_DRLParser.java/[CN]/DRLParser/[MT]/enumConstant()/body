{
  DRLParser.enumConstant_return retval=new DRLParser.enumConstant_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID834=null;
  DRLParser.annotations_return annotations833=null;
  DRLParser.arguments_return arguments835=null;
  DRLParser.classBody_return classBody836=null;
  Object ID834_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt248=2;
      int LA248_0=input.LA(1);
      if ((LA248_0 == AT)) {
        alt248=1;
      }
switch (alt248) {
case 1:
{
          pushFollow(FOLLOW_annotations_in_enumConstant9769);
          annotations833=annotations();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,annotations833.getTree());
        }
      break;
  }
  ID834=(Token)match(input,ID,FOLLOW_ID_in_enumConstant9772);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    ID834_tree=(Object)adaptor.create(ID834);
    adaptor.addChild(root_0,ID834_tree);
  }
  int alt249=2;
  int LA249_0=input.LA(1);
  if ((LA249_0 == LEFT_PAREN)) {
    alt249=1;
  }
switch (alt249) {
case 1:
{
      pushFollow(FOLLOW_arguments_in_enumConstant9775);
      arguments835=arguments();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,arguments835.getTree());
    }
  break;
}
int alt250=2;
int LA250_0=input.LA(1);
if ((LA250_0 == LEFT_CURLY)) {
alt250=1;
}
switch (alt250) {
case 1:
{
  pushFollow(FOLLOW_classBody_in_enumConstant9780);
  classBody836=classBody();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,classBody836.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
