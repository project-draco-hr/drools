{
  DRLParser.classDeclaration_return retval=new DRLParser.classDeclaration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.normalClassDeclaration_return normalClassDeclaration687=null;
  DRLParser.enumDeclaration_return enumDeclaration688=null;
  try {
    int alt206=2;
    int LA206_0=input.LA(1);
    if ((LA206_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {
      int LA206_1=input.LA(2);
      if ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))) {
        alt206=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))) {
        alt206=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",206,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",206,0,input);
      throw nvae;
    }
switch (alt206) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration8750);
        normalClassDeclaration687=normalClassDeclaration();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,normalClassDeclaration687.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration8760);
    enumDeclaration688=enumDeclaration();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,enumDeclaration688.getTree());
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
