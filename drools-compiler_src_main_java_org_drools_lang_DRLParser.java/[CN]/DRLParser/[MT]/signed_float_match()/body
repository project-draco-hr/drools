{
  DRLParser.signed_float_match_return retval=new DRLParser.signed_float_match_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token PLUS281=null;
  Token MINUS282=null;
  Token FLOAT283=null;
  Object PLUS281_tree=null;
  Object MINUS282_tree=null;
  Object FLOAT283_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt89=3;
      int LA89_0=input.LA(1);
      if ((LA89_0 == PLUS)) {
        alt89=1;
      }
 else       if ((LA89_0 == MINUS)) {
        alt89=2;
      }
switch (alt89) {
case 1:
{
          PLUS281=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_float_match4938);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            PLUS281_tree=(Object)adaptor.create(PLUS281);
            adaptor.addChild(root_0,PLUS281_tree);
          }
          if (state.backtracking == 0) {
            helper.emit(PLUS281,DroolsEditorType.NUMERIC_CONST);
          }
        }
      break;
case 2:
{
      MINUS282=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_float_match4944);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        MINUS282_tree=(Object)adaptor.create(MINUS282);
        adaptor.addChild(root_0,MINUS282_tree);
      }
      if (state.backtracking == 0) {
        helper.emit(MINUS282,DroolsEditorType.NUMERIC_CONST);
      }
    }
  break;
}
FLOAT283=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_signed_float_match4966);
if (state.failed) return retval;
if (state.backtracking == 0) {
FLOAT283_tree=(Object)adaptor.create(FLOAT283);
adaptor.addChild(root_0,FLOAT283_tree);
}
if (state.backtracking == 0) {
helper.emit(FLOAT283,DroolsEditorType.NUMERIC_CONST);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
