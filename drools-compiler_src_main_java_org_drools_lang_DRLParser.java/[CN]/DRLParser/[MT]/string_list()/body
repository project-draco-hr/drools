{
  DRLParser.string_list_return retval=new DRLParser.string_list_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token first=null;
  Token next=null;
  Token COMMA323=null;
  Object first_tree=null;
  Object next_tree=null;
  Object COMMA323_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
  StringBuilder buf=new StringBuilder();
  try {
{
      first=(Token)match(input,STRING,FOLLOW_STRING_in_string_list5539);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_STRING.add(first);
      if (state.backtracking == 0) {
        buf.append("[ " + (first != null ? first.getText() : null));
      }
      loop113:       do {
        int alt113=2;
        int LA113_0=input.LA(1);
        if ((LA113_0 == COMMA)) {
          int LA113_2=input.LA(2);
          if ((LA113_2 == STRING)) {
            alt113=1;
          }
        }
switch (alt113) {
case 1:
{
            COMMA323=(Token)match(input,COMMA,FOLLOW_COMMA_in_string_list5548);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_COMMA.add(COMMA323);
            next=(Token)match(input,STRING,FOLLOW_STRING_in_string_list5552);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_STRING.add(next);
            if (state.backtracking == 0) {
              buf.append(", " + (next != null ? next.getText() : null));
            }
          }
        break;
default :
      break loop113;
  }
}
 while (true);
if (state.backtracking == 0) {
  retval.tree=root_0;
  RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
  root_0=(Object)adaptor.nil();
{
    adaptor.addChild(root_0,(Object)adaptor.create(STRING,first,buf.toString() + " ]"));
  }
  retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
