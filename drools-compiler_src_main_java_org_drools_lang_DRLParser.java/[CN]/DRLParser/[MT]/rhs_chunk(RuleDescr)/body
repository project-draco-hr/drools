{
  Token loc=null;
  Token THEN56=null;
  try {
{
      THEN56=(Token)input.LT(1);
      match(input,THEN,FOLLOW_THEN_in_rhs_chunk4958);
      if (failed)       return;
      if (backtracking == 0) {
        location.setType(Location.LOCATION_RHS);
      }
      loop83:       do {
        int alt83=2;
        int LA83_0=input.LA(1);
        if (((LA83_0 >= PACKAGE && LA83_0 <= QUERY) || (LA83_0 >= TEMPLATE && LA83_0 <= 84))) {
          alt83=1;
        }
switch (alt83) {
case 1:
{
            if ((input.LA(1) >= PACKAGE && input.LA(1) <= QUERY) || (input.LA(1) >= TEMPLATE && input.LA(1) <= 84)) {
              input.consume();
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_rhs_chunk4966);
              throw mse;
            }
          }
        break;
default :
      break loop83;
  }
}
 while (true);
loc=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_rhs_chunk4990);
if (failed) return;
pushFollow(FOLLOW_opt_semicolon_in_rhs_chunk4992);
opt_semicolon();
_fsp--;
if (failed) return;
if (backtracking == 0) {
  String buf=input.toString(THEN56,loc);
  int idx=4;
  while (idx < buf.length() - 3 && (buf.charAt(idx) == ' ' || buf.charAt(idx) == '\t')) {
    idx++;
  }
  if (idx < buf.length() - 3 && buf.charAt(idx) == '\r')   idx++;
  if (idx < buf.length() - 3 && buf.charAt(idx) == '\n')   idx++;
  buf=safeSubstring(buf,idx,buf.length() - 3);
  rule.setConsequence(buf);
  rule.setConsequenceLocation(offset(THEN56.getLine()),THEN56.getCharPositionInLine());
  rule.setEndCharacter(((CommonToken)loc).getStopIndex());
  location.setProperty(Location.LOCATION_RHS_CONTENT,rule.getConsequence());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
