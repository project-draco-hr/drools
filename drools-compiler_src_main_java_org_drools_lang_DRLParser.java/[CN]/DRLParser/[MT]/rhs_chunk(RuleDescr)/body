{
  Token start=null;
  Token loc=null;
  StringBuffer buf=null;
  Integer channel=null;
  try {
{
      if (backtracking == 0) {
        channel=((SwitchingCommonTokenStream)input).getTokenTypeChannel(WS);
        ((SwitchingCommonTokenStream)input).setTokenTypeChannel(WS,Token.DEFAULT_CHANNEL);
        buf=new StringBuffer();
      }
      start=(Token)input.LT(1);
      match(input,THEN,FOLLOW_THEN_in_rhs_chunk4748);
      if (failed)       return;
      if (backtracking == 0) {
        location.setType(Location.LOCATION_RHS);
      }
      loop67:       do {
        int alt67=2;
        int LA67_0=input.LA(1);
        if (((LA67_0 >= ATTRIBUTES && LA67_0 <= QUERY) || (LA67_0 >= TEMPLATE && LA67_0 <= 79))) {
          alt67=1;
        }
switch (alt67) {
case 1:
{
            if ((input.LA(1) >= ATTRIBUTES && input.LA(1) <= QUERY) || (input.LA(1) >= TEMPLATE && input.LA(1) <= 79)) {
              input.consume();
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_rhs_chunk4764);
              throw mse;
            }
            if (backtracking == 0) {
              buf.append(input.LT(-1).getText());
            }
          }
        break;
default :
      break loop67;
  }
}
 while (true);
if (backtracking == 0) {
  if (channel != null) {
    ((SwitchingCommonTokenStream)input).setTokenTypeChannel(WS,channel.intValue());
  }
 else {
    ((SwitchingCommonTokenStream)input).setTokenTypeChannel(WS,Token.HIDDEN_CHANNEL);
  }
}
loc=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_rhs_chunk4801);
if (failed) return;
if (backtracking == 0) {
  int index=0;
  while ((index < buf.length()) && Character.isWhitespace(buf.charAt(index)) && (buf.charAt(index) != 10)&& (buf.charAt(index) != 13))   index++;
  if ((index < buf.length()) && (buf.charAt(index) == '\r'))   index++;
  if ((index < buf.length()) && (buf.charAt(index) == '\n'))   index++;
  rule.setConsequence(buf.substring(index));
  rule.setConsequenceLocation(offset(start.getLine()),start.getCharPositionInLine());
  rule.setEndCharacter(((CommonToken)loc).getStopIndex());
  location.setProperty(Location.LOCATION_RHS_CONTENT,rule.getConsequence());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
