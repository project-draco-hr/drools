{
  Token start=null;
  Token loc=null;
  StringBuffer buf=null;
  Integer channel=null;
  try {
{
      if (this.backtracking == 0) {
        channel=((SwitchingCommonTokenStream)this.input).getTokenTypeChannel(WS);
        ((SwitchingCommonTokenStream)this.input).setTokenTypeChannel(WS,Token.DEFAULT_CHANNEL);
        buf=new StringBuffer();
      }
      start=(Token)this.input.LT(1);
      match(this.input,THEN,FOLLOW_THEN_in_rhs_chunk4151);
      if (this.failed) {
        return;
      }
      loop55:       do {
        int alt55=2;
        final int LA55_0=this.input.LA(1);
        if (((LA55_0 >= PACKAGE && LA55_0 <= QUERY) || (LA55_0 >= TEMPLATE && LA55_0 <= 78))) {
          alt55=1;
        }
switch (alt55) {
case 1:
{
            if ((this.input.LA(1) >= PACKAGE && this.input.LA(1) <= QUERY) || (this.input.LA(1) >= TEMPLATE && this.input.LA(1) <= 78)) {
              this.input.consume();
              this.errorRecovery=false;
              this.failed=false;
            }
 else {
              if (this.backtracking > 0) {
                this.failed=true;
                return;
              }
              final MismatchedSetException mse=new MismatchedSetException(null,this.input);
              recoverFromMismatchedSet(this.input,mse,FOLLOW_set_in_rhs_chunk4163);
              throw mse;
            }
            if (this.backtracking == 0) {
              buf.append(this.input.LT(-1).getText());
            }
          }
        break;
default :
      break loop55;
  }
}
 while (true);
if (this.backtracking == 0) {
  if (channel != null) {
    ((SwitchingCommonTokenStream)this.input).setTokenTypeChannel(WS,channel.intValue());
  }
 else {
    ((SwitchingCommonTokenStream)this.input).setTokenTypeChannel(WS,Token.HIDDEN_CHANNEL);
  }
}
loc=(Token)this.input.LT(1);
match(this.input,END,FOLLOW_END_in_rhs_chunk4200);
if (this.failed) {
  return;
}
if (this.backtracking == 0) {
  int index=0;
  while ((index < buf.length()) && Character.isWhitespace(buf.charAt(index)) && (buf.charAt(index) != 10)&& (buf.charAt(index) != 13)) {
    index++;
  }
  if ((index < buf.length()) && (buf.charAt(index) == '\r')) {
    index++;
  }
  if ((index < buf.length()) && (buf.charAt(index) == '\n')) {
    index++;
  }
  rule.setConsequence(buf.substring(index));
  rule.setConsequenceLocation(offset(start.getLine()),start.getCharPositionInLine());
  rule.setEndCharacter(((CommonToken)loc).getStopIndex());
}
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return;
}
