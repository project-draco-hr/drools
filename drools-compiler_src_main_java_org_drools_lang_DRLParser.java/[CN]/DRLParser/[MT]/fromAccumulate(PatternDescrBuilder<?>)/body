{
  AccumulateDescrBuilder<?> accumulate=helper.start(pattern,AccumulateDescrBuilder.class,null);
  try {
    match(input,DRLLexer.ID,DroolsSoftKeywords.ACCUMULATE,null,DroolsEditorType.KEYWORD);
    if (state.failed)     return;
    if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
      helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE);
    }
    match(input,DRLLexer.LEFT_PAREN,null,null,DroolsEditorType.SYMBOL);
    if (state.failed)     return;
    CEDescrBuilder<?,AndDescr> source=accumulate.source();
    try {
      helper.start(source,CEDescrBuilder.class,null);
      lhsAnd(source,false);
      if (state.failed)       return;
      if (source.getDescr() != null && source.getDescr() instanceof ConditionalElementDescr) {
        ConditionalElementDescr root=(ConditionalElementDescr)source.getDescr();
        BaseDescr[] descrs=root.getDescrs().toArray(new BaseDescr[root.getDescrs().size()]);
        root.getDescrs().clear();
        for (int i=0; i < descrs.length; i++) {
          root.addOrMerge(descrs[i]);
        }
      }
    }
  finally {
      helper.end(CEDescrBuilder.class,source);
    }
    if (input.LA(1) == DRLLexer.COMMA) {
      match(input,DRLLexer.COMMA,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return;
    }
    if (helper.validateIdentifierKey(DroolsSoftKeywords.INIT)) {
      match(input,DRLLexer.ID,DroolsSoftKeywords.INIT,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return;
      if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
        helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);
      }
      String init=chunk(DRLLexer.LEFT_PAREN,DRLLexer.RIGHT_PAREN,Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE);
      if (state.failed)       return;
      if (state.backtracking == 0)       accumulate.init(init);
      if (input.LA(1) == DRLLexer.COMMA) {
        match(input,DRLLexer.COMMA,null,null,DroolsEditorType.SYMBOL);
        if (state.failed)         return;
      }
      match(input,DRLLexer.ID,DroolsSoftKeywords.ACTION,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return;
      if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
        helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);
      }
      String action=chunk(DRLLexer.LEFT_PAREN,DRLLexer.RIGHT_PAREN,Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE);
      if (state.failed)       return;
      if (state.backtracking == 0)       accumulate.action(action);
      if (input.LA(1) == DRLLexer.COMMA) {
        match(input,DRLLexer.COMMA,null,null,DroolsEditorType.SYMBOL);
        if (state.failed)         return;
      }
      if (helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)) {
        match(input,DRLLexer.ID,DroolsSoftKeywords.REVERSE,null,DroolsEditorType.KEYWORD);
        if (state.failed)         return;
        if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
          helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);
        }
        String reverse=chunk(DRLLexer.LEFT_PAREN,DRLLexer.RIGHT_PAREN,Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE);
        if (state.failed)         return;
        if (state.backtracking == 0)         accumulate.reverse(reverse);
        if (input.LA(1) == DRLLexer.COMMA) {
          match(input,DRLLexer.COMMA,null,null,DroolsEditorType.SYMBOL);
          if (state.failed)           return;
        }
      }
      match(input,DRLLexer.ID,DroolsSoftKeywords.RESULT,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return;
      if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
        helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
      }
      String result=chunk(DRLLexer.LEFT_PAREN,DRLLexer.RIGHT_PAREN,Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
      if (state.failed)       return;
      if (state.backtracking == 0)       accumulate.result(result);
    }
 else {
      accumulateFunction(accumulate);
      if (state.failed)       return;
      while (input.LA(1) == DRLLexer.COMMA) {
        match(input,DRLLexer.COMMA,null,null,DroolsEditorType.SYMBOL);
        if (state.failed)         return;
        accumulateFunction(accumulate);
        if (state.failed)         return;
      }
    }
    match(input,DRLLexer.RIGHT_PAREN,null,null,DroolsEditorType.SYMBOL);
    if (state.failed)     return;
  }
  finally {
    helper.end(AccumulateDescrBuilder.class,accumulate);
    if (state.backtracking == 0 && input.LA(1) != DRLLexer.EOF) {
      helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
    }
  }
}
