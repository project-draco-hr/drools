{
  AccumulateDescrBuilder<?> accumulate=helper.start(AccumulateDescrBuilder.class,null,null);
  try {
    match(input,DRLLexer.ID,DroolsSoftKeywords.ACCUMULATE,null,DroolsEditorType.KEYWORD);
    if (state.failed)     return;
    match(input,DRLLexer.LEFT_PAREN,null,null,DroolsEditorType.SYMBOL);
    if (state.failed)     return;
    lhsAnd(accumulate.source());
    if (state.failed)     return;
    match(input,DRLLexer.COMMA,null,null,DroolsEditorType.SYMBOL);
    if (state.failed)     return;
    if (helper.validateIdentifierKey(DroolsSoftKeywords.INIT)) {
      match(input,DRLLexer.ID,DroolsSoftKeywords.INIT,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return;
      String init=chunk(DRLLexer.LEFT_PAREN,DRLLexer.RIGHT_PAREN);
      if (state.failed)       return;
      if (state.backtracking == 0)       accumulate.init(init);
      match(input,DRLLexer.ID,DroolsSoftKeywords.ACTION,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return;
      String action=chunk(DRLLexer.LEFT_PAREN,DRLLexer.RIGHT_PAREN);
      if (state.failed)       return;
      if (state.backtracking == 0)       accumulate.action(action);
      if (helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)) {
        match(input,DRLLexer.ID,DroolsSoftKeywords.ACTION,null,DroolsEditorType.KEYWORD);
        if (state.failed)         return;
        String reverse=chunk(DRLLexer.LEFT_PAREN,DRLLexer.RIGHT_PAREN);
        if (state.failed)         return;
        if (state.backtracking == 0)         accumulate.reverse(reverse);
      }
      match(input,DRLLexer.ID,DroolsSoftKeywords.RESULT,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return;
      String result=chunk(DRLLexer.LEFT_PAREN,DRLLexer.RIGHT_PAREN);
      if (state.failed)       return;
      if (state.backtracking == 0)       accumulate.result(result);
    }
 else {
      accumulateFunction(accumulate);
      if (state.failed)       return;
      while (input.LA(1) == DRLLexer.COMMA) {
        match(input,DRLLexer.COMMA,null,null,DroolsEditorType.SYMBOL);
        if (state.failed)         return;
        accumulateFunction(accumulate);
        if (state.failed)         return;
      }
    }
    match(input,DRLLexer.RIGHT_PAREN,null,null,DroolsEditorType.SYMBOL);
    if (state.failed)     return;
  }
  finally {
    helper.end(AccumulateDescrBuilder.class,null);
  }
}
