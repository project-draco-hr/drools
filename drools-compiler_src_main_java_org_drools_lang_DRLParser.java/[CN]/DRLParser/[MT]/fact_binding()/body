{
  BaseDescr d=null;
  Token ID49=null;
  BaseDescr fe=null;
  BaseDescr left=null;
  BaseDescr right=null;
  d=null;
  OrDescr or=null;
  try {
{
      ID49=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_fact_binding3559);
      if (failed)       return d;
      match(input,COLON,FOLLOW_COLON_in_fact_binding3561);
      if (failed)       return d;
      if (backtracking == 0) {
        d=new PatternDescr();
        ((PatternDescr)d).setIdentifier(ID49.getText());
      }
      int alt59=2;
      int LA59_0=input.LA(1);
      if ((LA59_0 == ID)) {
        alt59=1;
      }
 else       if ((LA59_0 == LEFT_PAREN)) {
        alt59=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return d;
        }
        NoViableAltException nvae=new NoViableAltException("1219:3: (fe= fact[$ID.text] | LEFT_PAREN left= fact[$ID.text] ( ( OR | DOUBLE_PIPE ) right= fact[$ID.text] )* RIGHT_PAREN )",59,0,input);
        throw nvae;
      }
switch (alt59) {
case 1:
{
          pushFollow(FOLLOW_fact_in_fact_binding3575);
          fe=fact(ID49.getText());
          _fsp--;
          if (failed)           return d;
          if (backtracking == 0) {
            d=fe;
            if (d != null) {
              d.setStartCharacter(((CommonToken)ID49).getStartIndex());
            }
          }
        }
      break;
case 2:
{
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_binding3591);
      if (failed)       return d;
      pushFollow(FOLLOW_fact_in_fact_binding3595);
      left=fact(ID49.getText());
      _fsp--;
      if (failed)       return d;
      if (backtracking == 0) {
        d=left;
        if (d != null) {
          d.setStartCharacter(((CommonToken)ID49).getStartIndex());
        }
      }
      loop58:       do {
        int alt58=2;
        int LA58_0=input.LA(1);
        if (((LA58_0 >= OR && LA58_0 <= DOUBLE_PIPE))) {
          alt58=1;
        }
switch (alt58) {
case 1:
{
            if ((input.LA(1) >= OR && input.LA(1) <= DOUBLE_PIPE)) {
              input.consume();
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return d;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_fact_binding3608);
              throw mse;
            }
            pushFollow(FOLLOW_fact_in_fact_binding3620);
            right=fact(ID49.getText());
            _fsp--;
            if (failed)             return d;
            if (backtracking == 0) {
              if (or == null) {
                or=new OrDescr();
                or.addDescr(left);
                d=or;
              }
              or.addDescr(right);
            }
          }
        break;
default :
      break loop58;
  }
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_binding3638);
if (failed) return d;
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
