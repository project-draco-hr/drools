{
  DRLParser.fact_binding_return retval=new DRLParser.fact_binding_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN186=null;
  Token RIGHT_PAREN188=null;
  DRLParser.label_return label184=null;
  DRLParser.fact_return fact185=null;
  DRLParser.fact_binding_expression_return fact_binding_expression187=null;
  Object LEFT_PAREN186_tree=null;
  Object RIGHT_PAREN188_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
  RewriteRuleSubtreeStream stream_fact_binding_expression=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding_expression");
  RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
  try {
{
      pushFollow(FOLLOW_label_in_fact_binding3329);
      label184=label();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_label.add(label184.getTree());
      int alt61=2;
      int LA61_0=input.LA(1);
      if ((LA61_0 == ID)) {
        alt61=1;
      }
 else       if ((LA61_0 == LEFT_PAREN)) {
        alt61=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",61,0,input);
        throw nvae;
      }
switch (alt61) {
case 1:
{
          pushFollow(FOLLOW_fact_in_fact_binding3335);
          fact185=fact();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_fact.add(fact185.getTree());
        }
      break;
case 2:
{
      LEFT_PAREN186=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_binding3342);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN186);
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN186,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_fact_binding_expression_in_fact_binding3350);
      fact_binding_expression187=fact_binding_expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_fact_binding_expression.add(fact_binding_expression187.getTree());
      RIGHT_PAREN188=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_binding3358);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_RIGHT_PAREN.add(RIGHT_PAREN188);
      if (state.backtracking == 0) {
        helper.emit(RIGHT_PAREN188,DroolsEditorType.SYMBOL);
      }
    }
  break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_BINDING,"VT_FACT_BINDING"),root_1);
    adaptor.addChild(root_1,stream_label.nextTree());
    if (stream_fact.hasNext()) {
      adaptor.addChild(root_1,stream_fact.nextTree());
    }
    stream_fact.reset();
    if (stream_fact_binding_expression.hasNext()) {
      adaptor.addChild(root_1,stream_fact_binding_expression.nextTree());
    }
    stream_fact_binding_expression.reset();
    if (stream_RIGHT_PAREN.hasNext()) {
      adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
    }
    stream_RIGHT_PAREN.reset();
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
