{
  DRLParser.from_source_return retval=new DRLParser.from_source_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID192=null;
  DRLParser.paren_chunk_return args=null;
  DRLParser.expression_chain_return expression_chain193=null;
  Object ID192_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression_chain=new RewriteRuleSubtreeStream(adaptor,"rule expression_chain");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      ID192=(Token)match(input,ID,FOLLOW_ID_in_from_source3379);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(ID192);
      if (state.backtracking == 0) {
        emit(ID192,DroolsEditorType.IDENTIFIER);
      }
      int alt71=2;
      alt71=dfa71.predict(input);
switch (alt71) {
case 1:
{
          pushFollow(FOLLOW_paren_chunk_in_from_source3394);
          args=paren_chunk();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_paren_chunk.add(args.getTree());
        }
      break;
  }
  int alt72=2;
  int LA72_0=input.LA(1);
  if ((LA72_0 == DOT)) {
    alt72=1;
  }
switch (alt72) {
case 1:
{
      pushFollow(FOLLOW_expression_chain_in_from_source3401);
      expression_chain193=expression_chain();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression_chain.add(expression_chain193.getTree());
    }
  break;
}
if (state.backtracking == 0) {
if (input.LA(1) == EOF && input.get(input.index() - 1).getType() == WS) {
  emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
}
 else if (input.LA(1) != EOF) {
  emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
}
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FROM_SOURCE,"VT_FROM_SOURCE"),root_1);
    adaptor.addChild(root_1,stream_ID.nextNode());
    if (stream_paren_chunk.hasNext()) {
      adaptor.addChild(root_1,stream_paren_chunk.nextTree());
    }
    stream_paren_chunk.reset();
    if (stream_expression_chain.hasNext()) {
      adaptor.addChild(root_1,stream_expression_chain.nextTree());
    }
    stream_expression_chain.reset();
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
