{
  DeclarativeInvokerDescr ds=null;
  Token var=null;
  Token field=null;
  Token method=null;
  Token functionName=null;
  String arg=null;
  String args=null;
  ds=null;
  try {
    int alt23=4;
    int LA23_0=input.LA(1);
    if ((LA23_0 == ID)) {
      int LA23_1=input.LA(2);
      if ((LA23_1 == 31)) {
        int LA23_2=input.LA(3);
        if ((LA23_2 == ID)) {
switch (input.LA(4)) {
case ID:
case RHS:
case RIGHT_PAREN:
case 27:
case 36:
case 54:
case 55:
case 69:
case 70:
case 71:
case 72:
case 73:
            alt23=4;
          break;
case LEFT_PAREN:
        int LA23_6=input.LA(5);
      if ((LA23_6 == RIGHT_PAREN)) {
        alt23=2;
      }
 else       if ((LA23_6 == ID || LA23_6 == LEFT_PAREN || (LA23_6 >= 71 && LA23_6 <= 73))) {
        alt23=4;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("707:1: from_source returns [DeclarativeInvokerDescr ds] : ( (var= ID '.' field= ID arg= square_chunk ) | (var= ID '.' method= ID args= paren_chunk ) | (functionName= ID args= paren_chunk ) | (var= ID '.' field= ID ) );",23,6,input);
        throw nvae;
      }
    break;
case LEFT_SQUARE:
  alt23=1;
break;
default :
NoViableAltException nvae=new NoViableAltException("707:1: from_source returns [DeclarativeInvokerDescr ds] : ( (var= ID '.' field= ID arg= square_chunk ) | (var= ID '.' method= ID args= paren_chunk ) | (functionName= ID args= paren_chunk ) | (var= ID '.' field= ID ) );",23,4,input);
throw nvae;
}
}
 else {
NoViableAltException nvae=new NoViableAltException("707:1: from_source returns [DeclarativeInvokerDescr ds] : ( (var= ID '.' field= ID arg= square_chunk ) | (var= ID '.' method= ID args= paren_chunk ) | (functionName= ID args= paren_chunk ) | (var= ID '.' field= ID ) );",23,2,input);
throw nvae;
}
}
 else if ((LA23_1 == LEFT_PAREN)) {
alt23=3;
}
 else {
NoViableAltException nvae=new NoViableAltException("707:1: from_source returns [DeclarativeInvokerDescr ds] : ( (var= ID '.' field= ID arg= square_chunk ) | (var= ID '.' method= ID args= paren_chunk ) | (functionName= ID args= paren_chunk ) | (var= ID '.' field= ID ) );",23,1,input);
throw nvae;
}
}
 else {
NoViableAltException nvae=new NoViableAltException("707:1: from_source returns [DeclarativeInvokerDescr ds] : ( (var= ID '.' field= ID arg= square_chunk ) | (var= ID '.' method= ID args= paren_chunk ) | (functionName= ID args= paren_chunk ) | (var= ID '.' field= ID ) );",23,0,input);
throw nvae;
}
switch (alt23) {
case 1:
{
{
var=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_from_source1332);
match(input,31,FOLLOW_31_in_from_source1334);
field=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_from_source1338);
pushFollow(FOLLOW_square_chunk_in_from_source1343);
arg=square_chunk();
_fsp--;
FieldAccessDescr fa;
fa=new FieldAccessDescr(var.getText(),field.getText(),arg);
fa.setLocation(offset(var.getLine()),var.getCharPositionInLine());
ds=fa;
}
}
break;
case 2:
{
{
var=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_from_source1369);
match(input,31,FOLLOW_31_in_from_source1371);
method=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_from_source1375);
pushFollow(FOLLOW_paren_chunk_in_from_source1379);
args=paren_chunk();
_fsp--;
MethodAccessDescr ma=new MethodAccessDescr(var.getText(),method.getText());
ma.setLocation(offset(var.getLine()),var.getCharPositionInLine());
ma.setArguments(args);
ds=ma;
}
}
break;
case 3:
{
{
functionName=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_from_source1400);
pushFollow(FOLLOW_paren_chunk_in_from_source1404);
args=paren_chunk();
_fsp--;
FunctionCallDescr fc=new FunctionCallDescr(functionName.getText());
fc.setLocation(offset(functionName.getLine()),functionName.getCharPositionInLine());
fc.setArguments(args);
ds=fc;
}
}
break;
case 4:
{
{
var=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_from_source1427);
match(input,31,FOLLOW_31_in_from_source1429);
field=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_from_source1433);
FieldAccessDescr fa;
fa=new FieldAccessDescr(var.getText(),field.getText());
fa.setLocation(offset(var.getLine()),var.getCharPositionInLine());
ds=fa;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return ds;
}
