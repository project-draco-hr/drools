{
  DRLParser.from_source_return retval=new DRLParser.from_source_return();
  retval.start=input.LT(1);
  int from_source_StartIndex=input.index();
  Object root_0=null;
  DRLParser.expression_return fs=null;
  RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,64)) {
      return retval;
    }
{
      pushFollow(FOLLOW_expression_in_from_source3682);
      fs=expression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_expression.add(fs.getTree());
      if (state.backtracking == 0) {
        if (input.LA(1) != EOF || input.get(input.index() - 1).getType() == WS) {
          helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
        }
      }
      if (state.backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,(Object)adaptor.create(VT_FROM_SOURCE,(fs != null ? input.toString(fs.start,fs.stop) : null)));
        }
        retval.tree=root_0;
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
    if (state.backtracking > 0) {
      memoize(input,64,from_source_StartIndex);
    }
  }
  return retval;
}
