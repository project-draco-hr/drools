{
  DeclarativeInvokerDescr ds=null;
  Token var=null;
  Token field=null;
  Token functionName=null;
  String sqarg=null;
  String paarg=null;
  String args=null;
  ds=null;
  try {
    int alt24=2;
    int LA24_0=input.LA(1);
    if ((LA24_0 == ID)) {
      int LA24_1=input.LA(2);
      if ((LA24_1 == 30)) {
        alt24=1;
      }
 else       if ((LA24_1 == LEFT_PAREN)) {
        alt24=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return ds;
        }
        NoViableAltException nvae=new NoViableAltException("710:1: from_source returns [DeclarativeInvokerDescr ds] : ( ( ( ID '.' ID ( ( LEFT_SQUARE )=> square_chunk | ( LEFT_PAREN )=> paren_chunk )? ) )=> (var= ID '.' field= ID ( ( LEFT_SQUARE )=>sqarg= square_chunk | ( LEFT_PAREN )=>paarg= paren_chunk )? ) | (functionName= ID args= paren_chunk ) );",24,1,input);
        throw nvae;
      }
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return ds;
      }
      NoViableAltException nvae=new NoViableAltException("710:1: from_source returns [DeclarativeInvokerDescr ds] : ( ( ( ID '.' ID ( ( LEFT_SQUARE )=> square_chunk | ( LEFT_PAREN )=> paren_chunk )? ) )=> (var= ID '.' field= ID ( ( LEFT_SQUARE )=>sqarg= square_chunk | ( LEFT_PAREN )=>paarg= paren_chunk )? ) | (functionName= ID args= paren_chunk ) );",24,0,input);
      throw nvae;
    }
switch (alt24) {
case 1:
{
{
          var=(Token)input.LT(1);
          match(input,ID,FOLLOW_ID_in_from_source1333);
          if (failed)           return ds;
          match(input,30,FOLLOW_30_in_from_source1335);
          if (failed)           return ds;
          field=(Token)input.LT(1);
          match(input,ID,FOLLOW_ID_in_from_source1339);
          if (failed)           return ds;
          if (backtracking == 0) {
            FieldAccessDescr fa;
            fa=new FieldAccessDescr(var.getText(),field.getText());
            fa.setLocation(offset(var.getLine()),var.getCharPositionInLine());
            ds=fa;
          }
          int alt23=3;
          int LA23_0=input.LA(1);
          if ((LA23_0 == LEFT_SQUARE)) {
            alt23=1;
          }
 else           if ((LA23_0 == LEFT_PAREN)) {
            if ((synpred33())) {
              alt23=2;
            }
          }
switch (alt23) {
case 1:
{
              pushFollow(FOLLOW_square_chunk_in_from_source1373);
              sqarg=square_chunk();
              _fsp--;
              if (failed)               return ds;
              if (backtracking == 0) {
                FieldAccessDescr fa;
                fa=new FieldAccessDescr(var.getText(),field.getText(),sqarg);
                fa.setLocation(offset(var.getLine()),var.getCharPositionInLine());
                ds=fa;
              }
            }
          break;
case 2:
{
          pushFollow(FOLLOW_paren_chunk_in_from_source1409);
          paarg=paren_chunk();
          _fsp--;
          if (failed)           return ds;
          if (backtracking == 0) {
            MethodAccessDescr ma=new MethodAccessDescr(var.getText(),field.getText());
            ma.setLocation(offset(var.getLine()),var.getCharPositionInLine());
            ma.setArguments(paarg);
            ds=ma;
          }
        }
      break;
  }
}
}
break;
case 2:
{
{
functionName=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_from_source1443);
if (failed) return ds;
pushFollow(FOLLOW_paren_chunk_in_from_source1447);
args=paren_chunk();
_fsp--;
if (failed) return ds;
if (backtracking == 0) {
FunctionCallDescr fc=new FunctionCallDescr(functionName.getText());
fc.setLocation(offset(functionName.getLine()),functionName.getCharPositionInLine());
fc.setArguments(args);
ds=fc;
}
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return ds;
}
