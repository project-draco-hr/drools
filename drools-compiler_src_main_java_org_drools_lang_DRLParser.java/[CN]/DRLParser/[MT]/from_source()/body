{
  from_source_return retval=new from_source_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID197=null;
  paren_chunk_return args=null;
  expression_chain_return expression_chain198=null;
  Object ID197_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleSubtreeStream stream_expression_chain=new RewriteRuleSubtreeStream(adaptor,"rule expression_chain");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      ID197=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_from_source2810);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(ID197);
      int alt67=2;
      int LA67_0=input.LA(1);
      if ((LA67_0 == LEFT_PAREN)) {
        int LA67_1=input.LA(2);
        if ((LA67_1 == LEFT_PAREN)) {
          int LA67_3=input.LA(3);
          if ((synpred8())) {
            alt67=1;
          }
        }
 else         if ((LA67_1 == ID)) {
          int LA67_4=input.LA(3);
          if ((synpred8())) {
            alt67=1;
          }
        }
 else         if (((LA67_1 >= VT_COMPILATION_UNIT && LA67_1 <= SEMICOLON) || (LA67_1 >= DOT && LA67_1 <= STRING) || LA67_1 == COMMA || (LA67_1 >= AT && LA67_1 <= MULTI_LINE_COMMENT)) && (synpred8())) {
          alt67=1;
        }
 else         if ((LA67_1 == RIGHT_PAREN) && (synpred8())) {
          alt67=1;
        }
      }
switch (alt67) {
case 1:
{
          pushFollow(FOLLOW_paren_chunk_in_from_source2823);
          args=paren_chunk();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_paren_chunk.add(args.getTree());
        }
      break;
  }
  int alt68=2;
  int LA68_0=input.LA(1);
  if ((LA68_0 == DOT)) {
    alt68=1;
  }
switch (alt68) {
case 1:
{
      pushFollow(FOLLOW_expression_chain_in_from_source2830);
      expression_chain198=expression_chain();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_expression_chain.add(expression_chain198.getTree());
    }
  break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_FROM_SOURCE,"VT_FROM_SOURCE"),root_1);
    adaptor.addChild(root_1,stream_ID.next());
    if (stream_paren_chunk.hasNext()) {
      adaptor.addChild(root_1,stream_paren_chunk.next());
    }
    stream_paren_chunk.reset();
    if (stream_expression_chain.hasNext()) {
      adaptor.addChild(root_1,stream_expression_chain.next());
    }
    stream_expression_chain.reset();
    adaptor.addChild(root_0,root_1);
  }
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
