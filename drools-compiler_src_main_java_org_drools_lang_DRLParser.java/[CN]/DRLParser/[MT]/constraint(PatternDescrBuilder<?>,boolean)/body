{
  if (state.backtracking == 0 && !state.errorRecovery) {
    helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);
  }
  int first=input.index();
  exprParser.getHelper().setHasOperator(false);
  exprParser.conditionalOrExpression();
  if (state.backtracking == 0) {
    if (input.LA(1) != DRLLexer.EOF || input.get(input.index() - 1).getType() == DRLLexer.WS) {
      helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
    }
  }
  if (state.failed)   return;
  if (state.backtracking == 0 && input.index() > first) {
    int last=input.LT(-1).getTokenIndex();
    String expr=input.toString(first,last);
    pattern.constraint(expr,positional);
    BaseDescr constrDescr=pattern.getDescr().getDescrs().get(pattern.getDescr().getDescrs().size() - 1);
    constrDescr.setLocation(input.get(first).getLine(),input.get(first).getCharPositionInLine());
    constrDescr.setEndLocation(input.get(last).getLine(),input.get(last).getCharPositionInLine());
    constrDescr.setStartCharacter(((CommonToken)input.get(first)).getStartIndex());
    constrDescr.setEndCharacter(((CommonToken)input.get(last)).getStopIndex());
  }
}
