{
  if (state.backtracking == 0 && !state.errorRecovery) {
    helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);
  }
  String bind=null;
  boolean unification=false;
  if (input.LA(1) == DRLLexer.ID && input.LA(2) == DRLLexer.COLON) {
    bind=label(DroolsEditorType.IDENTIFIER_VARIABLE);
    if (state.failed)     return;
  }
 else   if (input.LA(1) == DRLLexer.ID && input.LA(2) == DRLLexer.UNIFY) {
    bind=unif(DroolsEditorType.IDENTIFIER_VARIABLE);
    if (state.failed)     return;
    unification=true;
  }
  int first=input.index();
  exprParser.getHelper().setHasOperator(false);
  exprParser.conditionalOrExpression();
  if (state.backtracking == 0) {
    if (input.LA(1) != DRLLexer.EOF || input.get(input.index() - 1).getType() == DRLLexer.WS) {
      helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
    }
  }
  if (state.failed)   return;
  if (state.backtracking == 0 && input.index() > first) {
    String expr=input.toString(first,input.LT(-1).getTokenIndex());
    if (bind == null) {
      pattern.constraint(expr,positional);
    }
 else {
      pattern.bind(bind,expr,unification);
    }
  }
}
