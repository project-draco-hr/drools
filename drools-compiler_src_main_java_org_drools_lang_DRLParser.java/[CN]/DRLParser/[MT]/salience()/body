{
  DRLParser.salience_return retval=new DRLParser.salience_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.salience_key_return salience_key98=null;
  DRLParser.signed_decimal_return signed_decimal99=null;
  DRLParser.paren_chunk_return paren_chunk100=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_salience_key_in_salience1956);
      salience_key98=salience_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       root_0=(Object)adaptor.becomeRoot(salience_key98.getTree(),root_0);
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
      }
      int alt33=2;
      int LA33_0=input.LA(1);
      if ((LA33_0 == DECIMAL || (LA33_0 >= PLUS && LA33_0 <= MINUS))) {
        alt33=1;
      }
 else       if ((LA33_0 == LEFT_PAREN)) {
        alt33=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",33,0,input);
        throw nvae;
      }
switch (alt33) {
case 1:
{
          pushFollow(FOLLOW_signed_decimal_in_salience1965);
          signed_decimal99=signed_decimal();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,signed_decimal99.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_paren_chunk_in_salience1972);
      paren_chunk100=paren_chunk();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,paren_chunk100.getTree());
    }
  break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
