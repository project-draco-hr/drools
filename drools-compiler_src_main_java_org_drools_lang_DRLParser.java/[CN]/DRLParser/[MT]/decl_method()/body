{
  DRLParser.decl_method_return retval=new DRLParser.decl_method_return();
  retval.start=input.LT(1);
  int decl_method_StartIndex=input.index();
  Object root_0=null;
  Token ID59=null;
  Token ID61=null;
  DRLParser.methodDeclaration_return methodDeclaration57=null;
  DRLParser.void_key_return void_key58=null;
  DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest60=null;
  DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest62=null;
  Object ID59_tree=null;
  Object ID61_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,21)) {
      return retval;
    }
    int alt21=3;
    int LA21_0=input.LA(1);
    if ((LA21_0 == ID)) {
      int LA21_1=input.LA(2);
      if ((((synpred1_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))) || (synpred1_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) || (synpred1_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))|| (synpred1_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))|| synpred1_DRL()|| (synpred1_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))|| (synpred1_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))|| (synpred1_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred1_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))))) {
        alt21=1;
      }
 else       if (((synpred2_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))))) {
        alt21=2;
      }
 else       if ((true)) {
        alt21=3;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",21,1,input);
        throw nvae;
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",21,0,input);
      throw nvae;
    }
switch (alt21) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_methodDeclaration_in_decl_method1519);
        methodDeclaration57=methodDeclaration();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,methodDeclaration57.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_void_key_in_decl_method1524);
    void_key58=void_key();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,void_key58.getTree());
    ID59=(Token)match(input,ID,FOLLOW_ID_in_decl_method1526);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID59_tree=(Object)adaptor.create(ID59);
      adaptor.addChild(root_0,ID59_tree);
    }
    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_decl_method1528);
    voidMethodDeclaratorRest60=voidMethodDeclaratorRest();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,voidMethodDeclaratorRest60.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
ID61=(Token)match(input,ID,FOLLOW_ID_in_decl_method1533);
if (state.failed) return retval;
if (state.backtracking == 0) {
  ID61_tree=(Object)adaptor.create(ID61);
  adaptor.addChild(root_0,ID61_tree);
}
pushFollow(FOLLOW_constructorDeclaratorRest_in_decl_method1535);
constructorDeclaratorRest62=constructorDeclaratorRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,constructorDeclaratorRest62.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,21,decl_method_StartIndex);
}
}
return retval;
}
