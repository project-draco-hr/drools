{
  DRLParser.enabled_return retval=new DRLParser.enabled_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token BOOL96=null;
  DRLParser.enabled_key_return enabled_key95=null;
  DRLParser.paren_chunk_return paren_chunk97=null;
  Object BOOL96_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_enabled_key_in_enabled1912);
      enabled_key95=enabled_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       root_0=(Object)adaptor.becomeRoot(enabled_key95.getTree(),root_0);
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
      }
      int alt32=2;
      int LA32_0=input.LA(1);
      if ((LA32_0 == BOOL)) {
        alt32=1;
      }
 else       if ((LA32_0 == LEFT_PAREN)) {
        alt32=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",32,0,input);
        throw nvae;
      }
switch (alt32) {
case 1:
{
          BOOL96=(Token)match(input,BOOL,FOLLOW_BOOL_in_enabled1925);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            BOOL96_tree=(Object)adaptor.create(BOOL96);
            adaptor.addChild(root_0,BOOL96_tree);
          }
          if (state.backtracking == 0) {
            helper.emit(BOOL96,DroolsEditorType.BOOLEAN_CONST);
          }
        }
      break;
case 2:
{
      pushFollow(FOLLOW_paren_chunk_in_enabled1936);
      paren_chunk97=paren_chunk();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,paren_chunk97.getTree());
    }
  break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
