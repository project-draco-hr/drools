{
  DRLParser.enabled_return retval=new DRLParser.enabled_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token BOOL91=null;
  DRLParser.enabled_key_return enabled_key90=null;
  DRLParser.paren_chunk_return paren_chunk92=null;
  Object BOOL91_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_enabled_key_in_enabled1887);
      enabled_key90=enabled_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       root_0=(Object)adaptor.becomeRoot(enabled_key90.getTree(),root_0);
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
      }
      int alt31=2;
      int LA31_0=input.LA(1);
      if ((LA31_0 == BOOL)) {
        alt31=1;
      }
 else       if ((LA31_0 == LEFT_PAREN)) {
        alt31=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",31,0,input);
        throw nvae;
      }
switch (alt31) {
case 1:
{
          BOOL91=(Token)match(input,BOOL,FOLLOW_BOOL_in_enabled1900);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            BOOL91_tree=(Object)adaptor.create(BOOL91);
            adaptor.addChild(root_0,BOOL91_tree);
          }
          if (state.backtracking == 0) {
            helper.emit(BOOL91,DroolsEditorType.BOOLEAN_CONST);
          }
        }
      break;
case 2:
{
      pushFollow(FOLLOW_paren_chunk_in_enabled1911);
      paren_chunk92=paren_chunk();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,paren_chunk92.getTree());
    }
  break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
