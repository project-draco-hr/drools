{
  DRLParser.enumBodyDeclarations_return retval=new DRLParser.enumBodyDeclarations_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON852=null;
  DRLParser.classBodyDeclaration_return classBodyDeclaration853=null;
  Object SEMICOLON852_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      SEMICOLON852=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enumBodyDeclarations9897);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        SEMICOLON852_tree=(Object)adaptor.create(SEMICOLON852);
        adaptor.addChild(root_0,SEMICOLON852_tree);
      }
      loop253:       do {
        int alt253=2;
        int LA253_0=input.LA(1);
        if (((LA253_0 >= SEMICOLON && LA253_0 <= ID) || LA253_0 == LESS || LA253_0 == LEFT_CURLY || LA253_0 == AT)) {
          alt253=1;
        }
switch (alt253) {
case 1:
{
            pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations9900);
            classBodyDeclaration853=classBodyDeclaration();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,classBodyDeclaration853.getTree());
          }
        break;
default :
      break loop253;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
