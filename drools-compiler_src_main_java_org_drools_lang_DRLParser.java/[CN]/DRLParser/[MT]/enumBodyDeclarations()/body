{
  DRLParser.enumBodyDeclarations_return retval=new DRLParser.enumBodyDeclarations_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON837=null;
  DRLParser.classBodyDeclaration_return classBodyDeclaration838=null;
  Object SEMICOLON837_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      SEMICOLON837=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enumBodyDeclarations9794);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        SEMICOLON837_tree=(Object)adaptor.create(SEMICOLON837);
        adaptor.addChild(root_0,SEMICOLON837_tree);
      }
      loop251:       do {
        int alt251=2;
        int LA251_0=input.LA(1);
        if (((LA251_0 >= SEMICOLON && LA251_0 <= ID) || LA251_0 == LESS || LA251_0 == LEFT_CURLY || LA251_0 == AT)) {
          alt251=1;
        }
switch (alt251) {
case 1:
{
            pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations9797);
            classBodyDeclaration838=classBodyDeclaration();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,classBodyDeclaration838.getTree());
          }
        break;
default :
      break loop251;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
