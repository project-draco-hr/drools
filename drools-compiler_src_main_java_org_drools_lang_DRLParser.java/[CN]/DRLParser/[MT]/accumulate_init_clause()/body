{
  accumulate_init_clause_return retval=new accumulate_init_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA179=null;
  Token COMMA181=null;
  Token COMMA183=null;
  paren_chunk_return pc1=null;
  paren_chunk_return pc2=null;
  paren_chunk_return pc3=null;
  paren_chunk_return pc4=null;
  init_key_return init_key178=null;
  action_key_return action_key180=null;
  reverse_key_return reverse_key182=null;
  result_key_return result_key184=null;
  Object COMMA179_tree=null;
  Object COMMA181_tree=null;
  Object COMMA183_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
  RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
  RewriteRuleSubtreeStream stream_init_key=new RewriteRuleSubtreeStream(adaptor,"rule init_key");
  RewriteRuleSubtreeStream stream_action_key=new RewriteRuleSubtreeStream(adaptor,"rule action_key");
  RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
  try {
{
      pushFollow(FOLLOW_init_key_in_accumulate_init_clause2560);
      init_key178=init_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_init_key.add(init_key178.getTree());
      pushFollow(FOLLOW_paren_chunk_in_accumulate_init_clause2565);
      pc1=paren_chunk();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_paren_chunk.add(pc1.getTree());
      int alt60=2;
      int LA60_0=input.LA(1);
      if ((LA60_0 == COMMA)) {
        alt60=1;
      }
switch (alt60) {
case 1:
{
          COMMA179=(Token)input.LT(1);
          match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause2567);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COMMA.add(COMMA179);
        }
      break;
  }
  pushFollow(FOLLOW_action_key_in_accumulate_init_clause2571);
  action_key180=action_key();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_action_key.add(action_key180.getTree());
  pushFollow(FOLLOW_paren_chunk_in_accumulate_init_clause2575);
  pc2=paren_chunk();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_paren_chunk.add(pc2.getTree());
  int alt61=2;
  int LA61_0=input.LA(1);
  if ((LA61_0 == COMMA)) {
    alt61=1;
  }
switch (alt61) {
case 1:
{
      COMMA181=(Token)input.LT(1);
      match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause2577);
      if (failed)       return retval;
      if (backtracking == 0)       stream_COMMA.add(COMMA181);
    }
  break;
}
int alt63=2;
alt63=dfa63.predict(input);
switch (alt63) {
case 1:
{
  pushFollow(FOLLOW_reverse_key_in_accumulate_init_clause2583);
  reverse_key182=reverse_key();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_reverse_key.add(reverse_key182.getTree());
  pushFollow(FOLLOW_paren_chunk_in_accumulate_init_clause2587);
  pc3=paren_chunk();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_paren_chunk.add(pc3.getTree());
  int alt62=2;
  int LA62_0=input.LA(1);
  if ((LA62_0 == COMMA)) {
    alt62=1;
  }
switch (alt62) {
case 1:
{
      COMMA183=(Token)input.LT(1);
      match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause2589);
      if (failed)       return retval;
      if (backtracking == 0)       stream_COMMA.add(COMMA183);
    }
  break;
}
}
break;
}
pushFollow(FOLLOW_result_key_in_accumulate_init_clause2595);
result_key184=result_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_result_key.add(result_key184.getTree());
pushFollow(FOLLOW_paren_chunk_in_accumulate_init_clause2599);
pc4=paren_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_paren_chunk.add(pc4.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_pc2=new RewriteRuleSubtreeStream(adaptor,"token pc2",pc2 != null ? pc2.tree : null);
RewriteRuleSubtreeStream stream_pc3=new RewriteRuleSubtreeStream(adaptor,"token pc3",pc3 != null ? pc3.tree : null);
RewriteRuleSubtreeStream stream_pc4=new RewriteRuleSubtreeStream(adaptor,"token pc4",pc4 != null ? pc4.tree : null);
RewriteRuleSubtreeStream stream_pc1=new RewriteRuleSubtreeStream(adaptor,"token pc1",pc1 != null ? pc1.tree : null);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_ACCUMULATE_INIT_CLAUSE,"VT_ACCUMULATE_INIT_CLAUSE"),root_1);
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_init_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc1.next());
adaptor.addChild(root_1,root_2);
}
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_action_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc2.next());
adaptor.addChild(root_1,root_2);
}
if (stream_pc3.hasNext() || stream_reverse_key.hasNext()) {
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_reverse_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc3.next());
adaptor.addChild(root_1,root_2);
}
}
stream_pc3.reset();
stream_reverse_key.reset();
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_result_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc4.next());
adaptor.addChild(root_1,root_2);
}
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
