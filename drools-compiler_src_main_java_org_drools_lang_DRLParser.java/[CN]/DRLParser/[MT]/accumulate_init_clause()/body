{
  DRLParser.accumulate_init_clause_return retval=new DRLParser.accumulate_init_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token cm1=null;
  Token cm2=null;
  Token cm3=null;
  DRLParser.accumulate_paren_chunk_return pc1=null;
  DRLParser.accumulate_paren_chunk_return pc2=null;
  DRLParser.accumulate_paren_chunk_return pc3=null;
  DRLParser.result_key_return res1=null;
  DRLParser.accumulate_paren_chunk_return pc4=null;
  DRLParser.init_key_return init_key191=null;
  DRLParser.action_key_return action_key192=null;
  DRLParser.reverse_key_return reverse_key193=null;
  Object cm1_tree=null;
  Object cm2_tree=null;
  Object cm3_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_action_key=new RewriteRuleSubtreeStream(adaptor,"rule action_key");
  RewriteRuleSubtreeStream stream_accumulate_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk");
  RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
  RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
  RewriteRuleSubtreeStream stream_init_key=new RewriteRuleSubtreeStream(adaptor,"rule init_key");
  boolean isFailed=true;
  try {
{
      pushFollow(FOLLOW_init_key_in_accumulate_init_clause3285);
      init_key191=init_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_init_key.add(init_key191.getTree());
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);
      }
      pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3295);
      pc1=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE);
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_accumulate_paren_chunk.add(pc1.getTree());
      int alt58=2;
      int LA58_0=input.LA(1);
      if ((LA58_0 == COMMA)) {
        alt58=1;
      }
switch (alt58) {
case 1:
{
          cm1=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3300);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_COMMA.add(cm1);
        }
      break;
  }
  if (state.backtracking == 0) {
    helper.emit(cm1,DroolsEditorType.SYMBOL);
  }
  if (state.backtracking == 0) {
    if (pc1 != null && ((DroolsTree)pc1.getTree()).getText() != null)     helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);
  }
  pushFollow(FOLLOW_action_key_in_accumulate_init_clause3311);
  action_key192=action_key();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_action_key.add(action_key192.getTree());
  pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3315);
  pc2=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE);
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_accumulate_paren_chunk.add(pc2.getTree());
  int alt59=2;
  int LA59_0=input.LA(1);
  if ((LA59_0 == COMMA)) {
    alt59=1;
  }
switch (alt59) {
case 1:
{
      cm2=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3320);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_COMMA.add(cm2);
    }
  break;
}
if (state.backtracking == 0) {
helper.emit(cm2,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
if (pc1 != null && ((DroolsTree)pc1.getTree()).getText() != null && pc2 != null && ((DroolsTree)pc2.getTree()).getText() != null) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);
}
int alt61=2;
int LA61_0=input.LA(1);
if ((LA61_0 == ID)) {
int LA61_1=input.LA(2);
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE))))) {
  alt61=1;
}
}
switch (alt61) {
case 1:
{
  pushFollow(FOLLOW_reverse_key_in_accumulate_init_clause3332);
  reverse_key193=reverse_key();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_reverse_key.add(reverse_key193.getTree());
  pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3336);
  pc3=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE);
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_accumulate_paren_chunk.add(pc3.getTree());
  int alt60=2;
  int LA60_0=input.LA(1);
  if ((LA60_0 == COMMA)) {
    alt60=1;
  }
switch (alt60) {
case 1:
{
      cm3=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3341);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_COMMA.add(cm3);
    }
  break;
}
if (state.backtracking == 0) {
helper.emit(cm3,DroolsEditorType.SYMBOL);
}
}
break;
}
if (state.backtracking == 0) {
if ((pc1 != null && ((DroolsTree)pc1.tree).getText() != null) && (pc2 != null && ((DroolsTree)pc2.tree).getText() != null) && (pc3 != null && ((DroolsTree)pc3.tree).getText() != null)) {
helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
}
}
pushFollow(FOLLOW_result_key_in_accumulate_init_clause3357);
res1=result_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_result_key.add(res1.getTree());
if (state.backtracking == 0) {
helper.emit((res1 != null ? ((Token)res1.start) : null),DroolsEditorType.KEYWORD);
}
pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3363);
pc4=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_accumulate_paren_chunk.add(pc4.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_pc4=new RewriteRuleSubtreeStream(adaptor,"rule pc4",pc4 != null ? pc4.tree : null);
RewriteRuleSubtreeStream stream_pc3=new RewriteRuleSubtreeStream(adaptor,"rule pc3",pc3 != null ? pc3.tree : null);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
RewriteRuleSubtreeStream stream_pc1=new RewriteRuleSubtreeStream(adaptor,"rule pc1",pc1 != null ? pc1.tree : null);
RewriteRuleSubtreeStream stream_pc2=new RewriteRuleSubtreeStream(adaptor,"rule pc2",pc2 != null ? pc2.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_INIT_CLAUSE,"VT_ACCUMULATE_INIT_CLAUSE"),root_1);
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_init_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc1.nextTree());
adaptor.addChild(root_1,root_2);
}
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_action_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc2.nextTree());
adaptor.addChild(root_1,root_2);
}
if (stream_reverse_key.hasNext() || stream_pc3.hasNext()) {
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_reverse_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc3.nextTree());
adaptor.addChild(root_1,root_2);
}
}
stream_reverse_key.reset();
stream_pc3.reset();
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_result_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc4.nextTree());
adaptor.addChild(root_1,root_2);
}
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (helper.isEditorInterfaceEnabled && isFailed && input.LA(1) == ID && helper.validateLT(1,DroolsSoftKeywords.RESULT)) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
input.consume();
if (input.LA(1) == LEFT_PAREN) {
input.consume();
helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
}
}
}
return retval;
}
