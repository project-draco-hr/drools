{
  accumulate_init_clause_return retval=new accumulate_init_clause_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token cm1=null;
  Token cm2=null;
  Token cm3=null;
  Token INIT181=null;
  accumulate_paren_chunk_return pc1=null;
  accumulate_paren_chunk_return pc2=null;
  accumulate_paren_chunk_return pc3=null;
  result_key_return res1=null;
  accumulate_paren_chunk_return pc4=null;
  action_key_return action_key182=null;
  reverse_key_return reverse_key183=null;
  Object cm1_tree=null;
  Object cm2_tree=null;
  Object cm3_tree=null;
  Object INIT181_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_INIT=new RewriteRuleTokenStream(adaptor,"token INIT");
  RewriteRuleSubtreeStream stream_accumulate_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk");
  RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
  RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
  RewriteRuleSubtreeStream stream_action_key=new RewriteRuleSubtreeStream(adaptor,"rule action_key");
  boolean isFailed=true;
  try {
{
      INIT181=(Token)input.LT(1);
      match(input,INIT,FOLLOW_INIT_in_accumulate_init_clause3037);
      if (failed)       return retval;
      if (backtracking == 0)       stream_INIT.add(INIT181);
      if (backtracking == 0) {
        emit(INIT181,DroolsEditorType.KEYWORD);
      }
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);
      }
      pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3048);
      pc1=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE);
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_accumulate_paren_chunk.add(pc1.getTree());
      int alt63=2;
      int LA63_0=input.LA(1);
      if ((LA63_0 == COMMA)) {
        alt63=1;
      }
switch (alt63) {
case 1:
{
          cm1=(Token)input.LT(1);
          match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3053);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COMMA.add(cm1);
        }
      break;
  }
  if (backtracking == 0) {
    emit(cm1,DroolsEditorType.SYMBOL);
  }
  if (backtracking == 0) {
    emit(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);
  }
  pushFollow(FOLLOW_action_key_in_accumulate_init_clause3064);
  action_key182=action_key();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_action_key.add(action_key182.getTree());
  pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3068);
  pc2=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE);
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_accumulate_paren_chunk.add(pc2.getTree());
  int alt64=2;
  int LA64_0=input.LA(1);
  if ((LA64_0 == COMMA)) {
    alt64=1;
  }
switch (alt64) {
case 1:
{
      cm2=(Token)input.LT(1);
      match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3073);
      if (failed)       return retval;
      if (backtracking == 0)       stream_COMMA.add(cm2);
    }
  break;
}
if (backtracking == 0) {
emit(cm2,DroolsEditorType.SYMBOL);
}
if (backtracking == 0) {
emit(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);
}
int alt66=2;
alt66=dfa66.predict(input);
switch (alt66) {
case 1:
{
  pushFollow(FOLLOW_reverse_key_in_accumulate_init_clause3086);
  reverse_key183=reverse_key();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_reverse_key.add(reverse_key183.getTree());
  pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3090);
  pc3=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE);
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_accumulate_paren_chunk.add(pc3.getTree());
  int alt65=2;
  int LA65_0=input.LA(1);
  if ((LA65_0 == COMMA)) {
    alt65=1;
  }
switch (alt65) {
case 1:
{
      cm3=(Token)input.LT(1);
      match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3095);
      if (failed)       return retval;
      if (backtracking == 0)       stream_COMMA.add(cm3);
    }
  break;
}
if (backtracking == 0) {
emit(cm3,DroolsEditorType.SYMBOL);
}
}
break;
}
if (backtracking == 0) {
emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
}
pushFollow(FOLLOW_result_key_in_accumulate_init_clause3110);
res1=result_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_result_key.add(res1.getTree());
if (backtracking == 0) {
emit(((Token)res1.start),DroolsEditorType.KEYWORD);
}
pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3116);
pc4=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_accumulate_paren_chunk.add(pc4.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_pc2=new RewriteRuleSubtreeStream(adaptor,"token pc2",pc2 != null ? pc2.tree : null);
RewriteRuleSubtreeStream stream_pc3=new RewriteRuleSubtreeStream(adaptor,"token pc3",pc3 != null ? pc3.tree : null);
RewriteRuleSubtreeStream stream_pc4=new RewriteRuleSubtreeStream(adaptor,"token pc4",pc4 != null ? pc4.tree : null);
RewriteRuleSubtreeStream stream_pc1=new RewriteRuleSubtreeStream(adaptor,"token pc1",pc1 != null ? pc1.tree : null);
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_ACCUMULATE_INIT_CLAUSE,"VT_ACCUMULATE_INIT_CLAUSE"),root_1);
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_INIT.next(),root_2);
adaptor.addChild(root_2,stream_pc1.next());
adaptor.addChild(root_1,root_2);
}
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_action_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc2.next());
adaptor.addChild(root_1,root_2);
}
if (stream_pc3.hasNext() || stream_reverse_key.hasNext()) {
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_reverse_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc3.next());
adaptor.addChild(root_1,root_2);
}
}
stream_pc3.reset();
stream_reverse_key.reset();
{
Object root_2=(Object)adaptor.nil();
root_2=(Object)adaptor.becomeRoot(stream_result_key.nextNode(),root_2);
adaptor.addChild(root_2,stream_pc4.next());
adaptor.addChild(root_1,root_2);
}
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (isEditorInterfaceEnabled && isFailed && input.LA(1) == ID && validateLT(1,DroolsSoftKeywords.RESULT)) {
emit(input.LT(1),DroolsEditorType.KEYWORD);
input.consume();
if (input.LA(1) == LEFT_PAREN) {
input.consume();
emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
}
}
}
return retval;
}
