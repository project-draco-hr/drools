{
  DRLParser.creator_return retval=new DRLParser.creator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments483=null;
  DRLParser.createdName_return createdName484=null;
  DRLParser.arrayCreatorRest_return arrayCreatorRest485=null;
  DRLParser.classCreatorRest_return classCreatorRest486=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt153=2;
      int LA153_0=input.LA(1);
      if ((LA153_0 == LESS)) {
        alt153=1;
      }
switch (alt153) {
case 1:
{
          pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator7322);
          nonWildcardTypeArguments483=nonWildcardTypeArguments();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,nonWildcardTypeArguments483.getTree());
        }
      break;
  }
  pushFollow(FOLLOW_createdName_in_creator7325);
  createdName484=createdName();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,createdName484.getTree());
  int alt154=2;
  int LA154_0=input.LA(1);
  if ((LA154_0 == LEFT_SQUARE)) {
    alt154=1;
  }
 else   if ((LA154_0 == LEFT_PAREN)) {
    alt154=2;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",154,0,input);
    throw nvae;
  }
switch (alt154) {
case 1:
{
      pushFollow(FOLLOW_arrayCreatorRest_in_creator7336);
      arrayCreatorRest485=arrayCreatorRest();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,arrayCreatorRest485.getTree());
    }
  break;
case 2:
{
  pushFollow(FOLLOW_classCreatorRest_in_creator7340);
  classCreatorRest486=classCreatorRest();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,classCreatorRest486.getTree());
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
