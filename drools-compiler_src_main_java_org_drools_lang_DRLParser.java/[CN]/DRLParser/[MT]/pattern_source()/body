{
  DRLParser.pattern_source_return retval=new DRLParser.pattern_source_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token FROM152=null;
  DRLParser.lhs_pattern_return lhs_pattern150=null;
  DRLParser.over_clause_return over_clause151=null;
  DRLParser.accumulate_statement_return accumulate_statement153=null;
  DRLParser.collect_statement_return collect_statement154=null;
  DRLParser.entrypoint_statement_return entrypoint_statement155=null;
  DRLParser.from_source_return from_source156=null;
  Object FROM152_tree=null;
  boolean isFailed=true;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2598);
      lhs_pattern150=lhs_pattern();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,lhs_pattern150.getTree());
      int alt48=2;
      int LA48_0=input.LA(1);
      if ((LA48_0 == OVER)) {
        alt48=1;
      }
switch (alt48) {
case 1:
{
          pushFollow(FOLLOW_over_clause_in_pattern_source2602);
          over_clause151=over_clause();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,over_clause151.getTree());
        }
      break;
  }
  int alt50=2;
  int LA50_0=input.LA(1);
  if ((LA50_0 == FROM)) {
    alt50=1;
  }
switch (alt50) {
case 1:
{
      FROM152=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source2612);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        FROM152_tree=(Object)adaptor.create(FROM152);
        root_0=(Object)adaptor.becomeRoot(FROM152_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(FROM152,DroolsEditorType.KEYWORD);
        helper.emit(Location.LOCATION_LHS_FROM);
      }
      int alt49=4;
      alt49=dfa49.predict(input);
switch (alt49) {
case 1:
{
          pushFollow(FOLLOW_accumulate_statement_in_pattern_source2632);
          accumulate_statement153=accumulate_statement();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,accumulate_statement153.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_collect_statement_in_pattern_source2648);
      collect_statement154=collect_statement();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,collect_statement154.getTree());
    }
  break;
case 3:
{
  pushFollow(FOLLOW_entrypoint_statement_in_pattern_source2665);
  entrypoint_statement155=entrypoint_statement();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,entrypoint_statement155.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_from_source_in_pattern_source2681);
from_source156=from_source();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,from_source156.getTree());
}
break;
}
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
helper.emit(true,Location.LOCATION_LHS_FROM_ACCUMULATE);
}
 else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
helper.emit(true,Location.LOCATION_LHS_FROM_COLLECT);
}
}
return retval;
}
