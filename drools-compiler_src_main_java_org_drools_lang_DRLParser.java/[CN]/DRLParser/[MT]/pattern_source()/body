{
  BaseDescr d=null;
  BaseDescr u=null;
  EntryPointDescr ep=null;
  AccumulateDescr ac=null;
  CollectDescr cs=null;
  FromDescr fm=null;
  d=null;
  try {
{
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2109);
      u=lhs_pattern();
      _fsp--;
      if (failed)       return d;
      if (backtracking == 0) {
        d=u;
      }
      int alt39=3;
      int LA39_0=input.LA(1);
      if ((LA39_0 == FROM)) {
        int LA39_1=input.LA(2);
        if (((LA39_1 >= PACKAGE && LA39_1 <= ID) || LA39_1 == GLOBAL || (LA39_1 >= QUERY && LA39_1 <= ATTRIBUTES) || LA39_1 == ENABLED || LA39_1 == SALIENCE || (LA39_1 >= DURATION && LA39_1 <= DIALECT) || LA39_1 == FROM || (LA39_1 >= ACCUMULATE && LA39_1 <= COLLECT) || (LA39_1 >= CONTAINS && LA39_1 <= MEMBEROF) || LA39_1 == IN || LA39_1 == THEN)) {
          alt39=2;
        }
 else         if ((LA39_1 == ENTRY_POINT) && (synpred6())) {
          alt39=1;
        }
      }
switch (alt39) {
case 1:
{
{
            match(input,FROM,FOLLOW_FROM_in_pattern_source2160);
            if (failed)             return d;
            pushFollow(FOLLOW_entrypoint_statement_in_pattern_source2164);
            ep=entrypoint_statement();
            _fsp--;
            if (failed)             return d;
            if (backtracking == 0) {
              if (d != null)               ((PatternDescr)d).setSource((PatternSourceDescr)ep);
            }
          }
        }
      break;
case 2:
{
      match(input,FROM,FOLLOW_FROM_in_pattern_source2184);
      if (failed)       return d;
      if (backtracking == 0) {
        location.setType(Location.LOCATION_LHS_FROM);
        location.setProperty(Location.LOCATION_FROM_CONTENT,"");
      }
      int alt38=3;
switch (input.LA(1)) {
case ACCUMULATE:
{
          alt38=1;
        }
      break;
case COLLECT:
{
      alt38=2;
    }
  break;
case PACKAGE:
case IMPORT:
case FUNCTION:
case EVENT:
case ID:
case GLOBAL:
case QUERY:
case END:
case TEMPLATE:
case RULE:
case WHEN:
case ATTRIBUTES:
case ENABLED:
case SALIENCE:
case DURATION:
case DIALECT:
case FROM:
case INIT:
case ACTION:
case REVERSE:
case RESULT:
case CONTAINS:
case EXCLUDES:
case MATCHES:
case SOUNDSLIKE:
case MEMBEROF:
case IN:
case THEN:
{
  alt38=3;
}
break;
default :
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("845:11: ( options {k=1; backtrack=true; } : (ac= accumulate_statement ) | (cs= collect_statement ) | (fm= from_statement ) )",38,0,input);
throw nvae;
}
switch (alt38) {
case 1:
{
{
pushFollow(FOLLOW_accumulate_statement_in_pattern_source2242);
ac=accumulate_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (d != null) ((PatternDescr)d).setSource((PatternSourceDescr)ac);
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_collect_statement_in_pattern_source2265);
cs=collect_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (d != null) ((PatternDescr)d).setSource((PatternSourceDescr)cs);
}
}
}
break;
case 3:
{
{
pushFollow(FOLLOW_from_statement_in_pattern_source2302);
fm=from_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (d != null) ((PatternDescr)d).setSource((PatternSourceDescr)fm);
}
}
}
break;
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
