{
  pattern_source_return retval=new pattern_source_return();
  retval.start=input.LT(1);
  Object root_0=null;
  lhs_pattern_return lhs_pattern162=null;
  over_clause_return over_clause163=null;
  from_key_return from_key164=null;
  accumulate_statement_return accumulate_statement165=null;
  collect_statement_return collect_statement166=null;
  entrypoint_statement_return entrypoint_statement167=null;
  from_source_return from_source168=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2395);
      lhs_pattern162=lhs_pattern();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,lhs_pattern162.getTree());
      int alt56=2;
      int LA56_0=input.LA(1);
      if ((LA56_0 == OVER)) {
        alt56=1;
      }
switch (alt56) {
case 1:
{
          pushFollow(FOLLOW_over_clause_in_pattern_source2399);
          over_clause163=over_clause();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,over_clause163.getTree());
        }
      break;
  }
  int alt58=2;
  int LA58_0=input.LA(1);
  if ((LA58_0 == ID)) {
    int LA58_1=input.LA(2);
    if ((LA58_1 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateNotWithBinding() && (validateIdentifierKey(DroolsSoftKeywords.NOT)))|| (validateNotWithBinding() && (validateIdentifierKey(DroolsSoftKeywords.NOT)))|| (validateNotWithBinding() && (validateIdentifierKey(DroolsSoftKeywords.NOT)))|| (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.OR))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))))) {
      int LA58_3=input.LA(3);
      if ((LA58_3 == SEMICOLON || LA58_3 == END || (LA58_3 >= COMMA && LA58_3 <= RIGHT_PAREN) || (LA58_3 >= DOUBLE_PIPE && LA58_3 <= DOUBLE_AMPER) || LA58_3 == THEN || LA58_3 == MISC) && ((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
        alt58=1;
      }
 else       if ((LA58_3 == DOT) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))|| (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
        int LA58_6=input.LA(4);
        if ((LA58_6 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))|| (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
          int LA58_10=input.LA(5);
          if ((LA58_10 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))|| (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
            int LA58_11=input.LA(6);
            if ((LA58_11 == RIGHT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.OR))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))))) {
              int LA58_14=input.LA(7);
              if ((LA58_14 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))|| (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
                int LA58_16=input.LA(8);
                if (((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
                  alt58=1;
                }
              }
 else               if (((LA58_14 >= SEMICOLON && LA58_14 <= DOT) || LA58_14 == END || (LA58_14 >= COMMA && LA58_14 <= RIGHT_PAREN) || (LA58_14 >= DOUBLE_PIPE && LA58_14 <= DOUBLE_AMPER) || LA58_14 == THEN) && ((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
                alt58=1;
              }
            }
 else             if (((LA58_11 >= VT_COMPILATION_UNIT && LA58_11 <= LEFT_SQUARE) || (LA58_11 >= THEN && LA58_11 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
              alt58=1;
            }
          }
 else           if ((LA58_10 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))|| (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
            int LA58_12=input.LA(6);
            if (((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
              alt58=1;
            }
          }
 else           if ((LA58_10 == DOT) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))|| (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
            int LA58_13=input.LA(6);
            if ((LA58_13 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))|| (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
              int LA58_15=input.LA(7);
              if (((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
                alt58=1;
              }
            }
          }
 else           if (((LA58_10 >= SEMICOLON && LA58_10 <= ID) || LA58_10 == END || (LA58_10 >= COMMA && LA58_10 <= RIGHT_PAREN) || (LA58_10 >= DOUBLE_PIPE && LA58_10 <= DOUBLE_AMPER) || LA58_10 == THEN) && ((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
            alt58=1;
          }
        }
      }
 else       if ((LA58_3 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.OR))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))))) {
        int LA58_8=input.LA(4);
        if (((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
          alt58=1;
        }
      }
 else       if ((LA58_3 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.NOT)) || (validateIdentifierKey(DroolsSoftKeywords.AND)) || (validateIdentifierKey(DroolsSoftKeywords.FROM))|| (validateIdentifierKey(DroolsSoftKeywords.EXISTS))|| (validateIdentifierKey(DroolsSoftKeywords.OR))))) {
        int LA58_9=input.LA(4);
        if (((validateIdentifierKey(DroolsSoftKeywords.FROM)))) {
          alt58=1;
        }
      }
    }
  }
switch (alt58) {
case 1:
{
      pushFollow(FOLLOW_from_key_in_pattern_source2409);
      from_key164=from_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       root_0=(Object)adaptor.becomeRoot(from_key164.getTree(),root_0);
      int alt57=4;
      int LA57_0=input.LA(1);
      if ((LA57_0 == ID)) {
        int LA57_1=input.LA(2);
        if ((LA57_1 == MISC) && ((validateIdentifierKey(DroolsSoftKeywords.ENTRY) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.POINT)))) {
          alt57=3;
        }
 else         if ((LA57_1 == LEFT_PAREN)) {
switch (input.LA(3)) {
case ID:
{
              int LA57_5=input.LA(4);
              if (((validateIdentifierKey(DroolsSoftKeywords.ACCUMULATE)))) {
                alt57=1;
              }
 else               if (((validateIdentifierKey(DroolsSoftKeywords.COLLECT)))) {
                alt57=2;
              }
 else               if ((true)) {
                alt57=4;
              }
 else {
                if (backtracking > 0) {
                  failed=true;
                  return retval;
                }
                NoViableAltException nvae=new NoViableAltException("639:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )",57,5,input);
                throw nvae;
              }
            }
          break;
case LEFT_PAREN:
{
          int LA57_6=input.LA(4);
          if (((validateIdentifierKey(DroolsSoftKeywords.ACCUMULATE)))) {
            alt57=1;
          }
 else           if ((true)) {
            alt57=4;
          }
 else {
            if (backtracking > 0) {
              failed=true;
              return retval;
            }
            NoViableAltException nvae=new NoViableAltException("639:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )",57,6,input);
            throw nvae;
          }
        }
      break;
case VT_COMPILATION_UNIT:
case VT_FUNCTION_IMPORT:
case VT_FACT:
case VT_CONSTRAINTS:
case VT_LABEL:
case VT_QUERY_ID:
case VT_TEMPLATE_ID:
case VT_TYPE_DECLARE_ID:
case VT_RULE_ID:
case VT_ENTRYPOINT_ID:
case VT_SLOT_ID:
case VT_SLOT:
case VT_RULE_ATTRIBUTES:
case VT_RHS_CHUNK:
case VT_CURLY_CHUNK:
case VT_SQUARE_CHUNK:
case VT_PAREN_CHUNK:
case VT_BEHAVIOR:
case VT_AND_IMPLICIT:
case VT_AND_PREFIX:
case VT_OR_PREFIX:
case VT_AND_INFIX:
case VT_OR_INFIX:
case VT_ACCUMULATE_INIT_CLAUSE:
case VT_ACCUMULATE_ID_CLAUSE:
case VT_FROM_SOURCE:
case VT_EXPRESSION_CHAIN:
case VT_PATTERN:
case VT_FACT_BINDING:
case VT_FACT_OR:
case VT_BIND_FIELD:
case VT_FIELD:
case VT_ACCESSOR_PATH:
case VT_ACCESSOR_ELEMENT:
case VT_DATA_TYPE:
case VT_PATTERN_TYPE:
case VT_PACKAGE_ID:
case VT_IMPORT_ID:
case VT_GLOBAL_ID:
case VT_FUNCTION_ID:
case VT_PARAM_LIST:
case VK_DATE_EFFECTIVE:
case VK_DATE_EXPIRES:
case VK_LOCK_ON_ACTIVE:
case VK_NO_LOOP:
case VK_AUTO_FOCUS:
case VK_ACTIVATION_GROUP:
case VK_AGENDA_GROUP:
case VK_RULEFLOW_GROUP:
case VK_DURATION:
case VK_DIALECT:
case VK_SALIENCE:
case VK_ENABLED:
case VK_ATTRIBUTES:
case VK_WHEN:
case VK_RULE:
case VK_IMPORT:
case VK_PACKAGE:
case VK_TEMPLATE:
case VK_QUERY:
case VK_DECLARE:
case VK_FUNCTION:
case VK_GLOBAL:
case VK_EVAL:
case VK_CONTAINS:
case VK_MATCHES:
case VK_EXCLUDES:
case VK_SOUNDSLIKE:
case VK_MEMBEROF:
case VK_ENTRY_POINT:
case VK_NOT:
case VK_IN:
case VK_OR:
case VK_AND:
case VK_EXISTS:
case VK_FORALL:
case VK_FROM:
case VK_ACCUMULATE:
case VK_INIT:
case VK_ACTION:
case VK_REVERSE:
case VK_RESULT:
case VK_COLLECT:
case SEMICOLON:
case DOT:
case DOT_STAR:
case END:
case STRING:
case COMMA:
case RIGHT_PAREN:
case AT:
case COLON:
case EQUALS:
case BOOL:
case INT:
case DOUBLE_PIPE:
case DOUBLE_AMPER:
case OVER:
case ARROW:
case EQUAL:
case GREATER:
case GREATER_EQUAL:
case LESS:
case LESS_EQUAL:
case NOT_EQUAL:
case GRAVE_ACCENT:
case FLOAT:
case NULL:
case LEFT_SQUARE:
case RIGHT_SQUARE:
case THEN:
case LEFT_CURLY:
case RIGHT_CURLY:
case MISC:
case EOL:
case WS:
case EscapeSequence:
case HexDigit:
case UnicodeEscape:
case OctalEscape:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
{
      alt57=4;
    }
  break;
default :
if (backtracking > 0) {
  failed=true;
  return retval;
}
NoViableAltException nvae=new NoViableAltException("639:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )",57,3,input);
throw nvae;
}
}
 else if (((LA57_1 >= SEMICOLON && LA57_1 <= DOT) || LA57_1 == END || (LA57_1 >= COMMA && LA57_1 <= RIGHT_PAREN) || (LA57_1 >= DOUBLE_PIPE && LA57_1 <= DOUBLE_AMPER) || LA57_1 == THEN)) {
alt57=4;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("639:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )",57,1,input);
throw nvae;
}
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("639:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )",57,0,input);
throw nvae;
}
switch (alt57) {
case 1:
{
pushFollow(FOLLOW_accumulate_statement_in_pattern_source2425);
accumulate_statement165=accumulate_statement();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,accumulate_statement165.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_collect_statement_in_pattern_source2441);
collect_statement166=collect_statement();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,collect_statement166.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_entrypoint_statement_in_pattern_source2458);
entrypoint_statement167=entrypoint_statement();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,entrypoint_statement167.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_from_source_in_pattern_source2474);
from_source168=from_source();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,from_source168.getTree());
}
break;
}
}
break;
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
