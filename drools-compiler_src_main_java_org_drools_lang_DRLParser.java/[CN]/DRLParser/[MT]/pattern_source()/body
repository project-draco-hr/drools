{
  DRLParser.pattern_source_return retval=new DRLParser.pattern_source_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token FROM172=null;
  DRLParser.lhs_pattern_return lhs_pattern170=null;
  DRLParser.over_clause_return over_clause171=null;
  DRLParser.accumulate_statement_return accumulate_statement173=null;
  DRLParser.collect_statement_return collect_statement174=null;
  DRLParser.entrypoint_statement_return entrypoint_statement175=null;
  DRLParser.from_source_return from_source176=null;
  Object FROM172_tree=null;
  boolean isFailed=true;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2965);
      lhs_pattern170=lhs_pattern();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,lhs_pattern170.getTree());
      int alt51=2;
      int LA51_0=input.LA(1);
      if ((LA51_0 == OVER)) {
        alt51=1;
      }
switch (alt51) {
case 1:
{
          pushFollow(FOLLOW_over_clause_in_pattern_source2969);
          over_clause171=over_clause();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,over_clause171.getTree());
        }
      break;
  }
  int alt53=2;
  int LA53_0=input.LA(1);
  if ((LA53_0 == FROM)) {
    alt53=1;
  }
switch (alt53) {
case 1:
{
      FROM172=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source2979);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        FROM172_tree=(Object)adaptor.create(FROM172);
        root_0=(Object)adaptor.becomeRoot(FROM172_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(FROM172,DroolsEditorType.KEYWORD);
        helper.emit(Location.LOCATION_LHS_FROM);
      }
      int alt52=4;
      alt52=dfa52.predict(input);
switch (alt52) {
case 1:
{
          pushFollow(FOLLOW_accumulate_statement_in_pattern_source2999);
          accumulate_statement173=accumulate_statement();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,accumulate_statement173.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_collect_statement_in_pattern_source3015);
      collect_statement174=collect_statement();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,collect_statement174.getTree());
    }
  break;
case 3:
{
  pushFollow(FOLLOW_entrypoint_statement_in_pattern_source3032);
  entrypoint_statement175=entrypoint_statement();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,entrypoint_statement175.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_from_source_in_pattern_source3048);
from_source176=from_source();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,from_source176.getTree());
}
break;
}
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
helper.emit(true,Location.LOCATION_LHS_FROM_ACCUMULATE);
}
 else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
helper.emit(true,Location.LOCATION_LHS_FROM_COLLECT);
}
}
return retval;
}
