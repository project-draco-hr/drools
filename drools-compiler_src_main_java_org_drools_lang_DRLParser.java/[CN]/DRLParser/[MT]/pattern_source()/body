{
  DRLParser.pattern_source_return retval=new DRLParser.pattern_source_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token FROM178=null;
  DRLParser.lhs_pattern_return lhs_pattern176=null;
  DRLParser.over_clause_return over_clause177=null;
  DRLParser.accumulate_statement_return accumulate_statement179=null;
  DRLParser.collect_statement_return collect_statement180=null;
  DRLParser.entrypoint_statement_return entrypoint_statement181=null;
  DRLParser.from_source_return from_source182=null;
  Object FROM178_tree=null;
  boolean isFailed=true;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2983);
      lhs_pattern176=lhs_pattern();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,lhs_pattern176.getTree());
      int alt53=2;
      int LA53_0=input.LA(1);
      if ((LA53_0 == OVER)) {
        alt53=1;
      }
switch (alt53) {
case 1:
{
          pushFollow(FOLLOW_over_clause_in_pattern_source2987);
          over_clause177=over_clause();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,over_clause177.getTree());
        }
      break;
  }
  int alt55=2;
  int LA55_0=input.LA(1);
  if ((LA55_0 == FROM)) {
    alt55=1;
  }
switch (alt55) {
case 1:
{
      FROM178=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source2997);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        FROM178_tree=(Object)adaptor.create(FROM178);
        root_0=(Object)adaptor.becomeRoot(FROM178_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(FROM178,DroolsEditorType.KEYWORD);
        helper.emit(Location.LOCATION_LHS_FROM);
      }
      int alt54=4;
      alt54=dfa54.predict(input);
switch (alt54) {
case 1:
{
          pushFollow(FOLLOW_accumulate_statement_in_pattern_source3017);
          accumulate_statement179=accumulate_statement();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,accumulate_statement179.getTree());
        }
      break;
case 2:
{
      pushFollow(FOLLOW_collect_statement_in_pattern_source3033);
      collect_statement180=collect_statement();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,collect_statement180.getTree());
    }
  break;
case 3:
{
  pushFollow(FOLLOW_entrypoint_statement_in_pattern_source3050);
  entrypoint_statement181=entrypoint_statement();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   adaptor.addChild(root_0,entrypoint_statement181.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_from_source_in_pattern_source3066);
from_source182=from_source();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,from_source182.getTree());
}
break;
}
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
helper.emit(true,Location.LOCATION_LHS_FROM_ACCUMULATE);
}
 else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
helper.emit(input.LT(1),DroolsEditorType.KEYWORD);
helper.emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
helper.emit(true,Location.LOCATION_LHS_FROM_COLLECT);
}
}
return retval;
}
