{
  DRLParser.pattern_source_return retval=new DRLParser.pattern_source_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token FROM167=null;
  DRLParser.lhs_pattern_return lhs_pattern165=null;
  DRLParser.over_clause_return over_clause166=null;
  DRLParser.accumulate_statement_return accumulate_statement168=null;
  DRLParser.collect_statement_return collect_statement169=null;
  DRLParser.entrypoint_statement_return entrypoint_statement170=null;
  DRLParser.from_source_return from_source171=null;
  Object FROM167_tree=null;
  boolean isFailed=true;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2805);
      lhs_pattern165=lhs_pattern();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,lhs_pattern165.getTree());
      int alt61=2;
      int LA61_0=input.LA(1);
      if ((LA61_0 == OVER)) {
        alt61=1;
      }
switch (alt61) {
case 1:
{
          pushFollow(FOLLOW_over_clause_in_pattern_source2809);
          over_clause166=over_clause();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,over_clause166.getTree());
        }
      break;
  }
  int alt63=2;
  int LA63_0=input.LA(1);
  if ((LA63_0 == FROM)) {
    alt63=1;
  }
switch (alt63) {
case 1:
{
      FROM167=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source2819);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        FROM167_tree=(Object)adaptor.create(FROM167);
        root_0=(Object)adaptor.becomeRoot(FROM167_tree,root_0);
      }
      if (state.backtracking == 0) {
        emit(FROM167,DroolsEditorType.KEYWORD);
        emit(Location.LOCATION_LHS_FROM);
      }
      int alt62=4;
switch (input.LA(1)) {
case ACCUMULATE:
{
          alt62=1;
        }
      break;
case COLLECT:
{
      alt62=2;
    }
  break;
case ID:
{
  int LA62_3=input.LA(2);
  if ((LA62_3 == MISC) && (((validateIdentifierKey(DroolsSoftKeywords.ENTRY) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.POINT))))) {
    alt62=3;
  }
 else   if (((LA62_3 >= SEMICOLON && LA62_3 <= DOT) || (LA62_3 >= LEFT_PAREN && LA62_3 <= RIGHT_PAREN) || (LA62_3 >= DOUBLE_PIPE && LA62_3 <= DOUBLE_AMPER)|| LA62_3 == THEN)) {
    alt62=4;
  }
 else {
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("",62,3,input);
    throw nvae;
  }
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",62,0,input);
throw nvae;
}
switch (alt62) {
case 1:
{
pushFollow(FOLLOW_accumulate_statement_in_pattern_source2839);
accumulate_statement168=accumulate_statement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,accumulate_statement168.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_collect_statement_in_pattern_source2855);
collect_statement169=collect_statement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,collect_statement169.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_entrypoint_statement_in_pattern_source2872);
entrypoint_statement170=entrypoint_statement();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,entrypoint_statement170.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_from_source_in_pattern_source2888);
from_source171=from_source();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,from_source171.getTree());
}
break;
}
}
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
emit(true,Location.LOCATION_LHS_FROM_ACCUMULATE);
}
 else if (isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
emit(true,Location.LOCATION_LHS_FROM_COLLECT);
}
}
return retval;
}
