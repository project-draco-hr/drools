{
  BaseDescr d=null;
  BaseDescr u=null;
  identifier_return type=null;
  paren_chunk_return param=null;
  EntryPointDescr ep=null;
  AccumulateDescr ac=null;
  CollectDescr cs=null;
  FromDescr fm=null;
  d=null;
  try {
{
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2369);
      u=lhs_pattern();
      _fsp--;
      if (failed)       return d;
      if (backtracking == 0) {
        d=u;
      }
      int alt43=2;
      int LA43_0=input.LA(1);
      if ((LA43_0 == OVER)) {
        alt43=1;
      }
switch (alt43) {
case 1:
{
          match(input,OVER,FOLLOW_OVER_in_pattern_source2384);
          if (failed)           return d;
          int cnt42=0;
          loop42:           do {
            int alt42=2;
            int LA42_0=input.LA(1);
            if ((LA42_0 == WINDOW)) {
              alt42=1;
            }
switch (alt42) {
case 1:
{
                match(input,WINDOW,FOLLOW_WINDOW_in_pattern_source2390);
                if (failed)                 return d;
                match(input,COLON,FOLLOW_COLON_in_pattern_source2392);
                if (failed)                 return d;
                pushFollow(FOLLOW_identifier_in_pattern_source2396);
                type=identifier();
                _fsp--;
                if (failed)                 return d;
                pushFollow(FOLLOW_paren_chunk_in_pattern_source2400);
                param=paren_chunk();
                _fsp--;
                if (failed)                 return d;
                if (backtracking == 0) {
                  SlidingWindowDescr window=new SlidingWindowDescr(input.toString(type.start,type.stop),getString(input.toString(param.start,param.stop)).trim());
                  ((PatternDescr)d).addBehavior(window);
                }
              }
            break;
default :
          if (cnt42 >= 1)           break loop42;
        if (backtracking > 0) {
          failed=true;
          return d;
        }
      EarlyExitException eee=new EarlyExitException(42,input);
    throw eee;
}
cnt42++;
}
 while (true);
}
break;
}
int alt45=3;
int LA45_0=input.LA(1);
if ((LA45_0 == FROM)) {
int LA45_1=input.LA(2);
if ((LA45_1 == ENTRY_POINT) && (synpred6())) {
alt45=1;
}
 else if (((LA45_1 >= PACKAGE && LA45_1 <= ID) || LA45_1 == GLOBAL || LA45_1 == END || (LA45_1 >= QUERY && LA45_1 <= ATTRIBUTES) || LA45_1 == ENABLED || LA45_1 == SALIENCE || (LA45_1 >= DURATION && LA45_1 <= DIALECT) || LA45_1 == FROM || (LA45_1 >= ACCUMULATE && LA45_1 <= COLLECT) || LA45_1 == IN || (LA45_1 >= THEN && LA45_1 <= EVENT))) {
alt45=2;
}
}
switch (alt45) {
case 1:
{
{
match(input,FROM,FOLLOW_FROM_in_pattern_source2471);
if (failed) return d;
pushFollow(FOLLOW_entrypoint_statement_in_pattern_source2475);
ep=entrypoint_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (d != null) ((PatternDescr)d).setSource((PatternSourceDescr)ep);
}
}
}
break;
case 2:
{
match(input,FROM,FOLLOW_FROM_in_pattern_source2495);
if (failed) return d;
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_FROM);
location.setProperty(Location.LOCATION_FROM_CONTENT,"");
}
int alt44=3;
switch (input.LA(1)) {
case ACCUMULATE:
{
alt44=1;
}
break;
case COLLECT:
{
alt44=2;
}
break;
case PACKAGE:
case IMPORT:
case FUNCTION:
case ID:
case GLOBAL:
case END:
case QUERY:
case TEMPLATE:
case RULE:
case WHEN:
case ATTRIBUTES:
case ENABLED:
case SALIENCE:
case DURATION:
case DIALECT:
case FROM:
case INIT:
case ACTION:
case REVERSE:
case RESULT:
case IN:
case THEN:
case EVENT:
{
alt44=3;
}
break;
default :
if (backtracking > 0) {
failed=true;
return d;
}
NoViableAltException nvae=new NoViableAltException("880:11: ( options {k=1; backtrack=true; } : (ac= accumulate_statement ) | (cs= collect_statement ) | (fm= from_statement ) )",44,0,input);
throw nvae;
}
switch (alt44) {
case 1:
{
{
pushFollow(FOLLOW_accumulate_statement_in_pattern_source2553);
ac=accumulate_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (d != null) ((PatternDescr)d).setSource((PatternSourceDescr)ac);
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_collect_statement_in_pattern_source2576);
cs=collect_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (d != null) ((PatternDescr)d).setSource((PatternSourceDescr)cs);
}
}
}
break;
case 3:
{
{
pushFollow(FOLLOW_from_statement_in_pattern_source2613);
fm=from_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (d != null) ((PatternDescr)d).setSource((PatternSourceDescr)fm);
}
}
}
break;
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
