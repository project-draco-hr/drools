{
  pattern_source_return retval=new pattern_source_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token FROM160=null;
  lhs_pattern_return lhs_pattern158=null;
  over_clause_return over_clause159=null;
  accumulate_statement_return accumulate_statement161=null;
  collect_statement_return collect_statement162=null;
  entrypoint_statement_return entrypoint_statement163=null;
  from_source_return from_source164=null;
  Object FROM160_tree=null;
  boolean isFailed=true;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2707);
      lhs_pattern158=lhs_pattern();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       adaptor.addChild(root_0,lhs_pattern158.getTree());
      int alt55=2;
      int LA55_0=input.LA(1);
      if ((LA55_0 == OVER)) {
        alt55=1;
      }
switch (alt55) {
case 1:
{
          pushFollow(FOLLOW_over_clause_in_pattern_source2711);
          over_clause159=over_clause();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           adaptor.addChild(root_0,over_clause159.getTree());
        }
      break;
  }
  int alt57=2;
  int LA57_0=input.LA(1);
  if ((LA57_0 == FROM)) {
    alt57=1;
  }
switch (alt57) {
case 1:
{
      FROM160=(Token)input.LT(1);
      match(input,FROM,FOLLOW_FROM_in_pattern_source2721);
      if (failed)       return retval;
      if (backtracking == 0) {
        FROM160_tree=(Object)adaptor.create(FROM160);
        root_0=(Object)adaptor.becomeRoot(FROM160_tree,root_0);
      }
      if (backtracking == 0) {
        emit(FROM160,DroolsEditorType.KEYWORD);
        emit(Location.LOCATION_LHS_FROM);
      }
      int alt56=4;
switch (input.LA(1)) {
case ACCUMULATE:
{
          alt56=1;
        }
      break;
case COLLECT:
{
      alt56=2;
    }
  break;
case ID:
{
  int LA56_3=input.LA(2);
  if ((LA56_3 == MISC) && ((validateIdentifierKey(DroolsSoftKeywords.ENTRY) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.POINT)))) {
    alt56=3;
  }
 else   if (((LA56_3 >= SEMICOLON && LA56_3 <= DOT) || LA56_3 == END || (LA56_3 >= LEFT_PAREN && LA56_3 <= RIGHT_PAREN) || (LA56_3 >= DOUBLE_PIPE && LA56_3 <= DOUBLE_AMPER) || LA56_3 == INIT || LA56_3 == THEN)) {
    alt56=4;
  }
 else {
    if (backtracking > 0) {
      failed=true;
      return retval;
    }
    NoViableAltException nvae=new NoViableAltException("915:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )",56,3,input);
    throw nvae;
  }
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("915:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )",56,0,input);
throw nvae;
}
switch (alt56) {
case 1:
{
pushFollow(FOLLOW_accumulate_statement_in_pattern_source2741);
accumulate_statement161=accumulate_statement();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,accumulate_statement161.getTree());
}
break;
case 2:
{
pushFollow(FOLLOW_collect_statement_in_pattern_source2757);
collect_statement162=collect_statement();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,collect_statement162.getTree());
}
break;
case 3:
{
pushFollow(FOLLOW_entrypoint_statement_in_pattern_source2774);
entrypoint_statement163=entrypoint_statement();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,entrypoint_statement163.getTree());
}
break;
case 4:
{
pushFollow(FOLLOW_from_source_in_pattern_source2790);
from_source164=from_source();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,from_source164.getTree());
}
break;
}
}
break;
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (backtracking == 0) {
isFailed=false;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
emit(true,Location.LOCATION_LHS_FROM_ACCUMULATE);
}
 else if (isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
emit(input.LT(1),DroolsEditorType.KEYWORD);
emit(input.LT(2),DroolsEditorType.SYMBOL);
input.consume();
emit(true,Location.LOCATION_LHS_FROM_COLLECT);
}
}
return retval;
}
