{
  BaseDescr d=null;
  BaseDescr u=null;
  AccumulateDescr ac=null;
  CollectDescr cs=null;
  FromDescr fm=null;
  d=null;
  try {
{
      pushFollow(FOLLOW_lhs_pattern_in_pattern_source2089);
      u=lhs_pattern();
      _fsp--;
      if (failed)       return d;
      if (backtracking == 0) {
        d=u;
      }
      int alt43=2;
      int LA43_0=input.LA(1);
      if ((LA43_0 == FROM)) {
        alt43=1;
      }
switch (alt43) {
case 1:
{
          match(input,FROM,FOLLOW_FROM_in_pattern_source2101);
          if (failed)           return d;
          if (backtracking == 0) {
            location.setType(Location.LOCATION_LHS_FROM);
            location.setProperty(Location.LOCATION_FROM_CONTENT,"");
          }
          int alt42=3;
switch (input.LA(1)) {
case ACCUMULATE:
{
              alt42=1;
            }
          break;
case COLLECT:
{
          alt42=2;
        }
      break;
case ATTRIBUTES:
case PACKAGE:
case IMPORT:
case FUNCTION:
case ID:
case GLOBAL:
case QUERY:
case END:
case TEMPLATE:
case RULE:
case WHEN:
case ENABLED:
case SALIENCE:
case DURATION:
case FROM:
case INIT:
case ACTION:
case REVERSE:
case RESULT:
case CONTAINS:
case EXCLUDES:
case MATCHES:
case MEMBEROF:
case IN:
case THEN:
{
      alt42=3;
    }
  break;
default :
if (backtracking > 0) {
  failed=true;
  return d;
}
NoViableAltException nvae=new NoViableAltException("804:11: ( options {k=1; } : (ac= accumulate_statement ) | (cs= collect_statement ) | (fm= from_statement ) )",42,0,input);
throw nvae;
}
switch (alt42) {
case 1:
{
{
pushFollow(FOLLOW_accumulate_statement_in_pattern_source2157);
ac=accumulate_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
((PatternDescr)d).setSource((PatternSourceDescr)ac);
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_collect_statement_in_pattern_source2180);
cs=collect_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
((PatternDescr)d).setSource((PatternSourceDescr)cs);
}
}
}
break;
case 3:
{
{
pushFollow(FOLLOW_from_statement_in_pattern_source2204);
fm=from_statement();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
((PatternDescr)d).setSource((PatternSourceDescr)fm);
}
}
}
break;
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
