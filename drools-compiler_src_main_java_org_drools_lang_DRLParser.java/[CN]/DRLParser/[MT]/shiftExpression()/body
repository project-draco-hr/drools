{
  DRLParser.shiftExpression_return retval=new DRLParser.shiftExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.additiveExpression_return additiveExpression387=null;
  DRLParser.shiftOp_return shiftOp388=null;
  DRLParser.additiveExpression_return additiveExpression389=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_additiveExpression_in_shiftExpression6415);
      additiveExpression387=additiveExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,additiveExpression387.getTree());
      loop131:       do {
        int alt131=2;
switch (input.LA(1)) {
case SHIFT_LEFT:
{
            int LA131_2=input.LA(2);
            if ((LA131_2 == ID || LA131_2 == STRING || (LA131_2 >= BOOL && LA131_2 <= LEFT_PAREN) || LA131_2 == DECIMAL || LA131_2 == LESS || LA131_2 == LEFT_SQUARE || (LA131_2 >= NULL && LA131_2 <= FLOAT) || (LA131_2 >= INCR && LA131_2 <= NEGATION))) {
              alt131=1;
            }
          }
        break;
case SHIFT_RIGHT:
{
        int LA131_3=input.LA(2);
        if ((LA131_3 == ID || LA131_3 == STRING || (LA131_3 >= BOOL && LA131_3 <= LEFT_PAREN) || LA131_3 == DECIMAL || LA131_3 == LESS || LA131_3 == LEFT_SQUARE || (LA131_3 >= NULL && LA131_3 <= FLOAT) || (LA131_3 >= INCR && LA131_3 <= NEGATION))) {
          alt131=1;
        }
      }
    break;
case SHIFT_RIGHT_UNSIG:
{
    int LA131_4=input.LA(2);
    if ((LA131_4 == ID || LA131_4 == STRING || (LA131_4 >= BOOL && LA131_4 <= LEFT_PAREN) || LA131_4 == DECIMAL || LA131_4 == LESS || LA131_4 == LEFT_SQUARE || (LA131_4 >= NULL && LA131_4 <= FLOAT) || (LA131_4 >= INCR && LA131_4 <= NEGATION))) {
      alt131=1;
    }
  }
break;
}
switch (alt131) {
case 1:
{
pushFollow(FOLLOW_shiftOp_in_shiftExpression6419);
shiftOp388=shiftOp();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,shiftOp388.getTree());
pushFollow(FOLLOW_additiveExpression_in_shiftExpression6421);
additiveExpression389=additiveExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,additiveExpression389.getTree());
}
break;
default :
break loop131;
}
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
