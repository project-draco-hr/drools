{
  DRLParser.shiftExpression_return retval=new DRLParser.shiftExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.additiveExpression_return additiveExpression515=null;
  DRLParser.shiftOp_return shiftOp516=null;
  DRLParser.additiveExpression_return additiveExpression517=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_additiveExpression_in_shiftExpression7236);
      additiveExpression515=additiveExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,additiveExpression515.getTree());
      loop162:       do {
        int alt162=2;
switch (input.LA(1)) {
case SHIFT_LEFT:
{
            int LA162_2=input.LA(2);
            if ((LA162_2 == ID || LA162_2 == STRING || (LA162_2 >= BOOL && LA162_2 <= LEFT_PAREN) || LA162_2 == DECIMAL || LA162_2 == LESS || LA162_2 == LEFT_SQUARE || (LA162_2 >= NULL && LA162_2 <= FLOAT) || (LA162_2 >= INCR && LA162_2 <= NEGATION))) {
              alt162=1;
            }
          }
        break;
case SHIFT_RIGHT:
{
        int LA162_3=input.LA(2);
        if ((LA162_3 == ID || LA162_3 == STRING || (LA162_3 >= BOOL && LA162_3 <= LEFT_PAREN) || LA162_3 == DECIMAL || LA162_3 == LESS || LA162_3 == LEFT_SQUARE || (LA162_3 >= NULL && LA162_3 <= FLOAT) || (LA162_3 >= INCR && LA162_3 <= NEGATION))) {
          alt162=1;
        }
      }
    break;
case SHIFT_RIGHT_UNSIG:
{
    int LA162_4=input.LA(2);
    if ((LA162_4 == ID || LA162_4 == STRING || (LA162_4 >= BOOL && LA162_4 <= LEFT_PAREN) || LA162_4 == DECIMAL || LA162_4 == LESS || LA162_4 == LEFT_SQUARE || (LA162_4 >= NULL && LA162_4 <= FLOAT) || (LA162_4 >= INCR && LA162_4 <= NEGATION))) {
      alt162=1;
    }
  }
break;
}
switch (alt162) {
case 1:
{
pushFollow(FOLLOW_shiftOp_in_shiftExpression7240);
shiftOp516=shiftOp();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,shiftOp516.getTree());
pushFollow(FOLLOW_additiveExpression_in_shiftExpression7242);
additiveExpression517=additiveExpression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,additiveExpression517.getTree());
}
break;
default :
break loop162;
}
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
