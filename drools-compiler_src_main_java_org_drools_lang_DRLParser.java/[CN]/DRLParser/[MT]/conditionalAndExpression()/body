{
  DRLParser.conditionalAndExpression_return retval=new DRLParser.conditionalAndExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOUBLE_AMPER494=null;
  DRLParser.inclusiveOrExpression_return inclusiveOrExpression493=null;
  DRLParser.inclusiveOrExpression_return inclusiveOrExpression495=null;
  Object DOUBLE_AMPER494_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7007);
      inclusiveOrExpression493=inclusiveOrExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,inclusiveOrExpression493.getTree());
      loop155:       do {
        int alt155=2;
        int LA155_0=input.LA(1);
        if ((LA155_0 == DOUBLE_AMPER)) {
          alt155=1;
        }
switch (alt155) {
case 1:
{
            DOUBLE_AMPER494=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression7011);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              DOUBLE_AMPER494_tree=(Object)adaptor.create(DOUBLE_AMPER494);
              adaptor.addChild(root_0,DOUBLE_AMPER494_tree);
            }
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7013);
            inclusiveOrExpression495=inclusiveOrExpression();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,inclusiveOrExpression495.getTree());
          }
        break;
default :
      break loop155;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
