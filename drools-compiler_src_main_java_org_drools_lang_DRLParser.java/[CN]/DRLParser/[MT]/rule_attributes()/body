{
  rule_attributes_return retval=new rule_attributes_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON79=null;
  Token COMMA81=null;
  rule_attribute_return attr=null;
  attributes_key_return attributes_key78=null;
  rule_attribute_return rule_attribute80=null;
  Object COLON79_tree=null;
  Object COMMA81_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
  RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
  try {
{
      int alt32=2;
      int LA32_0=input.LA(1);
      if ((LA32_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateIdentifierKey(DroolsSoftKeywords.DIALECT)) || (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))))) {
        int LA32_1=input.LA(2);
        if ((LA32_1 == COLON) && ((validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))) {
          alt32=1;
        }
      }
switch (alt32) {
case 1:
{
          pushFollow(FOLLOW_attributes_key_in_rule_attributes1457);
          attributes_key78=attributes_key();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_attributes_key.add(attributes_key78.getTree());
          COLON79=(Token)input.LT(1);
          match(input,COLON,FOLLOW_COLON_in_rule_attributes1459);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COLON.add(COLON79);
        }
      break;
  }
  pushFollow(FOLLOW_rule_attribute_in_rule_attributes1464);
  rule_attribute80=rule_attribute();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_rule_attribute.add(rule_attribute80.getTree());
  loop34:   do {
    int alt34=2;
    int LA34_0=input.LA(1);
    if ((LA34_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.DIALECT)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))))) {
      int LA34_1=input.LA(2);
      if ((LA34_1 == MISC) && (((validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))))) {
        alt34=1;
      }
 else       if ((LA34_1 == INT) && (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)) || (validateIdentifierKey(DroolsSoftKeywords.DURATION))))) {
        alt34=1;
      }
 else       if ((LA34_1 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
        int LA34_6=input.LA(3);
        if ((LA34_6 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
          int LA34_10=input.LA(4);
          if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
            alt34=1;
          }
        }
 else         if ((LA34_6 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
          int LA34_11=input.LA(4);
          if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
            alt34=1;
          }
        }
 else         if (((LA34_6 >= VT_COMPILATION_UNIT && LA34_6 <= SEMICOLON) || (LA34_6 >= DOT && LA34_6 <= STRING) || (LA34_6 >= COMMA && LA34_6 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
          alt34=1;
        }
      }
 else       if ((LA34_1 == BOOL) && ((validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) {
        alt34=1;
      }
 else       if ((LA34_1 == STRING) && ((validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) {
        alt34=1;
      }
    }
 else     if ((LA34_0 == COMMA)) {
      alt34=1;
    }
switch (alt34) {
case 1:
{
        int alt33=2;
        int LA33_0=input.LA(1);
        if ((LA33_0 == COMMA)) {
          alt33=1;
        }
switch (alt33) {
case 1:
{
            COMMA81=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1468);
            if (failed)             return retval;
            if (backtracking == 0)             stream_COMMA.add(COMMA81);
          }
        break;
    }
    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1473);
    attr=rule_attribute();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     stream_rule_attribute.add(attr.getTree());
  }
break;
default :
break loop34;
}
}
 while (true);
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_RULE_ATTRIBUTES,"VT_RULE_ATTRIBUTES"),root_1);
if (stream_attributes_key.hasNext()) {
adaptor.addChild(root_1,stream_attributes_key.next());
}
stream_attributes_key.reset();
if (!(stream_rule_attribute.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_rule_attribute.hasNext()) {
adaptor.addChild(root_1,stream_rule_attribute.next());
}
stream_rule_attribute.reset();
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
