{
  DRLParser.rule_attributes_return retval=new DRLParser.rule_attributes_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON78=null;
  Token COMMA80=null;
  DRLParser.rule_attribute_return attr=null;
  DRLParser.attributes_key_return attributes_key77=null;
  DRLParser.rule_attribute_return rule_attribute79=null;
  Object COLON78_tree=null;
  Object COMMA80_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
  RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
  try {
{
      int alt34=2;
      int LA34_0=input.LA(1);
      if ((LA34_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))) || ((validateIdentifierKey(DroolsSoftKeywords.DIALECT))) || ((validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP)))|| ((validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE)))|| ((validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)))|| ((validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)))|| ((validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))|| ((validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS)))))) {
        int LA34_1=input.LA(2);
        if ((LA34_1 == COLON) && (((validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {
          alt34=1;
        }
      }
switch (alt34) {
case 1:
{
          pushFollow(FOLLOW_attributes_key_in_rule_attributes1584);
          attributes_key77=attributes_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_attributes_key.add(attributes_key77.getTree());
          COLON78=(Token)match(input,COLON,FOLLOW_COLON_in_rule_attributes1586);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_COLON.add(COLON78);
          if (state.backtracking == 0) {
            emit(COLON78,DroolsEditorType.SYMBOL);
          }
        }
      break;
  }
  pushFollow(FOLLOW_rule_attribute_in_rule_attributes1596);
  rule_attribute79=rule_attribute();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_rule_attribute.add(rule_attribute79.getTree());
  loop36:   do {
    int alt36=2;
    int LA36_0=input.LA(1);
    if ((LA36_0 == ID || LA36_0 == COMMA)) {
      alt36=1;
    }
switch (alt36) {
case 1:
{
        int alt35=2;
        int LA35_0=input.LA(1);
        if ((LA35_0 == COMMA)) {
          alt35=1;
        }
switch (alt35) {
case 1:
{
            COMMA80=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1600);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_COMMA.add(COMMA80);
          }
        break;
    }
    if (state.backtracking == 0) {
      emit(COMMA80,DroolsEditorType.SYMBOL);
    }
    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1607);
    attr=rule_attribute();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_rule_attribute.add(attr.getTree());
  }
break;
default :
break loop36;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_RULE_ATTRIBUTES,"VT_RULE_ATTRIBUTES"),root_1);
if (stream_attributes_key.hasNext()) {
adaptor.addChild(root_1,stream_attributes_key.nextTree());
}
stream_attributes_key.reset();
if (!(stream_rule_attribute.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_rule_attribute.hasNext()) {
adaptor.addChild(root_1,stream_rule_attribute.nextTree());
}
stream_rule_attribute.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
