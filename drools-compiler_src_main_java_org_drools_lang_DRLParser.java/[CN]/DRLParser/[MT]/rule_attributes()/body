{
  DRLParser.rule_attributes_return retval=new DRLParser.rule_attributes_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON70=null;
  Token COMMA72=null;
  DRLParser.rule_attribute_return attr=null;
  DRLParser.attributes_key_return attributes_key69=null;
  DRLParser.rule_attribute_return rule_attribute71=null;
  Object COLON70_tree=null;
  Object COMMA72_tree=null;
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
  RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
  try {
{
      int alt27=2;
      int LA27_0=input.LA(1);
      if ((LA27_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))))) {
        int LA27_1=input.LA(2);
        if ((LA27_1 == COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {
          alt27=1;
        }
      }
switch (alt27) {
case 1:
{
          pushFollow(FOLLOW_attributes_key_in_rule_attributes1698);
          attributes_key69=attributes_key();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_attributes_key.add(attributes_key69.getTree());
          COLON70=(Token)match(input,COLON,FOLLOW_COLON_in_rule_attributes1700);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_COLON.add(COLON70);
          if (state.backtracking == 0) {
            helper.emit(COLON70,DroolsEditorType.SYMBOL);
          }
        }
      break;
  }
  pushFollow(FOLLOW_rule_attribute_in_rule_attributes1710);
  rule_attribute71=rule_attribute();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_rule_attribute.add(rule_attribute71.getTree());
  loop29:   do {
    int alt29=2;
    int LA29_0=input.LA(1);
    if ((LA29_0 == ID || LA29_0 == COMMA)) {
      alt29=1;
    }
switch (alt29) {
case 1:
{
        int alt28=2;
        int LA28_0=input.LA(1);
        if ((LA28_0 == COMMA)) {
          alt28=1;
        }
switch (alt28) {
case 1:
{
            COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1714);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_COMMA.add(COMMA72);
          }
        break;
    }
    if (state.backtracking == 0) {
      helper.emit(COMMA72,DroolsEditorType.SYMBOL);
    }
    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1721);
    attr=rule_attribute();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_rule_attribute.add(attr.getTree());
  }
break;
default :
break loop29;
}
}
 while (true);
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_RULE_ATTRIBUTES,"VT_RULE_ATTRIBUTES"),root_1);
if (stream_attributes_key.hasNext()) {
adaptor.addChild(root_1,stream_attributes_key.nextTree());
}
stream_attributes_key.reset();
if (!(stream_rule_attribute.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_rule_attribute.hasNext()) {
adaptor.addChild(root_1,stream_rule_attribute.nextTree());
}
stream_rule_attribute.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
