{
  rule_attributes_return retval=new rule_attributes_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COLON63=null;
  Token COMMA65=null;
  rule_attribute_return attr=null;
  attributes_key_return attributes_key62=null;
  rule_attribute_return rule_attribute64=null;
  Object COLON63_tree=null;
  Object COMMA65_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
  RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
  RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
  try {
{
      int alt28=2;
      int LA28_0=input.LA(1);
      if ((LA28_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.DIALECT)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))))) {
        int LA28_1=input.LA(2);
        if ((LA28_1 == COLON) && ((validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))) {
          alt28=1;
        }
      }
switch (alt28) {
case 1:
{
          pushFollow(FOLLOW_attributes_key_in_rule_attributes1262);
          attributes_key62=attributes_key();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_attributes_key.add(attributes_key62.getTree());
          COLON63=(Token)input.LT(1);
          match(input,COLON,FOLLOW_COLON_in_rule_attributes1264);
          if (failed)           return retval;
          if (backtracking == 0)           stream_COLON.add(COLON63);
        }
      break;
  }
  pushFollow(FOLLOW_rule_attribute_in_rule_attributes1269);
  rule_attribute64=rule_attribute();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_rule_attribute.add(rule_attribute64.getTree());
  loop30:   do {
    int alt30=2;
    alt30=dfa30.predict(input);
switch (alt30) {
case 1:
{
        int alt29=2;
        int LA29_0=input.LA(1);
        if ((LA29_0 == COMMA)) {
          alt29=1;
        }
switch (alt29) {
case 1:
{
            COMMA65=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1273);
            if (failed)             return retval;
            if (backtracking == 0)             stream_COMMA.add(COMMA65);
          }
        break;
    }
    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1278);
    attr=rule_attribute();
    _fsp--;
    if (failed)     return retval;
    if (backtracking == 0)     stream_rule_attribute.add(attr.getTree());
  }
break;
default :
break loop30;
}
}
 while (true);
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_RULE_ATTRIBUTES,"VT_RULE_ATTRIBUTES"),root_1);
if (stream_attributes_key.hasNext()) {
adaptor.addChild(root_1,stream_attributes_key.next());
}
stream_attributes_key.reset();
if (!(stream_rule_attribute.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_rule_attribute.hasNext()) {
adaptor.addChild(root_1,stream_rule_attribute.next());
}
stream_rule_attribute.reset();
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
