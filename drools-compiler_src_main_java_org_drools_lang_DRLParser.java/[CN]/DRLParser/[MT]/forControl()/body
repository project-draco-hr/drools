{
  DRLParser.forControl_return retval=new DRLParser.forControl_return();
  retval.start=input.LT(1);
  int forControl_StartIndex=input.index();
  Object root_0=null;
  Token SEMICOLON428=null;
  Token SEMICOLON430=null;
  DRLParser.forVarControl_return forVarControl426=null;
  DRLParser.forInit_return forInit427=null;
  DRLParser.expression_return expression429=null;
  DRLParser.forUpdate_return forUpdate431=null;
  Object SEMICOLON428_tree=null;
  Object SEMICOLON430_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,123)) {
      return retval;
    }
    int alt139=2;
    alt139=dfa139.predict(input);
switch (alt139) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_forVarControl_in_forControl6520);
        forVarControl426=forVarControl();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,forVarControl426.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    int alt136=2;
    int LA136_0=input.LA(1);
    if ((LA136_0 == ID || LA136_0 == STRING || (LA136_0 >= BOOL && LA136_0 <= LEFT_PAREN) || LA136_0 == DECIMAL || LA136_0 == LESS || LA136_0 == LEFT_SQUARE || (LA136_0 >= NULL && LA136_0 <= FLOAT) || (LA136_0 >= INCR && LA136_0 <= NEGATION))) {
      alt136=1;
    }
switch (alt136) {
case 1:
{
        pushFollow(FOLLOW_forInit_in_forControl6525);
        forInit427=forInit();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,forInit427.getTree());
      }
    break;
}
SEMICOLON428=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_forControl6528);
if (state.failed) return retval;
if (state.backtracking == 0) {
  SEMICOLON428_tree=(Object)adaptor.create(SEMICOLON428);
  adaptor.addChild(root_0,SEMICOLON428_tree);
}
int alt137=2;
int LA137_0=input.LA(1);
if ((LA137_0 == ID || LA137_0 == STRING || (LA137_0 >= BOOL && LA137_0 <= LEFT_PAREN) || LA137_0 == DECIMAL || LA137_0 == LESS || LA137_0 == LEFT_SQUARE || (LA137_0 >= NULL && LA137_0 <= FLOAT) || (LA137_0 >= INCR && LA137_0 <= NEGATION))) {
  alt137=1;
}
switch (alt137) {
case 1:
{
    pushFollow(FOLLOW_expression_in_forControl6530);
    expression429=expression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,expression429.getTree());
  }
break;
}
SEMICOLON430=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_forControl6533);
if (state.failed) return retval;
if (state.backtracking == 0) {
SEMICOLON430_tree=(Object)adaptor.create(SEMICOLON430);
adaptor.addChild(root_0,SEMICOLON430_tree);
}
int alt138=2;
int LA138_0=input.LA(1);
if ((LA138_0 == ID || LA138_0 == STRING || (LA138_0 >= BOOL && LA138_0 <= LEFT_PAREN) || LA138_0 == DECIMAL || LA138_0 == LESS || LA138_0 == LEFT_SQUARE || (LA138_0 >= NULL && LA138_0 <= FLOAT) || (LA138_0 >= INCR && LA138_0 <= NEGATION))) {
alt138=1;
}
switch (alt138) {
case 1:
{
pushFollow(FOLLOW_forUpdate_in_forControl6535);
forUpdate431=forUpdate();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,forUpdate431.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,123,forControl_StartIndex);
}
}
return retval;
}
