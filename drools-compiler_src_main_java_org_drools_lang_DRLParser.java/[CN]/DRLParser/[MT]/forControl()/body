{
  DRLParser.forControl_return retval=new DRLParser.forControl_return();
  retval.start=input.LT(1);
  int forControl_StartIndex=input.index();
  Object root_0=null;
  Token SEMICOLON443=null;
  Token SEMICOLON445=null;
  DRLParser.forVarControl_return forVarControl441=null;
  DRLParser.forInit_return forInit442=null;
  DRLParser.expression_return expression444=null;
  DRLParser.forUpdate_return forUpdate446=null;
  Object SEMICOLON443_tree=null;
  Object SEMICOLON445_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,126)) {
      return retval;
    }
    int alt141=2;
    alt141=dfa141.predict(input);
switch (alt141) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_forVarControl_in_forControl6623);
        forVarControl441=forVarControl();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,forVarControl441.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    int alt138=2;
    int LA138_0=input.LA(1);
    if ((LA138_0 == ID || LA138_0 == STRING || (LA138_0 >= BOOL && LA138_0 <= LEFT_PAREN) || LA138_0 == DECIMAL || LA138_0 == LESS || LA138_0 == LEFT_SQUARE || (LA138_0 >= NULL && LA138_0 <= FLOAT) || (LA138_0 >= INCR && LA138_0 <= NEGATION))) {
      alt138=1;
    }
switch (alt138) {
case 1:
{
        pushFollow(FOLLOW_forInit_in_forControl6628);
        forInit442=forInit();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,forInit442.getTree());
      }
    break;
}
SEMICOLON443=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_forControl6631);
if (state.failed) return retval;
if (state.backtracking == 0) {
  SEMICOLON443_tree=(Object)adaptor.create(SEMICOLON443);
  adaptor.addChild(root_0,SEMICOLON443_tree);
}
int alt139=2;
int LA139_0=input.LA(1);
if ((LA139_0 == ID || LA139_0 == STRING || (LA139_0 >= BOOL && LA139_0 <= LEFT_PAREN) || LA139_0 == DECIMAL || LA139_0 == LESS || LA139_0 == LEFT_SQUARE || (LA139_0 >= NULL && LA139_0 <= FLOAT) || (LA139_0 >= INCR && LA139_0 <= NEGATION))) {
  alt139=1;
}
switch (alt139) {
case 1:
{
    pushFollow(FOLLOW_expression_in_forControl6633);
    expression444=expression();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,expression444.getTree());
  }
break;
}
SEMICOLON445=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_forControl6636);
if (state.failed) return retval;
if (state.backtracking == 0) {
SEMICOLON445_tree=(Object)adaptor.create(SEMICOLON445);
adaptor.addChild(root_0,SEMICOLON445_tree);
}
int alt140=2;
int LA140_0=input.LA(1);
if ((LA140_0 == ID || LA140_0 == STRING || (LA140_0 >= BOOL && LA140_0 <= LEFT_PAREN) || LA140_0 == DECIMAL || LA140_0 == LESS || LA140_0 == LEFT_SQUARE || (LA140_0 >= NULL && LA140_0 <= FLOAT) || (LA140_0 >= INCR && LA140_0 <= NEGATION))) {
alt140=1;
}
switch (alt140) {
case 1:
{
pushFollow(FOLLOW_forUpdate_in_forControl6638);
forUpdate446=forUpdate();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,forUpdate446.getTree());
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,126,forControl_StartIndex);
}
}
return retval;
}
