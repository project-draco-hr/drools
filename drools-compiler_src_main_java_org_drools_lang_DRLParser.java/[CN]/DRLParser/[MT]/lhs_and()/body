{
  BaseDescr d=null;
  BaseDescr left=null;
  BaseDescr right=null;
  d=null;
  AndDescr and=null;
  try {
{
      pushFollow(FOLLOW_lhs_unary_in_lhs_and3343);
      left=lhs_unary();
      this._fsp--;
      if (this.failed) {
        return d;
      }
      if (this.backtracking == 0) {
        d=left;
      }
      loop44:       do {
        int alt44=2;
        final int LA44_0=this.input.LA(1);
        if ((LA44_0 == AND || LA44_0 == 78)) {
          alt44=1;
        }
switch (alt44) {
case 1:
{
            if (this.input.LA(1) == AND || this.input.LA(1) == 78) {
              this.input.consume();
              this.errorRecovery=false;
              this.failed=false;
            }
 else {
              if (this.backtracking > 0) {
                this.failed=true;
                return d;
              }
              final MismatchedSetException mse=new MismatchedSetException(null,this.input);
              recoverFromMismatchedSet(this.input,mse,FOLLOW_set_in_lhs_and3352);
              throw mse;
            }
            pushFollow(FOLLOW_lhs_unary_in_lhs_and3362);
            right=lhs_unary();
            this._fsp--;
            if (this.failed) {
              return d;
            }
            if (this.backtracking == 0) {
              if (and == null) {
                and=new AndDescr();
                and.addDescr(left);
                d=and;
              }
              and.addDescr(right);
            }
          }
        break;
default :
      break loop44;
  }
}
 while (true);
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return d;
}
