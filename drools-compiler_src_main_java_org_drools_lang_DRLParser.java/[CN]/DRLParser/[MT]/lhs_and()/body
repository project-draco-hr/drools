{
  DRLParser.lhs_and_return retval=new DRLParser.lhs_and_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN128=null;
  Token RIGHT_PAREN130=null;
  DRLParser.and_key_return and=null;
  DRLParser.and_key_return value=null;
  DRLParser.lhs_unary_return lhs_unary129=null;
  DRLParser.lhs_unary_return lhs_unary131=null;
  DRLParser.lhs_unary_return lhs_unary132=null;
  Object LEFT_PAREN128_tree=null;
  Object RIGHT_PAREN130_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_lhs_unary=new RewriteRuleSubtreeStream(adaptor,"rule lhs_unary");
  RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
  Token andToken=null;
  try {
    int alt45=2;
    int LA45_0=input.LA(1);
    if ((LA45_0 == LEFT_PAREN)) {
      int LA45_1=input.LA(2);
      if ((synpred5_DRL())) {
        alt45=1;
      }
 else       if ((true)) {
        alt45=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",45,1,input);
        throw nvae;
      }
    }
 else     if ((LA45_0 == ID)) {
      alt45=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",45,0,input);
      throw nvae;
    }
switch (alt45) {
case 1:
{
        LEFT_PAREN128=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_and2360);
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_LEFT_PAREN.add(LEFT_PAREN128);
        if (state.backtracking == 0) {
          helper.emit(LEFT_PAREN128,DroolsEditorType.SYMBOL);
        }
        pushFollow(FOLLOW_and_key_in_lhs_and2370);
        and=and_key();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_and_key.add(and.getTree());
        if (state.backtracking == 0) {
          helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
        }
        int cnt43=0;
        loop43:         do {
          int alt43=2;
          int LA43_0=input.LA(1);
          if ((LA43_0 == ID || LA43_0 == LEFT_PAREN)) {
            alt43=1;
          }
switch (alt43) {
case 1:
{
              pushFollow(FOLLOW_lhs_unary_in_lhs_and2378);
              lhs_unary129=lhs_unary();
              state._fsp--;
              if (state.failed)               return retval;
              if (state.backtracking == 0)               stream_lhs_unary.add(lhs_unary129.getTree());
            }
          break;
default :
        if (cnt43 >= 1)         break loop43;
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
    EarlyExitException eee=new EarlyExitException(43,input);
  throw eee;
}
cnt43++;
}
 while (true);
RIGHT_PAREN130=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_and2384);
if (state.failed) return retval;
if (state.backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN130);
if (state.backtracking == 0) {
helper.emit(RIGHT_PAREN130,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
  Object root_1=(Object)adaptor.nil();
  root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_PREFIX,(and != null ? ((Token)and.start) : null)),root_1);
  if (!(stream_lhs_unary.hasNext())) {
    throw new RewriteEarlyExitException();
  }
  while (stream_lhs_unary.hasNext()) {
    adaptor.addChild(root_1,stream_lhs_unary.nextTree());
  }
  stream_lhs_unary.reset();
  adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
  adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_lhs_unary_in_lhs_and2408);
lhs_unary131=lhs_unary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_lhs_unary.add(lhs_unary131.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
adaptor.addChild(root_0,stream_lhs_unary.nextTree());
}
retval.tree=root_0;
}
}
loop44: do {
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == ID)) {
int LA44_2=input.LA(2);
if (((synpred6_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))))) {
alt44=1;
}
}
switch (alt44) {
case 1:
{
{
pushFollow(FOLLOW_and_key_in_lhs_and2428);
value=and_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_and_key.add(value.getTree());
if (state.backtracking == 0) {
  andToken=(value != null ? ((Token)value.start) : null);
}
}
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
}
pushFollow(FOLLOW_lhs_unary_in_lhs_and2440);
lhs_unary132=lhs_unary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) stream_lhs_unary.add(lhs_unary132.getTree());
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_INFIX,andToken),root_1);
    adaptor.addChild(root_1,stream_retval.nextTree());
    adaptor.addChild(root_1,stream_lhs_unary.nextTree());
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
break;
default :
break loop44;
}
}
 while (true);
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
