{
  lhs_and_return retval=new lhs_and_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token amper=null;
  Token LEFT_PAREN126=null;
  Token RIGHT_PAREN128=null;
  and_key_return and=null;
  and_key_return value=null;
  lhs_unary_return lhs_unary127=null;
  lhs_unary_return lhs_unary129=null;
  lhs_unary_return lhs_unary130=null;
  Object amper_tree=null;
  Object LEFT_PAREN126_tree=null;
  Object RIGHT_PAREN128_tree=null;
  RewriteRuleTokenStream stream_DOUBLE_AMPER=new RewriteRuleTokenStream(adaptor,"token DOUBLE_AMPER");
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
  RewriteRuleSubtreeStream stream_lhs_unary=new RewriteRuleSubtreeStream(adaptor,"rule lhs_unary");
  Token andToken=null;
  try {
    int alt48=2;
    int LA48_0=input.LA(1);
    if ((LA48_0 == LEFT_PAREN)) {
      int LA48_1=input.LA(2);
      if ((LA48_1 == LEFT_PAREN)) {
        alt48=2;
      }
 else       if ((LA48_1 == ID)) {
switch (input.LA(3)) {
case DOT:
case COLON:
case LEFT_SQUARE:
{
            alt48=2;
          }
        break;
case LEFT_PAREN:
{
switch (input.LA(4)) {
case ID:
{
            int LA48_6=input.LA(5);
            if ((synpred3())) {
              alt48=1;
            }
 else             if ((true)) {
              alt48=2;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("559:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key | DOUBLE_AMPER )=> (value= and_key | amper= DOUBLE_AMPER ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );",48,6,input);
              throw nvae;
            }
          }
        break;
case LEFT_PAREN:
{
        int LA48_7=input.LA(5);
        if ((synpred3())) {
          alt48=1;
        }
 else         if ((true)) {
          alt48=2;
        }
 else {
          if (backtracking > 0) {
            failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("559:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key | DOUBLE_AMPER )=> (value= and_key | amper= DOUBLE_AMPER ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );",48,7,input);
          throw nvae;
        }
      }
    break;
case VT_COMPILATION_UNIT:
case VT_FUNCTION_IMPORT:
case VT_FACT:
case VT_CONSTRAINTS:
case VT_LABEL:
case VT_QUERY_ID:
case VT_TEMPLATE_ID:
case VT_TYPE_DECLARE_ID:
case VT_RULE_ID:
case VT_ENTRYPOINT_ID:
case VT_SLOT_ID:
case VT_SLOT:
case VT_RULE_ATTRIBUTES:
case VT_RHS_CHUNK:
case VT_CURLY_CHUNK:
case VT_SQUARE_CHUNK:
case VT_PAREN_CHUNK:
case VT_BEHAVIOR:
case VT_AND_IMPLICIT:
case VT_AND_PREFIX:
case VT_OR_PREFIX:
case VT_AND_INFIX:
case VT_OR_INFIX:
case VT_ACCUMULATE_INIT_CLAUSE:
case VT_ACCUMULATE_ID_CLAUSE:
case VT_FROM_SOURCE:
case VT_EXPRESSION_CHAIN:
case VT_PATTERN:
case VT_FACT_BINDING:
case VT_FACT_OR:
case VT_BIND_FIELD:
case VT_FIELD:
case VT_ACCESSOR_PATH:
case VT_ACCESSOR_ELEMENT:
case VT_DATA_TYPE:
case VT_PATTERN_TYPE:
case VT_PACKAGE_ID:
case VT_IMPORT_ID:
case VT_GLOBAL_ID:
case VT_FUNCTION_ID:
case VT_PARAM_LIST:
case VK_DATE_EFFECTIVE:
case VK_DATE_EXPIRES:
case VK_LOCK_ON_ACTIVE:
case VK_NO_LOOP:
case VK_AUTO_FOCUS:
case VK_ACTIVATION_GROUP:
case VK_AGENDA_GROUP:
case VK_RULEFLOW_GROUP:
case VK_DURATION:
case VK_DIALECT:
case VK_SALIENCE:
case VK_ENABLED:
case VK_ATTRIBUTES:
case VK_WHEN:
case VK_RULE:
case VK_IMPORT:
case VK_PACKAGE:
case VK_TEMPLATE:
case VK_QUERY:
case VK_DECLARE:
case VK_FUNCTION:
case VK_GLOBAL:
case VK_EVAL:
case VK_CONTAINS:
case VK_MATCHES:
case VK_EXCLUDES:
case VK_SOUNDSLIKE:
case VK_MEMBEROF:
case VK_ENTRY_POINT:
case VK_NOT:
case VK_IN:
case VK_OR:
case VK_AND:
case VK_EXISTS:
case VK_FORALL:
case VK_FROM:
case VK_ACCUMULATE:
case VK_INIT:
case VK_ACTION:
case VK_REVERSE:
case VK_RESULT:
case VK_COLLECT:
case SEMICOLON:
case DOT:
case DOT_STAR:
case END:
case STRING:
case COMMA:
case RIGHT_PAREN:
case AT:
case COLON:
case EQUALS:
case BOOL:
case INT:
case DOUBLE_PIPE:
case DOUBLE_AMPER:
case OVER:
case ARROW:
case EQUAL:
case GREATER:
case GREATER_EQUAL:
case LESS:
case LESS_EQUAL:
case NOT_EQUAL:
case GRAVE_ACCENT:
case FLOAT:
case NULL:
case LEFT_SQUARE:
case RIGHT_SQUARE:
case THEN:
case LEFT_CURLY:
case RIGHT_CURLY:
case MISC:
case EOL:
case WS:
case EscapeSequence:
case HexDigit:
case UnicodeEscape:
case OctalEscape:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
{
    alt48=2;
  }
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("559:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key | DOUBLE_AMPER )=> (value= and_key | amper= DOUBLE_AMPER ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );",48,4,input);
throw nvae;
}
}
break;
case ID:
{
int LA48_5=input.LA(4);
if ((synpred3())) {
alt48=1;
}
 else if ((true)) {
alt48=2;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("559:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key | DOUBLE_AMPER )=> (value= and_key | amper= DOUBLE_AMPER ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );",48,5,input);
throw nvae;
}
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("559:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key | DOUBLE_AMPER )=> (value= and_key | amper= DOUBLE_AMPER ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );",48,3,input);
throw nvae;
}
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("559:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key | DOUBLE_AMPER )=> (value= and_key | amper= DOUBLE_AMPER ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );",48,1,input);
throw nvae;
}
}
 else if ((LA48_0 == ID)) {
alt48=2;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("559:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key | DOUBLE_AMPER )=> (value= and_key | amper= DOUBLE_AMPER ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );",48,0,input);
throw nvae;
}
switch (alt48) {
case 1:
{
LEFT_PAREN126=(Token)input.LT(1);
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_and1941);
if (failed) return retval;
if (backtracking == 0) stream_LEFT_PAREN.add(LEFT_PAREN126);
pushFollow(FOLLOW_and_key_in_lhs_and1945);
and=and_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_and_key.add(and.getTree());
int cnt45=0;
loop45: do {
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == ID || LA45_0 == LEFT_PAREN)) {
alt45=1;
}
switch (alt45) {
case 1:
{
pushFollow(FOLLOW_lhs_unary_in_lhs_and1947);
lhs_unary127=lhs_unary();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_lhs_unary.add(lhs_unary127.getTree());
}
break;
default :
if (cnt45 >= 1) break loop45;
if (backtracking > 0) {
failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(45,input);
throw eee;
}
cnt45++;
}
 while (true);
RIGHT_PAREN128=(Token)input.LT(1);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_and1950);
if (failed) return retval;
if (backtracking == 0) stream_RIGHT_PAREN.add(RIGHT_PAREN128);
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_AND_PREFIX,((Token)and.start)),root_1);
if (!(stream_lhs_unary.hasNext())) {
throw new RewriteEarlyExitException();
}
while (stream_lhs_unary.hasNext()) {
adaptor.addChild(root_1,stream_lhs_unary.next());
}
stream_lhs_unary.reset();
adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
break;
case 2:
{
{
pushFollow(FOLLOW_lhs_unary_in_lhs_and1971);
lhs_unary129=lhs_unary();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_lhs_unary.add(lhs_unary129.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
adaptor.addChild(root_0,stream_lhs_unary.next());
}
}
}
loop47: do {
int alt47=2;
int LA47_0=input.LA(1);
if ((LA47_0 == ID)) {
int LA47_2=input.LA(2);
if (((synpred4() && (validateIdentifierKey(DroolsSoftKeywords.AND))))) {
alt47=1;
}
}
 else if ((LA47_0 == DOUBLE_AMPER)) {
int LA47_3=input.LA(2);
if ((synpred4())) {
alt47=1;
}
}
switch (alt47) {
case 1:
{
int alt46=2;
int LA46_0=input.LA(1);
if ((LA46_0 == ID) && ((validateIdentifierKey(DroolsSoftKeywords.AND)))) {
alt46=1;
}
 else if ((LA46_0 == DOUBLE_AMPER)) {
alt46=2;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("565:30: (value= and_key | amper= DOUBLE_AMPER )",46,0,input);
throw nvae;
}
switch (alt46) {
case 1:
{
pushFollow(FOLLOW_and_key_in_lhs_and1993);
value=and_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_and_key.add(value.getTree());
if (backtracking == 0) {
andToken=((Token)value.start);
}
}
break;
case 2:
{
amper=(Token)input.LT(1);
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_lhs_and2000);
if (failed) return retval;
if (backtracking == 0) stream_DOUBLE_AMPER.add(amper);
if (backtracking == 0) {
andToken=amper;
}
}
break;
}
pushFollow(FOLLOW_lhs_unary_in_lhs_and2005);
lhs_unary130=lhs_unary();
_fsp--;
if (failed) return retval;
if (backtracking == 0) stream_lhs_unary.add(lhs_unary130.getTree());
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_AND_INFIX,andToken),root_1);
adaptor.addChild(root_1,stream_retval.next());
adaptor.addChild(root_1,stream_lhs_unary.next());
adaptor.addChild(root_0,root_1);
}
}
}
}
break;
default :
break loop47;
}
}
 while (true);
}
break;
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
