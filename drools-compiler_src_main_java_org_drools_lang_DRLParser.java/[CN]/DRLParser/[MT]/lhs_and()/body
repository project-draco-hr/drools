{
  BaseDescr d=null;
  BaseDescr lhsunary=null;
  BaseDescr left=null;
  BaseDescr right=null;
  d=null;
  AndDescr and=null;
  try {
    int alt38=2;
    int LA38_0=input.LA(1);
    if ((LA38_0 == LEFT_PAREN)) {
      int LA38_1=input.LA(2);
      if ((LA38_1 == AND)) {
        alt38=1;
      }
 else       if ((LA38_1 == ID || LA38_1 == LEFT_PAREN || (LA38_1 >= EXISTS && LA38_1 <= FORALL))) {
        alt38=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return d;
        }
        NoViableAltException nvae=new NoViableAltException("729:1: lhs_and returns [BaseDescr d] : ( LEFT_PAREN AND (lhsunary= lhs_unary )+ RIGHT_PAREN | left= lhs_unary ( ( AND | DOUBLE_AMPER ) right= lhs_unary )* );",38,1,input);
        throw nvae;
      }
    }
 else     if ((LA38_0 == ID || (LA38_0 >= EXISTS && LA38_0 <= FORALL))) {
      alt38=2;
    }
 else {
      if (backtracking > 0) {
        failed=true;
        return d;
      }
      NoViableAltException nvae=new NoViableAltException("729:1: lhs_and returns [BaseDescr d] : ( LEFT_PAREN AND (lhsunary= lhs_unary )+ RIGHT_PAREN | left= lhs_unary ( ( AND | DOUBLE_AMPER ) right= lhs_unary )* );",38,0,input);
      throw nvae;
    }
switch (alt38) {
case 1:
{
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_and1854);
        if (failed)         return d;
        match(input,AND,FOLLOW_AND_in_lhs_and1856);
        if (failed)         return d;
        if (backtracking == 0) {
          and=new AndDescr();
          d=and;
          location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
        }
        int cnt36=0;
        loop36:         do {
          int alt36=2;
          int LA36_0=input.LA(1);
          if ((LA36_0 == ID || LA36_0 == LEFT_PAREN || (LA36_0 >= EXISTS && LA36_0 <= FORALL))) {
            alt36=1;
          }
switch (alt36) {
case 1:
{
              pushFollow(FOLLOW_lhs_unary_in_lhs_and1867);
              lhsunary=lhs_unary();
              _fsp--;
              if (failed)               return d;
            }
          break;
default :
        if (cnt36 >= 1)         break loop36;
      if (backtracking > 0) {
        failed=true;
        return d;
      }
    EarlyExitException eee=new EarlyExitException(36,input);
  throw eee;
}
cnt36++;
}
 while (true);
if (backtracking == 0) {
and.addDescr(lhsunary);
}
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_and1877);
if (failed) return d;
}
break;
case 2:
{
pushFollow(FOLLOW_lhs_unary_in_lhs_and1895);
left=lhs_unary();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
d=left;
}
loop37: do {
int alt37=2;
int LA37_0=input.LA(1);
if (((LA37_0 >= AND && LA37_0 <= DOUBLE_AMPER))) {
alt37=1;
}
switch (alt37) {
case 1:
{
if ((input.LA(1) >= AND && input.LA(1) <= DOUBLE_AMPER)) {
input.consume();
errorRecovery=false;
failed=false;
}
 else {
if (backtracking > 0) {
  failed=true;
  return d;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
recoverFromMismatchedSet(input,mse,FOLLOW_set_in_lhs_and1903);
throw mse;
}
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
}
pushFollow(FOLLOW_lhs_unary_in_lhs_and1919);
right=lhs_unary();
_fsp--;
if (failed) return d;
if (backtracking == 0) {
if (and == null) {
  and=new AndDescr();
  and.addDescr(left);
  d=and;
}
and.addDescr(right);
}
}
break;
default :
break loop37;
}
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
