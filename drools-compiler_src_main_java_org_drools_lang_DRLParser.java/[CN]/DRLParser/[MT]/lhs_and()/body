{
  BaseDescr d=null;
  BaseDescr left=null;
  BaseDescr right=null;
  d=null;
  AndDescr and=null;
  try {
{
      pushFollow(FOLLOW_lhs_unary_in_lhs_and3945);
      left=lhs_unary();
      _fsp--;
      if (failed)       return d;
      if (backtracking == 0) {
        d=left;
      }
      loop57:       do {
        int alt57=2;
        int LA57_0=input.LA(1);
        if ((LA57_0 == DOUBLE_AMPER || LA57_0 == AND)) {
          alt57=1;
        }
switch (alt57) {
case 1:
{
            if (input.LA(1) == DOUBLE_AMPER || input.LA(1) == AND) {
              input.consume();
              errorRecovery=false;
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return d;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_lhs_and3953);
              throw mse;
            }
            if (backtracking == 0) {
              location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
            }
            pushFollow(FOLLOW_lhs_unary_in_lhs_and3969);
            right=lhs_unary();
            _fsp--;
            if (failed)             return d;
            if (backtracking == 0) {
              if (and == null) {
                and=new AndDescr();
                and.addDescr(left);
                d=and;
              }
              and.addDescr(right);
            }
          }
        break;
default :
      break loop57;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
