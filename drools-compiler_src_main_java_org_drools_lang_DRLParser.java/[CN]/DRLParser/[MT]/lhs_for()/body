{
  DRLParser.lhs_for_return retval=new DRLParser.lhs_for_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN157=null;
  Token SEMICOLON159=null;
  Token SEMICOLON161=null;
  Token RIGHT_PAREN163=null;
  DRLParser.for_key_return for_key156=null;
  DRLParser.lhs_or_return lhs_or158=null;
  DRLParser.for_functions_return for_functions160=null;
  DRLParser.constraints_return constraints162=null;
  Object LEFT_PAREN157_tree=null;
  Object SEMICOLON159_tree=null;
  Object SEMICOLON161_tree=null;
  Object RIGHT_PAREN163_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
  RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
  RewriteRuleSubtreeStream stream_for_functions=new RewriteRuleSubtreeStream(adaptor,"rule for_functions");
  RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
  try {
{
      pushFollow(FOLLOW_for_key_in_lhs_for2828);
      for_key156=for_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_for_key.add(for_key156.getTree());
      LEFT_PAREN157=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_for2833);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN157);
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN157,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_lhs_or_in_lhs_for2841);
      lhs_or158=lhs_or();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_lhs_or.add(lhs_or158.getTree());
      SEMICOLON159=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2843);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_SEMICOLON.add(SEMICOLON159);
      pushFollow(FOLLOW_for_functions_in_lhs_for2848);
      for_functions160=for_functions();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_for_functions.add(for_functions160.getTree());
      int alt49=2;
      int LA49_0=input.LA(1);
      if ((LA49_0 == SEMICOLON)) {
        alt49=1;
      }
switch (alt49) {
case 1:
{
          SEMICOLON161=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2854);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_SEMICOLON.add(SEMICOLON161);
          pushFollow(FOLLOW_constraints_in_lhs_for2856);
          constraints162=constraints();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_constraints.add(constraints162.getTree());
        }
      break;
  }
  RIGHT_PAREN163=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_for2862);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_RIGHT_PAREN.add(RIGHT_PAREN163);
  if (state.backtracking == 0) {
    helper.emit(RIGHT_PAREN163,DroolsEditorType.SYMBOL);
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FOR_CE,"VT_FOR_CE"),root_1);
        adaptor.addChild(root_1,stream_lhs_or.nextTree());
        adaptor.addChild(root_1,stream_for_functions.nextTree());
        if (stream_constraints.hasNext()) {
          adaptor.addChild(root_1,stream_constraints.nextTree());
        }
        stream_constraints.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
