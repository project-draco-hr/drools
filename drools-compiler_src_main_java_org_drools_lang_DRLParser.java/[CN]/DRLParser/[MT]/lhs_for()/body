{
  DRLParser.lhs_for_return retval=new DRLParser.lhs_for_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN163=null;
  Token SEMICOLON165=null;
  Token SEMICOLON167=null;
  Token RIGHT_PAREN169=null;
  DRLParser.for_key_return for_key162=null;
  DRLParser.lhs_or_return lhs_or164=null;
  DRLParser.for_functions_return for_functions166=null;
  DRLParser.constraints_return constraints168=null;
  Object LEFT_PAREN163_tree=null;
  Object SEMICOLON165_tree=null;
  Object SEMICOLON167_tree=null;
  Object RIGHT_PAREN169_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
  RewriteRuleSubtreeStream stream_for_functions=new RewriteRuleSubtreeStream(adaptor,"rule for_functions");
  RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
  RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
  try {
{
      pushFollow(FOLLOW_for_key_in_lhs_for2873);
      for_key162=for_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_for_key.add(for_key162.getTree());
      LEFT_PAREN163=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_for2878);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN163);
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN163,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_lhs_or_in_lhs_for2886);
      lhs_or164=lhs_or();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_lhs_or.add(lhs_or164.getTree());
      SEMICOLON165=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2888);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_SEMICOLON.add(SEMICOLON165);
      pushFollow(FOLLOW_for_functions_in_lhs_for2893);
      for_functions166=for_functions();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_for_functions.add(for_functions166.getTree());
      int alt51=2;
      int LA51_0=input.LA(1);
      if ((LA51_0 == SEMICOLON)) {
        alt51=1;
      }
switch (alt51) {
case 1:
{
          SEMICOLON167=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2899);
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_SEMICOLON.add(SEMICOLON167);
          pushFollow(FOLLOW_constraints_in_lhs_for2901);
          constraints168=constraints();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_constraints.add(constraints168.getTree());
        }
      break;
  }
  RIGHT_PAREN169=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_for2907);
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_RIGHT_PAREN.add(RIGHT_PAREN169);
  if (state.backtracking == 0) {
    helper.emit(RIGHT_PAREN169,DroolsEditorType.SYMBOL);
  }
  if (state.backtracking == 0) {
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
    root_0=(Object)adaptor.nil();
{
{
        Object root_1=(Object)adaptor.nil();
        root_1=(Object)adaptor.becomeRoot(stream_for_key.nextNode(),root_1);
        adaptor.addChild(root_1,stream_lhs_or.nextTree());
        adaptor.addChild(root_1,stream_for_functions.nextTree());
        if (stream_constraints.hasNext()) {
          adaptor.addChild(root_1,stream_constraints.nextTree());
        }
        stream_constraints.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
