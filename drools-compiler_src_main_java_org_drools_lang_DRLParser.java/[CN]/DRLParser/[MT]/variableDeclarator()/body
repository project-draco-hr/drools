{
  DRLParser.variableDeclarator_return retval=new DRLParser.variableDeclarator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  DRLParser.variableDeclaratorRest_return rest=null;
  Object id_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      id=(Token)match(input,ID,FOLLOW_ID_in_variableDeclarator6122);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        id_tree=(Object)adaptor.create(id);
        adaptor.addChild(root_0,id_tree);
      }
      pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator6126);
      rest=variableDeclaratorRest();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,rest.getTree());
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
