{
  DRLParser.formalParameterDecls_return retval=new DRLParser.formalParameterDecls_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.variableModifier_return variableModifier746=null;
  DRLParser.type_return type747=null;
  DRLParser.formalParameterDeclsRest_return formalParameterDeclsRest748=null;
  try {
{
      root_0=(Object)adaptor.nil();
      loop222:       do {
        int alt222=2;
        int LA222_0=input.LA(1);
        if ((LA222_0 == ID)) {
          int LA222_1=input.LA(2);
          if ((LA222_1 == ID)) {
            int LA222_2=input.LA(3);
            if ((((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
              alt222=1;
            }
          }
        }
switch (alt222) {
case 1:
{
            pushFollow(FOLLOW_variableModifier_in_formalParameterDecls9245);
            variableModifier746=variableModifier();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,variableModifier746.getTree());
          }
        break;
default :
      break loop222;
  }
}
 while (true);
pushFollow(FOLLOW_type_in_formalParameterDecls9248);
type747=type();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,type747.getTree());
int alt223=2;
int LA223_0=input.LA(1);
if (((LA223_0 >= ID && LA223_0 <= DOT))) {
  alt223=1;
}
switch (alt223) {
case 1:
{
    pushFollow(FOLLOW_formalParameterDeclsRest_in_formalParameterDecls9250);
    formalParameterDeclsRest748=formalParameterDeclsRest();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,formalParameterDeclsRest748.getTree());
  }
break;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
