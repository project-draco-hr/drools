{
  DRLParser.constantDeclaratorRest_return retval=new DRLParser.constantDeclaratorRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE831=null;
  Token RIGHT_SQUARE832=null;
  Token EQUALS833=null;
  DRLParser.variableInitializer_return variableInitializer834=null;
  Object LEFT_SQUARE831_tree=null;
  Object RIGHT_SQUARE832_tree=null;
  Object EQUALS833_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      loop244:       do {
        int alt244=2;
        int LA244_0=input.LA(1);
        if ((LA244_0 == LEFT_SQUARE)) {
          alt244=1;
        }
switch (alt244) {
case 1:
{
            LEFT_SQUARE831=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_constantDeclaratorRest9782);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              LEFT_SQUARE831_tree=(Object)adaptor.create(LEFT_SQUARE831);
              adaptor.addChild(root_0,LEFT_SQUARE831_tree);
            }
            RIGHT_SQUARE832=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_constantDeclaratorRest9784);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              RIGHT_SQUARE832_tree=(Object)adaptor.create(RIGHT_SQUARE832);
              adaptor.addChild(root_0,RIGHT_SQUARE832_tree);
            }
          }
        break;
default :
      break loop244;
  }
}
 while (true);
EQUALS833=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_constantDeclaratorRest9788);
if (state.failed) return retval;
if (state.backtracking == 0) {
  EQUALS833_tree=(Object)adaptor.create(EQUALS833);
  adaptor.addChild(root_0,EQUALS833_tree);
}
pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest9790);
variableInitializer834=variableInitializer();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,variableInitializer834.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
