{
  DRLParser.interfaceBody_return retval=new DRLParser.interfaceBody_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_CURLY775=null;
  Token RIGHT_CURLY777=null;
  DRLParser.interfaceBodyDeclaration_return interfaceBodyDeclaration776=null;
  Object LEFT_CURLY775_tree=null;
  Object RIGHT_CURLY777_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_CURLY775=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_interfaceBody9405);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_CURLY775_tree=(Object)adaptor.create(LEFT_CURLY775);
        adaptor.addChild(root_0,LEFT_CURLY775_tree);
      }
      loop232:       do {
        int alt232=2;
        int LA232_0=input.LA(1);
        if (((LA232_0 >= SEMICOLON && LA232_0 <= ID) || LA232_0 == LESS || LA232_0 == AT)) {
          alt232=1;
        }
switch (alt232) {
case 1:
{
            pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody9407);
            interfaceBodyDeclaration776=interfaceBodyDeclaration();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,interfaceBodyDeclaration776.getTree());
          }
        break;
default :
      break loop232;
  }
}
 while (true);
RIGHT_CURLY777=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_interfaceBody9410);
if (state.failed) return retval;
if (state.backtracking == 0) {
  RIGHT_CURLY777_tree=(Object)adaptor.create(RIGHT_CURLY777);
  adaptor.addChild(root_0,RIGHT_CURLY777_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
