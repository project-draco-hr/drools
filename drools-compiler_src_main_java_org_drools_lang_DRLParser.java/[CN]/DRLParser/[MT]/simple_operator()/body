{
  DRLParser.simple_operator_return retval=new DRLParser.simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUAL248=null;
  Token GREATER249=null;
  Token GREATER_EQUAL250=null;
  Token LESS251=null;
  Token LESS_EQUAL252=null;
  Token NOT_EQUAL253=null;
  DRLParser.not_key_return not_key254=null;
  DRLParser.operator_key_return operator_key255=null;
  DRLParser.square_chunk_return square_chunk256=null;
  DRLParser.expression_value_return expression_value257=null;
  Object EQUAL248_tree=null;
  Object GREATER249_tree=null;
  Object GREATER_EQUAL250_tree=null;
  Object LESS251_tree=null;
  Object LESS_EQUAL252_tree=null;
  Object NOT_EQUAL253_tree=null;
  if (state.backtracking == 0)   emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt90=7;
      int LA90_0=input.LA(1);
      if ((LA90_0 == EQUAL)) {
        alt90=1;
      }
 else       if ((LA90_0 == GREATER)) {
        alt90=2;
      }
 else       if ((LA90_0 == GREATER_EQUAL)) {
        alt90=3;
      }
 else       if ((LA90_0 == LESS)) {
        alt90=4;
      }
 else       if ((LA90_0 == LESS_EQUAL)) {
        alt90=5;
      }
 else       if ((LA90_0 == NOT_EQUAL)) {
        alt90=6;
      }
 else       if ((LA90_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
        alt90=7;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",90,0,input);
        throw nvae;
      }
switch (alt90) {
case 1:
{
          EQUAL248=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_simple_operator4145);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            EQUAL248_tree=(Object)adaptor.create(EQUAL248);
            root_0=(Object)adaptor.becomeRoot(EQUAL248_tree,root_0);
          }
          if (state.backtracking == 0) {
            emit(EQUAL248,DroolsEditorType.SYMBOL);
          }
        }
      break;
case 2:
{
      GREATER249=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4153);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER249_tree=(Object)adaptor.create(GREATER249);
        root_0=(Object)adaptor.becomeRoot(GREATER249_tree,root_0);
      }
      if (state.backtracking == 0) {
        emit(GREATER249,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  GREATER_EQUAL250=(Token)match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_simple_operator4161);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER_EQUAL250_tree=(Object)adaptor.create(GREATER_EQUAL250);
    root_0=(Object)adaptor.becomeRoot(GREATER_EQUAL250_tree,root_0);
  }
  if (state.backtracking == 0) {
    emit(GREATER_EQUAL250,DroolsEditorType.SYMBOL);
  }
}
break;
case 4:
{
LESS251=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4169);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS251_tree=(Object)adaptor.create(LESS251);
root_0=(Object)adaptor.becomeRoot(LESS251_tree,root_0);
}
if (state.backtracking == 0) {
emit(LESS251,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUAL252=(Token)match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_simple_operator4177);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS_EQUAL252_tree=(Object)adaptor.create(LESS_EQUAL252);
root_0=(Object)adaptor.becomeRoot(LESS_EQUAL252_tree,root_0);
}
if (state.backtracking == 0) {
emit(LESS_EQUAL252,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUAL253=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_simple_operator4185);
if (state.failed) return retval;
if (state.backtracking == 0) {
NOT_EQUAL253_tree=(Object)adaptor.create(NOT_EQUAL253);
root_0=(Object)adaptor.becomeRoot(NOT_EQUAL253_tree,root_0);
}
if (state.backtracking == 0) {
emit(NOT_EQUAL253,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
int alt88=2;
int LA88_0=input.LA(1);
if ((LA88_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
int LA88_1=input.LA(2);
if ((((validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
alt88=1;
}
}
switch (alt88) {
case 1:
{
pushFollow(FOLLOW_not_key_in_simple_operator4193);
not_key254=not_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,not_key254.getTree());
}
break;
}
{
pushFollow(FOLLOW_operator_key_in_simple_operator4200);
operator_key255=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(operator_key255.getTree(),root_0);
int alt89=2;
int LA89_0=input.LA(1);
if ((LA89_0 == LEFT_SQUARE)) {
alt89=1;
}
switch (alt89) {
case 1:
{
pushFollow(FOLLOW_square_chunk_in_simple_operator4203);
square_chunk256=square_chunk();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,square_chunk256.getTree());
}
break;
}
}
}
break;
}
if (state.backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4215);
expression_value257=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value257.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
