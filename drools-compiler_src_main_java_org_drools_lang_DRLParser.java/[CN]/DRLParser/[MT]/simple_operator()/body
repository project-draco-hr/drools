{
  DRLParser.simple_operator_return retval=new DRLParser.simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUAL247=null;
  Token GREATER248=null;
  Token GREATER_EQUAL249=null;
  Token LESS250=null;
  Token LESS_EQUAL251=null;
  Token NOT_EQUAL252=null;
  DRLParser.not_key_return not_key253=null;
  DRLParser.operator_key_return operator_key254=null;
  DRLParser.square_chunk_return square_chunk255=null;
  DRLParser.expression_value_return expression_value256=null;
  Object EQUAL247_tree=null;
  Object GREATER248_tree=null;
  Object GREATER_EQUAL249_tree=null;
  Object LESS250_tree=null;
  Object LESS_EQUAL251_tree=null;
  Object NOT_EQUAL252_tree=null;
  if (state.backtracking == 0)   emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt89=7;
      int LA89_0=input.LA(1);
      if ((LA89_0 == EQUAL)) {
        alt89=1;
      }
 else       if ((LA89_0 == GREATER)) {
        alt89=2;
      }
 else       if ((LA89_0 == GREATER_EQUAL)) {
        alt89=3;
      }
 else       if ((LA89_0 == LESS)) {
        alt89=4;
      }
 else       if ((LA89_0 == LESS_EQUAL)) {
        alt89=5;
      }
 else       if ((LA89_0 == NOT_EQUAL)) {
        alt89=6;
      }
 else       if ((LA89_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
        alt89=7;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",89,0,input);
        throw nvae;
      }
switch (alt89) {
case 1:
{
          EQUAL247=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_simple_operator4122);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            EQUAL247_tree=(Object)adaptor.create(EQUAL247);
            root_0=(Object)adaptor.becomeRoot(EQUAL247_tree,root_0);
          }
          if (state.backtracking == 0) {
            emit(EQUAL247,DroolsEditorType.SYMBOL);
          }
        }
      break;
case 2:
{
      GREATER248=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4130);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER248_tree=(Object)adaptor.create(GREATER248);
        root_0=(Object)adaptor.becomeRoot(GREATER248_tree,root_0);
      }
      if (state.backtracking == 0) {
        emit(GREATER248,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  GREATER_EQUAL249=(Token)match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_simple_operator4138);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER_EQUAL249_tree=(Object)adaptor.create(GREATER_EQUAL249);
    root_0=(Object)adaptor.becomeRoot(GREATER_EQUAL249_tree,root_0);
  }
  if (state.backtracking == 0) {
    emit(GREATER_EQUAL249,DroolsEditorType.SYMBOL);
  }
}
break;
case 4:
{
LESS250=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4146);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS250_tree=(Object)adaptor.create(LESS250);
root_0=(Object)adaptor.becomeRoot(LESS250_tree,root_0);
}
if (state.backtracking == 0) {
emit(LESS250,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUAL251=(Token)match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_simple_operator4154);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS_EQUAL251_tree=(Object)adaptor.create(LESS_EQUAL251);
root_0=(Object)adaptor.becomeRoot(LESS_EQUAL251_tree,root_0);
}
if (state.backtracking == 0) {
emit(LESS_EQUAL251,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUAL252=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_simple_operator4162);
if (state.failed) return retval;
if (state.backtracking == 0) {
NOT_EQUAL252_tree=(Object)adaptor.create(NOT_EQUAL252);
root_0=(Object)adaptor.becomeRoot(NOT_EQUAL252_tree,root_0);
}
if (state.backtracking == 0) {
emit(NOT_EQUAL252,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
int alt87=2;
int LA87_0=input.LA(1);
if ((LA87_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
int LA87_1=input.LA(2);
if ((((validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
alt87=1;
}
}
switch (alt87) {
case 1:
{
pushFollow(FOLLOW_not_key_in_simple_operator4170);
not_key253=not_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,not_key253.getTree());
}
break;
}
{
pushFollow(FOLLOW_operator_key_in_simple_operator4177);
operator_key254=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(operator_key254.getTree(),root_0);
int alt88=2;
int LA88_0=input.LA(1);
if ((LA88_0 == LEFT_SQUARE)) {
alt88=1;
}
switch (alt88) {
case 1:
{
pushFollow(FOLLOW_square_chunk_in_simple_operator4180);
square_chunk255=square_chunk();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,square_chunk255.getTree());
}
break;
}
}
}
break;
}
if (state.backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4192);
expression_value256=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value256.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
