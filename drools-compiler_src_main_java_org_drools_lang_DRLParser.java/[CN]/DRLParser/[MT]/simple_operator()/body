{
  DRLParser.simple_operator_return retval=new DRLParser.simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS241=null;
  Token GREATER242=null;
  Token GREATER_EQUALS243=null;
  Token LESS244=null;
  Token LESS_EQUALS245=null;
  Token NOT_EQUALS246=null;
  DRLParser.not_key_return not_key247=null;
  DRLParser.operator_key_return operator_key248=null;
  DRLParser.operator_params_return operator_params249=null;
  DRLParser.expression_value_return expression_value250=null;
  Object EQUALS241_tree=null;
  Object GREATER242_tree=null;
  Object GREATER_EQUALS243_tree=null;
  Object LESS244_tree=null;
  Object LESS_EQUALS245_tree=null;
  Object NOT_EQUALS246_tree=null;
  if (state.backtracking == 0)   helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt80=7;
      int LA80_0=input.LA(1);
      if ((LA80_0 == EQUALS)) {
        alt80=1;
      }
 else       if ((LA80_0 == GREATER)) {
        alt80=2;
      }
 else       if ((LA80_0 == GREATER_EQUALS)) {
        alt80=3;
      }
 else       if ((LA80_0 == LESS)) {
        alt80=4;
      }
 else       if ((LA80_0 == LESS_EQUALS)) {
        alt80=5;
      }
 else       if ((LA80_0 == NOT_EQUALS)) {
        alt80=6;
      }
 else       if ((LA80_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
        alt80=7;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",80,0,input);
        throw nvae;
      }
switch (alt80) {
case 1:
{
          EQUALS241=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator4247);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            EQUALS241_tree=(Object)adaptor.create(EQUALS241);
            root_0=(Object)adaptor.becomeRoot(EQUALS241_tree,root_0);
          }
          if (state.backtracking == 0) {
            helper.emit(EQUALS241,DroolsEditorType.SYMBOL);
          }
        }
      break;
case 2:
{
      GREATER242=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4255);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER242_tree=(Object)adaptor.create(GREATER242);
        root_0=(Object)adaptor.becomeRoot(GREATER242_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(GREATER242,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  GREATER_EQUALS243=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator4263);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER_EQUALS243_tree=(Object)adaptor.create(GREATER_EQUALS243);
    root_0=(Object)adaptor.becomeRoot(GREATER_EQUALS243_tree,root_0);
  }
  if (state.backtracking == 0) {
    helper.emit(GREATER_EQUALS243,DroolsEditorType.SYMBOL);
  }
}
break;
case 4:
{
LESS244=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4271);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS244_tree=(Object)adaptor.create(LESS244);
root_0=(Object)adaptor.becomeRoot(LESS244_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(LESS244,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUALS245=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator4279);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS_EQUALS245_tree=(Object)adaptor.create(LESS_EQUALS245);
root_0=(Object)adaptor.becomeRoot(LESS_EQUALS245_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(LESS_EQUALS245,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUALS246=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator4287);
if (state.failed) return retval;
if (state.backtracking == 0) {
NOT_EQUALS246_tree=(Object)adaptor.create(NOT_EQUALS246);
root_0=(Object)adaptor.becomeRoot(NOT_EQUALS246_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(NOT_EQUALS246,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
int alt78=2;
int LA78_0=input.LA(1);
if ((LA78_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
int LA78_1=input.LA(2);
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
alt78=1;
}
}
switch (alt78) {
case 1:
{
pushFollow(FOLLOW_not_key_in_simple_operator4295);
not_key247=not_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,not_key247.getTree());
}
break;
}
{
pushFollow(FOLLOW_operator_key_in_simple_operator4302);
operator_key248=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(operator_key248.getTree(),root_0);
int alt79=2;
int LA79_0=input.LA(1);
if ((LA79_0 == LEFT_SQUARE)) {
alt79=1;
}
switch (alt79) {
case 1:
{
pushFollow(FOLLOW_operator_params_in_simple_operator4306);
operator_params249=operator_params();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,operator_params249.getTree());
}
break;
}
}
}
break;
}
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4319);
expression_value250=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value250.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
