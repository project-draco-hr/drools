{
  DRLParser.simple_operator_return retval=new DRLParser.simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS255=null;
  Token GREATER256=null;
  Token GREATER_EQUALS257=null;
  Token LESS258=null;
  Token LESS_EQUALS259=null;
  Token NOT_EQUALS260=null;
  DRLParser.not_key_return not_key261=null;
  DRLParser.operator_key_return operator_key262=null;
  DRLParser.operator_params_return operator_params263=null;
  DRLParser.expression_value_return expression_value264=null;
  Object EQUALS255_tree=null;
  Object GREATER256_tree=null;
  Object GREATER_EQUALS257_tree=null;
  Object LESS258_tree=null;
  Object LESS_EQUALS259_tree=null;
  Object NOT_EQUALS260_tree=null;
  if (state.backtracking == 0)   helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt82=7;
      int LA82_0=input.LA(1);
      if ((LA82_0 == EQUALS)) {
        alt82=1;
      }
 else       if ((LA82_0 == GREATER)) {
        alt82=2;
      }
 else       if ((LA82_0 == GREATER_EQUALS)) {
        alt82=3;
      }
 else       if ((LA82_0 == LESS)) {
        alt82=4;
      }
 else       if ((LA82_0 == LESS_EQUALS)) {
        alt82=5;
      }
 else       if ((LA82_0 == NOT_EQUALS)) {
        alt82=6;
      }
 else       if ((LA82_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
        alt82=7;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",82,0,input);
        throw nvae;
      }
switch (alt82) {
case 1:
{
          EQUALS255=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator4413);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            EQUALS255_tree=(Object)adaptor.create(EQUALS255);
            root_0=(Object)adaptor.becomeRoot(EQUALS255_tree,root_0);
          }
          if (state.backtracking == 0) {
            helper.emit(EQUALS255,DroolsEditorType.SYMBOL);
          }
        }
      break;
case 2:
{
      GREATER256=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4421);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER256_tree=(Object)adaptor.create(GREATER256);
        root_0=(Object)adaptor.becomeRoot(GREATER256_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(GREATER256,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  GREATER_EQUALS257=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator4429);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER_EQUALS257_tree=(Object)adaptor.create(GREATER_EQUALS257);
    root_0=(Object)adaptor.becomeRoot(GREATER_EQUALS257_tree,root_0);
  }
  if (state.backtracking == 0) {
    helper.emit(GREATER_EQUALS257,DroolsEditorType.SYMBOL);
  }
}
break;
case 4:
{
LESS258=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4437);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS258_tree=(Object)adaptor.create(LESS258);
root_0=(Object)adaptor.becomeRoot(LESS258_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(LESS258,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUALS259=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator4445);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS_EQUALS259_tree=(Object)adaptor.create(LESS_EQUALS259);
root_0=(Object)adaptor.becomeRoot(LESS_EQUALS259_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(LESS_EQUALS259,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUALS260=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator4453);
if (state.failed) return retval;
if (state.backtracking == 0) {
NOT_EQUALS260_tree=(Object)adaptor.create(NOT_EQUALS260);
root_0=(Object)adaptor.becomeRoot(NOT_EQUALS260_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(NOT_EQUALS260,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
int alt80=2;
int LA80_0=input.LA(1);
if ((LA80_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
int LA80_1=input.LA(2);
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
alt80=1;
}
}
switch (alt80) {
case 1:
{
pushFollow(FOLLOW_not_key_in_simple_operator4461);
not_key261=not_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,not_key261.getTree());
}
break;
}
{
pushFollow(FOLLOW_operator_key_in_simple_operator4468);
operator_key262=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(operator_key262.getTree(),root_0);
int alt81=2;
int LA81_0=input.LA(1);
if ((LA81_0 == LEFT_SQUARE)) {
alt81=1;
}
switch (alt81) {
case 1:
{
pushFollow(FOLLOW_operator_params_in_simple_operator4472);
operator_params263=operator_params();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,operator_params263.getTree());
}
break;
}
}
}
break;
}
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4485);
expression_value264=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value264.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
