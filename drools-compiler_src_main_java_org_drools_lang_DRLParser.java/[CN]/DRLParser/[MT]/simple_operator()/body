{
  simple_operator_return retval=new simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id1=null;
  Token ga1=null;
  Token id2=null;
  Token id3=null;
  Token ga2=null;
  Token id4=null;
  Token EQUAL243=null;
  Token GREATER244=null;
  Token GREATER_EQUAL245=null;
  Token LESS246=null;
  Token LESS_EQUAL247=null;
  Token NOT_EQUAL248=null;
  not_key_return not_key249=null;
  contains_key_return contains_key250=null;
  soundslike_key_return soundslike_key251=null;
  matches_key_return matches_key252=null;
  memberof_key_return memberof_key253=null;
  square_chunk_return square_chunk254=null;
  contains_key_return contains_key255=null;
  excludes_key_return excludes_key256=null;
  matches_key_return matches_key257=null;
  soundslike_key_return soundslike_key258=null;
  memberof_key_return memberof_key259=null;
  square_chunk_return square_chunk260=null;
  expression_value_return expression_value261=null;
  Object id1_tree=null;
  Object ga1_tree=null;
  Object id2_tree=null;
  Object id3_tree=null;
  Object ga2_tree=null;
  Object id4_tree=null;
  Object EQUAL243_tree=null;
  Object GREATER244_tree=null;
  Object GREATER_EQUAL245_tree=null;
  Object LESS246_tree=null;
  Object LESS_EQUAL247_tree=null;
  Object NOT_EQUAL248_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt84=14;
switch (input.LA(1)) {
case EQUAL:
{
          alt84=1;
        }
      break;
case GREATER:
{
      alt84=2;
    }
  break;
case GREATER_EQUAL:
{
  alt84=3;
}
break;
case LESS:
{
alt84=4;
}
break;
case LESS_EQUAL:
{
alt84=5;
}
break;
case NOT_EQUAL:
{
alt84=6;
}
break;
case ID:
{
int LA84_7=input.LA(2);
if ((LA84_7 == ID || LA84_7 == GRAVE_ACCENT) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
alt84=7;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt84=8;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.EXCLUDES)))) {
alt84=9;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt84=10;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt84=11;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt84=12;
}
 else if ((true)) {
alt84=13;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("1094:4: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | id1= ID | ga1= GRAVE_ACCENT id2= ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | id3= ID | ga2= GRAVE_ACCENT id4= ID square_chunk )",84,7,input);
throw nvae;
}
}
break;
case GRAVE_ACCENT:
{
alt84=14;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("1094:4: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | id1= ID | ga1= GRAVE_ACCENT id2= ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | id3= ID | ga2= GRAVE_ACCENT id4= ID square_chunk )",84,0,input);
throw nvae;
}
switch (alt84) {
case 1:
{
EQUAL243=(Token)input.LT(1);
match(input,EQUAL,FOLLOW_EQUAL_in_simple_operator3993);
if (failed) return retval;
if (backtracking == 0) {
EQUAL243_tree=(Object)adaptor.create(EQUAL243);
root_0=(Object)adaptor.becomeRoot(EQUAL243_tree,root_0);
}
if (backtracking == 0) {
emit(EQUAL243,DroolsEditorType.SYMBOL);
}
}
break;
case 2:
{
GREATER244=(Token)input.LT(1);
match(input,GREATER,FOLLOW_GREATER_in_simple_operator4001);
if (failed) return retval;
if (backtracking == 0) {
GREATER244_tree=(Object)adaptor.create(GREATER244);
root_0=(Object)adaptor.becomeRoot(GREATER244_tree,root_0);
}
if (backtracking == 0) {
emit(GREATER244,DroolsEditorType.SYMBOL);
}
}
break;
case 3:
{
GREATER_EQUAL245=(Token)input.LT(1);
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_simple_operator4009);
if (failed) return retval;
if (backtracking == 0) {
GREATER_EQUAL245_tree=(Object)adaptor.create(GREATER_EQUAL245);
root_0=(Object)adaptor.becomeRoot(GREATER_EQUAL245_tree,root_0);
}
if (backtracking == 0) {
emit(GREATER_EQUAL245,DroolsEditorType.SYMBOL);
}
}
break;
case 4:
{
LESS246=(Token)input.LT(1);
match(input,LESS,FOLLOW_LESS_in_simple_operator4017);
if (failed) return retval;
if (backtracking == 0) {
LESS246_tree=(Object)adaptor.create(LESS246);
root_0=(Object)adaptor.becomeRoot(LESS246_tree,root_0);
}
if (backtracking == 0) {
emit(LESS246,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUAL247=(Token)input.LT(1);
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_simple_operator4025);
if (failed) return retval;
if (backtracking == 0) {
LESS_EQUAL247_tree=(Object)adaptor.create(LESS_EQUAL247);
root_0=(Object)adaptor.becomeRoot(LESS_EQUAL247_tree,root_0);
}
if (backtracking == 0) {
emit(LESS_EQUAL247,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUAL248=(Token)input.LT(1);
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_simple_operator4033);
if (failed) return retval;
if (backtracking == 0) {
NOT_EQUAL248_tree=(Object)adaptor.create(NOT_EQUAL248);
root_0=(Object)adaptor.becomeRoot(NOT_EQUAL248_tree,root_0);
}
if (backtracking == 0) {
emit(NOT_EQUAL248,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
pushFollow(FOLLOW_not_key_in_simple_operator4041);
not_key249=not_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,not_key249.getTree());
int alt83=6;
int LA83_0=input.LA(1);
if ((LA83_0 == ID)) {
int LA83_1=input.LA(2);
if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt83=1;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt83=2;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt83=3;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt83=4;
}
 else if ((true)) {
alt83=5;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("1101:3: ( contains_key | soundslike_key | matches_key | memberof_key | id1= ID | ga1= GRAVE_ACCENT id2= ID square_chunk )",83,1,input);
throw nvae;
}
}
 else if ((LA83_0 == GRAVE_ACCENT)) {
alt83=6;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("1101:3: ( contains_key | soundslike_key | matches_key | memberof_key | id1= ID | ga1= GRAVE_ACCENT id2= ID square_chunk )",83,0,input);
throw nvae;
}
switch (alt83) {
case 1:
{
pushFollow(FOLLOW_contains_key_in_simple_operator4048);
contains_key250=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key250.getTree(),root_0);
}
break;
case 2:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator4055);
soundslike_key251=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key251.getTree(),root_0);
}
break;
case 3:
{
pushFollow(FOLLOW_matches_key_in_simple_operator4062);
matches_key252=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key252.getTree(),root_0);
}
break;
case 4:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator4069);
memberof_key253=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key253.getTree(),root_0);
}
break;
case 5:
{
id1=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4078);
if (failed) return retval;
if (backtracking == 0) {
id1_tree=(Object)adaptor.create(id1);
root_0=(Object)adaptor.becomeRoot(id1_tree,root_0);
}
if (backtracking == 0) {
emit(id1,DroolsEditorType.IDENTIFIER);
}
}
break;
case 6:
{
ga1=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator4089);
if (failed) return retval;
if (backtracking == 0) {
emit(ga1,DroolsEditorType.SYMBOL);
}
id2=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4097);
if (failed) return retval;
if (backtracking == 0) {
id2_tree=(Object)adaptor.create(id2);
root_0=(Object)adaptor.becomeRoot(id2_tree,root_0);
}
if (backtracking == 0) {
emit(id2,DroolsEditorType.IDENTIFIER);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator4103);
square_chunk254=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk254.getTree());
}
break;
}
}
break;
case 8:
{
pushFollow(FOLLOW_contains_key_in_simple_operator4109);
contains_key255=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key255.getTree(),root_0);
}
break;
case 9:
{
pushFollow(FOLLOW_excludes_key_in_simple_operator4115);
excludes_key256=excludes_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(excludes_key256.getTree(),root_0);
}
break;
case 10:
{
pushFollow(FOLLOW_matches_key_in_simple_operator4121);
matches_key257=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key257.getTree(),root_0);
}
break;
case 11:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator4127);
soundslike_key258=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key258.getTree(),root_0);
}
break;
case 12:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator4133);
memberof_key259=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key259.getTree(),root_0);
}
break;
case 13:
{
id3=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4141);
if (failed) return retval;
if (backtracking == 0) {
id3_tree=(Object)adaptor.create(id3);
root_0=(Object)adaptor.becomeRoot(id3_tree,root_0);
}
if (backtracking == 0) {
emit(id3,DroolsEditorType.IDENTIFIER);
}
}
break;
case 14:
{
ga2=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator4151);
if (failed) return retval;
if (backtracking == 0) {
emit(ga2,DroolsEditorType.SYMBOL);
}
id4=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4159);
if (failed) return retval;
if (backtracking == 0) {
id4_tree=(Object)adaptor.create(id4);
root_0=(Object)adaptor.becomeRoot(id4_tree,root_0);
}
if (backtracking == 0) {
emit(id4,DroolsEditorType.IDENTIFIER);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator4165);
square_chunk260=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk260.getTree());
}
break;
}
if (backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4172);
expression_value261=expression_value();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression_value261.getTree());
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
