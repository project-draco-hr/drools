{
  DRLParser.simple_operator_return retval=new DRLParser.simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS229=null;
  Token GREATER230=null;
  Token GREATER_EQUALS231=null;
  Token LESS232=null;
  Token LESS_EQUALS233=null;
  Token NOT_EQUALS234=null;
  DRLParser.not_key_return not_key235=null;
  DRLParser.operator_key_return operator_key236=null;
  DRLParser.square_chunk_return square_chunk237=null;
  DRLParser.expression_value_return expression_value238=null;
  Object EQUALS229_tree=null;
  Object GREATER230_tree=null;
  Object GREATER_EQUALS231_tree=null;
  Object LESS232_tree=null;
  Object LESS_EQUALS233_tree=null;
  Object NOT_EQUALS234_tree=null;
  if (state.backtracking == 0)   helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt76=7;
      int LA76_0=input.LA(1);
      if ((LA76_0 == EQUALS)) {
        alt76=1;
      }
 else       if ((LA76_0 == GREATER)) {
        alt76=2;
      }
 else       if ((LA76_0 == GREATER_EQUALS)) {
        alt76=3;
      }
 else       if ((LA76_0 == LESS)) {
        alt76=4;
      }
 else       if ((LA76_0 == LESS_EQUALS)) {
        alt76=5;
      }
 else       if ((LA76_0 == NOT_EQUALS)) {
        alt76=6;
      }
 else       if ((LA76_0 == ID) && ((((helper.isPluggableEvaluator(false))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
        alt76=7;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",76,0,input);
        throw nvae;
      }
switch (alt76) {
case 1:
{
          EQUALS229=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator3936);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            EQUALS229_tree=(Object)adaptor.create(EQUALS229);
            root_0=(Object)adaptor.becomeRoot(EQUALS229_tree,root_0);
          }
          if (state.backtracking == 0) {
            helper.emit(EQUALS229,DroolsEditorType.SYMBOL);
          }
        }
      break;
case 2:
{
      GREATER230=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator3944);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER230_tree=(Object)adaptor.create(GREATER230);
        root_0=(Object)adaptor.becomeRoot(GREATER230_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(GREATER230,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  GREATER_EQUALS231=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator3952);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER_EQUALS231_tree=(Object)adaptor.create(GREATER_EQUALS231);
    root_0=(Object)adaptor.becomeRoot(GREATER_EQUALS231_tree,root_0);
  }
  if (state.backtracking == 0) {
    helper.emit(GREATER_EQUALS231,DroolsEditorType.SYMBOL);
  }
}
break;
case 4:
{
LESS232=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator3960);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS232_tree=(Object)adaptor.create(LESS232);
root_0=(Object)adaptor.becomeRoot(LESS232_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(LESS232,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUALS233=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator3968);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS_EQUALS233_tree=(Object)adaptor.create(LESS_EQUALS233);
root_0=(Object)adaptor.becomeRoot(LESS_EQUALS233_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(LESS_EQUALS233,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUALS234=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator3976);
if (state.failed) return retval;
if (state.backtracking == 0) {
NOT_EQUALS234_tree=(Object)adaptor.create(NOT_EQUALS234);
root_0=(Object)adaptor.becomeRoot(NOT_EQUALS234_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(NOT_EQUALS234,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
int alt74=2;
int LA74_0=input.LA(1);
if ((LA74_0 == ID) && ((((helper.isPluggableEvaluator(false))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
int LA74_1=input.LA(2);
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
alt74=1;
}
}
switch (alt74) {
case 1:
{
pushFollow(FOLLOW_not_key_in_simple_operator3984);
not_key235=not_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,not_key235.getTree());
}
break;
}
{
pushFollow(FOLLOW_operator_key_in_simple_operator3991);
operator_key236=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(operator_key236.getTree(),root_0);
int alt75=2;
int LA75_0=input.LA(1);
if ((LA75_0 == LEFT_SQUARE)) {
alt75=1;
}
switch (alt75) {
case 1:
{
pushFollow(FOLLOW_square_chunk_in_simple_operator3994);
square_chunk237=square_chunk();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,square_chunk237.getTree());
}
break;
}
}
}
break;
}
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4006);
expression_value238=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value238.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
