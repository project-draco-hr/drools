{
  simple_operator_return retval=new simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUAL250=null;
  Token GREATER251=null;
  Token GREATER_EQUAL252=null;
  Token LESS253=null;
  Token LESS_EQUAL254=null;
  Token NOT_EQUAL255=null;
  Token ID261=null;
  Token GRAVE_ACCENT262=null;
  Token ID263=null;
  Token ID270=null;
  Token GRAVE_ACCENT271=null;
  Token ID272=null;
  not_key_return not_key256=null;
  contains_key_return contains_key257=null;
  soundslike_key_return soundslike_key258=null;
  matches_key_return matches_key259=null;
  memberof_key_return memberof_key260=null;
  square_chunk_return square_chunk264=null;
  contains_key_return contains_key265=null;
  excludes_key_return excludes_key266=null;
  matches_key_return matches_key267=null;
  soundslike_key_return soundslike_key268=null;
  memberof_key_return memberof_key269=null;
  square_chunk_return square_chunk273=null;
  expression_value_return expression_value274=null;
  Object EQUAL250_tree=null;
  Object GREATER251_tree=null;
  Object GREATER_EQUAL252_tree=null;
  Object LESS253_tree=null;
  Object LESS_EQUAL254_tree=null;
  Object NOT_EQUAL255_tree=null;
  Object ID261_tree=null;
  Object GRAVE_ACCENT262_tree=null;
  Object ID263_tree=null;
  Object ID270_tree=null;
  Object GRAVE_ACCENT271_tree=null;
  Object ID272_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt86=14;
switch (input.LA(1)) {
case EQUAL:
{
          alt86=1;
        }
      break;
case GREATER:
{
      alt86=2;
    }
  break;
case GREATER_EQUAL:
{
  alt86=3;
}
break;
case LESS:
{
alt86=4;
}
break;
case LESS_EQUAL:
{
alt86=5;
}
break;
case NOT_EQUAL:
{
alt86=6;
}
break;
case ID:
{
int LA86_7=input.LA(2);
if ((LA86_7 == ID || LA86_7 == GRAVE_ACCENT) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
alt86=7;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt86=8;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.EXCLUDES)))) {
alt86=9;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt86=10;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt86=11;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt86=12;
}
 else if ((true)) {
alt86=13;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("803:4: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",86,7,input);
throw nvae;
}
}
break;
case GRAVE_ACCENT:
{
alt86=14;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("803:4: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",86,0,input);
throw nvae;
}
switch (alt86) {
case 1:
{
EQUAL250=(Token)input.LT(1);
match(input,EQUAL,FOLLOW_EQUAL_in_simple_operator3450);
if (failed) return retval;
if (backtracking == 0) {
EQUAL250_tree=(Object)adaptor.create(EQUAL250);
root_0=(Object)adaptor.becomeRoot(EQUAL250_tree,root_0);
}
}
break;
case 2:
{
GREATER251=(Token)input.LT(1);
match(input,GREATER,FOLLOW_GREATER_in_simple_operator3456);
if (failed) return retval;
if (backtracking == 0) {
GREATER251_tree=(Object)adaptor.create(GREATER251);
root_0=(Object)adaptor.becomeRoot(GREATER251_tree,root_0);
}
}
break;
case 3:
{
GREATER_EQUAL252=(Token)input.LT(1);
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_simple_operator3462);
if (failed) return retval;
if (backtracking == 0) {
GREATER_EQUAL252_tree=(Object)adaptor.create(GREATER_EQUAL252);
root_0=(Object)adaptor.becomeRoot(GREATER_EQUAL252_tree,root_0);
}
}
break;
case 4:
{
LESS253=(Token)input.LT(1);
match(input,LESS,FOLLOW_LESS_in_simple_operator3468);
if (failed) return retval;
if (backtracking == 0) {
LESS253_tree=(Object)adaptor.create(LESS253);
root_0=(Object)adaptor.becomeRoot(LESS253_tree,root_0);
}
}
break;
case 5:
{
LESS_EQUAL254=(Token)input.LT(1);
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_simple_operator3474);
if (failed) return retval;
if (backtracking == 0) {
LESS_EQUAL254_tree=(Object)adaptor.create(LESS_EQUAL254);
root_0=(Object)adaptor.becomeRoot(LESS_EQUAL254_tree,root_0);
}
}
break;
case 6:
{
NOT_EQUAL255=(Token)input.LT(1);
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_simple_operator3480);
if (failed) return retval;
if (backtracking == 0) {
NOT_EQUAL255_tree=(Object)adaptor.create(NOT_EQUAL255);
root_0=(Object)adaptor.becomeRoot(NOT_EQUAL255_tree,root_0);
}
}
break;
case 7:
{
pushFollow(FOLLOW_not_key_in_simple_operator3486);
not_key256=not_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,not_key256.getTree());
int alt85=6;
int LA85_0=input.LA(1);
if ((LA85_0 == ID)) {
int LA85_1=input.LA(2);
if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt85=1;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt85=2;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt85=3;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt85=4;
}
 else if ((true)) {
alt85=5;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("809:12: ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",85,1,input);
throw nvae;
}
}
 else if ((LA85_0 == GRAVE_ACCENT)) {
alt85=6;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("809:12: ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",85,0,input);
throw nvae;
}
switch (alt85) {
case 1:
{
pushFollow(FOLLOW_contains_key_in_simple_operator3489);
contains_key257=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key257.getTree(),root_0);
}
break;
case 2:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator3492);
soundslike_key258=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key258.getTree(),root_0);
}
break;
case 3:
{
pushFollow(FOLLOW_matches_key_in_simple_operator3495);
matches_key259=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key259.getTree(),root_0);
}
break;
case 4:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator3498);
memberof_key260=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key260.getTree(),root_0);
}
break;
case 5:
{
ID261=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3502);
if (failed) return retval;
if (backtracking == 0) {
ID261_tree=(Object)adaptor.create(ID261);
root_0=(Object)adaptor.becomeRoot(ID261_tree,root_0);
}
}
break;
case 6:
{
GRAVE_ACCENT262=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator3507);
if (failed) return retval;
ID263=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3510);
if (failed) return retval;
if (backtracking == 0) {
ID263_tree=(Object)adaptor.create(ID263);
root_0=(Object)adaptor.becomeRoot(ID263_tree,root_0);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator3513);
square_chunk264=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk264.getTree());
}
break;
}
}
break;
case 8:
{
pushFollow(FOLLOW_contains_key_in_simple_operator3519);
contains_key265=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key265.getTree(),root_0);
}
break;
case 9:
{
pushFollow(FOLLOW_excludes_key_in_simple_operator3525);
excludes_key266=excludes_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(excludes_key266.getTree(),root_0);
}
break;
case 10:
{
pushFollow(FOLLOW_matches_key_in_simple_operator3531);
matches_key267=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key267.getTree(),root_0);
}
break;
case 11:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator3537);
soundslike_key268=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key268.getTree(),root_0);
}
break;
case 12:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator3543);
memberof_key269=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key269.getTree(),root_0);
}
break;
case 13:
{
ID270=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3549);
if (failed) return retval;
if (backtracking == 0) {
ID270_tree=(Object)adaptor.create(ID270);
root_0=(Object)adaptor.becomeRoot(ID270_tree,root_0);
}
}
break;
case 14:
{
GRAVE_ACCENT271=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator3555);
if (failed) return retval;
ID272=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3558);
if (failed) return retval;
if (backtracking == 0) {
ID272_tree=(Object)adaptor.create(ID272);
root_0=(Object)adaptor.becomeRoot(ID272_tree,root_0);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator3561);
square_chunk273=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk273.getTree());
}
break;
}
pushFollow(FOLLOW_expression_value_in_simple_operator3565);
expression_value274=expression_value();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression_value274.getTree());
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
