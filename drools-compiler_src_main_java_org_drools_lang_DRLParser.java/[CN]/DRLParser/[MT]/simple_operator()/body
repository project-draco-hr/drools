{
  DRLParser.simple_operator_return retval=new DRLParser.simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUALS250=null;
  Token GREATER251=null;
  Token GREATER_EQUALS252=null;
  Token LESS253=null;
  Token LESS_EQUALS254=null;
  Token NOT_EQUALS255=null;
  DRLParser.not_key_return not_key256=null;
  DRLParser.operator_key_return operator_key257=null;
  DRLParser.operator_params_return operator_params258=null;
  DRLParser.expression_value_return expression_value259=null;
  Object EQUALS250_tree=null;
  Object GREATER251_tree=null;
  Object GREATER_EQUALS252_tree=null;
  Object LESS253_tree=null;
  Object LESS_EQUALS254_tree=null;
  Object NOT_EQUALS255_tree=null;
  if (state.backtracking == 0)   helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt80=7;
      int LA80_0=input.LA(1);
      if ((LA80_0 == EQUALS)) {
        alt80=1;
      }
 else       if ((LA80_0 == GREATER)) {
        alt80=2;
      }
 else       if ((LA80_0 == GREATER_EQUALS)) {
        alt80=3;
      }
 else       if ((LA80_0 == LESS)) {
        alt80=4;
      }
 else       if ((LA80_0 == LESS_EQUALS)) {
        alt80=5;
      }
 else       if ((LA80_0 == NOT_EQUALS)) {
        alt80=6;
      }
 else       if ((LA80_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
        alt80=7;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",80,0,input);
        throw nvae;
      }
switch (alt80) {
case 1:
{
          EQUALS250=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator4335);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            EQUALS250_tree=(Object)adaptor.create(EQUALS250);
            root_0=(Object)adaptor.becomeRoot(EQUALS250_tree,root_0);
          }
          if (state.backtracking == 0) {
            helper.emit(EQUALS250,DroolsEditorType.SYMBOL);
          }
        }
      break;
case 2:
{
      GREATER251=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4343);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER251_tree=(Object)adaptor.create(GREATER251);
        root_0=(Object)adaptor.becomeRoot(GREATER251_tree,root_0);
      }
      if (state.backtracking == 0) {
        helper.emit(GREATER251,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  GREATER_EQUALS252=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator4351);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER_EQUALS252_tree=(Object)adaptor.create(GREATER_EQUALS252);
    root_0=(Object)adaptor.becomeRoot(GREATER_EQUALS252_tree,root_0);
  }
  if (state.backtracking == 0) {
    helper.emit(GREATER_EQUALS252,DroolsEditorType.SYMBOL);
  }
}
break;
case 4:
{
LESS253=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4359);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS253_tree=(Object)adaptor.create(LESS253);
root_0=(Object)adaptor.becomeRoot(LESS253_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(LESS253,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUALS254=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator4367);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS_EQUALS254_tree=(Object)adaptor.create(LESS_EQUALS254);
root_0=(Object)adaptor.becomeRoot(LESS_EQUALS254_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(LESS_EQUALS254,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUALS255=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator4375);
if (state.failed) return retval;
if (state.backtracking == 0) {
NOT_EQUALS255_tree=(Object)adaptor.create(NOT_EQUALS255);
root_0=(Object)adaptor.becomeRoot(NOT_EQUALS255_tree,root_0);
}
if (state.backtracking == 0) {
helper.emit(NOT_EQUALS255,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
int alt78=2;
int LA78_0=input.LA(1);
if ((LA78_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
int LA78_1=input.LA(2);
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
alt78=1;
}
}
switch (alt78) {
case 1:
{
pushFollow(FOLLOW_not_key_in_simple_operator4383);
not_key256=not_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,not_key256.getTree());
}
break;
}
{
pushFollow(FOLLOW_operator_key_in_simple_operator4390);
operator_key257=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(operator_key257.getTree(),root_0);
int alt79=2;
int LA79_0=input.LA(1);
if ((LA79_0 == LEFT_SQUARE)) {
alt79=1;
}
switch (alt79) {
case 1:
{
pushFollow(FOLLOW_operator_params_in_simple_operator4394);
operator_params258=operator_params();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,operator_params258.getTree());
}
break;
}
}
}
break;
}
if (state.backtracking == 0) {
helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4407);
expression_value259=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value259.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
