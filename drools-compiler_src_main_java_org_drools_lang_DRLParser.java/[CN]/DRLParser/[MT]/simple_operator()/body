{
  DRLParser.simple_operator_return retval=new DRLParser.simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUAL251=null;
  Token GREATER252=null;
  Token GREATER_EQUAL253=null;
  Token LESS254=null;
  Token LESS_EQUAL255=null;
  Token NOT_EQUAL256=null;
  DRLParser.not_key_return not_key257=null;
  DRLParser.operator_key_return operator_key258=null;
  DRLParser.square_chunk_return square_chunk259=null;
  DRLParser.expression_value_return expression_value260=null;
  Object EQUAL251_tree=null;
  Object GREATER252_tree=null;
  Object GREATER_EQUAL253_tree=null;
  Object LESS254_tree=null;
  Object LESS_EQUAL255_tree=null;
  Object NOT_EQUAL256_tree=null;
  if (state.backtracking == 0)   emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
  try {
{
      root_0=(Object)adaptor.nil();
      int alt93=7;
      int LA93_0=input.LA(1);
      if ((LA93_0 == EQUAL)) {
        alt93=1;
      }
 else       if ((LA93_0 == GREATER)) {
        alt93=2;
      }
 else       if ((LA93_0 == GREATER_EQUAL)) {
        alt93=3;
      }
 else       if ((LA93_0 == LESS)) {
        alt93=4;
      }
 else       if ((LA93_0 == LESS_EQUAL)) {
        alt93=5;
      }
 else       if ((LA93_0 == NOT_EQUAL)) {
        alt93=6;
      }
 else       if ((LA93_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
        alt93=7;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",93,0,input);
        throw nvae;
      }
switch (alt93) {
case 1:
{
          EQUAL251=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_simple_operator4231);
          if (state.failed)           return retval;
          if (state.backtracking == 0) {
            EQUAL251_tree=(Object)adaptor.create(EQUAL251);
            root_0=(Object)adaptor.becomeRoot(EQUAL251_tree,root_0);
          }
          if (state.backtracking == 0) {
            emit(EQUAL251,DroolsEditorType.SYMBOL);
          }
        }
      break;
case 2:
{
      GREATER252=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4239);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        GREATER252_tree=(Object)adaptor.create(GREATER252);
        root_0=(Object)adaptor.becomeRoot(GREATER252_tree,root_0);
      }
      if (state.backtracking == 0) {
        emit(GREATER252,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  GREATER_EQUAL253=(Token)match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_simple_operator4247);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    GREATER_EQUAL253_tree=(Object)adaptor.create(GREATER_EQUAL253);
    root_0=(Object)adaptor.becomeRoot(GREATER_EQUAL253_tree,root_0);
  }
  if (state.backtracking == 0) {
    emit(GREATER_EQUAL253,DroolsEditorType.SYMBOL);
  }
}
break;
case 4:
{
LESS254=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4255);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS254_tree=(Object)adaptor.create(LESS254);
root_0=(Object)adaptor.becomeRoot(LESS254_tree,root_0);
}
if (state.backtracking == 0) {
emit(LESS254,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUAL255=(Token)match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_simple_operator4263);
if (state.failed) return retval;
if (state.backtracking == 0) {
LESS_EQUAL255_tree=(Object)adaptor.create(LESS_EQUAL255);
root_0=(Object)adaptor.becomeRoot(LESS_EQUAL255_tree,root_0);
}
if (state.backtracking == 0) {
emit(LESS_EQUAL255,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUAL256=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_simple_operator4271);
if (state.failed) return retval;
if (state.backtracking == 0) {
NOT_EQUAL256_tree=(Object)adaptor.create(NOT_EQUAL256);
root_0=(Object)adaptor.becomeRoot(NOT_EQUAL256_tree,root_0);
}
if (state.backtracking == 0) {
emit(NOT_EQUAL256,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
int alt91=2;
int LA91_0=input.LA(1);
if ((LA91_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
int LA91_1=input.LA(2);
if ((((validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
alt91=1;
}
}
switch (alt91) {
case 1:
{
pushFollow(FOLLOW_not_key_in_simple_operator4279);
not_key257=not_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,not_key257.getTree());
}
break;
}
{
pushFollow(FOLLOW_operator_key_in_simple_operator4286);
operator_key258=operator_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) root_0=(Object)adaptor.becomeRoot(operator_key258.getTree(),root_0);
int alt92=2;
int LA92_0=input.LA(1);
if ((LA92_0 == LEFT_SQUARE)) {
alt92=1;
}
switch (alt92) {
case 1:
{
pushFollow(FOLLOW_square_chunk_in_simple_operator4289);
square_chunk259=square_chunk();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,square_chunk259.getTree());
}
break;
}
}
}
break;
}
if (state.backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4301);
expression_value260=expression_value();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression_value260.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
