{
  simple_operator_return retval=new simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id1=null;
  Token ga1=null;
  Token id2=null;
  Token id3=null;
  Token ga2=null;
  Token id4=null;
  Token EQUAL247=null;
  Token GREATER248=null;
  Token GREATER_EQUAL249=null;
  Token LESS250=null;
  Token LESS_EQUAL251=null;
  Token NOT_EQUAL252=null;
  not_key_return not_key253=null;
  contains_key_return contains_key254=null;
  soundslike_key_return soundslike_key255=null;
  matches_key_return matches_key256=null;
  memberof_key_return memberof_key257=null;
  square_chunk_return square_chunk258=null;
  contains_key_return contains_key259=null;
  excludes_key_return excludes_key260=null;
  matches_key_return matches_key261=null;
  soundslike_key_return soundslike_key262=null;
  memberof_key_return memberof_key263=null;
  square_chunk_return square_chunk264=null;
  expression_value_return expression_value265=null;
  Object id1_tree=null;
  Object ga1_tree=null;
  Object id2_tree=null;
  Object id3_tree=null;
  Object ga2_tree=null;
  Object id4_tree=null;
  Object EQUAL247_tree=null;
  Object GREATER248_tree=null;
  Object GREATER_EQUAL249_tree=null;
  Object LESS250_tree=null;
  Object LESS_EQUAL251_tree=null;
  Object NOT_EQUAL252_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
      }
      int alt88=14;
switch (input.LA(1)) {
case EQUAL:
{
          alt88=1;
        }
      break;
case GREATER:
{
      alt88=2;
    }
  break;
case GREATER_EQUAL:
{
  alt88=3;
}
break;
case LESS:
{
alt88=4;
}
break;
case LESS_EQUAL:
{
alt88=5;
}
break;
case NOT_EQUAL:
{
alt88=6;
}
break;
case ID:
{
int LA88_7=input.LA(2);
if ((LA88_7 == ID || LA88_7 == GRAVE_ACCENT) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
alt88=7;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt88=8;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.EXCLUDES)))) {
alt88=9;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt88=10;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt88=11;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt88=12;
}
 else if ((true)) {
alt88=13;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("1237:3: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | id1= ID | ga1= GRAVE_ACCENT id2= ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | id3= ID | ga2= GRAVE_ACCENT id4= ID square_chunk )",88,7,input);
throw nvae;
}
}
break;
case GRAVE_ACCENT:
{
alt88=14;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("1237:3: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | id1= ID | ga1= GRAVE_ACCENT id2= ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | id3= ID | ga2= GRAVE_ACCENT id4= ID square_chunk )",88,0,input);
throw nvae;
}
switch (alt88) {
case 1:
{
EQUAL247=(Token)input.LT(1);
match(input,EQUAL,FOLLOW_EQUAL_in_simple_operator4158);
if (failed) return retval;
if (backtracking == 0) {
EQUAL247_tree=(Object)adaptor.create(EQUAL247);
root_0=(Object)adaptor.becomeRoot(EQUAL247_tree,root_0);
}
if (backtracking == 0) {
emit(EQUAL247,DroolsEditorType.SYMBOL);
}
}
break;
case 2:
{
GREATER248=(Token)input.LT(1);
match(input,GREATER,FOLLOW_GREATER_in_simple_operator4166);
if (failed) return retval;
if (backtracking == 0) {
GREATER248_tree=(Object)adaptor.create(GREATER248);
root_0=(Object)adaptor.becomeRoot(GREATER248_tree,root_0);
}
if (backtracking == 0) {
emit(GREATER248,DroolsEditorType.SYMBOL);
}
}
break;
case 3:
{
GREATER_EQUAL249=(Token)input.LT(1);
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_simple_operator4174);
if (failed) return retval;
if (backtracking == 0) {
GREATER_EQUAL249_tree=(Object)adaptor.create(GREATER_EQUAL249);
root_0=(Object)adaptor.becomeRoot(GREATER_EQUAL249_tree,root_0);
}
if (backtracking == 0) {
emit(GREATER_EQUAL249,DroolsEditorType.SYMBOL);
}
}
break;
case 4:
{
LESS250=(Token)input.LT(1);
match(input,LESS,FOLLOW_LESS_in_simple_operator4182);
if (failed) return retval;
if (backtracking == 0) {
LESS250_tree=(Object)adaptor.create(LESS250);
root_0=(Object)adaptor.becomeRoot(LESS250_tree,root_0);
}
if (backtracking == 0) {
emit(LESS250,DroolsEditorType.SYMBOL);
}
}
break;
case 5:
{
LESS_EQUAL251=(Token)input.LT(1);
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_simple_operator4190);
if (failed) return retval;
if (backtracking == 0) {
LESS_EQUAL251_tree=(Object)adaptor.create(LESS_EQUAL251);
root_0=(Object)adaptor.becomeRoot(LESS_EQUAL251_tree,root_0);
}
if (backtracking == 0) {
emit(LESS_EQUAL251,DroolsEditorType.SYMBOL);
}
}
break;
case 6:
{
NOT_EQUAL252=(Token)input.LT(1);
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_simple_operator4198);
if (failed) return retval;
if (backtracking == 0) {
NOT_EQUAL252_tree=(Object)adaptor.create(NOT_EQUAL252);
root_0=(Object)adaptor.becomeRoot(NOT_EQUAL252_tree,root_0);
}
if (backtracking == 0) {
emit(NOT_EQUAL252,DroolsEditorType.SYMBOL);
}
}
break;
case 7:
{
pushFollow(FOLLOW_not_key_in_simple_operator4206);
not_key253=not_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,not_key253.getTree());
int alt87=6;
int LA87_0=input.LA(1);
if ((LA87_0 == ID)) {
int LA87_1=input.LA(2);
if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt87=1;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt87=2;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt87=3;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt87=4;
}
 else if ((true)) {
alt87=5;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("1244:3: ( contains_key | soundslike_key | matches_key | memberof_key | id1= ID | ga1= GRAVE_ACCENT id2= ID square_chunk )",87,1,input);
throw nvae;
}
}
 else if ((LA87_0 == GRAVE_ACCENT)) {
alt87=6;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("1244:3: ( contains_key | soundslike_key | matches_key | memberof_key | id1= ID | ga1= GRAVE_ACCENT id2= ID square_chunk )",87,0,input);
throw nvae;
}
switch (alt87) {
case 1:
{
pushFollow(FOLLOW_contains_key_in_simple_operator4213);
contains_key254=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key254.getTree(),root_0);
}
break;
case 2:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator4220);
soundslike_key255=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key255.getTree(),root_0);
}
break;
case 3:
{
pushFollow(FOLLOW_matches_key_in_simple_operator4227);
matches_key256=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key256.getTree(),root_0);
}
break;
case 4:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator4234);
memberof_key257=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key257.getTree(),root_0);
}
break;
case 5:
{
id1=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4243);
if (failed) return retval;
if (backtracking == 0) {
id1_tree=(Object)adaptor.create(id1);
root_0=(Object)adaptor.becomeRoot(id1_tree,root_0);
}
if (backtracking == 0) {
emit(id1,DroolsEditorType.IDENTIFIER);
}
}
break;
case 6:
{
ga1=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator4254);
if (failed) return retval;
if (backtracking == 0) {
emit(ga1,DroolsEditorType.SYMBOL);
}
id2=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4262);
if (failed) return retval;
if (backtracking == 0) {
id2_tree=(Object)adaptor.create(id2);
root_0=(Object)adaptor.becomeRoot(id2_tree,root_0);
}
if (backtracking == 0) {
emit(id2,DroolsEditorType.IDENTIFIER);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator4268);
square_chunk258=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk258.getTree());
}
break;
}
}
break;
case 8:
{
pushFollow(FOLLOW_contains_key_in_simple_operator4274);
contains_key259=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key259.getTree(),root_0);
}
break;
case 9:
{
pushFollow(FOLLOW_excludes_key_in_simple_operator4280);
excludes_key260=excludes_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(excludes_key260.getTree(),root_0);
}
break;
case 10:
{
pushFollow(FOLLOW_matches_key_in_simple_operator4286);
matches_key261=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key261.getTree(),root_0);
}
break;
case 11:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator4292);
soundslike_key262=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key262.getTree(),root_0);
}
break;
case 12:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator4298);
memberof_key263=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key263.getTree(),root_0);
}
break;
case 13:
{
id3=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4306);
if (failed) return retval;
if (backtracking == 0) {
id3_tree=(Object)adaptor.create(id3);
root_0=(Object)adaptor.becomeRoot(id3_tree,root_0);
}
if (backtracking == 0) {
emit(id3,DroolsEditorType.IDENTIFIER);
}
}
break;
case 14:
{
ga2=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator4316);
if (failed) return retval;
if (backtracking == 0) {
emit(ga2,DroolsEditorType.SYMBOL);
}
id4=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4324);
if (failed) return retval;
if (backtracking == 0) {
id4_tree=(Object)adaptor.create(id4);
root_0=(Object)adaptor.becomeRoot(id4_tree,root_0);
}
if (backtracking == 0) {
emit(id4,DroolsEditorType.IDENTIFIER);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator4330);
square_chunk264=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk264.getTree());
}
break;
}
if (backtracking == 0) {
emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
}
pushFollow(FOLLOW_expression_value_in_simple_operator4337);
expression_value265=expression_value();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression_value265.getTree());
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
