{
  simple_operator_return retval=new simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUAL244=null;
  Token GREATER245=null;
  Token GREATER_EQUAL246=null;
  Token LESS247=null;
  Token LESS_EQUAL248=null;
  Token NOT_EQUAL249=null;
  Token ID255=null;
  Token GRAVE_ACCENT256=null;
  Token ID257=null;
  Token ID264=null;
  Token GRAVE_ACCENT265=null;
  Token ID266=null;
  not_key_return not_key250=null;
  contains_key_return contains_key251=null;
  soundslike_key_return soundslike_key252=null;
  matches_key_return matches_key253=null;
  memberof_key_return memberof_key254=null;
  square_chunk_return square_chunk258=null;
  contains_key_return contains_key259=null;
  excludes_key_return excludes_key260=null;
  matches_key_return matches_key261=null;
  soundslike_key_return soundslike_key262=null;
  memberof_key_return memberof_key263=null;
  square_chunk_return square_chunk267=null;
  expression_value_return expression_value268=null;
  Object EQUAL244_tree=null;
  Object GREATER245_tree=null;
  Object GREATER_EQUAL246_tree=null;
  Object LESS247_tree=null;
  Object LESS_EQUAL248_tree=null;
  Object NOT_EQUAL249_tree=null;
  Object ID255_tree=null;
  Object GRAVE_ACCENT256_tree=null;
  Object ID257_tree=null;
  Object ID264_tree=null;
  Object GRAVE_ACCENT265_tree=null;
  Object ID266_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt84=14;
switch (input.LA(1)) {
case EQUAL:
{
          alt84=1;
        }
      break;
case GREATER:
{
      alt84=2;
    }
  break;
case GREATER_EQUAL:
{
  alt84=3;
}
break;
case LESS:
{
alt84=4;
}
break;
case LESS_EQUAL:
{
alt84=5;
}
break;
case NOT_EQUAL:
{
alt84=6;
}
break;
case ID:
{
int LA84_7=input.LA(2);
if ((LA84_7 == ID || LA84_7 == GRAVE_ACCENT) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
alt84=7;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt84=8;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.EXCLUDES)))) {
alt84=9;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt84=10;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt84=11;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt84=12;
}
 else if ((true)) {
alt84=13;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("779:4: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",84,7,input);
throw nvae;
}
}
break;
case GRAVE_ACCENT:
{
alt84=14;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("779:4: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",84,0,input);
throw nvae;
}
switch (alt84) {
case 1:
{
EQUAL244=(Token)input.LT(1);
match(input,EQUAL,FOLLOW_EQUAL_in_simple_operator3397);
if (failed) return retval;
if (backtracking == 0) {
EQUAL244_tree=(Object)adaptor.create(EQUAL244);
root_0=(Object)adaptor.becomeRoot(EQUAL244_tree,root_0);
}
}
break;
case 2:
{
GREATER245=(Token)input.LT(1);
match(input,GREATER,FOLLOW_GREATER_in_simple_operator3403);
if (failed) return retval;
if (backtracking == 0) {
GREATER245_tree=(Object)adaptor.create(GREATER245);
root_0=(Object)adaptor.becomeRoot(GREATER245_tree,root_0);
}
}
break;
case 3:
{
GREATER_EQUAL246=(Token)input.LT(1);
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_simple_operator3409);
if (failed) return retval;
if (backtracking == 0) {
GREATER_EQUAL246_tree=(Object)adaptor.create(GREATER_EQUAL246);
root_0=(Object)adaptor.becomeRoot(GREATER_EQUAL246_tree,root_0);
}
}
break;
case 4:
{
LESS247=(Token)input.LT(1);
match(input,LESS,FOLLOW_LESS_in_simple_operator3415);
if (failed) return retval;
if (backtracking == 0) {
LESS247_tree=(Object)adaptor.create(LESS247);
root_0=(Object)adaptor.becomeRoot(LESS247_tree,root_0);
}
}
break;
case 5:
{
LESS_EQUAL248=(Token)input.LT(1);
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_simple_operator3421);
if (failed) return retval;
if (backtracking == 0) {
LESS_EQUAL248_tree=(Object)adaptor.create(LESS_EQUAL248);
root_0=(Object)adaptor.becomeRoot(LESS_EQUAL248_tree,root_0);
}
}
break;
case 6:
{
NOT_EQUAL249=(Token)input.LT(1);
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_simple_operator3427);
if (failed) return retval;
if (backtracking == 0) {
NOT_EQUAL249_tree=(Object)adaptor.create(NOT_EQUAL249);
root_0=(Object)adaptor.becomeRoot(NOT_EQUAL249_tree,root_0);
}
}
break;
case 7:
{
pushFollow(FOLLOW_not_key_in_simple_operator3433);
not_key250=not_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,not_key250.getTree());
int alt83=6;
int LA83_0=input.LA(1);
if ((LA83_0 == ID)) {
int LA83_1=input.LA(2);
if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt83=1;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt83=2;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt83=3;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt83=4;
}
 else if ((true)) {
alt83=5;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("785:12: ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",83,1,input);
throw nvae;
}
}
 else if ((LA83_0 == GRAVE_ACCENT)) {
alt83=6;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("785:12: ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",83,0,input);
throw nvae;
}
switch (alt83) {
case 1:
{
pushFollow(FOLLOW_contains_key_in_simple_operator3436);
contains_key251=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key251.getTree(),root_0);
}
break;
case 2:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator3439);
soundslike_key252=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key252.getTree(),root_0);
}
break;
case 3:
{
pushFollow(FOLLOW_matches_key_in_simple_operator3442);
matches_key253=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key253.getTree(),root_0);
}
break;
case 4:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator3445);
memberof_key254=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key254.getTree(),root_0);
}
break;
case 5:
{
ID255=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3449);
if (failed) return retval;
if (backtracking == 0) {
ID255_tree=(Object)adaptor.create(ID255);
root_0=(Object)adaptor.becomeRoot(ID255_tree,root_0);
}
}
break;
case 6:
{
GRAVE_ACCENT256=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator3454);
if (failed) return retval;
ID257=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3457);
if (failed) return retval;
if (backtracking == 0) {
ID257_tree=(Object)adaptor.create(ID257);
root_0=(Object)adaptor.becomeRoot(ID257_tree,root_0);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator3460);
square_chunk258=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk258.getTree());
}
break;
}
}
break;
case 8:
{
pushFollow(FOLLOW_contains_key_in_simple_operator3466);
contains_key259=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key259.getTree(),root_0);
}
break;
case 9:
{
pushFollow(FOLLOW_excludes_key_in_simple_operator3472);
excludes_key260=excludes_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(excludes_key260.getTree(),root_0);
}
break;
case 10:
{
pushFollow(FOLLOW_matches_key_in_simple_operator3478);
matches_key261=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key261.getTree(),root_0);
}
break;
case 11:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator3484);
soundslike_key262=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key262.getTree(),root_0);
}
break;
case 12:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator3490);
memberof_key263=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key263.getTree(),root_0);
}
break;
case 13:
{
ID264=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3496);
if (failed) return retval;
if (backtracking == 0) {
ID264_tree=(Object)adaptor.create(ID264);
root_0=(Object)adaptor.becomeRoot(ID264_tree,root_0);
}
}
break;
case 14:
{
GRAVE_ACCENT265=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator3502);
if (failed) return retval;
ID266=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3505);
if (failed) return retval;
if (backtracking == 0) {
ID266_tree=(Object)adaptor.create(ID266);
root_0=(Object)adaptor.becomeRoot(ID266_tree,root_0);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator3508);
square_chunk267=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk267.getTree());
}
break;
}
pushFollow(FOLLOW_expression_value_in_simple_operator3512);
expression_value268=expression_value();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression_value268.getTree());
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
