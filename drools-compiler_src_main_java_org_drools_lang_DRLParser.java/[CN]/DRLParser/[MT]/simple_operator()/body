{
  simple_operator_return retval=new simple_operator_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EQUAL219=null;
  Token GREATER220=null;
  Token GREATER_EQUAL221=null;
  Token LESS222=null;
  Token LESS_EQUAL223=null;
  Token NOT_EQUAL224=null;
  Token ID230=null;
  Token GRAVE_ACCENT231=null;
  Token ID232=null;
  Token ID239=null;
  Token GRAVE_ACCENT240=null;
  Token ID241=null;
  not_key_return not_key225=null;
  contains_key_return contains_key226=null;
  soundslike_key_return soundslike_key227=null;
  matches_key_return matches_key228=null;
  memberof_key_return memberof_key229=null;
  square_chunk_return square_chunk233=null;
  contains_key_return contains_key234=null;
  excludes_key_return excludes_key235=null;
  matches_key_return matches_key236=null;
  soundslike_key_return soundslike_key237=null;
  memberof_key_return memberof_key238=null;
  square_chunk_return square_chunk242=null;
  expression_value_return expression_value243=null;
  Object EQUAL219_tree=null;
  Object GREATER220_tree=null;
  Object GREATER_EQUAL221_tree=null;
  Object LESS222_tree=null;
  Object LESS_EQUAL223_tree=null;
  Object NOT_EQUAL224_tree=null;
  Object ID230_tree=null;
  Object GRAVE_ACCENT231_tree=null;
  Object ID232_tree=null;
  Object ID239_tree=null;
  Object GRAVE_ACCENT240_tree=null;
  Object ID241_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt78=14;
switch (input.LA(1)) {
case EQUAL:
{
          alt78=1;
        }
      break;
case GREATER:
{
      alt78=2;
    }
  break;
case GREATER_EQUAL:
{
  alt78=3;
}
break;
case LESS:
{
alt78=4;
}
break;
case LESS_EQUAL:
{
alt78=5;
}
break;
case NOT_EQUAL:
{
alt78=6;
}
break;
case ID:
{
int LA78_7=input.LA(2);
if ((LA78_7 == ID || LA78_7 == GRAVE_ACCENT) && ((validateIdentifierKey(DroolsSoftKeywords.NOT)))) {
alt78=7;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt78=8;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.EXCLUDES)))) {
alt78=9;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt78=10;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt78=11;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt78=12;
}
 else if ((true)) {
alt78=13;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("691:4: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",78,7,input);
throw nvae;
}
}
break;
case GRAVE_ACCENT:
{
alt78=14;
}
break;
default :
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("691:4: ( EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL | NOT_EQUAL | not_key ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk ) | contains_key | excludes_key | matches_key | soundslike_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",78,0,input);
throw nvae;
}
switch (alt78) {
case 1:
{
EQUAL219=(Token)input.LT(1);
match(input,EQUAL,FOLLOW_EQUAL_in_simple_operator3142);
if (failed) return retval;
if (backtracking == 0) {
EQUAL219_tree=(Object)adaptor.create(EQUAL219);
root_0=(Object)adaptor.becomeRoot(EQUAL219_tree,root_0);
}
}
break;
case 2:
{
GREATER220=(Token)input.LT(1);
match(input,GREATER,FOLLOW_GREATER_in_simple_operator3148);
if (failed) return retval;
if (backtracking == 0) {
GREATER220_tree=(Object)adaptor.create(GREATER220);
root_0=(Object)adaptor.becomeRoot(GREATER220_tree,root_0);
}
}
break;
case 3:
{
GREATER_EQUAL221=(Token)input.LT(1);
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_simple_operator3154);
if (failed) return retval;
if (backtracking == 0) {
GREATER_EQUAL221_tree=(Object)adaptor.create(GREATER_EQUAL221);
root_0=(Object)adaptor.becomeRoot(GREATER_EQUAL221_tree,root_0);
}
}
break;
case 4:
{
LESS222=(Token)input.LT(1);
match(input,LESS,FOLLOW_LESS_in_simple_operator3160);
if (failed) return retval;
if (backtracking == 0) {
LESS222_tree=(Object)adaptor.create(LESS222);
root_0=(Object)adaptor.becomeRoot(LESS222_tree,root_0);
}
}
break;
case 5:
{
LESS_EQUAL223=(Token)input.LT(1);
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_simple_operator3166);
if (failed) return retval;
if (backtracking == 0) {
LESS_EQUAL223_tree=(Object)adaptor.create(LESS_EQUAL223);
root_0=(Object)adaptor.becomeRoot(LESS_EQUAL223_tree,root_0);
}
}
break;
case 6:
{
NOT_EQUAL224=(Token)input.LT(1);
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_simple_operator3172);
if (failed) return retval;
if (backtracking == 0) {
NOT_EQUAL224_tree=(Object)adaptor.create(NOT_EQUAL224);
root_0=(Object)adaptor.becomeRoot(NOT_EQUAL224_tree,root_0);
}
}
break;
case 7:
{
pushFollow(FOLLOW_not_key_in_simple_operator3178);
not_key225=not_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,not_key225.getTree());
int alt77=6;
int LA77_0=input.LA(1);
if ((LA77_0 == ID)) {
int LA77_1=input.LA(2);
if (((validateIdentifierKey(DroolsSoftKeywords.CONTAINS)))) {
alt77=1;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.SOUNDSLIKE)))) {
alt77=2;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MATCHES)))) {
alt77=3;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.MEMBEROF)))) {
alt77=4;
}
 else if ((true)) {
alt77=5;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("697:12: ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",77,1,input);
throw nvae;
}
}
 else if ((LA77_0 == GRAVE_ACCENT)) {
alt77=6;
}
 else {
if (backtracking > 0) {
failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("697:12: ( contains_key | soundslike_key | matches_key | memberof_key | ID | GRAVE_ACCENT ID square_chunk )",77,0,input);
throw nvae;
}
switch (alt77) {
case 1:
{
pushFollow(FOLLOW_contains_key_in_simple_operator3181);
contains_key226=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key226.getTree(),root_0);
}
break;
case 2:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator3184);
soundslike_key227=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key227.getTree(),root_0);
}
break;
case 3:
{
pushFollow(FOLLOW_matches_key_in_simple_operator3187);
matches_key228=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key228.getTree(),root_0);
}
break;
case 4:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator3190);
memberof_key229=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key229.getTree(),root_0);
}
break;
case 5:
{
ID230=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3194);
if (failed) return retval;
if (backtracking == 0) {
ID230_tree=(Object)adaptor.create(ID230);
root_0=(Object)adaptor.becomeRoot(ID230_tree,root_0);
}
}
break;
case 6:
{
GRAVE_ACCENT231=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator3199);
if (failed) return retval;
ID232=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3202);
if (failed) return retval;
if (backtracking == 0) {
ID232_tree=(Object)adaptor.create(ID232);
root_0=(Object)adaptor.becomeRoot(ID232_tree,root_0);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator3205);
square_chunk233=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk233.getTree());
}
break;
}
}
break;
case 8:
{
pushFollow(FOLLOW_contains_key_in_simple_operator3211);
contains_key234=contains_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(contains_key234.getTree(),root_0);
}
break;
case 9:
{
pushFollow(FOLLOW_excludes_key_in_simple_operator3217);
excludes_key235=excludes_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(excludes_key235.getTree(),root_0);
}
break;
case 10:
{
pushFollow(FOLLOW_matches_key_in_simple_operator3223);
matches_key236=matches_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(matches_key236.getTree(),root_0);
}
break;
case 11:
{
pushFollow(FOLLOW_soundslike_key_in_simple_operator3229);
soundslike_key237=soundslike_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(soundslike_key237.getTree(),root_0);
}
break;
case 12:
{
pushFollow(FOLLOW_memberof_key_in_simple_operator3235);
memberof_key238=memberof_key();
_fsp--;
if (failed) return retval;
if (backtracking == 0) root_0=(Object)adaptor.becomeRoot(memberof_key238.getTree(),root_0);
}
break;
case 13:
{
ID239=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3241);
if (failed) return retval;
if (backtracking == 0) {
ID239_tree=(Object)adaptor.create(ID239);
root_0=(Object)adaptor.becomeRoot(ID239_tree,root_0);
}
}
break;
case 14:
{
GRAVE_ACCENT240=(Token)input.LT(1);
match(input,GRAVE_ACCENT,FOLLOW_GRAVE_ACCENT_in_simple_operator3247);
if (failed) return retval;
ID241=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator3250);
if (failed) return retval;
if (backtracking == 0) {
ID241_tree=(Object)adaptor.create(ID241);
root_0=(Object)adaptor.becomeRoot(ID241_tree,root_0);
}
pushFollow(FOLLOW_square_chunk_in_simple_operator3253);
square_chunk242=square_chunk();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,square_chunk242.getTree());
}
break;
}
pushFollow(FOLLOW_expression_value_in_simple_operator3257);
expression_value243=expression_value();
_fsp--;
if (failed) return retval;
if (backtracking == 0) adaptor.addChild(root_0,expression_value243.getTree());
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
