{
  DRLParser.identifierSuffix_return retval=new DRLParser.identifierSuffix_return();
  retval.start=input.LT(1);
  int identifierSuffix_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_SQUARE583=null;
  Token RIGHT_SQUARE584=null;
  Token DOT585=null;
  Token LEFT_SQUARE587=null;
  Token RIGHT_SQUARE589=null;
  DRLParser.class_key_return class_key586=null;
  DRLParser.expression_return expression588=null;
  DRLParser.arguments_return arguments590=null;
  Object LEFT_SQUARE583_tree=null;
  Object RIGHT_SQUARE584_tree=null;
  Object DOT585_tree=null;
  Object LEFT_SQUARE587_tree=null;
  Object RIGHT_SQUARE589_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,159)) {
      return retval;
    }
    int alt179=3;
    int LA179_0=input.LA(1);
    if ((LA179_0 == LEFT_SQUARE)) {
      int LA179_1=input.LA(2);
      if ((LA179_1 == RIGHT_SQUARE)) {
        alt179=1;
      }
 else       if ((LA179_1 == ID || LA179_1 == STRING || (LA179_1 >= BOOL && LA179_1 <= LEFT_PAREN) || LA179_1 == DECIMAL || LA179_1 == LESS || LA179_1 == LEFT_SQUARE || (LA179_1 >= NULL && LA179_1 <= FLOAT) || (LA179_1 >= INCR && LA179_1 <= NEGATION))) {
        alt179=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",179,1,input);
        throw nvae;
      }
    }
 else     if ((LA179_0 == LEFT_PAREN)) {
      alt179=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",179,0,input);
      throw nvae;
    }
switch (alt179) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int cnt177=0;
        loop177:         do {
          int alt177=2;
          int LA177_0=input.LA(1);
          if ((LA177_0 == LEFT_SQUARE)) {
            alt177=1;
          }
switch (alt177) {
case 1:
{
              LEFT_SQUARE583=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7921);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                LEFT_SQUARE583_tree=(Object)adaptor.create(LEFT_SQUARE583);
                adaptor.addChild(root_0,LEFT_SQUARE583_tree);
              }
              RIGHT_SQUARE584=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7923);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                RIGHT_SQUARE584_tree=(Object)adaptor.create(RIGHT_SQUARE584);
                adaptor.addChild(root_0,RIGHT_SQUARE584_tree);
              }
            }
          break;
default :
        if (cnt177 >= 1)         break loop177;
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
    EarlyExitException eee=new EarlyExitException(177,input);
  throw eee;
}
cnt177++;
}
 while (true);
DOT585=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix7927);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT585_tree=(Object)adaptor.create(DOT585);
adaptor.addChild(root_0,DOT585_tree);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix7929);
class_key586=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key586.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
int cnt178=0;
loop178: do {
int alt178=2;
alt178=dfa178.predict(input);
switch (alt178) {
case 1:
{
LEFT_SQUARE587=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7944);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE587_tree=(Object)adaptor.create(LEFT_SQUARE587);
adaptor.addChild(root_0,LEFT_SQUARE587_tree);
}
pushFollow(FOLLOW_expression_in_identifierSuffix7946);
expression588=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression588.getTree());
RIGHT_SQUARE589=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7948);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE589_tree=(Object)adaptor.create(RIGHT_SQUARE589);
adaptor.addChild(root_0,RIGHT_SQUARE589_tree);
}
}
break;
default :
if (cnt178 >= 1) break loop178;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(178,input);
throw eee;
}
cnt178++;
}
 while (true);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_arguments_in_identifierSuffix7961);
arguments590=arguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arguments590.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,159,identifierSuffix_StartIndex);
}
}
return retval;
}
