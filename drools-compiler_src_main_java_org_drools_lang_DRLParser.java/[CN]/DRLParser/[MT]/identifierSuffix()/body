{
  DRLParser.identifierSuffix_return retval=new DRLParser.identifierSuffix_return();
  retval.start=input.LT(1);
  int identifierSuffix_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_SQUARE470=null;
  Token RIGHT_SQUARE471=null;
  Token DOT472=null;
  Token LEFT_SQUARE474=null;
  Token RIGHT_SQUARE476=null;
  DRLParser.class_key_return class_key473=null;
  DRLParser.expression_return expression475=null;
  DRLParser.arguments_return arguments477=null;
  Object LEFT_SQUARE470_tree=null;
  Object RIGHT_SQUARE471_tree=null;
  Object DOT472_tree=null;
  Object LEFT_SQUARE474_tree=null;
  Object RIGHT_SQUARE476_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,141)) {
      return retval;
    }
    int alt150=3;
    int LA150_0=input.LA(1);
    if ((LA150_0 == LEFT_SQUARE)) {
      int LA150_1=input.LA(2);
      if ((LA150_1 == RIGHT_SQUARE)) {
        alt150=1;
      }
 else       if ((LA150_1 == ID || LA150_1 == STRING || (LA150_1 >= BOOL && LA150_1 <= LEFT_PAREN) || LA150_1 == DECIMAL || LA150_1 == LESS || LA150_1 == LEFT_SQUARE || (LA150_1 >= NULL && LA150_1 <= FLOAT) || (LA150_1 >= INCR && LA150_1 <= NEGATION))) {
        alt150=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",150,1,input);
        throw nvae;
      }
    }
 else     if ((LA150_0 == LEFT_PAREN)) {
      alt150=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",150,0,input);
      throw nvae;
    }
switch (alt150) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int cnt148=0;
        loop148:         do {
          int alt148=2;
          int LA148_0=input.LA(1);
          if ((LA148_0 == LEFT_SQUARE)) {
            alt148=1;
          }
switch (alt148) {
case 1:
{
              LEFT_SQUARE470=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7203);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                LEFT_SQUARE470_tree=(Object)adaptor.create(LEFT_SQUARE470);
                adaptor.addChild(root_0,LEFT_SQUARE470_tree);
              }
              RIGHT_SQUARE471=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7205);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                RIGHT_SQUARE471_tree=(Object)adaptor.create(RIGHT_SQUARE471);
                adaptor.addChild(root_0,RIGHT_SQUARE471_tree);
              }
            }
          break;
default :
        if (cnt148 >= 1)         break loop148;
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
    EarlyExitException eee=new EarlyExitException(148,input);
  throw eee;
}
cnt148++;
}
 while (true);
DOT472=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix7209);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT472_tree=(Object)adaptor.create(DOT472);
adaptor.addChild(root_0,DOT472_tree);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix7211);
class_key473=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key473.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
int cnt149=0;
loop149: do {
int alt149=2;
alt149=dfa149.predict(input);
switch (alt149) {
case 1:
{
LEFT_SQUARE474=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7226);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE474_tree=(Object)adaptor.create(LEFT_SQUARE474);
adaptor.addChild(root_0,LEFT_SQUARE474_tree);
}
pushFollow(FOLLOW_expression_in_identifierSuffix7228);
expression475=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression475.getTree());
RIGHT_SQUARE476=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7230);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE476_tree=(Object)adaptor.create(RIGHT_SQUARE476);
adaptor.addChild(root_0,RIGHT_SQUARE476_tree);
}
}
break;
default :
if (cnt149 >= 1) break loop149;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(149,input);
throw eee;
}
cnt149++;
}
 while (true);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_arguments_in_identifierSuffix7243);
arguments477=arguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arguments477.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,141,identifierSuffix_StartIndex);
}
}
return retval;
}
