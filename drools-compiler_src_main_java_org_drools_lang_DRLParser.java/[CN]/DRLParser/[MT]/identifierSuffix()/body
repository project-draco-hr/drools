{
  DRLParser.identifierSuffix_return retval=new DRLParser.identifierSuffix_return();
  retval.start=input.LT(1);
  int identifierSuffix_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_SQUARE598=null;
  Token RIGHT_SQUARE599=null;
  Token DOT600=null;
  Token LEFT_SQUARE602=null;
  Token RIGHT_SQUARE604=null;
  DRLParser.class_key_return class_key601=null;
  DRLParser.expression_return expression603=null;
  DRLParser.arguments_return arguments605=null;
  Object LEFT_SQUARE598_tree=null;
  Object RIGHT_SQUARE599_tree=null;
  Object DOT600_tree=null;
  Object LEFT_SQUARE602_tree=null;
  Object RIGHT_SQUARE604_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,162)) {
      return retval;
    }
    int alt181=3;
    int LA181_0=input.LA(1);
    if ((LA181_0 == LEFT_SQUARE)) {
      int LA181_1=input.LA(2);
      if ((LA181_1 == RIGHT_SQUARE)) {
        alt181=1;
      }
 else       if ((LA181_1 == ID || LA181_1 == STRING || (LA181_1 >= BOOL && LA181_1 <= LEFT_PAREN) || LA181_1 == DECIMAL || LA181_1 == LESS || LA181_1 == LEFT_SQUARE || (LA181_1 >= NULL && LA181_1 <= FLOAT) || (LA181_1 >= INCR && LA181_1 <= NEGATION))) {
        alt181=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",181,1,input);
        throw nvae;
      }
    }
 else     if ((LA181_0 == LEFT_PAREN)) {
      alt181=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",181,0,input);
      throw nvae;
    }
switch (alt181) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int cnt179=0;
        loop179:         do {
          int alt179=2;
          int LA179_0=input.LA(1);
          if ((LA179_0 == LEFT_SQUARE)) {
            alt179=1;
          }
switch (alt179) {
case 1:
{
              LEFT_SQUARE598=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix8024);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                LEFT_SQUARE598_tree=(Object)adaptor.create(LEFT_SQUARE598);
                adaptor.addChild(root_0,LEFT_SQUARE598_tree);
              }
              RIGHT_SQUARE599=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix8026);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                RIGHT_SQUARE599_tree=(Object)adaptor.create(RIGHT_SQUARE599);
                adaptor.addChild(root_0,RIGHT_SQUARE599_tree);
              }
            }
          break;
default :
        if (cnt179 >= 1)         break loop179;
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
    EarlyExitException eee=new EarlyExitException(179,input);
  throw eee;
}
cnt179++;
}
 while (true);
DOT600=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix8030);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT600_tree=(Object)adaptor.create(DOT600);
adaptor.addChild(root_0,DOT600_tree);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix8032);
class_key601=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key601.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
int cnt180=0;
loop180: do {
int alt180=2;
alt180=dfa180.predict(input);
switch (alt180) {
case 1:
{
LEFT_SQUARE602=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix8047);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE602_tree=(Object)adaptor.create(LEFT_SQUARE602);
adaptor.addChild(root_0,LEFT_SQUARE602_tree);
}
pushFollow(FOLLOW_expression_in_identifierSuffix8049);
expression603=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression603.getTree());
RIGHT_SQUARE604=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix8051);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE604_tree=(Object)adaptor.create(RIGHT_SQUARE604);
adaptor.addChild(root_0,RIGHT_SQUARE604_tree);
}
}
break;
default :
if (cnt180 >= 1) break loop180;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(180,input);
throw eee;
}
cnt180++;
}
 while (true);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_arguments_in_identifierSuffix8064);
arguments605=arguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arguments605.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,162,identifierSuffix_StartIndex);
}
}
return retval;
}
