{
  DRLParser.identifierSuffix_return retval=new DRLParser.identifierSuffix_return();
  retval.start=input.LT(1);
  int identifierSuffix_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_SQUARE475=null;
  Token RIGHT_SQUARE476=null;
  Token DOT477=null;
  Token LEFT_SQUARE479=null;
  Token RIGHT_SQUARE481=null;
  DRLParser.class_key_return class_key478=null;
  DRLParser.expression_return expression480=null;
  DRLParser.arguments_return arguments482=null;
  Object LEFT_SQUARE475_tree=null;
  Object RIGHT_SQUARE476_tree=null;
  Object DOT477_tree=null;
  Object LEFT_SQUARE479_tree=null;
  Object RIGHT_SQUARE481_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,143)) {
      return retval;
    }
    int alt152=3;
    int LA152_0=input.LA(1);
    if ((LA152_0 == LEFT_SQUARE)) {
      int LA152_1=input.LA(2);
      if ((LA152_1 == RIGHT_SQUARE)) {
        alt152=1;
      }
 else       if ((LA152_1 == ID || LA152_1 == STRING || (LA152_1 >= BOOL && LA152_1 <= LEFT_PAREN) || LA152_1 == DECIMAL || LA152_1 == LESS || LA152_1 == LEFT_SQUARE || (LA152_1 >= NULL && LA152_1 <= FLOAT) || (LA152_1 >= INCR && LA152_1 <= NEGATION))) {
        alt152=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",152,1,input);
        throw nvae;
      }
    }
 else     if ((LA152_0 == LEFT_PAREN)) {
      alt152=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",152,0,input);
      throw nvae;
    }
switch (alt152) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int cnt150=0;
        loop150:         do {
          int alt150=2;
          int LA150_0=input.LA(1);
          if ((LA150_0 == LEFT_SQUARE)) {
            alt150=1;
          }
switch (alt150) {
case 1:
{
              LEFT_SQUARE475=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7264);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                LEFT_SQUARE475_tree=(Object)adaptor.create(LEFT_SQUARE475);
                adaptor.addChild(root_0,LEFT_SQUARE475_tree);
              }
              RIGHT_SQUARE476=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7266);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                RIGHT_SQUARE476_tree=(Object)adaptor.create(RIGHT_SQUARE476);
                adaptor.addChild(root_0,RIGHT_SQUARE476_tree);
              }
            }
          break;
default :
        if (cnt150 >= 1)         break loop150;
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
    EarlyExitException eee=new EarlyExitException(150,input);
  throw eee;
}
cnt150++;
}
 while (true);
DOT477=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix7270);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT477_tree=(Object)adaptor.create(DOT477);
adaptor.addChild(root_0,DOT477_tree);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix7272);
class_key478=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key478.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
int cnt151=0;
loop151: do {
int alt151=2;
alt151=dfa151.predict(input);
switch (alt151) {
case 1:
{
LEFT_SQUARE479=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7287);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE479_tree=(Object)adaptor.create(LEFT_SQUARE479);
adaptor.addChild(root_0,LEFT_SQUARE479_tree);
}
pushFollow(FOLLOW_expression_in_identifierSuffix7289);
expression480=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression480.getTree());
RIGHT_SQUARE481=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7291);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE481_tree=(Object)adaptor.create(RIGHT_SQUARE481);
adaptor.addChild(root_0,RIGHT_SQUARE481_tree);
}
}
break;
default :
if (cnt151 >= 1) break loop151;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(151,input);
throw eee;
}
cnt151++;
}
 while (true);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_arguments_in_identifierSuffix7304);
arguments482=arguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arguments482.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,143,identifierSuffix_StartIndex);
}
}
return retval;
}
