{
  DRLParser.identifierSuffix_return retval=new DRLParser.identifierSuffix_return();
  retval.start=input.LT(1);
  int identifierSuffix_StartIndex=input.index();
  Object root_0=null;
  Token LEFT_SQUARE440=null;
  Token RIGHT_SQUARE441=null;
  Token DOT442=null;
  Token LEFT_SQUARE444=null;
  Token RIGHT_SQUARE446=null;
  DRLParser.class_key_return class_key443=null;
  DRLParser.expression_return expression445=null;
  DRLParser.arguments_return arguments447=null;
  Object LEFT_SQUARE440_tree=null;
  Object RIGHT_SQUARE441_tree=null;
  Object DOT442_tree=null;
  Object LEFT_SQUARE444_tree=null;
  Object RIGHT_SQUARE446_tree=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,132)) {
      return retval;
    }
    int alt143=3;
    int LA143_0=input.LA(1);
    if ((LA143_0 == LEFT_SQUARE)) {
      int LA143_1=input.LA(2);
      if ((LA143_1 == RIGHT_SQUARE)) {
        alt143=1;
      }
 else       if ((LA143_1 == ID || LA143_1 == STRING || (LA143_1 >= BOOL && LA143_1 <= LEFT_PAREN) || LA143_1 == LESS || (LA143_1 >= NULL && LA143_1 <= LEFT_SQUARE) || (LA143_1 >= INCR && LA143_1 <= NEGATION))) {
        alt143=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",143,1,input);
        throw nvae;
      }
    }
 else     if ((LA143_0 == LEFT_PAREN)) {
      alt143=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",143,0,input);
      throw nvae;
    }
switch (alt143) {
case 1:
{
        root_0=(Object)adaptor.nil();
        int cnt141=0;
        loop141:         do {
          int alt141=2;
          int LA141_0=input.LA(1);
          if ((LA141_0 == LEFT_SQUARE)) {
            alt141=1;
          }
switch (alt141) {
case 1:
{
              LEFT_SQUARE440=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix6663);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                LEFT_SQUARE440_tree=(Object)adaptor.create(LEFT_SQUARE440);
                adaptor.addChild(root_0,LEFT_SQUARE440_tree);
              }
              RIGHT_SQUARE441=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix6665);
              if (state.failed)               return retval;
              if (state.backtracking == 0) {
                RIGHT_SQUARE441_tree=(Object)adaptor.create(RIGHT_SQUARE441);
                adaptor.addChild(root_0,RIGHT_SQUARE441_tree);
              }
            }
          break;
default :
        if (cnt141 >= 1)         break loop141;
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
    EarlyExitException eee=new EarlyExitException(141,input);
  throw eee;
}
cnt141++;
}
 while (true);
DOT442=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix6669);
if (state.failed) return retval;
if (state.backtracking == 0) {
DOT442_tree=(Object)adaptor.create(DOT442);
adaptor.addChild(root_0,DOT442_tree);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix6671);
class_key443=class_key();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,class_key443.getTree());
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
int cnt142=0;
loop142: do {
int alt142=2;
alt142=dfa142.predict(input);
switch (alt142) {
case 1:
{
LEFT_SQUARE444=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix6686);
if (state.failed) return retval;
if (state.backtracking == 0) {
LEFT_SQUARE444_tree=(Object)adaptor.create(LEFT_SQUARE444);
adaptor.addChild(root_0,LEFT_SQUARE444_tree);
}
pushFollow(FOLLOW_expression_in_identifierSuffix6688);
expression445=expression();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,expression445.getTree());
RIGHT_SQUARE446=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix6690);
if (state.failed) return retval;
if (state.backtracking == 0) {
RIGHT_SQUARE446_tree=(Object)adaptor.create(RIGHT_SQUARE446);
adaptor.addChild(root_0,RIGHT_SQUARE446_tree);
}
}
break;
default :
if (cnt142 >= 1) break loop142;
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
EarlyExitException eee=new EarlyExitException(142,input);
throw eee;
}
cnt142++;
}
 while (true);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_arguments_in_identifierSuffix6703);
arguments447=arguments();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,arguments447.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,132,identifierSuffix_StartIndex);
}
}
return retval;
}
