{
  DRLParser.argument_return retval=new DRLParser.argument_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID357=null;
  DRLParser.dimension_definition_return dimension_definition358=null;
  Object ID357_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      ID357=(Token)match(input,ID,FOLLOW_ID_in_argument6028);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID357_tree=(Object)adaptor.create(ID357);
        adaptor.addChild(root_0,ID357_tree);
      }
      if (state.backtracking == 0) {
        helper.emit(ID357,DroolsEditorType.IDENTIFIER);
      }
      loop121:       do {
        int alt121=2;
        int LA121_0=input.LA(1);
        if ((LA121_0 == LEFT_SQUARE)) {
          alt121=1;
        }
switch (alt121) {
case 1:
{
            pushFollow(FOLLOW_dimension_definition_in_argument6034);
            dimension_definition358=dimension_definition();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,dimension_definition358.getTree());
          }
        break;
default :
      break loop121;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
