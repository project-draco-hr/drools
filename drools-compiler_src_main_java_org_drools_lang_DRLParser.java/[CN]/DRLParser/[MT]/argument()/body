{
  argument_return retval=new argument_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID44=null;
  dimension_definition_return dimension_definition45=null;
  Object ID44_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      ID44=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_argument1075);
      if (failed)       return retval;
      if (backtracking == 0) {
        ID44_tree=(Object)adaptor.create(ID44);
        adaptor.addChild(root_0,ID44_tree);
      }
      if (backtracking == 0) {
        emit(ID44,DroolsEditorType.IDENTIFIER);
      }
      loop18:       do {
        int alt18=2;
        int LA18_0=input.LA(1);
        if ((LA18_0 == LEFT_SQUARE)) {
          alt18=1;
        }
switch (alt18) {
case 1:
{
            pushFollow(FOLLOW_dimension_definition_in_argument1081);
            dimension_definition45=dimension_definition();
            _fsp--;
            if (failed)             return retval;
            if (backtracking == 0)             adaptor.addChild(root_0,dimension_definition45.getTree());
          }
        break;
default :
      break loop18;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
