{
  DRLParser.not_end_key_return retval=new DRLParser.not_end_key_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token any=null;
  Object any_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      if (!((!(helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        throw new FailedPredicateException(input,"not_end_key","!(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
      }
      any=(Token)input.LT(1);
      matchAny(input);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        any_tree=(Object)adaptor.create(any);
        adaptor.addChild(root_0,any_tree);
      }
      if (state.backtracking == 0) {
        helper.emit(any,DroolsEditorType.CODE_CHUNK);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
