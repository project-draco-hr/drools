{
  Token t=null;
  Token n=null;
  square_chunk_return param=null;
  RestrictionDescr rd=null;
  String op=null;
  String paramText=null;
  boolean isNegated=false;
  try {
{
      int alt69=16;
switch (input.LA(1)) {
case 78:
{
          alt69=1;
        }
      break;
case 79:
{
      alt69=2;
    }
  break;
case 80:
{
  alt69=3;
}
break;
case 81:
{
alt69=4;
}
break;
case 82:
{
alt69=5;
}
break;
case 83:
{
alt69=6;
}
break;
case CONTAINS:
{
alt69=7;
}
break;
case NOT:
{
switch (input.LA(2)) {
case CONTAINS:
{
alt69=8;
}
break;
case TILDE:
{
alt69=16;
}
break;
case MATCHES:
{
alt69=12;
}
break;
case MEMBEROF:
{
alt69=14;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("1470:3: (t= '==' | t= '>' | t= '>=' | t= '<' | t= '<=' | t= '!=' | t= CONTAINS | n= NOT t= CONTAINS | t= EXCLUDES | t= MATCHES | t= SOUNDSLIKE | n= NOT t= MATCHES | t= MEMBEROF | n= NOT t= MEMBEROF | TILDE t= ID (param= square_chunk )? | n= NOT TILDE t= ID (param= square_chunk )? )",69,8,input);
throw nvae;
}
}
break;
case EXCLUDES:
{
alt69=9;
}
break;
case MATCHES:
{
alt69=10;
}
break;
case SOUNDSLIKE:
{
alt69=11;
}
break;
case MEMBEROF:
{
alt69=13;
}
break;
case TILDE:
{
alt69=15;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("1470:3: (t= '==' | t= '>' | t= '>=' | t= '<' | t= '<=' | t= '!=' | t= CONTAINS | n= NOT t= CONTAINS | t= EXCLUDES | t= MATCHES | t= SOUNDSLIKE | n= NOT t= MATCHES | t= MEMBEROF | n= NOT t= MEMBEROF | TILDE t= ID (param= square_chunk )? | n= NOT TILDE t= ID (param= square_chunk )? )",69,0,input);
throw nvae;
}
switch (alt69) {
case 1:
{
t=(Token)input.LT(1);
match(input,78,FOLLOW_78_in_simple_operator3916);
if (failed) return;
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,79,FOLLOW_79_in_simple_operator3924);
if (failed) return;
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,80,FOLLOW_80_in_simple_operator3932);
if (failed) return;
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,81,FOLLOW_81_in_simple_operator3940);
if (failed) return;
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,82,FOLLOW_82_in_simple_operator3948);
if (failed) return;
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,83,FOLLOW_83_in_simple_operator3956);
if (failed) return;
}
break;
case 7:
{
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_simple_operator3984);
if (failed) return;
}
break;
case 8:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator4012);
if (failed) return;
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_simple_operator4016);
if (failed) return;
}
break;
case 9:
{
t=(Token)input.LT(1);
match(input,EXCLUDES,FOLLOW_EXCLUDES_in_simple_operator4044);
if (failed) return;
}
break;
case 10:
{
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_simple_operator4072);
if (failed) return;
}
break;
case 11:
{
t=(Token)input.LT(1);
match(input,SOUNDSLIKE,FOLLOW_SOUNDSLIKE_in_simple_operator4100);
if (failed) return;
}
break;
case 12:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator4128);
if (failed) return;
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_simple_operator4132);
if (failed) return;
}
break;
case 13:
{
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_simple_operator4160);
if (failed) return;
}
break;
case 14:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator4188);
if (failed) return;
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_simple_operator4192);
if (failed) return;
}
break;
case 15:
{
match(input,TILDE,FOLLOW_TILDE_in_simple_operator4198);
if (failed) return;
t=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4202);
if (failed) return;
int alt67=2;
int LA67_0=input.LA(1);
if ((LA67_0 == LEFT_SQUARE)) {
alt67=1;
}
switch (alt67) {
case 1:
{
pushFollow(FOLLOW_square_chunk_in_simple_operator4206);
param=square_chunk();
_fsp--;
if (failed) return;
}
break;
}
}
break;
case 16:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator4215);
if (failed) return;
match(input,TILDE,FOLLOW_TILDE_in_simple_operator4217);
if (failed) return;
t=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4221);
if (failed) return;
int alt68=2;
int LA68_0=input.LA(1);
if ((LA68_0 == LEFT_SQUARE)) {
alt68=1;
}
switch (alt68) {
case 1:
{
pushFollow(FOLLOW_square_chunk_in_simple_operator4225);
param=square_chunk();
_fsp--;
if (failed) return;
}
break;
}
}
break;
}
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
location.setProperty(Location.LOCATION_PROPERTY_OPERATOR,t.getText());
op=t.getText();
isNegated=n != null;
if (param != null) {
paramText=safeSubstring(input.toString(param.start,param.stop),1,input.toString(param.start,param.stop).length() - 1);
}
}
pushFollow(FOLLOW_expression_value_in_simple_operator4240);
rd=expression_value(base,op,isNegated,paramText);
_fsp--;
if (failed) return;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (rd == null && op != null) {
base.addRestriction(new LiteralRestrictionDescr(op,false,null));
}
}
return;
}
