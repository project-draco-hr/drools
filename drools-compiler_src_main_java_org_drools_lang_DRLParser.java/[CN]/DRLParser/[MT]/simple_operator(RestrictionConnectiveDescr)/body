{
  Token t=null;
  Token n=null;
  square_chunk_return param=null;
  RestrictionDescr rd=null;
  String op=null;
  String paramText=null;
  boolean isNegated=false;
  try {
{
      int alt71=16;
switch (input.LA(1)) {
case 80:
{
          alt71=1;
        }
      break;
case 81:
{
      alt71=2;
    }
  break;
case 82:
{
  alt71=3;
}
break;
case 83:
{
alt71=4;
}
break;
case 84:
{
alt71=5;
}
break;
case 85:
{
alt71=6;
}
break;
case CONTAINS:
{
alt71=7;
}
break;
case NOT:
{
switch (input.LA(2)) {
case TILDE:
{
alt71=16;
}
break;
case MATCHES:
{
alt71=12;
}
break;
case CONTAINS:
{
alt71=8;
}
break;
case MEMBEROF:
{
alt71=14;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("1501:3: (t= '==' | t= '>' | t= '>=' | t= '<' | t= '<=' | t= '!=' | t= CONTAINS | n= NOT t= CONTAINS | t= EXCLUDES | t= MATCHES | t= SOUNDSLIKE | n= NOT t= MATCHES | t= MEMBEROF | n= NOT t= MEMBEROF | TILDE t= ID (param= square_chunk )? | n= NOT TILDE t= ID (param= square_chunk )? )",71,8,input);
throw nvae;
}
}
break;
case EXCLUDES:
{
alt71=9;
}
break;
case MATCHES:
{
alt71=10;
}
break;
case SOUNDSLIKE:
{
alt71=11;
}
break;
case MEMBEROF:
{
alt71=13;
}
break;
case TILDE:
{
alt71=15;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("1501:3: (t= '==' | t= '>' | t= '>=' | t= '<' | t= '<=' | t= '!=' | t= CONTAINS | n= NOT t= CONTAINS | t= EXCLUDES | t= MATCHES | t= SOUNDSLIKE | n= NOT t= MATCHES | t= MEMBEROF | n= NOT t= MEMBEROF | TILDE t= ID (param= square_chunk )? | n= NOT TILDE t= ID (param= square_chunk )? )",71,0,input);
throw nvae;
}
switch (alt71) {
case 1:
{
t=(Token)input.LT(1);
match(input,80,FOLLOW_80_in_simple_operator4287);
if (failed) return;
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,81,FOLLOW_81_in_simple_operator4295);
if (failed) return;
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,82,FOLLOW_82_in_simple_operator4303);
if (failed) return;
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,83,FOLLOW_83_in_simple_operator4311);
if (failed) return;
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,84,FOLLOW_84_in_simple_operator4319);
if (failed) return;
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,85,FOLLOW_85_in_simple_operator4327);
if (failed) return;
}
break;
case 7:
{
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_simple_operator4355);
if (failed) return;
}
break;
case 8:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator4383);
if (failed) return;
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_simple_operator4387);
if (failed) return;
}
break;
case 9:
{
t=(Token)input.LT(1);
match(input,EXCLUDES,FOLLOW_EXCLUDES_in_simple_operator4415);
if (failed) return;
}
break;
case 10:
{
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_simple_operator4443);
if (failed) return;
}
break;
case 11:
{
t=(Token)input.LT(1);
match(input,SOUNDSLIKE,FOLLOW_SOUNDSLIKE_in_simple_operator4471);
if (failed) return;
}
break;
case 12:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator4499);
if (failed) return;
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_simple_operator4503);
if (failed) return;
}
break;
case 13:
{
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_simple_operator4531);
if (failed) return;
}
break;
case 14:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator4559);
if (failed) return;
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_simple_operator4563);
if (failed) return;
}
break;
case 15:
{
match(input,TILDE,FOLLOW_TILDE_in_simple_operator4569);
if (failed) return;
t=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4573);
if (failed) return;
int alt69=2;
int LA69_0=input.LA(1);
if ((LA69_0 == LEFT_SQUARE)) {
alt69=1;
}
switch (alt69) {
case 1:
{
pushFollow(FOLLOW_square_chunk_in_simple_operator4577);
param=square_chunk();
_fsp--;
if (failed) return;
}
break;
}
}
break;
case 16:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator4586);
if (failed) return;
match(input,TILDE,FOLLOW_TILDE_in_simple_operator4588);
if (failed) return;
t=(Token)input.LT(1);
match(input,ID,FOLLOW_ID_in_simple_operator4592);
if (failed) return;
int alt70=2;
int LA70_0=input.LA(1);
if ((LA70_0 == LEFT_SQUARE)) {
alt70=1;
}
switch (alt70) {
case 1:
{
pushFollow(FOLLOW_square_chunk_in_simple_operator4596);
param=square_chunk();
_fsp--;
if (failed) return;
}
break;
}
}
break;
}
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
location.setProperty(Location.LOCATION_PROPERTY_OPERATOR,t.getText());
op=t.getText();
isNegated=n != null;
if (param != null) {
paramText=safeSubstring(input.toString(param.start,param.stop),1,input.toString(param.start,param.stop).length() - 1);
}
}
pushFollow(FOLLOW_expression_value_in_simple_operator4611);
rd=expression_value(base,op,isNegated,paramText);
_fsp--;
if (failed) return;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (rd == null && op != null) {
base.addRestriction(new LiteralRestrictionDescr(op,false,null));
}
}
return;
}
