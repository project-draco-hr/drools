{
  Token t=null;
  Token n=null;
  RestrictionDescr rd=null;
  String op=null;
  try {
{
      int alt70=13;
switch (input.LA(1)) {
case 75:
{
          alt70=1;
        }
      break;
case 76:
{
      alt70=2;
    }
  break;
case 77:
{
  alt70=3;
}
break;
case 78:
{
alt70=4;
}
break;
case 79:
{
alt70=5;
}
break;
case 80:
{
alt70=6;
}
break;
case CONTAINS:
{
alt70=7;
}
break;
case NOT:
{
switch (input.LA(2)) {
case CONTAINS:
{
alt70=8;
}
break;
case MEMBEROF:
{
alt70=13;
}
break;
case MATCHES:
{
alt70=11;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("1362:3: (t= '==' | t= '>' | t= '>=' | t= '<' | t= '<=' | t= '!=' | t= CONTAINS | n= NOT t= CONTAINS | t= EXCLUDES | t= MATCHES | n= NOT t= MATCHES | t= MEMBEROF | n= NOT t= MEMBEROF )",70,8,input);
throw nvae;
}
}
break;
case EXCLUDES:
{
alt70=9;
}
break;
case MATCHES:
{
alt70=10;
}
break;
case MEMBEROF:
{
alt70=12;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("1362:3: (t= '==' | t= '>' | t= '>=' | t= '<' | t= '<=' | t= '!=' | t= CONTAINS | n= NOT t= CONTAINS | t= EXCLUDES | t= MATCHES | n= NOT t= MATCHES | t= MEMBEROF | n= NOT t= MEMBEROF )",70,0,input);
throw nvae;
}
switch (alt70) {
case 1:
{
t=(Token)input.LT(1);
match(input,75,FOLLOW_75_in_simple_operator3748);
if (failed) return;
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,76,FOLLOW_76_in_simple_operator3756);
if (failed) return;
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,77,FOLLOW_77_in_simple_operator3764);
if (failed) return;
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,78,FOLLOW_78_in_simple_operator3772);
if (failed) return;
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,79,FOLLOW_79_in_simple_operator3780);
if (failed) return;
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,80,FOLLOW_80_in_simple_operator3788);
if (failed) return;
}
break;
case 7:
{
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_simple_operator3796);
if (failed) return;
}
break;
case 8:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator3804);
if (failed) return;
t=(Token)input.LT(1);
match(input,CONTAINS,FOLLOW_CONTAINS_in_simple_operator3808);
if (failed) return;
}
break;
case 9:
{
t=(Token)input.LT(1);
match(input,EXCLUDES,FOLLOW_EXCLUDES_in_simple_operator3816);
if (failed) return;
}
break;
case 10:
{
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_simple_operator3824);
if (failed) return;
}
break;
case 11:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator3832);
if (failed) return;
t=(Token)input.LT(1);
match(input,MATCHES,FOLLOW_MATCHES_in_simple_operator3836);
if (failed) return;
}
break;
case 12:
{
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_simple_operator3844);
if (failed) return;
}
break;
case 13:
{
n=(Token)input.LT(1);
match(input,NOT,FOLLOW_NOT_in_simple_operator3852);
if (failed) return;
t=(Token)input.LT(1);
match(input,MEMBEROF,FOLLOW_MEMBEROF_in_simple_operator3856);
if (failed) return;
}
break;
}
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
location.setProperty(Location.LOCATION_PROPERTY_OPERATOR,t.getText());
if (n != null) {
op="not " + t.getText();
}
 else {
op=t.getText();
}
}
pushFollow(FOLLOW_expression_value_in_simple_operator3870);
rd=expression_value(base,op);
_fsp--;
if (failed) return;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (rd == null && op != null) {
base.addRestriction(new LiteralRestrictionDescr(op,null));
}
}
return;
}
