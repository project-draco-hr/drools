{
  DRLParser.formalParameters_return retval=new DRLParser.formalParameters_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN743=null;
  Token RIGHT_PAREN745=null;
  DRLParser.formalParameterDecls_return formalParameterDecls744=null;
  Object LEFT_PAREN743_tree=null;
  Object RIGHT_PAREN745_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_PAREN743=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_formalParameters9228);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_PAREN743_tree=(Object)adaptor.create(LEFT_PAREN743);
        adaptor.addChild(root_0,LEFT_PAREN743_tree);
      }
      int alt221=2;
      int LA221_0=input.LA(1);
      if ((LA221_0 == ID)) {
        alt221=1;
      }
switch (alt221) {
case 1:
{
          pushFollow(FOLLOW_formalParameterDecls_in_formalParameters9230);
          formalParameterDecls744=formalParameterDecls();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,formalParameterDecls744.getTree());
        }
      break;
  }
  RIGHT_PAREN745=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_formalParameters9233);
  if (state.failed)   return retval;
  if (state.backtracking == 0) {
    RIGHT_PAREN745_tree=(Object)adaptor.create(RIGHT_PAREN745);
    adaptor.addChild(root_0,RIGHT_PAREN745_tree);
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
