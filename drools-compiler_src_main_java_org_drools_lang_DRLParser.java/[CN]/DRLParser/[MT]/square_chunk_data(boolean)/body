{
  DRLParser.square_chunk_data_return retval=new DRLParser.square_chunk_data_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ls1=null;
  Token any=null;
  Token rs1=null;
  DRLParser.square_chunk_data_return square_chunk_data287=null;
  Object ls1_tree=null;
  Object any_tree=null;
  Object rs1_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      ls1=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_square_chunk_data4909);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ls1_tree=(Object)adaptor.create(ls1);
        adaptor.addChild(root_0,ls1_tree);
      }
      if (state.backtracking == 0) {
        if (!isRecursive) {
          emit(ls1,DroolsEditorType.SYMBOL);
        }
 else {
          emit(ls1,DroolsEditorType.CODE_CHUNK);
        }
      }
      loop106:       do {
        int alt106=3;
        int LA106_0=input.LA(1);
        if (((LA106_0 >= VT_COMPILATION_UNIT && LA106_0 <= NULL) || (LA106_0 >= THEN && LA106_0 <= IdentifierPart))) {
          alt106=1;
        }
 else         if ((LA106_0 == LEFT_SQUARE)) {
          alt106=2;
        }
switch (alt106) {
case 1:
{
            any=(Token)input.LT(1);
            if ((input.LA(1) >= VT_COMPILATION_UNIT && input.LA(1) <= NULL) || (input.LA(1) >= THEN && input.LA(1) <= IdentifierPart)) {
              input.consume();
              if (state.backtracking == 0)               adaptor.addChild(root_0,(Object)adaptor.create(any));
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            if (state.backtracking == 0) {
              emit(any,DroolsEditorType.CODE_CHUNK);
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_square_chunk_data_in_square_chunk_data4936);
        square_chunk_data287=square_chunk_data(true);
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,square_chunk_data287.getTree());
      }
    break;
default :
  break loop106;
}
}
 while (true);
rs1=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_square_chunk_data4947);
if (state.failed) return retval;
if (state.backtracking == 0) {
rs1_tree=(Object)adaptor.create(rs1);
adaptor.addChild(root_0,rs1_tree);
}
if (state.backtracking == 0) {
if (!isRecursive) {
emit(rs1,DroolsEditorType.SYMBOL);
}
 else {
emit(rs1,DroolsEditorType.CODE_CHUNK);
}
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
