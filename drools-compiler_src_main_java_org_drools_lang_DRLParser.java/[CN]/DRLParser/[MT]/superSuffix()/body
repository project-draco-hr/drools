{
  DRLParser.superSuffix_return retval=new DRLParser.superSuffix_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT648=null;
  Token ID649=null;
  DRLParser.arguments_return arguments647=null;
  DRLParser.arguments_return arguments650=null;
  Object DOT648_tree=null;
  Object ID649_tree=null;
  try {
    int alt200=2;
    int LA200_0=input.LA(1);
    if ((LA200_0 == LEFT_PAREN)) {
      alt200=1;
    }
 else     if ((LA200_0 == DOT)) {
      alt200=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",200,0,input);
      throw nvae;
    }
switch (alt200) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_arguments_in_superSuffix8357);
        arguments647=arguments();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arguments647.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    DOT648=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix8365);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      DOT648_tree=(Object)adaptor.create(DOT648);
      adaptor.addChild(root_0,DOT648_tree);
    }
    ID649=(Token)match(input,ID,FOLLOW_ID_in_superSuffix8367);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID649_tree=(Object)adaptor.create(ID649);
      adaptor.addChild(root_0,ID649_tree);
    }
    int alt199=2;
    alt199=dfa199.predict(input);
switch (alt199) {
case 1:
{
        pushFollow(FOLLOW_arguments_in_superSuffix8376);
        arguments650=arguments();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arguments650.getTree());
      }
    break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
