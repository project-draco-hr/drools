{
  DRLParser.superSuffix_return retval=new DRLParser.superSuffix_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT663=null;
  Token ID664=null;
  DRLParser.arguments_return arguments662=null;
  DRLParser.arguments_return arguments665=null;
  Object DOT663_tree=null;
  Object ID664_tree=null;
  try {
    int alt202=2;
    int LA202_0=input.LA(1);
    if ((LA202_0 == LEFT_PAREN)) {
      alt202=1;
    }
 else     if ((LA202_0 == DOT)) {
      alt202=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",202,0,input);
      throw nvae;
    }
switch (alt202) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_arguments_in_superSuffix8460);
        arguments662=arguments();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arguments662.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    DOT663=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix8468);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      DOT663_tree=(Object)adaptor.create(DOT663);
      adaptor.addChild(root_0,DOT663_tree);
    }
    ID664=(Token)match(input,ID,FOLLOW_ID_in_superSuffix8470);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID664_tree=(Object)adaptor.create(ID664);
      adaptor.addChild(root_0,ID664_tree);
    }
    int alt201=2;
    alt201=dfa201.predict(input);
switch (alt201) {
case 1:
{
        pushFollow(FOLLOW_arguments_in_superSuffix8479);
        arguments665=arguments();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arguments665.getTree());
      }
    break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
