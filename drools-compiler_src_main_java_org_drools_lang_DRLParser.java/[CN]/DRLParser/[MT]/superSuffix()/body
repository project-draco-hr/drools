{
  DRLParser.superSuffix_return retval=new DRLParser.superSuffix_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT504=null;
  Token ID505=null;
  DRLParser.arguments_return arguments503=null;
  DRLParser.arguments_return arguments506=null;
  Object DOT504_tree=null;
  Object ID505_tree=null;
  try {
    int alt163=2;
    int LA163_0=input.LA(1);
    if ((LA163_0 == LEFT_PAREN)) {
      alt163=1;
    }
 else     if ((LA163_0 == DOT)) {
      alt163=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",163,0,input);
      throw nvae;
    }
switch (alt163) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_arguments_in_superSuffix7094);
        arguments503=arguments();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arguments503.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    DOT504=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix7102);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      DOT504_tree=(Object)adaptor.create(DOT504);
      adaptor.addChild(root_0,DOT504_tree);
    }
    ID505=(Token)match(input,ID,FOLLOW_ID_in_superSuffix7104);
    if (state.failed)     return retval;
    if (state.backtracking == 0) {
      ID505_tree=(Object)adaptor.create(ID505);
      adaptor.addChild(root_0,ID505_tree);
    }
    int alt162=2;
    alt162=dfa162.predict(input);
switch (alt162) {
case 1:
{
        pushFollow(FOLLOW_arguments_in_superSuffix7113);
        arguments506=arguments();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,arguments506.getTree());
      }
    break;
}
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
