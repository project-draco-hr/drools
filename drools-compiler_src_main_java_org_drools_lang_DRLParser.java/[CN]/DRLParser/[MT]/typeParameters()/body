{
  DRLParser.typeParameters_return retval=new DRLParser.typeParameters_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS756=null;
  Token COMMA758=null;
  Token GREATER760=null;
  DRLParser.typeParameter_return typeParameter757=null;
  DRLParser.typeParameter_return typeParameter759=null;
  Object LESS756_tree=null;
  Object COMMA758_tree=null;
  Object GREATER760_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS756=(Token)match(input,LESS,FOLLOW_LESS_in_typeParameters9294);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS756_tree=(Object)adaptor.create(LESS756);
        adaptor.addChild(root_0,LESS756_tree);
      }
      pushFollow(FOLLOW_typeParameter_in_typeParameters9296);
      typeParameter757=typeParameter();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeParameter757.getTree());
      loop226:       do {
        int alt226=2;
        int LA226_0=input.LA(1);
        if ((LA226_0 == COMMA)) {
          alt226=1;
        }
switch (alt226) {
case 1:
{
            COMMA758=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeParameters9299);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA758_tree=(Object)adaptor.create(COMMA758);
              adaptor.addChild(root_0,COMMA758_tree);
            }
            pushFollow(FOLLOW_typeParameter_in_typeParameters9301);
            typeParameter759=typeParameter();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,typeParameter759.getTree());
          }
        break;
default :
      break loop226;
  }
}
 while (true);
GREATER760=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeParameters9305);
if (state.failed) return retval;
if (state.backtracking == 0) {
  GREATER760_tree=(Object)adaptor.create(GREATER760);
  adaptor.addChild(root_0,GREATER760_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
