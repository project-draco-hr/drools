{
  DRLParser.typeParameters_return retval=new DRLParser.typeParameters_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LESS771=null;
  Token COMMA773=null;
  Token GREATER775=null;
  DRLParser.typeParameter_return typeParameter772=null;
  DRLParser.typeParameter_return typeParameter774=null;
  Object LESS771_tree=null;
  Object COMMA773_tree=null;
  Object GREATER775_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LESS771=(Token)match(input,LESS,FOLLOW_LESS_in_typeParameters9397);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LESS771_tree=(Object)adaptor.create(LESS771);
        adaptor.addChild(root_0,LESS771_tree);
      }
      pushFollow(FOLLOW_typeParameter_in_typeParameters9399);
      typeParameter772=typeParameter();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,typeParameter772.getTree());
      loop228:       do {
        int alt228=2;
        int LA228_0=input.LA(1);
        if ((LA228_0 == COMMA)) {
          alt228=1;
        }
switch (alt228) {
case 1:
{
            COMMA773=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeParameters9402);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              COMMA773_tree=(Object)adaptor.create(COMMA773);
              adaptor.addChild(root_0,COMMA773_tree);
            }
            pushFollow(FOLLOW_typeParameter_in_typeParameters9404);
            typeParameter774=typeParameter();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,typeParameter774.getTree());
          }
        break;
default :
      break loop228;
  }
}
 while (true);
GREATER775=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeParameters9408);
if (state.failed) return retval;
if (state.backtracking == 0) {
  GREATER775_tree=(Object)adaptor.create(GREATER775);
  adaptor.addChild(root_0,GREATER775_tree);
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
