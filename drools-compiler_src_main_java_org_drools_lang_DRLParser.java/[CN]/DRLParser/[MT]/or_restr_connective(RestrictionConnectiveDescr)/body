{
  RestrictionConnectiveDescr or=new RestrictionConnectiveDescr(RestrictionConnectiveDescr.OR);
  try {
{
      pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4167);
      and_restr_connective(or);
      _fsp--;
      if (failed)       return;
      loop73:       do {
        int alt73=2;
        int LA73_0=input.LA(1);
        if ((LA73_0 == DOUBLE_PIPE)) {
switch (input.LA(2)) {
case IN:
{
              int LA73_3=input.LA(3);
              if ((LA73_3 == LEFT_PAREN)) {
                int LA73_6=input.LA(4);
                if ((synpred11())) {
                  alt73=1;
                }
              }
            }
          break;
case NOT:
case CONTAINS:
case EXCLUDES:
case MATCHES:
case SOUNDSLIKE:
case MEMBEROF:
case TILDE:
case 82:
case 83:
case 84:
case 85:
case 86:
case 87:
{
          alt73=1;
        }
      break;
case LEFT_PAREN:
{
      int LA73_5=input.LA(3);
      if ((synpred11())) {
        alt73=1;
      }
    }
  break;
}
}
switch (alt73) {
case 1:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_restr_connective4191);
if (failed) return;
if (backtracking == 0) {
  location.setType(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
}
pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4202);
and_restr_connective(or);
_fsp--;
if (failed) return;
}
break;
default :
break loop73;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (or.getRestrictions().size() == 1) {
base.addOrMerge((RestrictionDescr)or.getRestrictions().get(0));
}
 else if (or.getRestrictions().size() > 1) {
base.addRestriction(or);
}
}
return;
}
