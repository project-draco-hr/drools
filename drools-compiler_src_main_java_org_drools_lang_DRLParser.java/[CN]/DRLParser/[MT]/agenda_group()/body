{
  DRLParser.agenda_group_return retval=new DRLParser.agenda_group_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING105=null;
  DRLParser.agenda_group_key_return agenda_group_key104=null;
  Object STRING105_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_agenda_group_key_in_agenda_group2037);
      agenda_group_key104=agenda_group_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       root_0=(Object)adaptor.becomeRoot(agenda_group_key104.getTree(),root_0);
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
      }
      STRING105=(Token)match(input,STRING,FOLLOW_STRING_in_agenda_group2042);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        STRING105_tree=(Object)adaptor.create(STRING105);
        adaptor.addChild(root_0,STRING105_tree);
      }
      if (state.backtracking == 0) {
        helper.emit(STRING105,DroolsEditorType.STRING_CONST);
      }
    }
    retval.stop=input.LT(-1);
    if (state.backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
