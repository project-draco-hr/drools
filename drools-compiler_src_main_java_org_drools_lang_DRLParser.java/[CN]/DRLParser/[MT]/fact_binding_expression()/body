{
  DRLParser.fact_binding_expression_return retval=new DRLParser.fact_binding_expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token pipe=null;
  DRLParser.or_key_return value=null;
  DRLParser.fact_return fact215=null;
  DRLParser.fact_return fact216=null;
  Object pipe_tree=null;
  RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
  RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
  RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
  Token orToken=null;
  try {
{
{
        pushFollow(FOLLOW_fact_in_fact_binding_expression3882);
        fact215=fact();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         stream_fact.add(fact215.getTree());
        if (state.backtracking == 0) {
          retval.tree=root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
          root_0=(Object)adaptor.nil();
{
            adaptor.addChild(root_0,stream_fact.nextTree());
          }
          retval.tree=root_0;
        }
      }
      loop69:       do {
        int alt69=2;
        int LA69_0=input.LA(1);
        if ((LA69_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
          alt69=1;
        }
 else         if ((LA69_0 == DOUBLE_PIPE)) {
          alt69=1;
        }
switch (alt69) {
case 1:
{
            int alt68=2;
            int LA68_0=input.LA(1);
            if ((LA68_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
              alt68=1;
            }
 else             if ((LA68_0 == DOUBLE_PIPE)) {
              alt68=2;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              NoViableAltException nvae=new NoViableAltException("",68,0,input);
              throw nvae;
            }
switch (alt68) {
case 1:
{
                pushFollow(FOLLOW_or_key_in_fact_binding_expression3894);
                value=or_key();
                state._fsp--;
                if (state.failed)                 return retval;
                if (state.backtracking == 0)                 stream_or_key.add(value.getTree());
                if (state.backtracking == 0) {
                  orToken=(value != null ? ((Token)value.start) : null);
                }
              }
            break;
case 2:
{
            pipe=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3900);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_DOUBLE_PIPE.add(pipe);
            if (state.backtracking == 0) {
              orToken=pipe;
            }
          }
        break;
    }
    pushFollow(FOLLOW_fact_in_fact_binding_expression3905);
    fact216=fact();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_fact.add(fact216.getTree());
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
{
          Object root_1=(Object)adaptor.nil();
          root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_OR,orToken),root_1);
          adaptor.addChild(root_1,stream_retval.nextTree());
          adaptor.addChild(root_1,stream_fact.nextTree());
          adaptor.addChild(root_0,root_1);
        }
      }
      retval.tree=root_0;
    }
  }
break;
default :
break loop69;
}
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
