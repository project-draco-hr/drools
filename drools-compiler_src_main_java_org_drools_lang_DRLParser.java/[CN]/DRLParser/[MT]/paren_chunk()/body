{
  paren_chunk_return retval=new paren_chunk_return();
  retval.start=input.LT(1);
  Object root_0=null;
  paren_chunk_data_return pc=null;
  RewriteRuleSubtreeStream stream_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk_data");
  String text="";
  try {
{
      pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk3887);
      pc=paren_chunk_data();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_paren_chunk_data.add(pc.getTree());
      if (backtracking == 0) {
        text=input.toString(pc.start,pc.stop);
      }
      if (backtracking == 0) {
        retval.tree=root_0;
        RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
        root_0=(Object)adaptor.nil();
{
          adaptor.addChild(root_0,adaptor.create(VT_PAREN_CHUNK,((Token)pc.start),text));
        }
      }
    }
    retval.stop=input.LT(-1);
    if (backtracking == 0) {
      retval.tree=(Object)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
  }
 finally {
  }
  return retval;
}
