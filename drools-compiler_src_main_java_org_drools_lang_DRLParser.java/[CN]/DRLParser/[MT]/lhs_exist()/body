{
  lhs_exist_return retval=new lhs_exist_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN142=null;
  Token RIGHT_PAREN144=null;
  exists_key_return exists_key140=null;
  lhs_or_return lhs_or141=null;
  lhs_or_return lhs_or143=null;
  lhs_pattern_return lhs_pattern145=null;
  Object LEFT_PAREN142_tree=null;
  Object RIGHT_PAREN144_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
  RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
  RewriteRuleSubtreeStream stream_exists_key=new RewriteRuleSubtreeStream(adaptor,"rule exists_key");
  try {
{
      pushFollow(FOLLOW_exists_key_in_lhs_exist2388);
      exists_key140=exists_key();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_exists_key.add(exists_key140.getTree());
      if (backtracking == 0) {
        emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_EXISTS);
      }
      int alt52=3;
      alt52=dfa52.predict(input);
switch (alt52) {
case 1:
{
          pushFollow(FOLLOW_lhs_or_in_lhs_exist2415);
          lhs_or141=lhs_or();
          _fsp--;
          if (failed)           return retval;
          if (backtracking == 0)           stream_lhs_or.add(lhs_or141.getTree());
        }
      break;
case 2:
{
      LEFT_PAREN142=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_exist2422);
      if (failed)       return retval;
      if (backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN142);
      if (backtracking == 0) {
        emit(LEFT_PAREN142,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_lhs_or_in_lhs_exist2430);
      lhs_or143=lhs_or();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_lhs_or.add(lhs_or143.getTree());
      RIGHT_PAREN144=(Token)input.LT(1);
      match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_exist2437);
      if (failed)       return retval;
      if (backtracking == 0)       stream_RIGHT_PAREN.add(RIGHT_PAREN144);
      if (backtracking == 0) {
        emit(RIGHT_PAREN144,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  pushFollow(FOLLOW_lhs_pattern_in_lhs_exist2452);
  lhs_pattern145=lhs_pattern();
  _fsp--;
  if (failed)   return retval;
  if (backtracking == 0)   stream_lhs_pattern.add(lhs_pattern145.getTree());
}
break;
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_exists_key.nextNode(),root_1);
if (stream_lhs_or.hasNext()) {
  adaptor.addChild(root_1,stream_lhs_or.next());
}
stream_lhs_or.reset();
if (stream_lhs_pattern.hasNext()) {
  adaptor.addChild(root_1,stream_lhs_pattern.next());
}
stream_lhs_pattern.reset();
if (stream_RIGHT_PAREN.hasNext()) {
  adaptor.addChild(root_1,stream_RIGHT_PAREN.next());
}
stream_RIGHT_PAREN.reset();
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
