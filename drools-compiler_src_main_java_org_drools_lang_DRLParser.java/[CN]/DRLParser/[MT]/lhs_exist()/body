{
  DRLParser.lhs_exist_return retval=new DRLParser.lhs_exist_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN140=null;
  Token RIGHT_PAREN142=null;
  DRLParser.exists_key_return exists_key138=null;
  DRLParser.lhs_or_return lhs_or139=null;
  DRLParser.lhs_or_return lhs_or141=null;
  DRLParser.lhs_pattern_return lhs_pattern143=null;
  Object LEFT_PAREN140_tree=null;
  Object RIGHT_PAREN142_tree=null;
  RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
  RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
  RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
  RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
  RewriteRuleSubtreeStream stream_exists_key=new RewriteRuleSubtreeStream(adaptor,"rule exists_key");
  try {
{
      pushFollow(FOLLOW_exists_key_in_lhs_exist2525);
      exists_key138=exists_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_exists_key.add(exists_key138.getTree());
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_EXISTS);
      }
      int alt46=3;
      int LA46_0=input.LA(1);
      if ((LA46_0 == LEFT_PAREN)) {
        int LA46_1=input.LA(2);
        if ((synpred5_DRL())) {
          alt46=1;
        }
 else         if ((true)) {
          alt46=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",46,1,input);
          throw nvae;
        }
      }
 else       if ((LA46_0 == ID)) {
        int LA46_2=input.LA(2);
        if ((((synpred5_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) || (synpred5_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) || synpred5_DRL()|| ((synpred5_DRL() && (helper.validateNotWithBinding())) && ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))|| (synpred5_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))))|| (synpred5_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))))|| (synpred5_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FOR))))))) {
          alt46=1;
        }
 else         if ((true)) {
          alt46=3;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return retval;
          }
          NoViableAltException nvae=new NoViableAltException("",46,2,input);
          throw nvae;
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return retval;
        }
        NoViableAltException nvae=new NoViableAltException("",46,0,input);
        throw nvae;
      }
switch (alt46) {
case 1:
{
          pushFollow(FOLLOW_lhs_or_in_lhs_exist2552);
          lhs_or139=lhs_or();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_lhs_or.add(lhs_or139.getTree());
        }
      break;
case 2:
{
      LEFT_PAREN140=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_exist2559);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_LEFT_PAREN.add(LEFT_PAREN140);
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN140,DroolsEditorType.SYMBOL);
      }
      pushFollow(FOLLOW_lhs_or_in_lhs_exist2567);
      lhs_or141=lhs_or();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_lhs_or.add(lhs_or141.getTree());
      RIGHT_PAREN142=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_exist2574);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_RIGHT_PAREN.add(RIGHT_PAREN142);
      if (state.backtracking == 0) {
        helper.emit(RIGHT_PAREN142,DroolsEditorType.SYMBOL);
      }
    }
  break;
case 3:
{
  pushFollow(FOLLOW_lhs_pattern_in_lhs_exist2589);
  lhs_pattern143=lhs_pattern();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_lhs_pattern.add(lhs_pattern143.getTree());
}
break;
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(stream_exists_key.nextNode(),root_1);
if (stream_lhs_or.hasNext()) {
  adaptor.addChild(root_1,stream_lhs_or.nextTree());
}
stream_lhs_or.reset();
if (stream_lhs_pattern.hasNext()) {
  adaptor.addChild(root_1,stream_lhs_pattern.nextTree());
}
stream_lhs_pattern.reset();
if (stream_RIGHT_PAREN.hasNext()) {
  adaptor.addChild(root_1,stream_RIGHT_PAREN.nextNode());
}
stream_RIGHT_PAREN.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
