{
  DRLParser.annotationTypeElementDeclaration_return retval=new DRLParser.annotationTypeElementDeclaration_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.modifier_return modifier869=null;
  DRLParser.annotationTypeElementRest_return annotationTypeElementRest870=null;
  try {
{
      root_0=(Object)adaptor.nil();
      loop262:       do {
        int alt262=2;
        alt262=dfa262.predict(input);
switch (alt262) {
case 1:
{
            pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration10127);
            modifier869=modifier();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,modifier869.getTree());
          }
        break;
default :
      break loop262;
  }
}
 while (true);
pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration10131);
annotationTypeElementRest870=annotationTypeElementRest();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,annotationTypeElementRest870.getTree());
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
