{
  DRLParser.annotationMethodRest_return retval=new DRLParser.annotationMethodRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID895=null;
  Token LEFT_PAREN896=null;
  Token RIGHT_PAREN897=null;
  DRLParser.defaultValue_return defaultValue898=null;
  Object ID895_tree=null;
  Object LEFT_PAREN896_tree=null;
  Object RIGHT_PAREN897_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      ID895=(Token)match(input,ID,FOLLOW_ID_in_annotationMethodRest10304);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID895_tree=(Object)adaptor.create(ID895);
        adaptor.addChild(root_0,ID895_tree);
      }
      LEFT_PAREN896=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotationMethodRest10306);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_PAREN896_tree=(Object)adaptor.create(LEFT_PAREN896);
        adaptor.addChild(root_0,LEFT_PAREN896_tree);
      }
      RIGHT_PAREN897=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotationMethodRest10308);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_PAREN897_tree=(Object)adaptor.create(RIGHT_PAREN897);
        adaptor.addChild(root_0,RIGHT_PAREN897_tree);
      }
      int alt269=2;
      int LA269_0=input.LA(1);
      if ((LA269_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) {
        alt269=1;
      }
switch (alt269) {
case 1:
{
          pushFollow(FOLLOW_defaultValue_in_annotationMethodRest10311);
          defaultValue898=defaultValue();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,defaultValue898.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
