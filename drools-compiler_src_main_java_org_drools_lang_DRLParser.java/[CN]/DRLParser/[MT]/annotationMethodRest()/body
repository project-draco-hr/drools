{
  DRLParser.annotationMethodRest_return retval=new DRLParser.annotationMethodRest_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID880=null;
  Token LEFT_PAREN881=null;
  Token RIGHT_PAREN882=null;
  DRLParser.defaultValue_return defaultValue883=null;
  Object ID880_tree=null;
  Object LEFT_PAREN881_tree=null;
  Object RIGHT_PAREN882_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      ID880=(Token)match(input,ID,FOLLOW_ID_in_annotationMethodRest10201);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        ID880_tree=(Object)adaptor.create(ID880);
        adaptor.addChild(root_0,ID880_tree);
      }
      LEFT_PAREN881=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotationMethodRest10203);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        LEFT_PAREN881_tree=(Object)adaptor.create(LEFT_PAREN881);
        adaptor.addChild(root_0,LEFT_PAREN881_tree);
      }
      RIGHT_PAREN882=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotationMethodRest10205);
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        RIGHT_PAREN882_tree=(Object)adaptor.create(RIGHT_PAREN882);
        adaptor.addChild(root_0,RIGHT_PAREN882_tree);
      }
      int alt267=2;
      int LA267_0=input.LA(1);
      if ((LA267_0 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) {
        alt267=1;
      }
switch (alt267) {
case 1:
{
          pushFollow(FOLLOW_defaultValue_in_annotationMethodRest10208);
          defaultValue883=defaultValue();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           adaptor.addChild(root_0,defaultValue883.getTree());
        }
      break;
  }
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
  retval.tree=(Object)adaptor.rulePostProcessing(root_0);
  adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
