{
  identifier_return field=null;
  square_chunk_return sqarg=null;
  paren_chunk_return paarg=null;
  FieldAccessDescr fa=null;
  MethodAccessDescr ma=null;
  try {
{
{
        match(input,DOT,FOLLOW_DOT_in_expression_chain3378);
        if (failed)         return;
        pushFollow(FOLLOW_identifier_in_expression_chain3382);
        field=identifier();
        _fsp--;
        if (failed)         return;
        if (backtracking == 0) {
          fa=new FieldAccessDescr(((Token)field.start).getText());
          fa.setLocation(offset(((Token)field.start).getLine()),((Token)field.start).getCharPositionInLine());
          fa.setStartCharacter(((CommonToken)((Token)field.start)).getStartIndex());
          fa.setEndCharacter(((CommonToken)((Token)field.start)).getStopIndex());
        }
        int alt58=3;
        alt58=dfa58.predict(input);
switch (alt58) {
case 1:
{
            pushFollow(FOLLOW_square_chunk_in_expression_chain3413);
            sqarg=square_chunk();
            _fsp--;
            if (failed)             return;
            if (backtracking == 0) {
              fa.setArgument(input.toString(sqarg.start,sqarg.stop));
              from.setEndCharacter(((CommonToken)((Token)sqarg.stop)).getStopIndex());
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_paren_chunk_in_expression_chain3446);
        paarg=paren_chunk();
        _fsp--;
        if (failed)         return;
        if (backtracking == 0) {
          ma=new MethodAccessDescr(((Token)field.start).getText(),input.toString(paarg.start,paarg.stop));
          ma.setLocation(offset(((Token)field.start).getLine()),((Token)field.start).getCharPositionInLine());
          ma.setStartCharacter(((CommonToken)((Token)field.start)).getStartIndex());
          from.setEndCharacter(((CommonToken)((Token)paarg.stop)).getStopIndex());
        }
      }
    break;
}
int alt59=2;
int LA59_0=input.LA(1);
if ((LA59_0 == DOT)) {
  alt59=1;
}
switch (alt59) {
case 1:
{
    pushFollow(FOLLOW_expression_chain_in_expression_chain3461);
    expression_chain(from,as);
    _fsp--;
    if (failed)     return;
  }
break;
}
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (ma != null) {
as.addFirstInvoker(ma);
}
 else {
as.addFirstInvoker(fa);
}
}
return;
}
