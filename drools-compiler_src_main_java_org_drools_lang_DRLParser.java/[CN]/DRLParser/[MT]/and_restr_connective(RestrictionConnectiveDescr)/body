{
  Token t=null;
  RestrictionConnectiveDescr and=new RestrictionConnectiveDescr(RestrictionConnectiveDescr.AND);
  try {
{
      pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4159);
      constraint_expression(and);
      _fsp--;
      if (failed)       return;
      loop67:       do {
        int alt67=2;
        int LA67_0=input.LA(1);
        if ((LA67_0 == DOUBLE_AMPER)) {
switch (input.LA(2)) {
case IN:
{
              int LA67_3=input.LA(3);
              if ((LA67_3 == LEFT_PAREN)) {
switch (input.LA(4)) {
case IN:
{
                    int LA67_9=input.LA(5);
                    if ((LA67_9 == DOT || (LA67_9 >= COMMA && LA67_9 <= RIGHT_PAREN) || LA67_9 == LEFT_SQUARE)) {
                      alt67=1;
                    }
                  }
                break;
case PACKAGE:
case IMPORT:
case FUNCTION:
case ID:
case GLOBAL:
case STRING:
case QUERY:
case END:
case TEMPLATE:
case RULE:
case WHEN:
case ATTRIBUTES:
case ENABLED:
case BOOL:
case SALIENCE:
case INT:
case DURATION:
case DIALECT:
case FROM:
case INIT:
case ACTION:
case REVERSE:
case RESULT:
case FLOAT:
case NULL:
case THEN:
case EVENT:
{
                alt67=1;
              }
            break;
case LEFT_PAREN:
{
            int LA67_10=input.LA(5);
            if ((synpred12())) {
              alt67=1;
            }
          }
        break;
    }
  }
}
break;
case NOT:
case CONTAINS:
case EXCLUDES:
case MATCHES:
case SOUNDSLIKE:
case MEMBEROF:
case TILDE:
case 80:
case 81:
case 82:
case 83:
case 84:
case 85:
{
alt67=1;
}
break;
case LEFT_PAREN:
{
switch (input.LA(3)) {
case IN:
{
int LA67_7=input.LA(4);
if ((LA67_7 == LEFT_PAREN)) {
int LA67_11=input.LA(5);
if ((synpred12())) {
  alt67=1;
}
}
}
break;
case LEFT_PAREN:
{
int LA67_8=input.LA(4);
if ((synpred12())) {
alt67=1;
}
}
break;
case NOT:
case CONTAINS:
case EXCLUDES:
case MATCHES:
case SOUNDSLIKE:
case MEMBEROF:
case TILDE:
case 80:
case 81:
case 82:
case 83:
case 84:
case 85:
{
alt67=1;
}
break;
}
}
break;
}
}
switch (alt67) {
case 1:
{
t=(Token)input.LT(1);
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_restr_connective4179);
if (failed) return;
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
}
pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4190);
constraint_expression(and);
_fsp--;
if (failed) return;
}
break;
default :
break loop67;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (and.getRestrictions().size() == 1) {
base.addOrMerge((RestrictionDescr)and.getRestrictions().get(0));
}
 else if (and.getRestrictions().size() > 1) {
base.addRestriction(and);
}
}
return;
}
