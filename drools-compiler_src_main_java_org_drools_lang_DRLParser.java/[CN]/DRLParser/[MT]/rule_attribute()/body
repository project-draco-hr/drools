{
  AttributeDescr attr=null;
  AttributeDescr a=null;
  attr=null;
  try {
    int alt27=12;
switch (input.LA(1)) {
case SALIENCE:
{
        alt27=1;
      }
    break;
case NO_LOOP:
{
    alt27=2;
  }
break;
case AGENDA_GROUP:
{
alt27=3;
}
break;
case DURATION:
{
alt27=4;
}
break;
case ACTIVATION_GROUP:
{
alt27=5;
}
break;
case AUTO_FOCUS:
{
alt27=6;
}
break;
case DATE_EFFECTIVE:
{
alt27=7;
}
break;
case DATE_EXPIRES:
{
alt27=8;
}
break;
case ENABLED:
{
alt27=9;
}
break;
case RULEFLOW_GROUP:
{
alt27=10;
}
break;
case LOCK_ON_ACTIVE:
{
alt27=11;
}
break;
case DIALECT:
{
alt27=12;
}
break;
default :
if (backtracking > 0) {
failed=true;
return attr;
}
NoViableAltException nvae=new NoViableAltException("526:1: rule_attribute returns [AttributeDescr attr] : (a= salience | a= no_loop | a= agenda_group | a= duration | a= activation_group | a= auto_focus | a= date_effective | a= date_expires | a= enabled | a= ruleflow_group | a= lock_on_active | a= dialect );",27,0,input);
throw nvae;
}
switch (alt27) {
case 1:
{
pushFollow(FOLLOW_salience_in_rule_attribute1380);
a=salience();
_fsp--;
if (failed) return attr;
}
break;
case 2:
{
pushFollow(FOLLOW_no_loop_in_rule_attribute1388);
a=no_loop();
_fsp--;
if (failed) return attr;
}
break;
case 3:
{
pushFollow(FOLLOW_agenda_group_in_rule_attribute1397);
a=agenda_group();
_fsp--;
if (failed) return attr;
}
break;
case 4:
{
pushFollow(FOLLOW_duration_in_rule_attribute1406);
a=duration();
_fsp--;
if (failed) return attr;
}
break;
case 5:
{
pushFollow(FOLLOW_activation_group_in_rule_attribute1415);
a=activation_group();
_fsp--;
if (failed) return attr;
}
break;
case 6:
{
pushFollow(FOLLOW_auto_focus_in_rule_attribute1423);
a=auto_focus();
_fsp--;
if (failed) return attr;
}
break;
case 7:
{
pushFollow(FOLLOW_date_effective_in_rule_attribute1431);
a=date_effective();
_fsp--;
if (failed) return attr;
}
break;
case 8:
{
pushFollow(FOLLOW_date_expires_in_rule_attribute1439);
a=date_expires();
_fsp--;
if (failed) return attr;
}
break;
case 9:
{
pushFollow(FOLLOW_enabled_in_rule_attribute1447);
a=enabled();
_fsp--;
if (failed) return attr;
}
break;
case 10:
{
pushFollow(FOLLOW_ruleflow_group_in_rule_attribute1455);
a=ruleflow_group();
_fsp--;
if (failed) return attr;
}
break;
case 11:
{
pushFollow(FOLLOW_lock_on_active_in_rule_attribute1463);
a=lock_on_active();
_fsp--;
if (failed) return attr;
}
break;
case 12:
{
pushFollow(FOLLOW_dialect_in_rule_attribute1470);
a=dialect();
_fsp--;
if (failed) return attr;
}
break;
}
if (backtracking == 0) {
attr=a;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return attr;
}
