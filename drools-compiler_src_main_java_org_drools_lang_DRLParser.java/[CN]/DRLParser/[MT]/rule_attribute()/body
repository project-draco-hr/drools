{
  AttributeDescr attr=null;
  AttributeDescr a=null;
  attr=null;
  try {
    int alt25=12;
switch (input.LA(1)) {
case SALIENCE:
{
        alt25=1;
      }
    break;
case NO_LOOP:
{
    alt25=2;
  }
break;
case AGENDA_GROUP:
{
alt25=3;
}
break;
case DURATION:
{
alt25=4;
}
break;
case ACTIVATION_GROUP:
{
alt25=5;
}
break;
case AUTO_FOCUS:
{
alt25=6;
}
break;
case DATE_EFFECTIVE:
{
alt25=7;
}
break;
case DATE_EXPIRES:
{
alt25=8;
}
break;
case ENABLED:
{
alt25=9;
}
break;
case RULEFLOW_GROUP:
{
alt25=10;
}
break;
case LOCK_ON_ACTIVE:
{
alt25=11;
}
break;
case DIALECT:
{
alt25=12;
}
break;
default :
if (backtracking > 0) {
failed=true;
return attr;
}
NoViableAltException nvae=new NoViableAltException("496:1: rule_attribute returns [AttributeDescr attr] : (a= salience | a= no_loop | a= agenda_group | a= duration | a= activation_group | a= auto_focus | a= date_effective | a= date_expires | a= enabled | a= ruleflow_group | a= lock_on_active | a= dialect );",25,0,input);
throw nvae;
}
switch (alt25) {
case 1:
{
pushFollow(FOLLOW_salience_in_rule_attribute1077);
a=salience();
_fsp--;
if (failed) return attr;
}
break;
case 2:
{
pushFollow(FOLLOW_no_loop_in_rule_attribute1085);
a=no_loop();
_fsp--;
if (failed) return attr;
}
break;
case 3:
{
pushFollow(FOLLOW_agenda_group_in_rule_attribute1094);
a=agenda_group();
_fsp--;
if (failed) return attr;
}
break;
case 4:
{
pushFollow(FOLLOW_duration_in_rule_attribute1103);
a=duration();
_fsp--;
if (failed) return attr;
}
break;
case 5:
{
pushFollow(FOLLOW_activation_group_in_rule_attribute1112);
a=activation_group();
_fsp--;
if (failed) return attr;
}
break;
case 6:
{
pushFollow(FOLLOW_auto_focus_in_rule_attribute1120);
a=auto_focus();
_fsp--;
if (failed) return attr;
}
break;
case 7:
{
pushFollow(FOLLOW_date_effective_in_rule_attribute1128);
a=date_effective();
_fsp--;
if (failed) return attr;
}
break;
case 8:
{
pushFollow(FOLLOW_date_expires_in_rule_attribute1136);
a=date_expires();
_fsp--;
if (failed) return attr;
}
break;
case 9:
{
pushFollow(FOLLOW_enabled_in_rule_attribute1144);
a=enabled();
_fsp--;
if (failed) return attr;
}
break;
case 10:
{
pushFollow(FOLLOW_ruleflow_group_in_rule_attribute1152);
a=ruleflow_group();
_fsp--;
if (failed) return attr;
}
break;
case 11:
{
pushFollow(FOLLOW_lock_on_active_in_rule_attribute1160);
a=lock_on_active();
_fsp--;
if (failed) return attr;
}
break;
case 12:
{
pushFollow(FOLLOW_dialect_in_rule_attribute1167);
a=dialect();
_fsp--;
if (failed) return attr;
}
break;
}
if (backtracking == 0) {
attr=a;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return attr;
}
