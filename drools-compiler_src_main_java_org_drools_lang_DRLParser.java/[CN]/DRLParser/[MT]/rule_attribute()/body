{
  DRLParser.rule_attribute_return retval=new DRLParser.rule_attribute_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DRLParser.salience_return salience83=null;
  DRLParser.no_loop_return no_loop84=null;
  DRLParser.agenda_group_return agenda_group85=null;
  DRLParser.duration_return duration86=null;
  DRLParser.activation_group_return activation_group87=null;
  DRLParser.auto_focus_return auto_focus88=null;
  DRLParser.date_effective_return date_effective89=null;
  DRLParser.date_expires_return date_expires90=null;
  DRLParser.enabled_return enabled91=null;
  DRLParser.ruleflow_group_return ruleflow_group92=null;
  DRLParser.lock_on_active_return lock_on_active93=null;
  DRLParser.dialect_return dialect94=null;
  boolean isFailed=true;
  pushParaphrases(DroolsParaphraseTypes.RULE_ATTRIBUTE);
  try {
    int alt37=12;
    alt37=dfa37.predict(input);
switch (alt37) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_salience_in_rule_attribute1637);
        salience83=salience();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,salience83.getTree());
      }
    break;
case 2:
{
    root_0=(Object)adaptor.nil();
    pushFollow(FOLLOW_no_loop_in_rule_attribute1643);
    no_loop84=no_loop();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     adaptor.addChild(root_0,no_loop84.getTree());
  }
break;
case 3:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_agenda_group_in_rule_attribute1648);
agenda_group85=agenda_group();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,agenda_group85.getTree());
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_duration_in_rule_attribute1655);
duration86=duration();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,duration86.getTree());
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_activation_group_in_rule_attribute1662);
activation_group87=activation_group();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,activation_group87.getTree());
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_auto_focus_in_rule_attribute1668);
auto_focus88=auto_focus();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,auto_focus88.getTree());
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_date_effective_in_rule_attribute1674);
date_effective89=date_effective();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,date_effective89.getTree());
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_date_expires_in_rule_attribute1680);
date_expires90=date_expires();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,date_expires90.getTree());
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_enabled_in_rule_attribute1686);
enabled91=enabled();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,enabled91.getTree());
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_ruleflow_group_in_rule_attribute1692);
ruleflow_group92=ruleflow_group();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,ruleflow_group92.getTree());
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_lock_on_active_in_rule_attribute1698);
lock_on_active93=lock_on_active();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,lock_on_active93.getTree());
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_dialect_in_rule_attribute1703);
dialect94=dialect();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) adaptor.addChild(root_0,dialect94.getTree());
}
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
paraphrases.pop();
isFailed=false;
if (!(retval.tree instanceof CommonErrorNode)) emit(Location.LOCATION_RULE_HEADER);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
if (isEditorInterfaceEnabled && isFailed) {
if (input.LA(2) == EOF && input.LA(1) == ID) {
emit(input.LT(1),DroolsEditorType.IDENTIFIER);
input.consume();
}
}
}
return retval;
}
