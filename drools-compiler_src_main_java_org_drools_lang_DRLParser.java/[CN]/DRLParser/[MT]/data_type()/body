{
  DRLParser.data_type_return retval=new DRLParser.data_type_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  List list_id=null;
  DRLParser.dimension_definition_return dimension_definition273=null;
  Object id_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
  try {
{
      id=(Token)match(input,ID,FOLLOW_ID_in_data_type4527);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_ID.add(id);
      if (list_id == null)       list_id=new ArrayList();
      list_id.add(id);
      loop97:       do {
        int alt97=2;
        int LA97_0=input.LA(1);
        if ((LA97_0 == DOT)) {
          alt97=1;
        }
switch (alt97) {
case 1:
{
            id=(Token)match(input,DOT,FOLLOW_DOT_in_data_type4533);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_DOT.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
            id=(Token)match(input,ID,FOLLOW_ID_in_data_type4537);
            if (state.failed)             return retval;
            if (state.backtracking == 0)             stream_ID.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
          }
        break;
default :
      break loop97;
  }
}
 while (true);
loop98: do {
  int alt98=2;
  int LA98_0=input.LA(1);
  if ((LA98_0 == LEFT_SQUARE)) {
    alt98=1;
  }
switch (alt98) {
case 1:
{
      pushFollow(FOLLOW_dimension_definition_in_data_type4542);
      dimension_definition273=dimension_definition();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_dimension_definition.add(dimension_definition273.getTree());
    }
  break;
default :
break loop98;
}
}
 while (true);
if (state.backtracking == 0) {
emit(list_id,DroolsEditorType.IDENTIFIER);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_DATA_TYPE,"VT_DATA_TYPE"),root_1);
if (!(stream_ID.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_ID.hasNext()) {
  adaptor.addChild(root_1,stream_ID.nextNode());
}
stream_ID.reset();
while (stream_dimension_definition.hasNext()) {
  adaptor.addChild(root_1,stream_dimension_definition.nextTree());
}
stream_dimension_definition.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
