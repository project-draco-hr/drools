{
  data_type_return retval=new data_type_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  List list_id=null;
  dimension_definition_return dimension_definition283=null;
  Object id_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
  RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
  try {
{
      id=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_data_type4545);
      if (failed)       return retval;
      if (backtracking == 0)       stream_ID.add(id);
      if (list_id == null)       list_id=new ArrayList();
      list_id.add(id);
      loop95:       do {
        int alt95=2;
        int LA95_0=input.LA(1);
        if ((LA95_0 == DOT)) {
          alt95=1;
        }
switch (alt95) {
case 1:
{
            id=(Token)input.LT(1);
            match(input,DOT,FOLLOW_DOT_in_data_type4551);
            if (failed)             return retval;
            if (backtracking == 0)             stream_DOT.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
            id=(Token)input.LT(1);
            match(input,ID,FOLLOW_ID_in_data_type4555);
            if (failed)             return retval;
            if (backtracking == 0)             stream_ID.add(id);
            if (list_id == null)             list_id=new ArrayList();
            list_id.add(id);
          }
        break;
default :
      break loop95;
  }
}
 while (true);
loop96: do {
  int alt96=2;
  int LA96_0=input.LA(1);
  if ((LA96_0 == LEFT_SQUARE)) {
    alt96=1;
  }
switch (alt96) {
case 1:
{
      pushFollow(FOLLOW_dimension_definition_in_data_type4560);
      dimension_definition283=dimension_definition();
      _fsp--;
      if (failed)       return retval;
      if (backtracking == 0)       stream_dimension_definition.add(dimension_definition283.getTree());
    }
  break;
default :
break loop96;
}
}
 while (true);
if (backtracking == 0) {
emit(list_id,DroolsEditorType.IDENTIFIER);
}
if (backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(VT_DATA_TYPE,"VT_DATA_TYPE"),root_1);
if (!(stream_ID.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_ID.hasNext()) {
  adaptor.addChild(root_1,stream_ID.next());
}
stream_ID.reset();
while (stream_dimension_definition.hasNext()) {
  adaptor.addChild(root_1,stream_dimension_definition.next());
}
stream_dimension_definition.reset();
adaptor.addChild(root_0,root_1);
}
}
}
}
retval.stop=input.LT(-1);
if (backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
