{
  DRLParser.query_return retval=new DRLParser.query_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMICOLON36=null;
  DRLParser.end_key_return end=null;
  DRLParser.query_key_return query_key32=null;
  DRLParser.query_id_return query_id33=null;
  DRLParser.parameters_return parameters34=null;
  DRLParser.normal_lhs_block_return normal_lhs_block35=null;
  Object SEMICOLON36_tree=null;
  RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
  RewriteRuleSubtreeStream stream_query_key=new RewriteRuleSubtreeStream(adaptor,"rule query_key");
  RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
  RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
  RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
  RewriteRuleSubtreeStream stream_query_id=new RewriteRuleSubtreeStream(adaptor,"rule query_id");
  helper.pushParaphrases(DroolsParaphraseTypes.QUERY);
  if (state.backtracking == 0)   helper.beginSentence(DroolsSentenceType.QUERY);
  try {
{
      pushFollow(FOLLOW_query_key_in_query1170);
      query_key32=query_key();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_query_key.add(query_key32.getTree());
      pushFollow(FOLLOW_query_id_in_query1172);
      query_id33=query_id();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_query_id.add(query_id33.getTree());
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_RULE_HEADER);
      }
      int alt11=2;
      alt11=dfa11.predict(input);
switch (alt11) {
case 1:
{
          pushFollow(FOLLOW_parameters_in_query1180);
          parameters34=parameters();
          state._fsp--;
          if (state.failed)           return retval;
          if (state.backtracking == 0)           stream_parameters.add(parameters34.getTree());
        }
      break;
  }
  if (state.backtracking == 0) {
    helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
  }
  pushFollow(FOLLOW_normal_lhs_block_in_query1189);
  normal_lhs_block35=normal_lhs_block();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_normal_lhs_block.add(normal_lhs_block35.getTree());
  pushFollow(FOLLOW_end_key_in_query1196);
  end=end_key();
  state._fsp--;
  if (state.failed)   return retval;
  if (state.backtracking == 0)   stream_end_key.add(end.getTree());
  int alt12=2;
  int LA12_0=input.LA(1);
  if ((LA12_0 == SEMICOLON)) {
    alt12=1;
  }
switch (alt12) {
case 1:
{
      SEMICOLON36=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_query1198);
      if (state.failed)       return retval;
      if (state.backtracking == 0)       stream_SEMICOLON.add(SEMICOLON36);
    }
  break;
}
if (state.backtracking == 0) {
helper.emit(SEMICOLON36,DroolsEditorType.SYMBOL);
}
if (state.backtracking == 0) {
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot(stream_query_key.nextNode(),root_1);
    adaptor.addChild(root_1,stream_query_id.nextTree());
    if (stream_parameters.hasNext()) {
      adaptor.addChild(root_1,stream_parameters.nextTree());
    }
    stream_parameters.reset();
    adaptor.addChild(root_1,stream_normal_lhs_block.nextTree());
    adaptor.addChild(root_1,stream_end_key.nextTree());
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
if (state.backtracking == 0) {
helper.popParaphrases();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
