{
  QueryDescr query=null;
  Token paramName=null;
  Token QUERY7=null;
  Token END8=null;
  name_return queryName=null;
  qualified_id_return paramType=null;
  query=null;
  AndDescr lhs=null;
  List params=null;
  List types=null;
  try {
{
      QUERY7=(Token)input.LT(1);
      match(input,QUERY,FOLLOW_QUERY_in_query939);
      if (failed)       return query;
      pushFollow(FOLLOW_name_in_query943);
      queryName=name();
      _fsp--;
      if (failed)       return query;
      if (backtracking == 0) {
        query=factory.createQuery(queryName.name);
        query.setLocation(offset(QUERY7.getLine()),QUERY7.getCharPositionInLine());
        query.setStartCharacter(((CommonToken)QUERY7).getStartIndex());
        lhs=new AndDescr();
        query.setLhs(lhs);
        lhs.setLocation(offset(QUERY7.getLine()),QUERY7.getCharPositionInLine());
        location.setType(Location.LOCATION_RULE_HEADER);
      }
      int alt21=2;
      alt21=dfa21.predict(input);
switch (alt21) {
case 1:
{
          match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_query953);
          if (failed)           return query;
          int alt20=2;
          int LA20_0=input.LA(1);
          if ((LA20_0 == ID)) {
            alt20=1;
          }
switch (alt20) {
case 1:
{
              if (backtracking == 0) {
                params=new ArrayList();
                types=new ArrayList();
              }
{
                int alt17=2;
                int LA17_0=input.LA(1);
                if ((LA17_0 == ID)) {
                  int LA17_1=input.LA(2);
                  if (((LA17_1 >= ID && LA17_1 <= DOT) || LA17_1 == LEFT_SQUARE)) {
                    alt17=1;
                  }
                }
switch (alt17) {
case 1:
{
                    pushFollow(FOLLOW_qualified_id_in_query988);
                    paramType=qualified_id();
                    _fsp--;
                    if (failed)                     return query;
                  }
                break;
            }
            paramName=(Token)input.LT(1);
            match(input,ID,FOLLOW_ID_in_query993);
            if (failed)             return query;
            if (backtracking == 0) {
              params.add(paramName.getText());
              String type=(paramType != null) ? paramType.text : "Object";
              types.add(type);
            }
          }
          loop19:           do {
            int alt19=2;
            int LA19_0=input.LA(1);
            if ((LA19_0 == COMMA)) {
              alt19=1;
            }
switch (alt19) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_query1014);
                if (failed)                 return query;
                int alt18=2;
                int LA18_0=input.LA(1);
                if ((LA18_0 == ID)) {
                  int LA18_1=input.LA(2);
                  if (((LA18_1 >= ID && LA18_1 <= DOT) || LA18_1 == LEFT_SQUARE)) {
                    alt18=1;
                  }
                }
switch (alt18) {
case 1:
{
                    pushFollow(FOLLOW_qualified_id_in_query1018);
                    paramType=qualified_id();
                    _fsp--;
                    if (failed)                     return query;
                  }
                break;
            }
            paramName=(Token)input.LT(1);
            match(input,ID,FOLLOW_ID_in_query1023);
            if (failed)             return query;
            if (backtracking == 0) {
              params.add(paramName.getText());
              String type=(paramType != null) ? paramType.text : "Object";
              types.add(type);
            }
          }
        break;
default :
      break loop19;
  }
}
 while (true);
if (backtracking == 0) {
  query.setParameters((String[])params.toArray(new String[params.size()]));
  query.setParameterTypes((String[])types.toArray(new String[types.size()]));
}
}
break;
}
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_query1073);
if (failed) return query;
}
break;
}
if (backtracking == 0) {
location.setType(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
}
pushFollow(FOLLOW_normal_lhs_block_in_query1102);
normal_lhs_block(lhs);
_fsp--;
if (failed) return query;
END8=(Token)input.LT(1);
match(input,END,FOLLOW_END_in_query1107);
if (failed) return query;
pushFollow(FOLLOW_opt_semicolon_in_query1109);
opt_semicolon();
_fsp--;
if (failed) return query;
if (backtracking == 0) {
query.setEndCharacter(((CommonToken)END8).getStopIndex());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return query;
}
