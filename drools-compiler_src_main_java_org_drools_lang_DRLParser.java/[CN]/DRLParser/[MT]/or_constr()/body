{
  DRLParser.or_constr_return retval=new DRLParser.or_constr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOUBLE_PIPE217=null;
  DRLParser.and_constr_return and_constr216=null;
  DRLParser.and_constr_return and_constr218=null;
  Object DOUBLE_PIPE217_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_and_constr_in_or_constr3773);
      and_constr216=and_constr();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,and_constr216.getTree());
      loop81:       do {
        int alt81=2;
        int LA81_0=input.LA(1);
        if ((LA81_0 == DOUBLE_PIPE)) {
          alt81=1;
        }
switch (alt81) {
case 1:
{
            DOUBLE_PIPE217=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_constr3777);
            if (state.failed)             return retval;
            if (state.backtracking == 0) {
              DOUBLE_PIPE217_tree=(Object)adaptor.create(DOUBLE_PIPE217);
              root_0=(Object)adaptor.becomeRoot(DOUBLE_PIPE217_tree,root_0);
            }
            if (state.backtracking == 0) {
              emit(DOUBLE_PIPE217,DroolsEditorType.SYMBOL);
            }
            pushFollow(FOLLOW_and_constr_in_or_constr3784);
            and_constr218=and_constr();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,and_constr218.getTree());
          }
        break;
default :
      break loop81;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
