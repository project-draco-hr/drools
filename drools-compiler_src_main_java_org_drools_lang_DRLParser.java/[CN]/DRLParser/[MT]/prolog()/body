{
  String pkgstmt=null;
  AttributeDescr a=null;
  String packageName="";
  try {
{
      int alt3=2;
      int LA3_0=input.LA(1);
      if ((LA3_0 == PACKAGE)) {
        alt3=1;
      }
switch (alt3) {
case 1:
{
          pushFollow(FOLLOW_package_statement_in_prolog96);
          pkgstmt=package_statement();
          _fsp--;
          if (failed)           return;
          if (backtracking == 0) {
            packageName=pkgstmt;
          }
        }
      break;
  }
  if (backtracking == 0) {
    this.packageDescr=factory.createPackage(packageName);
  }
  int alt4=2;
  int LA4_0=input.LA(1);
  if ((LA4_0 == ATTRIBUTES)) {
    alt4=1;
  }
switch (alt4) {
case 1:
{
      match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_prolog110);
      if (failed)       return;
      match(input,72,FOLLOW_72_in_prolog112);
      if (failed)       return;
    }
  break;
}
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == DATE_EFFECTIVE || (LA7_0 >= DATE_EXPIRES && LA7_0 <= ENABLED) || LA7_0 == SALIENCE || (LA7_0 >= NO_LOOP && LA7_0 <= LOCK_ON_ACTIVE))) {
alt7=1;
}
switch (alt7) {
case 1:
{
  pushFollow(FOLLOW_rule_attribute_in_prolog122);
  a=rule_attribute();
  _fsp--;
  if (failed)   return;
  if (backtracking == 0) {
    this.packageDescr.addAttribute(a);
  }
  loop6:   do {
    int alt6=2;
    int LA6_0=input.LA(1);
    if ((LA6_0 == COMMA || LA6_0 == DATE_EFFECTIVE || (LA6_0 >= DATE_EXPIRES && LA6_0 <= ENABLED) || LA6_0 == SALIENCE || (LA6_0 >= NO_LOOP && LA6_0 <= LOCK_ON_ACTIVE))) {
      alt6=1;
    }
switch (alt6) {
case 1:
{
        int alt5=2;
        int LA5_0=input.LA(1);
        if ((LA5_0 == COMMA)) {
          alt5=1;
        }
switch (alt5) {
case 1:
{
            match(input,COMMA,FOLLOW_COMMA_in_prolog145);
            if (failed)             return;
          }
        break;
    }
    pushFollow(FOLLOW_rule_attribute_in_prolog150);
    a=rule_attribute();
    _fsp--;
    if (failed)     return;
    if (backtracking == 0) {
      this.packageDescr.addAttribute(a);
    }
  }
break;
default :
break loop6;
}
}
 while (true);
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
