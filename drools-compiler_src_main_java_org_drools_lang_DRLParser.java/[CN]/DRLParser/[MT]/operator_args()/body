{
  DRLParser.operator_args_return retval=new DRLParser.operator_args_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE252=null;
  Token COMMA254=null;
  Token RIGHT_SQUARE256=null;
  DRLParser.operator_arg_return operator_arg253=null;
  DRLParser.operator_arg_return operator_arg255=null;
  Object LEFT_SQUARE252_tree=null;
  Object COMMA254_tree=null;
  Object RIGHT_SQUARE256_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE252=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_operator_args4361);
      if (state.failed)       return retval;
      pushFollow(FOLLOW_operator_arg_in_operator_args4364);
      operator_arg253=operator_arg();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0)       adaptor.addChild(root_0,operator_arg253.getTree());
      loop82:       do {
        int alt82=2;
        int LA82_0=input.LA(1);
        if ((LA82_0 == COMMA)) {
          alt82=1;
        }
switch (alt82) {
case 1:
{
            COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_operator_args4367);
            if (state.failed)             return retval;
            pushFollow(FOLLOW_operator_arg_in_operator_args4370);
            operator_arg255=operator_arg();
            state._fsp--;
            if (state.failed)             return retval;
            if (state.backtracking == 0)             adaptor.addChild(root_0,operator_arg255.getTree());
          }
        break;
default :
      break loop82;
  }
}
 while (true);
RIGHT_SQUARE256=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_operator_args4374);
if (state.failed) return retval;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
