{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA164_0=input.LA(1);
  int index164_0=input.index();
input.rewind();
s=-1;
if ((LA164_0 == EOF || (LA164_0 >= SEMICOLON && LA164_0 <= ID) || (LA164_0 >= STRING && LA164_0 <= EQUALS_ASSIGN) || (LA164_0 >= COMMA && LA164_0 <= RIGHT_PAREN) || LA164_0 == DECIMAL || (LA164_0 >= DOUBLE_PIPE && LA164_0 <= DOUBLE_AMPER) || (LA164_0 >= EQUALS && LA164_0 <= NOT_EQUALS) || (LA164_0 >= RIGHT_SQUARE && LA164_0 <= THEN) || (LA164_0 >= RIGHT_CURLY && LA164_0 <= MOD_ASSIGN))) {
s=1;
}
 else if ((LA164_0 == LEFT_SQUARE)) {
s=45;
}
 else if ((LA164_0 == DOT) && (synpred41_DRL())) {
s=46;
}
input.seek(index164_0);
if (s >= 0) return s;
break;
case 1:
int LA164_45=input.LA(1);
int index164_45=input.index();
input.rewind();
s=-1;
if ((synpred41_DRL())) {
s=46;
}
 else if ((true)) {
s=1;
}
input.seek(index164_45);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),164,_s,input);
error(nvae);
throw nvae;
}
