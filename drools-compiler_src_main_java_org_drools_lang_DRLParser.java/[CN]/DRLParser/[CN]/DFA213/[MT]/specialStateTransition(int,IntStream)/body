{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA213_2=input.LA(1);
  int index213_2=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))))) {
s=3;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))))) {
s=4;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))))) {
s=5;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))))) {
s=6;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))))) {
s=7;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
s=8;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE))))) {
s=9;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))))) {
s=10;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))))) {
s=11;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))))) {
s=12;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP))))) {
s=13;
}
input.seek(index213_2);
if (s >= 0) return s;
break;
case 1:
int LA213_0=input.LA(1);
int index213_0=input.index();
input.rewind();
s=-1;
if ((LA213_0 == AT)) {
s=1;
}
 else if ((LA213_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {
s=2;
}
input.seek(index213_0);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),213,_s,input);
error(nvae);
throw nvae;
}
