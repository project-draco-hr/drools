{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA140_2=input.LA(1);
  int index140_2=input.index();
input.rewind();
s=-1;
if (((LA140_2 >= ID && LA140_2 <= DOT) || LA140_2 == LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
s=4;
}
 else if ((LA140_2 == LEFT_SQUARE)) {
s=5;
}
 else if ((LA140_2 == SEMICOLON || LA140_2 == EQUALS_ASSIGN || LA140_2 == COMMA)) {
s=3;
}
input.seek(index140_2);
if (s >= 0) return s;
break;
case 1:
int LA140_6=input.LA(1);
int index140_6=input.index();
input.rewind();
s=-1;
if ((LA140_6 == SEMICOLON || LA140_6 == EQUALS_ASSIGN || LA140_6 == COMMA)) {
s=3;
}
 else if ((LA140_6 == LEFT_SQUARE)) {
s=5;
}
 else if ((LA140_6 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
s=4;
}
input.seek(index140_6);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),140,_s,input);
error(nvae);
throw nvae;
}
