{
  int _s=s;
switch (s) {
case 0:
    int LA63_6=input.LA(1);
  int index63_6=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) {
s=9;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.RESULT)))) {
s=10;
}
input.seek(index63_6);
if (s >= 0) return s;
break;
case 1:
int LA63_1=input.LA(1);
int index63_1=input.index();
input.rewind();
s=-1;
if ((LA63_1 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=2;
}
input.seek(index63_1);
if (s >= 0) return s;
break;
case 2:
int LA63_2=input.LA(1);
int index63_2=input.index();
input.rewind();
s=-1;
if (((LA63_2 >= VT_COMPILATION_UNIT && LA63_2 <= STRING) || LA63_2 == COMMA || (LA63_2 >= AT && LA63_2 <= MULTI_LINE_COMMENT)) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=3;
}
 else if ((LA63_2 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=4;
}
 else if ((LA63_2 == RIGHT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=5;
}
input.seek(index63_2);
if (s >= 0) return s;
break;
case 3:
int LA63_5=input.LA(1);
int index63_5=input.index();
input.rewind();
s=-1;
if ((LA63_5 == ID || LA63_5 == COMMA) && ((validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) {
s=9;
}
 else if ((LA63_5 == RIGHT_PAREN) && ((validateIdentifierKey(DroolsSoftKeywords.RESULT)))) {
s=10;
}
input.seek(index63_5);
if (s >= 0) return s;
break;
case 4:
int LA63_0=input.LA(1);
int index63_0=input.index();
input.rewind();
s=-1;
if ((LA63_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=1;
}
input.seek(index63_0);
if (s >= 0) return s;
break;
case 5:
int LA63_4=input.LA(1);
int index63_4=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) {
s=7;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.RESULT)))) {
s=8;
}
input.seek(index63_4);
if (s >= 0) return s;
break;
case 6:
int LA63_3=input.LA(1);
int index63_3=input.index();
input.rewind();
s=-1;
if ((LA63_3 == RIGHT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=5;
}
 else if (((LA63_3 >= VT_COMPILATION_UNIT && LA63_3 <= STRING) || LA63_3 == COMMA || (LA63_3 >= AT && LA63_3 <= MULTI_LINE_COMMENT)) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=3;
}
 else if ((LA63_3 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=6;
}
input.seek(index63_3);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),63,_s,input);
error(nvae);
throw nvae;
}
