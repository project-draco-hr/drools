{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA77_0=input.LA(1);
  int index77_0=input.index();
input.rewind();
s=-1;
if ((LA77_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=1;
}
 else if (((LA77_0 >= EQUALS && LA77_0 <= NOT_EQUALS))) {
s=2;
}
 else if ((LA77_0 == LEFT_PAREN)) {
s=8;
}
input.seek(index77_0);
if (s >= 0) return s;
break;
case 1:
int LA77_1=input.LA(1);
int index77_1=input.index();
input.rewind();
s=-1;
if ((LA77_1 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=9;
}
 else if ((LA77_1 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
s=10;
}
 else if ((LA77_1 == STRING || LA77_1 == BOOL || LA77_1 == DECIMAL || LA77_1 == LEFT_SQUARE || (LA77_1 >= NULL && LA77_1 <= FLOAT)) && (((helper.isPluggableEvaluator(false))))) {
s=11;
}
input.seek(index77_1);
if (s >= 0) return s;
break;
case 2:
int LA77_9=input.LA(1);
int index77_9=input.index();
input.rewind();
s=-1;
if ((LA77_9 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=20;
}
 else if ((LA77_9 == STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=21;
}
 else if ((LA77_9 == PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=22;
}
 else if ((LA77_9 == MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=23;
}
 else if ((LA77_9 == DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=24;
}
 else if ((LA77_9 == HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=25;
}
 else if ((LA77_9 == FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=26;
}
 else if ((LA77_9 == BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=27;
}
 else if ((LA77_9 == NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=28;
}
 else if ((LA77_9 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=29;
}
 else if (((LA77_9 >= VT_COMPILATION_UNIT && LA77_9 <= SEMICOLON) || (LA77_9 >= DOT && LA77_9 <= DOT_STAR) || (LA77_9 >= AT && LA77_9 <= COMMA)|| (LA77_9 >= RIGHT_PAREN && LA77_9 <= TimePeriod)|| (LA77_9 >= ACCUMULATE && LA77_9 <= RIGHT_SQUARE)|| (LA77_9 >= THEN && LA77_9 <= MISC)) && (((helper.isPluggableEvaluator(false))))) {
s=11;
}
input.seek(index77_9);
if (s >= 0) return s;
break;
case 3:
int LA77_10=input.LA(1);
int index77_10=input.index();
input.rewind();
s=-1;
if ((LA77_10 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=32;
}
 else if ((LA77_10 == LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
s=33;
}
 else if ((LA77_10 == ID || LA77_10 == STRING || LA77_10 == BOOL || LA77_10 == DECIMAL || (LA77_10 >= NULL && LA77_10 <= FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=34;
}
 else if ((LA77_10 == DOT || LA77_10 == COMMA || LA77_10 == RIGHT_PAREN || (LA77_10 >= DOUBLE_PIPE && LA77_10 <= DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_10);
if (s >= 0) return s;
break;
case 4:
int LA77_20=input.LA(1);
int index77_20=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_20);
if (s >= 0) return s;
break;
case 5:
int LA77_21=input.LA(1);
int index77_21=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_21);
if (s >= 0) return s;
break;
case 6:
int LA77_22=input.LA(1);
int index77_22=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_22);
if (s >= 0) return s;
break;
case 7:
int LA77_23=input.LA(1);
int index77_23=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_23);
if (s >= 0) return s;
break;
case 8:
int LA77_24=input.LA(1);
int index77_24=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_24);
if (s >= 0) return s;
break;
case 9:
int LA77_25=input.LA(1);
int index77_25=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_25);
if (s >= 0) return s;
break;
case 10:
int LA77_26=input.LA(1);
int index77_26=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_26);
if (s >= 0) return s;
break;
case 11:
int LA77_27=input.LA(1);
int index77_27=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_27);
if (s >= 0) return s;
break;
case 12:
int LA77_28=input.LA(1);
int index77_28=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_28);
if (s >= 0) return s;
break;
case 13:
int LA77_29=input.LA(1);
int index77_29=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index77_29);
if (s >= 0) return s;
break;
case 14:
int LA77_32=input.LA(1);
int index77_32=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=48;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=43;
}
input.seek(index77_32);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),77,_s,input);
error(nvae);
throw nvae;
}
