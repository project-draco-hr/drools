{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA77_0=input.LA(1);
  int index77_0=input.index();
input.rewind();
s=-1;
if ((LA77_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=1;
}
 else if (((LA77_0 >= EQUALS && LA77_0 <= NOT_EQUALS))) {
s=2;
}
 else if ((LA77_0 == LEFT_PAREN)) {
s=8;
}
input.seek(index77_0);
if (s >= 0) return s;
break;
case 1:
int LA77_1=input.LA(1);
int index77_1=input.index();
input.rewind();
s=-1;
if ((LA77_1 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
s=9;
}
 else if ((LA77_1 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=10;
}
 else if ((LA77_1 == STRING || LA77_1 == BOOL || LA77_1 == DECIMAL || LA77_1 == LEFT_SQUARE || (LA77_1 >= NULL && LA77_1 <= FLOAT)) && (((helper.isPluggableEvaluator(false))))) {
s=11;
}
input.seek(index77_1);
if (s >= 0) return s;
break;
case 2:
int LA77_9=input.LA(1);
int index77_9=input.index();
input.rewind();
s=-1;
if ((LA77_9 == LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
s=20;
}
 else if ((LA77_9 == DOT || LA77_9 == COMMA || LA77_9 == RIGHT_PAREN || (LA77_9 >= DOUBLE_PIPE && LA77_9 <= DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {
s=21;
}
 else if ((LA77_9 == ID || LA77_9 == STRING || LA77_9 == BOOL || LA77_9 == DECIMAL || (LA77_9 >= NULL && LA77_9 <= FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=26;
}
 else if ((LA77_9 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=35;
}
input.seek(index77_9);
if (s >= 0) return s;
break;
case 3:
int LA77_10=input.LA(1);
int index77_10=input.index();
input.rewind();
s=-1;
if ((LA77_10 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=36;
}
 else if ((LA77_10 == STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=37;
}
 else if ((LA77_10 == PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=38;
}
 else if ((LA77_10 == MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=39;
}
 else if ((LA77_10 == DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=40;
}
 else if ((LA77_10 == HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=41;
}
 else if ((LA77_10 == FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=42;
}
 else if ((LA77_10 == BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=43;
}
 else if ((LA77_10 == NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=44;
}
 else if ((LA77_10 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=45;
}
 else if (((LA77_10 >= VT_COMPILATION_UNIT && LA77_10 <= SEMICOLON) || (LA77_10 >= DOT && LA77_10 <= DOT_STAR) || (LA77_10 >= COLON && LA77_10 <= COMMA)|| (LA77_10 >= RIGHT_PAREN && LA77_10 <= TimePeriod)|| (LA77_10 >= ACCUMULATE && LA77_10 <= RIGHT_SQUARE)|| (LA77_10 >= THEN && LA77_10 <= MISC)) && (((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_10);
if (s >= 0) return s;
break;
case 4:
int LA77_35=input.LA(1);
int index77_35=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=48;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=46;
}
input.seek(index77_35);
if (s >= 0) return s;
break;
case 5:
int LA77_36=input.LA(1);
int index77_36=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_36);
if (s >= 0) return s;
break;
case 6:
int LA77_37=input.LA(1);
int index77_37=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_37);
if (s >= 0) return s;
break;
case 7:
int LA77_38=input.LA(1);
int index77_38=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_38);
if (s >= 0) return s;
break;
case 8:
int LA77_39=input.LA(1);
int index77_39=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_39);
if (s >= 0) return s;
break;
case 9:
int LA77_40=input.LA(1);
int index77_40=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_40);
if (s >= 0) return s;
break;
case 10:
int LA77_41=input.LA(1);
int index77_41=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_41);
if (s >= 0) return s;
break;
case 11:
int LA77_42=input.LA(1);
int index77_42=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_42);
if (s >= 0) return s;
break;
case 12:
int LA77_43=input.LA(1);
int index77_43=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_43);
if (s >= 0) return s;
break;
case 13:
int LA77_44=input.LA(1);
int index77_44=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_44);
if (s >= 0) return s;
break;
case 14:
int LA77_45=input.LA(1);
int index77_45=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=46;
}
input.seek(index77_45);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),77,_s,input);
error(nvae);
throw nvae;
}
