{
  int _s=s;
switch (s) {
case 0:
    int LA34_15=input.LA(1);
  int index34_15=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index34_15);
if (s >= 0) return s;
break;
case 1:
int LA34_7=input.LA(1);
int index34_7=input.index();
input.rewind();
s=-1;
if ((LA34_7 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=10;
}
 else if ((LA34_7 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=11;
}
 else if (((LA34_7 >= VT_COMPILATION_UNIT && LA34_7 <= SEMICOLON) || (LA34_7 >= DOT && LA34_7 <= STRING) || (LA34_7 >= COMMA && LA34_7 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
input.seek(index34_7);
if (s >= 0) return s;
break;
case 2:
int LA34_1=input.LA(1);
int index34_1=input.index();
input.rewind();
s=-1;
if ((LA34_1 == MISC) && (((validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))))) {
s=4;
}
 else if ((LA34_1 == BOOL) && ((validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) {
s=5;
}
 else if ((LA34_1 == INT) && (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)) || (validateIdentifierKey(DroolsSoftKeywords.DURATION))))) {
s=6;
}
 else if ((LA34_1 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=7;
}
 else if ((LA34_1 == STRING) && ((validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) {
s=8;
}
 else if ((LA34_1 == ID || LA34_1 == COLON || LA34_1 == THEN) && ((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index34_1);
if (s >= 0) return s;
break;
case 3:
int LA34_18=input.LA(1);
int index34_18=input.index();
input.rewind();
s=-1;
if (((LA34_18 >= VT_COMPILATION_UNIT && LA34_18 <= ID) || (LA34_18 >= DOT_STAR && LA34_18 <= STRING) || (LA34_18 >= COMMA && LA34_18 <= NULL)|| (LA34_18 >= RIGHT_SQUARE && LA34_18 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA34_18 == DOT) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=22;
}
 else if ((LA34_18 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=23;
}
 else if ((LA34_18 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=24;
}
input.seek(index34_18);
if (s >= 0) return s;
break;
case 4:
int LA34_21=input.LA(1);
int index34_21=input.index();
input.rewind();
s=-1;
if (((LA34_21 >= VT_COMPILATION_UNIT && LA34_21 <= STRING) || (LA34_21 >= COMMA && LA34_21 <= NULL) || (LA34_21 >= RIGHT_SQUARE && LA34_21 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA34_21 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=17;
}
 else if ((LA34_21 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=25;
}
input.seek(index34_21);
if (s >= 0) return s;
break;
case 5:
int LA34_0=input.LA(1);
int index34_0=input.index();
input.rewind();
s=-1;
if ((LA34_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.DIALECT)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))))) {
s=1;
}
 else if ((LA34_0 == THEN)) {
s=2;
}
 else if ((LA34_0 == COMMA)) {
s=3;
}
input.seek(index34_0);
if (s >= 0) return s;
break;
case 6:
int LA34_14=input.LA(1);
int index34_14=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index34_14);
if (s >= 0) return s;
break;
case 7:
int LA34_20=input.LA(1);
int index34_20=input.index();
input.rewind();
s=-1;
if (((LA34_20 >= VT_COMPILATION_UNIT && LA34_20 <= ID) || (LA34_20 >= DOT_STAR && LA34_20 <= STRING) || (LA34_20 >= COMMA && LA34_20 <= NULL)|| (LA34_20 >= RIGHT_SQUARE && LA34_20 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA34_20 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=17;
}
 else if ((LA34_20 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=25;
}
 else if ((LA34_20 == DOT) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=16;
}
input.seek(index34_20);
if (s >= 0) return s;
break;
case 8:
int LA34_11=input.LA(1);
int index34_11=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index34_11);
if (s >= 0) return s;
break;
case 9:
int LA34_13=input.LA(1);
int index34_13=input.index();
input.rewind();
s=-1;
if (((LA34_13 >= VT_COMPILATION_UNIT && LA34_13 <= SEMICOLON) || (LA34_13 >= DOT && LA34_13 <= STRING) || (LA34_13 >= COMMA && LA34_13 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA34_13 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=18;
}
 else if ((LA34_13 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=19;
}
input.seek(index34_13);
if (s >= 0) return s;
break;
case 10:
int LA34_16=input.LA(1);
int index34_16=input.index();
input.rewind();
s=-1;
if ((LA34_16 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=20;
}
 else if (((LA34_16 >= VT_COMPILATION_UNIT && LA34_16 <= SEMICOLON) || (LA34_16 >= DOT && LA34_16 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
input.seek(index34_16);
if (s >= 0) return s;
break;
case 11:
int LA34_10=input.LA(1);
int index34_10=input.index();
input.rewind();
s=-1;
if ((LA34_10 == COLON) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=13;
}
 else if ((LA34_10 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=14;
}
 else if ((LA34_10 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=15;
}
 else if (((LA34_10 >= VT_COMPILATION_UNIT && LA34_10 <= SEMICOLON) || (LA34_10 >= DOT_STAR && LA34_10 <= STRING) || (LA34_10 >= COMMA && LA34_10 <= AT)|| (LA34_10 >= EQUALS && LA34_10 <= NULL)|| (LA34_10 >= RIGHT_SQUARE && LA34_10 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA34_10 == DOT) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=16;
}
 else if ((LA34_10 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=17;
}
input.seek(index34_10);
if (s >= 0) return s;
break;
case 12:
int LA34_17=input.LA(1);
int index34_17=input.index();
input.rewind();
s=-1;
if ((LA34_17 == RIGHT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=21;
}
 else if (((LA34_17 >= VT_COMPILATION_UNIT && LA34_17 <= LEFT_SQUARE) || (LA34_17 >= THEN && LA34_17 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
input.seek(index34_17);
if (s >= 0) return s;
break;
case 13:
int LA34_19=input.LA(1);
int index34_19=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index34_19);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),34,_s,input);
error(nvae);
throw nvae;
}
