{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA89_0=input.LA(1);
  int index89_0=input.index();
input.rewind();
s=-1;
if ((LA89_0 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
s=1;
}
 else if (((LA89_0 >= EQUAL && LA89_0 <= NOT_EQUAL))) {
s=2;
}
 else if ((LA89_0 == LEFT_PAREN)) {
s=8;
}
input.seek(index89_0);
if (s >= 0) return s;
break;
case 1:
int LA89_1=input.LA(1);
int index89_1=input.index();
input.rewind();
s=-1;
if ((LA89_1 == STRING || (LA89_1 >= BOOL && LA89_1 <= INT) || (LA89_1 >= FLOAT && LA89_1 <= LEFT_SQUARE)) && (((isPluggableEvaluator(false))))) {
s=9;
}
 else if ((LA89_1 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
s=10;
}
 else if ((LA89_1 == LEFT_PAREN) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
s=16;
}
input.seek(index89_1);
if (s >= 0) return s;
break;
case 2:
int LA89_10=input.LA(1);
int index89_10=input.index();
input.rewind();
s=-1;
if ((LA89_10 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=17;
}
 else if ((LA89_10 == LEFT_SQUARE) && ((((validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((isPluggableEvaluator(false)))))) {
s=18;
}
 else if ((LA89_10 == ID || LA89_10 == STRING || (LA89_10 >= BOOL && LA89_10 <= INT) || (LA89_10 >= FLOAT && LA89_10 <= NULL)) && (((validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=19;
}
 else if ((LA89_10 == DOT || (LA89_10 >= COMMA && LA89_10 <= RIGHT_PAREN) || (LA89_10 >= DOUBLE_PIPE && LA89_10 <= DOUBLE_AMPER)) && (((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_10);
if (s >= 0) return s;
break;
case 3:
int LA89_16=input.LA(1);
int index89_16=input.index();
input.rewind();
s=-1;
if ((LA89_16 == ID) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
s=30;
}
 else if ((LA89_16 == STRING) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
s=31;
}
 else if ((LA89_16 == INT) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
s=32;
}
 else if ((LA89_16 == FLOAT) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
s=33;
}
 else if ((LA89_16 == BOOL) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
s=34;
}
 else if ((LA89_16 == NULL) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
s=35;
}
 else if ((LA89_16 == LEFT_PAREN) && ((((validateIdentifierKey(DroolsSoftKeywords.IN))) || ((isPluggableEvaluator(false)))))) {
s=36;
}
 else if (((LA89_16 >= VT_COMPILATION_UNIT && LA89_16 <= SEMICOLON) || (LA89_16 >= DOT && LA89_16 <= DOT_STAR) || (LA89_16 >= COMMA && LA89_16 <= WHEN)|| (LA89_16 >= DOUBLE_PIPE && LA89_16 <= NOT_EQUAL)|| (LA89_16 >= LEFT_SQUARE && LA89_16 <= IdentifierPart)) && (((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_16);
if (s >= 0) return s;
break;
case 4:
int LA89_17=input.LA(1);
int index89_17=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=39;
}
 else if ((((validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=25;
}
input.seek(index89_17);
if (s >= 0) return s;
break;
case 5:
int LA89_30=input.LA(1);
int index89_30=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=39;
}
 else if ((((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_30);
if (s >= 0) return s;
break;
case 6:
int LA89_31=input.LA(1);
int index89_31=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=39;
}
 else if ((((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_31);
if (s >= 0) return s;
break;
case 7:
int LA89_32=input.LA(1);
int index89_32=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=39;
}
 else if ((((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_32);
if (s >= 0) return s;
break;
case 8:
int LA89_33=input.LA(1);
int index89_33=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=39;
}
 else if ((((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_33);
if (s >= 0) return s;
break;
case 9:
int LA89_34=input.LA(1);
int index89_34=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=39;
}
 else if ((((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_34);
if (s >= 0) return s;
break;
case 10:
int LA89_35=input.LA(1);
int index89_35=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=39;
}
 else if ((((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_35);
if (s >= 0) return s;
break;
case 11:
int LA89_36=input.LA(1);
int index89_36=input.index();
input.rewind();
s=-1;
if ((((validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=39;
}
 else if ((((isPluggableEvaluator(false))))) {
s=25;
}
input.seek(index89_36);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),89,_s,input);
error(nvae);
throw nvae;
}
