{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA139_1=input.LA(1);
  int index139_1=input.index();
input.rewind();
s=-1;
if ((((synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) || (synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) || (synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))|| (synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))|| (synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))|| synpred33_DRL()|| (synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))|| (synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred33_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))))) {
s=18;
}
 else if ((true)) {
s=2;
}
input.seek(index139_1);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),139,_s,input);
error(nvae);
throw nvae;
}
