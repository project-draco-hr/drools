{
  int _s=s;
switch (s) {
case 0:
    int LA82_7=input.LA(1);
  int index82_7=input.index();
input.rewind();
s=-1;
if ((LA82_7 == ID)) {
s=9;
}
 else if ((LA82_7 == STRING || (LA82_7 >= BOOL && LA82_7 <= INT) || (LA82_7 >= FLOAT && LA82_7 <= NULL))) {
s=10;
}
 else if ((LA82_7 == LEFT_PAREN)) {
s=11;
}
 else if ((LA82_7 == GRAVE_ACCENT)) {
s=1;
}
 else if ((LA82_7 == DOT || (LA82_7 >= COMMA && LA82_7 <= RIGHT_PAREN) || (LA82_7 >= DOUBLE_PIPE && LA82_7 <= DOUBLE_AMPER) || LA82_7 == LEFT_SQUARE) && ((validateRestr()))) {
s=4;
}
input.seek(index82_7);
if (s >= 0) return s;
break;
case 1:
int LA82_9=input.LA(1);
int index82_9=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index82_9);
if (s >= 0) return s;
break;
case 2:
int LA82_10=input.LA(1);
int index82_10=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index82_10);
if (s >= 0) return s;
break;
case 3:
int LA82_5=input.LA(1);
int index82_5=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index82_5);
if (s >= 0) return s;
break;
case 4:
int LA82_6=input.LA(1);
int index82_6=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index82_6);
if (s >= 0) return s;
break;
case 5:
int LA82_2=input.LA(1);
int index82_2=input.index();
input.rewind();
s=-1;
if ((LA82_2 == ID)) {
s=3;
}
 else if (((LA82_2 >= EQUAL && LA82_2 <= GRAVE_ACCENT)) && ((validateRestr()))) {
s=4;
}
 else if ((LA82_2 == LEFT_PAREN)) {
s=5;
}
input.seek(index82_2);
if (s >= 0) return s;
break;
case 6:
int LA82_3=input.LA(1);
int index82_3=input.index();
input.rewind();
s=-1;
if ((LA82_3 == DOT || LA82_3 == COLON || (LA82_3 >= EQUAL && LA82_3 <= NOT_EQUAL) || LA82_3 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA82_3 == LEFT_PAREN)) {
s=6;
}
 else if ((LA82_3 == ID)) {
s=7;
}
 else if ((LA82_3 == STRING || (LA82_3 >= BOOL && LA82_3 <= INT) || (LA82_3 >= FLOAT && LA82_3 <= NULL)) && ((validateRestr()))) {
s=4;
}
 else if ((LA82_3 == GRAVE_ACCENT)) {
s=8;
}
input.seek(index82_3);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),82,_s,input);
error(nvae);
throw nvae;
}
