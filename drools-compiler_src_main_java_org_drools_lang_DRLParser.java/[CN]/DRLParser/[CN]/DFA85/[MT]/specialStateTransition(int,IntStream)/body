{
  int _s=s;
switch (s) {
case 0:
    int LA85_14=input.LA(1);
  int index85_14=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_14);
if (s >= 0) return s;
break;
case 1:
int LA85_15=input.LA(1);
int index85_15=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_15);
if (s >= 0) return s;
break;
case 2:
int LA85_16=input.LA(1);
int index85_16=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_16);
if (s >= 0) return s;
break;
case 3:
int LA85_12=input.LA(1);
int index85_12=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_12);
if (s >= 0) return s;
break;
case 4:
int LA85_13=input.LA(1);
int index85_13=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_13);
if (s >= 0) return s;
break;
case 5:
int LA85_10=input.LA(1);
int index85_10=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_10);
if (s >= 0) return s;
break;
case 6:
int LA85_2=input.LA(1);
int index85_2=input.index();
input.rewind();
s=-1;
if ((LA85_2 == ID)) {
s=3;
}
 else if ((LA85_2 == LEFT_PAREN)) {
s=4;
}
 else if (((LA85_2 >= EQUAL && LA85_2 <= GRAVE_ACCENT)) && ((validateRestr()))) {
s=5;
}
input.seek(index85_2);
if (s >= 0) return s;
break;
case 7:
int LA85_20=input.LA(1);
int index85_20=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_20);
if (s >= 0) return s;
break;
case 8:
int LA85_11=input.LA(1);
int index85_11=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_11);
if (s >= 0) return s;
break;
case 9:
int LA85_6=input.LA(1);
int index85_6=input.index();
input.rewind();
s=-1;
if ((LA85_6 == ID)) {
s=11;
}
 else if ((LA85_6 == STRING)) {
s=12;
}
 else if ((LA85_6 == INT)) {
s=13;
}
 else if ((LA85_6 == FLOAT)) {
s=14;
}
 else if ((LA85_6 == BOOL)) {
s=15;
}
 else if ((LA85_6 == NULL)) {
s=16;
}
 else if ((LA85_6 == LEFT_PAREN)) {
s=17;
}
 else if ((LA85_6 == DOT || (LA85_6 >= COMMA && LA85_6 <= RIGHT_PAREN) || (LA85_6 >= DOUBLE_PIPE && LA85_6 <= DOUBLE_AMPER) || LA85_6 == LEFT_SQUARE) && ((validateRestr()))) {
s=5;
}
 else if ((LA85_6 == GRAVE_ACCENT)) {
s=1;
}
input.seek(index85_6);
if (s >= 0) return s;
break;
case 10:
int LA85_3=input.LA(1);
int index85_3=input.index();
input.rewind();
s=-1;
if ((LA85_3 == DOT || LA85_3 == COLON || (LA85_3 >= EQUAL && LA85_3 <= NOT_EQUAL) || LA85_3 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA85_3 == ID)) {
s=6;
}
 else if ((LA85_3 == GRAVE_ACCENT)) {
s=7;
}
 else if ((LA85_3 == STRING || (LA85_3 >= BOOL && LA85_3 <= INT) || (LA85_3 >= FLOAT && LA85_3 <= NULL)) && ((validateRestr()))) {
s=5;
}
 else if ((LA85_3 == LEFT_PAREN)) {
s=8;
}
input.seek(index85_3);
if (s >= 0) return s;
break;
case 11:
int LA85_9=input.LA(1);
int index85_9=input.index();
input.rewind();
s=-1;
if ((LA85_9 == DOT || LA85_9 == COLON || (LA85_9 >= EQUAL && LA85_9 <= NOT_EQUAL) || LA85_9 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA85_9 == ID)) {
s=35;
}
 else if ((LA85_9 == GRAVE_ACCENT)) {
s=36;
}
 else if ((LA85_9 == LEFT_PAREN)) {
s=37;
}
 else if ((LA85_9 == STRING || (LA85_9 >= BOOL && LA85_9 <= INT) || (LA85_9 >= FLOAT && LA85_9 <= NULL)) && ((validateRestr()))) {
s=5;
}
input.seek(index85_9);
if (s >= 0) return s;
break;
case 12:
int LA85_21=input.LA(1);
int index85_21=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index85_21);
if (s >= 0) return s;
break;
case 13:
int LA85_4=input.LA(1);
int index85_4=input.index();
input.rewind();
s=-1;
if ((LA85_4 == ID)) {
s=9;
}
 else if ((LA85_4 == LEFT_PAREN)) {
s=10;
}
 else if (((LA85_4 >= EQUAL && LA85_4 <= GRAVE_ACCENT)) && ((validateRestr()))) {
s=5;
}
input.seek(index85_4);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),85,_s,input);
error(nvae);
throw nvae;
}
