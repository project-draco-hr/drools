{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA21_5=input.LA(1);
  int index21_5=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))))) {
s=4;
}
 else if (((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
s=10;
}
input.seek(index21_5);
if (s >= 0) return s;
break;
case 1:
int LA21_1=input.LA(1);
int index21_1=input.index();
input.rewind();
s=-1;
if ((LA21_1 == MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))))) {
s=3;
}
 else if ((LA21_1 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))))) {
s=4;
}
 else if ((LA21_1 == STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))))) {
s=5;
}
 else if ((LA21_1 == COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {
s=6;
}
 else if ((LA21_1 == PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
s=7;
}
 else if ((LA21_1 == DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
s=8;
}
 else if ((LA21_1 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {
s=9;
}
 else if ((LA21_1 == BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {
s=10;
}
input.seek(index21_1);
if (s >= 0) return s;
break;
case 2:
int LA21_0=input.LA(1);
int index21_0=input.index();
input.rewind();
s=-1;
if ((LA21_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))))) {
s=1;
}
 else if ((LA21_0 == AT || LA21_0 == WHEN || LA21_0 == THEN)) {
s=2;
}
input.seek(index21_0);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),21,_s,input);
error(nvae);
throw nvae;
}
