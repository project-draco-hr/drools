{
  int _s=s;
switch (s) {
case 0:
    int LA58_7=input.LA(1);
  int index58_7=input.index();
input.rewind();
s=-1;
if ((LA58_7 == LEFT_PAREN)) {
s=26;
}
 else if ((LA58_7 == ID)) {
s=27;
}
 else if ((LA58_7 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_7 >= PACKAGE && LA58_7 <= FUNCTION) || (LA58_7 >= DOT && LA58_7 <= GLOBAL) || LA58_7 == COMMA || (LA58_7 >= DECLARE && LA58_7 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_7);
if (s >= 0) return s;
break;
case 1:
int LA58_5=input.LA(1);
int index58_5=input.index();
input.rewind();
s=-1;
if ((LA58_5 == LEFT_PAREN)) {
s=20;
}
 else if ((LA58_5 == EXISTS)) {
s=21;
}
 else if ((LA58_5 == NOT)) {
s=22;
}
 else if ((LA58_5 == EVAL)) {
s=23;
}
 else if ((LA58_5 == FORALL)) {
s=24;
}
 else if ((LA58_5 == ID)) {
s=25;
}
 else if ((LA58_5 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_5 >= PACKAGE && LA58_5 <= FUNCTION) || (LA58_5 >= DOT && LA58_5 <= GLOBAL) || LA58_5 == COMMA || (LA58_5 >= DECLARE && LA58_5 <= FROM) || (LA58_5 >= ACCUMULATE && LA58_5 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_5);
if (s >= 0) return s;
break;
case 2:
int LA58_22=input.LA(1);
int index58_22=input.index();
input.rewind();
s=-1;
if ((LA58_22 == LEFT_PAREN)) {
s=48;
}
 else if ((LA58_22 == ID)) {
s=49;
}
 else if ((LA58_22 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_22 >= PACKAGE && LA58_22 <= FUNCTION) || (LA58_22 >= DOT && LA58_22 <= GLOBAL) || LA58_22 == COMMA || (LA58_22 >= DECLARE && LA58_22 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_22);
if (s >= 0) return s;
break;
case 3:
int LA58_21=input.LA(1);
int index58_21=input.index();
input.rewind();
s=-1;
if ((LA58_21 == LEFT_PAREN)) {
s=46;
}
 else if ((LA58_21 == ID)) {
s=47;
}
 else if ((LA58_21 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_21 >= PACKAGE && LA58_21 <= FUNCTION) || (LA58_21 >= DOT && LA58_21 <= GLOBAL) || LA58_21 == COMMA || (LA58_21 >= DECLARE && LA58_21 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_21);
if (s >= 0) return s;
break;
case 4:
int LA58_10=input.LA(1);
int index58_10=input.index();
input.rewind();
s=-1;
if ((LA58_10 == LEFT_PAREN)) {
s=31;
}
 else if ((LA58_10 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_10 >= PACKAGE && LA58_10 <= GLOBAL) || LA58_10 == COMMA || (LA58_10 >= DECLARE && LA58_10 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_10);
if (s >= 0) return s;
break;
case 5:
int LA58_14=input.LA(1);
int index58_14=input.index();
input.rewind();
s=-1;
if ((LA58_14 == LEFT_PAREN)) {
s=36;
}
 else if ((LA58_14 == ID)) {
s=37;
}
 else if ((LA58_14 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_14 >= PACKAGE && LA58_14 <= FUNCTION) || (LA58_14 >= DOT && LA58_14 <= GLOBAL) || LA58_14 == COMMA || (LA58_14 >= DECLARE && LA58_14 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_14);
if (s >= 0) return s;
break;
case 6:
int LA58_64=input.LA(1);
int index58_64=input.index();
input.rewind();
s=-1;
if ((LA58_64 == DOT)) {
s=101;
}
 else if ((LA58_64 == LEFT_SQUARE)) {
s=102;
}
 else if ((LA58_64 == LEFT_PAREN)) {
s=103;
}
 else if ((LA58_64 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_64 >= PACKAGE && LA58_64 <= ID) || LA58_64 == GLOBAL || LA58_64 == COMMA || (LA58_64 >= DECLARE && LA58_64 <= ENTRY_POINT) || (LA58_64 >= RIGHT_SQUARE && LA58_64 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_64);
if (s >= 0) return s;
break;
case 7:
int LA58_23=input.LA(1);
int index58_23=input.index();
input.rewind();
s=-1;
if ((LA58_23 == LEFT_PAREN)) {
s=50;
}
 else if ((LA58_23 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_23 >= PACKAGE && LA58_23 <= GLOBAL) || LA58_23 == COMMA || (LA58_23 >= DECLARE && LA58_23 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_23);
if (s >= 0) return s;
break;
case 8:
int LA58_28=input.LA(1);
int index58_28=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=13;
}
 else if ((true)) {
s=3;
}
input.seek(index58_28);
if (s >= 0) return s;
break;
case 9:
int LA58_46=input.LA(1);
int index58_46=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_46);
if (s >= 0) return s;
break;
case 10:
int LA58_38=input.LA(1);
int index58_38=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_38);
if (s >= 0) return s;
break;
case 11:
int LA58_65=input.LA(1);
int index58_65=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_65);
if (s >= 0) return s;
break;
case 12:
int LA58_36=input.LA(1);
int index58_36=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_36);
if (s >= 0) return s;
break;
case 13:
int LA58_55=input.LA(1);
int index58_55=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_55);
if (s >= 0) return s;
break;
case 14:
int LA58_15=input.LA(1);
int index58_15=input.index();
input.rewind();
s=-1;
if ((LA58_15 == LEFT_PAREN)) {
s=38;
}
 else if ((LA58_15 == ID)) {
s=39;
}
 else if ((LA58_15 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_15 >= PACKAGE && LA58_15 <= FUNCTION) || (LA58_15 >= DOT && LA58_15 <= GLOBAL) || LA58_15 == COMMA || (LA58_15 >= DECLARE && LA58_15 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_15);
if (s >= 0) return s;
break;
case 15:
int LA58_20=input.LA(1);
int index58_20=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=13;
}
 else if ((true)) {
s=3;
}
input.seek(index58_20);
if (s >= 0) return s;
break;
case 16:
int LA58_40=input.LA(1);
int index58_40=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_40);
if (s >= 0) return s;
break;
case 17:
int LA58_29=input.LA(1);
int index58_29=input.index();
input.rewind();
s=-1;
if ((LA58_29 == COLON)) {
s=60;
}
 else if ((LA58_29 == DOT)) {
s=61;
}
 else if ((LA58_29 == LEFT_SQUARE)) {
s=62;
}
 else if ((LA58_29 == LEFT_PAREN)) {
s=63;
}
 else if ((LA58_29 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_29 >= PACKAGE && LA58_29 <= ID) || LA58_29 == GLOBAL || LA58_29 == COMMA || (LA58_29 >= DECLARE && LA58_29 <= AT) || (LA58_29 >= EQUALS && LA58_29 <= ENTRY_POINT) || (LA58_29 >= RIGHT_SQUARE && LA58_29 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_29);
if (s >= 0) return s;
break;
case 18:
int LA58_27=input.LA(1);
int index58_27=input.index();
input.rewind();
s=-1;
if ((LA58_27 == COLON)) {
s=56;
}
 else if ((LA58_27 == DOT)) {
s=57;
}
 else if ((LA58_27 == LEFT_SQUARE)) {
s=58;
}
 else if ((LA58_27 == LEFT_PAREN)) {
s=59;
}
 else if ((LA58_27 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_27 >= PACKAGE && LA58_27 <= ID) || LA58_27 == GLOBAL || LA58_27 == COMMA || (LA58_27 >= DECLARE && LA58_27 <= AT) || (LA58_27 >= EQUALS && LA58_27 <= ENTRY_POINT) || (LA58_27 >= RIGHT_SQUARE && LA58_27 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_27);
if (s >= 0) return s;
break;
case 19:
int LA58_11=input.LA(1);
int index58_11=input.index();
input.rewind();
s=-1;
if ((LA58_11 == COLON)) {
s=32;
}
 else if ((LA58_11 == DOT)) {
s=33;
}
 else if ((LA58_11 == LEFT_SQUARE)) {
s=34;
}
 else if ((LA58_11 == LEFT_PAREN)) {
s=35;
}
 else if ((LA58_11 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_11 >= PACKAGE && LA58_11 <= ID) || LA58_11 == GLOBAL || LA58_11 == COMMA || (LA58_11 >= DECLARE && LA58_11 <= AT) || (LA58_11 >= EQUALS && LA58_11 <= ENTRY_POINT) || (LA58_11 >= RIGHT_SQUARE && LA58_11 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_11);
if (s >= 0) return s;
break;
case 20:
int LA58_17=input.LA(1);
int index58_17=input.index();
input.rewind();
s=-1;
if ((LA58_17 == LEFT_PAREN)) {
s=41;
}
 else if ((LA58_17 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_17 >= PACKAGE && LA58_17 <= GLOBAL) || LA58_17 == COMMA || (LA58_17 >= DECLARE && LA58_17 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_17);
if (s >= 0) return s;
break;
case 21:
int LA58_50=input.LA(1);
int index58_50=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_50);
if (s >= 0) return s;
break;
case 22:
int LA58_26=input.LA(1);
int index58_26=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=13;
}
 else if ((true)) {
s=3;
}
input.seek(index58_26);
if (s >= 0) return s;
break;
case 23:
int LA58_16=input.LA(1);
int index58_16=input.index();
input.rewind();
s=-1;
if ((LA58_16 == LEFT_PAREN)) {
s=40;
}
 else if ((LA58_16 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_16 >= PACKAGE && LA58_16 <= GLOBAL) || LA58_16 == COMMA || (LA58_16 >= DECLARE && LA58_16 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_16);
if (s >= 0) return s;
break;
case 24:
int LA58_31=input.LA(1);
int index58_31=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=13;
}
 else if ((true)) {
s=3;
}
input.seek(index58_31);
if (s >= 0) return s;
break;
case 25:
int LA58_34=input.LA(1);
int index58_34=input.index();
input.rewind();
s=-1;
if ((LA58_34 == RIGHT_SQUARE)) {
s=68;
}
 else if ((LA58_34 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_34 >= PACKAGE && LA58_34 <= GLOBAL) || LA58_34 == COMMA || (LA58_34 >= DECLARE && LA58_34 <= LEFT_SQUARE) || (LA58_34 >= CONTAINS && LA58_34 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_34 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_34);
if (s >= 0) return s;
break;
case 26:
int LA58_58=input.LA(1);
int index58_58=input.index();
input.rewind();
s=-1;
if ((LA58_58 == RIGHT_SQUARE)) {
s=96;
}
 else if ((LA58_58 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_58 >= PACKAGE && LA58_58 <= GLOBAL) || LA58_58 == COMMA || (LA58_58 >= DECLARE && LA58_58 <= LEFT_SQUARE) || (LA58_58 >= CONTAINS && LA58_58 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_58 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_58);
if (s >= 0) return s;
break;
case 27:
int LA58_62=input.LA(1);
int index58_62=input.index();
input.rewind();
s=-1;
if ((LA58_62 == RIGHT_SQUARE)) {
s=100;
}
 else if ((LA58_62 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_62 >= PACKAGE && LA58_62 <= GLOBAL) || LA58_62 == COMMA || (LA58_62 >= DECLARE && LA58_62 <= LEFT_SQUARE) || (LA58_62 >= CONTAINS && LA58_62 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_62 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_62);
if (s >= 0) return s;
break;
case 28:
int LA58_53=input.LA(1);
int index58_53=input.index();
input.rewind();
s=-1;
if (((LA58_53 >= PACKAGE && LA58_53 <= ID) || LA58_53 == GLOBAL || LA58_53 == END || (LA58_53 >= QUERY && LA58_53 <= ATTRIBUTES) || LA58_53 == ENABLED || LA58_53 == SALIENCE || (LA58_53 >= DURATION && LA58_53 <= DIALECT) || LA58_53 == FROM || (LA58_53 >= INIT && LA58_53 <= RESULT) || LA58_53 == IN || (LA58_53 >= THEN && LA58_53 <= EVENT))) {
s=91;
}
 else if ((LA58_53 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if ((LA58_53 == DOT || LA58_53 == COMMA || LA58_53 == DECLARE || (LA58_53 >= AT && LA58_53 <= EQUALS) || (LA58_53 >= DATE_EFFECTIVE && LA58_53 <= DATE_EXPIRES) || LA58_53 == BOOL || (LA58_53 >= INT && LA58_53 <= AGENDA_GROUP) || (LA58_53 >= LOCK_ON_ACTIVE && LA58_53 <= WINDOW) || (LA58_53 >= EXISTS && LA58_53 <= ACCUMULATE) || (LA58_53 >= COLLECT && LA58_53 <= TILDE) || (LA58_53 >= FLOAT && LA58_53 <= RIGHT_CURLY) || (LA58_53 >= EOL && LA58_53 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_53 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_53);
if (s >= 0) return s;
break;
case 29:
int LA58_47=input.LA(1);
int index58_47=input.index();
input.rewind();
s=-1;
if ((LA58_47 == COLON)) {
s=81;
}
 else if ((LA58_47 == DOT)) {
s=82;
}
 else if ((LA58_47 == LEFT_SQUARE)) {
s=83;
}
 else if ((LA58_47 == LEFT_PAREN)) {
s=84;
}
 else if ((LA58_47 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_47 >= PACKAGE && LA58_47 <= ID) || LA58_47 == GLOBAL || LA58_47 == COMMA || (LA58_47 >= DECLARE && LA58_47 <= AT) || (LA58_47 >= EQUALS && LA58_47 <= ENTRY_POINT) || (LA58_47 >= RIGHT_SQUARE && LA58_47 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_47);
if (s >= 0) return s;
break;
case 30:
int LA58_25=input.LA(1);
int index58_25=input.index();
input.rewind();
s=-1;
if ((LA58_25 == COLON)) {
s=52;
}
 else if ((LA58_25 == DOT)) {
s=53;
}
 else if ((LA58_25 == LEFT_SQUARE)) {
s=54;
}
 else if ((LA58_25 == LEFT_PAREN)) {
s=55;
}
 else if ((LA58_25 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_25 >= PACKAGE && LA58_25 <= ID) || LA58_25 == GLOBAL || LA58_25 == COMMA || (LA58_25 >= DECLARE && LA58_25 <= AT) || (LA58_25 >= EQUALS && LA58_25 <= ENTRY_POINT) || (LA58_25 >= RIGHT_SQUARE && LA58_25 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_25);
if (s >= 0) return s;
break;
case 31:
int LA58_49=input.LA(1);
int index58_49=input.index();
input.rewind();
s=-1;
if ((LA58_49 == COLON)) {
s=85;
}
 else if ((LA58_49 == DOT)) {
s=86;
}
 else if ((LA58_49 == LEFT_SQUARE)) {
s=87;
}
 else if ((LA58_49 == LEFT_PAREN)) {
s=88;
}
 else if ((LA58_49 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_49 >= PACKAGE && LA58_49 <= ID) || LA58_49 == GLOBAL || LA58_49 == COMMA || (LA58_49 >= DECLARE && LA58_49 <= AT) || (LA58_49 >= EQUALS && LA58_49 <= ENTRY_POINT) || (LA58_49 >= RIGHT_SQUARE && LA58_49 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_49);
if (s >= 0) return s;
break;
case 32:
int LA58_2=input.LA(1);
int index58_2=input.index();
input.rewind();
s=-1;
if ((LA58_2 == AND)) {
s=4;
}
 else if ((LA58_2 == OR)) {
s=5;
}
 else if ((LA58_2 == LEFT_PAREN)) {
s=6;
}
 else if ((LA58_2 == EXISTS)) {
s=7;
}
 else if ((LA58_2 == NOT)) {
s=8;
}
 else if ((LA58_2 == EVAL)) {
s=9;
}
 else if ((LA58_2 == FORALL)) {
s=10;
}
 else if ((LA58_2 == ID)) {
s=11;
}
 else if (((LA58_2 >= PACKAGE && LA58_2 <= FUNCTION) || (LA58_2 >= DOT && LA58_2 <= GLOBAL) || LA58_2 == COMMA || (LA58_2 >= DECLARE && LA58_2 <= LOCK_ON_ACTIVE) || LA58_2 == DOUBLE_PIPE || (LA58_2 >= DOUBLE_AMPER && LA58_2 <= FROM) || (LA58_2 >= ACCUMULATE && LA58_2 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_2 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
input.seek(index58_2);
if (s >= 0) return s;
break;
case 33:
int LA58_48=input.LA(1);
int index58_48=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_48);
if (s >= 0) return s;
break;
case 34:
int LA58_51=input.LA(1);
int index58_51=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_51);
if (s >= 0) return s;
break;
case 35:
int LA58_33=input.LA(1);
int index58_33=input.index();
input.rewind();
s=-1;
if (((LA58_33 >= PACKAGE && LA58_33 <= ID) || LA58_33 == GLOBAL || LA58_33 == END || (LA58_33 >= QUERY && LA58_33 <= ATTRIBUTES) || LA58_33 == ENABLED || LA58_33 == SALIENCE || (LA58_33 >= DURATION && LA58_33 <= DIALECT) || LA58_33 == FROM || (LA58_33 >= INIT && LA58_33 <= RESULT) || LA58_33 == IN || (LA58_33 >= THEN && LA58_33 <= EVENT))) {
s=66;
}
 else if ((LA58_33 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if ((LA58_33 == DOT || LA58_33 == COMMA || LA58_33 == DECLARE || (LA58_33 >= AT && LA58_33 <= EQUALS) || (LA58_33 >= DATE_EFFECTIVE && LA58_33 <= DATE_EXPIRES) || LA58_33 == BOOL || (LA58_33 >= INT && LA58_33 <= AGENDA_GROUP) || (LA58_33 >= LOCK_ON_ACTIVE && LA58_33 <= WINDOW) || (LA58_33 >= EXISTS && LA58_33 <= ACCUMULATE) || (LA58_33 >= COLLECT && LA58_33 <= TILDE) || (LA58_33 >= FLOAT && LA58_33 <= RIGHT_CURLY) || (LA58_33 >= EOL && LA58_33 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_33 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_33);
if (s >= 0) return s;
break;
case 36:
int LA58_57=input.LA(1);
int index58_57=input.index();
input.rewind();
s=-1;
if (((LA58_57 >= PACKAGE && LA58_57 <= ID) || LA58_57 == GLOBAL || LA58_57 == END || (LA58_57 >= QUERY && LA58_57 <= ATTRIBUTES) || LA58_57 == ENABLED || LA58_57 == SALIENCE || (LA58_57 >= DURATION && LA58_57 <= DIALECT) || LA58_57 == FROM || (LA58_57 >= INIT && LA58_57 <= RESULT) || LA58_57 == IN || (LA58_57 >= THEN && LA58_57 <= EVENT))) {
s=95;
}
 else if ((LA58_57 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if ((LA58_57 == DOT || LA58_57 == COMMA || LA58_57 == DECLARE || (LA58_57 >= AT && LA58_57 <= EQUALS) || (LA58_57 >= DATE_EFFECTIVE && LA58_57 <= DATE_EXPIRES) || LA58_57 == BOOL || (LA58_57 >= INT && LA58_57 <= AGENDA_GROUP) || (LA58_57 >= LOCK_ON_ACTIVE && LA58_57 <= WINDOW) || (LA58_57 >= EXISTS && LA58_57 <= ACCUMULATE) || (LA58_57 >= COLLECT && LA58_57 <= TILDE) || (LA58_57 >= FLOAT && LA58_57 <= RIGHT_CURLY) || (LA58_57 >= EOL && LA58_57 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_57 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_57);
if (s >= 0) return s;
break;
case 37:
int LA58_61=input.LA(1);
int index58_61=input.index();
input.rewind();
s=-1;
if (((LA58_61 >= PACKAGE && LA58_61 <= ID) || LA58_61 == GLOBAL || LA58_61 == END || (LA58_61 >= QUERY && LA58_61 <= ATTRIBUTES) || LA58_61 == ENABLED || LA58_61 == SALIENCE || (LA58_61 >= DURATION && LA58_61 <= DIALECT) || LA58_61 == FROM || (LA58_61 >= INIT && LA58_61 <= RESULT) || LA58_61 == IN || (LA58_61 >= THEN && LA58_61 <= EVENT))) {
s=99;
}
 else if ((LA58_61 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if ((LA58_61 == DOT || LA58_61 == COMMA || LA58_61 == DECLARE || (LA58_61 >= AT && LA58_61 <= EQUALS) || (LA58_61 >= DATE_EFFECTIVE && LA58_61 <= DATE_EXPIRES) || LA58_61 == BOOL || (LA58_61 >= INT && LA58_61 <= AGENDA_GROUP) || (LA58_61 >= LOCK_ON_ACTIVE && LA58_61 <= WINDOW) || (LA58_61 >= EXISTS && LA58_61 <= ACCUMULATE) || (LA58_61 >= COLLECT && LA58_61 <= TILDE) || (LA58_61 >= FLOAT && LA58_61 <= RIGHT_CURLY) || (LA58_61 >= EOL && LA58_61 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_61 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_61);
if (s >= 0) return s;
break;
case 38:
int LA58_52=input.LA(1);
int index58_52=input.index();
input.rewind();
s=-1;
if ((LA58_52 == ID)) {
s=89;
}
 else if ((LA58_52 == LEFT_PAREN)) {
s=90;
}
 else if ((LA58_52 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_52 >= PACKAGE && LA58_52 <= FUNCTION) || (LA58_52 >= DOT && LA58_52 <= GLOBAL) || LA58_52 == COMMA || (LA58_52 >= DECLARE && LA58_52 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_52);
if (s >= 0) return s;
break;
case 39:
int LA58_45=input.LA(1);
int index58_45=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_45);
if (s >= 0) return s;
break;
case 40:
int LA58_42=input.LA(1);
int index58_42=input.index();
input.rewind();
s=-1;
if ((LA58_42 == ID)) {
s=77;
}
 else if ((LA58_42 == LEFT_PAREN)) {
s=78;
}
 else if ((LA58_42 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_42 >= PACKAGE && LA58_42 <= FUNCTION) || (LA58_42 >= DOT && LA58_42 <= GLOBAL) || LA58_42 == COMMA || (LA58_42 >= DECLARE && LA58_42 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_42);
if (s >= 0) return s;
break;
case 41:
int LA58_9=input.LA(1);
int index58_9=input.index();
input.rewind();
s=-1;
if ((LA58_9 == LEFT_PAREN)) {
s=30;
}
 else if ((LA58_9 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_9 >= PACKAGE && LA58_9 <= GLOBAL) || LA58_9 == COMMA || (LA58_9 >= DECLARE && LA58_9 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_9);
if (s >= 0) return s;
break;
case 42:
int LA58_30=input.LA(1);
int index58_30=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=13;
}
 else if ((true)) {
s=3;
}
input.seek(index58_30);
if (s >= 0) return s;
break;
case 43:
int LA58_43=input.LA(1);
int index58_43=input.index();
input.rewind();
s=-1;
if (((LA58_43 >= PACKAGE && LA58_43 <= ID) || LA58_43 == GLOBAL || LA58_43 == END || (LA58_43 >= QUERY && LA58_43 <= ATTRIBUTES) || LA58_43 == ENABLED || LA58_43 == SALIENCE || (LA58_43 >= DURATION && LA58_43 <= DIALECT) || LA58_43 == FROM || (LA58_43 >= INIT && LA58_43 <= RESULT) || LA58_43 == IN || (LA58_43 >= THEN && LA58_43 <= EVENT))) {
s=79;
}
 else if ((LA58_43 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if ((LA58_43 == DOT || LA58_43 == COMMA || LA58_43 == DECLARE || (LA58_43 >= AT && LA58_43 <= EQUALS) || (LA58_43 >= DATE_EFFECTIVE && LA58_43 <= DATE_EXPIRES) || LA58_43 == BOOL || (LA58_43 >= INT && LA58_43 <= AGENDA_GROUP) || (LA58_43 >= LOCK_ON_ACTIVE && LA58_43 <= WINDOW) || (LA58_43 >= EXISTS && LA58_43 <= ACCUMULATE) || (LA58_43 >= COLLECT && LA58_43 <= TILDE) || (LA58_43 >= FLOAT && LA58_43 <= RIGHT_CURLY) || (LA58_43 >= EOL && LA58_43 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_43 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_43);
if (s >= 0) return s;
break;
case 44:
int LA58_39=input.LA(1);
int index58_39=input.index();
input.rewind();
s=-1;
if ((LA58_39 == COLON)) {
s=73;
}
 else if ((LA58_39 == DOT)) {
s=74;
}
 else if ((LA58_39 == LEFT_SQUARE)) {
s=75;
}
 else if ((LA58_39 == LEFT_PAREN)) {
s=76;
}
 else if ((LA58_39 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_39 >= PACKAGE && LA58_39 <= ID) || LA58_39 == GLOBAL || LA58_39 == COMMA || (LA58_39 >= DECLARE && LA58_39 <= AT) || (LA58_39 >= EQUALS && LA58_39 <= ENTRY_POINT) || (LA58_39 >= RIGHT_SQUARE && LA58_39 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_39);
if (s >= 0) return s;
break;
case 45:
int LA58_37=input.LA(1);
int index58_37=input.index();
input.rewind();
s=-1;
if ((LA58_37 == COLON)) {
s=69;
}
 else if ((LA58_37 == DOT)) {
s=70;
}
 else if ((LA58_37 == LEFT_SQUARE)) {
s=71;
}
 else if ((LA58_37 == LEFT_PAREN)) {
s=72;
}
 else if ((LA58_37 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_37 >= PACKAGE && LA58_37 <= ID) || LA58_37 == GLOBAL || LA58_37 == COMMA || (LA58_37 >= DECLARE && LA58_37 <= AT) || (LA58_37 >= EQUALS && LA58_37 <= ENTRY_POINT) || (LA58_37 >= RIGHT_SQUARE && LA58_37 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_37);
if (s >= 0) return s;
break;
case 46:
int LA58_19=input.LA(1);
int index58_19=input.index();
input.rewind();
s=-1;
if ((LA58_19 == COLON)) {
s=42;
}
 else if ((LA58_19 == DOT)) {
s=43;
}
 else if ((LA58_19 == LEFT_SQUARE)) {
s=44;
}
 else if ((LA58_19 == LEFT_PAREN)) {
s=45;
}
 else if ((LA58_19 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_19 >= PACKAGE && LA58_19 <= ID) || LA58_19 == GLOBAL || LA58_19 == COMMA || (LA58_19 >= DECLARE && LA58_19 <= AT) || (LA58_19 >= EQUALS && LA58_19 <= ENTRY_POINT) || (LA58_19 >= RIGHT_SQUARE && LA58_19 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_19);
if (s >= 0) return s;
break;
case 47:
int LA58_44=input.LA(1);
int index58_44=input.index();
input.rewind();
s=-1;
if ((LA58_44 == RIGHT_SQUARE)) {
s=80;
}
 else if ((LA58_44 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_44 >= PACKAGE && LA58_44 <= GLOBAL) || LA58_44 == COMMA || (LA58_44 >= DECLARE && LA58_44 <= LEFT_SQUARE) || (LA58_44 >= CONTAINS && LA58_44 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_44 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_44);
if (s >= 0) return s;
break;
case 48:
int LA58_0=input.LA(1);
int index58_0=input.index();
input.rewind();
s=-1;
if ((LA58_0 == LEFT_SQUARE) && (synpred9())) {
s=1;
}
 else if ((LA58_0 == LEFT_PAREN)) {
s=2;
}
 else if (((LA58_0 >= ID && LA58_0 <= DOT) || (LA58_0 >= COMMA && LA58_0 <= RIGHT_PAREN) || LA58_0 == END || (LA58_0 >= OR && LA58_0 <= DOUBLE_AMPER) || (LA58_0 >= EXISTS && LA58_0 <= FORALL) || LA58_0 == INIT || LA58_0 == THEN || LA58_0 == 81)) {
s=3;
}
input.seek(index58_0);
if (s >= 0) return s;
break;
case 49:
int LA58_4=input.LA(1);
int index58_4=input.index();
input.rewind();
s=-1;
if ((LA58_4 == EXISTS)) {
s=14;
}
 else if ((LA58_4 == NOT)) {
s=15;
}
 else if ((LA58_4 == EVAL)) {
s=16;
}
 else if ((LA58_4 == FORALL)) {
s=17;
}
 else if ((LA58_4 == LEFT_PAREN)) {
s=18;
}
 else if ((LA58_4 == ID)) {
s=19;
}
 else if ((LA58_4 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_4 >= PACKAGE && LA58_4 <= FUNCTION) || (LA58_4 >= DOT && LA58_4 <= GLOBAL) || LA58_4 == COMMA || (LA58_4 >= DECLARE && LA58_4 <= FROM) || (LA58_4 >= ACCUMULATE && LA58_4 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_4);
if (s >= 0) return s;
break;
case 50:
int LA58_35=input.LA(1);
int index58_35=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_35);
if (s >= 0) return s;
break;
case 51:
int LA58_6=input.LA(1);
int index58_6=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=13;
}
 else if ((true)) {
s=3;
}
input.seek(index58_6);
if (s >= 0) return s;
break;
case 52:
int LA58_59=input.LA(1);
int index58_59=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_59);
if (s >= 0) return s;
break;
case 53:
int LA58_41=input.LA(1);
int index58_41=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_41);
if (s >= 0) return s;
break;
case 54:
int LA58_18=input.LA(1);
int index58_18=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=13;
}
 else if ((true)) {
s=3;
}
input.seek(index58_18);
if (s >= 0) return s;
break;
case 55:
int LA58_8=input.LA(1);
int index58_8=input.index();
input.rewind();
s=-1;
if ((LA58_8 == LEFT_PAREN)) {
s=28;
}
 else if ((LA58_8 == ID)) {
s=29;
}
 else if ((LA58_8 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_8 >= PACKAGE && LA58_8 <= FUNCTION) || (LA58_8 >= DOT && LA58_8 <= GLOBAL) || LA58_8 == COMMA || (LA58_8 >= DECLARE && LA58_8 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_8);
if (s >= 0) return s;
break;
case 56:
int LA58_32=input.LA(1);
int index58_32=input.index();
input.rewind();
s=-1;
if ((LA58_32 == ID)) {
s=64;
}
 else if ((LA58_32 == LEFT_PAREN)) {
s=65;
}
 else if ((LA58_32 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_32 >= PACKAGE && LA58_32 <= FUNCTION) || (LA58_32 >= DOT && LA58_32 <= GLOBAL) || LA58_32 == COMMA || (LA58_32 >= DECLARE && LA58_32 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_32);
if (s >= 0) return s;
break;
case 57:
int LA58_56=input.LA(1);
int index58_56=input.index();
input.rewind();
s=-1;
if ((LA58_56 == ID)) {
s=93;
}
 else if ((LA58_56 == LEFT_PAREN)) {
s=94;
}
 else if ((LA58_56 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_56 >= PACKAGE && LA58_56 <= FUNCTION) || (LA58_56 >= DOT && LA58_56 <= GLOBAL) || LA58_56 == COMMA || (LA58_56 >= DECLARE && LA58_56 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_56);
if (s >= 0) return s;
break;
case 58:
int LA58_60=input.LA(1);
int index58_60=input.index();
input.rewind();
s=-1;
if ((LA58_60 == ID)) {
s=97;
}
 else if ((LA58_60 == LEFT_PAREN)) {
s=98;
}
 else if ((LA58_60 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_60 >= PACKAGE && LA58_60 <= FUNCTION) || (LA58_60 >= DOT && LA58_60 <= GLOBAL) || LA58_60 == COMMA || (LA58_60 >= DECLARE && LA58_60 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_60);
if (s >= 0) return s;
break;
case 59:
int LA58_66=input.LA(1);
int index58_66=input.index();
input.rewind();
s=-1;
if ((LA58_66 == LEFT_SQUARE)) {
s=34;
}
 else if ((LA58_66 == LEFT_PAREN)) {
s=35;
}
 else if ((LA58_66 == DOT)) {
s=33;
}
 else if ((LA58_66 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_66 >= PACKAGE && LA58_66 <= ID) || LA58_66 == GLOBAL || LA58_66 == COMMA || (LA58_66 >= DECLARE && LA58_66 <= ENTRY_POINT) || (LA58_66 >= RIGHT_SQUARE && LA58_66 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_66);
if (s >= 0) return s;
break;
case 60:
int LA58_63=input.LA(1);
int index58_63=input.index();
input.rewind();
s=-1;
if ((synpred10())) {
s=67;
}
 else if ((true)) {
s=3;
}
input.seek(index58_63);
if (s >= 0) return s;
break;
case 61:
int LA58_54=input.LA(1);
int index58_54=input.index();
input.rewind();
s=-1;
if ((LA58_54 == RIGHT_SQUARE)) {
s=92;
}
 else if ((LA58_54 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_54 >= PACKAGE && LA58_54 <= GLOBAL) || LA58_54 == COMMA || (LA58_54 >= DECLARE && LA58_54 <= LEFT_SQUARE) || (LA58_54 >= CONTAINS && LA58_54 <= 89)) && (synpred10())) {
s=12;
}
 else if ((LA58_54 == LEFT_PAREN) && (synpred10())) {
s=67;
}
input.seek(index58_54);
if (s >= 0) return s;
break;
case 62:
int LA58_24=input.LA(1);
int index58_24=input.index();
input.rewind();
s=-1;
if ((LA58_24 == LEFT_PAREN)) {
s=51;
}
 else if ((LA58_24 == RIGHT_PAREN) && (synpred10())) {
s=13;
}
 else if (((LA58_24 >= PACKAGE && LA58_24 <= GLOBAL) || LA58_24 == COMMA || (LA58_24 >= DECLARE && LA58_24 <= 89)) && (synpred10())) {
s=12;
}
input.seek(index58_24);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),58,_s,input);
error(nvae);
throw nvae;
}
