{
  int _s=s;
switch (s) {
case 0:
    int LA30_10=input.LA(1);
  int index30_10=input.index();
input.rewind();
s=-1;
if ((LA30_10 == COLON) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=13;
}
 else if ((LA30_10 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=14;
}
 else if (((LA30_10 >= VT_COMPILATION_UNIT && LA30_10 <= SEMICOLON) || (LA30_10 >= DOT_STAR && LA30_10 <= STRING) || (LA30_10 >= COMMA && LA30_10 <= RIGHT_PAREN)|| (LA30_10 >= BOOL && LA30_10 <= NULL)|| (LA30_10 >= RIGHT_SQUARE && LA30_10 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA30_10 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=15;
}
 else if ((LA30_10 == DOT) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=16;
}
 else if ((LA30_10 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=17;
}
input.seek(index30_10);
if (s >= 0) return s;
break;
case 1:
int LA30_19=input.LA(1);
int index30_19=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index30_19);
if (s >= 0) return s;
break;
case 2:
int LA30_20=input.LA(1);
int index30_20=input.index();
input.rewind();
s=-1;
if (((LA30_20 >= VT_COMPILATION_UNIT && LA30_20 <= ID) || (LA30_20 >= DOT_STAR && LA30_20 <= STRING) || (LA30_20 >= COMMA && LA30_20 <= NULL)|| (LA30_20 >= RIGHT_SQUARE && LA30_20 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA30_20 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=17;
}
 else if ((LA30_20 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=25;
}
 else if ((LA30_20 == DOT) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=16;
}
input.seek(index30_20);
if (s >= 0) return s;
break;
case 3:
int LA30_15=input.LA(1);
int index30_15=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index30_15);
if (s >= 0) return s;
break;
case 4:
int LA30_6=input.LA(1);
int index30_6=input.index();
input.rewind();
s=-1;
if ((LA30_6 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=10;
}
 else if ((LA30_6 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=11;
}
 else if (((LA30_6 >= VT_COMPILATION_UNIT && LA30_6 <= SEMICOLON) || (LA30_6 >= DOT && LA30_6 <= STRING) || (LA30_6 >= COMMA && LA30_6 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
input.seek(index30_6);
if (s >= 0) return s;
break;
case 5:
int LA30_21=input.LA(1);
int index30_21=input.index();
input.rewind();
s=-1;
if (((LA30_21 >= VT_COMPILATION_UNIT && LA30_21 <= STRING) || (LA30_21 >= COMMA && LA30_21 <= NULL) || (LA30_21 >= RIGHT_SQUARE && LA30_21 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA30_21 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=17;
}
 else if ((LA30_21 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=25;
}
input.seek(index30_21);
if (s >= 0) return s;
break;
case 6:
int LA30_1=input.LA(1);
int index30_1=input.index();
input.rewind();
s=-1;
if ((LA30_1 == MISC) && (((validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP)) || (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))))) {
s=4;
}
 else if ((LA30_1 == INT) && (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)) || (validateIdentifierKey(DroolsSoftKeywords.DURATION))))) {
s=5;
}
 else if ((LA30_1 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=6;
}
 else if ((LA30_1 == BOOL) && ((validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) {
s=7;
}
 else if ((LA30_1 == STRING) && ((validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) {
s=8;
}
 else if ((LA30_1 == ID || LA30_1 == COLON || LA30_1 == THEN) && ((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index30_1);
if (s >= 0) return s;
break;
case 7:
int LA30_17=input.LA(1);
int index30_17=input.index();
input.rewind();
s=-1;
if ((LA30_17 == RIGHT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=21;
}
 else if (((LA30_17 >= VT_COMPILATION_UNIT && LA30_17 <= LEFT_SQUARE) || (LA30_17 >= THEN && LA30_17 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
input.seek(index30_17);
if (s >= 0) return s;
break;
case 8:
int LA30_11=input.LA(1);
int index30_11=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index30_11);
if (s >= 0) return s;
break;
case 9:
int LA30_13=input.LA(1);
int index30_13=input.index();
input.rewind();
s=-1;
if (((LA30_13 >= VT_COMPILATION_UNIT && LA30_13 <= SEMICOLON) || (LA30_13 >= DOT && LA30_13 <= STRING) || (LA30_13 >= COMMA && LA30_13 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if ((LA30_13 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=18;
}
 else if ((LA30_13 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=19;
}
input.seek(index30_13);
if (s >= 0) return s;
break;
case 10:
int LA30_18=input.LA(1);
int index30_18=input.index();
input.rewind();
s=-1;
if ((LA30_18 == DOT) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=22;
}
 else if ((LA30_18 == LEFT_SQUARE) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=23;
}
 else if ((LA30_18 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=24;
}
 else if (((LA30_18 >= VT_COMPILATION_UNIT && LA30_18 <= ID) || (LA30_18 >= DOT_STAR && LA30_18 <= STRING) || (LA30_18 >= COMMA && LA30_18 <= NULL)|| (LA30_18 >= RIGHT_SQUARE && LA30_18 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
input.seek(index30_18);
if (s >= 0) return s;
break;
case 11:
int LA30_14=input.LA(1);
int index30_14=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.WHEN)))) {
s=9;
}
input.seek(index30_14);
if (s >= 0) return s;
break;
case 12:
int LA30_16=input.LA(1);
int index30_16=input.index();
input.rewind();
s=-1;
if ((LA30_16 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=20;
}
 else if (((LA30_16 >= VT_COMPILATION_UNIT && LA30_16 <= SEMICOLON) || (LA30_16 >= DOT && LA30_16 <= MULTI_LINE_COMMENT)) && ((validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) {
s=12;
}
input.seek(index30_16);
if (s >= 0) return s;
break;
case 13:
int LA30_0=input.LA(1);
int index30_0=input.index();
input.rewind();
s=-1;
if ((LA30_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.WHEN)) || (validateIdentifierKey(DroolsSoftKeywords.DIALECT)) || (validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.NO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.LOOP))|| (validateIdentifierKey(DroolsSoftKeywords.DURATION))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EFFECTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.AGENDA) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.DATE) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.EXPIRES))|| (validateIdentifierKey(DroolsSoftKeywords.LOCK) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.ON)&& validateLT(4,"-")&& validateLT(5,DroolsSoftKeywords.ACTIVE))|| (validateIdentifierKey(DroolsSoftKeywords.SALIENCE))|| (validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.GROUP))|| (validateIdentifierKey(DroolsSoftKeywords.ENABLED))|| (validateIdentifierKey(DroolsSoftKeywords.AUTO) && validateLT(2,"-") && validateLT(3,DroolsSoftKeywords.FOCUS))))) {
s=1;
}
 else if ((LA30_0 == THEN)) {
s=2;
}
 else if ((LA30_0 == COMMA)) {
s=3;
}
input.seek(index30_0);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),30,_s,input);
error(nvae);
throw nvae;
}
