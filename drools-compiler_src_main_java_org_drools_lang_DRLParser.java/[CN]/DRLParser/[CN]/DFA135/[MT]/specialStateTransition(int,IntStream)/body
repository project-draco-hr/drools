{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA135_0=input.LA(1);
  int index135_0=input.index();
input.rewind();
s=-1;
if ((LA135_0 == EOF || (LA135_0 >= SEMICOLON && LA135_0 <= ID) || LA135_0 == STRING || (LA135_0 >= COLON && LA135_0 <= EQUALS_ASSIGN) || (LA135_0 >= COMMA && LA135_0 <= RIGHT_PAREN) || LA135_0 == DECIMAL || (LA135_0 >= DOUBLE_PIPE && LA135_0 <= DOUBLE_AMPER) || (LA135_0 >= EQUALS && LA135_0 <= NOT_EQUALS) || (LA135_0 >= RIGHT_SQUARE && LA135_0 <= THEN) || (LA135_0 >= RIGHT_CURLY && LA135_0 <= MOD_ASSIGN))) {
s=1;
}
 else if ((LA135_0 == LEFT_SQUARE)) {
s=43;
}
 else if ((LA135_0 == DOT) && (synpred19_DRL())) {
s=46;
}
input.seek(index135_0);
if (s >= 0) return s;
break;
case 1:
int LA135_43=input.LA(1);
int index135_43=input.index();
input.rewind();
s=-1;
if ((synpred19_DRL())) {
s=46;
}
 else if ((true)) {
s=1;
}
input.seek(index135_43);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),135,_s,input);
error(nvae);
throw nvae;
}
