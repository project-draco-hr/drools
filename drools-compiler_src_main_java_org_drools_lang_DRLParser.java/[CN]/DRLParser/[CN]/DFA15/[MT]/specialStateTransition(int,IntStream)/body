{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA15_1=input.LA(1);
  int index15_1=input.index();
input.rewind();
s=-1;
if ((LA15_1 == EOF) && (((helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
s=3;
}
 else if ((LA15_1 == ID)) {
s=4;
}
 else if ((LA15_1 == DOT || (LA15_1 >= COLON && LA15_1 <= EQUALS_ASSIGN) || LA15_1 == LEFT_PAREN || LA15_1 == LESS || LA15_1 == LEFT_SQUARE)) {
s=5;
}
input.seek(index15_1);
if (s >= 0) return s;
break;
case 1:
int LA15_4=input.LA(1);
int index15_4=input.index();
input.rewind();
s=-1;
if ((LA15_4 == MINUS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
s=6;
}
 else if ((LA15_4 == LEFT_PAREN)) {
s=7;
}
 else if ((LA15_4 == STRING || LA15_4 == BOOL || LA15_4 == DECIMAL || LA15_4 == PLUS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
s=8;
}
 else if ((LA15_4 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))))) {
s=9;
}
 else if ((LA15_4 == DOT || LA15_4 == COMMA || LA15_4 == AT) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
s=10;
}
input.seek(index15_4);
if (s >= 0) return s;
break;
case 2:
int LA15_9=input.LA(1);
int index15_9=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
s=10;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
s=8;
}
input.seek(index15_9);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),15,_s,input);
error(nvae);
throw nvae;
}
