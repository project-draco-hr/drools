{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA79_0=input.LA(1);
  int index79_0=input.index();
input.rewind();
s=-1;
if ((LA79_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
s=1;
}
 else if (((LA79_0 >= EQUALS && LA79_0 <= NOT_EQUALS))) {
s=2;
}
 else if ((LA79_0 == LEFT_PAREN)) {
s=8;
}
input.seek(index79_0);
if (s >= 0) return s;
break;
case 1:
int LA79_1=input.LA(1);
int index79_1=input.index();
input.rewind();
s=-1;
if ((LA79_1 == STRING || LA79_1 == BOOL || LA79_1 == DECIMAL || LA79_1 == LEFT_SQUARE || (LA79_1 >= NULL && LA79_1 <= FLOAT)) && (((helper.isPluggableEvaluator(false))))) {
s=9;
}
 else if ((LA79_1 == ID) && ((((helper.isPluggableEvaluator(false))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
s=10;
}
 else if ((LA79_1 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=19;
}
input.seek(index79_1);
if (s >= 0) return s;
break;
case 2:
int LA79_10=input.LA(1);
int index79_10=input.index();
input.rewind();
s=-1;
if ((LA79_10 == LEFT_SQUARE) && ((((helper.isPluggableEvaluator(false))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
s=20;
}
 else if ((LA79_10 == ID || LA79_10 == STRING || LA79_10 == BOOL || LA79_10 == DECIMAL || (LA79_10 >= NULL && LA79_10 <= FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=21;
}
 else if ((LA79_10 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=30;
}
 else if ((LA79_10 == DOT || LA79_10 == COMMA || LA79_10 == RIGHT_PAREN || (LA79_10 >= DOUBLE_PIPE && LA79_10 <= DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_10);
if (s >= 0) return s;
break;
case 3:
int LA79_19=input.LA(1);
int index79_19=input.index();
input.rewind();
s=-1;
if ((LA79_19 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=36;
}
 else if ((LA79_19 == STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=37;
}
 else if ((LA79_19 == PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=38;
}
 else if ((LA79_19 == MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=39;
}
 else if ((LA79_19 == DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=40;
}
 else if ((LA79_19 == HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=41;
}
 else if ((LA79_19 == FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=42;
}
 else if ((LA79_19 == BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=43;
}
 else if ((LA79_19 == NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=44;
}
 else if ((LA79_19 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=45;
}
 else if (((LA79_19 >= VT_COMPILATION_UNIT && LA79_19 <= SEMICOLON) || (LA79_19 >= DOT && LA79_19 <= DOT_STAR) || (LA79_19 >= COLON && LA79_19 <= COMMA)|| (LA79_19 >= RIGHT_PAREN && LA79_19 <= TimePeriod)|| (LA79_19 >= ACCUMULATE && LA79_19 <= RIGHT_SQUARE)|| (LA79_19 >= THEN && LA79_19 <= MISC)) && (((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_19);
if (s >= 0) return s;
break;
case 4:
int LA79_30=input.LA(1);
int index79_30=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=48;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=31;
}
input.seek(index79_30);
if (s >= 0) return s;
break;
case 5:
int LA79_36=input.LA(1);
int index79_36=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_36);
if (s >= 0) return s;
break;
case 6:
int LA79_37=input.LA(1);
int index79_37=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_37);
if (s >= 0) return s;
break;
case 7:
int LA79_38=input.LA(1);
int index79_38=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_38);
if (s >= 0) return s;
break;
case 8:
int LA79_39=input.LA(1);
int index79_39=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_39);
if (s >= 0) return s;
break;
case 9:
int LA79_40=input.LA(1);
int index79_40=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_40);
if (s >= 0) return s;
break;
case 10:
int LA79_41=input.LA(1);
int index79_41=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_41);
if (s >= 0) return s;
break;
case 11:
int LA79_42=input.LA(1);
int index79_42=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_42);
if (s >= 0) return s;
break;
case 12:
int LA79_43=input.LA(1);
int index79_43=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_43);
if (s >= 0) return s;
break;
case 13:
int LA79_44=input.LA(1);
int index79_44=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_44);
if (s >= 0) return s;
break;
case 14:
int LA79_45=input.LA(1);
int index79_45=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index79_45);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),79,_s,input);
error(nvae);
throw nvae;
}
