{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA79_0=input.LA(1);
  int index79_0=input.index();
input.rewind();
s=-1;
if ((LA79_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=1;
}
 else if (((LA79_0 >= EQUALS && LA79_0 <= NOT_EQUALS))) {
s=2;
}
 else if ((LA79_0 == LEFT_PAREN)) {
s=8;
}
input.seek(index79_0);
if (s >= 0) return s;
break;
case 1:
int LA79_1=input.LA(1);
int index79_1=input.index();
input.rewind();
s=-1;
if ((LA79_1 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=9;
}
 else if ((LA79_1 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
s=10;
}
 else if ((LA79_1 == STRING || LA79_1 == BOOL || LA79_1 == DECIMAL || LA79_1 == LEFT_SQUARE || (LA79_1 >= NULL && LA79_1 <= FLOAT)) && (((helper.isPluggableEvaluator(false))))) {
s=11;
}
input.seek(index79_1);
if (s >= 0) return s;
break;
case 2:
int LA79_9=input.LA(1);
int index79_9=input.index();
input.rewind();
s=-1;
if ((LA79_9 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=20;
}
 else if ((LA79_9 == STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=21;
}
 else if ((LA79_9 == PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=22;
}
 else if ((LA79_9 == MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=23;
}
 else if ((LA79_9 == DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=24;
}
 else if ((LA79_9 == HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=25;
}
 else if ((LA79_9 == FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=26;
}
 else if ((LA79_9 == BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=27;
}
 else if ((LA79_9 == NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=28;
}
 else if ((LA79_9 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=29;
}
 else if (((LA79_9 >= VT_COMPILATION_UNIT && LA79_9 <= SEMICOLON) || (LA79_9 >= DOT && LA79_9 <= DOT_STAR) || (LA79_9 >= AT && LA79_9 <= COMMA)|| (LA79_9 >= RIGHT_PAREN && LA79_9 <= TimePeriod)|| (LA79_9 >= ACCUMULATE && LA79_9 <= RIGHT_SQUARE)|| (LA79_9 >= THEN && LA79_9 <= MISC)) && (((helper.isPluggableEvaluator(false))))) {
s=11;
}
input.seek(index79_9);
if (s >= 0) return s;
break;
case 3:
int LA79_10=input.LA(1);
int index79_10=input.index();
input.rewind();
s=-1;
if ((LA79_10 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=32;
}
 else if ((LA79_10 == LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
s=33;
}
 else if ((LA79_10 == ID || LA79_10 == STRING || LA79_10 == BOOL || LA79_10 == DECIMAL || (LA79_10 >= NULL && LA79_10 <= FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=34;
}
 else if ((LA79_10 == DOT || LA79_10 == COMMA || LA79_10 == RIGHT_PAREN || (LA79_10 >= DOUBLE_PIPE && LA79_10 <= DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_10);
if (s >= 0) return s;
break;
case 4:
int LA79_20=input.LA(1);
int index79_20=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_20);
if (s >= 0) return s;
break;
case 5:
int LA79_21=input.LA(1);
int index79_21=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_21);
if (s >= 0) return s;
break;
case 6:
int LA79_22=input.LA(1);
int index79_22=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_22);
if (s >= 0) return s;
break;
case 7:
int LA79_23=input.LA(1);
int index79_23=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_23);
if (s >= 0) return s;
break;
case 8:
int LA79_24=input.LA(1);
int index79_24=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_24);
if (s >= 0) return s;
break;
case 9:
int LA79_25=input.LA(1);
int index79_25=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_25);
if (s >= 0) return s;
break;
case 10:
int LA79_26=input.LA(1);
int index79_26=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_26);
if (s >= 0) return s;
break;
case 11:
int LA79_27=input.LA(1);
int index79_27=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_27);
if (s >= 0) return s;
break;
case 12:
int LA79_28=input.LA(1);
int index79_28=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_28);
if (s >= 0) return s;
break;
case 13:
int LA79_29=input.LA(1);
int index79_29=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=43;
}
input.seek(index79_29);
if (s >= 0) return s;
break;
case 14:
int LA79_32=input.LA(1);
int index79_32=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=48;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=43;
}
input.seek(index79_32);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),79,_s,input);
error(nvae);
throw nvae;
}
