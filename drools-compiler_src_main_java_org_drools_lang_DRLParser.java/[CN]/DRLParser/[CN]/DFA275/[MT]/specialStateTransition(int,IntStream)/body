{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA275_6=input.LA(1);
  int index275_6=input.index();
input.rewind();
s=-1;
if ((LA275_6 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
s=4;
}
 else if ((LA275_6 == LEFT_SQUARE)) {
s=5;
}
 else if ((LA275_6 == EOF || LA275_6 == EQUALS_ASSIGN || LA275_6 == COMMA)) {
s=3;
}
input.seek(index275_6);
if (s >= 0) return s;
break;
case 1:
int LA275_2=input.LA(1);
int index275_2=input.index();
input.rewind();
s=-1;
if (((LA275_2 >= ID && LA275_2 <= DOT) || LA275_2 == LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
s=4;
}
 else if ((LA275_2 == LEFT_SQUARE)) {
s=5;
}
 else if ((LA275_2 == EOF || LA275_2 == EQUALS_ASSIGN || LA275_2 == COMMA)) {
s=3;
}
input.seek(index275_2);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),275,_s,input);
error(nvae);
throw nvae;
}
