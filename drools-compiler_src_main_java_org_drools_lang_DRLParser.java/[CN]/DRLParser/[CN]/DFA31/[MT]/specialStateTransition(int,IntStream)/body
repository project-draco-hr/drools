{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA31_0=input.LA(1);
  int index31_0=input.index();
input.rewind();
s=-1;
if ((LA31_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
s=1;
}
input.seek(index31_0);
if (s >= 0) return s;
break;
case 1:
int LA31_1=input.LA(1);
int index31_1=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))))) {
s=2;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP))))) {
s=3;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP))))) {
s=4;
}
 else if (((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
s=5;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP))))) {
s=6;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS))))) {
s=7;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE))))) {
s=8;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES))))) {
s=9;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {
s=10;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP))))) {
s=11;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE))))) {
s=12;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) {
s=13;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))))) {
s=14;
}
input.seek(index31_1);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),31,_s,input);
error(nvae);
throw nvae;
}
