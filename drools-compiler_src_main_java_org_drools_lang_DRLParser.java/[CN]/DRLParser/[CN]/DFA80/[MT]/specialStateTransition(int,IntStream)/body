{
  int _s=s;
switch (s) {
case 0:
    int LA80_6=input.LA(1);
  int index80_6=input.index();
input.rewind();
s=-1;
if ((LA80_6 == ID)) {
s=9;
}
 else if ((LA80_6 == STRING || (LA80_6 >= BOOL && LA80_6 <= INT) || (LA80_6 >= FLOAT && LA80_6 <= NULL))) {
s=10;
}
 else if ((LA80_6 == LEFT_PAREN)) {
s=11;
}
 else if ((LA80_6 == GRAVE_ACCENT)) {
s=1;
}
 else if ((LA80_6 == DOT || (LA80_6 >= COMMA && LA80_6 <= RIGHT_PAREN) || (LA80_6 >= DOUBLE_PIPE && LA80_6 <= DOUBLE_AMPER) || LA80_6 == LEFT_SQUARE) && ((validateRestr()))) {
s=5;
}
input.seek(index80_6);
if (s >= 0) return s;
break;
case 1:
int LA80_7=input.LA(1);
int index80_7=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index80_7);
if (s >= 0) return s;
break;
case 2:
int LA80_9=input.LA(1);
int index80_9=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index80_9);
if (s >= 0) return s;
break;
case 3:
int LA80_2=input.LA(1);
int index80_2=input.index();
input.rewind();
s=-1;
if ((LA80_2 == ID)) {
s=3;
}
 else if ((LA80_2 == LEFT_PAREN)) {
s=4;
}
 else if (((LA80_2 >= EQUAL && LA80_2 <= GRAVE_ACCENT)) && ((validateRestr()))) {
s=5;
}
input.seek(index80_2);
if (s >= 0) return s;
break;
case 4:
int LA80_10=input.LA(1);
int index80_10=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index80_10);
if (s >= 0) return s;
break;
case 5:
int LA80_4=input.LA(1);
int index80_4=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=5;
}
 else if ((true)) {
s=1;
}
input.seek(index80_4);
if (s >= 0) return s;
break;
case 6:
int LA80_3=input.LA(1);
int index80_3=input.index();
input.rewind();
s=-1;
if ((LA80_3 == DOT || LA80_3 == COLON || (LA80_3 >= EQUAL && LA80_3 <= NOT_EQUAL) || LA80_3 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA80_3 == ID)) {
s=6;
}
 else if ((LA80_3 == STRING || (LA80_3 >= BOOL && LA80_3 <= INT) || (LA80_3 >= FLOAT && LA80_3 <= NULL)) && ((validateRestr()))) {
s=5;
}
 else if ((LA80_3 == LEFT_PAREN)) {
s=7;
}
 else if ((LA80_3 == GRAVE_ACCENT)) {
s=8;
}
input.seek(index80_3);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),80,_s,input);
error(nvae);
throw nvae;
}
