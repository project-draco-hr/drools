{
  int _s=s;
switch (s) {
case 0:
    int LA84_10=input.LA(1);
  int index84_10=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index84_10);
if (s >= 0) return s;
break;
case 1:
int LA84_11=input.LA(1);
int index84_11=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index84_11);
if (s >= 0) return s;
break;
case 2:
int LA84_6=input.LA(1);
int index84_6=input.index();
input.rewind();
s=-1;
if ((LA84_6 == ID)) {
s=9;
}
 else if ((LA84_6 == STRING)) {
s=10;
}
 else if ((LA84_6 == INT)) {
s=11;
}
 else if ((LA84_6 == FLOAT)) {
s=12;
}
 else if ((LA84_6 == BOOL)) {
s=13;
}
 else if ((LA84_6 == NULL)) {
s=14;
}
 else if ((LA84_6 == LEFT_PAREN)) {
s=15;
}
 else if ((LA84_6 == DOT || (LA84_6 >= COMMA && LA84_6 <= RIGHT_PAREN) || (LA84_6 >= DOUBLE_PIPE && LA84_6 <= DOUBLE_AMPER) || LA84_6 == LEFT_SQUARE) && ((validateRestr()))) {
s=4;
}
 else if ((LA84_6 == GRAVE_ACCENT)) {
s=1;
}
input.seek(index84_6);
if (s >= 0) return s;
break;
case 3:
int LA84_2=input.LA(1);
int index84_2=input.index();
input.rewind();
s=-1;
if ((LA84_2 == ID)) {
s=3;
}
 else if (((LA84_2 >= EQUAL && LA84_2 <= GRAVE_ACCENT)) && ((validateRestr()))) {
s=4;
}
 else if ((LA84_2 == LEFT_PAREN)) {
s=5;
}
input.seek(index84_2);
if (s >= 0) return s;
break;
case 4:
int LA84_5=input.LA(1);
int index84_5=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index84_5);
if (s >= 0) return s;
break;
case 5:
int LA84_3=input.LA(1);
int index84_3=input.index();
input.rewind();
s=-1;
if ((LA84_3 == DOT || LA84_3 == COLON || (LA84_3 >= EQUAL && LA84_3 <= NOT_EQUAL) || LA84_3 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA84_3 == ID)) {
s=6;
}
 else if ((LA84_3 == STRING || (LA84_3 >= BOOL && LA84_3 <= INT) || (LA84_3 >= FLOAT && LA84_3 <= NULL)) && ((validateRestr()))) {
s=4;
}
 else if ((LA84_3 == LEFT_PAREN)) {
s=7;
}
 else if ((LA84_3 == GRAVE_ACCENT)) {
s=8;
}
input.seek(index84_3);
if (s >= 0) return s;
break;
case 6:
int LA84_14=input.LA(1);
int index84_14=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index84_14);
if (s >= 0) return s;
break;
case 7:
int LA84_13=input.LA(1);
int index84_13=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index84_13);
if (s >= 0) return s;
break;
case 8:
int LA84_9=input.LA(1);
int index84_9=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index84_9);
if (s >= 0) return s;
break;
case 9:
int LA84_12=input.LA(1);
int index84_12=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index84_12);
if (s >= 0) return s;
break;
case 10:
int LA84_7=input.LA(1);
int index84_7=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index84_7);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),84,_s,input);
error(nvae);
throw nvae;
}
