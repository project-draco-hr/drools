{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA73_0=input.LA(1);
  int index73_0=input.index();
input.rewind();
s=-1;
if ((LA73_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
s=1;
}
 else if (((LA73_0 >= EQUALS && LA73_0 <= NOT_EQUALS))) {
s=2;
}
 else if ((LA73_0 == LEFT_PAREN)) {
s=8;
}
input.seek(index73_0);
if (s >= 0) return s;
break;
case 1:
int LA73_1=input.LA(1);
int index73_1=input.index();
input.rewind();
s=-1;
if ((LA73_1 == STRING || LA73_1 == BOOL || (LA73_1 >= NULL && LA73_1 <= LEFT_SQUARE)) && (((helper.isPluggableEvaluator(false))))) {
s=9;
}
 else if ((LA73_1 == ID) && ((((helper.isPluggableEvaluator(false))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
s=10;
}
 else if ((LA73_1 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=19;
}
input.seek(index73_1);
if (s >= 0) return s;
break;
case 2:
int LA73_10=input.LA(1);
int index73_10=input.index();
input.rewind();
s=-1;
if ((LA73_10 == LEFT_SQUARE) && ((((helper.isPluggableEvaluator(false))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
s=20;
}
 else if ((LA73_10 == ID || LA73_10 == STRING || LA73_10 == BOOL || (LA73_10 >= NULL && LA73_10 <= FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=21;
}
 else if ((LA73_10 == LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=30;
}
 else if ((LA73_10 == DOT || LA73_10 == COMMA || LA73_10 == RIGHT_PAREN || (LA73_10 >= DOUBLE_PIPE && LA73_10 <= DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_10);
if (s >= 0) return s;
break;
case 3:
int LA73_19=input.LA(1);
int index73_19=input.index();
input.rewind();
s=-1;
if ((LA73_19 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=36;
}
 else if ((LA73_19 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=37;
}
 else if (((LA73_19 >= VT_COMPILATION_UNIT && LA73_19 <= SEMICOLON) || (LA73_19 >= DOT && LA73_19 <= DOT_STAR) || (LA73_19 >= AT && LA73_19 <= COMMA)|| (LA73_19 >= RIGHT_PAREN && LA73_19 <= NOT_EQUALS)|| (LA73_19 >= LEFT_SQUARE && LA73_19 <= MISC)) && (((helper.isPluggableEvaluator(false))))) {
s=31;
}
 else if ((LA73_19 == STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=39;
}
 else if ((LA73_19 == PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=40;
}
 else if ((LA73_19 == MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=41;
}
 else if ((LA73_19 == DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=42;
}
 else if ((LA73_19 == HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=43;
}
 else if ((LA73_19 == FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=44;
}
 else if ((LA73_19 == BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=45;
}
 else if ((LA73_19 == NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))) || ((helper.isPluggableEvaluator(false)))))) {
s=46;
}
input.seek(index73_19);
if (s >= 0) return s;
break;
case 4:
int LA73_30=input.LA(1);
int index73_30=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=48;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
s=31;
}
input.seek(index73_30);
if (s >= 0) return s;
break;
case 5:
int LA73_36=input.LA(1);
int index73_36=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_36);
if (s >= 0) return s;
break;
case 6:
int LA73_37=input.LA(1);
int index73_37=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_37);
if (s >= 0) return s;
break;
case 7:
int LA73_39=input.LA(1);
int index73_39=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_39);
if (s >= 0) return s;
break;
case 8:
int LA73_40=input.LA(1);
int index73_40=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_40);
if (s >= 0) return s;
break;
case 9:
int LA73_41=input.LA(1);
int index73_41=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_41);
if (s >= 0) return s;
break;
case 10:
int LA73_42=input.LA(1);
int index73_42=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_42);
if (s >= 0) return s;
break;
case 11:
int LA73_43=input.LA(1);
int index73_43=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_43);
if (s >= 0) return s;
break;
case 12:
int LA73_44=input.LA(1);
int index73_44=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_44);
if (s >= 0) return s;
break;
case 13:
int LA73_45=input.LA(1);
int index73_45=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_45);
if (s >= 0) return s;
break;
case 14:
int LA73_46=input.LA(1);
int index73_46=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
s=48;
}
 else if ((((helper.isPluggableEvaluator(false))))) {
s=31;
}
input.seek(index73_46);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),73,_s,input);
error(nvae);
throw nvae;
}
