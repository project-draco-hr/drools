{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA4_0=input.LA(1);
  int index4_0=input.index();
input.rewind();
s=-1;
if ((LA4_0 == ID) && ((((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) || ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) || ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
s=1;
}
input.seek(index4_0);
if (s >= 0) return s;
break;
case 1:
int LA4_1=input.LA(1);
int index4_1=input.index();
input.rewind();
s=-1;
if ((LA4_1 == MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {
s=2;
}
 else if ((LA4_1 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL))) || ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) || ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))))) {
s=3;
}
 else if ((LA4_1 == STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
s=4;
}
 else if ((LA4_1 == PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {
s=5;
}
 else if ((LA4_1 == DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {
s=6;
}
 else if ((LA4_1 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {
s=7;
}
 else if ((LA4_1 == BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {
s=8;
}
input.seek(index4_1);
if (s >= 0) return s;
break;
case 2:
int LA4_3=input.LA(1);
int index4_3=input.index();
input.rewind();
s=-1;
if ((((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))))) {
s=9;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))) {
s=10;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL))))) {
s=11;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))))) {
s=12;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))))) {
s=13;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE))))) {
s=14;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY))))) {
s=15;
}
input.seek(index4_3);
if (s >= 0) return s;
break;
case 3:
int LA4_4=input.LA(1);
int index4_4=input.index();
input.rewind();
s=-1;
if (((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
s=8;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE))))) {
s=14;
}
 else if ((((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY))))) {
s=15;
}
input.seek(index4_4);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),4,_s,input);
error(nvae);
throw nvae;
}
