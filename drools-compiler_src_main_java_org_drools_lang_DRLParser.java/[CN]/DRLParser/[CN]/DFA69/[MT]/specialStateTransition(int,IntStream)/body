{
  int _s=s;
switch (s) {
case 0:
    int LA69_9=input.LA(1);
  int index69_9=input.index();
input.rewind();
s=-1;
if ((input.LA(1) == LEFT_PAREN)) {
s=6;
}
 else if ((true)) {
s=3;
}
input.seek(index69_9);
if (s >= 0) return s;
break;
case 1:
int LA69_8=input.LA(1);
int index69_8=input.index();
input.rewind();
s=-1;
if ((input.LA(1) == LEFT_PAREN)) {
s=6;
}
 else if ((true)) {
s=3;
}
input.seek(index69_8);
if (s >= 0) return s;
break;
case 2:
int LA69_13=input.LA(1);
int index69_13=input.index();
input.rewind();
s=-1;
if ((input.LA(1) == LEFT_PAREN)) {
s=6;
}
 else if ((true)) {
s=3;
}
input.seek(index69_13);
if (s >= 0) return s;
break;
case 3:
int LA69_19=input.LA(1);
int index69_19=input.index();
input.rewind();
s=-1;
if ((input.LA(1) == LEFT_PAREN)) {
s=6;
}
 else if ((true)) {
s=3;
}
input.seek(index69_19);
if (s >= 0) return s;
break;
case 4:
int LA69_17=input.LA(1);
int index69_17=input.index();
input.rewind();
s=-1;
if ((input.LA(1) == LEFT_PAREN)) {
s=6;
}
 else if ((true)) {
s=3;
}
input.seek(index69_17);
if (s >= 0) return s;
break;
case 5:
int LA69_20=input.LA(1);
int index69_20=input.index();
input.rewind();
s=-1;
if ((input.LA(1) == LEFT_PAREN)) {
s=6;
}
 else if ((true)) {
s=3;
}
input.seek(index69_20);
if (s >= 0) return s;
break;
case 6:
int LA69_5=input.LA(1);
int index69_5=input.index();
input.rewind();
s=-1;
if ((input.LA(1) == LEFT_PAREN)) {
s=6;
}
 else if ((true)) {
s=3;
}
input.seek(index69_5);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),69,_s,input);
error(nvae);
throw nvae;
}
