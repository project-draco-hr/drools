{
  int _s=s;
switch (s) {
case 0:
    int LA69_4=input.LA(1);
  int index69_4=input.index();
input.rewind();
s=-1;
if ((synpred8())) {
s=6;
}
 else if ((true)) {
s=2;
}
input.seek(index69_4);
if (s >= 0) return s;
break;
case 1:
int LA69_3=input.LA(1);
int index69_3=input.index();
input.rewind();
s=-1;
if ((LA69_3 == COLON)) {
s=7;
}
 else if ((LA69_3 == LEFT_PAREN)) {
s=8;
}
 else if ((LA69_3 == ID)) {
s=9;
}
 else if ((LA69_3 == DOT)) {
s=10;
}
 else if ((LA69_3 == LEFT_SQUARE)) {
s=11;
}
 else if ((LA69_3 == RIGHT_PAREN) && (synpred8())) {
s=6;
}
 else if (((LA69_3 >= VT_COMPILATION_UNIT && LA69_3 <= SEMICOLON) || (LA69_3 >= DOT_STAR && LA69_3 <= STRING) || LA69_3 == COMMA || LA69_3 == AT || (LA69_3 >= EQUALS && LA69_3 <= NULL) || (LA69_3 >= RIGHT_SQUARE && LA69_3 <= MULTI_LINE_COMMENT)) && (synpred8())) {
s=5;
}
input.seek(index69_3);
if (s >= 0) return s;
break;
case 2:
int LA69_10=input.LA(1);
int index69_10=input.index();
input.rewind();
s=-1;
if ((LA69_10 == ID)) {
s=14;
}
 else if ((LA69_10 == RIGHT_PAREN) && (synpred8())) {
s=6;
}
 else if (((LA69_10 >= VT_COMPILATION_UNIT && LA69_10 <= SEMICOLON) || (LA69_10 >= DOT && LA69_10 <= STRING) || LA69_10 == COMMA || (LA69_10 >= AT && LA69_10 <= MULTI_LINE_COMMENT)) && (synpred8())) {
s=5;
}
 else if ((LA69_10 == LEFT_PAREN) && (synpred8())) {
s=15;
}
input.seek(index69_10);
if (s >= 0) return s;
break;
case 3:
int LA69_13=input.LA(1);
int index69_13=input.index();
input.rewind();
s=-1;
if ((synpred8())) {
s=15;
}
 else if ((true)) {
s=2;
}
input.seek(index69_13);
if (s >= 0) return s;
break;
case 4:
int LA69_7=input.LA(1);
int index69_7=input.index();
input.rewind();
s=-1;
if ((LA69_7 == ID)) {
s=12;
}
 else if ((LA69_7 == LEFT_PAREN)) {
s=13;
}
 else if ((LA69_7 == RIGHT_PAREN) && (synpred8())) {
s=6;
}
 else if (((LA69_7 >= VT_COMPILATION_UNIT && LA69_7 <= SEMICOLON) || (LA69_7 >= DOT && LA69_7 <= STRING) || LA69_7 == COMMA || (LA69_7 >= AT && LA69_7 <= MULTI_LINE_COMMENT)) && (synpred8())) {
s=5;
}
input.seek(index69_7);
if (s >= 0) return s;
break;
case 5:
int LA69_9=input.LA(1);
int index69_9=input.index();
input.rewind();
s=-1;
if ((synpred8())) {
s=6;
}
 else if ((true)) {
s=2;
}
input.seek(index69_9);
if (s >= 0) return s;
break;
case 6:
int LA69_11=input.LA(1);
int index69_11=input.index();
input.rewind();
s=-1;
if ((LA69_11 == RIGHT_SQUARE)) {
s=16;
}
 else if ((LA69_11 == RIGHT_PAREN) && (synpred8())) {
s=6;
}
 else if (((LA69_11 >= VT_COMPILATION_UNIT && LA69_11 <= STRING) || LA69_11 == COMMA || (LA69_11 >= AT && LA69_11 <= LEFT_SQUARE) || (LA69_11 >= THEN && LA69_11 <= MULTI_LINE_COMMENT)) && (synpred8())) {
s=5;
}
 else if ((LA69_11 == LEFT_PAREN) && (synpred8())) {
s=15;
}
input.seek(index69_11);
if (s >= 0) return s;
break;
case 7:
int LA69_8=input.LA(1);
int index69_8=input.index();
input.rewind();
s=-1;
if ((synpred8())) {
s=6;
}
 else if ((true)) {
s=2;
}
input.seek(index69_8);
if (s >= 0) return s;
break;
case 8:
int LA69_1=input.LA(1);
int index69_1=input.index();
input.rewind();
s=-1;
if ((LA69_1 == ID)) {
s=3;
}
 else if ((LA69_1 == LEFT_PAREN)) {
s=4;
}
 else if (((LA69_1 >= VT_COMPILATION_UNIT && LA69_1 <= SEMICOLON) || (LA69_1 >= DOT && LA69_1 <= STRING) || LA69_1 == COMMA || (LA69_1 >= AT && LA69_1 <= MULTI_LINE_COMMENT)) && (synpred8())) {
s=5;
}
 else if ((LA69_1 == RIGHT_PAREN) && (synpred8())) {
s=6;
}
input.seek(index69_1);
if (s >= 0) return s;
break;
case 9:
int LA69_16=input.LA(1);
int index69_16=input.index();
input.rewind();
s=-1;
if ((LA69_16 == LEFT_PAREN)) {
s=20;
}
 else if ((LA69_16 == LEFT_SQUARE)) {
s=11;
}
 else if ((LA69_16 == RIGHT_PAREN) && (synpred8())) {
s=6;
}
 else if (((LA69_16 >= VT_COMPILATION_UNIT && LA69_16 <= STRING) || LA69_16 == COMMA || (LA69_16 >= AT && LA69_16 <= NULL) || (LA69_16 >= RIGHT_SQUARE && LA69_16 <= MULTI_LINE_COMMENT)) && (synpred8())) {
s=5;
}
input.seek(index69_16);
if (s >= 0) return s;
break;
case 10:
int LA69_14=input.LA(1);
int index69_14=input.index();
input.rewind();
s=-1;
if ((LA69_14 == LEFT_SQUARE)) {
s=11;
}
 else if ((LA69_14 == LEFT_PAREN)) {
s=20;
}
 else if ((LA69_14 == DOT)) {
s=10;
}
 else if ((LA69_14 == RIGHT_PAREN) && (synpred8())) {
s=6;
}
 else if (((LA69_14 >= VT_COMPILATION_UNIT && LA69_14 <= ID) || (LA69_14 >= DOT_STAR && LA69_14 <= STRING) || LA69_14 == COMMA || (LA69_14 >= AT && LA69_14 <= NULL) || (LA69_14 >= RIGHT_SQUARE && LA69_14 <= MULTI_LINE_COMMENT)) && (synpred8())) {
s=5;
}
input.seek(index69_14);
if (s >= 0) return s;
break;
case 11:
int LA69_12=input.LA(1);
int index69_12=input.index();
input.rewind();
s=-1;
if ((LA69_12 == DOT)) {
s=17;
}
 else if ((LA69_12 == LEFT_SQUARE)) {
s=18;
}
 else if ((LA69_12 == LEFT_PAREN)) {
s=19;
}
 else if ((LA69_12 == RIGHT_PAREN) && (synpred8())) {
s=6;
}
 else if (((LA69_12 >= VT_COMPILATION_UNIT && LA69_12 <= ID) || (LA69_12 >= DOT_STAR && LA69_12 <= STRING) || LA69_12 == COMMA || (LA69_12 >= AT && LA69_12 <= NULL) || (LA69_12 >= RIGHT_SQUARE && LA69_12 <= MULTI_LINE_COMMENT)) && (synpred8())) {
s=5;
}
input.seek(index69_12);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),69,_s,input);
error(nvae);
throw nvae;
}
