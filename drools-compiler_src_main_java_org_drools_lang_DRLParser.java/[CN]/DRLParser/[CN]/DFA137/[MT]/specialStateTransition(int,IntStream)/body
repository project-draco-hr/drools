{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA137_0=input.LA(1);
  int index137_0=input.index();
input.rewind();
s=-1;
if ((LA137_0 == LEFT_PAREN) && (synpred27_DRL())) {
s=1;
}
 else if ((LA137_0 == LESS) && (synpred28_DRL())) {
s=2;
}
 else if ((LA137_0 == STRING) && (synpred29_DRL())) {
s=3;
}
 else if ((LA137_0 == DECIMAL) && (synpred29_DRL())) {
s=4;
}
 else if ((LA137_0 == HEX) && (synpred29_DRL())) {
s=5;
}
 else if ((LA137_0 == FLOAT) && (synpred29_DRL())) {
s=6;
}
 else if ((LA137_0 == BOOL) && (synpred29_DRL())) {
s=7;
}
 else if ((LA137_0 == NULL) && (synpred29_DRL())) {
s=8;
}
 else if ((LA137_0 == ID)) {
s=9;
}
 else if ((LA137_0 == LEFT_SQUARE)) {
s=10;
}
input.seek(index137_0);
if (s >= 0) return s;
break;
case 1:
int LA137_9=input.LA(1);
int index137_9=input.index();
input.rewind();
s=-1;
if (((synpred30_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))))) {
s=11;
}
 else if (((synpred31_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NEW)))))) {
s=12;
}
 else if ((((synpred32_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) || (synpred32_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) || (synpred32_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))|| (synpred32_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))|| (synpred32_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))|| (synpred32_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))|| (synpred32_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))|| (synpred32_DRL() && ((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))) {
s=13;
}
 else if ((synpred35_DRL())) {
s=14;
}
input.seek(index137_9);
if (s >= 0) return s;
break;
case 2:
int LA137_10=input.LA(1);
int index137_10=input.index();
input.rewind();
s=-1;
if ((synpred33_DRL())) {
s=15;
}
 else if ((synpred34_DRL())) {
s=16;
}
input.seek(index137_10);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),137,_s,input);
error(nvae);
throw nvae;
}
