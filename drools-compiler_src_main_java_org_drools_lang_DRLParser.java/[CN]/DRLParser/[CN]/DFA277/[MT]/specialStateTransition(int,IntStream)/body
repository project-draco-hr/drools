{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA277_3=input.LA(1);
  int index277_3=input.index();
input.rewind();
s=-1;
if ((LA277_3 == LEFT_SQUARE)) {
s=4;
}
 else if (((LA277_3 >= ID && LA277_3 <= DOT) || LA277_3 == LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
s=5;
}
 else if ((LA277_3 == EOF || LA277_3 == EQUALS_ASSIGN || LA277_3 == COMMA)) {
s=2;
}
input.seek(index277_3);
if (s >= 0) return s;
break;
case 1:
int LA277_6=input.LA(1);
int index277_6=input.index();
input.rewind();
s=-1;
if ((LA277_6 == ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
s=5;
}
 else if ((LA277_6 == LEFT_SQUARE)) {
s=4;
}
 else if ((LA277_6 == EOF || LA277_6 == EQUALS_ASSIGN || LA277_6 == COMMA)) {
s=2;
}
input.seek(index277_6);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),277,_s,input);
error(nvae);
throw nvae;
}
