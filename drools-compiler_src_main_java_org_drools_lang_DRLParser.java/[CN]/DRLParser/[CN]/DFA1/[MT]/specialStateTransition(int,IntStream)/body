{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA1_0=input.LA(1);
  int index1_0=input.index();
input.rewind();
s=-1;
if ((LA1_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))) || ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))))) {
s=1;
}
 else if ((LA1_0 == EOF)) {
s=2;
}
input.seek(index1_0);
if (s >= 0) return s;
break;
case 1:
int LA1_1=input.LA(1);
int index1_1=input.index();
input.rewind();
s=-1;
if ((LA1_1 == MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)))))) {
s=3;
}
 else if ((LA1_1 == ID) && ((((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) || ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) || ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))))) {
s=4;
}
 else if ((LA1_1 == PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
s=5;
}
 else if ((LA1_1 == DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
s=6;
}
 else if ((LA1_1 == LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {
s=7;
}
 else if ((LA1_1 == BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {
s=8;
}
 else if ((LA1_1 == STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {
s=9;
}
input.seek(index1_1);
if (s >= 0) return s;
break;
case 2:
int LA1_4=input.LA(1);
int index1_4=input.index();
input.rewind();
s=-1;
if ((((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE))))) {
s=10;
}
 else if (((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))|| ((helper.validateLT(1,DroolsSoftKeywords.IMPORT) && helper.validateLT(2,DroolsSoftKeywords.FUNCTION)) && ((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))))) {
s=9;
}
input.seek(index1_4);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),1,_s,input);
error(nvae);
throw nvae;
}
