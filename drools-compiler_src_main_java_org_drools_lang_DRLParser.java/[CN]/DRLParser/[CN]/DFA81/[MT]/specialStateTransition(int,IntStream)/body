{
  int _s=s;
switch (s) {
case 0:
    int LA81_11=input.LA(1);
  int index81_11=input.index();
input.rewind();
s=-1;
if ((LA81_11 == ID)) {
s=16;
}
 else if ((LA81_11 == EQUAL) && (synpred12())) {
s=17;
}
 else if ((LA81_11 == GREATER) && (synpred12())) {
s=18;
}
 else if ((LA81_11 == GREATER_EQUAL) && (synpred12())) {
s=19;
}
 else if ((LA81_11 == LESS) && (synpred12())) {
s=20;
}
 else if ((LA81_11 == LESS_EQUAL) && (synpred12())) {
s=21;
}
 else if ((LA81_11 == NOT_EQUAL) && (synpred12())) {
s=22;
}
 else if ((LA81_11 == GRAVE_ACCENT) && (synpred12())) {
s=23;
}
 else if ((LA81_11 == LEFT_PAREN)) {
s=24;
}
input.seek(index81_11);
if (s >= 0) return s;
break;
case 1:
int LA81_35=input.LA(1);
int index81_35=input.index();
input.rewind();
s=-1;
if ((synpred12())) {
s=48;
}
 else if ((true)) {
s=1;
}
input.seek(index81_35);
if (s >= 0) return s;
break;
case 2:
int LA81_26=input.LA(1);
int index81_26=input.index();
input.rewind();
s=-1;
if ((synpred12())) {
s=48;
}
 else if ((true)) {
s=1;
}
input.seek(index81_26);
if (s >= 0) return s;
break;
case 3:
int LA81_36=input.LA(1);
int index81_36=input.index();
input.rewind();
s=-1;
if ((synpred12())) {
s=48;
}
 else if ((true)) {
s=1;
}
input.seek(index81_36);
if (s >= 0) return s;
break;
case 4:
int LA81_24=input.LA(1);
int index81_24=input.index();
input.rewind();
s=-1;
if ((synpred12())) {
s=48;
}
 else if ((true)) {
s=1;
}
input.seek(index81_24);
if (s >= 0) return s;
break;
case 5:
int LA81_16=input.LA(1);
int index81_16=input.index();
input.rewind();
s=-1;
if ((LA81_16 == DOT || LA81_16 == COLON || (LA81_16 >= EQUAL && LA81_16 <= NOT_EQUAL) || LA81_16 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA81_16 == ID)) {
s=47;
}
 else if ((LA81_16 == STRING || (LA81_16 >= BOOL && LA81_16 <= INT) || (LA81_16 >= FLOAT && LA81_16 <= NULL)) && (synpred12())) {
s=48;
}
 else if ((LA81_16 == LEFT_PAREN)) {
s=49;
}
 else if ((LA81_16 == GRAVE_ACCENT)) {
s=50;
}
input.seek(index81_16);
if (s >= 0) return s;
break;
case 6:
int LA81_3=input.LA(1);
int index81_3=input.index();
input.rewind();
s=-1;
if ((LA81_3 == DOT || LA81_3 == COLON || (LA81_3 >= EQUAL && LA81_3 <= NOT_EQUAL) || LA81_3 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA81_3 == ID)) {
s=12;
}
 else if ((LA81_3 == STRING || (LA81_3 >= BOOL && LA81_3 <= INT) || (LA81_3 >= FLOAT && LA81_3 <= NULL)) && (synpred12())) {
s=13;
}
 else if ((LA81_3 == LEFT_PAREN)) {
s=14;
}
 else if ((LA81_3 == GRAVE_ACCENT)) {
s=15;
}
input.seek(index81_3);
if (s >= 0) return s;
break;
case 7:
int LA81_25=input.LA(1);
int index81_25=input.index();
input.rewind();
s=-1;
if ((synpred12())) {
s=48;
}
 else if ((true)) {
s=1;
}
input.seek(index81_25);
if (s >= 0) return s;
break;
case 8:
int LA81_12=input.LA(1);
int index81_12=input.index();
input.rewind();
s=-1;
if ((LA81_12 == ID)) {
s=25;
}
 else if ((LA81_12 == STRING || (LA81_12 >= BOOL && LA81_12 <= INT) || (LA81_12 >= FLOAT && LA81_12 <= NULL))) {
s=26;
}
 else if ((LA81_12 == LEFT_PAREN)) {
s=27;
}
 else if ((LA81_12 == GRAVE_ACCENT)) {
s=1;
}
 else if ((LA81_12 == LEFT_SQUARE) && (synpred12())) {
s=28;
}
 else if ((LA81_12 == DOT) && (synpred12())) {
s=29;
}
 else if ((LA81_12 == DOUBLE_PIPE) && (synpred12())) {
s=30;
}
 else if ((LA81_12 == DOUBLE_AMPER) && (synpred12())) {
s=31;
}
 else if ((LA81_12 == COMMA) && (synpred12())) {
s=32;
}
 else if ((LA81_12 == RIGHT_PAREN) && (synpred12())) {
s=33;
}
input.seek(index81_12);
if (s >= 0) return s;
break;
case 9:
int LA81_2=input.LA(1);
int index81_2=input.index();
input.rewind();
s=-1;
if ((LA81_2 == ID)) {
s=3;
}
 else if ((LA81_2 == EQUAL) && (synpred12())) {
s=4;
}
 else if ((LA81_2 == GREATER) && (synpred12())) {
s=5;
}
 else if ((LA81_2 == GREATER_EQUAL) && (synpred12())) {
s=6;
}
 else if ((LA81_2 == LESS) && (synpred12())) {
s=7;
}
 else if ((LA81_2 == LESS_EQUAL) && (synpred12())) {
s=8;
}
 else if ((LA81_2 == NOT_EQUAL) && (synpred12())) {
s=9;
}
 else if ((LA81_2 == GRAVE_ACCENT) && (synpred12())) {
s=10;
}
 else if ((LA81_2 == LEFT_PAREN)) {
s=11;
}
input.seek(index81_2);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),81,_s,input);
error(nvae);
throw nvae;
}
