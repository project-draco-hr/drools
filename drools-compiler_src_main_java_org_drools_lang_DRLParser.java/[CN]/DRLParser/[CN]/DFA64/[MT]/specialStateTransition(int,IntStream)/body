{
  int _s=s;
switch (s) {
case 0:
    int LA64_3=input.LA(1);
  int index64_3=input.index();
input.rewind();
s=-1;
if ((LA64_3 == RIGHT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=5;
}
 else if (((LA64_3 >= VT_COMPILATION_UNIT && LA64_3 <= STRING) || LA64_3 == COMMA || (LA64_3 >= AT && LA64_3 <= MULTI_LINE_COMMENT)) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=3;
}
 else if ((LA64_3 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=6;
}
input.seek(index64_3);
if (s >= 0) return s;
break;
case 1:
int LA64_5=input.LA(1);
int index64_5=input.index();
input.rewind();
s=-1;
if ((LA64_5 == ID || LA64_5 == COMMA) && ((validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) {
s=9;
}
 else if ((LA64_5 == RIGHT_PAREN) && ((validateIdentifierKey(DroolsSoftKeywords.RESULT)))) {
s=10;
}
input.seek(index64_5);
if (s >= 0) return s;
break;
case 2:
int LA64_0=input.LA(1);
int index64_0=input.index();
input.rewind();
s=-1;
if ((LA64_0 == ID) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=1;
}
input.seek(index64_0);
if (s >= 0) return s;
break;
case 3:
int LA64_6=input.LA(1);
int index64_6=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) {
s=9;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.RESULT)))) {
s=10;
}
input.seek(index64_6);
if (s >= 0) return s;
break;
case 4:
int LA64_1=input.LA(1);
int index64_1=input.index();
input.rewind();
s=-1;
if ((LA64_1 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=2;
}
input.seek(index64_1);
if (s >= 0) return s;
break;
case 5:
int LA64_4=input.LA(1);
int index64_4=input.index();
input.rewind();
s=-1;
if (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) {
s=7;
}
 else if (((validateIdentifierKey(DroolsSoftKeywords.RESULT)))) {
s=8;
}
input.seek(index64_4);
if (s >= 0) return s;
break;
case 6:
int LA64_2=input.LA(1);
int index64_2=input.index();
input.rewind();
s=-1;
if (((LA64_2 >= VT_COMPILATION_UNIT && LA64_2 <= STRING) || LA64_2 == COMMA || (LA64_2 >= AT && LA64_2 <= MULTI_LINE_COMMENT)) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=3;
}
 else if ((LA64_2 == LEFT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=4;
}
 else if ((LA64_2 == RIGHT_PAREN) && (((validateIdentifierKey(DroolsSoftKeywords.REVERSE)) || (validateIdentifierKey(DroolsSoftKeywords.RESULT))))) {
s=5;
}
input.seek(index64_2);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),64,_s,input);
error(nvae);
throw nvae;
}
