{
  int _s=s;
switch (s) {
case 0:
    int LA83_12=input.LA(1);
  int index83_12=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index83_12);
if (s >= 0) return s;
break;
case 1:
int LA83_13=input.LA(1);
int index83_13=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index83_13);
if (s >= 0) return s;
break;
case 2:
int LA83_2=input.LA(1);
int index83_2=input.index();
input.rewind();
s=-1;
if ((LA83_2 == ID)) {
s=3;
}
 else if (((LA83_2 >= EQUAL && LA83_2 <= GRAVE_ACCENT)) && ((validateRestr()))) {
s=4;
}
 else if ((LA83_2 == LEFT_PAREN)) {
s=5;
}
input.seek(index83_2);
if (s >= 0) return s;
break;
case 3:
int LA83_9=input.LA(1);
int index83_9=input.index();
input.rewind();
s=-1;
if ((LA83_9 == DOT || LA83_9 == COLON || (LA83_9 >= EQUAL && LA83_9 <= NOT_EQUAL) || LA83_9 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA83_9 == ID)) {
s=27;
}
 else if ((LA83_9 == GRAVE_ACCENT)) {
s=28;
}
 else if ((LA83_9 == LEFT_PAREN)) {
s=29;
}
 else if ((LA83_9 == STRING || (LA83_9 >= BOOL && LA83_9 <= INT) || (LA83_9 >= FLOAT && LA83_9 <= NULL)) && ((validateRestr()))) {
s=4;
}
input.seek(index83_9);
if (s >= 0) return s;
break;
case 4:
int LA83_3=input.LA(1);
int index83_3=input.index();
input.rewind();
s=-1;
if ((LA83_3 == DOT || LA83_3 == COLON || (LA83_3 >= EQUAL && LA83_3 <= NOT_EQUAL) || LA83_3 == LEFT_SQUARE)) {
s=1;
}
 else if ((LA83_3 == ID)) {
s=6;
}
 else if ((LA83_3 == GRAVE_ACCENT)) {
s=7;
}
 else if ((LA83_3 == LEFT_PAREN)) {
s=8;
}
 else if ((LA83_3 == STRING || (LA83_3 >= BOOL && LA83_3 <= INT) || (LA83_3 >= FLOAT && LA83_3 <= NULL)) && ((validateRestr()))) {
s=4;
}
input.seek(index83_3);
if (s >= 0) return s;
break;
case 5:
int LA83_10=input.LA(1);
int index83_10=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index83_10);
if (s >= 0) return s;
break;
case 6:
int LA83_5=input.LA(1);
int index83_5=input.index();
input.rewind();
s=-1;
if ((LA83_5 == ID)) {
s=9;
}
 else if ((LA83_5 == LEFT_PAREN)) {
s=10;
}
 else if (((LA83_5 >= EQUAL && LA83_5 <= GRAVE_ACCENT)) && ((validateRestr()))) {
s=4;
}
input.seek(index83_5);
if (s >= 0) return s;
break;
case 7:
int LA83_6=input.LA(1);
int index83_6=input.index();
input.rewind();
s=-1;
if ((LA83_6 == LEFT_PAREN)) {
s=11;
}
 else if ((LA83_6 == ID)) {
s=12;
}
 else if ((LA83_6 == STRING || (LA83_6 >= BOOL && LA83_6 <= INT) || (LA83_6 >= FLOAT && LA83_6 <= NULL))) {
s=13;
}
 else if ((LA83_6 == GRAVE_ACCENT)) {
s=1;
}
 else if ((LA83_6 == DOT || (LA83_6 >= COMMA && LA83_6 <= RIGHT_PAREN) || (LA83_6 >= DOUBLE_PIPE && LA83_6 <= DOUBLE_AMPER) || LA83_6 == LEFT_SQUARE) && ((validateRestr()))) {
s=4;
}
input.seek(index83_6);
if (s >= 0) return s;
break;
case 8:
int LA83_16=input.LA(1);
int index83_16=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index83_16);
if (s >= 0) return s;
break;
case 9:
int LA83_17=input.LA(1);
int index83_17=input.index();
input.rewind();
s=-1;
if (((validateRestr()))) {
s=4;
}
 else if ((true)) {
s=1;
}
input.seek(index83_17);
if (s >= 0) return s;
break;
}
if (backtracking > 0) {
failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),83,_s,input);
error(nvae);
throw nvae;
}
