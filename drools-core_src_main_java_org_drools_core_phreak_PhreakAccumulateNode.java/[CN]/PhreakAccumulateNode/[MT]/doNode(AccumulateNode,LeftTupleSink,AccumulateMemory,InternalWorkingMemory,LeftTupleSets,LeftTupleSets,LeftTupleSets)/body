{
  boolean useLeftMemory=true;
  RightTupleSets srcRightTuples=am.getBetaMemory().getStagedRightTuples();
  LeftTupleSets tempLeftTuples=new LeftTupleSets();
  if (srcLeftTuples.getDeleteFirst() != null) {
    doLeftDeletes(accNode,am,wm,srcLeftTuples,trgLeftTuples);
  }
  if (srcRightTuples.getDeleteFirst() != null) {
    doRightDeletes(accNode,am,wm,srcRightTuples,tempLeftTuples);
  }
  if (srcLeftTuples.getUpdateFirst() != null) {
    RuleNetworkEvaluator.dpUpdatesReorderLeftMemory(am.getBetaMemory(),srcLeftTuples);
  }
  if (srcRightTuples.getUpdateFirst() != null) {
    RuleNetworkEvaluator.dpUpdatesReorderRightMemory(am.getBetaMemory(),srcRightTuples);
  }
  if (srcLeftTuples.getUpdateFirst() != null) {
    doLeftUpdates(accNode,sink,am,wm,srcLeftTuples,tempLeftTuples);
  }
  if (srcRightTuples.getUpdateFirst() != null) {
    doRightUpdates(accNode,sink,am,wm,srcRightTuples,tempLeftTuples);
  }
  if (srcRightTuples.getInsertFirst() != null) {
    doRightInserts(accNode,sink,am,wm,srcRightTuples,tempLeftTuples);
  }
  if (srcLeftTuples.getInsertFirst() != null) {
    doLeftInserts(accNode,sink,am,wm,srcLeftTuples,tempLeftTuples);
  }
  Accumulate accumulate=accNode.getAccumulate();
  for (LeftTuple leftTuple=tempLeftTuples.getInsertFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    evaluateResultConstraints(accNode,sink,accumulate,leftTuple,leftTuple.getPropagationContext(),wm,am,(AccumulateContext)leftTuple.getObject(),useLeftMemory,trgLeftTuples,stagedLeftTuples);
    leftTuple.clearStaged();
    leftTuple=next;
  }
  for (LeftTuple leftTuple=tempLeftTuples.getUpdateFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    evaluateResultConstraints(accNode,sink,accumulate,leftTuple,leftTuple.getPropagationContext(),wm,am,(AccumulateContext)leftTuple.getObject(),useLeftMemory,trgLeftTuples,stagedLeftTuples);
    leftTuple.clearStaged();
    leftTuple=next;
  }
  srcRightTuples.resetAll();
  srcLeftTuples.resetAll();
}
