{
  Accumulate accumulate=accNode.getAccumulate();
  BetaMemory bm=am.getBetaMemory();
  TupleMemory ltm=bm.getLeftTupleMemory();
  TupleMemory rtm=bm.getRightTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=accNode.getRawConstraints();
  boolean leftTupleMemoryEnabled=accNode.isLeftTupleMemoryEnabled();
  for (LeftTuple leftTuple=srcLeftTuples.getInsertFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    boolean useLeftMemory=leftTupleMemoryEnabled || RuleNetworkEvaluator.useLeftMemory(accNode,leftTuple);
    if (useLeftMemory) {
      ltm.add(leftTuple);
    }
    AccumulateContext accresult=new AccumulateContext();
    leftTuple.setContextObject(accresult);
    accresult.context=accumulate.createContext();
    accumulate.init(am.workingMemoryContext,accresult.context,leftTuple,wm);
    constraints.updateFromTuple(contextEntry,wm,leftTuple);
    FastIterator rightIt=accNode.getRightIterator(rtm);
    for (RightTuple rightTuple=accNode.getFirstRightTuple(leftTuple,rtm,null,rightIt); rightTuple != null; ) {
      RightTuple nextRightTuple=(RightTuple)rightIt.next(rightTuple);
      InternalFactHandle handle=rightTuple.getFactHandle();
      if (constraints.isAllowedCachedLeft(contextEntry,handle)) {
        addMatch(accNode,accumulate,leftTuple,rightTuple,null,null,wm,am,accresult,useLeftMemory);
        if (!useLeftMemory && accNode.isRightInputIsRiaNode()) {
          rtm.remove(rightTuple);
        }
      }
      rightTuple=nextRightTuple;
    }
    leftTuple.clearStaged();
    trgLeftTuples.addInsert(leftTuple);
    constraints.resetTuple(contextEntry);
    leftTuple=next;
  }
  constraints.resetTuple(contextEntry);
}
