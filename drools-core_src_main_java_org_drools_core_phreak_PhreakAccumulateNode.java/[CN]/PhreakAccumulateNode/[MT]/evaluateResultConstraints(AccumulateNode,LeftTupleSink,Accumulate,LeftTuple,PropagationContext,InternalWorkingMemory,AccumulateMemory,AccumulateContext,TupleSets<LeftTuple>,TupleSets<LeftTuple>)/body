{
  Object result=accumulate.getResult(memory.workingMemoryContext,accctx.context,leftTuple,workingMemory);
  if (result == null) {
    return;
  }
  if (accctx.getResultFactHandle() == null) {
    final InternalFactHandle handle=accNode.createResultFactHandle(context,workingMemory,leftTuple,result);
    accctx.setResultFactHandle(handle);
    accctx.setResultLeftTuple(sink.createLeftTuple(handle,leftTuple,sink));
  }
 else {
    accctx.getResultFactHandle().setObject(result);
  }
  AlphaNodeFieldConstraint[] resultConstraints=accNode.getResultConstraints();
  BetaConstraints resultBinder=accNode.getResultBinder();
  boolean isAllowed=true;
  for (int i=0, length=resultConstraints.length; i < length; i++) {
    if (!resultConstraints[i].isAllowed(accctx.resultFactHandle,workingMemory)) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    resultBinder.updateFromTuple(memory.resultsContext,workingMemory,leftTuple);
    if (!resultBinder.isAllowedCachedLeft(memory.resultsContext,accctx.getResultFactHandle())) {
      isAllowed=false;
    }
    resultBinder.resetTuple(memory.resultsContext);
  }
  LeftTuple childLeftTuple=accctx.getResultLeftTuple();
  if (accctx.getPropagationContext() != null) {
    childLeftTuple.setPropagationContext(accctx.getPropagationContext());
    accctx.setPropagationContext(null);
  }
 else {
    childLeftTuple.setPropagationContext(leftTuple.getPropagationContext());
  }
  if (accctx.propagated) {
switch (childLeftTuple.getStagedType()) {
case LeftTuple.INSERT:
      stagedLeftTuples.removeInsert(childLeftTuple);
    break;
case LeftTuple.UPDATE:
  stagedLeftTuples.removeUpdate(childLeftTuple);
break;
}
if (isAllowed) {
trgLeftTuples.addUpdate(childLeftTuple);
}
 else {
trgLeftTuples.addDelete(childLeftTuple);
accctx.propagated=false;
}
}
 else if (isAllowed) {
trgLeftTuples.addInsert(childLeftTuple);
accctx.propagated=true;
}
}
