{
  if (childLeftTuple == null) {
    for (; rightTuple != null; rightTuple=(RightTuple)rightIt.next(rightTuple)) {
      if (constraints.isAllowedCachedLeft(bm.getContext(),rightTuple.getFactHandleForEvaluation())) {
        addMatch(accNode,accumulate,leftTuple,rightTuple,null,null,wm,am,accctx,true);
      }
    }
  }
 else {
    boolean isDirty=false;
    for (; rightTuple != null; rightTuple=(RightTuple)rightIt.next(rightTuple)) {
      if (constraints.isAllowedCachedLeft(bm.getContext(),rightTuple.getFactHandleForEvaluation())) {
        if (childLeftTuple == null || childLeftTuple.getRightParent() != rightTuple) {
          addMatch(accNode,accumulate,leftTuple,rightTuple,childLeftTuple,null,wm,am,accctx,true);
        }
 else {
          LeftTuple temp=childLeftTuple.getHandleNext();
          childLeftTuple.reAddRight();
          childLeftTuple=temp;
          isDirty=accumulate.hasRequiredDeclarations();
        }
      }
 else       if (childLeftTuple != null && childLeftTuple.getRightParent() == rightTuple) {
        LeftTuple temp=childLeftTuple.getHandleNext();
        removeMatch(accNode,accumulate,rightTuple,childLeftTuple,wm,am,accctx,false);
        childLeftTuple=temp;
        isDirty=!accumulate.supportsReverse();
      }
    }
    if (isDirty) {
      reaccumulateForLeftTuple(accNode,accumulate,leftTuple,wm,am,accctx);
    }
  }
}
