{
  AbstractKieModule kModule=(AbstractKieModule)kieProject.getKieModuleForKBase(kBaseModel.getName());
  PackageBuilderConfiguration pconf=new PackageBuilderConfiguration(kieProject.getClonedClassLoader());
  pconf.setCompilationCache(kModule.getCompilationCache(kBaseModel.getName()));
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder(pconf);
  CompositeKnowledgeBuilder ckbuilder=kbuilder.batch();
  for (  String include : getTransitiveIncludes(kieProject,kBaseModel)) {
    if (StringUtils.isEmpty(include)) {
      continue;
    }
    InternalKieModule includeModule=kieProject.getKieModuleForKBase(include);
    if (includeModule == null) {
      log.error("Unable to build KieBase, could not find include: " + include);
      return null;
    }
    addFiles(ckbuilder,kieProject.getKieBaseModel(include),includeModule);
  }
  addFiles(ckbuilder,kBaseModel,kModule);
  ckbuilder.build();
  if (kbuilder.hasErrors()) {
    for (    KnowledgeBuilderError error : kbuilder.getErrors()) {
      messages.addMessage(error);
    }
    log.error("Unable to build KieBaseModel:" + kBaseModel.getName() + "\n"+ kbuilder.getErrors().toString());
  }
  kModule.cacheKnowledgeBuilderForKieBase(kBaseModel.getName(),kbuilder);
  kModule.cacheResultsForKieBase(kBaseModel.getName(),messages);
  return kbuilder;
}
