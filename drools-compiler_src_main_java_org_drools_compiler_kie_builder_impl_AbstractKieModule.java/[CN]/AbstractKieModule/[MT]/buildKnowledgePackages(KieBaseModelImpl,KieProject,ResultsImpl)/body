{
  AbstractKieModule kModule=(AbstractKieModule)kieProject.getKieModuleForKBase(kBaseModel.getName());
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder(getBuilderConfiguration(kBaseModel,kieProject,kModule));
  CompositeKnowledgeBuilder ckbuilder=kbuilder.batch();
  Set<Asset> assets=new HashSet<Asset>();
  boolean allIncludesAreValid=true;
  for (  String include : kieProject.getTransitiveIncludes(kBaseModel)) {
    if (StringUtils.isEmpty(include)) {
      continue;
    }
    InternalKieModule includeModule=kieProject.getKieModuleForKBase(include);
    if (includeModule == null) {
      String text="Unable to build KieBase, could not find include: " + include;
      log.error(text);
      messages.addMessage(Message.Level.ERROR,KieModuleModelImpl.KMODULE_SRC_PATH,text);
      allIncludesAreValid=false;
      continue;
    }
    addFiles(assets,kieProject.getKieBaseModel(include),includeModule);
  }
  if (!allIncludesAreValid) {
    return null;
  }
  addFiles(assets,kBaseModel,kModule);
  if (assets.isEmpty()) {
    if (kModule instanceof FileKieModule) {
      log.warn("No files found for KieBase " + kBaseModel.getName() + ", searching folder "+ kModule.getFile());
    }
 else {
      log.warn("No files found for KieBase " + kBaseModel.getName());
    }
  }
 else {
    for (    Asset asset : assets) {
      asset.kmodule.addResourceToCompiler(ckbuilder,kBaseModel,asset.name);
    }
  }
  ckbuilder.build();
  if (kbuilder.hasErrors()) {
    for (    KnowledgeBuilderError error : kbuilder.getErrors()) {
      messages.addMessage(error);
    }
    log.error("Unable to build KieBaseModel:" + kBaseModel.getName() + "\n"+ kbuilder.getErrors().toString());
  }
  if (kbuilder.hasResults(ResultSeverity.WARNING)) {
    for (    KnowledgeBuilderResult warn : kbuilder.getResults(ResultSeverity.WARNING)) {
      messages.addMessage(warn);
    }
    log.warn("Warning : " + kBaseModel.getName() + "\n"+ kbuilder.getResults(ResultSeverity.WARNING).toString());
  }
  kModule.cacheKnowledgeBuilderForKieBase(kBaseModel.getName(),kbuilder);
  kModule.cacheResultsForKieBase(kBaseModel.getName(),messages);
  return kbuilder;
}
