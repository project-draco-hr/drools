{
  AssetItem asset=getRepo().loadGlobalArea().addAsset("testUpdateContentForShareableAsset","test content");
  AssetItem linkedAsset=getRepo().loadDefaultPackage().addAssetImportedFromGlobalArea(asset.getName());
  assertFalse(asset.getCreator().equals(""));
  assertFalse(linkedAsset.getCreator().equals(""));
  linkedAsset.updateContent("test content");
  linkedAsset.checkin("yeah");
  assertFalse(linkedAsset.getLastContributor().equals(""));
  assertFalse(asset.getLastContributor().equals(""));
  linkedAsset.updateContent("new rule content");
  assertEquals("new rule content",linkedAsset.getContent());
  assertTrue(linkedAsset.getNode().getSession().hasPendingChanges());
  assertTrue(asset.getNode().getSession().hasPendingChanges());
  asset.checkin("yeah !");
  assertFalse(asset.getNode().getSession().hasPendingChanges());
  assertEquals("yeah !",asset.getCheckinComment());
  try {
    linkedAsset.checkin("yeah linked !");
    fail("Did not get expected exception: Unable to checkin");
  }
 catch (  RulesRepositoryException e) {
  }
  AssetItem prev=(AssetItem)asset.getPrecedingVersion();
  assertEquals("test content",prev.getContent());
  assertFalse("yeah !".equals(prev.getCheckinComment()));
  asset=getDefaultPackage().loadAsset("testUpdateContentForShareableAsset");
  VersionIterator it=asset.getNode().getVersionHistory().getAllVersions();
  assertTrue(it.hasNext());
  while (it.hasNext()) {
    Version n=it.nextVersion();
    AssetItem item=new AssetItem(asset.getRulesRepository(),n);
    assertNotNull(item);
  }
}
