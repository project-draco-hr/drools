{
  String str="";
  str+="package org.drools.test  \n";
  str+="import org.drools.Cheese \n";
  str+="query cheeses \n";
  str+="    stilton : Cheese(type == 'stilton') \n";
  str+="    cheddar : Cheese(type == 'cheddar', price == stilton.price) \n";
  str+="end\n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  kbase=SerializationHelper.serializeObject(kbase);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  Cheese stilton1=new Cheese("stilton",1);
  Cheese cheddar1=new Cheese("cheddar",1);
  Cheese stilton2=new Cheese("stilton",2);
  Cheese cheddar2=new Cheese("cheddar",2);
  Cheese stilton3=new Cheese("stilton",3);
  Cheese cheddar3=new Cheese("cheddar",3);
  Set set=new HashSet();
  List list=new ArrayList();
  list.add(stilton1);
  list.add(cheddar1);
  set.add(list);
  list=new ArrayList();
  list.add(stilton2);
  list.add(cheddar2);
  set.add(list);
  list=new ArrayList();
  list.add(stilton3);
  list.add(cheddar3);
  set.add(list);
  ksession.insert(stilton1);
  ksession.insert(stilton2);
  ksession.insert(stilton3);
  ksession.insert(cheddar1);
  ksession.insert(cheddar2);
  ksession.insert(cheddar3);
  org.drools.runtime.rule.QueryResults results=ksession.getQueryResults("cheeses");
  assertEquals(3,results.size());
  assertEquals(2,results.getIdentifiers().length);
  Set newSet=new HashSet();
  for (  org.drools.runtime.rule.QueryResultsRow result : results) {
    list=new ArrayList();
    list.add(result.get("stilton"));
    list.add(result.get("cheddar"));
    newSet.add(list);
  }
  assertEquals(set,newSet);
  FlatQueryResults flatResults=new FlatQueryResults(((StatefulKnowledgeSessionImpl)ksession).session.getQueryResults("cheeses"));
  assertEquals(3,flatResults.size());
  assertEquals(2,flatResults.getIdentifiers().length);
  newSet=new HashSet();
  for (  org.drools.runtime.rule.QueryResultsRow result : flatResults) {
    list=new ArrayList();
    list.add(result.get("stilton"));
    list.add(result.get("cheddar"));
    newSet.add(list);
  }
  assertEquals(set,newSet);
}
