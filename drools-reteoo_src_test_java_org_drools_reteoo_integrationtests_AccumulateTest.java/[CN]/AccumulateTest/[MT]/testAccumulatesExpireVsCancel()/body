{
  String drl="package com.sample;\n" + "\n" + "global java.util.List list; \n"+ ""+ "declare FactTest\n"+ " @role( event ) \n"+ "end\n"+ " \n"+ "rule \"A500 test\"\n"+ "when\n"+ " accumulate (\n"+ " $d : FactTest() over window:time(1m), $tot : count($d); $tot > 0 )\n"+ "then\n"+ " System.out.println( $tot ); \n"+ " list.add( $tot.intValue() ); \n "+ "end\n"+ "\n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(drl.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.hasErrors());
  KieBaseConfiguration kbConf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kbConf.setOption(EventProcessingOption.STREAM);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kbConf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  KieSessionConfiguration ksConf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  ksConf.setOption(ClockTypeOption.get("pseudo"));
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(ksConf,null);
  ArrayList list=new ArrayList();
  ksession.setGlobal("list",list);
  FactType ft=kbase.getFactType("com.sample","FactTest");
  ksession.insert(ft.newInstance());
  ksession.fireAllRules();
  ksession.insert(ft.newInstance());
  ksession.fireAllRules();
  ksession.insert(ft.newInstance());
  ksession.fireAllRules();
  SessionPseudoClock clock=ksession.getSessionClock();
  clock.advanceTime(1,TimeUnit.MINUTES);
  ksession.fireAllRules();
  assertFalse(list.contains(0));
}
