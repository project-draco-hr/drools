{
  String str="";
  str+="package org.drools.compiler.test  \n";
  str+="import org.drools.compiler.Person \n";
  str+="query peeps( String $name, int $age ) \n";
  str+="    not $p2 : Person( $name := name, age > $age ) \n";
  str+="end\n";
  KnowledgeBase kbase=loadKnowledgeBaseFromString(str);
  List<ObjectTypeNode> nodes=((KnowledgeBaseImpl)kbase).getRete().getObjectTypeNodes();
  ObjectTypeNode node=null;
  for (  ObjectTypeNode n : nodes) {
    if (((ClassObjectType)n.getObjectType()).getClassType() == DroolsQuery.class) {
      node=n;
      break;
    }
  }
  StatefulKnowledgeSessionImpl wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession());
  AlphaNode alphanode=(AlphaNode)node.getSinkPropagator().getSinks()[0];
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)alphanode.getSinkPropagator().getSinks()[0];
  NotNode n=(NotNode)liaNode.getSinkPropagator().getSinks()[0];
  DoubleNonIndexSkipBetaConstraints c=(DoubleNonIndexSkipBetaConstraints)n.getRawConstraints();
  assertTrue(c.isIndexed());
  BetaMemory bm=(BetaMemory)wm.getNodeMemory(n);
  System.out.println(bm.getLeftTupleMemory().getClass());
  System.out.println(bm.getRightTupleMemory().getClass());
  assertTrue(bm.getLeftTupleMemory() instanceof TupleIndexHashTable);
  assertTrue(bm.getRightTupleMemory() instanceof TupleIndexHashTable);
  final Map<String,Integer> map=new HashMap<String,Integer>();
  map.put("inserted",new Integer(0));
  map.put("deleted",new Integer(0));
  map.put("updated",new Integer(0));
  wm.openLiveQuery("peeps",new Object[]{Variable.v,99},new ViewChangedEventListener(){
    @Override public void rowInserted(    Row row){
      System.out.println("inserted");
      Integer integer=map.get("inserted");
      map.put("inserted",integer.intValue() + 1);
    }
    @Override public void rowDeleted(    Row row){
      System.out.println("deleted");
      Integer integer=map.get("deleted");
      map.put("deleted",integer.intValue() + 1);
    }
    @Override public void rowUpdated(    Row row){
      System.out.println("updated");
      Integer integer=map.get("updated");
      map.put("updated",integer.intValue() + 1);
    }
  }
);
  System.out.println("inserted: " + map.get("inserted"));
  System.out.println("deleted: " + map.get("deleted"));
  System.out.println("updated: " + map.get("updated"));
  Map<String,InternalFactHandle> peeps=new HashMap<String,InternalFactHandle>();
  Person p=null;
  InternalFactHandle fh=null;
  int max=3;
  assertEquals(1,map.get("inserted").intValue());
  assertEquals(0,map.get("deleted").intValue());
  assertEquals(0,map.get("updated").intValue());
  for (int i=0; i < max; i++) {
    p=new Person("x" + i,100);
    fh=(InternalFactHandle)wm.insert(p);
    wm.fireAllRules();
    peeps.put(p.getName(),fh);
  }
  assertEquals(1,map.get("inserted").intValue());
  assertEquals(1,map.get("deleted").intValue());
  assertEquals(0,map.get("updated").intValue());
  for (int i=0; i < (max - 1); i++) {
    fh=peeps.get("x" + i);
    p=(Person)fh.getObject();
    p.setAge(90);
    wm.update(fh,p);
    wm.fireAllRules();
    assertEquals("i=" + i,1,map.get("inserted").intValue());
  }
  assertEquals(1,map.get("inserted").intValue());
  assertEquals(1,map.get("deleted").intValue());
  assertEquals(0,map.get("updated").intValue());
  for (int i=0; i < (max - 1); i++) {
    fh=peeps.get("x" + i);
    p=(Person)fh.getObject();
    p.setAge(102);
    wm.update(fh,p);
    wm.fireAllRules();
    assertEquals("i=" + i,1,map.get("inserted").intValue());
  }
  assertEquals(1,map.get("inserted").intValue());
  assertEquals(1,map.get("deleted").intValue());
  assertEquals(0,map.get("updated").intValue());
  for (int i=(max - 2); i >= 0; i--) {
    fh=peeps.get("x" + i);
    p=(Person)fh.getObject();
    p.setAge(90);
    wm.update(fh,p);
    wm.fireAllRules();
    assertEquals("i=" + i,1,map.get("inserted").intValue());
  }
  fh=peeps.get("x" + (max - 1));
  p=(Person)fh.getObject();
  p.setAge(90);
  wm.update(fh,p);
  wm.fireAllRules();
  assertEquals(2,map.get("inserted").intValue());
}
