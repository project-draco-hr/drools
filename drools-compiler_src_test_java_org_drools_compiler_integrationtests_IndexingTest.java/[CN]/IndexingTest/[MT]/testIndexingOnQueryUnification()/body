{
  String str="";
  str+="package org.drools.compiler.test  \n";
  str+="import org.drools.compiler.Person \n";
  str+="query peeps( String $name, String $likes, String $street) \n";
  str+="    $p : Person( $name := name, $likes := likes, $street := address.street ) \n";
  str+="end\n";
  KnowledgeBase kbase=loadKnowledgeBaseFromString(str);
  List<ObjectTypeNode> nodes=((KnowledgeBaseImpl)kbase).getRete().getObjectTypeNodes();
  ObjectTypeNode node=null;
  for (  ObjectTypeNode n : nodes) {
    if (((ClassObjectType)n.getObjectType()).getClassType() == DroolsQuery.class) {
      node=n;
      break;
    }
  }
  InternalWorkingMemory wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession());
  AlphaNode alphanode=(AlphaNode)node.getObjectSinkPropagator().getSinks()[0];
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)alphanode.getObjectSinkPropagator().getSinks()[0];
  JoinNode j=(JoinNode)liaNode.getSinkPropagator().getSinks()[0];
  TripleNonIndexSkipBetaConstraints c=(TripleNonIndexSkipBetaConstraints)j.getRawConstraints();
  assertTrue(c.isIndexed());
  BetaMemory bm=(BetaMemory)wm.getNodeMemory(j);
  assertTrue(bm.getLeftTupleMemory() instanceof TupleIndexHashTable);
  assertTrue(bm.getRightTupleMemory() instanceof TupleIndexHashTable);
}
