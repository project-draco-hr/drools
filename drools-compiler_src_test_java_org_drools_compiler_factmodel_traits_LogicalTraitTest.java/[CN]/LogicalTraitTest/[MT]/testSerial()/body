{
  String drl="package org.drools.test; \n" + "import org.drools.core.factmodel.traits.*; \n" + "import org.drools.core.factmodel.traits.Trait; \n"+ ""+ "global java.util.List list; \n"+ ""+ "declare trait X end \n"+ "declare trait Z end \n"+ ""+ "declare Y \n"+ "@Traitable( ) \n"+ "end \n"+ ""+ ""+ "rule Don \n"+ "when \n"+ "then \n"+ "  Y y = new Y( ); \n"+ "  don( y, X.class ); \n"+ "  don( y, Z.class ); \n"+ "end \n"+ ""+ "";
  KnowledgeBuilder kbuilderImpl=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilderImpl.add(ResourceFactory.newByteArrayResource(drl.getBytes()),ResourceType.DRL);
  if (kbuilderImpl.hasErrors()) {
    fail(kbuilderImpl.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilderImpl.getKnowledgePackages());
  TraitFactory.setMode(mode,kbase);
  StatefulKnowledgeSession ks=kbase.newStatefulKnowledgeSession();
  ArrayList list=new ArrayList();
  ks.setGlobal("list",list);
  ks.fireAllRules();
  for (  Object o : ks.getObjects()) {
    System.out.println(o);
  }
  try {
    ks=SerializationHelper.getSerialisedStatefulKnowledgeSession(ks,true);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  for (  Object o : ks.getObjects()) {
    System.out.println(o);
  }
}
