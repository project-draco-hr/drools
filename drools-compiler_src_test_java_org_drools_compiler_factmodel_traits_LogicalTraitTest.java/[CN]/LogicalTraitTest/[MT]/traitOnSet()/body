{
  String drl="package org.drools.test; \n" + "import org.drools.core.factmodel.traits.*; \n" + "import org.drools.core.factmodel.traits.Trait; \n"+ ""+ "global java.util.List list; \n"+ ""+ "declare trait T \n"+ "@Trait( logical=true ) \n"+ "  fld : S \n"+ "end \n"+ ""+ "declare trait U \n"+ "@Trait( logical=true ) \n"+ "  fld : R \n"+ "end \n"+ ""+ "declare trait S \n"+ "@Trait( logical=true ) \n"+ "end \n"+ ""+ "declare trait R \n"+ "@Trait( logical=true ) \n"+ "end \n"+ ""+ "declare K \n"+ "@propertyReactive \n"+ "@Traitable( logical = true ) \n"+ "  id : int @key\n"+ "  fld : K \n"+ "end \n"+ ""+ "rule Don \n"+ "when \n"+ "then \n"+ "  System.out.println( \"Create K !\" ); \n"+ "  K k = new K(1); "+ "  don( k, T.class ); \n"+ "  modify ( k ) { \n"+ "    setFld( new K(99) ); \n"+ "  } \n"+ "end \n"+ ""+ "rule Check \n"+ "salience 1 \n"+ "when \n"+ "  $x : K( fld isA S, fld not isA R ) \n"+ "then \n"+ "  System.out.println( \"K detected\" + $x );"+ "  list.add( \"ok1\" );"+ "end \n"+ ""+ "rule Check2 \n"+ "salience 1 \n"+ "when \n"+ "  String() \n"+ "  $x : K( fld isA S ) \n"+ "then \n"+ "  System.out.println( \"Add U - R\" );"+ "  don( $x, U.class ); \n"+ "end \n"+ ""+ "";
  KnowledgeBuilder kbuilderImpl=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilderImpl.add(ResourceFactory.newByteArrayResource(drl.getBytes()),ResourceType.DRL);
  if (kbuilderImpl.hasErrors()) {
    fail(kbuilderImpl.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilderImpl.getKnowledgePackages());
  TraitFactory.setMode(mode,kbase);
  StatefulKnowledgeSession ks=kbase.newStatefulKnowledgeSession();
  ArrayList list=new ArrayList();
  ks.setGlobal("list",list);
  int n=ks.fireAllRules();
  System.out.println("Rules fired " + n);
  System.out.println("------------- ROUND TRIP -------------");
  try {
    ks=SerializationHelper.getSerialisedStatefulKnowledgeSession(ks,true);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  ks.insert("go");
  ks.fireAllRules();
  assertEquals(Arrays.asList("ok1"),list);
}
