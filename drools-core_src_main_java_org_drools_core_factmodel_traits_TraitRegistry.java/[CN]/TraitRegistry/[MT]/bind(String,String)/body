{
  ClassDefinition traitDef=getTrait(trait);
  if (traitDef == null) {
    throw new UnsupportedOperationException(" Unable to apply trait " + trait + " to class "+ traitable+ " : not a trait ");
  }
  ClassDefinition traitableDef=getTraitable(traitable);
  if (traitableDef == null) {
    throw new UnsupportedOperationException(" Unable to apply trait " + trait + " to class "+ traitable+ " : not a traitable ");
  }
  int j=0;
  BitSet bitmask=new BitSet(traitDef.getFields().size());
  for (  FactField field : traitDef.getFields()) {
    String alias=((FieldDefinition)field).resolveAlias();
    FieldDefinition concreteField=traitableDef.getFieldByAlias(alias);
    if (concreteField != null) {
      if (!traitableDef.isFullTraiting() && !concreteField.getType().isAssignableFrom(field.getType())) {
        throw new UnsupportedOperationException(" Unable to apply trait " + trait + " to class "+ traitable+ " :"+ " trait field "+ field.getName()+ ":"+ ((FieldDefinition)field).getTypeName()+ " is incompatible with"+ " concrete hard field "+ concreteField.getName()+ ":"+ concreteField.getTypeName()+ ". Consider enabling logical traiting"+ " mode using @Traitable( logical = true )");
      }
      bitmask.set(j);
    }
    j++;
  }
  return bitmask;
}
