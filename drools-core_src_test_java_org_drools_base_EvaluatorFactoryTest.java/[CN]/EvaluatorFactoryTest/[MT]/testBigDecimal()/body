{
  final ValueType type=ValueType.determineValueType(BigDecimal.class);
  assertSame(type,ValueType.BIG_DECIMAL_TYPE);
  Collection col=new ArrayList();
  col.add(new BigDecimal(42));
  col.add(new BigDecimal(45));
  final Object[][] data={{new BigDecimal(42),"==",new BigDecimal(42),Boolean.TRUE},{new BigDecimal(42),"<",new BigDecimal(43),Boolean.TRUE},{new BigDecimal(42),">=",new BigDecimal(41),Boolean.TRUE},{new BigDecimal(42),"!=",new BigDecimal(41),Boolean.TRUE},{new BigDecimal(42),">",new BigDecimal(41),Boolean.TRUE},{new BigDecimal(42),"<=",new BigDecimal(42),Boolean.TRUE},{new BigDecimal(42),">",new BigDecimal(100),Boolean.FALSE},{new BigDecimal(42),"==",null,Boolean.FALSE},{new BigDecimal(42),"!=",null,Boolean.TRUE},{null,"==",new BigDecimal(42),Boolean.FALSE},{null,"!=",new BigDecimal(42),Boolean.TRUE},{new BigDecimal(42),"memberOf",col,Boolean.TRUE},{new BigDecimal(43),"memberOf",col,Boolean.FALSE},{null,"memberOf",col,Boolean.FALSE},{new BigDecimal(42),"memberOf",null,Boolean.FALSE},{new BigDecimal(42),"not memberOf",col,Boolean.FALSE},{new BigDecimal(43),"not memberOf",col,Boolean.TRUE},{null,"not memberOf",col,Boolean.TRUE},{new BigDecimal(42),"not memberOf",null,Boolean.FALSE}};
  runEvaluatorTest(data,ValueType.BIG_DECIMAL_TYPE);
}
