{
  HierarchyEncoderImpl encoder=new HierarchyEncoderImpl();
  encoder.encode("A",Collections.EMPTY_LIST);
  encoder.encode("B",Arrays.asList("A"));
  encoder.encode("C",Arrays.asList("A"));
  encoder.encode("D",Arrays.asList("A"));
  encoder.encode("E",Arrays.asList("B"));
  encoder.encode("F",Arrays.asList("C"));
  encoder.encode("G",Arrays.asList("D"));
  encoder.encode("H",Arrays.asList("D"));
  encoder.encode("I",Arrays.asList("E"));
  encoder.encode("J",Arrays.asList("F"));
  encoder.encode("K",Arrays.asList("G"));
  encoder.encode("L",Arrays.asList("I","J"));
  List<String>[] sups=new List[]{encoder.ancestorValues("A"),encoder.ancestorValues("B"),encoder.ancestorValues("C"),encoder.ancestorValues("D"),encoder.ancestorValues("E"),encoder.ancestorValues("F"),encoder.ancestorValues("G"),encoder.ancestorValues("H"),encoder.ancestorValues("I"),encoder.ancestorValues("J"),encoder.ancestorValues("K"),encoder.ancestorValues("L")};
  for (int j='A'; j <= 'L'; j++) {
    for (int k='A'; k <= 'L'; k++) {
      String x="" + (char)j;
      String y="" + (char)k;
      BitSet xcode=encoder.getCode(x);
      BitSet ycode=encoder.getCode(y);
      int subOf=encoder.superset(xcode,ycode);
      if (x.equals(y)) {
        assertEquals(0,subOf);
      }
 else       if (sups[j - 'A'].contains(y)) {
        assertEquals(1,subOf);
      }
 else {
        assertEquals(-1,subOf);
      }
    }
  }
}
