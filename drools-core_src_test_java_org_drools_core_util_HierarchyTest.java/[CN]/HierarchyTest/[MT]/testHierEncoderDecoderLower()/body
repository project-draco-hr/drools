{
  HierarchyEncoder encoder=new HierarchyEncoderImpl();
  encoder.encode("Thing",Collections.EMPTY_LIST);
  encoder.encode("A",Arrays.asList("Thing"));
  encoder.encode("Z",Arrays.asList("Thing"));
  encoder.encode("B",Arrays.asList("A","Z"));
  encoder.encode("C",Arrays.asList("A","Z"));
  encoder.encode("N",Arrays.asList("B","C"));
  encoder.encode("P",Arrays.asList("Thing"));
  encoder.encode("Q",Arrays.asList("Thing"));
  encoder.encode("R",Arrays.asList("Thing"));
  encoder.encode("S",Arrays.asList("R"));
  encoder.encode("T",Arrays.asList("C","Q"));
  encoder.encode("M",Arrays.asList("R","Q"));
  encoder.encode("O",Arrays.asList("M","P"));
  System.out.println(encoder);
  Collection x;
  x=encoder.lowerBorder(encoder.metMembersCode(Arrays.asList("B")));
  System.out.println("GCS " + x);
  assertEquals(1,x.size());
  assertTrue(x.contains("B"));
  x=encoder.immediateChildren(encoder.metMembersCode(Arrays.asList("B")));
  System.out.println("GCS " + x);
  assertEquals(1,x.size());
  assertTrue(x.contains("N"));
  x=encoder.lowerBorder(encoder.metMembersCode(Arrays.asList("Z","Q")));
  System.out.println("GCS " + x);
  assertEquals(1,x.size());
  assertTrue(x.contains("T"));
  x=encoder.immediateChildren(encoder.metMembersCode(Arrays.asList("Z","Q")));
  System.out.println("GCS " + x);
  assertEquals(1,x.size());
  assertTrue(x.contains("T"));
  x=encoder.lowerBorder(encoder.metMembersCode(Arrays.asList("A","Z")));
  System.out.println("GCS " + x);
  assertEquals(2,x.size());
  assertTrue(x.contains("B"));
  assertTrue(x.contains("C"));
  x=encoder.immediateChildren(encoder.metMembersCode(Arrays.asList("A","Z")));
  System.out.println("GCS " + x);
  assertEquals(2,x.size());
  assertTrue(x.contains("B"));
  assertTrue(x.contains("C"));
  x=encoder.lowerBorder(encoder.metMembersCode(Arrays.asList("Thing")));
  System.out.println("GCS " + x);
  assertEquals(1,x.size());
  assertTrue(x.contains("Thing"));
  x=encoder.immediateChildren(encoder.metMembersCode(Arrays.asList("Thing")));
  System.out.println("GCS " + x);
  assertEquals(5,x.size());
  assertTrue(x.contains("A"));
  assertTrue(x.contains("Z"));
  assertTrue(x.contains("P"));
  assertTrue(x.contains("Q"));
  assertTrue(x.contains("R"));
}
