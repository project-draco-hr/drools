{
  HierarchyEncoder<String> encoder=new HierarchyEncoderImpl<String>();
  BitSet ak=encoder.encode("A",Collections.EMPTY_LIST);
  BitSet bk=encoder.encode("B",Arrays.asList("A"));
  BitSet ck=encoder.encode("C",Arrays.asList("A"));
  BitSet dk=encoder.encode("D",Arrays.asList("B"));
  BitSet ek=encoder.encode("E",Arrays.asList("B"));
  BitSet fk=encoder.encode("F",Arrays.asList("C"));
  BitSet gk=encoder.encode("G",Arrays.asList("C"));
  BitSet hk=encoder.encode("H",Arrays.asList("D"));
  BitSet ik=encoder.encode("I",Arrays.asList("D"));
  BitSet jk=encoder.encode("J",Arrays.asList("E","F"));
  BitSet kk=encoder.encode("K",Arrays.asList("E","F"));
  BitSet lk=encoder.encode("L",Arrays.asList("G"));
  BitSet mk=encoder.encode("M",Arrays.asList("G"));
  BitSet nk=encoder.encode("N",Arrays.asList("I","L"));
  BitSet ok=encoder.encode("O",Arrays.asList("H","M"));
  System.out.println(encoder);
  CodedHierarchy<String> types=new IndexedTypeHierarchy<String>("A",new BitSet(),"ZZZZ",encoder.getBottom());
  types.addMember("A",ak);
  types.addMember("c",ck);
  types.addMember("f",fk);
  types.addMember("j",jk);
  types.addMember("k",kk);
  types.addMember("n",nk);
  types.addMember("o",ok);
  types.addMember("h",hk);
  System.out.println(types);
  assertEquals(Arrays.asList("c","h"),types.children("A"));
  assertEquals(Arrays.asList("f","n","o"),types.children("c"));
  assertEquals(Arrays.asList("j","k"),types.children("f"));
  assertEquals(Arrays.asList("ZZZZ"),types.children("j"));
  assertEquals(Arrays.asList("ZZZZ"),types.children("k"));
  assertEquals(Arrays.asList("ZZZZ"),types.children("n"));
  assertEquals(Arrays.asList("ZZZZ"),types.children("o"));
  assertEquals(Arrays.asList("o"),types.children("h"));
  assertEquals(Arrays.asList(),types.children("ZZZZ"));
  assertEquals(Arrays.asList(),types.parents("a"));
  assertEquals(Arrays.asList("A"),types.parents("c"));
  assertEquals(Arrays.asList("c"),types.parents("f"));
  assertEquals(Arrays.asList("f"),types.parents("j"));
  assertEquals(Arrays.asList("f"),types.parents("k"));
  assertEquals(Arrays.asList("c"),types.parents("n"));
  assertEquals(Arrays.asList("c","h"),types.parents("o"));
  assertEquals(Arrays.asList("A"),types.parents("h"));
  assertEquals(Arrays.asList("j","k","n","o"),types.parents("ZZZZ"));
  BitSet pk=encoder.encode("P",Arrays.asList("O"));
  types.addMember("p",pk);
  System.out.println(types);
  assertEquals(Arrays.asList("o"),types.parents("p"));
  assertEquals(Arrays.asList("j","k","n","p"),types.parents("ZZZZ"));
  assertEquals(Arrays.asList("ZZZZ"),types.children("p"));
  types.removeMember("o");
  System.out.println(types);
  assertEquals(Arrays.asList("c","h"),types.parents("p"));
  assertEquals(Arrays.asList("f","n","p"),types.children("c"));
  assertEquals(Arrays.asList("j","k"),types.children("f"));
  assertEquals(Arrays.asList("ZZZZ"),types.children("n"));
  assertEquals(Arrays.asList("ZZZZ"),types.children("p"));
  assertEquals(Arrays.asList("p"),types.children("h"));
}
