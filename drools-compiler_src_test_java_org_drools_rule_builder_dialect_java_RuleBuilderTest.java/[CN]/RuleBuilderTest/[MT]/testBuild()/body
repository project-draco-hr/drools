{
  final DrlParser parser=new DrlParser();
  final PackageBuilder pkgBuilder=new PackageBuilder();
  pkgBuilder.addPackage(new PackageDescr("org.drools"));
  Package pkg=pkgBuilder.getPackage();
  final PackageDescr pkgDescr=parser.parse(new InputStreamReader(getClass().getResourceAsStream("nestedConditionalElements.drl")));
  assertFalse(parser.getErrors().toString(),parser.hasErrors());
  final RuleDescr ruleDescr=(RuleDescr)pkgDescr.getRules().get(0);
  final String ruleClassName="RuleClassName.java";
  ruleDescr.setClassName(ruleClassName);
  ruleDescr.addAttribute(new AttributeDescr("dialect","java"));
  final TypeResolver typeResolver=new ClassTypeResolver(new HashSet(),this.getClass().getClassLoader());
  typeResolver.addImport(pkgDescr.getName() + ".*");
  typeResolver.addImport("java.lang.*");
  final RuleBuilder builder=new RuleBuilder();
  final PackageBuilderConfiguration conf=pkgBuilder.getPackageBuilderConfiguration();
  DialectCompiletimeRegistry dialectRegistry=pkgBuilder.getPackageRegistry(pkg.getName()).getDialectCompiletimeRegistry();
  Dialect dialect=dialectRegistry.getDialect("java");
  RuleBuildContext context=new RuleBuildContext(pkgBuilder,ruleDescr,dialectRegistry,pkg,dialect);
  builder.build(context);
  assertTrue(context.getErrors().toString(),context.getErrors().isEmpty());
  final Rule rule=context.getRule();
  assertEquals("There should be 2 rule level declarations",2,rule.getDeclarations().size());
  final GroupElement not=(GroupElement)rule.getLhs().getChildren().get(1);
  assertTrue(not.isNot());
  assertTrue(not.getOuterDeclarations().isEmpty());
  assertEquals(1,not.getInnerDeclarations().size());
  assertTrue(not.getInnerDeclarations().keySet().contains("$state"));
  final GroupElement not2=(GroupElement)((GroupElement)not.getChildren().get(0)).getChildren().get(1);
  assertTrue(not2.isNot());
  assertTrue(not2.getOuterDeclarations().isEmpty());
  assertEquals(1,not2.getInnerDeclarations().size());
  assertTrue(not2.getInnerDeclarations().keySet().contains("$likes"));
}
