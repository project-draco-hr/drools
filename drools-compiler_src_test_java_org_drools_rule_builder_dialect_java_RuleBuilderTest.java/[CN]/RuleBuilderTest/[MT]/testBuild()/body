{
  try {
    final DrlParser parser=new DrlParser();
    final PackageDescr pkgDescr=parser.parse(new InputStreamReader(getClass().getResourceAsStream("nestedConditionalElements.drl")));
    Assert.assertFalse(parser.getErrors().toString(),parser.hasErrors());
    Package pkg=new Package("org.drools");
    RuleDescr ruleDescr=(RuleDescr)pkgDescr.getRules().get(0);
    final String ruleClassName="RuleClassName.java";
    ruleDescr.setClassName(ruleClassName);
    TypeResolver typeResolver=new ClassTypeResolver(new ArrayList(),this.getClass().getClassLoader());
    typeResolver.addImport(pkgDescr.getName() + ".*");
    typeResolver.addImport("java.lang.*");
    final RuleBuilder builder=new RuleBuilder(typeResolver,new ClassFieldExtractorCache(),new JavaDialect(null,new PackageBuilderConfiguration()));
    builder.build(pkg,ruleDescr);
    Assert.assertTrue(builder.getErrors().toString(),builder.getErrors().isEmpty());
    final Rule rule=builder.getRule();
    assertEquals("There should be 2 rule level declarations",2,rule.getDeclarations().length);
    GroupElement not=(GroupElement)rule.getLhs().getChildren().get(1);
    assertTrue(not.isNot());
    assertTrue(not.getOuterDeclarations().isEmpty());
    assertEquals(1,not.getInnerDeclarations().size());
    assertTrue(not.getInnerDeclarations().keySet().contains("$state"));
    GroupElement not2=(GroupElement)((GroupElement)not.getChildren().get(0)).getChildren().get(1);
    assertTrue(not2.isNot());
    assertTrue(not2.getOuterDeclarations().isEmpty());
    assertEquals(1,not2.getInnerDeclarations().size());
    assertTrue(not2.getInnerDeclarations().keySet().contains("$likes"));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("This test is not supposed to throw any exception: " + e.getMessage());
  }
}
