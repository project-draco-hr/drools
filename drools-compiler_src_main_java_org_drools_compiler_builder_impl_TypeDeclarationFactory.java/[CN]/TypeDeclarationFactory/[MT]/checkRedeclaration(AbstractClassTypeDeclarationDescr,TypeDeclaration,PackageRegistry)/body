{
  TypeDeclaration previousTypeDeclaration=kbuilder.getPackageRegistry(typeDescr.getNamespace()).getPackage().getTypeDeclaration(typeDescr.getTypeName());
  try {
    if (previousTypeDeclaration == null) {
      Class<?> existingDeclarationClass=TypeDeclarationUtils.getExistingDeclarationClass(typeDescr,pkgRegistry);
      if (!kbuilder.getBuilderConfiguration().isPreCompiled() && !GeneratedFact.class.isAssignableFrom(existingDeclarationClass) && !type.getTypeClassDef().getFields().isEmpty()) {
        try {
          Class existingClass=pkgRegistry.getPackage().getTypeResolver().resolveType(typeDescr.getType().getFullName());
          ClassFieldInspector cfi=new ClassFieldInspector(existingClass);
          int fieldCount=0;
          for (          String existingFieldName : cfi.getFieldTypesField().keySet()) {
            if (!cfi.isNonGetter(existingFieldName) && !"class".equals(existingFieldName) && cfi.getSetterMethods().containsKey(existingFieldName)) {
              if (!typeDescr.getFields().containsKey(existingFieldName)) {
                type.setValid(false);
                kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,"New declaration of " + typeDescr.getType().getFullName() + " does not include field "+ existingFieldName));
              }
 else {
                String fldType=cfi.getFieldTypes().get(existingFieldName).getName();
                fldType=TypeDeclarationUtils.toBuildableType(fldType,kbuilder.getRootClassLoader());
                TypeFieldDescr declaredField=typeDescr.getFields().get(existingFieldName);
                if (!fldType.equals(type.getTypeClassDef().getField(existingFieldName).getTypeName())) {
                  type.setValid(false);
                  kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,"New declaration of " + typeDescr.getType().getFullName() + " redeclared field "+ existingFieldName+ " : \n"+ "existing : "+ fldType+ " vs declared : "+ declaredField.getPattern().getObjectType()));
                }
 else {
                  fieldCount++;
                }
              }
            }
          }
          if (fieldCount != typeDescr.getFields().size()) {
            kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,"New declaration of " + typeDescr.getType().getFullName() + " can't declare a different set of fields \n"+ "existing : "+ cfi.getFieldTypesField()+ "\n"+ "declared : "+ typeDescr.getFields()));
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
          type.setValid(false);
          kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,"Unable to redeclare " + typeDescr.getType().getFullName() + " : "+ e.getMessage()));
        }
catch (        ClassNotFoundException e) {
          type.setValid(false);
          kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,"Unable to redeclare " + typeDescr.getType().getFullName() + " : "+ e.getMessage()));
        }
      }
    }
 else {
      int typeComparisonResult=this.compareTypeDeclarations(previousTypeDeclaration,type);
      if (typeComparisonResult < 0) {
        kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,typeDescr.getType().getFullName() + " declares more fields than the already existing version"));
        type.setValid(false);
      }
 else       if (typeComparisonResult > 0 && !type.getTypeClassDef().getFields().isEmpty()) {
        kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,typeDescr.getType().getFullName() + " declares less fields than the already existing version"));
        type.setValid(false);
      }
      if (type.getNature() == TypeDeclaration.Nature.DECLARATION) {
        mergeTypeDeclarations(previousTypeDeclaration,type);
      }
    }
  }
 catch (  IncompatibleClassChangeError error) {
    kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,error.getMessage()));
  }
}
