{
  ScorecardCompiler scorecardCompiler2=new ScorecardCompiler(EXTERNAL_OBJECT_MODEL);
  PMML pmmlDocument2=null;
  String drl2=null;
  if (scorecardCompiler2.compileFromExcel(PMMLDocumentTest.class.getResourceAsStream("/scoremodel_externalmodel.xls"),"scorecards_reasoncode")) {
    pmmlDocument2=scorecardCompiler2.getPMMLDocument();
    PMML4Compiler.dumpModel(pmmlDocument2,System.out);
    assertNotNull(pmmlDocument2);
    drl2=scorecardCompiler2.getDRL();
  }
 else {
    for (    ScorecardError error : scorecardCompiler2.getScorecardParseErrors()) {
      System.out.println(error.getErrorLocation() + ":" + error.getErrorMessage());
    }
    fail("failed to parse scoremodel Excel (scorecards_reasoncode).");
  }
  assertNotNull(pmmlDocument2);
  assertTrue(drl2 != null && !drl2.isEmpty());
  KieServices ks=KieServices.Factory.get();
  KieFileSystem kfs=ks.newKieFileSystem();
  kfs.write(ks.getResources().newByteArrayResource(drl2.getBytes()).setSourcePath("test_scorecard_rules.drl").setResourceType(ResourceType.DRL));
  KieBuilder kieBuilder=ks.newKieBuilder(kfs);
  Results res=kieBuilder.buildAll().getResults();
  KieContainer kieContainer=ks.newKieContainer(kieBuilder.getKieModule().getReleaseId());
  KieBase kbase=kieContainer.getKieBase();
  KieSession session=kbase.newKieSession();
  FactType scorecardInternalsType=kbase.getFactType(PMML4Helper.pmmlDefaultPackageName(),"ScoreCard");
  Applicant applicant=new Applicant();
  applicant.setAge(10);
  session.insert(applicant);
  session.fireAllRules();
  assertEquals(129.0,applicant.getTotalScore());
  assertEquals("VL0099",applicant.getReasonCodes());
  Object scorecardInternals=session.getObjects(new ClassObjectFilter(scorecardInternalsType.getFactClass())).iterator().next();
  Assert.assertEquals(129.0,scorecardInternalsType.get(scorecardInternals,"score"));
  Map reasonCodesMap=(Map)scorecardInternalsType.get(scorecardInternals,"ranking");
  Assert.assertNotNull(reasonCodesMap);
  Assert.assertEquals(Arrays.asList("VL0099","AGE02"),new ArrayList(reasonCodesMap.keySet()));
  session.dispose();
  session=kbase.newKieSession();
  applicant=new Applicant();
  applicant.setOccupation("SKYDIVER");
  applicant.setAge(0);
  session.insert(applicant);
  session.fireAllRules();
  session.dispose();
  assertEquals(99.0,applicant.getTotalScore());
  session=kbase.newKieSession();
  applicant=new Applicant();
  applicant.setResidenceState("AP");
  applicant.setOccupation("TEACHER");
  applicant.setAge(20);
  applicant.setValidLicense(true);
  session.insert(applicant);
  session.fireAllRules();
  session.dispose();
  assertEquals(141.0,applicant.getTotalScore());
}
