{
  ObjectTypeNode.Id otnId=this.sink.getFirstLeftTupleSink().getLeftInputOtnId();
  LeftTuple leftTuple=processDeletesFromModify(modifyPreviousTuples,context,workingMemory,otnId);
  LiaNodeMemory lm=(LiaNodeMemory)workingMemory.getNodeMemory(this);
  if (lm.getSegmentMemory() == null) {
    SegmentUtilities.createSegmentMemory(this,workingMemory);
  }
  if (leftTuple != null && leftTuple.getLeftTupleSink().getLeftInputOtnId().equals(otnId)) {
    modifyPreviousTuples.removeLeftTuple();
    leftTuple.reAdd();
    LeftTupleSink sink=getSinkPropagator().getFirstLeftTupleSink();
    long mask=sink.getLeftInferredMask();
    if (intersect(context.getModificationMask(),mask)) {
      doUpdateObject(leftTuple,context,workingMemory,(LeftInputAdapterNode)leftTuple.getLeftTupleSink().getLeftTupleSource(),true,lm,lm.getSegmentMemory());
      if (leftTuple instanceof Activation) {
        ((Activation)leftTuple).setActive(true);
      }
    }
  }
 else {
    LeftTupleSink sink=getSinkPropagator().getFirstLeftTupleSink();
    long mask=sink.getLeftInferredMask();
    if (intersect(context.getModificationMask(),mask)) {
      doInsertObject(factHandle,context,this,workingMemory,lm,true,true);
    }
  }
}
