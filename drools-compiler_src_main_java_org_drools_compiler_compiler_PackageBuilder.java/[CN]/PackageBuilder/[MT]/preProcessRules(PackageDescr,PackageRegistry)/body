{
  Map<String,RuleBuildContext> ruleCxts=buildRuleBuilderContext(packageDescr.getRules());
  Package pkg=pkgRegistry.getPackage();
  if (this.ruleBase != null) {
    for (    Rule rule : pkg.getRules()) {
      if (filterAcceptsRemoval(rule.getPackageName(),rule.getName())) {
        this.ruleBase.removeRule(pkg,pkg.getRule(rule.getName()));
        pkg.removeRule(rule);
      }
    }
    boolean needsRemoval=false;
    for (    RuleDescr ruleDescr : packageDescr.getRules()) {
      if (filterAccepts(ruleDescr.getNamespace(),ruleDescr.getName())) {
        if (pkg.getRule(ruleDescr.getName()) != null) {
          needsRemoval=true;
          break;
        }
      }
    }
    if (needsRemoval) {
      try {
        this.ruleBase.lock();
        for (        RuleDescr ruleDescr : packageDescr.getRules()) {
          if (filterAccepts(ruleDescr.getNamespace(),ruleDescr.getName())) {
            if (pkg.getRule(ruleDescr.getName()) != null) {
              this.ruleBase.removeRule(pkg,pkg.getRule(ruleDescr.getName()));
            }
          }
        }
      }
  finally {
        this.ruleBase.unlock();
      }
    }
  }
  for (  RuleDescr ruleDescr : packageDescr.getRules()) {
    if (filterAccepts(ruleDescr.getNamespace(),ruleDescr.getName())) {
      RuleBuildContext ruleBuildContext=ruleCxts.get(ruleDescr.getName());
      ruleBuilder.preProcess(ruleBuildContext);
      pkg.addRule(ruleBuildContext.getRule());
    }
  }
  return ruleCxts;
}
