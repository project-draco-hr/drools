{
  boolean modified=false;
  if (pkgRegistryMap != null) {
    for (    PackageRegistry packageRegistry : pkgRegistryMap.values()) {
      modified=packageRegistry.removeObjectsGeneratedFromResource(resource) || modified;
    }
  }
  if (results != null) {
    Iterator<KnowledgeBuilderResult> i=results.iterator();
    while (i.hasNext()) {
      if (resource.equals(i.next().getResource())) {
        i.remove();
      }
    }
  }
  if (processBuilder != null && processBuilder.getErrors() != null) {
    Iterator<? extends KnowledgeBuilderResult> i=processBuilder.getErrors().iterator();
    while (i.hasNext()) {
      if (resource.equals(i.next().getResource())) {
        i.remove();
      }
    }
  }
  if (results.size() == 0) {
    for (    PackageRegistry packageRegistry : pkgRegistryMap.values()) {
      packageRegistry.getPackage().resetErrors();
    }
  }
  if (cacheTypes != null) {
    List<String> typesToBeRemoved=new ArrayList<String>();
    for (    Map.Entry<String,TypeDeclaration> type : cacheTypes.entrySet()) {
      if (resource.equals(type.getValue().getResource())) {
        typesToBeRemoved.add(type.getKey());
      }
    }
    for (    String type : typesToBeRemoved) {
      cacheTypes.remove(type);
    }
  }
  for (  List<PackageDescr> pkgDescrs : packages.values()) {
    for (    PackageDescr pkgDescr : pkgDescrs) {
      pkgDescr.removeObjectsGeneratedFromResource(resource);
    }
  }
  if (ruleBase != null) {
    ruleBase.removeObjectsGeneratedFromResource(resource);
  }
  return modified;
}
