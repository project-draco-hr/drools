{
  PackageRegistry pkgRegistry=this.pkgRegistryMap.get(packageDescr.getNamespace());
  Package pkg=pkgRegistry.getPackage();
  List<RuleDescr> roots=new LinkedList<RuleDescr>();
  Map<String,List<RuleDescr>> children=new HashMap<String,List<RuleDescr>>();
  LinkedHashMap<String,RuleDescr> sorted=new LinkedHashMap<String,RuleDescr>();
  for (  RuleDescr ruleDescr : packageDescr.getRules()) {
    if (!ruleDescr.hasParent()) {
      roots.add(ruleDescr);
    }
 else     if (pkg.getRule(ruleDescr.getParentName()) != null) {
      sorted.put(ruleDescr.getName(),ruleDescr);
    }
 else {
      List<RuleDescr> childz=children.get(ruleDescr.getParentName());
      if (childz == null) {
        childz=new ArrayList<RuleDescr>();
        children.put(ruleDescr.getParentName(),childz);
      }
      childz.add(ruleDescr);
    }
  }
  if (children.isEmpty()) {
    return;
  }
  while (!roots.isEmpty()) {
    RuleDescr root=roots.remove(0);
    sorted.put(root.getName(),root);
    List<RuleDescr> childz=children.remove(root.getName());
    if (childz != null) {
      roots.addAll(childz);
    }
  }
  reportHierarchyErrors(children,sorted);
  packageDescr.getRules().clear();
  for (  RuleDescr descr : sorted.values()) {
    packageDescr.getRules().add(descr);
  }
}
