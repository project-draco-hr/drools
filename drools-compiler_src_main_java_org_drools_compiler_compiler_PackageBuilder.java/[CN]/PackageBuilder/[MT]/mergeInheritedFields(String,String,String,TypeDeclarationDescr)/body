{
  Map<String,TypeFieldDescr> fieldMap=new LinkedHashMap<String,TypeFieldDescr>();
  PackageRegistry registry=this.pkgRegistryMap.get(superTypePackageName);
  Package pack;
  if (registry != null) {
    pack=registry.getPackage();
  }
 else {
    this.results.add(new TypeDeclarationError(typeDescr,"Cannot extend supertype '" + fullSuper + "' (not a declared type)"));
    typeDescr.setType(null,null);
    return false;
  }
  boolean isSuperClassTagged=false;
  boolean isSuperClassDeclared=true;
  if (pack != null) {
    TypeDeclaration superTypeDeclaration=pack.getTypeDeclaration(simpleSuperTypeName);
    if (superTypeDeclaration != null) {
      ClassDefinition classDef=superTypeDeclaration.getTypeClassDef();
      for (      FactField fld : classDef.getFields()) {
        TypeFieldDescr inheritedFlDescr=buildInheritedFieldDescrFromDefinition(fld);
        fieldMap.put(inheritedFlDescr.getFieldName(),inheritedFlDescr);
      }
      isSuperClassTagged=!superTypeDeclaration.isNovel();
    }
 else {
      isSuperClassDeclared=false;
    }
  }
 else {
    isSuperClassDeclared=false;
  }
  if (!isSuperClassDeclared || isSuperClassTagged) {
    try {
      Class superKlass=registry.getTypeResolver().resolveType(fullSuper);
      ClassFieldInspector inspector=new ClassFieldInspector(superKlass);
      for (      String name : inspector.getGetterMethods().keySet()) {
        if (inspector.getSetterMethods().containsKey(name)) {
          if (!inspector.isNonGetter(name) && !"class".equals(name)) {
            TypeFieldDescr inheritedFlDescr=new TypeFieldDescr(name,new PatternDescr(inspector.getFieldTypes().get(name).getName()));
            inheritedFlDescr.setInherited(!Modifier.isAbstract(inspector.getGetterMethods().get(name).getModifiers()));
            if (!fieldMap.containsKey(inheritedFlDescr.getFieldName()))             fieldMap.put(inheritedFlDescr.getFieldName(),inheritedFlDescr);
          }
        }
      }
    }
 catch (    ClassNotFoundException cnfe) {
      throw new RuntimeDroolsException("Unable to resolve Type Declaration superclass '" + fullSuper + "'");
    }
catch (    IOException e) {
    }
  }
  for (  String fieldName : typeDescr.getFields().keySet()) {
    if (fieldMap.containsKey(fieldName)) {
      String type1=fieldMap.get(fieldName).getPattern().getObjectType();
      String type2=typeDescr.getFields().get(fieldName).getPattern().getObjectType();
      if (type2.lastIndexOf(".") < 0) {
        try {
          TypeResolver typeResolver=pkgRegistryMap.get(pack.getName()).getTypeResolver();
          type1=typeResolver.resolveType(type1).getName();
          type2=typeResolver.resolveType(type2).getName();
          fieldMap.get(fieldName).getPattern().setObjectType(type1);
          typeDescr.getFields().get(fieldName).getPattern().setObjectType(type2);
        }
 catch (        ClassNotFoundException cnfe) {
        }
      }
      if (!type1.equals(type2)) {
        this.results.add(new TypeDeclarationError(typeDescr,"Cannot redeclare field '" + fieldName + " from "+ type1+ " to "+ type2));
        typeDescr.setType(null,null);
        return false;
      }
 else {
        String initVal=fieldMap.get(fieldName).getInitExpr();
        if (typeDescr.getFields().get(fieldName).getInitExpr() == null) {
          typeDescr.getFields().get(fieldName).setInitExpr(initVal);
        }
        typeDescr.getFields().get(fieldName).setInherited(fieldMap.get(fieldName).isInherited());
        for (        String key : fieldMap.get(fieldName).getAnnotationNames()) {
          if (typeDescr.getFields().get(fieldName).getAnnotation(key) == null) {
            typeDescr.getFields().get(fieldName).addAnnotation(fieldMap.get(fieldName).getAnnotation(key));
          }
        }
        if (typeDescr.getFields().get(fieldName).getIndex() < 0) {
          typeDescr.getFields().get(fieldName).setIndex(fieldMap.get(fieldName).getIndex());
        }
      }
    }
    fieldMap.put(fieldName,typeDescr.getFields().get(fieldName));
  }
  typeDescr.setFields(fieldMap);
  return true;
}
