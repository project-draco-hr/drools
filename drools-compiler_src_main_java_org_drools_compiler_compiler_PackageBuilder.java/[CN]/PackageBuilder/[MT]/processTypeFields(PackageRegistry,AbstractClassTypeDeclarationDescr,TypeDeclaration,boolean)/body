{
  if (type.getTypeClassDef() != null) {
    try {
      buildFieldAccessors(type,pkgRegistry);
    }
 catch (    Throwable e) {
      if (!firstAttempt) {
        this.results.add(new TypeDeclarationError(typeDescr,"Error creating field accessors for TypeDeclaration '" + type.getTypeName() + "' for type '"+ type.getTypeName()+ "'"));
      }
      return false;
    }
  }
  AnnotationDescr annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_TIMESTAMP);
  String timestamp=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
  if (timestamp != null) {
    type.setTimestampAttribute(timestamp);
    Package pkg=pkgRegistry.getPackage();
    MVELDialect dialect=(MVELDialect)pkgRegistry.getDialectCompiletimeRegistry().getDialect("mvel");
    PackageBuildContext context=new PackageBuildContext();
    context.init(this,pkg,typeDescr,pkgRegistry.getDialectCompiletimeRegistry(),dialect,null);
    if (!type.isTypesafe()) {
      context.setTypesafe(false);
    }
    MVELAnalysisResult results=(MVELAnalysisResult)context.getDialect().analyzeExpression(context,typeDescr,timestamp,new BoundIdentifiers(Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,type.getTypeClass()));
    InternalReadAccessor reader=pkg.getClassFieldAccessorStore().getMVELReader(ClassUtils.getPackage(type.getTypeClass()),type.getTypeClass().getName(),timestamp,type.isTypesafe(),results.getReturnType());
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)pkg.getDialectRuntimeRegistry().getDialectData("mvel");
    data.addCompileable((MVELCompileable)reader);
    ((MVELCompileable)reader).compile(data);
    type.setTimestampExtractor(reader);
  }
  annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_DURATION);
  String duration=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
  if (duration != null) {
    type.setDurationAttribute(duration);
    Package pkg=pkgRegistry.getPackage();
    MVELDialect dialect=(MVELDialect)pkgRegistry.getDialectCompiletimeRegistry().getDialect("mvel");
    PackageBuildContext context=new PackageBuildContext();
    context.init(this,pkg,typeDescr,pkgRegistry.getDialectCompiletimeRegistry(),dialect,null);
    if (!type.isTypesafe()) {
      context.setTypesafe(false);
    }
    MVELAnalysisResult results=(MVELAnalysisResult)context.getDialect().analyzeExpression(context,typeDescr,duration,new BoundIdentifiers(Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,type.getTypeClass()));
    if (results != null) {
      InternalReadAccessor reader=pkg.getClassFieldAccessorStore().getMVELReader(ClassUtils.getPackage(type.getTypeClass()),type.getTypeClass().getName(),duration,type.isTypesafe(),results.getReturnType());
      MVELDialectRuntimeData data=(MVELDialectRuntimeData)pkg.getDialectRuntimeRegistry().getDialectData("mvel");
      data.addCompileable((MVELCompileable)reader);
      ((MVELCompileable)reader).compile(data);
      type.setDurationExtractor(reader);
    }
 else {
      this.results.add(new TypeDeclarationError(typeDescr,"Error processing @duration for TypeDeclaration '" + type.getFullName() + "': cannot access the field '"+ duration+ "'"));
    }
  }
  annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_EXPIRE);
  String expiration=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
  if (expiration != null) {
    if (timeParser == null) {
      timeParser=new TimeIntervalParser();
    }
    type.setExpirationOffset(timeParser.parse(expiration)[0]);
  }
  boolean dynamic=typeDescr.getAnnotationNames().contains(TypeDeclaration.ATTR_PROP_CHANGE_SUPPORT);
  type.setDynamic(dynamic);
  PropertySpecificOption propertySpecificOption=configuration.getOption(PropertySpecificOption.class);
  boolean propertyReactive=propertySpecificOption.isPropSpecific(typeDescr.getAnnotationNames().contains(TypeDeclaration.ATTR_PROP_SPECIFIC),typeDescr.getAnnotationNames().contains(TypeDeclaration.ATTR_NOT_PROP_SPECIFIC));
  setPropertyReactive(typeDescr.getResource(),type,propertyReactive);
  if (type.isValid()) {
    if (type.getNature() == TypeDeclaration.Nature.DEFINITION) {
      pkgRegistry.getPackage().addTypeDeclaration(type);
    }
 else {
      TypeDeclaration oldType=pkgRegistry.getPackage().getTypeDeclaration(type.getTypeName());
      if (oldType == null) {
        pkgRegistry.getPackage().addTypeDeclaration(type);
      }
 else {
        if (type.getRole() == TypeDeclaration.Role.EVENT) {
          oldType.setRole(TypeDeclaration.Role.EVENT);
        }
        if (type.isPropertyReactive()) {
          oldType.setPropertyReactive(true);
        }
      }
    }
  }
  return true;
}
