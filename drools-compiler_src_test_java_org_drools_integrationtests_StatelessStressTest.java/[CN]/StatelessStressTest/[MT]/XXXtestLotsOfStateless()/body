{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("thread_class_test.drl")));
  assertFalse(builder.hasErrors());
  final RuleBase rb=getRuleBase(builder.getPackage());
  int numThreads=100;
  Thread[] ts=new Thread[numThreads];
  for (int i=0; i < numThreads; i++) {
    Runnable run=new Runnable(){
      public void run(){
        long start=0;
        long previous=0;
        while (true) {
          start=System.currentTimeMillis();
          StatelessSession sess=rb.newStatelessSession();
          try {
            sess=SerializationHelper.serializeObject(sess);
          }
 catch (          Exception ex) {
            throw new RuntimeException(ex);
          }
          Person p=new Person();
          p.setName("Michael");
          Address add1=new Address();
          add1.setStreet("High");
          Address add2=new Address();
          add2.setStreet("Low");
          List l=new ArrayList();
          l.add(add1);
          l.add(add2);
          p.setAddresses(l);
          sess.execute(p);
          long current=System.currentTimeMillis() - start;
          if (previous != 0) {
            float f=current / previous;
            if (f > 1) {
              System.err.println("SLOWDOWN");
            }
          }
          previous=current;
        }
      }
    }
;
    Thread t=new Thread(run);
    t.start();
    ts[i]=t;
  }
  for (int i=0; i < ts.length; i++) {
    ts[i].join();
  }
}
