{
  ClassDefinition clsDef=typeDeclaration.getTypeClassDef();
  if (clsDef == null) {
    clsDef=new ClassDefinition();
    typeDeclaration.setTypeClassDef(clsDef);
  }
  if (typeDeclaration.isPropertyReactive()) {
    processModifiedProps(cls,clsDef);
  }
  processFieldsPosition(cls,clsDef);
  Set<TypeDeclaration> tdecls=new LinkedHashSet<TypeDeclaration>();
  tdecls.add(typeDeclaration);
  buildTypeDeclarations(cls,tdecls);
  TypeDeclaration[] tarray=tdecls.toArray(new TypeDeclaration[tdecls.size()]);
  for (int i=tarray.length - 1; i >= 0; i--) {
    TypeDeclaration currentTDecl=tarray[i];
    if (!isSet(typeDeclaration.getSetMask(),TypeDeclaration.ROLE_BIT) && isSet(currentTDecl.getSetMask(),TypeDeclaration.ROLE_BIT)) {
      typeDeclaration.setRole(currentTDecl.getRole());
    }
    if (!isSet(typeDeclaration.getSetMask(),TypeDeclaration.FORMAT_BIT) && isSet(currentTDecl.getSetMask(),TypeDeclaration.FORMAT_BIT)) {
      typeDeclaration.setFormat(currentTDecl.getFormat());
    }
    if (!isSet(typeDeclaration.getSetMask(),TypeDeclaration.TYPESAFE_BIT) && isSet(currentTDecl.getSetMask(),TypeDeclaration.TYPESAFE_BIT)) {
      typeDeclaration.setTypesafe(currentTDecl.isTypesafe());
    }
  }
  this.cacheTypes.put(cls.getName(),typeDeclaration);
}
