{
  try {
    ClassFieldInspector inspector=new ClassFieldInspector(concrete);
    Map<String,Method> methods=inspector.getGetterMethods();
    Map<String,Method> setters=inspector.getSetterMethods();
    int j=0;
    for (    String fieldName : methods.keySet()) {
      if ("core".equals(fieldName) || "fields".equals(fieldName)) {
        continue;
      }
      if (!inspector.isNonGetter(fieldName) && setters.keySet().contains(fieldName)) {
        Class ret=methods.get(fieldName).getReturnType();
        FieldDefinition field=new FieldDefinition();
        field.setName(fieldName);
        field.setTypeName(ret.getName());
        field.setIndex(j++);
        type.getTypeClassDef().addField(field);
      }
    }
    Set<String> interfaces=new HashSet<String>();
    Collections.addAll(interfaces,type.getTypeClassDef().getInterfaces());
    for (    Class iKlass : ClassUtils.getAllImplementedInterfaceNames(concrete)) {
      interfaces.add(iKlass.getName());
    }
    type.getTypeClassDef().setInterfaces(interfaces.toArray(new String[interfaces.size()]));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
