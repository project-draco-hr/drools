{
  if (mvelSource == null || (mvelSource.trim().equals(""))) {
    return Collections.EMPTY_MAP;
  }
  if (mvelSource.startsWith("=")) {
    mvelSource=mvelSource.substring(1);
  }
 else {
    mvelSource="[ " + addCommasForNewLines(mvelSource) + " ]";
  }
  final Object mvelData;
  try {
    mvelData=MVEL.eval(mvelSource,new HashMap());
  }
 catch (  RuntimeException e) {
    addError("Unable to load enumeration data.");
    addError(e.getMessage());
    addError("Error type: " + e.getClass().getName());
    return Collections.EMPTY_MAP;
  }
  if (!(mvelData instanceof Map)) {
    addError("The expression is not a map, it is a " + mvelData.getClass().getName());
    return Collections.EMPTY_MAP;
  }
  Map map=(Map)mvelData;
  Map newMap=new HashMap();
  for (Iterator iter=map.keySet().iterator(); iter.hasNext(); ) {
    String key=(String)iter.next();
    Object list=map.get(key);
    if (!(list instanceof List || list instanceof String)) {
      if (list == null) {
        addError("The item with " + key + " is null.");
      }
 else {
        addError("The item with " + key + " is not a list or a string, it is a "+ list.getClass().getName());
      }
      return Collections.EMPTY_MAP;
    }
 else     if (list instanceof String) {
      newMap.put(key,list);
    }
 else {
      List items=(List)list;
      String[] newItems=new String[items.size()];
      for (int i=0; i < items.size(); i++) {
        Object listItem=items.get(i);
        if (!(listItem instanceof String)) {
          newItems[i]=listItem.toString();
        }
 else {
          newItems[i]=(String)listItem;
        }
      }
      newMap.put(key,newItems);
    }
  }
  return newMap;
}
