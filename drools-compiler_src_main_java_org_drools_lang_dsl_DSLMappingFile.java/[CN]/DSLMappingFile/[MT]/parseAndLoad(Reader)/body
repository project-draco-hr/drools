{
  String line=null;
  int linecounter=0;
  final BufferedReader dslFileReader=new BufferedReader(dsl);
  this.mapping=new DefaultDSLMapping();
  this.errors=new LinkedList();
  StringBuffer sb=new StringBuffer();
  boolean spacesAllowed=true;
  while ((line=dslFileReader.readLine()) != null) {
    linecounter++;
    String trimmedline=line.trim();
    if (spacesAllowed) {
      if (trimmedline.length() == 0) {
        continue;
      }
      if (trimmedline.startsWith("#")) {
        continue;
      }
    }
    sb.append(trimmedline);
    if (sb.charAt(sb.length() - 1) == '\\') {
      sb.append(' ');
      spacesAllowed=false;
      continue;
    }
    String lineToParse=sb.toString();
    spacesAllowed=true;
    sb=new StringBuffer();
    final Matcher mat=pattern.matcher(lineToParse);
    if (mat.matches()) {
      final String sectionStr=mat.group(2);
      final String metadataStr=mat.group(4);
      final String key=mat.group(5).replaceAll("\\\\=","=");
      final String value=mat.group(7);
      DSLMappingEntry.Section section=DSLMappingEntry.ANY;
      if (KEYWORD.equals(sectionStr)) {
        section=DSLMappingEntry.KEYWORD;
      }
 else       if (CONDITION.equals(sectionStr) || WHEN.equals(sectionStr)) {
        section=DSLMappingEntry.CONDITION;
      }
 else       if (CONSEQUENCE.equals(sectionStr) || THEN.equals(sectionStr)) {
        section=DSLMappingEntry.CONSEQUENCE;
      }
      DSLMappingEntry.MetaData metadata;
      if (metadataStr == null || metadataStr.length() == 0) {
        metadata=DSLMappingEntry.EMPTY_METADATA;
      }
 else {
        metadata=new DefaultDSLEntryMetaData(metadataStr);
      }
      final DSLMappingEntry entry=new DefaultDSLMappingEntry(section,metadata,key,value);
      this.mapping.addEntry(entry);
    }
 else {
      final String error="Error parsing mapping entry: " + line;
      final DSLMappingParseException exception=new DSLMappingParseException(error,linecounter);
      this.errors.add(exception);
    }
  }
  return this.errors.isEmpty();
}
