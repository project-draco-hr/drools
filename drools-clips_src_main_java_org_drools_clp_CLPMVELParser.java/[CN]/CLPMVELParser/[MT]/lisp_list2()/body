{
  SExpression sExpression=null;
  Token t=null;
  SExpression a=null;
  List list=new ArrayList();
  sExpression=null;
  try {
{
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lisp_list21300);
      if (failed)       return sExpression;
      t=(Token)input.LT(1);
      if (input.LA(1) == NAME || input.LA(1) == VAR) {
        input.consume();
        errorRecovery=false;
        failed=false;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return sExpression;
        }
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_lisp_list21310);
        throw mse;
      }
      if (backtracking == 0) {
        list.add(new SymbolLispAtom2(t.getText()));
      }
      int cnt18=0;
      loop18:       do {
        int alt18=3;
        int LA18_0=input.LA(1);
        if ((LA18_0 == NAME || LA18_0 == VAR || LA18_0 == STRING || LA18_0 == INT || (LA18_0 >= FLOAT && LA18_0 <= NULL))) {
          alt18=1;
        }
 else         if ((LA18_0 == LEFT_PAREN)) {
          alt18=2;
        }
switch (alt18) {
case 1:
{
            pushFollow(FOLLOW_lisp_atom2_in_lisp_list21325);
            a=lisp_atom2();
            _fsp--;
            if (failed)             return sExpression;
            if (backtracking == 0) {
              list.add(a);
            }
          }
        break;
case 2:
{
        pushFollow(FOLLOW_lisp_list2_in_lisp_list21336);
        a=lisp_list2();
        _fsp--;
        if (failed)         return sExpression;
        if (backtracking == 0) {
          list.add(a);
        }
      }
    break;
default :
  if (cnt18 >= 1)   break loop18;
if (backtracking > 0) {
  failed=true;
  return sExpression;
}
EarlyExitException eee=new EarlyExitException(18,input);
throw eee;
}
cnt18++;
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lisp_list21364);
if (failed) return sExpression;
if (backtracking == 0) {
sExpression=new LispForm2((SExpression[])list.toArray(new SExpression[list.size()]));
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return sExpression;
}
