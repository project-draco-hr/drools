{
  NodeTestDSLParser.compilation_unit_return retval=new NodeTestDSLParser.compilation_unit_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EOF6=null;
  NodeTestDSLParser.test_case_statement_return test_case_statement1=null;
  NodeTestDSLParser.import_statement_return import_statement2=null;
  NodeTestDSLParser.setup_return setup3=null;
  NodeTestDSLParser.teardown_return teardown4=null;
  NodeTestDSLParser.test_return test5=null;
  Object EOF6_tree=null;
  RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
  RewriteRuleSubtreeStream stream_setup=new RewriteRuleSubtreeStream(adaptor,"rule setup");
  RewriteRuleSubtreeStream stream_test_case_statement=new RewriteRuleSubtreeStream(adaptor,"rule test_case_statement");
  RewriteRuleSubtreeStream stream_import_statement=new RewriteRuleSubtreeStream(adaptor,"rule import_statement");
  RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
  RewriteRuleSubtreeStream stream_teardown=new RewriteRuleSubtreeStream(adaptor,"rule teardown");
  try {
{
      pushFollow(FOLLOW_test_case_statement_in_compilation_unit107);
      test_case_statement1=test_case_statement();
      state._fsp--;
      stream_test_case_statement.add(test_case_statement1.getTree());
      loop1:       do {
        int alt1=2;
        alt1=dfa1.predict(input);
switch (alt1) {
case 1:
{
            pushFollow(FOLLOW_import_statement_in_compilation_unit111);
            import_statement2=import_statement();
            state._fsp--;
            stream_import_statement.add(import_statement2.getTree());
          }
        break;
default :
      break loop1;
  }
}
 while (true);
int alt2=2;
int LA2_0=input.LA(1);
if ((LA2_0 == ID) && ((((validateIdentifierKey("Setup"))) || ((validateIdentifierKey("Test"))) || ((validateIdentifierKey("TearDown")))))) {
  int LA2_1=input.LA(2);
  if ((((validateIdentifierKey("Setup"))))) {
    alt2=1;
  }
}
switch (alt2) {
case 1:
{
    pushFollow(FOLLOW_setup_in_compilation_unit116);
    setup3=setup();
    state._fsp--;
    stream_setup.add(setup3.getTree());
  }
break;
}
int alt3=2;
int LA3_0=input.LA(1);
if ((LA3_0 == ID) && ((((validateIdentifierKey("Test"))) || ((validateIdentifierKey("TearDown")))))) {
int LA3_1=input.LA(2);
if ((LA3_1 == EOF || LA3_1 == ID) && (((validateIdentifierKey("TearDown"))))) {
alt3=1;
}
}
switch (alt3) {
case 1:
{
pushFollow(FOLLOW_teardown_in_compilation_unit121);
teardown4=teardown();
state._fsp--;
stream_teardown.add(teardown4.getTree());
}
break;
}
loop4: do {
int alt4=2;
int LA4_0=input.LA(1);
if ((LA4_0 == ID) && (((validateIdentifierKey("Test"))))) {
alt4=1;
}
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_test_in_compilation_unit126);
test5=test();
state._fsp--;
stream_test.add(test5.getTree());
}
break;
default :
break loop4;
}
}
 while (true);
EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit131);
stream_EOF.add(EOF6);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_TEST_CASE,"VT_TEST_CASE"),root_1);
adaptor.addChild(root_1,stream_test_case_statement.nextTree());
while (stream_import_statement.hasNext()) {
adaptor.addChild(root_1,stream_import_statement.nextTree());
}
stream_import_statement.reset();
if (stream_setup.hasNext()) {
adaptor.addChild(root_1,stream_setup.nextTree());
}
stream_setup.reset();
if (stream_teardown.hasNext()) {
adaptor.addChild(root_1,stream_teardown.nextTree());
}
stream_teardown.reset();
while (stream_test.hasNext()) {
adaptor.addChild(root_1,stream_test.nextTree());
}
stream_test.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException e) {
reportError(e);
}
 finally {
}
return retval;
}
