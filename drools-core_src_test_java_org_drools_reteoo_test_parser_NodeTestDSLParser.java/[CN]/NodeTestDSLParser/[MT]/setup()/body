{
  NodeTestDSLParser.setup_return retval=new NodeTestDSLParser.setup_return();
  retval.start=input.LT(1);
  Object root_0=null;
  NodeTestDSLParser.setup_key_return setup_key11=null;
  NodeTestDSLParser.step_return step12=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_setup_key_in_setup209);
      setup_key11=setup_key();
      state._fsp--;
      root_0=(Object)adaptor.becomeRoot(setup_key11.getTree(),root_0);
      loop5:       do {
        int alt5=2;
        int LA5_0=input.LA(1);
        if ((LA5_0 == ID)) {
          int LA5_1=input.LA(2);
          if ((LA5_1 == COLON)) {
            alt5=1;
          }
        }
switch (alt5) {
case 1:
{
            pushFollow(FOLLOW_step_in_setup212);
            step12=step();
            state._fsp--;
            adaptor.addChild(root_0,step12.getTree());
          }
        break;
default :
      break loop5;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
