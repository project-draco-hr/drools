{
  NodeTestDSLParser.test_case_statement_return retval=new NodeTestDSLParser.test_case_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token name=null;
  NodeTestDSLParser.test_case_key_return test_case_key7=null;
  Object name_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_test_case_key_in_test_case_statement172);
      test_case_key7=test_case_key();
      state._fsp--;
      root_0=(Object)adaptor.becomeRoot(test_case_key7.getTree(),root_0);
      name=(Token)match(input,STRING,FOLLOW_STRING_in_test_case_statement177);
      name_tree=(Object)adaptor.create(name);
      adaptor.addChild(root_0,name_tree);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
