{
  NodeTestDSLParser.paren_chunk_return retval=new NodeTestDSLParser.paren_chunk_return();
  retval.start=input.LT(1);
  Object root_0=null;
  NodeTestDSLParser.paren_matcher_return cm=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_paren_matcher_in_paren_chunk753);
      cm=paren_matcher();
      state._fsp--;
      adaptor.addChild(root_0,cm.getTree());
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
