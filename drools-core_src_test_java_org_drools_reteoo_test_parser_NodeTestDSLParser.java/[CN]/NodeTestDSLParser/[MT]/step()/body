{
  NodeTestDSLParser.step_return retval=new NodeTestDSLParser.step_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID17=null;
  Token COLON18=null;
  Token SEMI_COLON20=null;
  NodeTestDSLParser.params_return params19=null;
  Object ID17_tree=null;
  Object COLON18_tree=null;
  Object SEMI_COLON20_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      ID17=(Token)match(input,ID,FOLLOW_ID_in_step263);
      ID17_tree=(Object)adaptor.create(ID17);
      root_0=(Object)adaptor.becomeRoot(ID17_tree,root_0);
      COLON18=(Token)match(input,COLON,FOLLOW_COLON_in_step266);
      int cnt8=0;
      loop8:       do {
        int alt8=2;
        alt8=dfa8.predict(input);
switch (alt8) {
case 1:
{
            pushFollow(FOLLOW_params_in_step271);
            params19=params();
            state._fsp--;
            adaptor.addChild(root_0,params19.getTree());
            SEMI_COLON20=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_step273);
          }
        break;
default :
      if (cnt8 >= 1)       break loop8;
    EarlyExitException eee=new EarlyExitException(8,input);
  throw eee;
}
cnt8++;
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
