{
  NodeTestDSLParser.qualified_id_matcher_return retval=new NodeTestDSLParser.qualified_id_matcher_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID37=null;
  Token DOT38=null;
  Token ID39=null;
  Object ID37_tree=null;
  Object DOT38_tree=null;
  Object ID39_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      ID37=(Token)match(input,ID,FOLLOW_ID_in_qualified_id_matcher488);
      ID37_tree=(Object)adaptor.create(ID37);
      adaptor.addChild(root_0,ID37_tree);
      loop13:       do {
        int alt13=2;
        int LA13_0=input.LA(1);
        if ((LA13_0 == DOT)) {
          int LA13_1=input.LA(2);
          if ((LA13_1 == ID)) {
            alt13=1;
          }
        }
switch (alt13) {
case 1:
{
            DOT38=(Token)match(input,DOT,FOLLOW_DOT_in_qualified_id_matcher491);
            DOT38_tree=(Object)adaptor.create(DOT38);
            adaptor.addChild(root_0,DOT38_tree);
            ID39=(Token)match(input,ID,FOLLOW_ID_in_qualified_id_matcher493);
            ID39_tree=(Object)adaptor.create(ID39);
            adaptor.addChild(root_0,ID39_tree);
          }
        break;
default :
      break loop13;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
