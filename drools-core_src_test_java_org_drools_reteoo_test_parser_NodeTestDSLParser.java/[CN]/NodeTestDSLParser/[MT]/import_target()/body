{
  NodeTestDSLParser.import_target_return retval=new NodeTestDSLParser.import_target_return();
  retval.start=input.LT(1);
  Object root_0=null;
  NodeTestDSLParser.import_target_matcher_return itm=null;
  RewriteRuleSubtreeStream stream_import_target_matcher=new RewriteRuleSubtreeStream(adaptor,"rule import_target_matcher");
  try {
{
      pushFollow(FOLLOW_import_target_matcher_in_import_target428);
      itm=import_target_matcher();
      state._fsp--;
      stream_import_target_matcher.add(itm.getTree());
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
        adaptor.addChild(root_0,(Object)adaptor.create(VT_QUALIFIED_ID,(itm != null ? input.toString(itm.start,itm.stop) : null)));
      }
      retval.tree=root_0;
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
