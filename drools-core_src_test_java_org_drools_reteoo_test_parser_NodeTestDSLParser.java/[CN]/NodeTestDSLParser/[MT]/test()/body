{
  NodeTestDSLParser.test_return retval=new NodeTestDSLParser.test_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token name=null;
  NodeTestDSLParser.test_key_return test_key15=null;
  NodeTestDSLParser.step_return step16=null;
  Object name_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_test_key_in_test339);
      test_key15=test_key();
      state._fsp--;
      root_0=(Object)adaptor.becomeRoot(test_key15.getTree(),root_0);
      name=(Token)match(input,STRING,FOLLOW_STRING_in_test344);
      name_tree=(Object)adaptor.create(name);
      adaptor.addChild(root_0,name_tree);
      loop7:       do {
        int alt7=2;
        int LA7_0=input.LA(1);
        if ((LA7_0 == ID)) {
          int LA7_2=input.LA(2);
          if ((LA7_2 == COLON)) {
            alt7=1;
          }
        }
switch (alt7) {
case 1:
{
            pushFollow(FOLLOW_step_in_test346);
            step16=step();
            state._fsp--;
            adaptor.addChild(root_0,step16.getTree());
          }
        break;
default :
      break loop7;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
