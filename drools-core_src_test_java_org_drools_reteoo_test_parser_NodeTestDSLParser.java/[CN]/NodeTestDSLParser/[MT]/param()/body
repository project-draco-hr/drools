{
  NodeTestDSLParser.param_return retval=new NodeTestDSLParser.param_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token ID25=null;
  Token STRING26=null;
  Token INT27=null;
  Token FLOAT28=null;
  Token MISC29=null;
  Token STAR30=null;
  Token DOT33=null;
  NodeTestDSLParser.square_chunk_return square_chunk31=null;
  NodeTestDSLParser.paren_chunk_return paren_chunk32=null;
  Object ID25_tree=null;
  Object STRING26_tree=null;
  Object INT27_tree=null;
  Object FLOAT28_tree=null;
  Object MISC29_tree=null;
  Object STAR30_tree=null;
  Object DOT33_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int alt11=9;
switch (input.LA(1)) {
case ID:
{
          alt11=1;
        }
      break;
case STRING:
{
      alt11=2;
    }
  break;
case INT:
{
  alt11=3;
}
break;
case FLOAT:
{
alt11=4;
}
break;
case MISC:
{
alt11=5;
}
break;
case STAR:
{
alt11=6;
}
break;
case LEFT_SQUARE:
{
alt11=7;
}
break;
case LEFT_PAREN:
{
alt11=8;
}
break;
case DOT:
{
alt11=9;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",11,0,input);
throw nvae;
}
switch (alt11) {
case 1:
{
ID25=(Token)match(input,ID,FOLLOW_ID_in_param482);
ID25_tree=(Object)adaptor.create(ID25);
adaptor.addChild(root_0,ID25_tree);
}
break;
case 2:
{
STRING26=(Token)match(input,STRING,FOLLOW_STRING_in_param494);
STRING26_tree=(Object)adaptor.create(STRING26);
adaptor.addChild(root_0,STRING26_tree);
}
break;
case 3:
{
INT27=(Token)match(input,INT,FOLLOW_INT_in_param506);
INT27_tree=(Object)adaptor.create(INT27);
adaptor.addChild(root_0,INT27_tree);
}
break;
case 4:
{
FLOAT28=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_param518);
FLOAT28_tree=(Object)adaptor.create(FLOAT28);
adaptor.addChild(root_0,FLOAT28_tree);
}
break;
case 5:
{
MISC29=(Token)match(input,MISC,FOLLOW_MISC_in_param530);
MISC29_tree=(Object)adaptor.create(MISC29);
adaptor.addChild(root_0,MISC29_tree);
}
break;
case 6:
{
STAR30=(Token)match(input,STAR,FOLLOW_STAR_in_param542);
STAR30_tree=(Object)adaptor.create(STAR30);
adaptor.addChild(root_0,STAR30_tree);
}
break;
case 7:
{
pushFollow(FOLLOW_square_chunk_in_param554);
square_chunk31=square_chunk();
state._fsp--;
adaptor.addChild(root_0,square_chunk31.getTree());
}
break;
case 8:
{
pushFollow(FOLLOW_paren_chunk_in_param566);
paren_chunk32=paren_chunk();
state._fsp--;
adaptor.addChild(root_0,paren_chunk32.getTree());
}
break;
case 9:
{
DOT33=(Token)match(input,DOT,FOLLOW_DOT_in_param578);
DOT33_tree=(Object)adaptor.create(DOT33);
adaptor.addChild(root_0,DOT33_tree);
}
break;
}
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
