{
  NodeTestDSLParser.paren_matcher_return retval=new NodeTestDSLParser.paren_matcher_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_PAREN43=null;
  Token RIGHT_PAREN45=null;
  NodeTestDSLParser.params_return params44=null;
  Object LEFT_PAREN43_tree=null;
  Object RIGHT_PAREN45_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_PAREN43=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_matcher557);
      LEFT_PAREN43_tree=(Object)adaptor.create(LEFT_PAREN43);
      adaptor.addChild(root_0,LEFT_PAREN43_tree);
      int alt15=2;
      int LA15_0=input.LA(1);
      if ((LA15_0 == STRING || LA15_0 == ID || (LA15_0 >= INT && LA15_0 <= LEFT_SQUARE) || LA15_0 == LEFT_PAREN)) {
        alt15=1;
      }
switch (alt15) {
case 1:
{
          pushFollow(FOLLOW_params_in_paren_matcher559);
          params44=params();
          state._fsp--;
          adaptor.addChild(root_0,params44.getTree());
        }
      break;
  }
  RIGHT_PAREN45=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_paren_matcher562);
  RIGHT_PAREN45_tree=(Object)adaptor.create(RIGHT_PAREN45);
  adaptor.addChild(root_0,RIGHT_PAREN45_tree);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
