{
  NodeTestDSLParser.import_target_matcher_return retval=new NodeTestDSLParser.import_target_matcher_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token DOT35=null;
  Token STAR36=null;
  NodeTestDSLParser.qualified_id_matcher_return qualified_id_matcher34=null;
  Object DOT35_tree=null;
  Object STAR36_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_qualified_id_matcher_in_import_target_matcher633);
      qualified_id_matcher34=qualified_id_matcher();
      state._fsp--;
      adaptor.addChild(root_0,qualified_id_matcher34.getTree());
      int alt12=2;
      int LA12_0=input.LA(1);
      if ((LA12_0 == DOT)) {
        alt12=1;
      }
switch (alt12) {
case 1:
{
          DOT35=(Token)match(input,DOT,FOLLOW_DOT_in_import_target_matcher636);
          DOT35_tree=(Object)adaptor.create(DOT35);
          adaptor.addChild(root_0,DOT35_tree);
          STAR36=(Token)match(input,STAR,FOLLOW_STAR_in_import_target_matcher638);
          STAR36_tree=(Object)adaptor.create(STAR36);
          adaptor.addChild(root_0,STAR36_tree);
        }
      break;
  }
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
