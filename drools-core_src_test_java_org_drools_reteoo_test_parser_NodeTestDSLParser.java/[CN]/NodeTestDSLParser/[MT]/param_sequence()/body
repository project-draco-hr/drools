{
  NodeTestDSLParser.param_sequence_return retval=new NodeTestDSLParser.param_sequence_return();
  retval.start=input.LT(1);
  Object root_0=null;
  NodeTestDSLParser.param_return param24=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt10=0;
      loop10:       do {
        int alt10=2;
        int LA10_0=input.LA(1);
        if ((LA10_0 == STRING || LA10_0 == ID || (LA10_0 >= INT && LA10_0 <= LEFT_SQUARE) || LA10_0 == LEFT_PAREN)) {
          alt10=1;
        }
switch (alt10) {
case 1:
{
            pushFollow(FOLLOW_param_in_param_sequence462);
            param24=param();
            state._fsp--;
            adaptor.addChild(root_0,param24.getTree());
          }
        break;
default :
      if (cnt10 >= 1)       break loop10;
    EarlyExitException eee=new EarlyExitException(10,input);
  throw eee;
}
cnt10++;
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
