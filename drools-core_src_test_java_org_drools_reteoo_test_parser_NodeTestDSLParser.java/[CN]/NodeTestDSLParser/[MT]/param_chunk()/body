{
  NodeTestDSLParser.param_chunk_return retval=new NodeTestDSLParser.param_chunk_return();
  retval.start=input.LT(1);
  Object root_0=null;
  NodeTestDSLParser.param_sequence_return c=null;
  RewriteRuleSubtreeStream stream_param_sequence=new RewriteRuleSubtreeStream(adaptor,"rule param_sequence");
  try {
{
      pushFollow(FOLLOW_param_sequence_in_param_chunk436);
      c=param_sequence();
      state._fsp--;
      stream_param_sequence.add(c.getTree());
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
        adaptor.addChild(root_0,(Object)adaptor.create(VT_CHUNK,(c != null ? input.toString(c.start,c.stop) : null)));
      }
      retval.tree=root_0;
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
