{
  NodeTestDSLParser.import_statement_return retval=new NodeTestDSLParser.import_statement_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token SEMI_COLON10=null;
  NodeTestDSLParser.import_key_return import_key8=null;
  NodeTestDSLParser.import_target_return import_target9=null;
  Object SEMI_COLON10_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_import_key_in_import_statement190);
      import_key8=import_key();
      state._fsp--;
      root_0=(Object)adaptor.becomeRoot(import_key8.getTree(),root_0);
      pushFollow(FOLLOW_import_target_in_import_statement193);
      import_target9=import_target();
      state._fsp--;
      adaptor.addChild(root_0,import_target9.getTree());
      SEMI_COLON10=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_import_statement195);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
