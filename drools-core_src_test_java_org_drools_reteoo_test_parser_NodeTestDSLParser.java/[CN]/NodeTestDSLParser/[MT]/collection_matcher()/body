{
  NodeTestDSLParser.collection_matcher_return retval=new NodeTestDSLParser.collection_matcher_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token LEFT_SQUARE40=null;
  Token RIGHT_SQUARE42=null;
  NodeTestDSLParser.params_return params41=null;
  Object LEFT_SQUARE40_tree=null;
  Object RIGHT_SQUARE42_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      LEFT_SQUARE40=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_collection_matcher524);
      LEFT_SQUARE40_tree=(Object)adaptor.create(LEFT_SQUARE40);
      adaptor.addChild(root_0,LEFT_SQUARE40_tree);
      int alt14=2;
      int LA14_0=input.LA(1);
      if ((LA14_0 == STRING || LA14_0 == ID || (LA14_0 >= INT && LA14_0 <= LEFT_SQUARE) || LA14_0 == LEFT_PAREN)) {
        alt14=1;
      }
switch (alt14) {
case 1:
{
          pushFollow(FOLLOW_params_in_collection_matcher526);
          params41=params();
          state._fsp--;
          adaptor.addChild(root_0,params41.getTree());
        }
      break;
  }
  RIGHT_SQUARE42=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_collection_matcher529);
  RIGHT_SQUARE42_tree=(Object)adaptor.create(RIGHT_SQUARE42);
  adaptor.addChild(root_0,RIGHT_SQUARE42_tree);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
