{
  NodeTestDSLParser.import_key_return retval=new NodeTestDSLParser.import_key_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token id=null;
  Object id_tree=null;
  RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
  try {
{
      if (!(((validateIdentifierKey("import"))))) {
        throw new FailedPredicateException(input,"import_key","(validateIdentifierKey(\"import\"))");
      }
      id=(Token)match(input,ID,FOLLOW_ID_in_import_key605);
      stream_ID.add(id);
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
        adaptor.addChild(root_0,(Object)adaptor.create(VK_IMPORT,id));
      }
      retval.tree=root_0;
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
