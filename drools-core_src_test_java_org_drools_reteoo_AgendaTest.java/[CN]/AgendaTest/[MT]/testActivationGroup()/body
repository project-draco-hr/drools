{
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final List list=new ArrayList();
  final Consequence consequence=new Consequence(){
    /** 
 */
    private static final long serialVersionUID=400L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
      list.add(knowledgeHelper.getRule());
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
;
  final LeftTuple tuple=new LeftTuple(new DefaultFactHandle(1,"cheese"),null,true);
  final Rule rule0=new Rule("test-rule0");
  rule0.setActivationGroup("activation-group-0");
  final RuleTerminalNode node0=new RuleTerminalNode(3,new MockTupleSource(2),rule0,rule0.getLhs(),buildContext);
  rule0.setConsequence(consequence);
  final PropagationContext context0=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule0,null,null);
  final Rule rule1=new Rule("test-rule1");
  rule1.setActivationGroup("activation-group-0");
  final RuleTerminalNode node1=new RuleTerminalNode(5,new MockTupleSource(4),rule1,rule1.getLhs(),buildContext);
  rule1.setConsequence(consequence);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule1,null,null);
  final Rule rule2=new Rule("test-rule2");
  final RuleTerminalNode node2=new RuleTerminalNode(7,new MockTupleSource(6),rule2,rule2.getLhs(),buildContext);
  rule2.setConsequence(consequence);
  final PropagationContext context2=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule2,null,null);
  final Rule rule3=new Rule("test-rule3","agendaGroup3");
  rule3.setActivationGroup("activation-group-3");
  final RuleTerminalNode node3=new RuleTerminalNode(9,new MockTupleSource(8),rule3,rule3.getLhs(),buildContext);
  rule3.setConsequence(consequence);
  final PropagationContext context3=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule3,null,null);
  node0.assertLeftTuple(tuple,context0,workingMemory);
  final ActivationGroup activationGroup0=agenda.getActivationGroup("activation-group-0");
  assertEquals(1,activationGroup0.size());
  node0.retractLeftTuple(tuple,context0,workingMemory);
  assertEquals(0,activationGroup0.size());
  node0.assertLeftTuple(tuple,context0,workingMemory);
  assertEquals(1,activationGroup0.size());
  node1.assertLeftTuple(tuple,context1,workingMemory);
  assertEquals(2,activationGroup0.size());
  assertEquals(2,agenda.focusStackSize());
  agenda.fireNextItem(null);
  assertEquals(0,activationGroup0.size());
  assertEquals(0,agenda.focusStackSize());
  assertEquals(1,list.size());
  assertSame(rule0,list.get(0));
  list.clear();
  node0.assertLeftTuple(tuple,context0,workingMemory);
  node1.assertLeftTuple(tuple,context1,workingMemory);
  node2.assertLeftTuple(tuple,context2,workingMemory);
  node3.assertLeftTuple(tuple,context3,workingMemory);
  assertEquals(2,activationGroup0.size());
  final ActivationGroup activationGroup3=agenda.getActivationGroup("activation-group-3");
  assertEquals(4,agenda.agendaSize());
  assertEquals(1,activationGroup3.size());
  agenda.clearAgendaGroup("agendaGroup3");
  assertEquals(3,agenda.agendaSize());
  assertEquals(0,activationGroup3.size());
  agenda.fireNextItem(null);
  assertEquals(1,agenda.agendaSize());
  assertEquals(0,activationGroup0.size());
  agenda.fireNextItem(null);
  assertEquals(0,agenda.agendaSize());
  assertEquals(2,list.size());
  assertEquals(rule0,list.get(0));
  assertEquals(rule2,list.get(1));
}
