{
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final Consequence consequence0=new Consequence(){
    private static final long serialVersionUID=-2596133893109870505L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory w){
    }
  }
;
  final Rule rule0=new Rule("test-rule0");
  rule0.setRuleFlowGroup("rule-flow-group-0");
  rule0.setConsequence(consequence0);
  final RuleTerminalNode node0=new RuleTerminalNode(1,new MockTupleSource(2),rule0,rule0.getLhs());
  final RuleFlowGroup ruleFlowGroup0=agenda.getRuleFlowGroup("rule-flow-group-0");
  final PropagationContext context0=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule0,null);
  final ReteTuple tuple0=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  node0.assertTuple(tuple0,context0,workingMemory);
  final ReteTuple tuple1=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  node0.assertTuple(tuple1,context0,workingMemory);
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(2,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(2,agenda.agendaSize());
  agenda.deactivateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(2,agenda.agendaSize());
}
