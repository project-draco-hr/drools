{
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final DefaultAgenda agenda=(DefaultAgenda)workingMemory.getAgenda();
  final Consequence consequence0=new Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory w){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
;
  final Rule rule0=new Rule("test-rule0");
  rule0.setRuleFlowGroup("rule-flow-group-0");
  rule0.setConsequence(consequence0);
  final RuleTerminalNode node0=new RuleTerminalNode(1,new MockTupleSource(2),rule0,rule0.getLhs(),0,buildContext);
  final RuleFlowGroup ruleFlowGroup0=agenda.getRuleFlowGroup("rule-flow-group-0");
  final PropagationContext context0=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule0,null,new DefaultFactHandle());
  final LeftTupleImpl tuple0=new LeftTupleImpl(new DefaultFactHandle(1,"cheese"),null,true);
  node0.assertLeftTuple(tuple0,context0,workingMemory);
  final LeftTupleImpl tuple1=new LeftTupleImpl(new DefaultFactHandle(1,"cheese"),null,true);
  node0.assertLeftTuple(tuple1,context0,workingMemory);
  agenda.unstageActivations();
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(2,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(2,agenda.agendaSize());
  agenda.deactivateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(2,ruleFlowGroup0.size());
  assertEquals(2,agenda.agendaSize());
}
