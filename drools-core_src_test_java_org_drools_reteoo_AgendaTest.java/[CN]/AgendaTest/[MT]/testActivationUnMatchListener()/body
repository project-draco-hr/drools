{
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final DefaultAgenda agenda=(DefaultAgenda)workingMemory.getAgenda();
  final Rule rule1=new Rule("test-rule1");
  final RuleTerminalNode node1=new RuleTerminalNode(3,new MockTupleSource(2),rule1,rule1.getLhs(),0,buildContext);
  Cheese cheese=new Cheese();
  cheese.setPrice(50);
  final LeftTupleImpl tuple=new LeftTupleImpl(new DefaultFactHandle(1,cheese),null,true);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule1,null,new DefaultFactHandle());
  rule1.setConsequence(new org.drools.spi.Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
      AgendaItem item=(AgendaItem)knowledgeHelper.getActivation();
      final Cheese cheese=(Cheese)item.getTuple().getHandle().getObject();
      final int oldPrice=cheese.getPrice();
      cheese.setPrice(100);
      item.setActivationUnMatchListener(new ActivationUnMatchListener(){
        public void unMatch(        org.kie.runtime.rule.WorkingMemory wm,        org.kie.runtime.rule.Activation activation){
          cheese.setPrice(oldPrice);
        }
      }
);
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
);
  assertEquals(50,cheese.getPrice());
  node1.assertLeftTuple(tuple,context1,workingMemory);
  agenda.unstageActivations();
  agenda.fireNextItem(null);
  assertEquals(100,cheese.getPrice());
  final PropagationContext context0=new PropagationContextImpl(0,PropagationContext.RETRACTION,rule1,null,new DefaultFactHandle());
  node1.retractLeftTuple(tuple,context0,workingMemory);
  assertEquals(50,cheese.getPrice());
}
