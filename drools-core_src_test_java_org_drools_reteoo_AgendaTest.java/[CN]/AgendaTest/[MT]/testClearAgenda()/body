{
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final DefaultAgenda agenda=(DefaultAgenda)workingMemory.getAgenda();
  final Rule rule1=new Rule("test-rule1");
  final Rule rule2=new Rule("test-rule2");
  final RuleTerminalNode node1=new RuleTerminalNode(3,new MockTupleSource(2),rule1,rule1.getLhs(),buildContext);
  final RuleTerminalNode node2=new RuleTerminalNode(5,new MockTupleSource(4),rule2,rule2.getLhs(),buildContext);
  final LeftTuple tuple=new LeftTuple(new DefaultFactHandle(1,"cheese"),null,true);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule1,null,null);
  rule1.setConsequence(new org.drools.spi.Consequence(){
    /** 
 */
    private static final long serialVersionUID=400L;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
);
  rule2.setConsequence(new org.drools.spi.Consequence(){
    /** 
 */
    private static final long serialVersionUID=400L;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
);
  assertEquals(0,agenda.getFocus().size());
  rule1.setNoLoop(false);
  rule2.setDuration(5000);
  node1.assertLeftTuple(tuple,context1,workingMemory);
  node2.assertLeftTuple(tuple,context1,workingMemory);
  assertEquals(1,agenda.getFocus().size());
  assertEquals(1,agenda.getScheduledActivations().length);
  agenda.clearAgenda();
  assertEquals(0,agenda.getFocus().size());
  assertEquals(0,agenda.getScheduledActivations().length);
}
