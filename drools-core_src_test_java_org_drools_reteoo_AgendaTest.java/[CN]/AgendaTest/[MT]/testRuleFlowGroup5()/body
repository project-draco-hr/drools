{
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final Consequence consequence0=new Consequence(){
    private static final long serialVersionUID=-2596133893109870505L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory w){
    }
  }
;
  final Rule rule0=new Rule("test-rule0");
  rule0.setRuleFlowGroup("rule-flow-group-0");
  rule0.setConsequence(consequence0);
  final RuleFlowGroup ruleFlowGroup0=agenda.getRuleFlowGroup("rule-flow-group-0");
  assertTrue(ruleFlowGroup0.isAutoDeactivate());
  assertEquals(0,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(0,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  workingMemory.executeQueuedActions();
  assertFalse(ruleFlowGroup0.isActive());
}
