{
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  IdGenerator idGenerator=ruleBase.getReteooBuilder().getIdGenerator();
  final InternalWorkingMemory workingMemory=(InternalWorkingMemory)ruleBase.newStatefulSession();
  ;
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final Consequence consequence0=new Consequence(){
    private static final long serialVersionUID=400L;
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory w){
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
;
  final Rule rule0=new Rule("test-rule0");
  rule0.setRuleFlowGroup("rule-flow-group-0");
  rule0.setConsequence(consequence0);
  final RuleTerminalNode node0=new RuleTerminalNode(idGenerator.getNextId(),new MockTupleSource(idGenerator.getNextId()),rule0,rule0.getLhs(),buildContext);
  final RuleFlowGroup ruleFlowGroup0=agenda.getRuleFlowGroup("rule-flow-group-0");
  assertTrue(ruleFlowGroup0.isAutoDeactivate());
  ruleFlowGroup0.setAutoDeactivate(false);
  assertFalse(ruleFlowGroup0.isAutoDeactivate());
  final PropagationContext context0=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule0,null);
  final LeftTuple tuple0=new LeftTuple(new DefaultFactHandle(1,"cheese"));
  node0.assertLeftTuple(tuple0,context0,workingMemory);
  assertEquals(1,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(1,ruleFlowGroup0.size());
  assertEquals(1,agenda.agendaSize());
  agenda.fireNextItem(null);
  assertEquals(0,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  assertTrue(ruleFlowGroup0.isActive());
  ruleFlowGroup0.setAutoDeactivate(true);
  assertTrue(ruleFlowGroup0.isAutoDeactivate());
  assertFalse(ruleFlowGroup0.isActive());
  final LeftTuple tuple1=new LeftTuple(new DefaultFactHandle(1,"cheese"));
  node0.assertLeftTuple(tuple1,context0,workingMemory);
  agenda.activateRuleFlowGroup("rule-flow-group-0");
  assertEquals(1,ruleFlowGroup0.size());
  assertEquals(1,agenda.agendaSize());
  assertTrue(ruleFlowGroup0.isActive());
  agenda.fireNextItem(null);
  assertEquals(0,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
  workingMemory.executeQueuedActions();
  assertFalse(ruleFlowGroup0.isActive());
  final LeftTuple tuple2=new LeftTuple(new DefaultFactHandle(1,"cheese"));
  node0.assertLeftTuple(tuple2,context0,workingMemory);
  assertEquals(1,ruleFlowGroup0.size());
  assertEquals(0,agenda.agendaSize());
}
