{
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final DefaultAgenda agenda=(DefaultAgenda)workingMemory.getAgenda();
  final Boolean[] filtered=new Boolean[]{false};
  workingMemory.addEventListener(new DefaultAgendaEventListener(){
    public void activationCancelled(    ActivationCancelledEvent event,    WorkingMemory workingMemory){
      if (event.getCause() == MatchCancelledCause.FILTER) {
        filtered[0]=true;
      }
    }
  }
);
  final Rule rule=new Rule("test-rule");
  final RuleTerminalNode node=new RuleTerminalNode(3,new MockTupleSource(2),rule,rule.getLhs(),0,buildContext);
  final Map results=new HashMap();
  rule.setConsequence(new org.drools.core.spi.Consequence(){
    private static final long serialVersionUID=510l;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
      results.put("fired",new Boolean(true));
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
);
  final LeftTupleImpl tuple=new LeftTupleImpl(new DefaultFactHandle(1,"cheese"),node,true);
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.INSERTION,rule,null,new DefaultFactHandle());
  assertEquals(0,agenda.getFocus().size());
  final AgendaFilter filterTrue=new AgendaFilter(){
    public boolean accept(    Activation item){
      return true;
    }
  }
;
  rule.setNoLoop(false);
  node.assertLeftTuple(tuple,context,workingMemory);
  agenda.unstageActivations();
  assertEquals(1,agenda.getFocus().size());
  agenda.fireNextItem(filterTrue);
  assertEquals(0,agenda.getFocus().size());
  assertEquals(new Boolean(true),results.get("fired"));
  assertEquals(false,filtered[0].booleanValue());
  agenda.clearAndCancel();
  results.clear();
  final AgendaFilter filterFalse=new AgendaFilter(){
    public boolean accept(    Activation item){
      return false;
    }
  }
;
  rule.setNoLoop(false);
  node.assertLeftTuple(tuple,context,workingMemory);
  agenda.unstageActivations();
  assertEquals(1,agenda.getFocus().size());
  agenda.fireNextItem(filterFalse);
  assertEquals(0,agenda.getFocus().size());
  assertNull(results.get("fired"));
  assertEquals(true,filtered[0].booleanValue());
}
