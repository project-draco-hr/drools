{
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newWorkingMemory();
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final Rule rule=new Rule("test-rule");
  final RuleTerminalNode node=new RuleTerminalNode(3,new MockTupleSource(2),rule);
  final Map results=new HashMap();
  rule.setConsequence(new org.drools.spi.Consequence(){
    /** 
 */
    private static final long serialVersionUID=-5958911613493145604L;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
      results.put("fired",new Boolean(true));
    }
  }
);
  final ReteTuple tuple=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule,null);
  assertEquals(0,agenda.getFocus().size());
  final AgendaFilter filterTrue=new AgendaFilter(){
    public boolean accept(    Activation item){
      return true;
    }
  }
;
  rule.setNoLoop(false);
  node.assertTuple(tuple,context,workingMemory);
  assertEquals(1,agenda.getFocus().size());
  agenda.fireNextItem(filterTrue);
  assertEquals(0,agenda.getFocus().size());
  assertEquals(new Boolean(true),results.get("fired"));
  agenda.clearAgenda();
  results.clear();
  final AgendaFilter filterFalse=new AgendaFilter(){
    public boolean accept(    Activation item){
      return false;
    }
  }
;
  rule.setNoLoop(false);
  node.assertTuple(tuple,context,workingMemory);
  assertEquals(1,agenda.getFocus().size());
  agenda.fireNextItem(filterFalse);
  assertEquals(0,agenda.getFocus().size());
  assertNull(results.get("fired"));
}
