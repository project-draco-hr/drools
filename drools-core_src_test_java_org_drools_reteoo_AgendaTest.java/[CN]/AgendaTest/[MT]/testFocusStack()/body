{
  RuleBase ruleBase=new RuleBaseImpl();
  WorkingMemoryImpl workingMemory=(WorkingMemoryImpl)ruleBase.newWorkingMemory();
  final Agenda agenda=workingMemory.getAgenda();
  AgendaGroupImpl agendaGroup1=new AgendaGroupImpl("agendaGroup1");
  agenda.addAgendaGroup(agendaGroup1);
  ActivationQueue queue1=agendaGroup1.getActivationQueue(0);
  AgendaGroupImpl agendaGroup2=new AgendaGroupImpl("agendaGroup2");
  agenda.addAgendaGroup(agendaGroup2);
  ActivationQueue queue2=agendaGroup2.getActivationQueue(0);
  AgendaGroupImpl agendaGroup3=new AgendaGroupImpl("agendaGroup3");
  agenda.addAgendaGroup(agendaGroup3);
  ActivationQueue queue3=agendaGroup3.getActivationQueue(0);
  Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory){
    }
  }
;
  ReteTuple tuple=new ReteTuple(new FactHandleImpl(1));
  Rule rule0=new Rule("test-rule0");
  TerminalNode node0=new TerminalNode(3,new MockTupleSource(2),rule0);
  rule0.setConsequence(consequence);
  PropagationContext context0=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule0,null);
  Rule rule1=new Rule("test-rule1","agendaGroup1");
  TerminalNode node1=new TerminalNode(5,new MockTupleSource(4),rule1);
  rule1.setConsequence(consequence);
  PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule1,null);
  Rule rule2=new Rule("test-rule2","agendaGroup2");
  TerminalNode node2=new TerminalNode(7,new MockTupleSource(6),rule2);
  rule2.setConsequence(consequence);
  PropagationContext context2=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule2,null);
  Rule rule3=new Rule("test-rule3","agendaGroup3");
  TerminalNode node3=new TerminalNode(9,new MockTupleSource(8),rule3);
  rule3.setConsequence(consequence);
  PropagationContext context3=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule3,null);
  assertEquals(0,agenda.focusStackSize());
  node0.assertTuple(tuple,context0,workingMemory);
  AgendaGroupImpl main=(AgendaGroupImpl)agenda.getAgendaGroup(AgendaGroup.MAIN);
  assertEquals(agenda.getFocus(),main);
  assertEquals(1,agenda.getFocus().size());
  node2.assertTuple(tuple,context2,workingMemory);
  assertEquals(1,agenda.getFocus().size());
  assertEquals(1,agendaGroup2.size());
  assertEquals(2,agenda.agendaSize());
  node2.assertTuple(tuple,context2,workingMemory);
  assertEquals(1,agenda.getFocus().size());
  assertEquals(2,agendaGroup2.size());
  assertEquals(3,agenda.agendaSize());
  agenda.setFocus("agendaGroup1");
  agenda.setFocus("agendaGroup2");
  agenda.setFocus("agendaGroup3");
  assertEquals(0,agenda.getFocus().size());
  node3.assertTuple(tuple,context3,workingMemory);
  assertEquals(1,agenda.getFocus().size());
  node3.assertTuple(tuple,context3,workingMemory);
  assertEquals(2,agenda.getFocus().size());
  assertEquals(5,agenda.agendaSize());
  agenda.fireNextItem(null);
  assertEquals(agenda.getFocus(),agendaGroup3);
  assertEquals(1,agenda.getFocus().size());
  assertEquals(4,agenda.agendaSize());
  agenda.fireNextItem(null);
  assertEquals(agenda.getFocus(),agendaGroup3);
  assertEquals(0,agenda.getFocus().size());
  assertEquals(3,agenda.agendaSize());
  agenda.fireNextItem(null);
  assertEquals(agendaGroup2,agenda.getFocus());
  assertEquals(1,agenda.getFocus().size());
  assertEquals(2,agenda.agendaSize());
  agenda.fireNextItem(null);
  assertEquals(agenda.getFocus(),agendaGroup2);
  assertEquals(0,agenda.getFocus().size());
  assertEquals(1,agenda.agendaSize());
  agenda.fireNextItem(null);
  assertEquals(agenda.getFocus(),main);
  assertEquals(0,agenda.getFocus().size());
  assertEquals(0,agenda.agendaSize());
}
