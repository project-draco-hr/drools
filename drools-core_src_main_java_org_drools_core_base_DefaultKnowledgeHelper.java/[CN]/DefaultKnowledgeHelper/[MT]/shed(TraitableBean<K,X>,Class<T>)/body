{
  if (trait.isAssignableFrom(core.getClass())) {
    core.removeTrait(trait.getName());
    update(core,Long.MIN_VALUE,core.getClass());
    updateTraits(core,Long.MIN_VALUE,null,core.getClass(),null);
    return (Thing<K>)core;
  }
 else {
    Collection<Thing<K>> removedTypes;
    Thing<K> thing=core.getTrait(Thing.class.getName());
    if (trait == Thing.class) {
      removedTypes=new ArrayList(core._getTraitMap().values());
      for (      Thing t : removedTypes) {
        if (!((TraitType)t).isVirtual()) {
          retract(t);
        }
      }
      core._getTraitMap().clear();
      core._setTraitMap(null);
      return thing;
    }
    if (core.hasTrait(trait.getName())) {
      removedTypes=core.removeTrait(trait.getName());
    }
 else {
      HierarchyEncoder hier=((ReteooRuleBase)this.workingMemory.getRuleBase()).getConfiguration().getComponentFactory().getTraitRegistry().getHierarchy();
      BitSet code=hier.getCode(trait.getName());
      removedTypes=core.removeTrait(code);
    }
    removedTypes=new ArrayList<Thing<K>>(removedTypes);
    for (    Thing t : removedTypes) {
      if (!((TraitType)t).isVirtual()) {
        retract(t);
      }
    }
    update(core,Long.MIN_VALUE,core.getClass());
    updateTraits(core,Long.MIN_VALUE,null,core.getClass(),null);
    return thing;
  }
}
