{
  String str="" + "package org.drools.test1  \n" + "\n"+ "declare Location\n"+ "    thing : String \n"+ "    location : String \n"+ "end"+ "\n"+ "declare Edible\n"+ "   thing : String\n"+ "end"+ "\n"+ "query whereFood( String x, String y ) \n"+ "    Location(x, y;) Edible(x;) \n"+ "end\n"+ "\n"+ "rule init when\n"+ "then\n"+ "        \n"+ "        insert( new Location(\"apple\", \"kitchen\") );\n"+ "        insert( new Location(\"crackers\", \"kitchen\") );\n"+ "        insert( new Location(\"broccoli\", \"kitchen\") );\n"+ "        insert( new Location(\"computer\", \"office\") );\n"+ "        insert( new Edible(\"apple\") );\n"+ "        insert( new Edible(\"crackers\") );\n"+ "end\n"+ "";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  str="" + "package org.drools.test2  \n" + "import org.drools.test1.*\n"+ "import java.util.List\n"+ "import java.util.ArrayList\n"+ "import java.util.Map\n"+ "import java.util.HashMap\n"+ "global List list\n"+ "\n"+ "rule look2 when\n"+ "     $place : String() // just here to give a OTN lookup point\n"+ "     whereFood(thing, $place;)\n"+ "then\n"+ "      list.add( \"2:\" + thing );\n"+ "end\n";
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  str="" + "package org.drools.test3  \n" + "import org.drools.test1.*\n"+ "import java.util.List\n"+ "import java.util.ArrayList\n"+ "import java.util.Map\n"+ "import java.util.HashMap\n"+ "global List list\n"+ "\n"+ "rule look3 when\n"+ "     $place : String() // just here to give a OTN lookup point\n"+ "     whereFood(thing, $place;)\n"+ "then\n"+ "      list.add( \"3:\" + thing );\n"+ "end\n";
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  str="" + "package org.drools.test4  \n" + "import org.drools.test1.*\n"+ "import java.util.List\n"+ "import java.util.ArrayList\n"+ "import java.util.Map\n"+ "import java.util.HashMap\n"+ "global List list\n"+ "\n"+ "rule look4 when\n"+ "     $place : String() // just here to give a OTN lookup point\n"+ "     whereFood(thing, $place;)\n"+ "then\n"+ "      list.add( \"4:\" + thing );\n"+ "end\n";
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  Map<String,KnowledgePackage> pkgs=new HashMap<String,KnowledgePackage>();
  for (  KnowledgePackage pkg : kbuilder.getKnowledgePackages()) {
    pkgs.put(pkg.getName(),pkg);
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(Arrays.asList(new KnowledgePackage[]{pkgs.get("org.drools.test1"),pkgs.get("org.drools.test2")}));
  kbase=SerializationHelper.serializeObject(kbase);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List<Map<String,Object>> list=new ArrayList<Map<String,Object>>();
  ksession.setGlobal("list",list);
  FactHandle fh=ksession.insert("kitchen");
  ksession.fireAllRules();
  assertEquals(2,list.size());
  assertContains(new String[]{"2:crackers","2:apple"},list);
  list.clear();
  kbase.addKnowledgePackages(Arrays.asList(new KnowledgePackage[]{pkgs.get("org.drools.test3")}));
  ksession.fireAllRules();
  assertEquals(2,list.size());
  assertContains(new String[]{"3:crackers","3:apple"},list);
  list.clear();
  kbase.addKnowledgePackages(Arrays.asList(new KnowledgePackage[]{pkgs.get("org.drools.test4")}));
  ksession.fireAllRules();
  assertEquals(2,list.size());
  assertContains(new String[]{"4:crackers","4:apple"},list);
}
