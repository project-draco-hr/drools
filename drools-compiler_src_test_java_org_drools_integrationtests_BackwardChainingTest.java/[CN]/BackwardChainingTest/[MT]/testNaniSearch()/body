{
  String str="" + "package org.drools.test  \n" + "import java.util.List\n"+ "import java.util.ArrayList\n"+ "import org.drools.integrationtests.BackwardChainingTest.Location\n"+ "import org.drools.integrationtests.BackwardChainingTest.Here\n"+ "global List list\n"+ "dialect \"mvel\"\n"+ "query room( String name ) \n"+ "   org.drools.integrationtests.BackwardChainingTest.Room( name : name ) \n"+ "end\n"+ "query location( String thing, String location ) \n"+ "   org.drools.integrationtests.BackwardChainingTest.Location( thing : thing, location : location ) \n"+ "end\n"+ "query door( String fromLocation, String toLocation ) \n"+ "   org.drools.integrationtests.BackwardChainingTest.Door( fromLocation : fromLocation, toLocation : toLocation ) \n"+ "end\n"+ "query edible( String thing, String toLocation ) \n"+ "   org.drools.integrationtests.BackwardChainingTest.Edible( thing : thing ) \n"+ "end\n"+ "query tastesYucky( String thing ) \n"+ "   org.drools.integrationtests.BackwardChainingTest.TastesYucky( thing : thing ) \n"+ "end\n"+ "query here( String location ) \n"+ "   org.drools.integrationtests.BackwardChainingTest.Here( location : location ) \n"+ "end\n"+ "query whereFood( String thing, String location ) \n"+ "    ( location(thing, location) and\n"+ "    edible(thing) )\n "+ "    or \n"+ "    (location(thing, location) and\n"+ "    tastesYucky(thing)) \n"+ "end\n"+ "query connect( String x, String y ) \n"+ "    door(x, y;)\n"+ "    or \n"+ "    door(y, x;)\n"+ "end\n"+ "query look() \n"+ "    here(place;)\n"+ "    things : List() from accumulate( location(thing, place;) ,"+ "                                    collectList( thing ) )\n"+ "    exits : List() from accumulate( connect(place, exit;) ,"+ "                                    collectList( [place, exit] ) )\n"+ "end\n"+ "query look2(String place, List things, List exits) \n"+ "    things : List() from accumulate( location(thing, place;) ,"+ "                                    collectList( thing ) )\n"+ "    exits : List() from accumulate( connect(place, exit;) ,"+ "                                    collectList( [place, exit] ) )\n"+ "end\n"+ "rule reactiveLook when\n"+ "    Here( place : location) \n"+ "    look2(place, things, exits)\n"+ "then"+ "    System.out.println( \"  You are in the \" + place );\n"+ "    System.out.println( \"  You can see \" + things );\n"+ "    System.out.println( \"  You can go to \" + exits );\n"+ "end\n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List<String> list=new ArrayList<String>();
  ksession.setGlobal("list",list);
  ksession.insert(new Room("kitchen"));
  ksession.insert(new Room("office"));
  ksession.insert(new Room("hall"));
  ksession.insert(new Room("dining room"));
  ksession.insert(new Room("cellar"));
  ksession.insert(new Location("desk","office"));
  ksession.insert(new Location("apple","kitchen"));
  ksession.insert(new Location("flashlight","desk"));
  ksession.insert(new Location("washing machine","cellar"));
  ksession.insert(new Location("nani","washing machine"));
  ksession.insert(new Location("broccoli","kitchen"));
  ksession.insert(new Location("crackers","kitchen"));
  ksession.insert(new Location("compuer","office"));
  ksession.insert(new Door("office","hall"));
  ksession.insert(new Door("kitcehn","office"));
  ksession.insert(new Door("hall","dining room"));
  ksession.insert(new Door("kitchen","cellar"));
  ksession.insert(new Door("dining room","kitchen"));
  ksession.insert(new Edible("apple"));
  ksession.insert(new Edible("crackers"));
  ksession.insert(new TastesYucky("broccoli"));
  QueryResults results=null;
  System.out.println("whereFood");
  results=ksession.getQueryResults("whereFood",new Object[]{variable,variable});
  for (  QueryResultsRow result : results) {
    System.out.println("  " + result.get("thing") + " : "+ result.get("location"));
  }
  System.out.println("");
  System.out.println("connect");
  results=ksession.getQueryResults("connect",new Object[]{variable,variable});
  for (  QueryResultsRow result : results) {
    System.out.println("  " + result.get("x") + " : "+ result.get("y"));
  }
  System.out.println("");
  ksession.insert(new Here("kitchen"));
  ksession.fireAllRules();
  System.out.println("look");
  results=ksession.getQueryResults("look",new Object[]{});
  for (  QueryResultsRow result : results) {
    System.out.println("  You are in the " + result.get("place"));
    System.out.println("  You can see " + result.get("things"));
    System.out.println("  You can go to " + result.get("exits"));
  }
}
