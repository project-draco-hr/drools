{
  String str="" + "package org.drools.test  \n" + "import java.util.List\n"+ "import java.util.ArrayList\n"+ "global List list\n"+ "dialect \"mvel\"\n"+ "declare Room"+ "    name : String\n"+ "end\n"+ "\n"+ "declare Location\n"+ "    thing : String \n"+ "    location : String \n"+ "end"+ "\n"+ "declare Door\n"+ "   fromLocation : String\n"+ "   toLocation : String\n"+ "end"+ "\n"+ "declare Edible\n"+ "   thing : String\n"+ "end"+ "\n"+ "declare TastesYucky\n"+ "   thing : String\n"+ "end"+ "\n"+ "declare TastesYucky\n"+ "   thing : String\n"+ "end\n"+ "\n"+ "declare Here\n"+ "   place : String \n"+ "end\n"+ "\n"+ "query whereFood( String thing, String location ) \n"+ "    ( Location(thing, location;) and\n"+ "      Edible(thing;) )\n "+ "    or \n"+ "    ( Location(thing, location;) and\n"+ "      TastesYucky(thing;) ) \n"+ "end\n"+ "\n"+ "query connect( String x, String y ) \n"+ "    Door(x, y;)\n"+ "    or \n"+ "    Door(y, x;)\n"+ "end\n"+ "\n"+ "\n"+ "query isContainedIn( String x, String y ) \n"+ "    Location(x, y;)\n"+ "    or \n"+ "    ( Location(z, y;) and ?isContainedIn(x, z;) )\n"+ "end\n"+ "\n"+ "query look(String place, List things, List food, List exits) \n"+ "    Here(place;)\n"+ "    things := List() from accumulate( Location(thing, place;),\n"+ "                                    collectList( thing ) )\n"+ "    food := List() from accumulate( ?whereFood(thing, place;) ,"+ "                                    collectList( thing ) )\n"+ "    exits := List() from accumulate( ?connect(place, exit;),\n"+ "                                    collectList( exit ) )\n"+ "end\n"+ "\n"+ "rule reactiveLook when\n"+ "    Here( place : place) \n"+ "    ?look(place, things, food, exits;)\n"+ "then\n"+ "    System.out.println( \"You are in the \" + place);\n"+ "    System.out.println( \"  You can see \" + things );\n"+ "    System.out.println( \"  You can eat \" + food );\n"+ "    System.out.println( \"  You can go to \" + exits );\n"+ "end\n"+ "\n"+ "rule init when\n"+ "then\n"+ "        insert( new Room(\"kitchen\") );\n"+ "        insert( new Room(\"office\") );\n"+ "        insert( new Room(\"hall\") );\n"+ "        insert( new Room(\"dining room\") );\n"+ "        insert( new Room(\"cellar\") );\n"+ "        \n"+ "        insert( new Location(\"apple\", \"kitchen\") );\n"+ "        insert( new Location(\"desk\", \"office\") );\n"+ "        insert( new Location(\"flashlight\", \"desk\") );\n"+ "        insert( new Location(\"envelope\", \"desk\") );\n"+ "        insert( new Location(\"key\", \"envelope\") );\n"+ "        insert( new Location(\"washing machine\", \"cellar\") );\n"+ "        insert( new Location(\"nani\", \"washing machine\") );\n"+ "        insert( new Location(\"broccoli\", \"kitchen\") );\n"+ "        insert( new Location(\"crackers\", \"kitchen\") );\n"+ "        insert( new Location(\"compuer\", \"office\") );\n"+ "        \n"+ "        insert( new Door(\"office\", \"hall\") );\n"+ "        insert( new Door(\"kitchen\", \"office\") );\n"+ "        insert( new Door(\"hall\", \"dining room\") );\n"+ "        insert( new Door(\"kitchen\", \"cellar\") );\n"+ "        insert( new Door(\"dining room\", \"kitchen\") );\n"+ "        \n"+ "        insert( new Edible(\"apple\") );\n"+ "        insert( new Edible(\"crackers\") );\n"+ "        \n"+ "        insert( new TastesYucky(\"broccoli\") );  "+ "end\n"+ ""+ "rule go1 when\n"+ "   String( this == 'go1' )\n"+ "then\n"+ "   insert( new Here(\"kitchen\") );\n"+ "end\n"+ "\n"+ "rule go2 when\n"+ "   String( this == 'go2' )\n"+ "   $h : Here( place == \"kitchen\")"+ "then\n"+ "   modify( $h ) { place = \"office\" };\n"+ "end\n";
  System.out.println(str);
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  kbase=SerializationHelper.serializeObject(kbase);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List<String> list=new ArrayList<String>();
  ksession.setGlobal("list",list);
  QueryResults results=null;
  ksession.fireAllRules();
  ksession.insert("go1");
  ksession.fireAllRules();
  ksession.insert("go2");
  ksession.fireAllRules();
  System.out.println("isContainedIn key in office");
  results=ksession.getQueryResults("isContainedIn",new Object[]{"key","office"});
  for (  QueryResultsRow result : results) {
    System.out.println("  " + result.get("x") + ":"+ result.get("y"));
  }
  System.out.println("isContainedIn apple in office");
  results=ksession.getQueryResults("isContainedIn",new Object[]{"apple","office"});
  for (  QueryResultsRow result : results) {
    System.out.println("  " + result.get("x") + ":"+ result.get("y"));
  }
}
