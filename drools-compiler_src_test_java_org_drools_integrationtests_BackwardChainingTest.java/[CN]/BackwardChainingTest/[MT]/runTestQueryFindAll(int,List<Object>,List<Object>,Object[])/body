{
  String str="" + "package org.test " + "global java.util.List queryList "+ "global java.util.List ruleList "+ "query object( Object o ) "+ "    o := Object() "+ "end "+ "rule findObjectByQuery "+ "when ";
switch (iCase) {
case 0:
    str+="    object( $a ; ) ";
  break;
case 1:
str+="    Object() ";
str+="    object( $a ; ) ";
break;
case 2:
str+="    object( $a ; ) ";
str+="    Object() ";
break;
}
str+="then " + "#   System.out.println( \"Object by query: \" + $a );\n" + "    queryList.add( $a ); "+ "end "+ "rule findObject "+ "salience 10 "+ "when "+ "    $o: Object() "+ "then "+ "#   System.out.println( \"Object: \" + $o );\n"+ "    ruleList.add( $o ); "+ "end "+ "";
KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
if (kbuilder.hasErrors()) {
fail(kbuilder.getErrors().toString());
}
KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
kbase=SerializationHelper.serializeObject(kbase);
StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
ksession.setGlobal("queryList",queryList);
ksession.setGlobal("ruleList",ruleList);
for (Object o : objects) {
ksession.insert(o);
}
ksession.fireAllRules();
ksession.dispose();
}
