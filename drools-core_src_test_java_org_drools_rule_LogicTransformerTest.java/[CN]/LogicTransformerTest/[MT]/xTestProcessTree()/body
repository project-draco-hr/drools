{
  final String a="a";
  final String b="b";
  final String c="c";
  final String d="d";
  final String e="e";
  final String f="f";
  final String g="g";
  final String h="h";
  final String i="i";
  final String j="j";
  final String k="notAssertObject";
  final And and1=new And();
  final And and2=new And();
  and1.addChild(a);
  and1.addChild(and2);
  and2.addChild(b);
  final Not not1=new Not();
  final Not not2=new Not();
  not1.addChild(not2);
  not2.addChild(c);
  and2.addChild(not1);
  and1.addChild(d);
  final And and3=new And();
  and3.addChild(e);
  final Or or1=new Or();
  and3.addChild(or1);
  final Exists exist1=new Exists();
  exist1.addChild(g);
  or1.addChild(exist1);
  or1.addChild(h);
  final Not not3=new Not();
  not3.addChild(i);
  final And root=new And();
  root.addChild(and1);
  root.addChild(and3);
  root.addChild(not3);
  LogicTransformer.getInstance().processTree(root);
  assertEquals(root,root);
  final And testAnd1=new And();
  testAnd1.addChild(a);
  testAnd1.addChild(b);
  final Or testOr2=new Or();
  testOr2.addChild(c);
  testOr2.addChild(d);
  testAnd1.addChild(testOr2);
  assertFalse(root.equals(testAnd1));
  final ObjectInputStream ois=new ObjectInputStream(this.getClass().getResourceAsStream("/correct_processTree1.dat"));
  final And correctResultRoot=(And)ois.readObject();
  assertEquals(correctResultRoot,root);
}
