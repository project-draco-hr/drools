{
  final String a="a";
  final String b="b";
  final String c="c";
  final String d="d";
  final String e="e";
  final String g="g";
  final String h="h";
  final String i="i";
  final GroupElement and1=GroupElementFactory.newAndInstance();
  final GroupElement and2=GroupElementFactory.newAndInstance();
  and1.addChild(a);
  and1.addChild(and2);
  and2.addChild(b);
  final GroupElement not1=GroupElementFactory.newNotInstance();
  final GroupElement not2=GroupElementFactory.newNotInstance();
  not1.addChild(not2);
  not2.addChild(c);
  and2.addChild(not1);
  and1.addChild(d);
  final GroupElement and3=GroupElementFactory.newAndInstance();
  and3.addChild(e);
  final GroupElement or1=GroupElementFactory.newOrInstance();
  and3.addChild(or1);
  final GroupElement exist1=GroupElementFactory.newExistsInstance();
  exist1.addChild(g);
  or1.addChild(exist1);
  or1.addChild(h);
  final GroupElement not3=GroupElementFactory.newNotInstance();
  not3.addChild(i);
  final GroupElement root=GroupElementFactory.newAndInstance();
  root.addChild(and1);
  root.addChild(and3);
  root.addChild(not3);
  GroupElement[] result=LogicTransformer.getInstance().transform(root);
  final ObjectInputStream ois=new ObjectInputStream(this.getClass().getResourceAsStream("/correct_processTree1.dat"));
  final GroupElement[] correctResultRoot=(GroupElement[])ois.readObject();
  for (int j=0; j < correctResultRoot.length; j++) {
    assertEquals(correctResultRoot[j],result[j]);
  }
}
