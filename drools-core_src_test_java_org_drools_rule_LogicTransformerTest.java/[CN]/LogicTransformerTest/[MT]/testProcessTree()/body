{
  final ObjectType type=new ClassObjectType(String.class);
  final Column a=new Column(0,type,"a");
  final Column b=new Column(1,type,"b");
  final Column c=new Column(2,type,"c");
  final Column d=new Column(3,type,"d");
  final Column e=new Column(4,type,"e");
  final Column g=new Column(5,type,"g");
  final Column h=new Column(6,type,"h");
  final Column i=new Column(7,type,"i");
  final GroupElement and1=GroupElementFactory.newAndInstance();
  final GroupElement and2=GroupElementFactory.newAndInstance();
  and1.addChild(a);
  and1.addChild(and2);
  and2.addChild(b);
  final GroupElement not1=GroupElementFactory.newNotInstance();
  final GroupElement not2=GroupElementFactory.newNotInstance();
  not1.addChild(not2);
  not2.addChild(c);
  and2.addChild(not1);
  and1.addChild(d);
  final GroupElement and3=GroupElementFactory.newAndInstance();
  and3.addChild(e);
  final GroupElement or1=GroupElementFactory.newOrInstance();
  and3.addChild(or1);
  final GroupElement exist1=GroupElementFactory.newExistsInstance();
  exist1.addChild(g);
  or1.addChild(h);
  or1.addChild(exist1);
  final GroupElement not3=GroupElementFactory.newNotInstance();
  not3.addChild(i);
  final GroupElement root=GroupElementFactory.newAndInstance();
  root.addChild(and1);
  root.addChild(and3);
  root.addChild(not3);
  GroupElement[] result=LogicTransformer.getInstance().transform(root);
  writeTree(result,"correct_processTree1.dat");
  final ObjectInputStream ois=new ObjectInputStream(this.getClass().getResourceAsStream("/correct_processTree1.dat"));
  final GroupElement[] correctResultRoot=(GroupElement[])ois.readObject();
  for (int j=0; j < correctResultRoot.length; j++) {
    assertEquals(correctResultRoot[j],result[j]);
  }
}
