{
  final PropagationContext context=pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null);
  final StatefulKnowledgeSessionImpl workingMemory=new StatefulKnowledgeSessionImpl(1L,kBase);
  final List list=new ArrayList();
  Human h1=new Human();
  Human h2=new Human();
  Person p1=new Person("darth",105);
  Person p2=new Person("yoda",200);
  Person m1=new Man("bobba",95);
  Person m2=new Man("luke",40);
  list.add(h1);
  list.add(h2);
  list.add(p1);
  list.add(p1);
  list.add(m1);
  list.add(m2);
  final MockDataProvider dataProvider=new MockDataProvider(list);
  final Pattern pattern=new Pattern(0,new ClassObjectType(Person.class));
  From fromCe=new From(dataProvider);
  fromCe.setResultPattern(pattern);
  final FromNode from=new FromNode(3,dataProvider,new MockTupleSource(90),new AlphaNodeFieldConstraint[]{},null,true,buildContext,fromCe);
  final MockLeftTupleSink sink=new MockLeftTupleSink(5);
  from.addTupleSink(sink);
  final FactHandle handle=workingMemory.insert("xxx");
  final LeftTuple tuple1=new LeftTupleImpl((DefaultFactHandle)handle,from,true);
  from.assertLeftTuple(tuple1,context,workingMemory);
  List asserted=sink.getAsserted();
  int countHuman=0;
  int countPerson=0;
  int countMan=0;
  for (int i=0; i < 4; i++) {
    Object o=((LeftTuple)((Object[])asserted.get(i))[0]).getLastHandle().getObject();
    if (o.getClass() == Human.class) {
      countHuman++;
    }
 else     if (o.getClass() == Person.class) {
      countPerson++;
    }
 else     if (o.getClass() == Man.class) {
      countMan++;
    }
  }
  assertEquals(0,countHuman);
  assertEquals(2,countPerson);
  assertEquals(2,countMan);
}
