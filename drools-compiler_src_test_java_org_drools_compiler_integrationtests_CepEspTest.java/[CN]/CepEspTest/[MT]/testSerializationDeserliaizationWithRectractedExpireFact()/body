{
  String drl="package " + TestEvent.class.getPackage().getName() + "\n"+ "declare "+ TestEvent.class.getCanonicalName()+ "\n"+ "   @role( event ) \n"+ "   @expires( 60d ) \n"+ "end\n"+ "rule \"retract test rule\"\n"+ "salience 10 \n"+ "when\n"+ "   $e : TestEvent() over window:length(1)\n"+ "then\n"+ "   delete($e);\n"+ "end";
  KieSessionConfiguration sessionConfig=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  sessionConfig.setOption(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
  KieHelper helper=new KieHelper();
  helper.addContent(drl,ResourceType.DRL);
  KieBase kbase=helper.build(EventProcessingOption.STREAM);
  KieSession ksession=kbase.newKieSession(sessionConfig,null);
  ksession.insert(new TestEvent("test1"));
  ksession.fireAllRules();
  KieSession kieSessionDeserialized=null;
  try {
    kieSessionDeserialized=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,true,false);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  ksession.dispose();
  kieSessionDeserialized.insert(new TestEvent("test2"));
  kieSessionDeserialized.fireAllRules();
}
