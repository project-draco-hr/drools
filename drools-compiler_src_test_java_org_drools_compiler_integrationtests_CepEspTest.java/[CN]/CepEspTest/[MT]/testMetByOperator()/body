{
  KieBaseConfiguration conf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  conf.setOption(EventProcessingOption.STREAM);
  final KnowledgeBase kbase=loadKnowledgeBase(conf,"test_CEP_MetByOperator.drl");
  KieSessionConfiguration sconf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  sconf.setOption(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
  StatefulKnowledgeSession ksession=createKnowledgeSession(kbase,sconf);
  final PseudoClockScheduler clock=(PseudoClockScheduler)ksession.<PseudoClockScheduler>getSessionClock();
  clock.setStartupTime(1000);
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  StockTickInterface tick1=new StockTick(1,"DROO",50,System.currentTimeMillis(),3);
  StockTickInterface tick2=new StockTick(2,"ACME",10,System.currentTimeMillis(),3);
  StockTickInterface tick3=new StockTick(3,"ACME",10,System.currentTimeMillis(),3);
  StockTickInterface tick4=new StockTick(4,"DROO",50,System.currentTimeMillis(),5);
  StockTickInterface tick5=new StockTick(5,"ACME",10,System.currentTimeMillis(),5);
  StockTickInterface tick6=new StockTick(6,"ACME",10,System.currentTimeMillis(),3);
  StockTickInterface tick7=new StockTick(7,"ACME",10,System.currentTimeMillis(),5);
  StockTickInterface tick8=new StockTick(8,"ACME",10,System.currentTimeMillis(),3);
  InternalFactHandle fh1=(InternalFactHandle)ksession.insert(tick1);
  clock.advanceTime(4,TimeUnit.MILLISECONDS);
  InternalFactHandle fh2=(InternalFactHandle)ksession.insert(tick2);
  clock.advanceTime(4,TimeUnit.MILLISECONDS);
  ksession.insert(tick3);
  clock.advanceTime(4,TimeUnit.MILLISECONDS);
  ksession.insert(tick4);
  ksession.insert(tick5);
  clock.advanceTime(1,TimeUnit.MILLISECONDS);
  ksession.insert(tick6);
  ksession.insert(tick7);
  clock.advanceTime(2,TimeUnit.MILLISECONDS);
  ksession.insert(tick8);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  StockTick[] stocks=(StockTick[])list.get(0);
  assertSame(tick1,stocks[0]);
  assertSame(tick2,stocks[1]);
}
