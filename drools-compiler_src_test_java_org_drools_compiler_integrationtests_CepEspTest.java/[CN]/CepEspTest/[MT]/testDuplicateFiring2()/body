{
  String drl="package org.test;\n" + "import org.drools.compiler.StockTick;\n " + ""+ "global java.util.List list \n"+ ""+ "declare StockTick @role(event) end \n"+ ""+ "rule Tick when $s : StockTick() then System.out.println( $s ); end \n"+ ""+ "rule \"slidingTimeCount\"\n"+ "when\n"+ "\t$n: Number ( intValue > 0 ) from accumulate ( $e: StockTick() over window:time(3s), count($e))\n"+ "then\n"+ "  list.add( $n ); \n"+ "  System.out.println( \"Events in last 3 seconds: \" + $n );\n"+ "end"+ "";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(drl.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KieBaseConfiguration baseConfig=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  baseConfig.setOption(EventProcessingOption.CLOUD);
  baseConfig.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(baseConfig);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  KieSessionConfiguration sessionConfig=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  sessionConfig.setOption(ClockTypeOption.get("pseudo"));
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(sessionConfig,null);
  SessionPseudoClock clock=ksession.getSessionClock();
  ArrayList list=new ArrayList();
  ksession.setGlobal("list",list);
  for (int i=1; i < 3; i++) {
    StockTick event=new StockTick((i - 1),"XXX",1.0,0);
    clock.advanceTime(1001,TimeUnit.MILLISECONDS);
    ksession.insert(event);
    System.out.println(i + ". rule invocation");
    ksession.fireAllRules();
  }
  clock.advanceTime(3001,TimeUnit.MILLISECONDS);
  StockTick event=new StockTick(3,"XXX",1.0,0);
  System.out.println("3. rule invocation");
  ksession.insert(event);
  ksession.fireAllRules();
  clock.advanceTime(3001,TimeUnit.MILLISECONDS);
  StockTick event2=new StockTick(3,"XXX",1.0,0);
  System.out.println("4. rule invocation");
  ksession.insert(event2);
  ksession.fireAllRules();
  ksession.dispose();
  assertEquals(Arrays.asList(1L,2L,1L,1L),list);
}
