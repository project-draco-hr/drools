{
  String drl="import org.drools.compiler.StockTick;\n " + "declare StockTick\n" + " @role( event )\n"+ " @timestamp( time )\n"+ "end\n"+ "rule Clear \n"+ "when\n"+ " $droo : StockTick( company == \"DROO\" )\n"+ "then\n"+ " delete($droo);\n"+ "end\n"+ "rule Cancel\n"+ "when\n"+ " $oord : StockTick( company != \"DROO\" )\n"+ " not StockTick( company == \"DROO\" )\n"+ "then\n"+ "end";
  KieHelper helper=new KieHelper();
  helper.addContent(drl,ResourceType.DRL);
  KieSession ksession=helper.build(EventProcessingOption.STREAM).newKieSession();
  assertEquals("FactCount should be 0[1]",0,ksession.getFactCount());
  for (int j=0; j < 100; j++) {
    ksession.insert(new StockTick(0,"DROO",1.00));
  }
  ksession.fireAllRules();
  assertEquals("FactCount should still be 0[2]",0,ksession.getFactCount());
  ((DefaultAgenda)ksession.getAgenda()).getGarbageCollector().forceGcUnlinkedRules();
  NodeMemories nm=((StatefulKnowledgeSessionImpl)ksession).getNodeMemories();
  for (int j=0; j < nm.length(); j++) {
    Memory mem=nm.peekNodeMemory(j);
    if (mem != null && mem instanceof PathMemory) {
      PathMemory pathMemory=(PathMemory)mem;
      StreamTupleEntryQueue kiu=pathMemory.getStreamQueue();
      System.out.println(kiu + " >> " + kiu.size());
      assertEquals(0,kiu.size());
    }
  }
}
