{
  String drl="package org.test;\n" + "import org.drools.compiler.StockTick;\n " + ""+ "global java.util.List list \n"+ ""+ "declare StockTick @role(event) end \n"+ ""+ "rule \"slidingTimeCount\"\n"+ "when\n"+ "\t$n: Number ( intValue > 0 ) from accumulate ( $e: StockTick() over window:time(300ms) from entry-point SensorEventStream, count($e))\n"+ "then\n"+ "  list.add( $n ); \n"+ "  System.out.println( \"Events in last 3 seconds: \" + $n );\n"+ "end"+ ""+ "\n"+ "rule \"timerRuleAfterAllEvents\"\n"+ "        timer ( int: 2s )\n"+ "when\n"+ "        $room : String( )\n"+ "then\n"+ "  list.add( -1 ); \n"+ "  System.out.println(\"2sec after room was modified\");\n"+ "end "+ "";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(drl.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KieBaseConfiguration baseConfig=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  baseConfig.setOption(EventProcessingOption.STREAM);
  baseConfig.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(baseConfig);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  KieSessionConfiguration sessionConfig=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  sessionConfig.setOption(ClockTypeOption.get("realtime"));
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(sessionConfig,null);
  ArrayList list=new ArrayList();
  ksession.setGlobal("list",list);
  EntryPoint sensorEventStream=ksession.getEntryPoint("SensorEventStream");
  ksession.insert("Go");
  System.out.println("1. fireAllRules()");
  for (int i=2; i < 8; i++) {
    StockTick event=new StockTick((i - 1),"XXX",1.0,0);
    sensorEventStream.insert(event);
    System.out.println(i + ". fireAllRules()");
    ksession.fireAllRules();
    Thread.sleep(105);
  }
  Thread.sleep(100 * 40 * 1);
  assertEquals(Arrays.asList(1L,2L,3L,3L,3L,3L,-1),list);
  ksession.dispose();
}
