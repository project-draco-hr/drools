{
  KieBaseConfiguration conf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  conf.setOption(EventProcessingOption.STREAM);
  final KnowledgeBase kbase=loadKnowledgeBase(conf,"test_CEP_DelayingNot.drl");
  KieSessionConfiguration sconf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  sconf.setOption(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
  StatefulKnowledgeSession wm=createKnowledgeSession(kbase,sconf);
  final Rule rule=(Rule)kbase.getRule("org.drools.compiler","Delaying Not");
  assertEquals(10000,((DurationTimer)rule.getTimer()).getDuration());
  final List results=new ArrayList();
  wm.setGlobal("results",results);
  SessionPseudoClock clock=(SessionPseudoClock)wm.getSessionClock();
  clock.advanceTime(10,TimeUnit.SECONDS);
  StockTickInterface st1O=new StockTick(1,"DROO",100,clock.getCurrentTime());
  EventFactHandle st1=(EventFactHandle)wm.insert(st1O);
  wm.fireAllRules();
  assertEquals(0,results.size());
  clock.advanceTime(5,TimeUnit.SECONDS);
  EventFactHandle st2=(EventFactHandle)wm.insert(new StockTick(1,"DROO",80,clock.getCurrentTime()));
  wm.fireAllRules();
  assertEquals(0,results.size());
  wm.fireAllRules();
  clock.advanceTime(6,TimeUnit.SECONDS);
  wm.fireAllRules();
  assertEquals(1,results.size());
  assertEquals(st1O,results.get(0));
}
