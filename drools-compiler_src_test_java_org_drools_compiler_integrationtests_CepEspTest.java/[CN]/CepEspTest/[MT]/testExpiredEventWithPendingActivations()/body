{
  String drl="package org.drools.drools_usage_pZB7GRxZp64;\n" + "\n" + "declare time_Var\n"+ "    @role( event )\n"+ "    @expires( 1s )\n"+ "    value : Long\n"+ "end\n"+ "\n"+ "declare ExpiringEvent_Var\n"+ "    @role( event )\n"+ "    @expires( 10s )\n"+ "    value : Double\n"+ "end\n"+ "\n"+ "declare window ExpiringEvent_Window1 ExpiringEvent_Var() over window:length(1) end\n"+ "\n"+ "rule \"Expring variable - Init\"\n"+ "activation-group \"ExpiringEvent\"\n"+ "    when\n"+ "        $t : time_Var($now : Value != null) over window:length(1)\n"+ "\n"+ "        not ExpiringEvent_Var()\n"+ "\n"+ "    then\n"+ "        System.out.println($now + \" : Init\");\n"+ "        insert(new ExpiringEvent_Var(0.0));\n"+ "end\n"+ "\n"+ "rule \"Expiring variable - Rule 1\"\n"+ "activation-group \"ExpiringEvent\"\n"+ "    when\n"+ "        $t : time_Var($now : Value != null) over window:length(1)\n"+ "\n"+ "        ExpiringEvent_Var(this before $t, $previousValue : Value < 1.0) from window ExpiringEvent_Window1\n"+ "\n"+ "    then\n"+ "        System.out.println($now + \" : Rule 1\");\n"+ "        insert(new ExpiringEvent_Var(1.0));\n"+ "\n"+ "end\n"+ "\n"+ "rule \"Expiring variable - Rule 2\"\n"+ "activation-group \"ExpiringEvent\"\n"+ "    when\n"+ "        $t : time_Var($now : Value != null) over window:length(1)\n"+ "\n"+ "        ExpiringEvent_Var(this before $t, $previousValue : Value) from window ExpiringEvent_Window1\n"+ "\n"+ "    then\n"+ "        System.out.println($now + \" : Rule 2\");\n"+ "        insert(new ExpiringEvent_Var($previousValue));\n"+ "\n"+ "end";
  KieServices kieServices=KieServices.Factory.get();
  KieBaseConfiguration kieBaseConf=KieServices.Factory.get().newKieBaseConfiguration();
  kieBaseConf.setOption(EventProcessingOption.STREAM);
  KieBase kieBase=new KieHelper().addContent(drl,ResourceType.DRL).build(kieBaseConf);
  KieSessionConfiguration config=kieServices.newKieSessionConfiguration();
  config.setOption(ClockTypeOption.get("pseudo"));
  KieSession session=kieBase.newKieSession(config,null);
  SessionPseudoClock clock=session.getSessionClock();
  FactType time_VarType=kieBase.getFactType("org.drools.drools_usage_pZB7GRxZp64","time_Var");
  clock.advanceTime(1472057509000L,TimeUnit.MILLISECONDS);
  Object time_Var=time_VarType.newInstance();
  time_VarType.set(time_Var,"value",1472057509000L);
  session.insert(time_Var);
  session.fireAllRules();
  for (int i=0; i < 10; i++) {
    clock.advanceTime(1,TimeUnit.SECONDS);
    Object time_VarP1=time_VarType.newInstance();
    time_VarType.set(time_VarP1,"value",clock.getCurrentTime());
    session.insert(time_VarP1);
    session.fireAllRules();
  }
  clock.advanceTime(1,TimeUnit.SECONDS);
  session.fireAllRules();
  clock.advanceTime(1,TimeUnit.HOURS);
  Object time_VarP1=time_VarType.newInstance();
  time_VarType.set(time_VarP1,"value",clock.getCurrentTime());
  session.insert(time_VarP1);
  session.fireAllRules();
  clock.advanceTime(1,TimeUnit.HOURS);
  Object time_VarP2=time_VarType.newInstance();
  time_VarType.set(time_VarP2,"value",clock.getCurrentTime());
  session.insert(time_VarP2);
  session.fireAllRules();
  clock.advanceTime(1,TimeUnit.HOURS);
  session.fireAllRules();
  for (  Object o : session.getFactHandles()) {
    if (o instanceof EventFactHandle) {
      EventFactHandle eventFactHandle=(EventFactHandle)o;
      assertFalse(eventFactHandle.isExpired());
    }
  }
}
