{
  String str="package testing2;\n" + "\n" + "import java.util.*;\n"+ "import org.drools.compiler.StockTick;\n"+ ""+ "global List list;\n"+ ""+ "declare StockTick\n"+ " @role( event )\n"+ " @duration( duration )\n"+ "end\n"+ "\n"+ "rule test\n"+ "when\n"+ " $primary : StockTick( $name : company ) over window:length(1)\n"+ " accumulate ( "+ " $tick : StockTick( company == $name ) , "+ " $num : count( $tick ) )\n"+ "then\n"+ " System.out.println(\"Found name: \" + $primary + \" with \" +$num );\n"+ " list.add( $num.intValue() ); \n"+ "end\n"+ "";
  KieBaseConfiguration config=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  config.setOption(EventProcessingOption.STREAM);
  KnowledgeBase kbase=loadKnowledgeBaseFromString(config,str);
  KieSessionConfiguration conf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  conf.setOption(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(conf,null);
  int seq=0;
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  ksession.insert(new StockTick(seq++,"AAA",10.0,10L));
  ksession.fireAllRules();
  assertEquals(list,Arrays.asList(1));
  ksession.insert(new StockTick(seq++,"AAA",15.0,10L));
  ksession.fireAllRules();
  assertEquals(list,Arrays.asList(1,2));
  ksession.insert(new StockTick(seq++,"CCC",10.0,10L));
  ksession.fireAllRules();
  assertEquals(list,Arrays.asList(1,2,1));
  System.out.println(" ___________________________________- ");
  ksession.insert(new StockTick(seq++,"DDD",13.0,20L));
  ksession.fireAllRules();
  assertEquals(list,Arrays.asList(1,2,1,1));
  ksession.insert(new StockTick(seq++,"AAA",11.0,20L));
  ksession.fireAllRules();
  assertEquals(list,Arrays.asList(1,2,1,1,3));
  ksession.fireAllRules();
}
