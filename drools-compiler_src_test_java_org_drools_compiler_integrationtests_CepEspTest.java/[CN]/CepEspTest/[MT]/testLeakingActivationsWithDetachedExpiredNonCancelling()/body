{
  String drl="package org.drools;\n" + "\n" + "import java.util.List\n"+ "\n"+ "global List list; \n"+ ""+ "declare Motion\n"+ "    @role( event )\n"+ "    @expires( 10ms )\n"+ "    @timestamp( timestamp )\n"+ "    timestamp : long\n"+ "end\n"+ "\n"+ "declare Recording\n"+ "end\n"+ "\n"+ ""+ "rule Init salience 1000 when\n"+ "    $l : Long() \n"+ "then\n"+ "    System.out.println( \" Insert motion \" + $l );\n"+ "    insert( new Motion( $l ) ); \n"+ "end\n"+ ""+ "rule \"StartRecording\" when\n"+ "   $mot : Motion()\n"+ "   not Recording()\n"+ " then\n"+ "   list.add( $mot ); \n "+ "   System.out.println(\"Recording started\");\n"+ "   insert(new Recording());\n"+ "end\n";
  final KieBaseConfiguration kbconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kbconf.setOption(EventProcessingOption.STREAM);
  final KnowledgeBase kbase=loadKnowledgeBaseFromString(kbconf,drl);
  KieSessionConfiguration ksconf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  ksconf.setOption(ClockTypeOption.get(ClockType.REALTIME_CLOCK.getId()));
  StatefulKnowledgeSession ksession=createKnowledgeSession(kbase,ksconf);
  List<Number> list=new ArrayList<Number>();
  ksession.setGlobal("list",list);
  ksession.insert(new Long(1000));
  ksession.insert(new Long(1001));
  ksession.insert(new Long(1002));
  Thread.sleep(1000);
  ksession.fireAllRules();
  assertEquals(1,list.size());
}
