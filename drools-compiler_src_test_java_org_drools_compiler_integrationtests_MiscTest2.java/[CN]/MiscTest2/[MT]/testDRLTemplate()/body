{
  String template="@declare{\"drl\"}@includeNamed{\"ced\"; node=root }@end{}" + "" + "@declare{\"ced\"}"+ "@if{ node.base==1 } @includeNamed{ \"cedX\"; connect=\"AND\"; args=node.list }"+ "@elseif{ node.base ==2 }@includeNamed{ \"cedX\"; connect=\"OR\"; args=node.list }"+ "@end{}"+ "@end{}"+ ""+ "@declare{\"cedX\"}@{connect}@foreach{child : args}\n"+ " @includeNamed{\"ced\"; node=child; } @end{} @{connect}@end{}\n";
  TemplateRegistry REPORT_REGISTRY=new SimpleTemplateRegistry();
  OptimizerFactory.setDefaultOptimizer("reflective");
  REPORT_REGISTRY.addNamedTemplate("drl",TemplateCompiler.compileTemplate(template));
  TemplateRuntime.execute(REPORT_REGISTRY.getNamedTemplate("drl"),null,REPORT_REGISTRY);
  Map<String,Object> context=new HashMap<String,Object>();
  context.put("root",new Node(1,Arrays.asList(new Node(2,Arrays.asList(new Node(1,Collections.EMPTY_LIST))))));
  String result=(String)TemplateRuntime.execute(REPORT_REGISTRY.getNamedTemplate("drl"),null,new MapVariableResolverFactory(context),REPORT_REGISTRY);
  System.out.println(result);
  Matcher matcher=Pattern.compile("OR").matcher(result);
  assertTrue(matcher.find());
  assertTrue(matcher.find());
}
