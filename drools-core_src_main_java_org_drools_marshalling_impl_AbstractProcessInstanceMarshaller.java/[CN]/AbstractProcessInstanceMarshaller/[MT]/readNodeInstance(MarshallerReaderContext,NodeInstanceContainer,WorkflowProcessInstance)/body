{
  ObjectInputStream stream=context.stream;
  long id=stream.readLong();
  long nodeId=stream.readLong();
  int nodeType=stream.readShort();
  NodeInstanceImpl nodeInstance=readNodeInstanceContent(nodeType,stream,context,processInstance);
  nodeInstance.setNodeId(nodeId);
  nodeInstance.setNodeInstanceContainer(nodeInstanceContainer);
  nodeInstance.setProcessInstance(processInstance);
  nodeInstance.setId(id);
switch (nodeType) {
case PersisterEnums.COMPOSITE_NODE_INSTANCE:
case PersisterEnums.DYNAMIC_NODE_INSTANCE:
    int nbVariables=stream.readInt();
  if (nbVariables > 0) {
    Context variableScope=((org.drools.process.core.Process)processInstance.getProcess()).getDefaultContext(VariableScope.VARIABLE_SCOPE);
    VariableScopeInstance variableScopeInstance=(VariableScopeInstance)((CompositeContextNodeInstance)nodeInstance).getContextInstance(variableScope);
    for (int i=0; i < nbVariables; i++) {
      String name=stream.readUTF();
      try {
        Object value=stream.readObject();
        variableScopeInstance.setVariable(name,value);
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException("Could not reload variable " + name);
      }
    }
  }
while (stream.readShort() == PersisterEnums.NODE_INSTANCE) {
  readNodeInstance(context,(CompositeContextNodeInstance)nodeInstance,processInstance);
}
int exclusiveGroupInstances=stream.readInt();
for (int i=0; i < exclusiveGroupInstances; i++) {
ExclusiveGroupInstance exclusiveGroupInstance=new ExclusiveGroupInstance();
processInstance.addContextInstance(ExclusiveGroup.EXCLUSIVE_GROUP,exclusiveGroupInstance);
int nodeInstances=stream.readInt();
for (int j=0; j < nodeInstances; j++) {
long nodeInstanceId=stream.readLong();
NodeInstance groupNodeInstance=processInstance.getNodeInstance(nodeInstanceId);
if (groupNodeInstance == null) {
  throw new IllegalArgumentException("Could not find node instance when deserializing exclusive group instance: " + nodeInstanceId);
}
exclusiveGroupInstance.addNodeInstance(groupNodeInstance);
}
}
break;
case PersisterEnums.FOR_EACH_NODE_INSTANCE:
while (stream.readShort() == PersisterEnums.NODE_INSTANCE) {
readNodeInstance(context,(ForEachNodeInstance)nodeInstance,processInstance);
}
break;
default :
}
return nodeInstance;
}
