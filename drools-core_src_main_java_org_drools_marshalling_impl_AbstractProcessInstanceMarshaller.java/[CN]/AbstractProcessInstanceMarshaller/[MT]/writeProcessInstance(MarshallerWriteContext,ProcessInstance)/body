{
  WorkflowProcessInstanceImpl workFlow=(WorkflowProcessInstanceImpl)processInstance;
  ObjectOutputStream stream=context.stream;
  stream.writeLong(workFlow.getId());
  stream.writeUTF(workFlow.getProcessId());
  stream.writeInt(workFlow.getState());
  stream.writeLong(workFlow.getNodeInstanceCounter());
  VariableScopeInstance variableScopeInstance=(VariableScopeInstance)workFlow.getContextInstance(VariableScope.VARIABLE_SCOPE);
  Map<String,Object> variables=variableScopeInstance.getVariables();
  List<String> keys=new ArrayList<String>(variables.keySet());
  Collections.sort(keys,new Comparator<String>(){
    public int compare(    String o1,    String o2){
      return o1.compareTo(o2);
    }
  }
);
  stream.writeInt(keys.size());
  for (  String key : keys) {
    stream.writeUTF(key);
    stream.writeObject(variables.get(key));
  }
  SwimlaneContextInstance swimlaneContextInstance=(SwimlaneContextInstance)workFlow.getContextInstance(SwimlaneContext.SWIMLANE_SCOPE);
  if (swimlaneContextInstance != null) {
    Map<String,String> swimlaneActors=swimlaneContextInstance.getSwimlaneActors();
    stream.writeInt(swimlaneActors.size());
    for (    Map.Entry<String,String> entry : swimlaneActors.entrySet()) {
      stream.writeUTF(entry.getKey());
      stream.writeUTF(entry.getValue());
    }
  }
  List<NodeInstance> nodeInstances=new ArrayList<NodeInstance>(workFlow.getNodeInstances());
  Collections.sort(nodeInstances,new Comparator<NodeInstance>(){
    public int compare(    NodeInstance o1,    NodeInstance o2){
      return (int)(o1.getId() - o2.getId());
    }
  }
);
  for (  NodeInstance nodeInstance : nodeInstances) {
    stream.writeShort(PersisterEnums.NODE_INSTANCE);
    writeNodeInstance(context,nodeInstance);
  }
  stream.writeShort(PersisterEnums.END);
}
