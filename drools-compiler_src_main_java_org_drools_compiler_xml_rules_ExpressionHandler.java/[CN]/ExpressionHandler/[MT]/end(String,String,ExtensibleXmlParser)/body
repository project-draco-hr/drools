{
  final Element element=parser.endElementBuilder();
  final String expression=((org.w3c.dom.Text)element.getChildNodes().item(0)).getWholeText() + ";";
  emptyContentCheck(localName,expression,parser);
  FromDescr parent=(FromDescr)parser.getParent();
  final CharStream charStream=new ANTLRStringStream(expression.trim());
  final DRL5xLexer lexer=new DRL5xLexer(charStream);
  final TokenStream tokenStream=new CommonTokenStream(lexer);
  final DRL5xParser drlParser=new DRL5xParser(tokenStream);
  drlParser.setTreeAdaptor(new DroolsTreeAdaptor());
  try {
    Tree fromSourceTree=(Tree)drlParser.from_source().getTree();
    if (!drlParser.hasErrors()) {
      CommonTreeNodeStream nodes=new CommonTreeNodeStream(fromSourceTree);
      nodes.setTokenStream(tokenStream);
      DescrBuilderTree5x walker=new DescrBuilderTree5x(nodes);
      from_source_clause_return fromReturn=walker.from_source_clause();
      parent.setDataSource(fromReturn.retAccessorDescr);
      parent=fromReturn.fromDescr;
    }
 else {
      throw new SAXParseException("<" + localName + "> must have a valid expression content ",parser.getLocator());
    }
  }
 catch (  final RecognitionException e) {
    throw new SAXParseException("<" + localName + "> must have a valid expression content ",parser.getLocator());
  }
  return null;
}
