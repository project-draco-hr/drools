{
  int[] testA={1,3};
  int[] testB={1,3};
  boolean same=compareInstances(testA,testA);
  assertTrue(same);
  printResult(same,testA,testB);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  KnowledgeBase[] testArrA={kbase};
  KnowledgeBase[] testArrB={kbase,null};
  same=compareInstances(testArrA,testArrB);
  assertTrue(!same);
  printResult(same,testArrA,testArrB);
  Environment[] testEnvA={EnvironmentFactory.newEnvironment(),EnvironmentFactory.newEnvironment()};
  Environment[] testEnvB={EnvironmentFactory.newEnvironment(),EnvironmentFactory.newEnvironment()};
  testEnvA[0].set(DROOLS_PERSISTENCE_UNIT_NAME,DROOLS_PERSISTENCE_UNIT_NAME);
  same=compareInstances(testEnvA,testEnvB);
  assertTrue(!same);
  printResult(same,testEnvA,testEnvB);
  PriorityQueue<Short> priShortA=new PriorityQueue<Short>();
  PriorityQueue<Short> priShortB=new PriorityQueue<Short>();
  short[] shortList={(short)6,(short)8,(short)6,(short)1,(short)8,(short)5,(short)9};
  for (int i=0; i < shortList.length; ++i) {
    priShortA.add(shortList[i]);
    priShortB.add(shortList[i]);
  }
  priShortB.add((short)0);
  assertFalse("Should be unequal",compareInstances(priShortA,priShortB));
  assertEquals(new Short((short)0),priShortB.poll());
  assertTrue("Should be equal",compareInstances(priShortA,priShortB));
}
