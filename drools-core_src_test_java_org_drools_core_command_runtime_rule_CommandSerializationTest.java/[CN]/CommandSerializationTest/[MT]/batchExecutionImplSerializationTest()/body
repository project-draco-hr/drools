{
  DefaultFactHandle factHandle=new DefaultFactHandle(13,"entry-point-id",42,84,400l,"fact");
  BatchExecutionCommandImpl batchCmd=new BatchExecutionCommandImpl();
  batchCmd.setLookup("lookup");
{
    AbortWorkItemCommand cmd=new AbortWorkItemCommand(23l);
    batchCmd.getCommands().add(cmd);
  }
{
    String externalForm=factHandle.toExternalForm();
    assertEquals("FactHandle string",externalForm,DisconnectedFactHandle.newFrom(factHandle).toExternalForm());
    DeleteCommand cmd=new DeleteCommand(factHandle);
    batchCmd.getCommands().add(cmd);
  }
{
    GetGlobalCommand cmd=new GetGlobalCommand("global-id");
    cmd.setOutIdentifier("out-id");
    batchCmd.getCommands().add(cmd);
  }
{
    SetGlobalCommand cmd=new SetGlobalCommand("global-id",new Integer(23));
    cmd.setOutIdentifier("out-id");
    batchCmd.getCommands().add(cmd);
  }
{
    InsertElementsCommand cmd=new InsertElementsCommand();
    cmd.setEntryPoint("entry-point");
    cmd.setOutIdentifier("out-id");
    cmd.setReturnObject(true);
    Map<String,Object> mapObj=new HashMap<String,Object>();
    mapObj.put("key","value");
    List<Object> objects=new ArrayList<Object>(1);
    objects.add(mapObj);
    cmd.setObjects(objects);
    batchCmd.getCommands().add(cmd);
  }
{
    QueryCommand cmd=new QueryCommand();
    List<Object> args=new ArrayList<Object>(3);
    args.add("this");
    args.add(42);
    args.add("other");
    cmd.setArguments(args);
    cmd.setName("query-name");
    cmd.setOutIdentifier("out-id");
    batchCmd.getCommands().add(cmd);
  }
{
    InsertObjectCommand cmd=new InsertObjectCommand();
    cmd.setEntryPoint("entry-point");
    cmd.setOutIdentifier("out-id");
    cmd.setReturnObject(true);
    cmd.setObject("object");
    batchCmd.getCommands().add(cmd);
  }
{
    ModifyCommand cmd=new ModifyCommand();
    cmd.setFactHandle(DisconnectedFactHandle.newFrom(factHandle));
    List<Setter> setters=new ArrayList<Setter>(2);
    Setter setter=new Setter(){
      @Override public String getValue(){
        return "blue";
      }
      @Override public String getAccessor(){
        return "heart";
      }
    }
;
    setters.add(setter);
    setter=new Setter(){
      @Override public String getValue(){
        return "hot";
      }
      @Override public String getAccessor(){
        return "fingers";
      }
    }
;
    setters.add(setter);
    cmd.setSetters(setters);
    batchCmd.getCommands().add(cmd);
  }
{
    GetObjectCommand cmd=new GetObjectCommand(factHandle,"out-id");
    batchCmd.getCommands().add(cmd);
  }
{
    AgendaFilter[] filters=new AgendaFilter[4];
    filters[0]=new RuleNameEndsWithAgendaFilter("suffix",false);
    filters[1]=new RuleNameEqualsAgendaFilter("name",true);
    filters[2]=new RuleNameMatchesAgendaFilter("regexp",false);
    filters[3]=new RuleNameStartsWithAgendaFilter("prefix",false);
    for (    AgendaFilter filter : filters) {
      FireAllRulesCommand cmd=new FireAllRulesCommand(randomString(),random.nextInt(1000),filter);
      batchCmd.getCommands().add(cmd);
    }
  }
{
    AgendaFilter[] filters=new AgendaFilter[4];
    filters[0]=new RuleNameEndsWithAgendaFilter("suffix",false);
    filters[1]=new RuleNameEqualsAgendaFilter("name",true);
    filters[2]=new RuleNameMatchesAgendaFilter("regexp",false);
    filters[3]=new RuleNameStartsWithAgendaFilter("prefix",false);
    for (    AgendaFilter filter : filters) {
      FireUntilHaltCommand cmd=new FireUntilHaltCommand(filter);
      batchCmd.getCommands().add(cmd);
    }
  }
{
    Map<String,Object> results=new HashMap<String,Object>(1);
    List<String> resultValList=new ArrayList<String>(2);
    resultValList.add("yellow");
    resultValList.add("chances");
    results.put("list",resultValList);
    CompleteWorkItemCommand cmd=new CompleteWorkItemCommand(random.nextInt(1000),results);
    batchCmd.getCommands().add(cmd);
  }
{
    ClassObjectFilter filter=new ClassObjectFilter(String.class);
    GetObjectsCommand cmd=new GetObjectsCommand(filter,"out-id");
    batchCmd.getCommands().add(cmd);
  }
{
    AgendaGroupSetFocusCommand cmd=new AgendaGroupSetFocusCommand(randomString());
    batchCmd.getCommands().add(cmd);
  }
{
    ClearActivationGroupCommand cmd=new ClearActivationGroupCommand(randomString());
    batchCmd.getCommands().add(cmd);
  }
{
    ClearAgendaCommand cmd=new ClearAgendaCommand();
    batchCmd.getCommands().add(cmd);
  }
{
    ClearAgendaGroupCommand cmd=new ClearAgendaGroupCommand(randomString());
    batchCmd.getCommands().add(cmd);
  }
{
    ClearRuleFlowGroupCommand cmd=new ClearRuleFlowGroupCommand(randomString());
    batchCmd.getCommands().add(cmd);
  }
  BatchExecutionCommandImpl batchCmdCopy=roundTrip(batchCmd);
  assertEquals("Batch cmd lookup",batchCmd.getLookup(),batchCmdCopy.getLookup());
  assertEquals("Batch cmd num commands",batchCmd.getCommands().size(),batchCmdCopy.getCommands().size());
  for (  GenericCommand copyCmd : batchCmdCopy.getCommands()) {
    for (    GenericCommand origCmd : batchCmd.getCommands()) {
      Class cmdClass=origCmd.getClass();
      if (copyCmd.getClass().equals(cmdClass)) {
        if (cmdClass.equals(DeleteCommand.class)) {
          compareFactHandles(((DeleteCommand)origCmd).getFactHandle(),((DeleteCommand)copyCmd).getFactHandle(),DeleteCommand.class);
        }
 else         if (cmdClass.equals(FireAllRulesCommand.class)) {
          AgendaFilter origFilter=((FireAllRulesCommand)origCmd).getAgendaFilter();
          AgendaFilter copyFilter=((FireAllRulesCommand)copyCmd).getAgendaFilter();
          if (!origFilter.getClass().equals(copyFilter.getClass())) {
            continue;
          }
          Class agendaFilterClass=origFilter.getClass();
          for (          Field agendaFilterField : agendaFilterClass.getDeclaredFields()) {
            agendaFilterField.setAccessible(true);
            Object afFieldOrigVal=agendaFilterField.get(origFilter);
            Object afFieldCopyVal=agendaFilterField.get(copyFilter);
            if (afFieldOrigVal instanceof Pattern) {
              afFieldOrigVal=((Pattern)afFieldOrigVal).pattern();
              afFieldCopyVal=((Pattern)afFieldCopyVal).pattern();
            }
            assertEquals(agendaFilterClass.getSimpleName() + "." + agendaFilterField.getName(),afFieldOrigVal,afFieldCopyVal);
          }
          assertEquals(FireAllRulesCommand.class.getSimpleName() + ".max",((FireAllRulesCommand)origCmd).getMax(),((FireAllRulesCommand)copyCmd).getMax());
          assertEquals(FireAllRulesCommand.class.getSimpleName() + ".outIdentifier",((FireAllRulesCommand)origCmd).getOutIdentifier(),((FireAllRulesCommand)copyCmd).getOutIdentifier());
        }
 else         if (cmdClass.equals(FireUntilHaltCommand.class)) {
          AgendaFilter origFilter=((FireUntilHaltCommand)origCmd).getAgendaFilter();
          AgendaFilter copyFilter=((FireUntilHaltCommand)copyCmd).getAgendaFilter();
          if (!origFilter.getClass().equals(copyFilter.getClass())) {
            continue;
          }
          Class agendaFilterClass=origFilter.getClass();
          for (          Field agendaFilterField : agendaFilterClass.getDeclaredFields()) {
            agendaFilterField.setAccessible(true);
            Object afFieldOrigVal=agendaFilterField.get(origFilter);
            Object afFieldCopyVal=agendaFilterField.get(copyFilter);
            if (afFieldOrigVal instanceof Pattern) {
              afFieldOrigVal=((Pattern)afFieldOrigVal).pattern();
              afFieldCopyVal=((Pattern)afFieldCopyVal).pattern();
            }
            assertEquals(agendaFilterClass.getSimpleName() + "." + agendaFilterField.getName(),afFieldOrigVal,afFieldCopyVal);
          }
        }
 else {
          for (          Field cmdField : cmdClass.getDeclaredFields()) {
            cmdField.setAccessible(true);
            if (Modifier.isTransient(cmdField.getModifiers())) {
              continue;
            }
            Object origVal=cmdField.get(origCmd);
            assertNotNull(cmdClass.getSimpleName() + "." + cmdField.getName(),origVal);
            Object copyVal=cmdField.get(copyCmd);
            assertNotNull("Round-tripped " + cmdClass.getSimpleName() + "."+ cmdField.getName(),copyVal);
            if (origVal instanceof FactHandle) {
              compareFactHandles((FactHandle)origVal,(FactHandle)copyVal,cmdClass);
            }
 else             if (origVal instanceof ClassObjectSerializationFilter) {
              assertEquals("Original compared to Round-tripped " + cmdClass.getSimpleName() + "."+ cmdField.getName(),((ClassObjectSerializationFilter)origVal).getClass(),((ClassObjectSerializationFilter)copyVal).getClass());
            }
 else             if (origVal instanceof List) {
              List origList=(List)origVal;
              if (((List)copyVal).isEmpty()) {
                assertTrue("Original compared to Round-tripped " + cmdClass.getSimpleName() + "."+ cmdField.getName(),origList.isEmpty());
              }
 else {
                if (origList.get(0) instanceof Setter) {
                  for (                  Object obj : (List)origVal) {
                    assertTrue("Expected a " + Setter.class.getSimpleName() + " instance (not "+ obj.getClass().getSimpleName()+ " in "+ cmdClass.getSimpleName()+ "."+ cmdField.getName(),obj instanceof Setter);
                    Iterator<Object> iter=((List)copyVal).iterator();
                    while (iter.hasNext()) {
                      Setter copySetter=(Setter)iter.next();
                      if (((Setter)obj).getAccessor().equals(copySetter.getAccessor())) {
                        assertEquals("Original compared to Round-tripped " + cmdClass.getSimpleName() + "."+ cmdField.getName(),((Setter)obj).getValue(),copySetter.getValue());
                        iter.remove();
                      }
                    }
                  }
                  assertTrue("Original compared to Round-tripped " + cmdClass.getSimpleName() + "."+ cmdField.getName(),((List)copyVal).isEmpty());
                }
 else                 if (origList.get(0) instanceof Map) {
                  Map copyMap=(Map)((List)copyVal).get(0);
                  for (                  Object entry : ((Map)origList.get(0)).entrySet()) {
                    assertTrue("Original compared to Round-tripped " + cmdClass.getSimpleName() + "."+ cmdField.getName(),(copyMap).containsKey(((Entry)entry).getKey()));
                  }
                }
              }
            }
 else {
              assertTrue("Original compared to Round-tripped " + cmdClass.getSimpleName() + "."+ cmdField.getName(),origVal.equals(copyVal));
            }
          }
        }
      }
    }
  }
  Field commandsField=BatchExecutionCommandImpl.class.getDeclaredField("commands");
  XmlElements xmlElemsAnno=commandsField.getAnnotation(XmlElements.class);
  List<Class> cmdTypes=new ArrayList<Class>(xmlElemsAnno.value().length);
  for (  XmlElement xmlElem : xmlElemsAnno.value()) {
    cmdTypes.add(xmlElem.type());
  }
  cmdTypes.remove(SignalEventCommand.class);
  cmdTypes.remove(StartProcessCommand.class);
  for (  GenericCommand cmd : batchCmd.getCommands()) {
    cmdTypes.remove(cmd.getClass());
  }
  String cmdInstName=cmdTypes.isEmpty() ? "null" : cmdTypes.get(0).getSimpleName();
  assertTrue("Please add a " + cmdInstName + " instance to the "+ BatchExecutionCommandImpl.class.getSimpleName()+ " commands!",cmdTypes.isEmpty());
}
