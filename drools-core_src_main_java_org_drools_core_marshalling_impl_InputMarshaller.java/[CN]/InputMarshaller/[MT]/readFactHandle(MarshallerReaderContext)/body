{
  int type=context.stream.readInt();
  int id=context.stream.readInt();
  long recency=context.stream.readLong();
  long startTimeStamp=0;
  long duration=0;
  boolean expired=false;
  long activationsCount=0;
  if (type == 2) {
    startTimeStamp=context.stream.readLong();
    duration=context.stream.readLong();
    expired=context.stream.readBoolean();
    activationsCount=context.stream.readLong();
  }
  int strategyIndex=context.stream.readInt();
  Object object=null;
  ObjectMarshallingStrategy strategy=null;
  if (strategyIndex >= 0) {
    strategy=context.resolverStrategyFactory.getStrategy(strategyIndex);
  }
 else   if (strategyIndex == -2) {
    String strategyClassName=context.stream.readUTF();
    if (!StringUtils.isEmpty(strategyClassName)) {
      strategy=context.resolverStrategyFactory.getStrategyObject(strategyClassName);
      if (strategy == null) {
        throw new IllegalStateException("No strategy of type " + strategyClassName + " available.");
      }
    }
  }
  if (strategy != null) {
    object=strategy.read(context.stream);
  }
  EntryPoint entryPoint=null;
  if (context.readBoolean()) {
    String entryPointId=context.readUTF();
    if (entryPointId != null && !entryPointId.equals("")) {
      entryPoint=context.wm.getEntryPoints().get(entryPointId);
    }
  }
  EntryPointId confEP;
  if (entryPoint != null) {
    confEP=((NamedEntryPoint)entryPoint).getEntryPoint();
  }
 else {
    confEP=context.wm.getEntryPoint();
  }
  ObjectTypeConf typeConf=context.wm.getObjectTypeConfigurationRegistry().getObjectTypeConf(confEP,object);
  InternalFactHandle handle=null;
switch (type) {
case 0:
{
      handle=new DefaultFactHandle(id,object,recency,entryPoint,typeConf != null && typeConf.isTrait());
      break;
    }
case 1:
{
    handle=new QueryElementFactHandle(object,id,recency);
    break;
  }
case 2:
{
  handle=new EventFactHandle(id,object,recency,startTimeStamp,duration,entryPoint,typeConf != null && typeConf.isTrait());
  ((EventFactHandle)handle).setExpired(expired);
  ((EventFactHandle)handle).setActivationsCount(activationsCount);
  break;
}
default :
{
throw new IllegalStateException("Unable to marshal FactHandle, as type does not exist:" + type);
}
}
return handle;
}
