{
  List<MvelConstraint> combinableConstraints=new ArrayList<MvelConstraint>();
  for (  Constraint constraint : constraints) {
    if (constraint instanceof MvelConstraint && !((MvelConstraint)constraint).isUnification() && !((MvelConstraint)constraint).isIndexable()&& ((MvelConstraint)constraint).getType() == ConstraintType.BETA) {
      combinableConstraints.add((MvelConstraint)constraint);
    }
  }
  if (true || combinableConstraints.size() < 2) {
    return;
  }
  List<Declaration> declarations=new ArrayList<Declaration>();
  Set<String> declarationNames=new HashSet<String>();
  boolean isFirst=true;
  String packageName=null;
  StringBuilder expression=new StringBuilder(combinableConstraints.size() * 25);
  for (  MvelConstraint constraint : combinableConstraints) {
    constraints.remove(constraint);
    if (isFirst) {
      packageName=constraint.getPackageName();
      isFirst=false;
    }
 else {
      expression.append(" && ");
    }
    String constraintExpression=constraint.getExpression();
    boolean isComplex=constraintExpression.contains("&&") || constraintExpression.contains("||");
    if (isComplex) {
      expression.append("( ");
    }
    expression.append(constraintExpression);
    if (isComplex) {
      expression.append(" )");
    }
    for (    Declaration declaration : constraint.getRequiredDeclarations()) {
      if (declarationNames.add(declaration.getBindingName())) {
        declarations.add(declaration);
      }
    }
  }
  MvelConstraint combinedConstraint=new MvelConstraint(packageName,expression.toString(),declarations.toArray(new Declaration[declarations.size()]),null,false,null,null,false);
  addConstraint(combinedConstraint);
}
