{
  Graph<BayesVariable> graph=new BayesNetwork();
  GraphNode x0=addNode(graph);
  GraphNode x1=addNode(graph);
  GraphNode x2=addNode(graph);
  GraphNode x3=addNode(graph);
  GraphNode x4=addNode(graph);
  GraphNode x5=addNode(graph);
  GraphNode x6=addNode(graph);
  connectParentToChildren(x1,x2);
  connectParentToChildren(x1,x3);
  connectParentToChildren(x1,x6);
  connectParentToChildren(x2,x4);
  connectParentToChildren(x3,x5);
  connectParentToChildren(x4,x6);
  connectParentToChildren(x5,x6);
  x1.setContent(new BayesVariable<String>("x1",x0.getId(),new String[]{"a","b","c","d","e","f"},new double[][]{{0.1,0.1,0.1,0.1,0.1,0.1}}));
  x2.setContent(new BayesVariable<String>("x2",x0.getId(),new String[]{"a","b"},new double[][]{{0.1,0.1}}));
  x3.setContent(new BayesVariable<String>("x3",x0.getId(),new String[]{"a","b"},new double[][]{{0.1,0.1}}));
  x4.setContent(new BayesVariable<String>("x4",x0.getId(),new String[]{"a","b"},new double[][]{{0.1,0.1}}));
  x5.setContent(new BayesVariable<String>("x5",x0.getId(),new String[]{"a"},new double[][]{{0.1}}));
  x6.setContent(new BayesVariable<String>("x6",x0.getId(),new String[]{"a","b"},new double[][]{{0.1,0.1}}));
  JunctionTreeBuilder jtBuilder=new JunctionTreeBuilder(graph);
  boolean[][] clonedAdjMatrix=jtBuilder.cloneAdjacencyMarix(jtBuilder.getAdjacencyMatrix());
  PriorityQueue<EliminationCandidate> p=new PriorityQueue<EliminationCandidate>(graph.size());
  Map<Integer,EliminationCandidate> elmVertMap=new HashMap<Integer,EliminationCandidate>();
  for (  GraphNode<BayesVariable> v : graph) {
    if (v.getId() == 0) {
      continue;
    }
    EliminationCandidate elmCandVert=new EliminationCandidate(graph,clonedAdjMatrix,v);
    p.add(elmCandVert);
    elmVertMap.put(v.getId(),elmCandVert);
  }
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{1,2,3,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{2,1,4});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{3,1,5});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{4,2,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{5,3,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{6,1,4,5});
  assertEquals(3,elmVertMap.get(1).getNewEdgesRequired());
  assertEquals(1,elmVertMap.get(2).getNewEdgesRequired());
  assertEquals(1,elmVertMap.get(3).getNewEdgesRequired());
  assertEquals(1,elmVertMap.get(4).getNewEdgesRequired());
  assertEquals(1,elmVertMap.get(5).getNewEdgesRequired());
  assertEquals(3,elmVertMap.get(6).getNewEdgesRequired());
  EliminationCandidate v=p.remove();
  int id=v.getV().getId();
  assertEquals(5,id);
  Set<Integer> verticesToUpdate=new HashSet<Integer>();
  boolean[] adjList=clonedAdjMatrix[id];
  jtBuilder.createClique(5,clonedAdjMatrix,verticesToUpdate,adjList);
  assertEquals(4,verticesToUpdate.size());
  assertTrue(verticesToUpdate.containsAll(Arrays.asList(new Integer[]{1,3,6})));
  jtBuilder.eliminateVertex(p,elmVertMap,clonedAdjMatrix,adjList,verticesToUpdate,v);
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{1,2,3,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{2,1,4});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{3,1,5,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{4,2,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{5,3,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{6,1,3,4,5});
  assertEquals(2,elmVertMap.get(1).getNewEdgesRequired());
  assertEquals(1,elmVertMap.get(2).getNewEdgesRequired());
  assertEquals(0,elmVertMap.get(3).getNewEdgesRequired());
  assertEquals(2,elmVertMap.get(6).getNewEdgesRequired());
  assertEquals(1,elmVertMap.get(4).getNewEdgesRequired());
  v=p.remove();
  id=v.getV().getId();
  assertEquals(3,id);
  verticesToUpdate=new HashSet<Integer>();
  jtBuilder.createClique(3,clonedAdjMatrix,verticesToUpdate,adjList);
  jtBuilder.eliminateVertex(p,elmVertMap,clonedAdjMatrix,adjList,verticesToUpdate,v);
  v=p.remove();
  id=v.getV().getId();
  assertEquals(4,id);
  verticesToUpdate=new HashSet<Integer>();
  adjList=clonedAdjMatrix[id];
  jtBuilder.createClique(4,clonedAdjMatrix,verticesToUpdate,adjList);
  assertEquals(3,verticesToUpdate.size());
  assertTrue(verticesToUpdate.containsAll(Arrays.asList(new Integer[]{1,2,6})));
  jtBuilder.eliminateVertex(p,elmVertMap,clonedAdjMatrix,adjList,verticesToUpdate,v);
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{1,2,3,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{2,1,4,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{3,1,5,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{4,2,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{5,3,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{6,1,2,3,4,5});
  assertEquals(0,elmVertMap.get(1).getNewEdgesRequired());
  assertEquals(0,elmVertMap.get(2).getNewEdgesRequired());
  assertEquals(0,elmVertMap.get(6).getNewEdgesRequired());
  v=p.remove();
  id=v.getV().getId();
  assertEquals(1,id);
  verticesToUpdate=new HashSet<Integer>();
  jtBuilder.createClique(1,clonedAdjMatrix,verticesToUpdate,adjList);
  jtBuilder.eliminateVertex(p,elmVertMap,clonedAdjMatrix,adjList,verticesToUpdate,v);
  v=p.remove();
  id=v.getV().getId();
  assertEquals(2,id);
  verticesToUpdate=new HashSet<Integer>();
  jtBuilder.createClique(2,clonedAdjMatrix,verticesToUpdate,adjList);
  jtBuilder.eliminateVertex(p,elmVertMap,clonedAdjMatrix,adjList,verticesToUpdate,v);
  v=p.remove();
  id=v.getV().getId();
  assertEquals(6,id);
  verticesToUpdate=new HashSet<Integer>();
  jtBuilder.createClique(6,clonedAdjMatrix,verticesToUpdate,adjList);
  jtBuilder.eliminateVertex(p,elmVertMap,clonedAdjMatrix,adjList,verticesToUpdate,v);
  assertEquals(0,p.size());
}
