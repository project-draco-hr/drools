{
  Graph<BayesVariable> graph=new BayesNetwork();
  GraphNode x0=addNode(graph);
  GraphNode x1=addNode(graph);
  GraphNode x2=addNode(graph);
  GraphNode x3=addNode(graph);
  GraphNode x4=addNode(graph);
  GraphNode x5=addNode(graph);
  GraphNode x6=addNode(graph);
  connectParentToChildren(x1,x2);
  connectParentToChildren(x1,x3);
  connectParentToChildren(x2,x4);
  connectParentToChildren(x2,x6);
  connectParentToChildren(x3,x5);
  connectParentToChildren(x5,x6);
  JunctionTreeBuilder jtBuilder=new JunctionTreeBuilder(graph);
  jtBuilder.moralize();
  List<OpenBitSet> cliques=jtBuilder.triangulate();
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{1,2,3});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{2,1,3,4,5,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{3,1,2,5});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{4,2});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{5,2,3,6});
  assertLinkedVertex(jtBuilder.getAdjacencyMatrix(),new int[]{6,2,5});
  assertEquals(5,cliques.size());
  assertTrue(cliques.contains(bitSet("1110")));
  assertTrue(cliques.contains(bitSet("10100")));
  assertTrue(cliques.contains(bitSet("1100100")));
  assertTrue(cliques.contains(bitSet("101100")));
}
