{
  final Rule rule=new Rule("findSeating");
  final Column contextColumn=new Column(0,this.contextType,"context");
  contextColumn.addConstraint(getLiteralConstraint(contextColumn,"state",Context.ASSIGN_SEATS,this.integerEqualEvaluator));
  rule.addPattern(contextColumn);
  final Declaration contextDeclaration=rule.getDeclaration("context");
  final Column seatingColumn=new Column(1,this.seatingType);
  setFieldDeclaration(seatingColumn,"id","seatingId");
  setFieldDeclaration(seatingColumn,"pid","seatingPid");
  seatingColumn.addConstraint(getLiteralConstraint(seatingColumn,"pathDone",new Boolean(true),this.booleanEqualEvaluator));
  setFieldDeclaration(seatingColumn,"rightSeat","seatingRightSeat");
  setFieldDeclaration(seatingColumn,"rightGuestName","seatingRightGuestName");
  rule.addPattern(seatingColumn);
  final Declaration seatingIdDeclaration=rule.getDeclaration("seatingId");
  final Declaration seatingPidDeclaration=rule.getDeclaration("seatingPid");
  final Declaration seatingRightGuestNameDeclaration=rule.getDeclaration("seatingRightGuestName");
  final Declaration seatingRightSeatDeclaration=rule.getDeclaration("seatingRightSeat");
  final Column rightGuestColumn=new Column(2,this.guestType);
  rightGuestColumn.addConstraint(getBoundVariableConstraint(rightGuestColumn,"name",seatingRightGuestNameDeclaration,this.objectEqualEvaluator));
  setFieldDeclaration(rightGuestColumn,"sex","rightGuestSex");
  setFieldDeclaration(rightGuestColumn,"hobby","rightGuestHobby");
  rule.addPattern(rightGuestColumn);
  final Declaration rightGuestSexDeclaration=rule.getDeclaration("rightGuestSex");
  final Declaration rightGuestHobbyDeclaration=rule.getDeclaration("rightGuestHobby");
  final Column leftGuestColumn=new Column(3,this.guestType);
  setFieldDeclaration(leftGuestColumn,"name","leftGuestName");
  leftGuestColumn.addConstraint(getBoundVariableConstraint(rightGuestColumn,"hobby",rightGuestHobbyDeclaration,this.objectEqualEvaluator));
  leftGuestColumn.addConstraint(getBoundVariableConstraint(leftGuestColumn,"sex",rightGuestSexDeclaration,this.objectNotEqualEvaluator));
  rule.addPattern(leftGuestColumn);
  final Declaration leftGuestNameDeclaration=rule.getDeclaration("leftGuestName");
  final Column count=new Column(4,this.countType,"count");
  rule.addPattern(count);
  final Declaration countDeclaration=rule.getDeclaration("count");
  final Column notPathColumn=new Column(5,this.pathType);
  notPathColumn.addConstraint(getBoundVariableConstraint(notPathColumn,"id",seatingIdDeclaration,this.integerEqualEvaluator));
  notPathColumn.addConstraint(getBoundVariableConstraint(notPathColumn,"guestName",leftGuestNameDeclaration,this.objectEqualEvaluator));
  final Not notPath=new Not();
  notPath.addChild(notPathColumn);
  rule.addPattern(notPath);
  final Column notChosenColumn=new Column(6,this.chosenType);
  notChosenColumn.addConstraint(getBoundVariableConstraint(notChosenColumn,"id",seatingIdDeclaration,this.integerEqualEvaluator));
  notChosenColumn.addConstraint(getBoundVariableConstraint(notChosenColumn,"guestName",leftGuestNameDeclaration,this.objectEqualEvaluator));
  notChosenColumn.addConstraint(getBoundVariableConstraint(notChosenColumn,"hobby",rightGuestHobbyDeclaration,this.objectEqualEvaluator));
  final Not notChosen=new Not();
  notChosen.addChild(notChosenColumn);
  rule.addPattern(notChosen);
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Context context=(Context)drools.get(contextDeclaration);
        Count count=(Count)drools.get(countDeclaration);
        Integer seatId=((Integer)drools.get(seatingIdDeclaration));
        Integer seatingRightSeat=((Integer)drools.get(seatingRightSeatDeclaration));
        String leftGuestName=(String)drools.get(leftGuestNameDeclaration);
        String rightGuestName=(String)drools.get(seatingRightGuestNameDeclaration);
        Hobby rightGuestHobby=(Hobby)drools.get(rightGuestHobbyDeclaration);
        Seating seating=new Seating(count.getValue(),seatId,false,seatingRightSeat,rightGuestName,new Integer(seatingRightSeat.intValue() + 1),leftGuestName);
        drools.assertObject(seating);
        Path path=new Path(count.getValue(),new Integer(seatingRightSeat.intValue() + 1),leftGuestName);
        drools.assertObject(path);
        Chosen chosen=new Chosen(seatId,leftGuestName,rightGuestHobby);
        drools.assertObject(chosen);
        count.setValue(new Integer(count.getValue().intValue() + 1));
        drools.modifyObject(tuple.get(countDeclaration),count);
        context.setState(Context.MAKE_PATH);
        drools.modifyObject(tuple.get(contextDeclaration),context);
        System.err.println("find seating : " + seating + " : "+ path+ " : "+ chosen);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
