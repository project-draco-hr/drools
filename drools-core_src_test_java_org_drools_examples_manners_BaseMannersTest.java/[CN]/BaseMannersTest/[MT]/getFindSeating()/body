{
  final Rule rule=new Rule("findSeating");
  Column contextColumn=new Column(0,contextType,"context");
  contextColumn.addConstraint(getLiteralConstraint(contextColumn,"state",new Integer(Context.ASSIGN_SEATS),this.integerEqualEvaluator));
  rule.addPattern(contextColumn);
  final Declaration contextDeclaration=rule.getDeclaration("context");
  Column seatingColumn=new Column(1,seatingType);
  setFieldDeclaration(seatingColumn,"id","seatingId");
  setFieldDeclaration(seatingColumn,"pid","seatingPid");
  seatingColumn.addConstraint(getLiteralConstraint(seatingColumn,"pathDone",new Boolean(true),this.booleanEqualEvaluator));
  setFieldDeclaration(seatingColumn,"rightSeat","seatingRightSeat");
  setFieldDeclaration(seatingColumn,"rightGuestName","seatingRightGuestName");
  rule.addPattern(seatingColumn);
  final Declaration seatingIdDeclaration=rule.getDeclaration("seatingId");
  final Declaration seatingPidDeclaration=rule.getDeclaration("seatingPid");
  final Declaration seatingRightGuestNameDeclaration=rule.getDeclaration("seatingRightGuestName");
  final Declaration seatingRightSeatDeclaration=rule.getDeclaration("seatingRightSeat");
  Column rightGuestColumn=new Column(2,guestType);
  rightGuestColumn.addConstraint(getBoundVariableConstraint(rightGuestColumn,"name",seatingRightGuestNameDeclaration,objectEqualEvaluator));
  setFieldDeclaration(rightGuestColumn,"sex","rightGuestSex");
  setFieldDeclaration(rightGuestColumn,"hobby","rightGuestHobby");
  rule.addPattern(rightGuestColumn);
  final Declaration rightGuestSexDeclaration=rule.getDeclaration("rightGuestSex");
  final Declaration rightGuestHobbyDeclaration=rule.getDeclaration("rightGuestHobby");
  Column leftGuestColumn=new Column(3,guestType);
  setFieldDeclaration(leftGuestColumn,"name","leftGuestName");
  leftGuestColumn.addConstraint(getBoundVariableConstraint(leftGuestColumn,"sex",rightGuestSexDeclaration,objectNotEqualEvaluator));
  leftGuestColumn.addConstraint(getBoundVariableConstraint(rightGuestColumn,"hobby",rightGuestHobbyDeclaration,objectEqualEvaluator));
  rule.addPattern(leftGuestColumn);
  final Declaration leftGuestNameDeclaration=rule.getDeclaration("leftGuestName");
  Column count=new Column(4,countType,"count");
  rule.addPattern(count);
  final Declaration countDeclaration=rule.getDeclaration("count");
  Column notPathColumn=new Column(5,pathType);
  notPathColumn.addConstraint(getBoundVariableConstraint(notPathColumn,"id",seatingIdDeclaration,integerEqualEvaluator));
  notPathColumn.addConstraint(getBoundVariableConstraint(notPathColumn,"guestName",leftGuestNameDeclaration,objectEqualEvaluator));
  Not notPath=new Not();
  notPath.addChild(notPathColumn);
  rule.addPattern(notPath);
  Column notChosenColumn=new Column(6,chosenType);
  notChosenColumn.addConstraint(getBoundVariableConstraint(notChosenColumn,"id",seatingIdDeclaration,integerEqualEvaluator));
  notChosenColumn.addConstraint(getBoundVariableConstraint(notChosenColumn,"guestName",leftGuestNameDeclaration,objectEqualEvaluator));
  notChosenColumn.addConstraint(getBoundVariableConstraint(notChosenColumn,"hobby",rightGuestHobbyDeclaration,objectEqualEvaluator));
  Not notChosen=new Not();
  notChosen.addChild(notChosenColumn);
  rule.addPattern(notChosen);
  Consequence consequence=new Consequence(){
    public void evaluate(    Activation activation,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=activation.getRule();
        Tuple tuple=activation.getTuple();
        KnowledgeHelper drools=new DefaultKnowledgeHelper(rule,tuple,workingMemory);
        Context context=(Context)drools.get(contextDeclaration);
        Count count=(Count)drools.get(countDeclaration);
        int seatId=((Integer)drools.get(seatingIdDeclaration)).intValue();
        int seatingRightSeat=((Integer)drools.get(seatingRightSeatDeclaration)).intValue();
        String leftGuestName=(String)drools.get(leftGuestNameDeclaration);
        String rightGuestName=(String)drools.get(seatingRightGuestNameDeclaration);
        Hobby rightGuestHobby=(Hobby)drools.get(rightGuestHobbyDeclaration);
        Seating seating=new Seating(count.getValue(),seatId,false,seatingRightSeat,rightGuestName,seatingRightSeat + 1,leftGuestName);
        drools.assertObject(seating);
        Path path=new Path(count.getValue(),seatingRightSeat + 1,leftGuestName);
        drools.assertObject(path);
        Chosen chosen=new Chosen(seatId,leftGuestName,rightGuestHobby);
        drools.assertObject(chosen);
        count.setValue(count.getValue() + 1);
        drools.modifyObject(tuple.get(countDeclaration),count);
        context.setState(Context.MAKE_PATH);
        drools.modifyObject(tuple.get(contextDeclaration),context);
        System.err.println("find seating : " + seating + " : "+ path+ " : "+ chosen);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
