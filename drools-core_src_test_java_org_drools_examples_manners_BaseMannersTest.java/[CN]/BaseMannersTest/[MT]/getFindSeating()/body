{
  final Rule rule=new Rule("findSeating");
  final Pattern contextPattern=new Pattern(0,this.contextType,"context");
  contextPattern.addConstraint(getLiteralConstraint(contextPattern,"state",Context.ASSIGN_SEATS,this.integerEqualEvaluator));
  rule.addPattern(contextPattern);
  final Declaration contextDeclaration=rule.getDeclaration("context");
  final Pattern seatingPattern=new Pattern(1,this.seatingType);
  setFieldDeclaration(seatingPattern,"id","seatingId");
  setFieldDeclaration(seatingPattern,"pid","seatingPid");
  seatingPattern.addConstraint(getLiteralConstraint(seatingPattern,"pathDone",true,this.booleanEqualEvaluator));
  setFieldDeclaration(seatingPattern,"rightSeat","seatingRightSeat");
  setFieldDeclaration(seatingPattern,"rightGuestName","seatingRightGuestName");
  rule.addPattern(seatingPattern);
  final Declaration seatingIdDeclaration=rule.getDeclaration("seatingId");
  final Declaration seatingPidDeclaration=rule.getDeclaration("seatingPid");
  final Declaration seatingRightGuestNameDeclaration=rule.getDeclaration("seatingRightGuestName");
  final Declaration seatingRightSeatDeclaration=rule.getDeclaration("seatingRightSeat");
  final Pattern rightGuestPattern=new Pattern(2,this.guestType);
  rightGuestPattern.addConstraint(getBoundVariableConstraint(rightGuestPattern,"name",seatingRightGuestNameDeclaration,this.objectEqualEvaluator));
  setFieldDeclaration(rightGuestPattern,"sex","rightGuestSex");
  setFieldDeclaration(rightGuestPattern,"hobby","rightGuestHobby");
  rule.addPattern(rightGuestPattern);
  final Declaration rightGuestSexDeclaration=rule.getDeclaration("rightGuestSex");
  final Declaration rightGuestHobbyDeclaration=rule.getDeclaration("rightGuestHobby");
  final Pattern leftGuestPattern=new Pattern(3,this.guestType);
  setFieldDeclaration(leftGuestPattern,"name","leftGuestName");
  leftGuestPattern.addConstraint(getBoundVariableConstraint(rightGuestPattern,"hobby",rightGuestHobbyDeclaration,this.objectEqualEvaluator));
  leftGuestPattern.addConstraint(getBoundVariableConstraint(leftGuestPattern,"sex",rightGuestSexDeclaration,this.objectNotEqualEvaluator));
  rule.addPattern(leftGuestPattern);
  final Declaration leftGuestNameDeclaration=rule.getDeclaration("leftGuestName");
  final Pattern count=new Pattern(4,this.countType,"count");
  rule.addPattern(count);
  final Declaration countDeclaration=rule.getDeclaration("count");
  final Pattern notPathPattern=new Pattern(5,this.pathType);
  notPathPattern.addConstraint(getBoundVariableConstraint(notPathPattern,"id",seatingIdDeclaration,this.integerEqualEvaluator));
  notPathPattern.addConstraint(getBoundVariableConstraint(notPathPattern,"guestName",leftGuestNameDeclaration,this.objectEqualEvaluator));
  final GroupElement notPath=GroupElementFactory.newNotInstance();
  notPath.addChild(notPathPattern);
  rule.addPattern(notPath);
  final Pattern notChosenPattern=new Pattern(6,this.chosenType);
  notChosenPattern.addConstraint(getBoundVariableConstraint(notChosenPattern,"id",seatingIdDeclaration,this.integerEqualEvaluator));
  notChosenPattern.addConstraint(getBoundVariableConstraint(notChosenPattern,"guestName",leftGuestNameDeclaration,this.objectEqualEvaluator));
  notChosenPattern.addConstraint(getBoundVariableConstraint(notChosenPattern,"hobby",rightGuestHobbyDeclaration,this.objectEqualEvaluator));
  final GroupElement notChosen=GroupElementFactory.newNotInstance();
  notChosen.addChild(notChosenPattern);
  rule.addPattern(notChosen);
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Context context=(Context)drools.get(contextDeclaration);
        Count count=(Count)drools.get(countDeclaration);
        int seatId=seatingIdDeclaration.getExtractor().getIntValue(tuple.get(seatingIdDeclaration).getObject());
        int seatingRightSeat=seatingRightSeatDeclaration.getExtractor().getIntValue(tuple.get(seatingRightSeatDeclaration).getObject());
        String leftGuestName=(String)drools.get(leftGuestNameDeclaration);
        String rightGuestName=(String)drools.get(seatingRightGuestNameDeclaration);
        Hobby rightGuestHobby=(Hobby)drools.get(rightGuestHobbyDeclaration);
        Seating seating=new Seating(count.getValue(),seatId,false,seatingRightSeat,rightGuestName,seatingRightSeat + 1,leftGuestName);
        drools.assertObject(seating);
        Path path=new Path(count.getValue(),seatingRightSeat + 1,leftGuestName);
        drools.assertObject(path);
        Chosen chosen=new Chosen(seatId,leftGuestName,rightGuestHobby);
        drools.assertObject(chosen);
        count.setValue(count.getValue() + 1);
        drools.modifyObject(tuple.get(countDeclaration),count);
        context.setState(Context.MAKE_PATH);
        drools.modifyObject(tuple.get(contextDeclaration),context);
        System.err.println("find seating : " + seating + " : "+ path+ " : "+ chosen);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
