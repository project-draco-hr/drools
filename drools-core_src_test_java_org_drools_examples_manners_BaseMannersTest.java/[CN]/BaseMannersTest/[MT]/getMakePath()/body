{
  final Rule rule=new Rule("makePath");
  final Column contextColumn=new Column(0,this.contextType);
  contextColumn.addConstraint(getLiteralConstraint(contextColumn,"state",Context.MAKE_PATH,this.integerEqualEvaluator));
  rule.addPattern(contextColumn);
  final Column seatingColumn=new Column(1,this.seatingType);
  setFieldDeclaration(seatingColumn,"id","seatingId");
  setFieldDeclaration(seatingColumn,"pid","seatingPid");
  seatingColumn.addConstraint(getLiteralConstraint(seatingColumn,"pathDone",new Boolean(false),this.booleanEqualEvaluator));
  rule.addPattern(seatingColumn);
  final Declaration seatingIdDeclaration=rule.getDeclaration("seatingId");
  final Declaration seatingPidDeclaration=rule.getDeclaration("seatingPid");
  final Column pathColumn=new Column(2,this.pathType);
  pathColumn.addConstraint(getBoundVariableConstraint(pathColumn,"id",seatingPidDeclaration,this.integerEqualEvaluator));
  setFieldDeclaration(pathColumn,"guestName","pathGuestName");
  setFieldDeclaration(pathColumn,"seat","pathSeat");
  rule.addPattern(pathColumn);
  final Declaration pathGuestNameDeclaration=rule.getDeclaration("pathGuestName");
  final Declaration pathSeatDeclaration=rule.getDeclaration("pathSeat");
  final Column notPathColumn=new Column(3,this.pathType);
  notPathColumn.addConstraint(getBoundVariableConstraint(notPathColumn,"id",seatingIdDeclaration,this.integerEqualEvaluator));
  notPathColumn.addConstraint(getBoundVariableConstraint(notPathColumn,"guestName",pathGuestNameDeclaration,this.objectEqualEvaluator));
  final Not not=new Not();
  not.addChild(notPathColumn);
  rule.addPattern(not);
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Integer id=((Integer)drools.get(seatingIdDeclaration));
        Integer seat=((Integer)drools.get(pathSeatDeclaration));
        String guestName=(String)drools.get(pathGuestNameDeclaration);
        Path path=new Path(id,seat,guestName);
        drools.assertObject(path);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
