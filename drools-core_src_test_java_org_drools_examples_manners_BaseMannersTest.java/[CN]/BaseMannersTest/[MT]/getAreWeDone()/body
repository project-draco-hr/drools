{
  final Rule rule=new Rule("areWeDone");
  final Pattern contextPattern=new Pattern(0,this.contextType,"context");
  contextPattern.addConstraint(getLiteralConstraint(contextPattern,"state",Context.CHECK_DONE,this.integerEqualEvaluator));
  rule.addPattern(contextPattern);
  final Declaration contextDeclaration=rule.getDeclaration("context");
  final Pattern lastSeatPattern=new Pattern(1,this.lastSeatType);
  setFieldDeclaration(lastSeatPattern,"seat","lastSeat");
  rule.addPattern(lastSeatPattern);
  final Declaration lastSeatDeclaration=rule.getDeclaration("lastSeat");
  final Pattern seatingPattern=new Pattern(2,this.seatingType,null);
  seatingPattern.addConstraint(getBoundVariableConstraint(seatingPattern,"rightSeat",lastSeatDeclaration,this.integerEqualEvaluator));
  rule.addPattern(seatingPattern);
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Context context=(Context)drools.get(contextDeclaration);
        context.setState(Context.PRINT_RESULTS);
        drools.update(tuple.get(contextDeclaration),context);
      }
 catch (      Exception e) {
        throw new ConsequenceException(e);
      }
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
