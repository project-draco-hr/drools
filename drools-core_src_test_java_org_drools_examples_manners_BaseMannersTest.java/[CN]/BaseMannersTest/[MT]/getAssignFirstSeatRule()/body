{
  final Rule rule=new Rule("assignFirstSeat");
  final Column contextColumn=new Column(0,this.contextType,"context");
  contextColumn.addConstraint(getLiteralConstraint(contextColumn,"state",Context.START_UP,this.integerEqualEvaluator));
  rule.addPattern(contextColumn);
  final Declaration contextDeclaration=rule.getDeclaration("context");
  final Column guestColumn=new Column(1,this.guestType,"guest");
  rule.addPattern(guestColumn);
  final Declaration guestDeclaration=rule.getDeclaration("guest");
  final Column countColumn=new Column(2,this.countType,"count");
  rule.addPattern(countColumn);
  final Declaration countDeclaration=rule.getDeclaration("count");
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Guest guest=(Guest)drools.get(guestDeclaration);
        Context context=(Context)drools.get(contextDeclaration);
        Count count=(Count)drools.get(countDeclaration);
        String guestName=guest.getName();
        Seating seating=new Seating(count.getValue(),0,true,1,guestName,1,guestName);
        drools.assertObject(seating);
        Path path=new Path(count.getValue(),1,guestName);
        drools.assertObject(path);
        count.setValue(count.getValue());
        drools.modifyObject(tuple.get(countDeclaration),count);
        context.setState(Context.ASSIGN_SEATS);
        drools.modifyObject(tuple.get(contextDeclaration),context);
        System.err.println("assign first seat :  " + seating + " : "+ path);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
