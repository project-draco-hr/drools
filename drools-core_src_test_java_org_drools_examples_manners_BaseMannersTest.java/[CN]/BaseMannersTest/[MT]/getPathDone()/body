{
  final Rule rule=new Rule("pathDone");
  final Column contextColumn=new Column(0,this.contextType,"context");
  contextColumn.addConstraint(getLiteralConstraint(contextColumn,"state",Context.MAKE_PATH,this.integerEqualEvaluator));
  rule.addPattern(contextColumn);
  final Declaration contextDeclaration=rule.getDeclaration("context");
  final Column seatingColumn=new Column(1,this.seatingType,"seating");
  seatingColumn.addConstraint(getLiteralConstraint(seatingColumn,"pathDone",new Boolean(false),this.booleanEqualEvaluator));
  rule.addPattern(seatingColumn);
  final Declaration seatingDeclaration=rule.getDeclaration("seating");
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Context context=(Context)drools.get(contextDeclaration);
        Seating seating=(Seating)drools.get(seatingDeclaration);
        seating.setPathDone(true);
        drools.modifyObject(tuple.get(seatingDeclaration),seating);
        context.setState(Context.CHECK_DONE);
        drools.modifyObject(tuple.get(contextDeclaration),context);
      }
 catch (      Exception e) {
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
