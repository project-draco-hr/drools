{
  final String className="consequence";
  StringTemplate st=utils.getRuleGroup().getInstanceOf("consequenceMethod");
  st.setAttribute("methodName",className);
  final List[] usedIdentifiers=utils.getUsedCIdentifiers(context,ruleDescr,ruleDescr.getConsequence());
  final Declaration[] declarations=new Declaration[usedIdentifiers[0].size()];
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    declarations[i]=(Declaration)context.getDeclarations().get((String)usedIdentifiers[0].get(i));
  }
  utils.setStringTemplateAttributes(context,st,declarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]));
  st.setAttribute("text",utils.getFunctionFixer().fix(utils.getKnowledgeHelperFixer().fix(ruleDescr.getConsequence()),context.getVariables()));
  context.getMethods().add(st.toString());
  st=utils.getInvokerGroup().getInstanceOf("consequenceInvoker");
  st.setAttribute("package",context.getPkg().getName());
  st.setAttribute("ruleClassName",utils.ucFirst(context.getRuleDescr().getClassName()));
  st.setAttribute("invokerClassName",ruleDescr.getClassName() + utils.ucFirst(className) + "Invoker");
  st.setAttribute("methodName",className);
  utils.setStringTemplateAttributes(context,st,declarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]));
  final List list=Arrays.asList(context.getRule().getDeclarations());
  final int[] indexes=new int[declarations.length];
  for (int i=0, length=declarations.length; i < length; i++) {
    indexes[i]=list.indexOf(declarations[i]);
    if (indexes[i] == -1) {
      throw new RuntimeDroolsException("Unable to find declaration in list while generating the consequence invoker");
    }
  }
  st.setAttribute("indexes",indexes);
  st.setAttribute("text",ruleDescr.getConsequence());
  final String invokerClassName=context.getPkg().getName() + "." + ruleDescr.getClassName()+ utils.ucFirst(className)+ "Invoker";
  context.getInvokers().put(invokerClassName,st.toString());
  context.getInvokerLookups().put(invokerClassName,context.getRule());
  context.getDescrLookups().put(invokerClassName,ruleDescr);
}
