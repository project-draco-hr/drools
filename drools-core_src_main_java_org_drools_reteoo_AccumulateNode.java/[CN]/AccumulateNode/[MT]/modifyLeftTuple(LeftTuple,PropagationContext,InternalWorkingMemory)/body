{
  final AccumulateMemory memory=(AccumulateMemory)workingMemory.getNodeMemory(this);
  final AccumulateContext accctx=(AccumulateContext)memory.betaMemory.getCreatedHandles().get(leftTuple);
  memory.betaMemory.getLeftTupleMemory().remove(leftTuple);
  memory.betaMemory.getLeftTupleMemory().add(leftTuple);
  this.constraints.updateFromTuple(memory.betaMemory.getContext(),workingMemory,leftTuple);
  LeftTuple childLeftTuple=getFirstMatch(leftTuple,accctx,false);
  RightTupleMemory rightMemory=memory.betaMemory.getRightTupleMemory();
  RightTuple rightTuple=rightMemory.getFirst(leftTuple);
  if (childLeftTuple != null && rightMemory.isIndexed() && rightTuple != rightMemory.getFirst(childLeftTuple.getRightParent())) {
    removePreviousMatchesForLeftTuple(leftTuple,workingMemory,memory,accctx);
    childLeftTuple=null;
  }
  if (rightTuple != null) {
    if (childLeftTuple == null) {
      for (; rightTuple != null; rightTuple=(RightTuple)rightTuple.getNext()) {
        final InternalFactHandle handle=rightTuple.getFactHandle();
        if (this.constraints.isAllowedCachedLeft(memory.betaMemory.getContext(),handle)) {
          addMatch(leftTuple,rightTuple,null,null,workingMemory,memory,accctx,true);
        }
      }
    }
 else {
      boolean isDirty=false;
      for (; rightTuple != null; rightTuple=(RightTuple)rightTuple.getNext()) {
        final InternalFactHandle handle=rightTuple.getFactHandle();
        if (this.constraints.isAllowedCachedLeft(memory.betaMemory.getContext(),handle)) {
          if (childLeftTuple == null || childLeftTuple.getRightParent() != rightTuple) {
            addMatch(leftTuple,rightTuple,childLeftTuple,null,workingMemory,memory,accctx,true);
          }
 else {
            LeftTuple temp=childLeftTuple.getLeftParentNext();
            childLeftTuple.reAddRight();
            childLeftTuple=temp;
          }
        }
 else         if (childLeftTuple != null && childLeftTuple.getRightParent() == rightTuple) {
          LeftTuple temp=childLeftTuple.getLeftParentNext();
          removeMatch(rightTuple,childLeftTuple,workingMemory,memory,accctx,false);
          childLeftTuple=temp;
          isDirty=!accumulate.supportsReverse();
        }
      }
      if (isDirty) {
        reaccumulateForLeftTuple(leftTuple,workingMemory,memory,accctx);
      }
    }
  }
  this.constraints.resetTuple(memory.betaMemory.getContext());
  evaluateResultConstraints(ActivitySource.LEFT,leftTuple,context,workingMemory,memory,accctx,true);
}
