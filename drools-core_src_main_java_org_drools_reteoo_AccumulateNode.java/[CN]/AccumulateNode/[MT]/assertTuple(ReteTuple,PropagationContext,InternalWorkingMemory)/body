{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  AccumulateResult accresult=new AccumulateResult();
  if (!workingMemory.isSequential()) {
    memory.getTupleMemory().add(leftTuple);
    memory.getCreatedHandles().put(leftTuple,accresult,false);
  }
  final Object accContext=this.accumulate.createContext();
  accresult.context=accContext;
  this.accumulate.init(accContext,leftTuple,workingMemory);
  final Iterator it=memory.getFactHandleMemory().iterator(leftTuple);
  this.constraints.updateFromTuple(workingMemory,leftTuple);
  for (FactEntry entry=(FactEntry)it.next(); entry != null; entry=(FactEntry)it.next()) {
    InternalFactHandle handle=entry.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(handle.getObject())) {
      if (this.unwrapRightObject) {
        handle=((ReteTuple)handle.getObject()).getLastHandle();
      }
      this.accumulate.accumulate(accContext,leftTuple,handle,workingMemory);
    }
  }
  final Object result=this.accumulate.getResult(accContext,leftTuple,workingMemory);
  boolean isAllowed=true;
  for (int i=0, length=this.resultConstraints.length; i < length; i++) {
    if (!this.resultConstraints[i].isAllowed(result,workingMemory)) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    this.resultBinder.updateFromTuple(workingMemory,leftTuple);
    if (this.resultBinder.isAllowedCachedLeft(result)) {
      final InternalFactHandle handle=workingMemory.getFactHandleFactory().newFactHandle(result);
      accresult.handle=handle;
      this.sink.propagateAssertTuple(leftTuple,handle,context,workingMemory);
    }
  }
}
