{
  final AccumulateMemory memory=(AccumulateMemory)workingMemory.getNodeMemory(this);
  final InternalFactHandle origin=(InternalFactHandle)context.getFactHandleOrigin();
  if (context.getType() == PropagationContext.EXPIRATION) {
    ((PropagationContextImpl)context).setFactHandle(null);
  }
  BetaMemory bm=memory.getBetaMemory();
  if (isUnlinkingEnabled()) {
    StagedRightTuples stagedRightTuples=bm.getStagedRightTuples();
switch (rightTuple.getStagedType()) {
case LeftTuple.INSERT:
      stagedRightTuples.removeInsert(rightTuple);
    break;
case LeftTuple.UPDATE:
  stagedRightTuples.removeUpdate(rightTuple);
break;
}
stagedRightTuples.addDelete(rightTuple);
if (bm.getDecAndGetCounter() == 0 && !isRightInputIsRiaNode()) {
bm.unlinkNode(workingMemory);
}
return;
}
bm.getRightTupleMemory().remove(rightTuple);
removePreviousMatchesForRightTuple(rightTuple,context,workingMemory,memory,rightTuple.firstChild);
if (context.getType() == PropagationContext.EXPIRATION) {
((PropagationContextImpl)context).setFactHandle(origin);
}
}
