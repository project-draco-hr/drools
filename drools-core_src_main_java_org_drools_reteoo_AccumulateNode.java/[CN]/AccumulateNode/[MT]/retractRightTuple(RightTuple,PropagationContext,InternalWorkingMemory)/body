{
  final AccumulateMemory memory=(AccumulateMemory)workingMemory.getNodeMemory(this);
  behavior.retractRightTuple(memory.betaMemory.getBehaviorContext(),rightTuple,workingMemory);
  memory.betaMemory.getRightTupleMemory().remove(rightTuple);
  for (LeftTuple childTuple=rightTuple.getBetaChildren(); childTuple != null; ) {
    LeftTuple tmp=childTuple.getRightParentNext();
    if (this.accumulate.supportsReverse()) {
      this.modifyTuple(false,childTuple.getParent(),rightTuple,context,workingMemory,memory);
    }
 else {
      LeftTuple match=childTuple.getParent();
      childTuple.unlinkFromLeftParent();
      childTuple.unlinkFromRightParent();
      this.retractLeftTuple(match,context,workingMemory);
      this.assertLeftTuple(match,context,workingMemory);
    }
    childTuple=tmp;
  }
}
