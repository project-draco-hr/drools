{
  boolean isAllowed=true;
  for (int i=0, length=this.resultConstraints.length; i < length; i++) {
    if (!this.resultConstraints[i].isAllowed(accctx.result.getFactHandle(),workingMemory,memory.alphaContexts[i])) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    this.resultBinder.updateFromTuple(memory.resultsContext,workingMemory,leftTuple);
    if (this.resultBinder.isAllowedCachedLeft(memory.resultsContext,accctx.result.getFactHandle())) {
      accctx.propagated=true;
      this.sink.propagateAssertLeftTuple(leftTuple,accctx.result,context,workingMemory,this.tupleMemoryEnabled);
    }
    this.resultBinder.resetTuple(memory.resultsContext);
  }
}
