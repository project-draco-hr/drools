{
  final AccumulateMemory memory=(AccumulateMemory)workingMemory.getNodeMemory(this);
  memory.betaMemory.getRightTupleMemory().removeAdd(rightTuple);
  if (memory.betaMemory.getLeftTupleMemory() == null || memory.betaMemory.getLeftTupleMemory().size() == 0) {
    return;
  }
  LeftTuple childLeftTuple=rightTuple.firstChild;
  LeftTupleMemory leftMemory=memory.betaMemory.getLeftTupleMemory();
  FastIterator leftIt=getLeftIterator(leftMemory);
  LeftTuple leftTuple=getFirstLeftTuple(rightTuple,leftMemory,context,leftIt);
  this.constraints.updateFromFactHandle(memory.betaMemory.getContext(),workingMemory,rightTuple.getFactHandle());
  if (childLeftTuple != null && leftMemory.isIndexed() && !leftIt.isFullIterator() && (leftTuple == null || (leftTuple.getMemory() != childLeftTuple.getLeftParent().getMemory()))) {
    removePreviousMatchesForRightTuple(rightTuple,context,workingMemory,memory,childLeftTuple);
    childLeftTuple=null;
  }
  if (leftTuple != null) {
    if (childLeftTuple == null) {
      for (; leftTuple != null; leftTuple=(LeftTuple)leftIt.next(leftTuple)) {
        if (this.constraints.isAllowedCachedRight(memory.betaMemory.getContext(),leftTuple)) {
          final AccumulateContext accctx=(AccumulateContext)memory.betaMemory.getCreatedHandles().get(leftTuple);
          addMatch(leftTuple,rightTuple,null,null,workingMemory,memory,accctx,true);
          evaluateResultConstraints(ActivitySource.RIGHT,leftTuple,context,workingMemory,memory,accctx,true);
        }
      }
    }
 else {
      for (; leftTuple != null; leftTuple=(LeftTuple)leftIt.next(leftTuple)) {
        if (this.constraints.isAllowedCachedRight(memory.betaMemory.getContext(),leftTuple)) {
          final AccumulateContext accctx=(AccumulateContext)memory.betaMemory.getCreatedHandles().get(leftTuple);
          LeftTuple temp=null;
          if (childLeftTuple != null && childLeftTuple.getLeftParent() == leftTuple) {
            temp=childLeftTuple.getRightParentNext();
            childLeftTuple.reAddLeft();
            removeMatch(rightTuple,childLeftTuple,workingMemory,memory,accctx,true);
            childLeftTuple=childLeftTuple.getRightParentNext();
          }
          addMatch(leftTuple,rightTuple,null,childLeftTuple,workingMemory,memory,accctx,true);
          if (temp != null) {
            childLeftTuple=temp;
          }
          evaluateResultConstraints(ActivitySource.RIGHT,leftTuple,context,workingMemory,memory,accctx,true);
        }
 else         if (childLeftTuple != null && childLeftTuple.getLeftParent() == leftTuple) {
          LeftTuple temp=childLeftTuple.getRightParentNext();
          final AccumulateContext accctx=(AccumulateContext)memory.betaMemory.getCreatedHandles().get(leftTuple);
          removeMatch(rightTuple,childLeftTuple,workingMemory,memory,accctx,true);
          evaluateResultConstraints(ActivitySource.RIGHT,leftTuple,context,workingMemory,memory,accctx,true);
          childLeftTuple=temp;
        }
      }
    }
  }
  this.constraints.resetFactHandle(memory.betaMemory.getContext());
}
