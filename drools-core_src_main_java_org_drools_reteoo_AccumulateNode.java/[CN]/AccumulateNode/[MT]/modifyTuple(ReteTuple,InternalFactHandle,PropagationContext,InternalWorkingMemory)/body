{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  AccumulateResult accresult=(AccumulateResult)memory.getCreatedHandles().get(leftTuple);
  if (accresult.handle != null) {
    this.sink.propagateRetractTuple(leftTuple,accresult.handle,context,workingMemory);
    workingMemory.getFactHandleFactory().destroyFactHandle(accresult.handle);
    accresult.handle=null;
  }
  if (context.getType() == PropagationContext.ASSERTION) {
    if (accresult.context == null) {
      final Object accContext=this.accumulate.createContext();
      this.accumulate.init(accContext,leftTuple,workingMemory);
      accresult.context=accContext;
    }
    this.accumulate.accumulate(accresult.context,leftTuple,handle,workingMemory);
  }
 else   if (context.getType() == PropagationContext.MODIFICATION) {
    this.accumulate.reverse(accresult.context,leftTuple,handle,workingMemory);
    this.accumulate.accumulate(accresult.context,leftTuple,handle,workingMemory);
  }
 else {
    this.accumulate.reverse(accresult.context,leftTuple,handle,workingMemory);
  }
  final Object result=this.accumulate.getResult(accresult.context,leftTuple,workingMemory);
  boolean isAllowed=true;
  for (int i=0, length=this.resultConstraints.length; i < length; i++) {
    if (!this.resultConstraints[i].isAllowed(result,workingMemory)) {
      isAllowed=false;
      break;
    }
  }
  if (isAllowed) {
    this.resultBinder.updateFromTuple(workingMemory,leftTuple);
    if (this.resultBinder.isAllowedCachedLeft(result)) {
      final InternalFactHandle createdHandle=workingMemory.getFactHandleFactory().newFactHandle(result);
      accresult.handle=createdHandle;
      this.sink.propagateAssertTuple(leftTuple,createdHandle,context,workingMemory);
    }
  }
}
