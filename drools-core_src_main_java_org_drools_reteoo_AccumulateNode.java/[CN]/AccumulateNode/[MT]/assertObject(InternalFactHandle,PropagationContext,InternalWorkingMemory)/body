{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  memory.getFactHandleMemory().add(handle);
  this.constraints.updateFromFactHandle(workingMemory,handle);
  Entry[] tuples=memory.getTupleMemory().toArray();
  for (int i=0; i < tuples.length; i++) {
    ReteTuple tuple=(ReteTuple)tuples[i];
    if (this.constraints.isAllowedCachedRight(tuple)) {
      if (this.accumulate.supportsReverse() || context.getType() == PropagationContext.ASSERTION) {
        modifyTuple(true,tuple,handle,context,workingMemory);
      }
 else {
        this.retractTuple(tuple,context,workingMemory);
        this.assertTuple(tuple,context,workingMemory);
      }
    }
  }
}
