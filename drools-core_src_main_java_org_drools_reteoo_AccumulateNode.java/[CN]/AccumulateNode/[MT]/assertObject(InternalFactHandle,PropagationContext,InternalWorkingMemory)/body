{
  final AccumulateMemory memory=(AccumulateMemory)workingMemory.getNodeMemory(this);
  memory.betaMemory.getFactHandleMemory().add(handle);
  if (!this.tupleMemoryEnabled) {
    return;
  }
  this.constraints.updateFromFactHandle(memory.betaMemory.getContext(),workingMemory,handle);
  Entry[] tuples=memory.betaMemory.getTupleMemory().toArray();
  for (int i=0; i < tuples.length; i++) {
    LeftTuple tuple=(LeftTuple)tuples[i];
    if (this.constraints.isAllowedCachedRight(memory.betaMemory.getContext(),tuple)) {
      if (this.accumulate.supportsReverse() || context.getType() == PropagationContext.ASSERTION) {
        modifyTuple(true,tuple,handle,context,workingMemory);
      }
 else {
        this.retractLeftTuple(tuple,context,workingMemory);
        this.assertLeftTuple(tuple,context,workingMemory);
      }
    }
  }
  this.constraints.resetFactHandle(memory.betaMemory.getContext());
}
