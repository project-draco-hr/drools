{
  final AccumulateMemory memory=(AccumulateMemory)workingMemory.getNodeMemory(this);
  final RightTuple rightTuple=new RightTuple(factHandle,this);
  if (!behavior.assertRightTuple(memory.betaMemory.getBehaviorContext(),rightTuple,workingMemory)) {
    rightTuple.unlinkFromRightParent();
    return;
  }
  memory.betaMemory.getRightTupleMemory().add(rightTuple);
  if (memory.betaMemory.getLeftTupleMemory() == null || memory.betaMemory.getLeftTupleMemory().size() == 0) {
    return;
  }
  this.constraints.updateFromFactHandle(memory.betaMemory.getContext(),workingMemory,factHandle);
  LeftTupleMemory leftMemory=memory.betaMemory.getLeftTupleMemory();
  FastIterator leftIt=getLeftIterator(leftMemory);
  for (LeftTuple leftTuple=getFirstLeftTuple(rightTuple,leftMemory,context,leftIt); leftTuple != null; leftTuple=(LeftTuple)leftIt.next(leftTuple)) {
    if (this.constraints.isAllowedCachedRight(memory.betaMemory.getContext(),leftTuple)) {
      final AccumulateContext accctx=(AccumulateContext)leftTuple.getObject();
      addMatch(leftTuple,rightTuple,null,null,workingMemory,memory,accctx,true);
      if (accctx.getAction() == null) {
        EvaluateResultConstraints action=new EvaluateResultConstraints(ActivitySource.LEFT,leftTuple,context,workingMemory,memory,accctx,true,this);
        accctx.setAction(action);
        context.getQueue1().addFirst(action);
      }
    }
  }
  this.constraints.resetFactHandle(memory.betaMemory.getContext());
}
