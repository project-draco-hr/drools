{
  BaseNode node=null;
  RuleBasePartitionId partition=null;
  if (candidate instanceof EntryPointNode) {
    node=context.getRuleBase().getRete().getEntryPointNode(((EntryPointNode)candidate).getEntryPoint());
    partition=RuleBasePartitionId.MAIN_PARTITION;
  }
 else   if (candidate instanceof ObjectTypeNode) {
    Map<ObjectType,ObjectTypeNode> map=context.getRuleBase().getRete().getObjectTypeNodes(context.getCurrentEntryPoint());
    if (map != null) {
      ObjectTypeNode otn=map.get(((ObjectTypeNode)candidate).getObjectType());
      if (otn != null) {
        otn.setExpirationOffset(Math.max(otn.getExpirationOffset(),((ObjectTypeNode)candidate).getExpirationOffset()));
        node=otn;
      }
    }
    partition=RuleBasePartitionId.MAIN_PARTITION;
  }
 else   if (isSharingEnabledForNode(context,candidate)) {
    if ((context.getTupleSource() != null) && (candidate instanceof LeftTupleSink)) {
      node=context.getTupleSource().getSinkPropagator().getMatchingNode(candidate);
    }
 else     if ((context.getObjectSource() != null) && (candidate instanceof ObjectSink)) {
      node=context.getObjectSource().getSinkPropagator().getMatchingNode(candidate);
    }
 else {
      throw new RuntimeDroolsException("This is a bug on node sharing verification. Please report to development team.");
    }
  }
  if (node == null) {
    node=candidate;
    if (partition == null) {
      if (context.getPartitionId() == null) {
        context.setPartitionId(context.getRuleBase().createNewPartitionId());
      }
      partition=context.getPartitionId();
    }
    node.setPartitionId(partition);
    if (context.getWorkingMemories().length == 0) {
      node.attach();
    }
 else {
      node.attach(context.getWorkingMemories());
    }
    context.getNodes().add(node);
  }
 else {
    if (node instanceof SharableNode) {
      ((SharableNode)node).sharedWith(candidate);
    }
    context.releaseId(candidate.getId());
  }
  node.addAssociation(context.getRule(),context.peekRuleComponent());
  return node;
}
