{
  if (orig == copy) {
    return;
  }
 else   if (copy == null) {
    fail("Copy " + orig.getClass().getSimpleName() + " is null!");
  }
 else   if (orig == null) {
    fail("Original " + copy.getClass().getSimpleName() + " is null!");
  }
  Class<?> origClass=orig.getClass();
  String origClassName=origClass.getSimpleName();
  Class<?> copyClass=copy.getClass();
  assertEquals("copy is an instance of " + copyClass.getSimpleName() + " ( instead of "+ origClassName+ ")",origClass,copy.getClass());
  for (  Field field : orig.getClass().getDeclaredFields()) {
    try {
      field.setAccessible(true);
      Object origFieldVal=field.get(orig);
      Object copyFieldVal=field.get(copy);
      String fieldName=field.getName();
      boolean skip=false;
      for (      String skipFieldName : skipFields) {
        if (skipFieldName.matches(fieldName)) {
          skip=true;
          break;
        }
      }
      if (skip) {
        continue;
      }
      boolean nullFound=false;
      if (origFieldVal == null || copyFieldVal == null) {
        nullFound=true;
        for (        String nullFieldName : skipFields) {
          String actualNullFieldName=nullFieldName;
          if (nullFieldName.contains(".")) {
            int dotIndex=nullFieldName.indexOf(".");
            if (nullFieldName.substring(0,dotIndex).equals(origClassName)) {
              actualNullFieldName=nullFieldName.substring(dotIndex + 1);
            }
 else {
              continue;
            }
          }
          if (nullFound && actualNullFieldName.matches(fieldName)) {
            nullFound=false;
          }
        }
      }
      String failMsg=origClass.getSimpleName() + "." + field.getName()+ " is null";
      assertFalse(failMsg + "!",nullFound);
      if (copyFieldVal != origFieldVal) {
        assertNotNull(failMsg + " in the copy!",copyFieldVal);
        assertNotNull(failMsg + " in the original!",origFieldVal);
        Package pkg=origFieldVal.getClass().getPackage();
        if (pkg == null || pkg.getName().startsWith("java.")) {
          if (origFieldVal.getClass().isArray()) {
            if (origFieldVal instanceof byte[]) {
              assertArrayEquals(origClass.getSimpleName() + "." + field.getName(),(byte[])origFieldVal,(byte[])copyFieldVal);
            }
          }
 else           if (origFieldVal instanceof Map<?,?> && copyFieldVal instanceof Map<?,?>) {
            Collection shouldBeEmpty=CollectionUtils.disjunction(((Map)origFieldVal).values(),((Map)copyFieldVal).values());
            assertTrue("Comparison of Map values failed on " + origFieldVal.getClass().getSimpleName() + "."+ fieldName,shouldBeEmpty.isEmpty());
          }
 else           if (origFieldVal instanceof Collection) {
            assertEquals("Different collection sizes on " + origFieldVal.getClass().getSimpleName() + "."+ fieldName,((Collection)origFieldVal).size(),((Collection)copyFieldVal).size());
            for (            Object elem : ((Collection)origFieldVal)) {
              boolean match=false;
              for (              Object copyElem : ((Collection)copyFieldVal)) {
                try {
                  compareObjectsViaFields(elem,copyElem,skipFields);
                  match=true;
                  break;
                }
 catch (                Throwable t) {
                  logger.debug(t.getMessage());
                }
              }
              assertTrue("Different collection values on " + origFieldVal.getClass().getSimpleName() + "."+ fieldName,match);
            }
          }
 else {
            assertEquals(origClass.getSimpleName() + "." + field.getName(),origFieldVal,copyFieldVal);
          }
        }
 else {
          compareObjectsViaFields(origFieldVal,copyFieldVal,skipFields);
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException("Unable to access " + field.getName() + " when testing "+ origClass.getSimpleName()+ ".",e);
    }
  }
}
