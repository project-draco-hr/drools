{
  final AccumulateDescr accumDescr=(AccumulateDescr)descr;
  final PatternBuilder patternBuilder=(PatternBuilder)context.getDialect().getBuilder(PatternDescr.class);
  final Pattern sourcePattern=patternBuilder.build(context,accumDescr.getSourcePattern());
  if (sourcePattern == null) {
    return null;
  }
  final Pattern resultPattern=patternBuilder.build(context,accumDescr.getResultPattern());
  final String className="accumulate" + context.getNextId();
  accumDescr.setClassMethodName(className);
  final List[] usedIdentifiers1=context.getDialect().getBlockIdentifiers(context,accumDescr,accumDescr.getInitCode());
  final List[] usedIdentifiers2=context.getDialect().getBlockIdentifiers(context,accumDescr,accumDescr.getActionCode());
  final List[] usedIdentifiers3=context.getDialect().getExpressionIdentifiers(context,accumDescr,accumDescr.getResultCode());
  final List requiredDeclarations=new ArrayList(usedIdentifiers1[0]);
  requiredDeclarations.addAll(usedIdentifiers2[0]);
  requiredDeclarations.addAll(usedIdentifiers3[0]);
  final List requiredGlobals=new ArrayList(usedIdentifiers1[1]);
  requiredGlobals.addAll(usedIdentifiers2[1]);
  requiredGlobals.addAll(usedIdentifiers3[1]);
  final Declaration[] declarations=new Declaration[requiredDeclarations.size()];
  for (int i=0, size=requiredDeclarations.size(); i < size; i++) {
    declarations[i]=context.getDeclarationResolver().getDeclaration((String)requiredDeclarations.get(i));
  }
  final Declaration[] sourceDeclArr=(Declaration[])sourcePattern.getOuterDeclarations().values().toArray(new Declaration[0]);
  final String[] globals=(String[])requiredGlobals.toArray(new String[requiredGlobals.size()]);
  JavaDialect dialect=(JavaDialect)context.getDialect();
  StringTemplate st=dialect.getRuleGroup().getInstanceOf("accumulateMethod");
  dialect.setStringTemplateAttributes(context,st,declarations,globals);
  st.setAttribute("innerDeclarations",sourceDeclArr);
  st.setAttribute("methodName",className);
  final String initCode=accumDescr.getInitCode();
  final String actionCode=accumDescr.getActionCode();
  final String resultCode=accumDescr.getResultCode();
  st.setAttribute("initCode",initCode);
  st.setAttribute("actionCode",actionCode);
  st.setAttribute("resultCode",resultCode);
  String resultType=null;
  if (resultPattern.getObjectType() instanceof ClassObjectType) {
    resultType=((ClassObjectType)resultPattern.getObjectType()).getClassType().getName();
  }
 else {
    resultType=resultPattern.getObjectType().getValueType().getClassType().getName();
  }
  st.setAttribute("resultType",resultType);
  context.getMethods().add(st.toString());
  st=dialect.getInvokerGroup().getInstanceOf("accumulateInvoker");
  st.setAttribute("package",context.getPkg().getName());
  st.setAttribute("ruleClassName",StringUtils.ucFirst(context.getRuleDescr().getClassName()));
  st.setAttribute("invokerClassName",context.getRuleDescr().getClassName() + StringUtils.ucFirst(className) + "Invoker");
  st.setAttribute("methodName",className);
  dialect.setStringTemplateAttributes(context,st,declarations,(String[])requiredGlobals.toArray(new String[requiredGlobals.size()]));
  st.setAttribute("hashCode",actionCode.hashCode());
  final Accumulate accumulate=new Accumulate(sourcePattern,resultPattern,declarations,sourceDeclArr);
  final String invokerClassName=context.getPkg().getName() + "." + context.getRuleDescr().getClassName()+ StringUtils.ucFirst(className)+ "Invoker";
  context.getInvokers().put(invokerClassName,st.toString());
  context.getInvokerLookups().put(invokerClassName,accumulate);
  context.getDescrLookups().put(invokerClassName,accumDescr);
  return accumulate;
}
