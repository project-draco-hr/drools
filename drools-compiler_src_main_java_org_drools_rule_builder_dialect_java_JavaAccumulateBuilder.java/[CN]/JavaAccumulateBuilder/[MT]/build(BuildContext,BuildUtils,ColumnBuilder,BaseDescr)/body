{
  AccumulateDescr accumDescr=(AccumulateDescr)descr;
  Column sourceColumn=columnBuilder.build(context,utils,accumDescr.getSourceColumn());
  if (sourceColumn == null) {
    return null;
  }
  Column resultColumn=columnBuilder.build(context,utils,accumDescr.getResultColumn());
  final String className="accumulate" + context.getNextId();
  accumDescr.setClassMethodName(className);
  final List[] usedIdentifiers1=utils.getUsedCIdentifiers(context,accumDescr,accumDescr.getInitCode());
  final List[] usedIdentifiers2=utils.getUsedCIdentifiers(context,accumDescr,accumDescr.getActionCode());
  final List[] usedIdentifiers3=utils.getUsedIdentifiers(context,accumDescr,accumDescr.getResultCode());
  final List requiredDeclarations=new ArrayList(usedIdentifiers1[0]);
  requiredDeclarations.addAll(usedIdentifiers2[0]);
  requiredDeclarations.addAll(usedIdentifiers3[0]);
  final List requiredGlobals=new ArrayList(usedIdentifiers1[1]);
  requiredGlobals.addAll(usedIdentifiers2[1]);
  requiredGlobals.addAll(usedIdentifiers3[1]);
  final Declaration[] declarations=new Declaration[requiredDeclarations.size()];
  for (int i=0, size=requiredDeclarations.size(); i < size; i++) {
    declarations[i]=(Declaration)context.getDeclarationResolver().getDeclaration((String)requiredDeclarations.get(i));
  }
  final Declaration[] sourceDeclArr=(Declaration[])sourceColumn.getOuterDeclarations().values().toArray(new Declaration[0]);
  final String[] globals=(String[])requiredGlobals.toArray(new String[requiredGlobals.size()]);
  StringTemplate st=utils.getRuleGroup().getInstanceOf("accumulateMethod");
  utils.setStringTemplateAttributes(context,st,declarations,globals);
  st.setAttribute("innerDeclarations",sourceDeclArr);
  st.setAttribute("methodName",className);
  final String initCode=accumDescr.getInitCode();
  final String actionCode=accumDescr.getActionCode();
  final String resultCode=accumDescr.getResultCode();
  st.setAttribute("initCode",initCode);
  st.setAttribute("actionCode",actionCode);
  st.setAttribute("resultCode",resultCode);
  String resultType=null;
  if (resultColumn.getObjectType() instanceof ClassObjectType) {
    resultType=((ClassObjectType)resultColumn.getObjectType()).getClassType().getName();
  }
 else {
    resultType=resultColumn.getObjectType().getValueType().getClassType().getName();
  }
  st.setAttribute("resultType",resultType);
  context.getMethods().add(st.toString());
  st=utils.getInvokerGroup().getInstanceOf("accumulateInvoker");
  st.setAttribute("package",context.getPkg().getName());
  st.setAttribute("ruleClassName",utils.ucFirst(context.getRuleDescr().getClassName()));
  st.setAttribute("invokerClassName",context.getRuleDescr().getClassName() + utils.ucFirst(className) + "Invoker");
  st.setAttribute("methodName",className);
  utils.setStringTemplateAttributes(context,st,declarations,(String[])requiredGlobals.toArray(new String[requiredGlobals.size()]));
  st.setAttribute("hashCode",actionCode.hashCode());
  Accumulate accumulate=new Accumulate(sourceColumn,resultColumn,declarations,sourceDeclArr);
  final String invokerClassName=context.getPkg().getName() + "." + context.getRuleDescr().getClassName()+ utils.ucFirst(className)+ "Invoker";
  context.getInvokers().put(invokerClassName,st.toString());
  context.getInvokerLookups().put(invokerClassName,accumulate);
  context.getDescrLookups().put(invokerClassName,accumDescr);
  return accumulate;
}
