{
  name=name.trim();
  if (StringUtils.isEmpty(name)) {
    return null;
  }
  if (name.equals(DefaultDialectOption.PROPERTY_NAME)) {
    return getDefaultDialect();
  }
 else   if (name.equals(DefaultPackageNameOption.PROPERTY_NAME)) {
    return getDefaultPackageName();
  }
 else   if (name.startsWith(AccumulateFunctionOption.PROPERTY_NAME)) {
    int index=AccumulateFunctionOption.PROPERTY_NAME.length();
    AccumulateFunction function=this.accumulateFunctions.get(name.substring(index));
    return function != null ? function.getClass().getName() : null;
  }
 else   if (name.startsWith(EvaluatorOption.PROPERTY_NAME)) {
    String key=name.substring(name.lastIndexOf('.') + 1);
    EvaluatorDefinition evalDef=this.evaluatorRegistry.getEvaluatorDefinition(key);
    return evalDef != null ? evalDef.getClass().getName() : null;
  }
 else   if (name.equals(DumpDirOption.PROPERTY_NAME)) {
    return this.dumpDirectory != null ? this.dumpDirectory.toString() : null;
  }
 else   if (name.equals(ProcessStringEscapesOption.PROPERTY_NAME)) {
    return String.valueOf(isProcessStringEscapes());
  }
  return null;
}
