{
  String drl="package test.cep\n" + "import org.kie.StockTick\n" + "declare StockTick\n"+ "        @role(event)\n"+ "end\n"+ "rule x\n"+ "        dialect \"mvel\"\n"+ "        when\n"+ "                $n: Number() from accumulate ( $st:StockTick() over window:time(5m), count($st))\n"+ "        then\n"+ "end";
  PackageBuilder pkgbuilder=new PackageBuilder();
  pkgbuilder.addPackageFromDrl(new StringReader(drl));
  assertFalse(pkgbuilder.getErrors().toString(),pkgbuilder.hasErrors());
  Package[] pkgs=pkgbuilder.getPackages();
  byte[] spkgs=DroolsStreamUtils.streamOut(pkgs);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  KnowledgeAgent kagent=createKAgent(kbase,false);
  ByteArrayResource bres=(ByteArrayResource)ResourceFactory.newByteArrayResource(spkgs);
  bres.setResourceType(ResourceType.PKG);
  ChangeSetImpl cs=new ChangeSetImpl();
  cs.setResourcesAdded(Arrays.<Resource>asList(bres));
  kagent.applyChangeSet(cs);
  KnowledgePackage pack=kagent.getKnowledgeBase().getKnowledgePackage("test.cep");
  assertNotNull(pack);
  assertEquals(1,pack.getRules().size());
  KnowledgePackage pack2=kagent.getKnowledgeBase().getKnowledgePackage("org.kie");
  assertNotNull(pack2);
  assertEquals(0,pack2.getRules().size());
  StatefulKnowledgeSession ksession=kagent.getKnowledgeBase().newStatefulKnowledgeSession();
  AgendaEventListener ael=Mockito.mock(AgendaEventListener.class);
  ksession.addEventListener(ael);
  ksession.insert(new StockTick());
  ksession.insert(new StockTick());
  ksession.fireAllRules();
  ArgumentCaptor<AfterActivationFiredEvent> arg=ArgumentCaptor.forClass(AfterActivationFiredEvent.class);
  Mockito.verify(ael).afterActivationFired(arg.capture());
  assertThat(((Number)arg.getValue().getActivation().getDeclarationValue("$n")).intValue(),CoreMatchers.equalTo(2));
}
