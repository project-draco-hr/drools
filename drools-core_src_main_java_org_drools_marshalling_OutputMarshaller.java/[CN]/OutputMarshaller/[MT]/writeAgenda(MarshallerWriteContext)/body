{
  InternalWorkingMemory wm=context.wm;
  DefaultAgenda agenda=(DefaultAgenda)wm.getAgenda();
  Map<String,ActivationGroup> activationGroups=agenda.getActivationGroupsMap();
  AgendaGroup[] agendaGroups=(AgendaGroup[])agenda.getAgendaGroupsMap().values().toArray(new AgendaGroup[agenda.getAgendaGroupsMap().size()]);
  Arrays.sort(agendaGroups,AgendaGroupSorter.instance);
  for (  AgendaGroup group : agendaGroups) {
    context.writeInt(PersisterEnums.AGENDA_GROUP);
    context.writeUTF(group.getName());
    context.writeBoolean(group.isActive());
  }
  context.writeInt(PersisterEnums.END);
  LinkedList<AgendaGroup> focusStack=agenda.getStackList();
  for (Iterator<AgendaGroup> it=focusStack.iterator(); it.hasNext(); ) {
    AgendaGroup group=it.next();
    context.writeInt(PersisterEnums.AGENDA_GROUP);
    context.writeUTF(group.getName());
  }
  context.writeInt(PersisterEnums.END);
  RuleFlowGroupImpl[] ruleFlowGroups=(RuleFlowGroupImpl[])agenda.getRuleFlowGroupsMap().values().toArray(new RuleFlowGroupImpl[agenda.getRuleFlowGroupsMap().size()]);
  Arrays.sort(ruleFlowGroups,RuleFlowGroupSorter.instance);
  for (  RuleFlowGroupImpl group : ruleFlowGroups) {
    context.writeInt(PersisterEnums.RULE_FLOW_GROUP);
    context.writeUTF(group.getName());
    context.writeBoolean(group.isActive());
    context.writeBoolean(group.isAutoDeactivate());
  }
  context.writeInt(PersisterEnums.END);
}
