{
  final String[] interfaces=new String[this.interfaces.size()];
  this.interfaces.toArray(interfaces);
  cv.visit(this.version,this.access,this.name,this.signature,this.superName,interfaces);
  if (this.sourceFile != null || this.sourceDebug != null) {
    cv.visitSource(this.sourceFile,this.sourceDebug);
  }
  if (this.outerClass != null) {
    cv.visitOuterClass(this.outerClass,this.outerMethod,this.outerMethodDesc);
  }
  int i, n;
  n=this.visibleAnnotations == null ? 0 : this.visibleAnnotations.size();
  for (i=0; i < n; ++i) {
    final AnnotationNode an=(AnnotationNode)this.visibleAnnotations.get(i);
    an.accept(cv.visitAnnotation(an.desc,true));
  }
  n=this.invisibleAnnotations == null ? 0 : this.invisibleAnnotations.size();
  for (i=0; i < n; ++i) {
    final AnnotationNode an=(AnnotationNode)this.invisibleAnnotations.get(i);
    an.accept(cv.visitAnnotation(an.desc,false));
  }
  n=this.attrs == null ? 0 : this.attrs.size();
  for (i=0; i < n; ++i) {
    cv.visitAttribute((Attribute)this.attrs.get(i));
  }
  for (i=0; i < this.innerClasses.size(); ++i) {
    ((InnerClassNode)this.innerClasses.get(i)).accept(cv);
  }
  for (i=0; i < this.fields.size(); ++i) {
    ((FieldNode)this.fields.get(i)).accept(cv);
  }
  for (i=0; i < this.methods.size(); ++i) {
    ((MethodNode)this.methods.get(i)).accept(cv);
  }
  cv.visitEnd();
}
