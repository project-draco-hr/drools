{
  final StringBuilder buf=new StringBuilder();
  final String[] lines=lhs.split((lhs.indexOf("\r\n") >= 0 ? "\r\n" : "\n"),-1);
  final String[] expanded=new String[lines.length];
  int lastExpanded=-1;
  int lastPattern=-1;
  for (int i=0; i < lines.length - 1; i++) {
    final String trimmed=lines[i].trim();
    expanded[++lastExpanded]=lines[i];
    if (trimmed.length() == 0 || trimmed.startsWith("#") || trimmed.startsWith("//")) {
      buf.append(lines[i]);
    }
 else     if (trimmed.startsWith(">")) {
      expanded[lastExpanded]=lines[i].replaceFirst(">"," ");
    }
 else {
      expanded[lastExpanded]=substitute(expanded[lastExpanded],this.consequence,i + lineOffset,useThen,showSteps);
      if (lines[i].equals(expanded[lastExpanded])) {
        this.addError(new ExpanderException("Unable to expand: " + lines[i],i + lineOffset));
      }
      if (trimmed.startsWith("-") && (!lines[i].equals(expanded[lastExpanded]))) {
        int lastMatchStart=-1;
        int lastMatchEnd=-1;
        String modifiers="";
        if (lastPattern >= 0) {
          final Matcher m2=modifyFinder.matcher(expanded[lastPattern]);
          while (m2.find()) {
            lastMatchStart=m2.start();
            lastMatchEnd=m2.end();
            modifiers=m2.group(1).trim();
          }
        }
        if (lastMatchStart > -1) {
          expanded[lastPattern]=expanded[lastPattern].substring(0,lastMatchStart) + "{ " + modifiers+ ((modifiers.length() == 0) ? "" : ", ")+ expanded[lastExpanded].trim()+ " }"+ expanded[lastPattern].substring(lastMatchEnd);
        }
 else {
          this.addError(new ExpanderException("No modify was found to add the modifier to: " + lines[i].trim(),i + lineOffset));
        }
        lastExpanded--;
      }
 else {
        lastPattern=lastExpanded;
      }
    }
  }
  for (int i=0; i <= lastExpanded; i++) {
    buf.append(expanded[i]);
    buf.append(nl);
  }
  if (lines.length == 0) {
    buf.append(nl);
  }
  return buf.toString();
}
