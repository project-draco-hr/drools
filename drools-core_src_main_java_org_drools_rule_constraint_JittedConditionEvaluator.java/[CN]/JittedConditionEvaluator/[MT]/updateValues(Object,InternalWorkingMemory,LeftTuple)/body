{
  if (declarations.length == 0) {
    return null;
  }
  Object[] array=new Object[declarations.length];
  if (leftTuple == null) {
    for (int i=0; i < declarations.length; i++) {
      array[i]=declarations[i].getExtractor().getValue(workingMemory,object);
    }
    return array;
  }
  if (declarations.length == 1) {
    array[0]=declarations[0].getPattern().getOffset() > leftTuple.getIndex() ? declarations[0].getExtractor().getValue(workingMemory,object) : declarations[0].getExtractor().getValue(workingMemory,leftTuple.get(declarations[0]).getObject());
    return array;
  }
  for (  GeneratorHelper.DeclarationMatcher declarationMatcher : declarationMatchers) {
    if (declarationMatcher.getRootDistance() > leftTuple.getIndex()) {
      array[declarationMatcher.getOriginalIndex()]=declarationMatcher.getDeclaration().getExtractor().getValue(workingMemory,object);
      continue;
    }
    while (declarationMatcher.getRootDistance() < leftTuple.getIndex()) {
      leftTuple=leftTuple.getParent();
    }
    array[declarationMatcher.getOriginalIndex()]=declarationMatcher.getDeclaration().getExtractor().getValue(workingMemory,leftTuple.getHandle().getObject());
  }
  return array;
}
