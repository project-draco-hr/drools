{
  BaseDescr result=null;
  if (allowOr && input.LA(1) == DRLLexer.LEFT_PAREN && helper.validateLT(2,DroolsSoftKeywords.OR)) {
    CEDescrBuilder<?,OrDescr> or=null;
    if (state.backtracking == 0) {
      or=ce.or();
      result=or.getDescr();
      helper.start(or,CEDescrBuilder.class,null);
    }
    try {
      match(input,DRLLexer.LEFT_PAREN,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return null;
      match(input,DRLLexer.ID,DroolsSoftKeywords.OR,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return null;
      while (input.LA(1) == DRLLexer.AT) {
        annotation(or);
        if (state.failed)         return null;
      }
      if (state.backtracking == 0) {
        helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
      }
      while (input.LA(1) != DRLLexer.RIGHT_PAREN) {
        lhsAnd(or,allowOr);
        if (state.failed)         return null;
      }
      match(input,DRLLexer.RIGHT_PAREN,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return null;
    }
  finally {
      if (state.backtracking == 0) {
        helper.end(CEDescrBuilder.class,or);
      }
    }
  }
 else {
    CEDescrBuilder<?,OrDescr> or=null;
    if (state.backtracking == 0) {
      or=ce.or();
      result=or.getDescr();
      helper.start(or,CEDescrBuilder.class,null);
    }
    try {
      lhsAnd(or,allowOr);
      if (state.failed)       return null;
      if (allowOr && (helper.validateIdentifierKey(DroolsSoftKeywords.OR) || input.LA(1) == DRLLexer.DOUBLE_PIPE)) {
        while (helper.validateIdentifierKey(DroolsSoftKeywords.OR) || input.LA(1) == DRLLexer.DOUBLE_PIPE) {
          if (input.LA(1) == DRLLexer.DOUBLE_PIPE) {
            match(input,DRLLexer.DOUBLE_PIPE,null,null,DroolsEditorType.SYMBOL);
          }
 else {
            match(input,DRLLexer.ID,DroolsSoftKeywords.OR,null,DroolsEditorType.KEYWORD);
          }
          if (state.failed)           return null;
          while (input.LA(1) == DRLLexer.AT) {
            annotation(or);
            if (state.failed)             return null;
          }
          if (state.backtracking == 0) {
            helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);
          }
          lhsAnd(or,allowOr);
          if (state.failed)           return null;
        }
      }
 else       if (allowOr) {
        if (state.backtracking == 0) {
          ((ConditionalElementDescr)ce.getDescr()).getDescrs().remove(or.getDescr());
          for (          BaseDescr base : or.getDescr().getDescrs()) {
            ((ConditionalElementDescr)ce.getDescr()).addDescr(base);
          }
          result=ce.getDescr();
        }
      }
    }
  finally {
      if (state.backtracking == 0) {
        helper.end(CEDescrBuilder.class,or);
      }
    }
  }
  return result;
}
