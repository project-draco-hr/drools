{
  try {
    ruleNestingLevel++;
    int _type=NAME;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      mSYMBOL();
      if (failed)       return;
    }
    if (backtracking == 0) {
      if (token == null && ruleNestingLevel == 1) {
        emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
      }
    }
  }
  finally {
    ruleNestingLevel--;
  }
}
