{
  try {
    ruleNestingLevel++;
    int _type=VAR;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      match('?');
      if (failed)       return;
      if (input.LA(1) == '$' || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')) {
        input.consume();
        failed=false;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return;
        }
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recover(mse);
        throw mse;
      }
      loop14:       do {
        int alt14=2;
        int LA14_0=input.LA(1);
        if (((LA14_0 >= '\u0000' && LA14_0 <= '\b') || (LA14_0 >= '\u000B' && LA14_0 <= '\f') || (LA14_0 >= '\u000E' && LA14_0 <= '\u001F')|| LA14_0 == '!' || (LA14_0 >= '#' && LA14_0 <= '%') || LA14_0 == '\'' || (LA14_0 >= '*' && LA14_0 <= ':') || (LA14_0 >= '<' && LA14_0 <= '>') || (LA14_0 >= '@' && LA14_0 <= '{') || LA14_0 == '}' || (LA14_0 >= '\u007F' && LA14_0 <= '\uFFFE'))) {
          alt14=1;
        }
switch (alt14) {
case 1:
{
            mSYMBOL();
            if (failed)             return;
          }
        break;
default :
      break loop14;
  }
}
 while (true);
}
if (backtracking == 0) {
if (token == null && ruleNestingLevel == 1) {
  emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
}
  finally {
ruleNestingLevel--;
}
}
