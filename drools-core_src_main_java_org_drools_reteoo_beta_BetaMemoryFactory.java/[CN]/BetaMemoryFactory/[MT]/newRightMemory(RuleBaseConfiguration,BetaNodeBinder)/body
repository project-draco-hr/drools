{
  BetaRightMemory memory=null;
  BetaRightMemory innerMostMemory=null;
  final FieldConstraint[] constraints=(binder != null) ? binder.getConstraints() : null;
  if ((constraints != null) && (config.getBooleanProperty(RuleBaseConfiguration.PROPERTY_INDEX_RIGHT_BETA_MEMORY))) {
    for (int i=0; i < constraints.length; i++) {
      BetaRightMemory innerMemory=null;
      if (constraints[i] instanceof VariableConstraint) {
        final VariableConstraint bvc=(VariableConstraint)constraints[i];
        ValueType valueType=bvc.getEvaluator().getValueType();
        if (valueType == ValueType.BOOLEAN_TYPE) {
          if (valueType == ValueType.BOOLEAN_TYPE) {
            innerMemory=new BooleanConstrainedRightMemory(bvc.getFieldExtractor(),bvc.getRequiredDeclarations()[0],bvc.getEvaluator());
          }
        }
 else {
          if (bvc.getEvaluator().getOperator() == Operator.EQUAL) {
            innerMemory=new ObjectEqualConstrRightMemory(bvc.getFieldExtractor(),bvc.getRequiredDeclarations()[0],bvc.getEvaluator());
          }
 else           if (bvc.getEvaluator().getOperator() == Operator.NOT_EQUAL) {
            innerMemory=new ObjectNotEqualConstrRightMemory(bvc.getFieldExtractor(),bvc.getRequiredDeclarations()[0],bvc.getEvaluator());
          }
        }
      }
 else       if (constraints[i] instanceof InstanceEqualsConstraint) {
        final InstanceEqualsConstraint iec=(InstanceEqualsConstraint)constraints[i];
        innerMemory=new InstanceEqualConstrRightMemory(iec.getOtherColumn());
      }
      if (innerMemory != null) {
        if (innerMostMemory != null) {
          try {
            innerMostMemory.setInnerMemory(innerMemory);
            innerMostMemory=innerMemory;
          }
 catch (          final OperationNotSupportedException e) {
            throw new RuntimeException("BUG: Exception was not supposed to be raised",e);
          }
        }
 else {
          memory=innerMemory;
          innerMostMemory=memory;
        }
      }
    }
  }
  if (memory == null) {
    memory=new DefaultRightMemory();
  }
  return memory;
}
