{
  BetaLeftMemory memory=null;
  FieldConstraint[] constraints=(binder != null) ? binder.getConstraints() : null;
  if ((constraints != null) && (!INDEX_DISABLED.equalsIgnoreCase(System.getProperty("org.drools.beta-indexing")))) {
    for (int i=0; i < constraints.length; i++) {
      if (constraints[i] instanceof BoundVariableConstraint) {
        BoundVariableConstraint bvc=(BoundVariableConstraint)constraints[i];
switch (bvc.getEvaluator().getType()) {
case Evaluator.BOOLEAN_TYPE:
          memory=new BooleanConstrainedLeftMemory(bvc.getFieldExtractor(),bvc.getRequiredDeclarations()[0],bvc.getEvaluator(),memory);
        break;
case Evaluator.OBJECT_TYPE:
case Evaluator.SHORT_TYPE:
case Evaluator.INTEGER_TYPE:
case Evaluator.DOUBLE_TYPE:
case Evaluator.FLOAT_TYPE:
case Evaluator.BYTE_TYPE:
      if (bvc.getEvaluator().getOperator() == Evaluator.EQUAL) {
        memory=new ObjectEqualConstrLeftMemory(bvc.getFieldExtractor(),bvc.getRequiredDeclarations()[0],bvc.getEvaluator(),memory);
      }
 else       if (bvc.getEvaluator().getOperator() == Evaluator.NOT_EQUAL) {
        memory=new ObjectNotEqualConstrLeftMemory(bvc.getFieldExtractor(),bvc.getRequiredDeclarations()[0],bvc.getEvaluator(),memory);
      }
    break;
}
}
}
}
if (memory == null) {
memory=new DefaultLeftMemory();
}
return memory;
}
