{
  final byte[] b=this.b;
  final char[] c=new char[this.maxStringLength];
  int i, j, k;
  int u, v, w;
  Attribute attr;
  int access;
  String name;
  String desc;
  String attrName;
  String signature;
  int anns=0;
  int ianns=0;
  Attribute cattrs=null;
  u=this.header;
  access=readUnsignedShort(u);
  name=readClass(u + 2,c);
  v=this.items[readUnsignedShort(u + 4)];
  final String superClassName=v == 0 ? null : readUTF8(v,c);
  final String[] implementedItfs=new String[readUnsignedShort(u + 6)];
  w=0;
  u+=8;
  for (i=0; i < implementedItfs.length; ++i) {
    implementedItfs[i]=readClass(u,c);
    u+=2;
  }
  v=u;
  i=readUnsignedShort(v);
  v+=2;
  for (; i > 0; --i) {
    j=readUnsignedShort(v + 6);
    v+=8;
    for (; j > 0; --j) {
      v+=6 + readInt(v + 2);
    }
  }
  i=readUnsignedShort(v);
  v+=2;
  for (; i > 0; --i) {
    j=readUnsignedShort(v + 6);
    v+=8;
    for (; j > 0; --j) {
      v+=6 + readInt(v + 2);
    }
  }
  signature=null;
  String sourceFile=null;
  String sourceDebug=null;
  String enclosingOwner=null;
  String enclosingName=null;
  String enclosingDesc=null;
  i=readUnsignedShort(v);
  v+=2;
  for (; i > 0; --i) {
    attrName=readUTF8(v,c);
    if (attrName.equals("SourceFile")) {
      sourceFile=readUTF8(v + 6,c);
    }
 else     if (attrName.equals("Deprecated")) {
      access|=Opcodes.ACC_DEPRECATED;
    }
 else     if (attrName.equals("Synthetic")) {
      access|=Opcodes.ACC_SYNTHETIC;
    }
 else     if (attrName.equals("Annotation")) {
      access|=Opcodes.ACC_ANNOTATION;
    }
 else     if (attrName.equals("Enum")) {
      access|=Opcodes.ACC_ENUM;
    }
 else     if (attrName.equals("InnerClasses")) {
      w=v + 6;
    }
 else     if (attrName.equals("Signature")) {
      signature=readUTF8(v + 6,c);
    }
 else     if (attrName.equals("SourceDebugExtension")) {
      final int len=readInt(v + 2);
      sourceDebug=readUTF(v + 6,len,new char[len]);
    }
 else     if (attrName.equals("EnclosingMethod")) {
      enclosingOwner=readClass(v + 6,c);
      final int item=readUnsignedShort(v + 8);
      if (item != 0) {
        enclosingName=readUTF8(this.items[item],c);
        enclosingDesc=readUTF8(this.items[item] + 2,c);
      }
    }
 else     if (attrName.equals("RuntimeVisibleAnnotations")) {
      anns=v + 6;
    }
 else     if (attrName.equals("RuntimeInvisibleAnnotations")) {
      ianns=v + 6;
    }
 else {
      attr=readAttribute(attrs,attrName,v + 6,readInt(v + 2),c,-1,null);
      if (attr != null) {
        attr.next=cattrs;
        cattrs=attr;
      }
    }
    v+=6 + readInt(v + 2);
  }
  classVisitor.visit(readInt(4),access,name,signature,superClassName,implementedItfs);
  if (sourceFile != null || sourceDebug != null) {
    classVisitor.visitSource(sourceFile,sourceDebug);
  }
  if (enclosingOwner != null) {
    classVisitor.visitOuterClass(enclosingOwner,enclosingName,enclosingDesc);
  }
  for (i=1; i >= 0; --i) {
    v=i == 0 ? ianns : anns;
    if (v != 0) {
      j=readUnsignedShort(v);
      v+=2;
      for (; j > 0; --j) {
        desc=readUTF8(v,c);
        v+=2;
        v=readAnnotationValues(v,c,classVisitor.visitAnnotation(desc,i != 0));
      }
    }
  }
  while (cattrs != null) {
    attr=cattrs.next;
    cattrs.next=null;
    classVisitor.visitAttribute(cattrs);
    cattrs=attr;
  }
  if (w != 0) {
    i=readUnsignedShort(w);
    w+=2;
    for (; i > 0; --i) {
      classVisitor.visitInnerClass(readUnsignedShort(w) == 0 ? null : readClass(w,c),readUnsignedShort(w + 2) == 0 ? null : readClass(w + 2,c),readUnsignedShort(w + 4) == 0 ? null : readUTF8(w + 4,c),readUnsignedShort(w + 6));
      w+=8;
    }
  }
  i=readUnsignedShort(u);
  u+=2;
  for (; i > 0; --i) {
    access=readUnsignedShort(u);
    name=readUTF8(u + 2,c);
    desc=readUTF8(u + 4,c);
    int fieldValueItem=0;
    signature=null;
    anns=0;
    ianns=0;
    cattrs=null;
    j=readUnsignedShort(u + 6);
    u+=8;
    for (; j > 0; --j) {
      attrName=readUTF8(u,c);
      if (attrName.equals("ConstantValue")) {
        fieldValueItem=readUnsignedShort(u + 6);
      }
 else       if (attrName.equals("Synthetic")) {
        access|=Opcodes.ACC_SYNTHETIC;
      }
 else       if (attrName.equals("Deprecated")) {
        access|=Opcodes.ACC_DEPRECATED;
      }
 else       if (attrName.equals("Enum")) {
        access|=Opcodes.ACC_ENUM;
      }
 else       if (attrName.equals("Signature")) {
        signature=readUTF8(u + 6,c);
      }
 else       if (attrName.equals("RuntimeVisibleAnnotations")) {
        anns=u + 6;
      }
 else       if (attrName.equals("RuntimeInvisibleAnnotations")) {
        ianns=u + 6;
      }
 else {
        attr=readAttribute(attrs,attrName,u + 6,readInt(u + 2),c,-1,null);
        if (attr != null) {
          attr.next=cattrs;
          cattrs=attr;
        }
      }
      u+=6 + readInt(u + 2);
    }
    final Object value=(fieldValueItem == 0 ? null : readConst(fieldValueItem,c));
    final FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);
    if (fv != null) {
      for (j=1; j >= 0; --j) {
        v=j == 0 ? ianns : anns;
        if (v != 0) {
          k=readUnsignedShort(v);
          v+=2;
          for (; k > 0; --k) {
            desc=readUTF8(v,c);
            v+=2;
            v=readAnnotationValues(v,c,fv.visitAnnotation(desc,j != 0));
          }
        }
      }
      while (cattrs != null) {
        attr=cattrs.next;
        cattrs.next=null;
        fv.visitAttribute(cattrs);
        cattrs=attr;
      }
      fv.visitEnd();
    }
  }
  i=readUnsignedShort(u);
  u+=2;
  for (; i > 0; --i) {
    final int u0=u + 6;
    access=readUnsignedShort(u);
    name=readUTF8(u + 2,c);
    desc=readUTF8(u + 4,c);
    signature=null;
    anns=0;
    ianns=0;
    int dann=0;
    int mpanns=0;
    int impanns=0;
    cattrs=null;
    v=0;
    w=0;
    j=readUnsignedShort(u + 6);
    u+=8;
    for (; j > 0; --j) {
      attrName=readUTF8(u,c);
      u+=2;
      final int attrSize=readInt(u);
      u+=4;
      if (attrName.equals("Code")) {
        v=u;
      }
 else       if (attrName.equals("Exceptions")) {
        w=u;
      }
 else       if (attrName.equals("Synthetic")) {
        access|=Opcodes.ACC_SYNTHETIC;
      }
 else       if (attrName.equals("Varargs")) {
        access|=Opcodes.ACC_VARARGS;
      }
 else       if (attrName.equals("Bridge")) {
        access|=Opcodes.ACC_BRIDGE;
      }
 else       if (attrName.equals("Deprecated")) {
        access|=Opcodes.ACC_DEPRECATED;
      }
 else       if (attrName.equals("Signature")) {
        signature=readUTF8(u,c);
      }
 else       if (attrName.equals("AnnotationDefault")) {
        dann=u;
      }
 else       if (attrName.equals("RuntimeVisibleAnnotations")) {
        anns=u;
      }
 else       if (attrName.equals("RuntimeInvisibleAnnotations")) {
        ianns=u;
      }
 else       if (attrName.equals("RuntimeVisibleParameterAnnotations")) {
        mpanns=u;
      }
 else       if (attrName.equals("RuntimeInvisibleParameterAnnotations")) {
        impanns=u;
      }
 else {
        attr=readAttribute(attrs,attrName,u,attrSize,c,-1,null);
        if (attr != null) {
          attr.next=cattrs;
          cattrs=attr;
        }
      }
      u+=attrSize;
    }
    String[] exceptions;
    if (w == 0) {
      exceptions=null;
    }
 else {
      exceptions=new String[readUnsignedShort(w)];
      w+=2;
      for (j=0; j < exceptions.length; ++j) {
        exceptions[j]=readClass(w,c);
        w+=2;
      }
    }
    final MethodVisitor mv=classVisitor.visitMethod(access,name,desc,signature,exceptions);
    if (mv != null) {
      if (mv instanceof MethodWriter) {
        final MethodWriter mw=(MethodWriter)mv;
        if (mw.cw.cr == this) {
          if (signature == mw.signature) {
            boolean sameExceptions=false;
            if (exceptions == null) {
              sameExceptions=mw.exceptionCount == 0;
            }
 else {
              if (exceptions.length == mw.exceptionCount) {
                sameExceptions=true;
                for (j=exceptions.length - 1; j >= 0; --j) {
                  w-=2;
                  if (mw.exceptions[j] != readUnsignedShort(w)) {
                    sameExceptions=false;
                    break;
                  }
                }
              }
            }
            if (sameExceptions) {
              mw.classReaderOffset=u0;
              mw.classReaderLength=u - u0;
              continue;
            }
          }
        }
      }
      if (dann != 0) {
        final AnnotationVisitor dv=mv.visitAnnotationDefault();
        readAnnotationValue(dann,c,null,dv);
        dv.visitEnd();
      }
      for (j=1; j >= 0; --j) {
        w=j == 0 ? ianns : anns;
        if (w != 0) {
          k=readUnsignedShort(w);
          w+=2;
          for (; k > 0; --k) {
            desc=readUTF8(w,c);
            w+=2;
            w=readAnnotationValues(w,c,mv.visitAnnotation(desc,j != 0));
          }
        }
      }
      if (mpanns != 0) {
        readParameterAnnotations(mpanns,c,true,mv);
      }
      if (impanns != 0) {
        readParameterAnnotations(impanns,c,false,mv);
      }
      while (cattrs != null) {
        attr=cattrs.next;
        cattrs.next=null;
        mv.visitAttribute(cattrs);
        cattrs=attr;
      }
    }
    if (mv != null && v != 0) {
      final int maxStack=readUnsignedShort(v);
      final int maxLocals=readUnsignedShort(v + 2);
      final int codeLength=readInt(v + 4);
      v+=8;
      final int codeStart=v;
      final int codeEnd=v + codeLength;
      mv.visitCode();
      int label;
      final Label[] labels=new Label[codeLength + 1];
      while (v < codeEnd) {
        int opcode=b[v] & 0xFF;
switch (ClassWriter.TYPE[opcode]) {
case ClassWriter.NOARG_INSN:
case ClassWriter.IMPLVAR_INSN:
          v+=1;
        break;
case ClassWriter.LABEL_INSN:
      label=v - codeStart + readShort(v + 1);
    if (labels[label] == null) {
      labels[label]=new Label();
    }
  v+=3;
break;
case ClassWriter.LABELW_INSN:
label=v - codeStart + readInt(v + 1);
if (labels[label] == null) {
labels[label]=new Label();
}
v+=5;
break;
case ClassWriter.WIDE_INSN:
opcode=b[v + 1] & 0xFF;
if (opcode == Opcodes.IINC) {
v+=6;
}
 else {
v+=4;
}
break;
case ClassWriter.TABL_INSN:
w=v - codeStart;
v=v + 4 - (w & 3);
label=w + readInt(v);
v+=4;
if (labels[label] == null) {
labels[label]=new Label();
}
j=readInt(v);
v+=4;
j=readInt(v) - j + 1;
v+=4;
for (; j > 0; --j) {
label=w + readInt(v);
v+=4;
if (labels[label] == null) {
labels[label]=new Label();
}
}
break;
case ClassWriter.LOOK_INSN:
w=v - codeStart;
v=v + 4 - (w & 3);
label=w + readInt(v);
v+=4;
if (labels[label] == null) {
labels[label]=new Label();
}
j=readInt(v);
v+=4;
for (; j > 0; --j) {
v+=4;
label=w + readInt(v);
v+=4;
if (labels[label] == null) {
labels[label]=new Label();
}
}
break;
case ClassWriter.VAR_INSN:
case ClassWriter.SBYTE_INSN:
case ClassWriter.LDC_INSN:
v+=2;
break;
case ClassWriter.SHORT_INSN:
case ClassWriter.LDCW_INSN:
case ClassWriter.FIELDORMETH_INSN:
case ClassWriter.TYPE_INSN:
case ClassWriter.IINC_INSN:
v+=3;
break;
case ClassWriter.ITFMETH_INSN:
v+=5;
break;
default :
v+=4;
break;
}
}
j=readUnsignedShort(v);
v+=2;
for (; j > 0; --j) {
label=readUnsignedShort(v);
Label start=labels[label];
if (start == null) {
labels[label]=start=new Label();
}
label=readUnsignedShort(v + 2);
Label end=labels[label];
if (end == null) {
labels[label]=end=new Label();
}
label=readUnsignedShort(v + 4);
Label handler=labels[label];
if (handler == null) {
labels[label]=handler=new Label();
}
final int type=readUnsignedShort(v + 6);
if (type == 0) {
mv.visitTryCatchBlock(start,end,handler,null);
}
 else {
mv.visitTryCatchBlock(start,end,handler,readUTF8(this.items[type],c));
}
v+=8;
}
int varTable=0;
int varTypeTable=0;
cattrs=null;
j=readUnsignedShort(v);
v+=2;
for (; j > 0; --j) {
attrName=readUTF8(v,c);
if (attrName.equals("LocalVariableTable")) {
if (!skipDebug) {
varTable=v + 6;
k=readUnsignedShort(v + 6);
w=v + 8;
for (; k > 0; --k) {
label=readUnsignedShort(w);
if (labels[label] == null) {
labels[label]=new Label();
}
label+=readUnsignedShort(w + 2);
if (labels[label] == null) {
labels[label]=new Label();
}
w+=10;
}
}
}
 else if (attrName.equals("LocalVariableTypeTable")) {
varTypeTable=v + 6;
}
 else if (attrName.equals("LineNumberTable")) {
if (!skipDebug) {
k=readUnsignedShort(v + 6);
w=v + 8;
for (; k > 0; --k) {
label=readUnsignedShort(w);
if (labels[label] == null) {
labels[label]=new Label();
}
labels[label].line=readUnsignedShort(w + 2);
w+=4;
}
}
}
 else {
for (k=0; k < attrs.length; ++k) {
if (attrs[k].type.equals(attrName)) {
attr=attrs[k].read(this,v + 6,readInt(v + 2),c,codeStart - 8,labels);
if (attr != null) {
attr.next=cattrs;
cattrs=attr;
}
}
}
}
v+=6 + readInt(v + 2);
}
v=codeStart;
Label l;
while (v < codeEnd) {
w=v - codeStart;
l=labels[w];
if (l != null) {
mv.visitLabel(l);
if (!skipDebug && l.line > 0) {
mv.visitLineNumber(l.line,l);
}
}
int opcode=b[v] & 0xFF;
switch (ClassWriter.TYPE[opcode]) {
case ClassWriter.NOARG_INSN:
mv.visitInsn(opcode);
v+=1;
break;
case ClassWriter.IMPLVAR_INSN:
if (opcode > Opcodes.ISTORE) {
opcode-=59;
mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);
}
 else {
opcode-=26;
mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);
}
v+=1;
break;
case ClassWriter.LABEL_INSN:
mv.visitJumpInsn(opcode,labels[w + readShort(v + 1)]);
v+=3;
break;
case ClassWriter.LABELW_INSN:
mv.visitJumpInsn(opcode - 33,labels[w + readInt(v + 1)]);
v+=5;
break;
case ClassWriter.WIDE_INSN:
opcode=b[v + 1] & 0xFF;
if (opcode == Opcodes.IINC) {
mv.visitIincInsn(readUnsignedShort(v + 2),readShort(v + 4));
v+=6;
}
 else {
mv.visitVarInsn(opcode,readUnsignedShort(v + 2));
v+=4;
}
break;
case ClassWriter.TABL_INSN:
v=v + 4 - (w & 3);
label=w + readInt(v);
v+=4;
final int min=readInt(v);
v+=4;
final int max=readInt(v);
v+=4;
final Label[] table=new Label[max - min + 1];
for (j=0; j < table.length; ++j) {
table[j]=labels[w + readInt(v)];
v+=4;
}
mv.visitTableSwitchInsn(min,max,labels[label],table);
break;
case ClassWriter.LOOK_INSN:
v=v + 4 - (w & 3);
label=w + readInt(v);
v+=4;
j=readInt(v);
v+=4;
final int[] keys=new int[j];
final Label[] values=new Label[j];
for (j=0; j < keys.length; ++j) {
keys[j]=readInt(v);
v+=4;
values[j]=labels[w + readInt(v)];
v+=4;
}
mv.visitLookupSwitchInsn(labels[label],keys,values);
break;
case ClassWriter.VAR_INSN:
mv.visitVarInsn(opcode,b[v + 1] & 0xFF);
v+=2;
break;
case ClassWriter.SBYTE_INSN:
mv.visitIntInsn(opcode,b[v + 1]);
v+=2;
break;
case ClassWriter.SHORT_INSN:
mv.visitIntInsn(opcode,readShort(v + 1));
v+=3;
break;
case ClassWriter.LDC_INSN:
mv.visitLdcInsn(readConst(b[v + 1] & 0xFF,c));
v+=2;
break;
case ClassWriter.LDCW_INSN:
mv.visitLdcInsn(readConst(readUnsignedShort(v + 1),c));
v+=3;
break;
case ClassWriter.FIELDORMETH_INSN:
case ClassWriter.ITFMETH_INSN:
int cpIndex=this.items[readUnsignedShort(v + 1)];
final String iowner=readClass(cpIndex,c);
cpIndex=this.items[readUnsignedShort(cpIndex + 2)];
final String iname=readUTF8(cpIndex,c);
final String idesc=readUTF8(cpIndex + 2,c);
if (opcode < Opcodes.INVOKEVIRTUAL) {
mv.visitFieldInsn(opcode,iowner,iname,idesc);
}
 else {
mv.visitMethodInsn(opcode,iowner,iname,idesc);
}
if (opcode == Opcodes.INVOKEINTERFACE) {
v+=5;
}
 else {
v+=3;
}
break;
case ClassWriter.TYPE_INSN:
mv.visitTypeInsn(opcode,readClass(v + 1,c));
v+=3;
break;
case ClassWriter.IINC_INSN:
mv.visitIincInsn(b[v + 1] & 0xFF,b[v + 2]);
v+=3;
break;
default :
mv.visitMultiANewArrayInsn(readClass(v + 1,c),b[v + 3] & 0xFF);
v+=4;
break;
}
}
l=labels[codeEnd - codeStart];
if (l != null) {
mv.visitLabel(l);
}
if (!skipDebug && varTable != 0) {
int[] typeTable=null;
if (varTypeTable != 0) {
w=varTypeTable;
k=readUnsignedShort(w) * 3;
w+=2;
typeTable=new int[k];
while (k > 0) {
typeTable[--k]=w + 6;
typeTable[--k]=readUnsignedShort(w + 8);
typeTable[--k]=readUnsignedShort(w);
w+=10;
}
}
w=varTable;
k=readUnsignedShort(w);
w+=2;
for (; k > 0; --k) {
final int start=readUnsignedShort(w);
final int length=readUnsignedShort(w + 2);
final int index=readUnsignedShort(w + 8);
String vsignature=null;
if (typeTable != null) {
for (int a=0; a < typeTable.length; a+=3) {
if (typeTable[a] == start && typeTable[a + 1] == index) {
vsignature=readUTF8(typeTable[a + 2],c);
break;
}
}
}
mv.visitLocalVariable(readUTF8(w + 4,c),readUTF8(w + 6,c),vsignature,labels[start],labels[start + length],index);
w+=10;
}
}
while (cattrs != null) {
attr=cattrs.next;
cattrs.next=null;
mv.visitAttribute(cattrs);
cattrs=attr;
}
mv.visitMaxs(maxStack,maxLocals);
}
if (mv != null) {
mv.visitEnd();
}
}
classVisitor.visitEnd();
}
