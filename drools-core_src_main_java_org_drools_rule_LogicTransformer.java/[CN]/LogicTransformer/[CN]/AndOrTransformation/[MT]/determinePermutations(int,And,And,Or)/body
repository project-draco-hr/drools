{
  final Object entry=and.getChildren().get(currentLevel);
  if (entry instanceof Or) {
    final Or childOr=(Or)entry;
    for (final Iterator it=childOr.getChildren().iterator(); it.hasNext(); ) {
      final And temp=new And();
      if (currentLevel == 0) {
        combination=new And();
      }
 else {
        temp.getChildren().addAll(combination.getChildren());
      }
      final Object object=it.next();
      if (object instanceof And) {
        final And childAnd=(And)object;
        for (final Iterator childIter=childAnd.getChildren().iterator(); childIter.hasNext(); ) {
          temp.addChild(childIter.next());
        }
      }
 else {
        temp.addChild(object);
      }
      if (currentLevel < and.getChildren().size() - 1) {
        determinePermutations(currentLevel + 1,and,temp,or);
      }
 else {
        or.addChild(temp);
      }
    }
  }
 else {
    final And temp=new And();
    if (currentLevel == 0) {
      combination=new And();
    }
 else {
      temp.getChildren().addAll(combination.getChildren());
    }
    temp.addChild(entry);
    if (currentLevel < and.getChildren().size() - 1) {
      determinePermutations(currentLevel + 1,and,temp,or);
    }
 else {
      or.addChild(temp);
    }
  }
}
