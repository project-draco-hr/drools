{
  List orsList=new ArrayList();
  Object[] others=new Object[parent.getChildren().size()];
  int permutations=1;
  int index=0;
  for (Iterator it=parent.getChildren().iterator(); it.hasNext(); ) {
    Object child=it.next();
    if ((child instanceof GroupElement) && ((GroupElement)child).isOr()) {
      permutations*=((GroupElement)child).getChildren().size();
      orsList.add(child);
    }
 else {
      others[index]=child;
    }
    index++;
  }
  parent.setType(GroupElement.OR);
  parent.getChildren().clear();
  GroupElement[] ors=(GroupElement[])orsList.toArray(new GroupElement[orsList.size()]);
  int[] indexes=new int[ors.length];
  for (int i=1; i <= permutations; i++) {
    GroupElement and=GroupElementFactory.newAndInstance();
    int mod=1;
    for (int j=ors.length - 1; j >= 0; j--) {
      and.getChildren().add(0,ors[j].getChildren().get(indexes[j]));
      if ((i % mod) == 0) {
        indexes[j]=(indexes[j] + 1) % ors[j].getChildren().size();
      }
      mod*=ors[j].getChildren().size();
    }
    for (int j=0; j < others.length; j++) {
      if (others[j] != null) {
        and.getChildren().add(j,others[j]);
      }
    }
    parent.addChild(and);
  }
  parent.pack();
}
