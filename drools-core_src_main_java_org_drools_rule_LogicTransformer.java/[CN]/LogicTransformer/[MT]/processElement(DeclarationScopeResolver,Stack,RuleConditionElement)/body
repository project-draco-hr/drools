{
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    for (Iterator it=pattern.getNestedElements().iterator(); it.hasNext(); ) {
      processElement(resolver,contextStack,(RuleConditionElement)it.next());
    }
    for (    Constraint next : pattern.getConstraints()) {
      if (next instanceof Declaration) {
        continue;
      }
      Constraint constraint=(Constraint)next;
      Declaration[] decl=constraint.getRequiredDeclarations();
      for (int i=0; i < decl.length; i++) {
        Declaration resolved=resolver.getDeclaration(null,decl[i].getIdentifier());
        if (constraint instanceof MvelConstraint && ((MvelConstraint)constraint).isUnification()) {
          if (ClassObjectType.DroolsQuery_ObjectType.isAssignableFrom(resolved.getPattern().getObjectType())) {
            Declaration redeclaredDeclr=new Declaration(resolved.getIdentifier(),((MvelConstraint)constraint).getFieldExtractor(),pattern,false);
            pattern.addDeclaration(redeclaredDeclr);
          }
 else {
            ((MvelConstraint)constraint).unsetUnification();
          }
        }
        if (resolved != null && resolved != decl[i] && resolved.getPattern() != pattern) {
          constraint.replaceDeclaration(decl[i],resolved);
        }
 else         if (resolved == null) {
          Pattern old=decl[i].getPattern();
          Pattern current=resolver.findPatternByIndex(old.getIndex());
          if (current != null && old != current) {
            resolved=new Declaration(decl[i].getIdentifier(),decl[i].getExtractor(),current);
            constraint.replaceDeclaration(decl[i],resolved);
          }
        }
      }
    }
  }
 else   if (element instanceof EvalCondition) {
    Declaration[] decl=((EvalCondition)element).getRequiredDeclarations();
    for (    Declaration aDecl : decl) {
      Declaration resolved=resolver.getDeclaration(null,aDecl.getIdentifier());
      if (resolved != null && resolved != aDecl) {
        ((EvalCondition)element).replaceDeclaration(aDecl,resolved);
      }
    }
  }
 else   if (element instanceof Accumulate) {
    for (    RuleConditionElement rce : element.getNestedElements()) {
      processElement(resolver,contextStack,rce);
    }
    ((Accumulate)element).resetInnerDeclarationCache();
  }
 else   if (element instanceof From) {
    DataProvider provider=((From)element).getDataProvider();
    Declaration[] decl=provider.getRequiredDeclarations();
    for (    Declaration aDecl : decl) {
      Declaration resolved=resolver.getDeclaration(null,aDecl.getIdentifier());
      if (resolved != null && resolved != aDecl) {
        provider.replaceDeclaration(aDecl,resolved);
      }
 else       if (resolved == null) {
        Pattern old=aDecl.getPattern();
        Pattern current=resolver.findPatternByIndex(old.getIndex());
        if (current != null && old != current) {
          resolved=new Declaration(aDecl.getIdentifier(),aDecl.getExtractor(),current);
          provider.replaceDeclaration(aDecl,resolved);
        }
      }
    }
  }
 else   if (element instanceof QueryElement) {
    QueryElement qe=(QueryElement)element;
    Pattern pattern=qe.getResultPattern();
    for (    Entry<String,Declaration> entry : pattern.getInnerDeclarations().entrySet()) {
      Declaration resolved=resolver.getDeclaration(null,entry.getValue().getIdentifier());
      if (resolved != null && resolved != entry.getValue() && resolved.getPattern() != pattern) {
        entry.setValue(resolved);
      }
    }
    List<Integer> varIndexes=ArrayUtils.asList(qe.getVariableIndexes());
    for (int i=0; i < qe.getDeclIndexes().length; i++) {
      Declaration declr=(Declaration)qe.getArgTemplate()[qe.getDeclIndexes()[i]];
      Declaration resolved=resolver.getDeclaration(null,declr.getIdentifier());
      if (resolved != null && resolved != declr && resolved.getPattern() != pattern) {
        qe.getArgTemplate()[qe.getDeclIndexes()[i]]=resolved;
      }
      if (ClassObjectType.DroolsQuery_ObjectType.isAssignableFrom(resolved.getPattern().getObjectType())) {
        declr=pattern.addDeclaration(declr.getIdentifier());
        ArrayElementReader reader=new ArrayElementReader(new SelfReferenceClassFieldReader(Object[].class,"this"),qe.getDeclIndexes()[i],resolved.getExtractor().getExtractToClass());
        declr.setReadAccessor(reader);
        varIndexes.add(qe.getDeclIndexes()[i]);
      }
    }
    qe.setVariableIndexes(ArrayUtils.toIntArray(varIndexes));
  }
 else {
    contextStack.push(element);
    for (    RuleConditionElement ruleConditionElement : element.getNestedElements()) {
      processElement(resolver,contextStack,ruleConditionElement);
    }
    contextStack.pop();
  }
}
