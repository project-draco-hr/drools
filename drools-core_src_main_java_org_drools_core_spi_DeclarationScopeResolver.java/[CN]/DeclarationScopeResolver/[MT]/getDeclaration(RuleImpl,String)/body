{
  for (int i=this.buildStack.size() - 1; i >= 0; i--) {
    final Declaration declaration=buildStack.get(i).getInnerDeclarations().get(identifier);
    if (declaration != null) {
      return declaration;
    }
  }
  if (rule != null && rule.getParent() != null) {
    Declaration parentDeclaration=getExtendedDeclaration(rule.getParent(),identifier);
    if (null != parentDeclaration) {
      return parentDeclaration;
    }
  }
  if (this.map.containsKey((identifier))) {
    Class<?> cls=this.map.get(identifier);
    ClassObjectType classObjectType=new ClassObjectType(cls);
    Declaration declaration;
    final Pattern dummy=new Pattern(0,classObjectType);
    InternalReadAccessor globalExtractor=getReadAcessor(identifier,classObjectType);
    declaration=new Declaration(identifier,globalExtractor,dummy);
    if (pkg != null) {
      pkg.getClassFieldAccessorStore().getClassObjectType(classObjectType,dummy);
      pkg.getClassFieldAccessorStore().getClassObjectType(classObjectType,(AcceptsClassObjectType)globalExtractor);
    }
    return declaration;
  }
  return null;
}
