{
  this.ruleBase=new LeapsRuleBase();
  this.wm1=this.ruleBase.newWorkingMemory();
  this.wm2=this.ruleBase.newWorkingMemory();
  this.wm3=this.ruleBase.newWorkingMemory();
  this.wm4=this.ruleBase.newWorkingMemory();
  this.ruleBaseAddRule=new LeapsRuleBase();
  this.workingMemory=this.ruleBaseAddRule.newWorkingMemory();
  final ClassObjectType contextType=new ClassObjectType(Context.class);
  final Evaluator integerEqualEvaluator=EvaluatorFactory.getEvaluator(Evaluator.INTEGER_TYPE,Evaluator.EQUAL);
  this.rule1=new Rule("rule1");
  final Column contextColumnRule1=new Column(0,contextType,"context1");
  contextColumnRule1.addConstraint(getLiteralConstraint(contextColumnRule1,"state",new Integer(1),integerEqualEvaluator));
  this.rule1.addPattern(contextColumnRule1);
  final Declaration contextRule1Declaration=this.rule1.getDeclaration("context1");
  this.rule1.setConsequence(new Consequence(){
    /** 
 */
    private static final long serialVersionUID=-143645020218500159L;
    public void evaluate(    final KnowledgeHelper drools,    final WorkingMemory workingMemory) throws ConsequenceException {
      try {
        final Rule rule=drools.getRule();
        final Tuple tuple=drools.getTuple();
        final Context dummy=(Context)drools.get(contextRule1Declaration);
        if (dummy == LeapsRuleBaseTest.this.context1) {
          LeapsRuleBaseTest.this.handlesForRules.add(LeapsRuleBaseTest.this.handle1Rule1);
        }
 else         if (dummy == LeapsRuleBaseTest.this.context2) {
          LeapsRuleBaseTest.this.handlesForRules.add(LeapsRuleBaseTest.this.handle2Rule1);
        }
      }
 catch (      final Exception e) {
        throw new ConsequenceException(e);
      }
    }
  }
);
  this.rule2=new Rule("rule2");
  final Column contextColumnRule2=new Column(0,contextType,"context2");
  contextColumnRule2.addConstraint(getLiteralConstraint(contextColumnRule2,"state",new Integer(1),integerEqualEvaluator));
  this.rule2.addPattern(contextColumnRule2);
  final Declaration contextRule2Declaration=this.rule2.getDeclaration("context2");
  this.rule2.setConsequence(new Consequence(){
    /** 
 */
    private static final long serialVersionUID=6203944847152159644L;
    public void evaluate(    final KnowledgeHelper drools,    final WorkingMemory workingMemory) throws ConsequenceException {
      try {
        final Rule rule=drools.getRule();
        final Tuple tuple=drools.getTuple();
        final Context dummy=(Context)drools.get(contextRule2Declaration);
        if (dummy == LeapsRuleBaseTest.this.context1) {
          LeapsRuleBaseTest.this.handlesForRules.add(LeapsRuleBaseTest.this.handle1Rule2);
        }
 else         if (dummy == LeapsRuleBaseTest.this.context2) {
          LeapsRuleBaseTest.this.handlesForRules.add(LeapsRuleBaseTest.this.handle2Rule2);
        }
      }
 catch (      final Exception e) {
        throw new ConsequenceException(e);
      }
    }
  }
);
}
