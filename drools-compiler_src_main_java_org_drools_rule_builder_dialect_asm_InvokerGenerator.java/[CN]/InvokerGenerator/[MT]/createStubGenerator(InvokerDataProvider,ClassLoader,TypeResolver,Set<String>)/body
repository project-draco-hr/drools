{
  final ClassGenerator generator=new ClassGenerator(data.getPackageName() + "." + data.getInvokerClassName(),classLoader,typeResolver);
  generator.addStaticField(ACC_PRIVATE + ACC_FINAL,"serialVersionUID",Long.TYPE,INVOKER_SERIAL_UID).addDefaultConstructor();
  generator.addMethod(ACC_PUBLIC,"hashCode",generator.methodDescr(Integer.TYPE),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      push(data.hashCode());
      mv.visitInsn(IRETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getMethodBytecode",generator.methodDescr(List.class),new GetMethodBytecodeMethod(data)).addMethod(ACC_PUBLIC,"equals",generator.methodDescr(Boolean.TYPE,Object.class),new EqualsMethod()).addMethod(ACC_PUBLIC,"getPackageName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      push(data.getPackageName());
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getGeneratedInvokerClassName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      push(data.getInvokerClassName() + "Generated");
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getRuleClassName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      push(data.getRuleClassName());
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getInternalRuleClassName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      push(data.getInternalRuleClassName());
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getMethodName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      push(data.getMethodName());
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getInvokerClassName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      push(data.getInvokerClassName());
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getDeclarationTypes",generator.methodDescr(String[].class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      returnAsArray(data.getDeclarationTypes());
    }
  }
).addMethod(ACC_PUBLIC,"getGlobals",generator.methodDescr(String[].class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      returnAsArray(data.getGlobals());
    }
  }
).addMethod(ACC_PUBLIC,"getGlobalTypes",generator.methodDescr(String[].class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      returnAsArray(data.getGlobalTypes());
    }
  }
).addMethod(ACC_PUBLIC,"getPackageImports",generator.methodDescr(String[].class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      returnAsArray(imports,String.class);
    }
  }
);
  return generator;
}
