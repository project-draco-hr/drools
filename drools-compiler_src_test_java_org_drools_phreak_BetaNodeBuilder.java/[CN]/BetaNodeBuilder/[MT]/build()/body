{
  EntryPointNode epn=new EntryPointNode(buildContext.getNextId(),buildContext.getRuleBase().getRete(),buildContext);
  epn.attach(buildContext);
  ObjectTypeNode otn=new ObjectTypeNode(buildContext.getNextId(),epn,new ClassObjectType(leftType),buildContext);
  LeftInputAdapterNode leftInput=new LeftInputAdapterNode(buildContext.getNextId(),otn,buildContext);
  ObjectSource rightInput=new ObjectTypeNode(buildContext.getNextId(),epn,new ClassObjectType(rightType),buildContext);
  ReteTesterHelper reteTesterHelper=new ReteTesterHelper();
  Pattern pattern=new Pattern(0,new ClassObjectType(leftType));
  BetaConstraints betaConstraints=null;
  if (constraintFieldName != null) {
    ClassFieldAccessorStore store=(ClassFieldAccessorStore)reteTesterHelper.getStore();
    InternalReadAccessor extractor=store.getReader(leftType,leftFieldName,getClass().getClassLoader());
    Declaration declr=new Declaration(leftVariableName,extractor,pattern);
    try {
      betaConstraints=new SingleBetaConstraints(reteTesterHelper.getBoundVariableConstraint(rightType,constraintFieldName,declr,constraintOperator),buildContext.getRuleBase().getConfiguration());
    }
 catch (    IntrospectionException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    betaConstraints=new EmptyBetaConstraints();
  }
switch (nodeType) {
case NodeTypeEnums.JoinNode:
    return new JoinNode(0,leftInput,rightInput,betaConstraints,buildContext);
case NodeTypeEnums.NotNode:
  return new NotNode(0,leftInput,rightInput,betaConstraints,buildContext);
case NodeTypeEnums.ExistsNode:
return new ExistsNode(0,leftInput,rightInput,betaConstraints,buildContext);
}
throw new IllegalStateException("Unable to build Node");
}
