{
  final KieBaseModelImpl kBase=new KieBaseModelImpl();
  kBase.setName(reader.getAttribute("name"));
  kBase.setDefault("true".equals(reader.getAttribute("default")));
  String eventMode=reader.getAttribute("eventProcessingMode");
  if (eventMode != null) {
    kBase.setEventProcessingMode(EventProcessingOption.determineEventProcessingMode(eventMode));
  }
  String equalsBehavior=reader.getAttribute("equalsBehavior");
  if (equalsBehavior != null) {
    kBase.setEqualsBehavior(EqualityBehaviorOption.valueOf(equalsBehavior.toUpperCase()));
  }
  String scope=reader.getAttribute("scope");
  if (scope != null) {
    kBase.setScope(scope.trim());
  }
  String pkgs=reader.getAttribute("packages");
  if (pkgs != null) {
    for (    String pkg : pkgs.split(",")) {
      kBase.addPackage(pkg.trim());
    }
  }
  String includes=reader.getAttribute("includes");
  if (includes != null) {
    for (    String include : includes.split(",")) {
      kBase.addInclude(include.trim());
    }
  }
  readNodes(reader,new AbstractXStreamConverter.NodeReader(){
    public void onNode(    HierarchicalStreamReader reader,    String name,    String value){
      if ("ksession".equals(name)) {
        KieSessionModelImpl kSession=readObject(reader,context,KieSessionModelImpl.class);
        kBase.getRawKieSessionModels().put(kSession.getName(),kSession);
        kSession.setKBase(kBase);
      }
    }
  }
);
  return kBase;
}
