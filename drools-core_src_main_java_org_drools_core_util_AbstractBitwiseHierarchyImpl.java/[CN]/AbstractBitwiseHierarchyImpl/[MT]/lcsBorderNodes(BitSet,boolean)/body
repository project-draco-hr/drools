{
  List<J> border=new ArrayList<J>();
  if (key == null) {
    return border;
  }
  int l=key.length();
  BitSet start=new BitSet(l + 1);
  BitSet end=new BitSet(l + 1);
  int index=0;
  J root=line.get(new BitSet());
  if (root != null) {
    border.add(root);
  }
  while (index >= 0) {
    int s=index;
    int t=key.nextClearBit(s);
    start.clear();
    start.set(s,true);
    end.set(s,t,true);
    for (    J val : line.subMap(start,nextKey(end)).values()) {
      BitSet candidate=val.getBitMask();
      int comp=superset(key,candidate);
      if ((includeEquals && comp >= 0) || (!includeEquals && comp > 0)) {
        border.add(val);
        for (int j=0; j < border.size(); j++) {
          J ex=border.get(j);
          if (ex != null) {
            if (superset(candidate,ex.getBitMask()) > 0) {
              border.set(j,null);
            }
          }
        }
      }
    }
    index=key.nextSetBit(t);
  }
  return border;
}
