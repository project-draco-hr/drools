{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("model.drl",getClass()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    System.out.println(kbuilder.getErrors().toString());
    System.exit(1);
  }
  kbuilder.add(ResourceFactory.newClassPathResource("./commands/commands-model.drl",getClass()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    System.out.println(kbuilder.getErrors().toString());
    System.exit(1);
  }
  kbuilder.add(ResourceFactory.newClassPathResource("queries.drl",getClass()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    System.out.println(kbuilder.getErrors().toString());
    System.exit(1);
  }
  kbuilder.add(ResourceFactory.newClassPathResource("commands.drl",getClass()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    System.out.println(kbuilder.getErrors().toString());
    System.exit(1);
  }
  KnowledgeBaseConfiguration kbaseConf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kbaseConf.setOption(AssertBehaviorOption.EQUALITY);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kbaseConf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  Counter c=new Counter();
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  ksession.setGlobal("counter",c);
  ksession.getChannels().put("output",outputChannel);
  ksession.getChannels().put("events",localEventsChannel);
  Thread.currentThread().setContextClassLoader((((InternalRuleBase)((KnowledgeBaseImpl)kbase).ruleBase).getRootClassLoader()));
  Map vars=new HashMap();
  vars.put("c",c);
  Map<String,Map> map;
  try {
    map=(Map<String,Map>)MVEL.executeExpression(MVEL.compileExpression(new String(StreamUtils.getBytes(getClass().getResource("data.mvel").openStream()))),vars);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  for (  Object o : map.get("rooms").values()) {
    ksession.insert(o);
  }
  for (  Object o : map.get("doors").values()) {
    ksession.insert(o);
  }
  for (  Object o : map.get("characters").values()) {
    ksession.insert(o);
  }
  for (  Object o : map.get("items").values()) {
    ksession.insert(o);
  }
  for (  Object o : map.get("locations").values()) {
    ksession.insert(o);
  }
  Map<String,Integer> things=(Map<String,Integer>)map.get("vars");
  String baseStr="import  org.drools.adventures.*;  import org.drools.adventures.commands.*;\n";
  MapVariableResolverFactory f=new MapVariableResolverFactory(map.get("vars"));
  FactHandle fh=null;
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new LookCommand( characters['hero'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new MoveCommand( characters['hero'], rooms['basement'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new MoveCommand( characters['hero'], rooms['kitchen'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new LookCommand( characters['hero'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new MoveCommand( characters['hero'], rooms['basement'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new LookCommand( characters['hero'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new PickupCommand( characters['hero'], items['torch'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new PickupCommand( characters['hero'], items['mace'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new LookCommand( characters['hero'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new MoveCommand( characters['hero'], rooms['kitchen'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new LookCommand( characters['hero'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new DropCommand( characters['hero'], items['mace'] )",f)));
  ksession.fireAllRules();
  fh=ksession.insert(new Request(MVEL.eval(baseStr + "new LookCommand( characters['hero'] )",f)));
  ksession.fireAllRules();
}
