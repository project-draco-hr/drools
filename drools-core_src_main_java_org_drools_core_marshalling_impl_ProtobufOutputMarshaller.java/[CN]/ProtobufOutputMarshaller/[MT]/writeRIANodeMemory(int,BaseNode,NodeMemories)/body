{
  RightInputAdapterNode riaNode=(RightInputAdapterNode)node;
  ObjectSink[] sinks=riaNode.getObjectSinkPropagator().getSinks();
  BetaNode betaNode=(BetaNode)sinks[0];
  Memory betaMemory=memories.peekNodeMemory(betaNode.getId());
  if (betaMemory == null) {
    return null;
  }
  BetaMemory bm;
  if (betaNode.getType() == NodeTypeEnums.AccumulateNode) {
    bm=((AccumulateMemory)betaMemory).getBetaMemory();
  }
 else {
    bm=(BetaMemory)betaMemory;
  }
  bm.getRightTupleMemory().iterator();
  if (bm.getRightTupleMemory().size() > 0) {
    ProtobufMessages.NodeMemory.RIANodeMemory.Builder _ria=ProtobufMessages.NodeMemory.RIANodeMemory.newBuilder();
    final org.drools.core.util.Iterator it=bm.getRightTupleMemory().iterator();
    for (RightTuple entry=(RightTuple)it.next(); entry != null; entry=(RightTuple)it.next()) {
      LeftTuple leftTuple=entry instanceof LeftTuple ? (LeftTuple)entry : (LeftTuple)entry.getFactHandle().getObject();
      InternalFactHandle handle=(InternalFactHandle)leftTuple.getFactHandle();
      FactHandle _handle=ProtobufMessages.FactHandle.newBuilder().setId(handle.getId()).setRecency(handle.getRecency()).build();
      _ria.addContext(ProtobufMessages.NodeMemory.RIANodeMemory.RIAContext.newBuilder().setTuple(PersisterHelper.createTuple(leftTuple)).setResultHandle(_handle).build());
    }
    return ProtobufMessages.NodeMemory.newBuilder().setNodeId(nodeId).setNodeType(ProtobufMessages.NodeMemory.NodeType.RIA).setRia(_ria.build()).build();
  }
  return null;
}
