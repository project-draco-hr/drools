{
  ReteooWorkingMemory wm=(ReteooWorkingMemory)context.wm;
  wm.getAgenda().unstageActivations();
  evaluateRuleActivations(wm);
  ProtobufMessages.RuleData.Builder _ruleData=ProtobufMessages.RuleData.newBuilder();
  long time=0;
  if (context.wm.getTimerService() instanceof PseudoClockScheduler) {
    time=context.clockTime;
  }
  _ruleData.setLastId(wm.getFactHandleFactory().getId());
  _ruleData.setLastRecency(wm.getFactHandleFactory().getRecency());
  InternalFactHandle handle=context.wm.getInitialFactHandle();
  ProtobufMessages.FactHandle _ifh=ProtobufMessages.FactHandle.newBuilder().setType(ProtobufMessages.FactHandle.HandleType.INITIAL_FACT).setId(handle.getId()).setRecency(handle.getRecency()).build();
  _ruleData.setInitialFact(_ifh);
  writeAgenda(context,_ruleData);
  writeNodeMemories(context,_ruleData);
  for (  SessionEntryPoint wmep : wm.getEntryPoints().values()) {
    org.drools.core.marshalling.impl.ProtobufMessages.EntryPoint.Builder _epb=ProtobufMessages.EntryPoint.newBuilder();
    _epb.setEntryPointId(wmep.getEntryPointId());
    writeFactHandles(context,_epb,((NamedEntryPoint)wmep).getObjectStore());
    writeTruthMaintenanceSystem(context,wmep,_epb);
    _ruleData.addEntryPoint(_epb.build());
  }
  writeActionQueue(context,_ruleData);
  ProtobufMessages.KnowledgeSession.Builder _session=ProtobufMessages.KnowledgeSession.newBuilder().setMultithread(false).setTime(time).setRuleData(_ruleData.build());
  if (processMarshaller != null) {
    Builder _pdata=ProtobufMessages.ProcessData.newBuilder();
    if (context.marshalProcessInstances) {
      context.parameterObject=_pdata;
      processMarshaller.writeProcessInstances(context);
    }
    if (context.marshalWorkItems) {
      context.parameterObject=_pdata;
      processMarshaller.writeWorkItems(context);
    }
    context.parameterObject=_pdata;
    processMarshaller.writeProcessTimers(context);
    _session.setProcessData(_pdata.build());
  }
  Timers _timers=writeTimers(context.wm.getTimerService().getTimerJobInstances(context.wm.getId()),context);
  if (_timers != null) {
    _session.setTimers(_timers);
  }
  return _session.build();
}
