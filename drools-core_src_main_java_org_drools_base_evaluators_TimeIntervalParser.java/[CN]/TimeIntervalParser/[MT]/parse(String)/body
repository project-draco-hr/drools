{
  if (paramText == null || paramText.trim().length() == 0) {
    return new Long[0];
  }
  String[] params=paramText.split(",");
  Long[] result=new Long[params.length];
  int index=0;
  for (  String param : params) {
    String trimmed=param.trim();
    if (trimmed.length() > 0) {
      Matcher mat=SIMPLE.matcher(trimmed);
      if (mat.matches()) {
        int days=(mat.group(SIM_DAY) != null) ? Integer.parseInt(mat.group(SIM_DAY)) : 0;
        int hours=(mat.group(SIM_HOU) != null) ? Integer.parseInt(mat.group(SIM_HOU)) : 0;
        int min=(mat.group(SIM_MIN) != null) ? Integer.parseInt(mat.group(SIM_MIN)) : 0;
        int sec=(mat.group(SIM_SEC) != null) ? Integer.parseInt(mat.group(SIM_SEC)) : 0;
        int ms=(mat.group(SIM_MS) != null) ? Integer.parseInt(mat.group(SIM_MS)) : 0;
        long r=days * DAY_MS + hours * HOU_MS + min * MIN_MS + sec * SEC_MS + ms;
        if (mat.group(SIM_SGN) != null && mat.group(SIM_SGN).equals("-")) {
          r=-r;
        }
        result[index]=new Long(r);
      }
 else       if ("*".equals(trimmed) || "+*".equals(trimmed)) {
        result[index]=Long.MAX_VALUE;
      }
 else       if ("-*".equals(trimmed)) {
        result[index]=Long.MIN_VALUE;
      }
 else {
        throw new RuntimeDroolsException("Error parsing interval value: " + param);
      }
    }
 else {
      throw new RuntimeDroolsException("Empty parameters not allowed in: [" + paramText + "]");
    }
    index++;
  }
  return result;
}
