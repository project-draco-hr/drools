{
  Iterator<LeftTuple> it=LeftTupleIterator.iterator(workingMemory,this);
  for (LeftTuple leftTuple=it.next(); leftTuple != null; leftTuple=it.next()) {
    LeftTuple childLeftTuple=leftTuple.getFirstChild();
    if (childLeftTuple != null) {
      while (childLeftTuple != null) {
        RightTuple rightParent=childLeftTuple.getRightParent();
        sink.assertLeftTuple(sink.createLeftTuple(leftTuple,sink,context,true),context,workingMemory);
        while (childLeftTuple != null && childLeftTuple.getRightParent() == rightParent) {
          childLeftTuple=childLeftTuple.getLeftParentNext();
        }
      }
    }
 else {
      childLeftTuple=sink.createLeftTuple(leftTuple,sink,context,true);
      sink.assertLeftTuple(childLeftTuple,context,workingMemory);
    }
  }
}
