{
  List<JAXBElement<?>> atomContent=new ArrayList<JAXBElement<?>>();
  JAXBElement<OpAtomType> rel=processRel(pattern);
  atomContent.add(rel);
  if (pattern.getDeclaration() != null) {
    JAXBElement<OidType> oid=builder.createOid(pattern.getDeclaration().getIdentifier());
    atomContent.add(oid);
    PropertyInfo propertyInfo=new PropertyInfo();
    propertyInfo.setVar(pattern.getDeclaration().getIdentifier());
    getBindingsManager().put(propertyInfo);
  }
  ConstraintsAnalyzer constraintsAnalyzer=new ConstraintsAnalyzer();
  List<PropertyInfo> propertyInfos=constraintsAnalyzer.processConstraints(pattern,this);
  List<JAXBElement<SlotType>> slots=convertPropertyInfosInSlots(propertyInfos);
  atomContent.addAll(slots);
  List<JAXBElement<SlotType>> unusedProperties=getUnusedProperties(slots,pattern);
  atomContent.addAll(unusedProperties);
  if (constraintsAnalyzer.getOther().size() > 0) {
    List<JAXBElement<?>> other=constraintsAnalyzer.getOther();
    other.add(builder.createAtom(atomContent.toArray(new JAXBElement<?>[atomContent.size()])));
    JAXBElement<AndInnerType> and=builder.createAnd(other.toArray(new JAXBElement<?>[other.size()]));
    return and;
  }
  JAXBElement<?> atom=builder.createAtom(atomContent.toArray(new JAXBElement<?>[atomContent.size()]));
  if (pattern.getDeclaration() != null) {
    this.atoms.put(pattern.getDeclaration().getIdentifier(),atom);
  }
  return atom;
}
