{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_LogicalInsertionsModifySameRuleGivesDifferentLogicalInsertion.drl")));
  final Package pkg=builder.getPackage();
  RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  ruleBase=SerializationHelper.serializeObject(ruleBase);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  Sensor sensor1=new Sensor(100,0);
  FactHandle sensor1Handle=workingMemory.insert(sensor1);
  Sensor sensor2=new Sensor(200,0);
  FactHandle sensor2Handle=workingMemory.insert(sensor2);
  Sensor sensor3=new Sensor(200,0);
  FactHandle sensor3Handle=workingMemory.insert(sensor2);
  workingMemory.fireAllRules();
  List temperatureList=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(Integer.class)));
  assertTrue(temperatureList.contains(Integer.valueOf(100)));
  assertTrue(temperatureList.contains(Integer.valueOf(200)));
  assertEquals(2,temperatureList.size());
  workingMemory.modifyRetract(sensor1Handle);
  sensor1.setTemperature(150);
  workingMemory.modifyInsert(sensor1Handle,sensor1);
  workingMemory.fireAllRules();
  temperatureList=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(Integer.class)));
  assertFalse(temperatureList.contains(Integer.valueOf(100)));
  assertTrue(temperatureList.contains(Integer.valueOf(150)));
  assertTrue(temperatureList.contains(Integer.valueOf(200)));
  assertEquals(2,temperatureList.size());
}
