{
  List notCovered=new ArrayList();
  List partiallyCovered=new ArrayList();
  List totallyCovered=new ArrayList();
  KnowledgeBase kbase=loadKnowledgeBase("test_RepetitiveUpdatesOnSameFacts.drl");
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  ksession.setGlobal("totallyCovered",totallyCovered);
  ksession.setGlobal("partiallyCovered",partiallyCovered);
  ksession.setGlobal("notCovered",notCovered);
  KnowledgeRuntimeLogger logger=KnowledgeRuntimeLoggerFactory.newFileLogger(ksession,"test");
  IntervalRequirement ir100=new IntervalRequirement(100,2);
  ksession.insert(ir100);
  IntervalRequirement ir101=new IntervalRequirement(101,2);
  ksession.insert(ir101);
  IntervalRequirement ir102=new IntervalRequirement(102,2);
  ksession.insert(ir102);
  IntervalRequirement ir103=new IntervalRequirement(103,2);
  ksession.insert(ir103);
  ShiftAssignment sa=new ShiftAssignment();
  sa.setShiftStartTime(100);
  FactHandle saHandle=null;
  totallyCovered.clear();
  partiallyCovered.clear();
  notCovered.clear();
  sa.setShiftEndTime(101);
  System.out.println("ShiftAssignment set from " + sa.getShiftStartTime() + " to "+ sa.getShiftEndTime());
  saHandle=ksession.insert(sa);
  ksession.fireAllRules();
  assertEquals("notCovered with " + sa,3,notCovered.size());
  assertEquals("totallyCovered with " + sa,0,totallyCovered.size());
  assertEquals("partiallyCovered with " + sa,1,partiallyCovered.size());
  totallyCovered.clear();
  partiallyCovered.clear();
  notCovered.clear();
  sa.setShiftEndTime(103);
  System.out.println("ShiftAssignment set from " + sa.getShiftStartTime() + " to "+ sa.getShiftEndTime());
  ksession.update(saHandle,sa);
  ksession.fireAllRules();
  assertEquals("notCovered with " + sa,0,notCovered.size());
  assertEquals("totallyCovered with " + sa,0,totallyCovered.size());
  assertEquals("partiallyCovered with " + sa,3,partiallyCovered.size());
  totallyCovered.clear();
  partiallyCovered.clear();
  notCovered.clear();
  sa.setShiftEndTime(102);
  System.out.println("ShiftAssignment set from " + sa.getShiftStartTime() + " to "+ sa.getShiftEndTime());
  ksession.update(saHandle,sa);
  ksession.fireAllRules();
  assertEquals("notCovered with " + sa,1,notCovered.size());
  assertEquals("totallyCovered with " + sa,0,totallyCovered.size());
  assertEquals("partiallyCovered with " + sa,2,partiallyCovered.size());
  totallyCovered.clear();
  partiallyCovered.clear();
  notCovered.clear();
  sa.setShiftEndTime(104);
  System.out.println("ShiftAssignment set from " + sa.getShiftStartTime() + " to "+ sa.getShiftEndTime());
  ksession.update(saHandle,sa);
  ksession.fireAllRules();
  assertEquals("notCovered with " + sa,0,notCovered.size());
  assertEquals("totallyCovered with " + sa,0,totallyCovered.size());
  assertEquals("partiallyCovered with " + sa,4,partiallyCovered.size());
  totallyCovered.clear();
  partiallyCovered.clear();
  notCovered.clear();
  sa.setShiftEndTime(101);
  System.out.println("ShiftAssignment set from " + sa.getShiftStartTime() + " to "+ sa.getShiftEndTime());
  ksession.update(saHandle,sa);
  ksession.fireAllRules();
  assertEquals("notCovered with " + sa,3,notCovered.size());
  assertEquals("totallyCovered with " + sa,0,totallyCovered.size());
  assertEquals("partiallyCovered with " + sa,1,partiallyCovered.size());
  ksession.dispose();
  logger.close();
}
