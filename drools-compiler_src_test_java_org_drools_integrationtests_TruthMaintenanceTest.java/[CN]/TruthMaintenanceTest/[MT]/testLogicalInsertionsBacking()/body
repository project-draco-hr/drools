{
  final KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("test_LogicalInsertionsBacking.drl",getClass()),ResourceType.DRL);
  Collection<KnowledgePackage> kpkgs=kbuilder.getKnowledgePackages();
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kpkgs);
  kbase=SerializationHelper.serializeObject(kbase);
  StatefulKnowledgeSession session=createKnowledgeSession(kbase);
  final Cheese cheese1=new Cheese("c",1);
  final Cheese cheese2=new Cheese(cheese1.getType(),1);
  FactHandle h1=session.insert(cheese1);
  session.fireAllRules();
  session=getSerialisedStatefulKnowledgeSession(session,true);
  Collection<?> list=session.getObjects(new ClassObjectFilter(cheese1.getType().getClass()));
  assertEquals(1,list.size());
  assertEquals(cheese1.getType(),list.iterator().next());
  FactHandle h2=session.insert(cheese2);
  session.fireAllRules();
  session=getSerialisedStatefulKnowledgeSession(session,true);
  list=session.getObjects(new ClassObjectFilter(cheese1.getType().getClass()));
  assertEquals(1,list.size());
  assertEquals(cheese1.getType(),list.iterator().next());
  assertEquals(3,session.getObjects().size());
  h1=getFactHandle(h1,session);
  session.retract(h1);
  session=getSerialisedStatefulKnowledgeSession(session,true);
  session.fireAllRules();
  session=getSerialisedStatefulKnowledgeSession(session,true);
  list=session.getObjects(new ClassObjectFilter(cheese1.getType().getClass()));
  assertEquals("cheese-type " + cheese1.getType() + " was retracted, but should not. Backed by cheese2 => type.",1,list.size());
  assertEquals("cheese-type " + cheese1.getType() + " was retracted, but should not. Backed by cheese2 => type.",cheese1.getType(),list.iterator().next());
  h2=getFactHandle(h2,session);
  session.retract(h2);
  session=getSerialisedStatefulKnowledgeSession(session,true);
  session.fireAllRules();
  session=getSerialisedStatefulKnowledgeSession(session,true);
  list=session.getObjects(new ClassObjectFilter(cheese1.getType().getClass()));
  assertEquals("cheese-type " + cheese1.getType() + " was not retracted, but should have. Neither  cheese1 => type nor cheese2 => type is true.",0,list.size());
}
