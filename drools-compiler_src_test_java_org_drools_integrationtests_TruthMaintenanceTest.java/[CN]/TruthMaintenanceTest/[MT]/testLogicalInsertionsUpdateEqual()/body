{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_LogicalInsertionsUpdateEqual.drl")));
  final Package pkg=builder.getPackage();
  final RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  List l;
  final Person p=new Person("person");
  p.setAge(2);
  final FactHandle h=workingMemory.insert(p);
  assertEquals(1,IteratorToList.convert(workingMemory.iterateObjects()).size());
  workingMemory.fireAllRules();
  assertEquals(2,IteratorToList.convert(workingMemory.iterateObjects()).size());
  l=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(CheeseEqual.class)));
  assertEquals(1,l.size());
  assertEquals(3,((CheeseEqual)l.get(0)).getPrice());
  workingMemory.retract(h);
  assertEquals(0,IteratorToList.convert(workingMemory.iterateObjects()).size());
  TruthMaintenanceSystem tms=((InternalWorkingMemory)workingMemory).getTruthMaintenanceSystem();
  final java.lang.reflect.Field field=tms.getClass().getDeclaredField("assertMap");
  field.setAccessible(true);
  final ObjectHashMap m=(ObjectHashMap)field.get(tms);
  field.setAccessible(false);
  assertEquals("assertMap should be empty",0,m.size());
}
