{
  final KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("test_LogicalInsertionsSelfreferencing.drl",getClass()),KnowledgeType.DRL);
  Collection<KnowledgePackage> kpkgs=kbuilder.getKnowledgePackages();
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kpkgs);
  kbase=SerializationHelper.serializeObject(kbase);
  final StatefulKnowledgeSession session=kbase.newStatefulKnowledgeSession();
  final Person b=new Person("b");
  final Person a=new Person("a");
  session.setGlobal("b",b);
  FactHandle h1=session.insert(a);
  session.fireAllRules();
  Collection<?> list=session.getObjects(new ClassObjectFilter(a.getClass()));
  assertEquals(2,list.size());
  assertTrue(list.contains(a));
  assertTrue(list.contains(b));
  session.retract(h1);
  session.fireAllRules();
  list=session.getObjects(new ClassObjectFilter(a.getClass()));
  assertEquals("b was retracted, but it should not have. Is backed by b => b being true.",1,list.size());
  assertEquals("b was retracted, but it should not have. Is backed by b => b being true.",b,list.iterator().next());
  h1=session.getFactHandle(b);
  session.retract(h1);
  session.fireAllRules();
  list=session.getObjects(new ClassObjectFilter(a.getClass()));
  assertEquals(0,list.size());
}
