{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_LogicalAssertionsSelfreferencing.drl")));
  final Package pkg=builder.getPackage();
  final RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  List list;
  final Person b=new Person("b");
  final Person a=new Person("a");
  workingMemory.setGlobal("b",b);
  FactHandle h1=workingMemory.assertObject(a);
  workingMemory.fireAllRules();
  list=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(a.getClass())));
  assertEquals(2,list.size());
  assertTrue(list.contains(a));
  assertTrue(list.contains(b));
  workingMemory.retractObject(h1);
  workingMemory.fireAllRules();
  list=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(a.getClass())));
  assertEquals("b was retracted, but it should not have. Is backed by b => b being true.",1,list.size());
  assertEquals("b was retracted, but it should not have. Is backed by b => b being true.",b,list.get(0));
  h1=workingMemory.getFactHandle(b);
  workingMemory.retractObject(h1);
  workingMemory.fireAllRules();
  list=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(a.getClass())));
  assertEquals(0,list.size());
}
