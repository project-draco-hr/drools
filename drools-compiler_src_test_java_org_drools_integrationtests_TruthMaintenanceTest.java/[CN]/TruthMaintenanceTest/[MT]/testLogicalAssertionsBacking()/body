{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_LogicalAssertionsBacking.drl")));
  final Package pkg=builder.getPackage();
  final RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  final Cheese cheese1=new Cheese("c",1);
  final Cheese cheese2=new Cheese(cheese1.getType(),1);
  List list;
  final FactHandle h1=workingMemory.assertObject(cheese1);
  workingMemory.fireAllRules();
  list=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(cheese1.getType().getClass())));
  assertEquals(1,list.size());
  assertEquals(cheese1.getType(),list.get(0));
  final FactHandle h2=workingMemory.assertObject(cheese2);
  workingMemory.fireAllRules();
  list=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(cheese1.getType().getClass())));
  assertEquals(1,list.size());
  assertEquals(cheese1.getType(),list.get(0));
  assertEquals(3,IteratorToList.convert(workingMemory.iterateObjects()).size());
  workingMemory.retractObject(h1);
  workingMemory.fireAllRules();
  list=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(cheese1.getType().getClass())));
  assertEquals("cheese-type " + cheese1.getType() + " was retracted, but should not. Backed by cheese2 => type.",1,list.size());
  assertEquals("cheese-type " + cheese1.getType() + " was retracted, but should not. Backed by cheese2 => type.",cheese1.getType(),list.get(0));
  workingMemory.retractObject(h2);
  workingMemory.fireAllRules();
  list=IteratorToList.convert(workingMemory.iterateObjects(new ClassObjectFilter(cheese1.getType().getClass())));
  assertEquals("cheese-type " + cheese1.getType() + " was not retracted, but should have. Neither  cheese1 => type nor cheese2 => type is true.",0,list.size());
}
