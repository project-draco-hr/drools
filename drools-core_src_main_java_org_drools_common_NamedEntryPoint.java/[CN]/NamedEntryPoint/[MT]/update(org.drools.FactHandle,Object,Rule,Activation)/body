{
  try {
    this.ruleBase.readLock();
    this.lock.lock();
    this.wm.startOperation();
    this.ruleBase.executeQueuedActions();
    if (((InternalFactHandle)factHandle).isDisconnected()) {
      factHandle=this.objectStore.reconnect(factHandle);
    }
    final ObjectTypeConf typeConf=this.typeConfReg.getObjectTypeConf(this.entryPoint,object);
    int status=-1;
    if (typeConf.isTMSEnabled()) {
      status=((InternalFactHandle)factHandle).getEqualityKey().getStatus();
    }
    final InternalFactHandle handle=(InternalFactHandle)factHandle;
    final Object originalObject=handle.getObject();
    if (handle.getId() == -1 || object == null || (handle.isEvent() && ((EventFactHandle)handle).isExpired())) {
      return;
    }
    if (activation != null) {
      activation.getPropagationContext().releaseResources();
    }
    if (originalObject != object || !AssertBehaviour.IDENTITY.equals(this.ruleBase.getConfiguration().getAssertBehaviour())) {
      this.objectStore.removeHandle(handle);
      handle.setObject(object);
      this.objectStore.addHandle(handle,object);
    }
    if (typeConf.isTMSEnabled()) {
      EqualityKey key=handle.getEqualityKey();
      key.removeFactHandle(handle);
      if (key.isEmpty()) {
        this.wm.tms.remove(key);
      }
      key=this.wm.tms.get(object);
      if (key == null) {
        key=new EqualityKey(handle,status);
        this.wm.tms.put(key);
      }
 else {
        key.addFactHandle(handle);
      }
      handle.setEqualityKey(key);
    }
    this.handleFactory.increaseFactHandleRecency(handle);
    final PropagationContext propagationContext=new PropagationContextImpl(this.wm.getNextPropagationIdCounter(),PropagationContext.MODIFICATION,rule,(activation == null) ? null : (LeftTuple)activation.getTuple(),handle,this.wm.agenda.getActiveActivations(),this.wm.agenda.getDormantActivations(),entryPoint);
    this.entryPointNode.modifyObject(handle,propagationContext,typeConf,this.wm);
    this.wm.workingMemoryEventSupport.fireObjectUpdated(propagationContext,(org.drools.FactHandle)factHandle,originalObject,object,this.wm);
    this.wm.executeQueuedActions();
  }
  finally {
    this.wm.endOperation();
    this.lock.unlock();
    this.ruleBase.readUnlock();
  }
}
