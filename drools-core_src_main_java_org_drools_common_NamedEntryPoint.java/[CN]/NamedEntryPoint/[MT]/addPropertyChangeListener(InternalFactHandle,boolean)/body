{
  Object object=handle.getObject();
  try {
    final Method method=object.getClass().getMethod("addPropertyChangeListener",NamedEntryPoint.ADD_REMOVE_PROPERTY_CHANGE_LISTENER_ARG_TYPES);
    method.invoke(object,this.addRemovePropertyChangeListenerArgs);
    if (dynamicFlag) {
      if (dynamicFacts == null) {
        dynamicFacts=new HashSet<InternalFactHandle>();
      }
      dynamicFacts.add(handle);
    }
  }
 catch (  final NoSuchMethodException e) {
    logger.error("Warning: Method addPropertyChangeListener not found" + " on the class " + object.getClass() + " so Drools will be unable to process JavaBean"+ " PropertyChangeEvents on the asserted Object");
  }
catch (  final IllegalArgumentException e) {
    logger.error("Warning: The addPropertyChangeListener method" + " on the class " + object.getClass() + " does not take"+ " a simple PropertyChangeListener argument"+ " so Drools will be unable to process JavaBean"+ " PropertyChangeEvents on the asserted Object");
  }
catch (  final IllegalAccessException e) {
    logger.error("Warning: The addPropertyChangeListener method" + " on the class " + object.getClass() + " is not public"+ " so Drools will be unable to process JavaBean"+ " PropertyChangeEvents on the asserted Object");
  }
catch (  final InvocationTargetException e) {
    logger.error("Warning: The addPropertyChangeListener method" + " on the class " + object.getClass() + " threw an InvocationTargetException"+ " so Drools will be unable to process JavaBean"+ " PropertyChangeEvents on the asserted Object: "+ e.getMessage());
  }
catch (  final SecurityException e) {
    logger.error("Warning: The SecurityManager controlling the class " + object.getClass() + " did not allow the lookup of a"+ " addPropertyChangeListener method"+ " so Drools will be unable to process JavaBean"+ " PropertyChangeEvents on the asserted Object: "+ e.getMessage());
  }
}
