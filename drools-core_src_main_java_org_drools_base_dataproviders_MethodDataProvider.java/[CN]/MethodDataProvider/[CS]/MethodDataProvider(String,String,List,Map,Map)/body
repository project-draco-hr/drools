{
  List requiredDecs=new ArrayList();
  this.variableName=variableName;
  if (declarations.containsKey(variableName)) {
    variableDeclaration=(Declaration)declarations.get(variableName);
    requiredDecs.add(variableDeclaration);
    variableIsDeclaration=true;
    this.variableClass=variableDeclaration.getExtractor().getExtractToClass();
  }
 else   if (globals.containsKey(variableName)) {
    variableIsDeclaration=false;
    this.variableClass=(Class)globals.get(variableName);
    variableDeclaration=null;
  }
 else {
    variableDeclaration=null;
    throw new IllegalArgumentException("The variable name [" + variableName + "] was not a global or declaration.");
  }
  List argumentData=new ArrayList();
  for (Iterator iter=arguments.iterator(); iter.hasNext(); ) {
    ArgumentValueDescr desc=(ArgumentValueDescr)iter.next();
    if (desc.getType() == ArgumentValueDescr.VARIABLE) {
      if (declarations.containsKey(desc.getValue())) {
        Declaration dec=(Declaration)declarations.get(desc.getValue());
        requiredDecs.add(dec);
        argumentData.add(new DeclaredVariable(dec));
      }
 else       if (globals.containsKey(desc.getValue())) {
        argumentData.add(new GlobalVariable(desc.getValue()));
      }
 else {
        throw new IllegalArgumentException("Uknown variable: " + desc.getValue());
      }
    }
 else {
      argumentData.add(new LiteralValue(desc.getValue()));
    }
  }
  this.method=configureMethod(methodName,variableClass,arguments.size());
  valueHandlers=(ValueHandler[])argumentData.toArray(new ValueHandler[argumentData.size()]);
  requiredDeclarations=new Declaration[requiredDecs.size()];
  requiredDecs.toArray(requiredDeclarations);
}
