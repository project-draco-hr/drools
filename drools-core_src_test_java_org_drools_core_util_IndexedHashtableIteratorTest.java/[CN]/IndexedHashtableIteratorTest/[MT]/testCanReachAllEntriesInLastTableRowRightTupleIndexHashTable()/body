{
  int numEntries=3;
  TupleList[] table=new TupleList[3];
  TupleList rtList=new TupleList();
  table[0]=rtList;
  for (int i=0; i < numEntries; i++) {
    RightTuple rightTuple=new RightTupleImpl();
    rightTuple.setMemory(rtList);
    rtList.add(rightTuple);
  }
  rtList=new TupleList();
  table[2]=rtList;
  for (int i=0; i < numEntries; i++) {
    RightTuple rightTuple=new RightTupleImpl();
    rightTuple.setMemory(rtList);
    rtList.add(rightTuple);
  }
  rtList=new TupleList();
  table[2].setNext(rtList);
  for (int i=0; i < numEntries; i++) {
    RightTuple rightTuple=new RightTupleImpl();
    rightTuple.setMemory(rtList);
    rtList.add(rightTuple);
  }
  LeftTupleIndexHashTable.FullFastIterator iter=new LeftTupleIndexHashTable.FullFastIterator(table);
  List<RightTuple> list=new ArrayList<RightTuple>();
  for (RightTuple rightTuple=(RightTuple)iter.next(null); rightTuple != null; rightTuple=(RightTuple)iter.next(rightTuple)) {
    assertFalse(contains(list,rightTuple));
    list.add(rightTuple);
  }
  LeftTupleIndexHashTable rthTable=new LeftTupleIndexHashTable();
  rthTable.init(table,3,numEntries * 3);
  LeftTupleIndexHashTable.FieldIndexHashTableFullIterator iter2=new LeftTupleIndexHashTable.FieldIndexHashTableFullIterator(rthTable);
  list=new ArrayList<RightTuple>();
  for (RightTuple rightTuple=(RightTuple)iter2.next(); rightTuple != null; rightTuple=(RightTuple)iter2.next()) {
    assertFalse(contains(list,rightTuple));
    list.add(rightTuple);
  }
  assertEquals(numEntries * 3,list.size());
}
