{
  BetaMemory bm=NodeTypeEnums.AccumulateNode == betaNode.getType() ? ((AccumulateMemory)smem.createNodeMemory((AccumulateNode)betaNode,wm)).getBetaMemory() : (BetaMemory)smem.createNodeMemory(betaNode,wm);
  bm.setSegmentMemory(smem);
  if (betaNode.isRightInputIsRiaNode()) {
    RightInputAdapterNode riaNode=(RightInputAdapterNode)betaNode.getRightInput();
    LeftTupleSource subnetworkLts=riaNode.getLeftTupleSource();
    while (subnetworkLts.getLeftTupleSource() != riaNode.getStartTupleSource()) {
      subnetworkLts=subnetworkLts.getLeftTupleSource();
    }
    Memory rootSubNetwokrMem=wm.getNodeMemory((MemoryFactory)subnetworkLts);
    SegmentMemory subNetworkSegmentMemory=rootSubNetwokrMem.getSegmentMemory();
    if (subNetworkSegmentMemory == null) {
      createSegmentMemory(subnetworkLts,wm);
    }
    RiaNodeMemory riaMem=(RiaNodeMemory)wm.getNodeMemory(riaNode);
    bm.setRiaRuleMemory(riaMem.getRiaPathMemory());
    if (updateNodeBit && canBeDisabled(betaNode) && riaMem.getRiaPathMemory().getAllLinkedMaskTest() > 0) {
      allLinkedTestMask=allLinkedTestMask | nodePosMask;
    }
  }
 else   if (updateNodeBit && canBeDisabled(betaNode)) {
    allLinkedTestMask=allLinkedTestMask | nodePosMask;
  }
  bm.setNodePosMaskBit(nodePosMask);
  if (NodeTypeEnums.NotNode == betaNode.getType()) {
    smem.linkNodeWithoutRuleNotify(bm.getNodePosMaskBit());
  }
  return allLinkedTestMask;
}
