{
  SegmentMemory smem=wm.getNodeMemory((MemoryFactory)tupleSource).getSegmentMemory();
  if (smem != null) {
    return smem;
  }
  while (tupleSource.getType() != NodeTypeEnums.LeftInputAdapterNode && SegmentUtilities.parentInSameSegment(tupleSource,null)) {
    tupleSource=tupleSource.getLeftTupleSource();
  }
  LeftTupleSource segmentRoot=tupleSource;
  int nodeTypesInSegment=0;
  smem=restoreSegmentFromPrototype(wm,segmentRoot,nodeTypesInSegment);
  if (smem != null) {
    return smem;
  }
  smem=new SegmentMemory(segmentRoot);
  long nodePosMask=1;
  long allLinkedTestMask=0;
  boolean updateNodeBit=true;
  while (true) {
    nodeTypesInSegment=updateNodeTypesMask(tupleSource,nodeTypesInSegment);
    if (tupleSource.isStreamMode() && smem.getStreamQueue() == null) {
      StreamTupleEntryQueue queue=initAndGetTupleQueue(tupleSource,wm);
      smem.setStreamQueue(queue);
    }
    if (NodeTypeEnums.isBetaNode(tupleSource)) {
      allLinkedTestMask=processBetaNode(tupleSource,wm,smem,nodePosMask,allLinkedTestMask,updateNodeBit);
    }
 else {
switch (tupleSource.getType()) {
case NodeTypeEnums.LeftInputAdapterNode:
        allLinkedTestMask=processLiaNode((LeftInputAdapterNode)tupleSource,wm,smem,nodePosMask,allLinkedTestMask);
      break;
case NodeTypeEnums.EvalConditionNode:
    processEvalNode((EvalConditionNode)tupleSource,wm,smem);
  break;
case NodeTypeEnums.ConditionalBranchNode:
updateNodeBit=processBranchNode((ConditionalBranchNode)tupleSource,wm,smem);
break;
case NodeTypeEnums.FromNode:
processFromNode((FromNode)tupleSource,wm,smem);
break;
case NodeTypeEnums.TimerConditionNode:
processTimerNode((TimerNode)tupleSource,wm,smem,nodePosMask);
break;
case NodeTypeEnums.QueryElementNode:
updateNodeBit=processQueryNode((QueryElementNode)tupleSource,wm,segmentRoot,smem,nodePosMask);
break;
}
}
nodePosMask=nodePosMask << 1;
if (tupleSource.getSinkPropagator().size() == 1) {
LeftTupleSinkNode sink=(LeftTupleSinkNode)tupleSource.getSinkPropagator().getFirstLeftTupleSink();
if (NodeTypeEnums.isLeftTupleSource(sink)) {
tupleSource=(LeftTupleSource)sink;
}
 else {
Memory memory=wm.getNodeMemory((MemoryFactory)sink);
if (sink.getType() == NodeTypeEnums.RightInputAdaterNode) {
PathMemory riaPmem=((RiaNodeMemory)memory).getRiaPathMemory();
smem.getNodeMemories().add(riaPmem);
RightInputAdapterNode rian=(RightInputAdapterNode)sink;
ObjectSink[] nodes=rian.getSinkPropagator().getSinks();
for (ObjectSink node : nodes) {
if (NodeTypeEnums.isLeftTupleSource(node)) {
SegmentMemory parentSmem=createSegmentMemory((LeftTupleSource)node,wm);
}
}
}
 else if (NodeTypeEnums.isTerminalNode(sink)) {
smem.getNodeMemories().add((PathMemory)memory);
}
memory.setSegmentMemory(smem);
smem.setTipNode(sink);
break;
}
}
 else {
smem.setTipNode(tupleSource);
break;
}
}
smem.setAllLinkedMaskTest(allLinkedTestMask);
LeftTupleSource pathRoot=segmentRoot;
int ruleSegmentPosMask=1;
int counter=0;
while (pathRoot.getType() != NodeTypeEnums.LeftInputAdapterNode) {
if (!SegmentUtilities.parentInSameSegment(pathRoot,null)) {
ruleSegmentPosMask=ruleSegmentPosMask << 1;
counter++;
}
pathRoot=pathRoot.getLeftTupleSource();
}
smem.setSegmentPosMaskBit(ruleSegmentPosMask);
smem.setPos(counter);
if (smem.getRootNode().getType() != NodeTypeEnums.LeftInputAdapterNode && ((LeftTupleSource)smem.getRootNode()).getLeftTupleSource().getType() == NodeTypeEnums.LeftInputAdapterNode) {
smem.setStagedTuples(new SynchronizedLeftTupleSets());
}
nodeTypesInSegment=updateRiaAndTerminalMemory(tupleSource,tupleSource,smem,wm,false,nodeTypesInSegment);
((KnowledgeBaseImpl)wm.getKnowledgeBase()).registerSegmentPrototype(segmentRoot,smem);
return smem;
}
