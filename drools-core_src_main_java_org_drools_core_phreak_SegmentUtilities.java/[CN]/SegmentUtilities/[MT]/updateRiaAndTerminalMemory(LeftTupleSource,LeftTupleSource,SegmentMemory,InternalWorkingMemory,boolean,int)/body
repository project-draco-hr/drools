{
  nodeTypesInSegment=checkSegmentBoundary(lt,wm,nodeTypesInSegment);
  for (  LeftTupleSink sink : lt.getSinkPropagator().getSinks()) {
    if (NodeTypeEnums.isLeftTupleSource(sink)) {
      nodeTypesInSegment=updateRiaAndTerminalMemory((LeftTupleSource)sink,originalLt,smem,wm,fromPrototype,nodeTypesInSegment);
    }
 else     if (sink.getType() == NodeTypeEnums.RightInputAdaterNode) {
      if (inSubNetwork((RightInputAdapterNode)sink,originalLt)) {
        RiaNodeMemory riaMem=(RiaNodeMemory)wm.getNodeMemory((MemoryFactory)sink);
        PathMemory pmem=(PathMemory)riaMem.getRiaPathMemory();
        smem.getPathMemories().add(pmem);
        pmem.getSegmentMemories()[smem.getPos()]=smem;
        if (fromPrototype) {
          ObjectSink[] nodes=((RightInputAdapterNode)sink).getSinkPropagator().getSinks();
          for (          ObjectSink node : nodes) {
            if (NodeTypeEnums.isLeftTupleSource(node) && wm.getNodeMemory((MemoryFactory)node).getSegmentMemory() == null) {
              restoreSegmentFromPrototype(wm,(LeftTupleSource)node,nodeTypesInSegment);
            }
          }
        }
 else         if ((pmem.getAllLinkedMaskTest() & (1L << pmem.getSegmentMemories().length)) == 0) {
          ObjectSink[] nodes=((RightInputAdapterNode)sink).getSinkPropagator().getSinks();
          for (          ObjectSink node : nodes) {
            if (NodeTypeEnums.isLeftTupleSource(node)) {
              createSegmentMemory((LeftTupleSource)node,wm);
            }
          }
        }
      }
    }
 else     if (NodeTypeEnums.isTerminalNode(sink)) {
      PathMemory pmem=(PathMemory)wm.getNodeMemory((MemoryFactory)sink);
      smem.getPathMemories().add(pmem);
      pmem.getSegmentMemories()[smem.getPos()]=smem;
      smem.setStreamQueue(pmem.getStreamQueue());
      if (smem.isSegmentLinked()) {
        smem.notifyRuleLinkSegment(wm);
      }
      checkEagerSegmentCreation(((TerminalNode)sink).getLeftTupleSource(),wm,nodeTypesInSegment);
    }
  }
  return nodeTypesInSegment;
}
