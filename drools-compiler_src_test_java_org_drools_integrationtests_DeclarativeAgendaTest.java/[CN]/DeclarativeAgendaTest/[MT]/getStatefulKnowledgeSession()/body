{
  String str="";
  str+="package org.domain.test \n";
  str+="import " + Activation.class.getName() + "\n";
  str+="global java.util.List list \n";
  str+="dialect 'mvel' \n";
  str+="rule rule1 @department(sales) \n";
  str+="when \n";
  str+="     $s : String( this == 'go1' ) \n";
  str+="then \n";
  str+="    list.add( kcontext.rule.name + ':' + $s ); \n";
  str+="end \n";
  str+="rule blockerAllSalesRules @activationListener('direct') \n";
  str+="when \n";
  str+="     $s : String( this == 'go2' ) \n";
  str+="     $i : Activation( department == 'sales' ) \n";
  str+="then \n";
  str+="    list.add( $i.rule.name + ':' + $s  ); \n";
  str+="    kcontext.blockActivation( $i ); \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(DeclarativeAgendaOption.ENABLED);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  return ksession;
}
