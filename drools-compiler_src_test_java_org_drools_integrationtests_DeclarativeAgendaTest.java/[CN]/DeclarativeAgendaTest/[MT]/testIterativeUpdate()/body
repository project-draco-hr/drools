{
  String str="";
  str+="package org.domain.test \n";
  str+="import " + Activation.class.getName() + "\n";
  str+="global java.util.List list \n";
  str+="dialect 'mvel' \n";
  str+="rule rule0 \n";
  str+="when \n";
  str+="     $s : String( this == 'rule0' ) \n";
  str+="then \n";
  str+="    list.add( kcontext.rule.name ); \n";
  str+="end \n";
  str+="rule rule1 \n";
  str+="when \n";
  str+="     $s : String( this == 'rule1' ) \n";
  str+="then \n";
  str+="    list.add( kcontext.rule.name ); \n";
  str+="end \n";
  str+="rule rule2 \n";
  str+="when \n";
  str+="     $s : String( this == 'rule2' ) \n";
  str+="then \n";
  str+="    list.add( kcontext.rule.name ); \n";
  str+="end \n";
  str+="rule blockerAllSalesRules1 @activationListener('direct') \n";
  str+="when \n";
  str+="     $l : List( ) \n";
  str+="     $i : Activation( rule.name == $l[0] ) \n";
  str+="then \n";
  str+="    list.add( 'block:' + $i.rule.name  ); \n";
  str+="    kcontext.block( $i ); \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(DeclarativeAgendaOption.ENABLED);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  FactHandle rule0=ksession.insert("rule0");
  FactHandle rule1=ksession.insert("rule1");
  FactHandle rule2=ksession.insert("rule2");
  ksession.fireAllRules();
  assertEquals(3,list.size());
  assertTrue(list.contains("rule0"));
  assertTrue(list.contains("rule1"));
  assertTrue(list.contains("rule2"));
  list.clear();
  ArrayList l=new ArrayList();
  ksession.update(rule0,"rule0");
  ksession.update(rule1,"rule1");
  ksession.update(rule2,"rule2");
  l.add("rule0");
  FactHandle lh=ksession.insert(l);
  ksession.fireAllRules();
  assertEquals(3,list.size());
  assertTrue(list.contains("block:rule0"));
  assertTrue(list.contains("rule1"));
  assertTrue(list.contains("rule2"));
  list.clear();
  ksession.update(rule0,"rule0");
  ksession.update(rule1,"rule1");
  ksession.update(rule2,"rule2");
  assertEquals(1,list.size());
  assertTrue(list.contains("block:rule0"));
  list.clear();
  l.set(0,"rule1");
  ksession.update(lh,l);
  ksession.fireAllRules();
  assertEquals(3,list.size());
  assertTrue(list.contains("rule0"));
  assertTrue(list.contains("block:rule1"));
  assertTrue(list.contains("rule2"));
  list.clear();
  ksession.update(rule0,"rule0");
  ksession.update(rule1,"rule1");
  ksession.update(rule2,"rule2");
  assertEquals(1,list.size());
  assertTrue(list.contains("block:rule1"));
  list.clear();
  l.set(0,"rule2");
  ksession.update(lh,l);
  ksession.fireAllRules();
  assertEquals(3,list.size());
  assertTrue(list.contains("rule0"));
  assertTrue(list.contains("rule1"));
  assertTrue(list.contains("block:rule2"));
}
