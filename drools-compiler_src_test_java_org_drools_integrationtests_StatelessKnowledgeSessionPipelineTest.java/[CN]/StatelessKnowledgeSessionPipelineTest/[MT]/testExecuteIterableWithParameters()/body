{
  String str="";
  str+="package org.sample \n";
  str+="global java.util.List list; \n";
  str+="rule rule1 \n";
  str+="  when \n";
  str+="    s : String() \n";
  str+="  then \n";
  str+="    list.add( s ); ";
  str+="end\n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    System.out.println(kbuilder.getErrors());
  }
  assertFalse(kbuilder.hasErrors());
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatelessKnowledgeSession ksession=kbase.newStatelessKnowledgeSession();
  Action executeResultHandler=PipelineFactory.newExecuteResultHandler();
  KnowledgeRuntimeCommand execute=PipelineFactory.newStatelessKnowledgeSessionExecute();
  execute.setReceiver(executeResultHandler);
  Action assignParameters=PipelineFactory.newMvelAction("context.parameters.globalParams.setInOut( ['list' : new java.util.ArrayList()] )");
  assignParameters.setReceiver(execute);
  Action assignIterable=PipelineFactory.newMvelAction("context.setIterable( this )");
  assignIterable.setReceiver(assignParameters);
  Pipeline pipeline=PipelineFactory.newStatelessKnowledgeSessionPipeline(ksession);
  pipeline.setReceiver(assignIterable);
  ResultHandlerImpl handler=new ResultHandlerImpl();
  List items=new ArrayList();
  items.add("hello world");
  items.add("goodbye world");
  pipeline.insert(items,handler);
  List list=(List)handler.getStatelessKnowledgeSessionResults().getValue("list");
  assertEquals(2,list.size());
  Collections.sort(list);
  assertEquals("goodbye world",list.get(0));
  assertEquals("hello world",list.get(1));
}
