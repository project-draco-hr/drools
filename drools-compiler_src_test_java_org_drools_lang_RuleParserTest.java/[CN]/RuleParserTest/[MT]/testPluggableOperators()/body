{
  parseResource("compilation_unit","compilation_unit","pluggable_operators.drl");
  final PackageDescr pack=walker.getPackageDescr();
  assertEquals(1,pack.getRules().size());
  final RuleDescr rule=(RuleDescr)pack.getRules().get(0);
  assertEquals(5,rule.getLhs().getDescrs().size());
  final PatternDescr eventA=(PatternDescr)rule.getLhs().getDescrs().get(0);
  assertEquals("$a",eventA.getIdentifier());
  assertEquals("EventA",eventA.getObjectType());
  final PatternDescr eventB=(PatternDescr)rule.getLhs().getDescrs().get(1);
  assertEquals("$b",eventB.getIdentifier());
  assertEquals("EventB",eventB.getObjectType());
  assertEquals(1,eventB.getConstraint().getDescrs().size());
  final FieldConstraintDescr fcdB=(FieldConstraintDescr)eventB.getConstraint().getDescrs().get(0);
  assertEquals(1,fcdB.getRestrictions().size());
  assertTrue(fcdB.getRestrictions().get(0) instanceof VariableRestrictionDescr);
  final VariableRestrictionDescr rb=(VariableRestrictionDescr)fcdB.getRestrictions().get(0);
  assertEquals("after",rb.getEvaluator());
  assertEquals("$a",rb.getText());
  assertEquals("1,10",rb.getParameterText());
  assertFalse(rb.isNegated());
  final PatternDescr eventC=(PatternDescr)rule.getLhs().getDescrs().get(2);
  assertEquals("$c",eventC.getIdentifier());
  assertEquals("EventC",eventC.getObjectType());
  assertEquals(1,eventC.getConstraint().getDescrs().size());
  final FieldConstraintDescr fcdC=(FieldConstraintDescr)eventC.getConstraint().getDescrs().get(0);
  assertEquals(1,fcdC.getRestrictions().size());
  assertTrue(fcdC.getRestrictions().get(0) instanceof VariableRestrictionDescr);
  final VariableRestrictionDescr rc=(VariableRestrictionDescr)fcdC.getRestrictions().get(0);
  assertEquals("finishes",rc.getEvaluator());
  assertEquals("$b",rc.getText());
  assertNull(rc.getParameterText());
  assertFalse(rc.isNegated());
  final PatternDescr eventD=(PatternDescr)rule.getLhs().getDescrs().get(3);
  assertEquals("$d",eventD.getIdentifier());
  assertEquals("EventD",eventD.getObjectType());
  assertEquals(1,eventD.getConstraint().getDescrs().size());
  final FieldConstraintDescr fcdD=(FieldConstraintDescr)eventD.getConstraint().getDescrs().get(0);
  assertEquals(1,fcdD.getRestrictions().size());
  assertTrue(fcdD.getRestrictions().get(0) instanceof VariableRestrictionDescr);
  final VariableRestrictionDescr rd=(VariableRestrictionDescr)fcdD.getRestrictions().get(0);
  assertEquals("starts",rd.getEvaluator());
  assertEquals("$a",rd.getText());
  assertNull(rd.getParameterText());
  assertTrue(rd.isNegated());
  final PatternDescr eventE=(PatternDescr)rule.getLhs().getDescrs().get(4);
  assertEquals("$e",eventE.getIdentifier());
  assertEquals("EventE",eventE.getObjectType());
  assertEquals(1,eventE.getConstraint().getDescrs().size());
  final FieldConstraintDescr fcdE=(FieldConstraintDescr)eventE.getConstraint().getDescrs().get(0);
  assertEquals(1,fcdE.getRestrictions().size());
  assertTrue(fcdE.getRestrictions().get(0) instanceof VariableRestrictionDescr);
  final VariableRestrictionDescr re=(VariableRestrictionDescr)fcdE.getRestrictions().get(0);
  assertEquals("before",re.getEvaluator());
  assertEquals("$b",re.getText());
  assertEquals("1, 10",re.getParameterText());
  assertTrue(re.isNegated());
}
