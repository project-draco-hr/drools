{
  final PackageBuilderConfiguration packageBuilderConfig=new PackageBuilderConfiguration();
  ((JavaDialectConfiguration)packageBuilderConfig.getDialectConfiguration("java")).setCompiler(compiler);
  final List<PackageBuilderErrors> errors=new ArrayList<PackageBuilderErrors>();
  final List<Exception> exceptions=new ArrayList<Exception>();
  Thread[] threads=new Thread[_NUMBER_OF_THREADS];
  for (int i=0; i < _NUMBER_OF_THREADS; i++) {
    final int ID=i;
    Thread testThread=new Thread(){
      public void run(){
        try {
          this.setName("Thread[" + ID + "]");
          PackageBuilder builder=null;
          try {
            builder=new PackageBuilder(packageBuilderConfig);
          }
 catch (          Throwable t) {
            t.printStackTrace();
            throw new RuntimeException(t);
          }
          PackageDescr packageDescr=new PackageDescr("MyRulebase");
          addImports(packageDescr);
          addFunctions(packageDescr);
          sleep(_SLEEP_TIME_MS);
          builder.addPackage(packageDescr);
          sleep(_SLEEP_TIME_MS);
          builder.getPackage();
          sleep(_SLEEP_TIME_MS);
          if (builder.hasErrors()) {
            System.out.println("ERROR in thread: " + ID);
            System.out.println(builder.getErrors().toString());
            errors.add(builder.getErrors());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          exceptions.add(e);
        }
      }
    }
;
    threads[i]=testThread;
    try {
      testThread.start();
    }
 catch (    Exception e) {
      assertTrue(false);
    }
  }
  for (int i=0; i < _NUMBER_OF_THREADS; i++) {
    try {
      threads[i].join();
    }
 catch (    InterruptedException e) {
      threads[i].interrupt();
    }
  }
  StringBuilder exceptionBuf=new StringBuilder();
  if (!exceptions.isEmpty()) {
    System.err.println("------->EXCEPTION(s) DURING THREAD TEST : <-------------------");
    for (Iterator<Exception> iterator=exceptions.iterator(); iterator.hasNext(); ) {
      Exception name=iterator.next();
      exceptionBuf.append(name + name.getMessage() + "\n");
    }
  }
  StringBuilder errorBuf=new StringBuilder();
  if (!errors.isEmpty()) {
    System.err.println("------->ERROR(s) DURING THREAD TEST : <-------------------");
    for (Iterator<PackageBuilderErrors> iterator=errors.iterator(); iterator.hasNext(); ) {
      PackageBuilderErrors e=iterator.next();
      for (int i=0; i < e.getErrors().length; i++) {
        DroolsError de=e.getErrors()[i];
        errorBuf.append(de.getMessage() + "\n");
      }
    }
  }
  assertTrue("Exceptions during package compilation : \n" + exceptionBuf.toString(),exceptions.isEmpty());
  assertTrue("PackageBuilderErrors during package compilation : \n" + errorBuf.toString(),errors.isEmpty());
}
