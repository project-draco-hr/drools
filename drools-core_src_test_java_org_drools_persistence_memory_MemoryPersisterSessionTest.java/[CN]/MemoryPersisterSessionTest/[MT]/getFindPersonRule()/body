{
  ClassObjectType stringType=new ClassObjectType(String.class);
  ClassObjectType personType=new ClassObjectType(Person.class);
  final Rule rule=new Rule("find person");
  final Pattern stringPattern=new Pattern(0,stringType,"$s");
  rule.addPattern(stringPattern);
  final Declaration sDeclaration=rule.getDeclaration("$s");
  final Pattern personPattern=new Pattern(1,personType,"$p");
  EqualityEvaluatorsDefinition evals=new EqualityEvaluatorsDefinition();
  Evaluator eval=evals.getEvaluator(ValueType.OBJECT_TYPE,Operator.EQUAL,null);
  personPattern.addConstraint(getBoundVariableConstraint(personPattern,"name",sDeclaration,eval));
  rule.addPattern(personPattern);
  final Declaration pDeclaration=rule.getDeclaration("$p");
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Person p=(Person)drools.get(pDeclaration);
        List list=(List)workingMemory.getGlobal("list");
        list.add(p);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
