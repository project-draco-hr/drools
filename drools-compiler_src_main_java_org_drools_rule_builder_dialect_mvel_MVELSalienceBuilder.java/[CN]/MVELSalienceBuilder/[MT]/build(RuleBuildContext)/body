{
  context.getBuildStack().push(context.getRule().getLhs());
  try {
    MVELDialect dialect=(MVELDialect)context.getDialect("mvel");
    Map<String,Declaration> decls=context.getDeclarationResolver().getDeclarations(context.getRule());
    AnalysisResult analysis=dialect.analyzeExpression(context,context.getRuleDescr(),(String)context.getRuleDescr().getSalience(),new BoundIdentifiers(context.getDeclarationResolver().getDeclarationClasses(decls),context.getPackageBuilder().getGlobals()));
    Declaration[] previousDeclarations=(Declaration[])decls.values().toArray(new Declaration[decls.size()]);
    MVELCompilationUnit unit=dialect.getMVELCompilationUnit((String)context.getRuleDescr().getSalience(),analysis,previousDeclarations,null,null,context);
    MVELSalienceExpression expr=new MVELSalienceExpression(unit,dialect.getId());
    context.getRule().setSalience(expr);
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData(dialect.getId());
    data.addCompileable(context.getRule(),expr);
    expr.compile(context.getPackageBuilder().getRootClassLoader());
  }
 catch (  final Exception e) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),context.getRuleDescr(),null,"Unable to build expression for 'salience' : " + e.getMessage() + "'"+ context.getRuleDescr().getSalience()+ "'"));
  }
}
