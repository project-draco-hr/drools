{
  String fieldName=field.getName();
  String type=field.getTypeName();
  MethodVisitor mv=cw.visitMethod(protect ? ACC_PROTECTED : ACC_PUBLIC,getterName,"()" + Type.getDescriptor(field.getType()),null,null);
  mv.visitCode();
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,BuildUtils.getInternalType(proxy),"store",Type.getDescriptor(TripleStore.class));
  mv.visitVarInsn(ALOAD,0);
  mv.visitLdcInsn(fieldName);
  mv.visitMethodInsn(INVOKEVIRTUAL,BuildUtils.getInternalType(proxy),"propertyKey","(" + Type.getDescriptor(String.class) + ")"+ Type.getDescriptor(Triple.class));
  mv.visitMethodInsn(INVOKEVIRTUAL,Type.getInternalName(TripleStore.class),"get","(" + Type.getDescriptor(Triple.class) + ")"+ Type.getDescriptor(Triple.class));
  mv.visitVarInsn(ASTORE,1);
  mv.visitVarInsn(ALOAD,1);
  Label l0=new Label();
  mv.visitJumpInsn(IFNULL,l0);
  mv.visitVarInsn(ALOAD,1);
  mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Triple.class),"getValue","()" + Type.getDescriptor(Object.class));
  Label l1=new Label();
  mv.visitJumpInsn(IFNONNULL,l1);
  mv.visitLabel(l0);
  mv.visitInsn(BuildUtils.zero(type));
  mv.visitInsn(BuildUtils.returnType(type));
  mv.visitLabel(l1);
  mv.visitVarInsn(ALOAD,1);
  mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Triple.class),"getValue","()" + Type.getDescriptor(Object.class));
  if (BuildUtils.isPrimitive(type)) {
    TraitFactory.promote(mv,type);
  }
 else {
    mv.visitTypeInsn(CHECKCAST,BuildUtils.getInternalType(type));
  }
  mv.visitInsn(BuildUtils.returnType(type));
  mv.visitMaxs(3,2);
  mv.visitEnd();
}
