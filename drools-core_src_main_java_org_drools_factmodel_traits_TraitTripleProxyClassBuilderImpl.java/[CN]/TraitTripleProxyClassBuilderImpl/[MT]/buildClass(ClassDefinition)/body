{
  ClassWriter cw=new ClassWriter(0);
  FieldVisitor fv;
  MethodVisitor mv;
  long mask=TraitRegistry.getInstance().getFieldMask(getTrait().getName(),core.getDefinedClass().getName());
  String name=TraitFactory.getPropertyWrapperName(getTrait(),core);
  String masterName=TraitFactory.getProxyName(getTrait(),core);
  String internalWrapper=BuildUtils.getInternalType(name);
  String internalProxy=BuildUtils.getInternalType(masterName);
  String descrWrapper=BuildUtils.getTypeDescriptor(name);
  String descrProxy=BuildUtils.getTypeDescriptor(masterName);
  String internalCore=BuildUtils.getInternalType(core.getClassName());
  String descrCore=BuildUtils.getTypeDescriptor(core.getClassName());
  String internalTrait=BuildUtils.getInternalType(getTrait().getClassName());
  String descrTrait=BuildUtils.getTypeDescriptor(getTrait().getClassName());
  Class mixinClass=null;
  String mixin=null;
  Set<Method> mixinMethods=new HashSet<Method>();
  Map<String,Method> mixinGetSet=new HashMap<String,Method>();
  try {
    if (getTrait().getDefinedClass() != null) {
      Trait annTrait=getAnnotation(getTrait().getDefinedClass(),Trait.class);
      if (hasImpl(annTrait)) {
        mixinClass=annTrait.impl();
        mixin=mixinClass.getSimpleName().substring(0,1).toLowerCase() + mixinClass.getSimpleName().substring(1);
        ClassFieldInspector cfi=new ClassFieldInspector(mixinClass);
        for (        Method m : mixinClass.getMethods()) {
          try {
            getTrait().getDefinedClass().getMethod(m.getName(),m.getParameterTypes());
            if (cfi.getGetterMethods().containsValue(m) || cfi.getSetterMethods().containsValue(m)) {
              mixinGetSet.put(m.getName(),m);
            }
 else {
              mixinMethods.add(m);
            }
          }
 catch (          NoSuchMethodException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,internalProxy,null,BuildUtils.getInternalType(TraitFactory.proxyBaseClass.getName()),new String[]{internalTrait,"java/io/Externalizable"});
{
    fv=cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_TRANSIENT,"object",descrCore,null,null);
    fv.visitEnd();
  }
{
    fv=cw.visitField(ACC_PRIVATE + ACC_TRANSIENT,"store","Lorg/drools/core/util/TripleStore;",null,null);
    fv.visitEnd();
  }
{
    fv=cw.visitField(ACC_PRIVATE,"storeId","Ljava/lang/String;",null,null);
    fv.visitEnd();
  }
  if (mixinClass != null) {
{
      fv=cw.visitField(ACC_PRIVATE,mixin,BuildUtils.getTypeDescriptor(mixinClass.getName()),null,null);
      fv.visitEnd();
    }
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"<init>","()V",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,BuildUtils.getInternalType(TraitFactory.proxyBaseClass.getName()),"<init>","()V");
    mv.visitInsn(RETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"<init>","(" + descrCore + "Lorg/drools/core/util/TripleStore;)V",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,2);
    mv.visitMethodInsn(INVOKEVIRTUAL,"org/drools/core/util/TripleStore","getId","()Ljava/lang/String;");
    mv.visitFieldInsn(PUTFIELD,internalProxy,"storeId","Ljava/lang/String;");
    int size=buildConstructorCore(cw,mv,internalProxy,internalWrapper,internalCore,descrCore,mixin,mixinClass);
    mv.visitInsn(RETURN);
    mv.visitMaxs(5 + size,3);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"getCore","()" + descrCore + "",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,internalProxy,"object",descrCore);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"getObject","()Ljava/lang/Object;",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,internalProxy,"object",descrCore);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"setObject","(Ljava/lang/Object;)V",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitTypeInsn(CHECKCAST,internalCore);
    mv.visitFieldInsn(PUTFIELD,internalProxy,"object",descrCore);
    mv.visitInsn(RETURN);
    mv.visitMaxs(2,2);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"getCore","()Ljava/lang/Object;",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKEVIRTUAL,internalProxy,"getCore","()" + descrCore + "");
    mv.visitInsn(ARETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"writeExternal","(Ljava/io/ObjectOutput;)V",null,new String[]{"java/io/IOException"});
    mv.visitCode();
    mv.visitVarInsn(ALOAD,1);
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKEVIRTUAL,internalProxy,"getObject","()Ljava/lang/Object;");
    mv.visitMethodInsn(INVOKEINTERFACE,"java/io/ObjectOutput","writeObject","(Ljava/lang/Object;)V");
    mv.visitVarInsn(ALOAD,1);
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,internalProxy,"storeId","Ljava/lang/String;");
    mv.visitMethodInsn(INVOKEINTERFACE,"java/io/ObjectOutput","writeObject","(Ljava/lang/Object;)V");
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitMethodInsn(INVOKESPECIAL,BuildUtils.getInternalType(TraitFactory.proxyBaseClass.getName()),"writeExternal","(Ljava/io/ObjectOutput;)V");
    mv.visitInsn(RETURN);
    mv.visitMaxs(2,2);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"readExternal","(Ljava/io/ObjectInput;)V",null,new String[]{"java/io/IOException","java/lang/ClassNotFoundException"});
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitMethodInsn(INVOKEINTERFACE,"java/io/ObjectInput","readObject","()Ljava/lang/Object;");
    mv.visitTypeInsn(CHECKCAST,internalCore);
    mv.visitFieldInsn(PUTFIELD,internalProxy,"object",descrCore);
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitMethodInsn(INVOKEINTERFACE,"java/io/ObjectInput","readObject","()Ljava/lang/Object;");
    mv.visitTypeInsn(CHECKCAST,"java/lang/String");
    mv.visitFieldInsn(PUTFIELD,internalProxy,"storeId","Ljava/lang/String;");
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,internalProxy,"storeId","Ljava/lang/String;");
    mv.visitMethodInsn(INVOKESTATIC,"org/drools/factmodel/traits/TripleStoreRegistry","getRegistry","(Ljava/lang/String;)Lorg/drools/core/util/TripleStore;");
    mv.visitFieldInsn(PUTFIELD,internalProxy,"store","Lorg/drools/core/util/TripleStore;");
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitMethodInsn(INVOKESPECIAL,BuildUtils.getInternalType(TraitFactory.proxyBaseClass.getName()),"readExternal","(Ljava/io/ObjectInput;)V");
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,internalProxy,"object",descrCore);
    mv.visitMethodInsn(INVOKEINTERFACE,"org/drools/factmodel/traits/TraitableBean","getTraitMap","()Ljava/util/Map;");
    mv.visitLdcInsn(getTrait().getClassName());
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    mv.visitInsn(POP);
    mv.visitInsn(RETURN);
    mv.visitMaxs(3,2);
    mv.visitEnd();
  }
  buildProxyAccessors(mask,cw,masterName,core,mixinGetSet);
  boolean hasKeys=false;
  for (  FactField ff : getTrait().getFields()) {
    if (ff.isKey()) {
      hasKeys=true;
      break;
    }
  }
  if (!hasKeys) {
    buildEqualityMethods(cw,masterName,core.getClassName());
  }
 else {
    buildKeyedEqualityMethods(cw,getTrait(),masterName,core.getClassName());
  }
  if (mixinClass != null) {
    buildMixinMethods(cw,masterName,mixin,mixinClass,mixinMethods);
    buildMixinMethods(cw,masterName,mixin,mixinClass,mixinGetSet.values());
  }
  buildCommonMethods(cw,masterName);
  buildExtendedMethods(cw,getTrait(),core);
  cw.visitEnd();
  return cw.toByteArray();
}
