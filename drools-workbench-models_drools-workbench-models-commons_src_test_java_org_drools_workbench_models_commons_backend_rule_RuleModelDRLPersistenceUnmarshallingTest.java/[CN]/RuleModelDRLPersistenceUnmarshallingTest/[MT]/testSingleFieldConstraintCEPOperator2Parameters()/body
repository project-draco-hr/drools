{
  String drl="rule \"rule1\"\n" + "when\n" + "$e : Event()\n"+ "Event( this after[1d, 2d] $e )\n"+ "then\n"+ "end";
  RuleModel m=RuleModelDRLPersistenceImpl.getInstance().unmarshal(drl,Collections.EMPTY_LIST,dmo);
  assertNotNull(m);
  assertEquals("rule1",m.name);
  assertEquals(2,m.lhs.length);
  IPattern p1=m.lhs[0];
  assertTrue(p1 instanceof FactPattern);
  FactPattern fp1=(FactPattern)p1;
  assertEquals("Event",fp1.getFactType());
  assertEquals("$e",fp1.getBoundName());
  assertEquals(0,fp1.getNumberOfConstraints());
  IPattern p2=m.lhs[1];
  assertTrue(p2 instanceof FactPattern);
  FactPattern fp2=(FactPattern)p2;
  assertEquals("Event",fp2.getFactType());
  assertNull(fp2.getBoundName());
  assertEquals(1,fp2.getNumberOfConstraints());
  SingleFieldConstraint sfp=(SingleFieldConstraint)fp2.getConstraint(0);
  assertEquals("Event",sfp.getFactType());
  assertEquals("this",sfp.getFieldName());
  assertEquals("after",sfp.getOperator());
  assertEquals("$e",sfp.getValue());
  assertEquals(BaseSingleFieldConstraint.TYPE_VARIABLE,sfp.getConstraintValueType());
  assertEquals(4,sfp.getParameters().size());
  assertEquals("1d",sfp.getParameter("0"));
  assertEquals("2d",sfp.getParameter("1"));
  assertEquals("2",sfp.getParameter("org.drools.workbench.models.commons.backend.rule.visibleParameterSet"));
  assertEquals("org.drools.workbench.models.commons.backend.rule.CEPOperatorParameterDRLBuilder",sfp.getParameter("org.drools.workbench.models.commons.backend.rule.operatorParameterGenerator"));
}
