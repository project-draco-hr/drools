{
  String drl="package org.test;\n" + "rule \"List_Of_Values_Issue\"\n" + "dialect \"mvel\"\n"+ "when\n"+ "  MyTransactionVO( $myData : myData )\n"+ "  MyDataList( myDataList contains $myData )\n"+ "     then\n"+ "end";
  addModelField("org.test.MyTransactionVO","this","org.test.MyTransactionVO",DataType.TYPE_THIS);
  addModelField("org.test.MyTransactionVO","myData","org.test.MyDataList","org.test.MyDataList");
  addModelField("org.test.MyDataList","this","org.test.MyDataList",DataType.TYPE_THIS);
  addModelField("org.test.MyDataList","myDataList",List.class.getName(),DataType.TYPE_COLLECTION);
  when(dmo.getPackageName()).thenReturn("org.test");
  final RuleModel m=RuleModelDRLPersistenceImpl.getInstance().unmarshal(drl,Collections.emptyList(),dmo);
  assertNotNull(m);
  assertEquals(2,m.lhs.length);
  final IPattern p0=m.lhs[0];
  assertTrue(p0 instanceof FactPattern);
  final FactPattern fp0=(FactPattern)p0;
  assertEquals("MyTransactionVO",fp0.getFactType());
  assertEquals(1,fp0.getNumberOfConstraints());
  final IPattern p1=m.lhs[1];
  assertTrue(p1 instanceof FactPattern);
  final FactPattern fp1=(FactPattern)p1;
  assertEquals("MyDataList",fp1.getFactType());
  assertEquals(1,fp1.getNumberOfConstraints());
  assertTrue(fp0.getConstraint(0) instanceof SingleFieldConstraint);
  final SingleFieldConstraint fp0sfc0=(SingleFieldConstraint)fp0.getConstraint(0);
  assertEquals("MyTransactionVO",fp0sfc0.getFactType());
  assertEquals("myData",fp0sfc0.getFieldName());
  assertEquals("$myData",fp0sfc0.getFieldBinding());
  assertEquals("MyDataList",fp0sfc0.getFieldType());
  assertNull(fp0sfc0.getOperator());
  assertNull(fp0sfc0.getValue());
  assertTrue(fp1.getConstraint(0) instanceof SingleFieldConstraint);
  final SingleFieldConstraint fp1sfc0=(SingleFieldConstraint)fp1.getConstraint(0);
  assertEquals("MyDataList",fp1sfc0.getFactType());
  assertEquals("myDataList",fp1sfc0.getFieldName());
  assertEquals("contains",fp1sfc0.getOperator());
  assertEquals("$myData",fp1sfc0.getValue());
  assertEquals(SingleFieldConstraint.TYPE_VARIABLE,fp1sfc0.getConstraintValueType());
  assertEquals(0,m.rhs.length);
  assertEqualsIgnoreWhitespace(drl,RuleModelDRLPersistenceImpl.getInstance().marshal(m));
}
