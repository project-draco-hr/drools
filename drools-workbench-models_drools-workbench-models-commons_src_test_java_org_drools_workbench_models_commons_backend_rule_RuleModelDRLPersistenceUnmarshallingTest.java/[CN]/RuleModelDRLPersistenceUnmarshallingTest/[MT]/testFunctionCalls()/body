{
  String drl="package org.mortgages\n" + "import java.lang.Number\n" + "import java.lang.String\n"+ "rule \"rule1\"\n"+ "dialect \"mvel\"\n"+ "when\n"+ "  s : String()\n"+ "then\n"+ "  s.indexOf( s );\n"+ "  s.indexOf( 0 );\n"+ "end\n";
  Map<String,List<MethodInfo>> methodInformation=new HashMap<String,List<MethodInfo>>();
  List<MethodInfo> mapMethodInformation1=new ArrayList<MethodInfo>();
  mapMethodInformation1.add(new MethodInfo("indexOf",Arrays.asList(new String[]{"String"}),"int",null,"String"));
  List<MethodInfo> mapMethodInformation2=new ArrayList<MethodInfo>();
  mapMethodInformation2.add(new MethodInfo("indexOf",Arrays.asList(new String[]{"Integer"}),"int",null,"String"));
  methodInformation.put("java.lang.String",mapMethodInformation2);
  methodInformation.put("java.lang.String",mapMethodInformation1);
  when(dmo.getProjectMethodInformation()).thenReturn(methodInformation);
  final RuleModel m=RuleModelDRLPersistenceImpl.getInstance().unmarshal(drl,Collections.EMPTY_LIST,dmo);
  assertNotNull(m);
  assertEquals(2,m.rhs.length);
  assertTrue(m.rhs[0] instanceof ActionCallMethod);
  assertTrue(m.rhs[1] instanceof ActionCallMethod);
  ActionCallMethod actionCallMethod1=(ActionCallMethod)m.rhs[0];
  assertEquals(1,actionCallMethod1.getState());
  assertEquals("indexOf",actionCallMethod1.getMethodName());
  assertEquals("s",actionCallMethod1.getVariable());
  assertEquals(1,actionCallMethod1.getFieldValues().length);
  assertEquals("indexOf",actionCallMethod1.getFieldValues()[0].getField());
  assertEquals("s",actionCallMethod1.getFieldValues()[0].getValue());
  assertEquals(FieldNatureType.TYPE_VARIABLE,actionCallMethod1.getFieldValues()[0].getNature());
  assertEquals("String",actionCallMethod1.getFieldValues()[0].getType());
  ActionCallMethod actionCallMethod2=(ActionCallMethod)m.rhs[1];
  assertEquals(1,actionCallMethod2.getState());
  assertEquals("indexOf",actionCallMethod2.getMethodName());
  assertEquals("s",actionCallMethod2.getVariable());
  assertEquals(1,actionCallMethod2.getFieldValues().length);
  assertEquals("indexOf",actionCallMethod2.getFieldValues()[0].getField());
  assertEquals("0",actionCallMethod2.getFieldValues()[0].getValue());
  assertEquals(FieldNatureType.TYPE_LITERAL,actionCallMethod2.getFieldValues()[0].getNature());
  assertEquals("Numeric",actionCallMethod2.getFieldValues()[0].getType());
}
