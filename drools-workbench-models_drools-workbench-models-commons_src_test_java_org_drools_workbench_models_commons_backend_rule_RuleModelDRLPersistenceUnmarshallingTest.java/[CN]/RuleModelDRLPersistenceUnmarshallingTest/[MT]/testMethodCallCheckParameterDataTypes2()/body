{
  String drl="" + "package org.mortgages;\n" + "import org.mortgages.MyType;\n"+ "rule \"my rule\"\n"+ "  dialect \"mvel\"\n"+ "  when\n"+ "    t : MyType( )\n"+ "  then\n"+ "    t.doSomething( 1 * 2 );\n"+ "end\n";
  Map<String,List<MethodInfo>> methodInformation=new HashMap<>();
  List<MethodInfo> mapMethodInformation=new ArrayList<>();
  mapMethodInformation.add(new MethodInfo("doSomething",Collections.singletonList(DataType.TYPE_NUMERIC_INTEGER),"void","void","org.mortgages.MyType"));
  methodInformation.put("org.mortgages.MyType",mapMethodInformation);
  when(dmo.getProjectMethodInformation()).thenReturn(methodInformation);
  RuleModel m=RuleModelDRLPersistenceImpl.getInstance().unmarshal(drl,Collections.emptyList(),dmo);
  assertTrue(m.rhs[0] instanceof ActionCallMethod);
  ActionCallMethod mc=(ActionCallMethod)m.rhs[0];
  assertEquals("doSomething",mc.getMethodName());
  assertEquals("t",mc.getVariable());
  assertEquals(1,mc.getState());
  assertEquals(1,mc.getFieldValues().length);
  ActionFieldValue f1=mc.getFieldValue(0);
  assertEquals("1 * 2",f1.getValue());
  assertEquals(DataType.TYPE_NUMERIC_INTEGER,f1.getType());
  assertEquals(FieldNatureType.TYPE_FORMULA,f1.getNature());
  String marshalled=RuleModelDRLPersistenceImpl.getInstance().marshal(m);
  logger.debug(marshalled);
  assertEqualsIgnoreWhitespace(drl,marshalled);
}
