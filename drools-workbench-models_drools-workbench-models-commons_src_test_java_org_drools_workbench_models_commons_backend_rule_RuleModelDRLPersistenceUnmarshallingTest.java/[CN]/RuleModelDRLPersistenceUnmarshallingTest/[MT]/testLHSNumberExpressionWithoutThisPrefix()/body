{
  String drl="package org.mortgages;\n" + "import java.lang.Number\n" + "rule \"test\"\n"+ " dialect \"mvel\"\n"+ " when\n"+ "  Number( intValue() > 5 )\n"+ " then\n"+ "end";
  final HashMap<String,List<MethodInfo>> map=new HashMap<>();
  final ArrayList<MethodInfo> methodInfos=new ArrayList<>();
  methodInfos.add(new MethodInfo("intValue",Collections.emptyList(),"int",null,DataType.TYPE_NUMERIC_INTEGER));
  map.put("java.lang.Number",methodInfos);
  when(dmo.getProjectMethodInformation()).thenReturn(map);
  final RuleModel m=RuleModelDRLPersistenceImpl.getInstance().unmarshal(drl,Collections.emptyList(),dmo);
  assertNotNull(m);
  assertEquals(1,m.lhs.length);
  assertTrue(m.lhs[0] instanceof FactPattern);
  final FactPattern fp=(FactPattern)m.lhs[0];
  assertEquals("Number",fp.getFactType());
  assertEquals(1,fp.getNumberOfConstraints());
  assertTrue(fp.getConstraint(0) instanceof SingleFieldConstraintEBLeftSide);
  final SingleFieldConstraintEBLeftSide exp=(SingleFieldConstraintEBLeftSide)fp.getConstraint(0);
  assertEquals("int",exp.getFieldType());
  assertEquals(">",exp.getOperator());
  assertEquals("5",exp.getValue());
  assertEquals(2,exp.getExpressionLeftSide().getParts().size());
  assertTrue(exp.getExpressionLeftSide().getParts().get(0) instanceof ExpressionUnboundFact);
  final ExpressionUnboundFact expPart0=(ExpressionUnboundFact)exp.getExpressionLeftSide().getParts().get(0);
  assertEquals("Number",expPart0.getFactType());
  assertTrue(exp.getExpressionLeftSide().getParts().get(1) instanceof ExpressionMethod);
  final ExpressionMethod expPart1=(ExpressionMethod)exp.getExpressionLeftSide().getParts().get(1);
  assertEquals("intValue",expPart1.getName());
}
