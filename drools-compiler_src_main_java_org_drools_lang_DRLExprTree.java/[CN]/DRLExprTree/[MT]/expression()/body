{
  BaseDescr result=null;
  CommonTree op=null;
  CommonTree se=null;
  BaseDescr p1=null;
  BaseDescr p2=null;
  DRLExprTree.assignmentOperator_return ao=null;
  BaseDescr descr=null;
  try {
    int alt1=16;
switch (input.LA(1)) {
case DOUBLE_PIPE:
{
        alt1=1;
      }
    break;
case DOUBLE_AMPER:
{
    alt1=2;
  }
break;
case PIPE:
{
alt1=3;
}
break;
case XOR:
{
alt1=4;
}
break;
case AMPER:
{
alt1=5;
}
break;
case EQUALS:
{
alt1=6;
}
break;
case NOT_EQUALS:
{
alt1=7;
}
break;
case LESS_EQUALS:
{
alt1=8;
}
break;
case GREATER_EQUALS:
{
alt1=9;
}
break;
case LESS:
{
alt1=10;
}
break;
case GREATER:
{
alt1=11;
}
break;
case OPERATOR:
{
alt1=12;
}
break;
case NEG_OPERATOR:
{
alt1=13;
}
break;
case SHL_ASSIGN:
case SHRB_ASSIGN:
case SHR_ASSIGN:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case MULT_ASSIGN:
case DIV_ASSIGN:
case AND_ASSIGN:
case OR_ASSIGN:
case XOR_ASSIGN:
case MOD_ASSIGN:
case EQUALS_ASSIGN:
{
alt1=14;
}
break;
case QUESTION:
{
alt1=15;
}
break;
case SHIFT_EXPR:
{
alt1=16;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",1,0,input);
throw nvae;
}
switch (alt1) {
case 1:
{
op=(CommonTree)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_expression89);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression93);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression97);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=ConstraintConnectiveDescr.newOr();
((ConstraintConnectiveDescr)descr).addOrMerge(p1);
((ConstraintConnectiveDescr)descr).addOrMerge(p2);
}
break;
case 2:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_expression121);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression125);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression129);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=ConstraintConnectiveDescr.newAnd();
((ConstraintConnectiveDescr)descr).addOrMerge(p1);
((ConstraintConnectiveDescr)descr).addOrMerge(p2);
}
break;
case 3:
{
match(input,PIPE,FOLLOW_PIPE_in_expression151);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression155);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression159);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=ConstraintConnectiveDescr.newIncOr();
((ConstraintConnectiveDescr)descr).addOrMerge(p1);
((ConstraintConnectiveDescr)descr).addOrMerge(p2);
}
break;
case 4:
{
match(input,XOR,FOLLOW_XOR_in_expression181);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression185);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression189);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=ConstraintConnectiveDescr.newXor();
((ConstraintConnectiveDescr)descr).addOrMerge(p1);
((ConstraintConnectiveDescr)descr).addOrMerge(p2);
}
break;
case 5:
{
match(input,AMPER,FOLLOW_AMPER_in_expression211);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression215);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression219);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=ConstraintConnectiveDescr.newIncAnd();
((ConstraintConnectiveDescr)descr).addOrMerge(p1);
((ConstraintConnectiveDescr)descr).addOrMerge(p2);
}
break;
case 6:
{
match(input,EQUALS,FOLLOW_EQUALS_in_expression241);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression245);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression249);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr("==",p1,p2);
}
break;
case 7:
{
match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_expression271);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression275);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression279);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr("!=",p1,p2);
}
break;
case 8:
{
match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_expression301);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression305);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression309);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr("<=",p1,p2);
}
break;
case 9:
{
match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_expression331);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression335);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression339);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr(">=",p1,p2);
}
break;
case 10:
{
match(input,LESS,FOLLOW_LESS_in_expression361);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression365);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression369);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr("<",p1,p2);
}
break;
case 11:
{
match(input,GREATER,FOLLOW_GREATER_in_expression391);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression395);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression399);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr(">",p1,p2);
}
break;
case 12:
{
op=(CommonTree)match(input,OPERATOR,FOLLOW_OPERATOR_in_expression423);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression427);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression431);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr((op != null ? op.getText() : null),p1,p2);
}
break;
case 13:
{
op=(CommonTree)match(input,NEG_OPERATOR,FOLLOW_NEG_OPERATOR_in_expression455);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression459);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression463);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr("not " + (op != null ? op.getText() : null),p1,p2);
}
break;
case 14:
{
pushFollow(FOLLOW_assignmentOperator_in_expression486);
ao=assignmentOperator();
state._fsp--;
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression490);
p1=expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression494);
p2=expression();
state._fsp--;
match(input,Token.UP,null);
descr=new RelationalExprDescr((ao != null ? ((CommonTree)ao.start) : null).getText(),p1,p2);
}
break;
case 15:
{
match(input,QUESTION,FOLLOW_QUESTION_in_expression519);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_expression_in_expression521);
expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression523);
expression();
state._fsp--;
pushFollow(FOLLOW_expression_in_expression525);
expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 16:
{
se=(CommonTree)match(input,SHIFT_EXPR,FOLLOW_SHIFT_EXPR_in_expression539);
descr=new EvalDescr((se != null ? se.getText() : null));
}
break;
}
result=descr;
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return result;
}
