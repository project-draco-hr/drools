{
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  conf.setSequential(true);
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  BuildContext buildContext=new BuildContext(ruleBase,ruleBase.getReteooBuilder().getIdGenerator());
  buildContext.setTupleMemoryEnabled(false);
  this.node=new AccumulateNode(15,this.tupleSource,this.objectSource,new AlphaNodeFieldConstraint[0],EmptyBetaConstraints.getInstance(),EmptyBetaConstraints.getInstance(),this.accumulate,false,buildContext);
  this.node.addTupleSink(this.sink);
  this.workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase(conf));
  this.memory=((AccumulateMemory)this.workingMemory.getNodeMemory(this.node)).betaMemory;
  final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.getFactHandleFactory().newFactHandle("cheese");
  final DefaultFactHandle f1=(DefaultFactHandle)this.workingMemory.getFactHandleFactory().newFactHandle("other cheese");
  final ReteTuple tuple0=new ReteTuple(f0);
  this.node.assertObject(f0,this.context,this.workingMemory);
  this.node.assertObject(f1,this.context,this.workingMemory);
  this.node.assertTuple(tuple0,this.context,this.workingMemory);
  assertNull(this.memory.getTupleMemory());
  assertEquals(2,this.memory.getFactHandleMemory().size());
  Assert.assertEquals("Wrong number of elements in matching objects list ",2,this.accumulator.getMatchingObjects().size());
  final ReteTuple tuple1=new ReteTuple(f1);
  this.node.assertTuple(tuple1,this.context,this.workingMemory);
  assertNull(this.memory.getTupleMemory());
  Assert.assertEquals("Wrong number of elements in matching objects list ",2,this.accumulator.getMatchingObjects().size());
  Assert.assertEquals("Two tuples should have been propagated",2,this.sink.getAsserted().size());
}
