{
  String str="";
  str+="package org.drools \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   A() \n";
  str+="   B() \n";
  str+="   C() \n";
  str+="   D() \n";
  str+="then \n";
  str+="end \n";
  str+="rule rule2 when \n";
  str+="   A() \n";
  str+="   exists( B() and C() ) \n";
  str+="   D() \n";
  str+="then \n";
  str+="end \n";
  str+="rule rule3 when \n";
  str+="   A() \n";
  str+="   exists( B() and C() and D() ) \n";
  str+="   E() \n";
  str+="then \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KnowledgeBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(LRUnlinkingOption.ENABLED);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode node=getObjectTypeNode(kbase,A.class);
  ReteooWorkingMemoryInterface wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession()).session;
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)node.getSinkPropagator().getSinks()[0];
  assertEquals(3,liaNode.getSinkPropagator().size());
  ExistsNode existsNode2=(ExistsNode)liaNode.getSinkPropagator().getSinks()[1];
  ExistsNode existsNode3=(ExistsNode)liaNode.getSinkPropagator().getSinks()[2];
  JoinNode joinNodeB=(JoinNode)liaNode.getSinkPropagator().getSinks()[0];
  assertSame(joinNodeB.getRightInput(),getObjectTypeNode(kbase,B.class));
  JoinNode joinNodeC=(JoinNode)joinNodeB.getSinkPropagator().getSinks()[0];
  assertSame(joinNodeC.getRightInput(),getObjectTypeNode(kbase,C.class));
  assertEquals(2,joinNodeC.getSinkPropagator().size());
  JoinNode joinNodeD=(JoinNode)joinNodeC.getSinkPropagator().getSinks()[0];
  assertSame(joinNodeD.getRightInput(),getObjectTypeNode(kbase,D.class));
  assertEquals(2,joinNodeD.getSinkPropagator().size());
  assertSame(existsNode2,((RightInputAdapterNode)joinNodeC.getSinkPropagator().getSinks()[1]).getSinkPropagator().getSinks()[0]);
  assertSame(existsNode3,((RightInputAdapterNode)joinNodeD.getSinkPropagator().getSinks()[1]).getSinkPropagator().getSinks()[0]);
}
