{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="import " + F.class.getCanonicalName() + "\n";
  str+="import " + G.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   A() \n";
  str+="   B() \n";
  str+="   exists( C() and D() and exists( E() and F() ) ) \n";
  str+="   G() \n";
  str+="then \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(LRUnlinkingOption.ENABLED);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode node=getObjectTypeNode(kbase,A.class);
  ReteooWorkingMemoryInterface wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession()).session;
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)node.getSinkPropagator().getSinks()[0];
  JoinNode bNode=(JoinNode)liaNode.getSinkPropagator().getSinks()[0];
  ExistsNode exists1n=(ExistsNode)bNode.getSinkPropagator().getSinks()[1];
  JoinNode cNode=(JoinNode)bNode.getSinkPropagator().getSinks()[0];
  JoinNode dNode=(JoinNode)cNode.getSinkPropagator().getSinks()[0];
  ExistsNode exists2n=(ExistsNode)dNode.getSinkPropagator().getSinks()[1];
  JoinNode eNode=(JoinNode)dNode.getSinkPropagator().getSinks()[0];
  JoinNode fNode=(JoinNode)eNode.getSinkPropagator().getSinks()[0];
  RightInputAdapterNode riaNode2=(RightInputAdapterNode)fNode.getSinkPropagator().getSinks()[0];
  RightInputAdapterNode riaNode1=(RightInputAdapterNode)exists2n.getSinkPropagator().getSinks()[0];
  JoinNode gNode=(JoinNode)exists1n.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn=(RuleTerminalNode)gNode.getSinkPropagator().getSinks()[0];
  wm.insert(new A());
  wm.insert(new B());
  wm.insert(new C());
  wm.insert(new D());
  wm.insert(new G());
  LiaNodeMemory liaMem=(LiaNodeMemory)wm.getNodeMemory(liaNode);
  BetaMemory bMem=(BetaMemory)wm.getNodeMemory(bNode);
  BetaMemory exists1Mem=(BetaMemory)wm.getNodeMemory(exists1n);
  BetaMemory cMem=(BetaMemory)wm.getNodeMemory(cNode);
  BetaMemory dMem=(BetaMemory)wm.getNodeMemory(dNode);
  BetaMemory exists2Mem=(BetaMemory)wm.getNodeMemory(exists2n);
  BetaMemory eMem=(BetaMemory)wm.getNodeMemory(eNode);
  BetaMemory fMem=(BetaMemory)wm.getNodeMemory(fNode);
  BetaMemory gMem=(BetaMemory)wm.getNodeMemory(gNode);
  RiaNodeMemory riaMem1=(RiaNodeMemory)wm.getNodeMemory(riaNode1);
  RiaNodeMemory riaMem2=(RiaNodeMemory)wm.getNodeMemory(riaNode2);
  PathMemory rs=(PathMemory)wm.getNodeMemory(rtn);
  assertFalse(rs.isRuleLinked());
  assertSame(liaMem.getSegmentMemory(),bMem.getSegmentMemory());
  assertNotSame(bMem.getSegmentMemory(),exists1Mem.getSegmentMemory());
  assertSame(exists1Mem.getSegmentMemory(),gMem.getSegmentMemory());
  assertEquals(2,rs.getSegmentMemories().length);
  assertEquals(3,rs.getAllLinkedMaskTest());
  assertEquals(1,rs.getLinkedSegmentMask());
  assertEquals(3,liaMem.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(1,liaMem.getNodePosMaskBit());
  assertEquals(2,bMem.getNodePosMaskBit());
  assertEquals(3,exists1Mem.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(1,exists1Mem.getNodePosMaskBit());
  assertEquals(2,gMem.getNodePosMaskBit());
  assertSame(dMem.getSegmentMemory(),cMem.getSegmentMemory());
  assertNotSame(exists2Mem.getSegmentMemory(),dMem.getSegmentMemory());
  assertEquals(3,riaMem1.getRiaPathMemory().getSegmentMemories().length);
  assertEquals(null,riaMem1.getRiaPathMemory().getSegmentMemories()[0]);
  assertEquals(dMem.getSegmentMemory(),riaMem1.getRiaPathMemory().getSegmentMemories()[1]);
  assertEquals(1,dMem.getSegmentMemory().getPathMemories().size());
  assertSame(riaMem1.getRiaPathMemory(),cMem.getSegmentMemory().getPathMemories().get(0));
  assertEquals(3,cMem.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(3,cMem.getSegmentMemory().getLinkedNodeMask());
  assertEquals(1,cMem.getNodePosMaskBit());
  assertEquals(2,dMem.getNodePosMaskBit());
  assertEquals(0,exists2Mem.getNodePosMaskBit());
  FactHandle fhE1=wm.insert(new E());
  FactHandle fhF1=wm.insert(new F());
  assertEquals(1,exists2Mem.getNodePosMaskBit());
  assertEquals(6,riaMem1.getRiaPathMemory().getAllLinkedMaskTest());
  assertEquals(6,riaMem1.getRiaPathMemory().getLinkedSegmentMask());
  wm.delete(fhE1);
  wm.delete(fhF1);
  assertEquals(2,riaMem1.getRiaPathMemory().getLinkedSegmentMask());
  assertNotNull(null,eMem.getSegmentMemory());
  assertSame(fMem.getSegmentMemory(),eMem.getSegmentMemory());
  assertEquals(3,riaMem2.getRiaPathMemory().getSegmentMemories().length);
  assertEquals(null,riaMem2.getRiaPathMemory().getSegmentMemories()[0]);
  assertEquals(null,riaMem2.getRiaPathMemory().getSegmentMemories()[1]);
  assertEquals(fMem.getSegmentMemory(),riaMem2.getRiaPathMemory().getSegmentMemories()[2]);
  assertSame(riaMem2.getRiaPathMemory(),eMem.getSegmentMemory().getPathMemories().get(0));
  assertEquals(3,eMem.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(0,eMem.getSegmentMemory().getLinkedNodeMask());
  assertEquals(4,riaMem2.getRiaPathMemory().getAllLinkedMaskTest());
  assertEquals(0,riaMem2.getRiaPathMemory().getLinkedSegmentMask());
  fhE1=wm.insert(new E());
  wm.insert(new F());
  assertTrue(rs.isRuleLinked());
  assertEquals(3,rs.getAllLinkedMaskTest());
  assertEquals(3,rs.getLinkedSegmentMask());
  assertEquals(3,cMem.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(3,cMem.getSegmentMemory().getLinkedNodeMask());
  assertEquals(6,riaMem1.getRiaPathMemory().getAllLinkedMaskTest());
  assertEquals(6,riaMem1.getRiaPathMemory().getLinkedSegmentMask());
  assertEquals(3,eMem.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(3,eMem.getSegmentMemory().getLinkedNodeMask());
  assertEquals(4,riaMem2.getRiaPathMemory().getAllLinkedMaskTest());
  assertEquals(4,riaMem2.getRiaPathMemory().getLinkedSegmentMask());
  wm.delete(fhE1);
  assertFalse(rs.isRuleLinked());
  assertEquals(3,cMem.getSegmentMemory().getLinkedNodeMask());
  assertEquals(2,riaMem1.getRiaPathMemory().getLinkedSegmentMask());
  assertEquals(2,eMem.getSegmentMemory().getLinkedNodeMask());
  assertEquals(0,riaMem2.getRiaPathMemory().getLinkedSegmentMask());
}
