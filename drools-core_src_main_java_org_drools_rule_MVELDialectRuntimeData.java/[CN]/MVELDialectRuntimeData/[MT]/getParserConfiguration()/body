{
  if (parserConfiguration == null) {
    String[] pkgImports=getPackageImports().toArray(new String[getPackageImports().size()]);
    ClassLoader classLoader=rootClassLoader;
{
      String key=null;
      Object value=null;
      try {
        for (        Entry<String,Object> entry : getImports().entrySet()) {
          key=entry.getKey();
          value=entry.getValue();
          if (entry.getValue() instanceof String) {
            String str=(String)value;
            Class cls=this.rootClassLoader.loadClass(str.substring(2));
            if (str.startsWith("m:")) {
              String methodName=key;
              for (              Method method : cls.getDeclaredMethods()) {
                if (method.getName().equals(methodName)) {
                  getImports().put(methodName,method);
                  continue;
                }
              }
            }
 else {
              String fieldName=key;
              for (              Field field : cls.getFields()) {
                if (field.isAccessible() && field.getName().equals(fieldName)) {
                  getImports().put(fieldName,"f:" + cls.getName());
                  continue;
                }
              }
            }
          }
        }
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException("Unable to resolve method of field: " + key + " - "+ value,e);
      }
    }
    this.parserConfiguration=new ParserConfiguration();
    this.parserConfiguration.setImports(getImports());
    this.parserConfiguration.setPackageImports(getPackageImports());
    this.parserConfiguration.setClassLoader(classLoader);
  }
  return this.parserConfiguration;
}
