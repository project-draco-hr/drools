{
  int N=this.abducibleArgs.length;
  cachedConstructor=null;
  List<Class> availableArgs=N > 0 ? new ArrayList<Class>(N) : Collections.<Class>emptyList();
  for (int j=0; j < N; j++) {
    Declaration decl=declarations != null ? declarations[mapArgToParam(j)] : getDeclaration(abducibleArgs[j]);
    if (decl != null) {
      availableArgs.add(decl.getExtractor().getExtractToClass());
    }
  }
  Class klass=returnType.getClassType();
  while (cachedConstructor == null) {
    try {
      cachedConstructor=klass.getConstructor(availableArgs.toArray(new Class[availableArgs.size()]));
    }
 catch (    NoSuchMethodException nsme) {
      if (klass == Object.class) {
        throw nsme;
      }
 else {
        klass=klass.getSuperclass();
      }
    }
  }
}
