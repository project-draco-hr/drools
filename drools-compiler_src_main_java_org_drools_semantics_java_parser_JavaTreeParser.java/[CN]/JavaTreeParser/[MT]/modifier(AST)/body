{
  AST modifier_AST_in=(AST)_t;
  try {
    if (_t == null)     _t=ASTNULL;
switch (_t.getType()) {
case LITERAL_private:
{
        AST tmp43_AST_in=(AST)_t;
        match(_t,LITERAL_private);
        _t=_t.getNextSibling();
        break;
      }
case LITERAL_public:
{
      AST tmp44_AST_in=(AST)_t;
      match(_t,LITERAL_public);
      _t=_t.getNextSibling();
      break;
    }
case LITERAL_protected:
{
    AST tmp45_AST_in=(AST)_t;
    match(_t,LITERAL_protected);
    _t=_t.getNextSibling();
    break;
  }
case LITERAL_static:
{
  AST tmp46_AST_in=(AST)_t;
  match(_t,LITERAL_static);
  _t=_t.getNextSibling();
  break;
}
case LITERAL_transient:
{
AST tmp47_AST_in=(AST)_t;
match(_t,LITERAL_transient);
_t=_t.getNextSibling();
break;
}
case FINAL:
{
AST tmp48_AST_in=(AST)_t;
match(_t,FINAL);
_t=_t.getNextSibling();
break;
}
case ABSTRACT:
{
AST tmp49_AST_in=(AST)_t;
match(_t,ABSTRACT);
_t=_t.getNextSibling();
break;
}
case LITERAL_native:
{
AST tmp50_AST_in=(AST)_t;
match(_t,LITERAL_native);
_t=_t.getNextSibling();
break;
}
case LITERAL_threadsafe:
{
AST tmp51_AST_in=(AST)_t;
match(_t,LITERAL_threadsafe);
_t=_t.getNextSibling();
break;
}
case LITERAL_synchronized:
{
AST tmp52_AST_in=(AST)_t;
match(_t,LITERAL_synchronized);
_t=_t.getNextSibling();
break;
}
case LITERAL_const:
{
AST tmp53_AST_in=(AST)_t;
match(_t,LITERAL_const);
_t=_t.getNextSibling();
break;
}
case LITERAL_volatile:
{
AST tmp54_AST_in=(AST)_t;
match(_t,LITERAL_volatile);
_t=_t.getNextSibling();
break;
}
case STRICTFP:
{
AST tmp55_AST_in=(AST)_t;
match(_t,STRICTFP);
_t=_t.getNextSibling();
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
}
