{
  AST expr_AST_in=(AST)_t;
  try {
    if (_t == null)     _t=ASTNULL;
switch (_t.getType()) {
case QUESTION:
{
        AST __t473=_t;
        AST tmp99_AST_in=(AST)_t;
        match(_t,QUESTION);
        _t=_t.getFirstChild();
        expr(_t);
        _t=_retTree;
        expr(_t);
        _t=_retTree;
        expr(_t);
        _t=_retTree;
        _t=__t473;
        _t=_t.getNextSibling();
        break;
      }
case ASSIGN:
{
      AST __t474=_t;
      AST tmp100_AST_in=(AST)_t;
      match(_t,ASSIGN);
      _t=_t.getFirstChild();
      expr(_t);
      _t=_retTree;
      expr(_t);
      _t=_retTree;
      _t=__t474;
      _t=_t.getNextSibling();
      break;
    }
case PLUS_ASSIGN:
{
    AST __t475=_t;
    AST tmp101_AST_in=(AST)_t;
    match(_t,PLUS_ASSIGN);
    _t=_t.getFirstChild();
    expr(_t);
    _t=_retTree;
    expr(_t);
    _t=_retTree;
    _t=__t475;
    _t=_t.getNextSibling();
    break;
  }
case MINUS_ASSIGN:
{
  AST __t476=_t;
  AST tmp102_AST_in=(AST)_t;
  match(_t,MINUS_ASSIGN);
  _t=_t.getFirstChild();
  expr(_t);
  _t=_retTree;
  expr(_t);
  _t=_retTree;
  _t=__t476;
  _t=_t.getNextSibling();
  break;
}
case STAR_ASSIGN:
{
AST __t477=_t;
AST tmp103_AST_in=(AST)_t;
match(_t,STAR_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t477;
_t=_t.getNextSibling();
break;
}
case DIV_ASSIGN:
{
AST __t478=_t;
AST tmp104_AST_in=(AST)_t;
match(_t,DIV_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t478;
_t=_t.getNextSibling();
break;
}
case MOD_ASSIGN:
{
AST __t479=_t;
AST tmp105_AST_in=(AST)_t;
match(_t,MOD_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t479;
_t=_t.getNextSibling();
break;
}
case SR_ASSIGN:
{
AST __t480=_t;
AST tmp106_AST_in=(AST)_t;
match(_t,SR_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t480;
_t=_t.getNextSibling();
break;
}
case BSR_ASSIGN:
{
AST __t481=_t;
AST tmp107_AST_in=(AST)_t;
match(_t,BSR_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t481;
_t=_t.getNextSibling();
break;
}
case SL_ASSIGN:
{
AST __t482=_t;
AST tmp108_AST_in=(AST)_t;
match(_t,SL_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t482;
_t=_t.getNextSibling();
break;
}
case BAND_ASSIGN:
{
AST __t483=_t;
AST tmp109_AST_in=(AST)_t;
match(_t,BAND_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t483;
_t=_t.getNextSibling();
break;
}
case BXOR_ASSIGN:
{
AST __t484=_t;
AST tmp110_AST_in=(AST)_t;
match(_t,BXOR_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t484;
_t=_t.getNextSibling();
break;
}
case BOR_ASSIGN:
{
AST __t485=_t;
AST tmp111_AST_in=(AST)_t;
match(_t,BOR_ASSIGN);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t485;
_t=_t.getNextSibling();
break;
}
case LOR:
{
AST __t486=_t;
AST tmp112_AST_in=(AST)_t;
match(_t,LOR);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t486;
_t=_t.getNextSibling();
break;
}
case LAND:
{
AST __t487=_t;
AST tmp113_AST_in=(AST)_t;
match(_t,LAND);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t487;
_t=_t.getNextSibling();
break;
}
case BOR:
{
AST __t488=_t;
AST tmp114_AST_in=(AST)_t;
match(_t,BOR);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t488;
_t=_t.getNextSibling();
break;
}
case BXOR:
{
AST __t489=_t;
AST tmp115_AST_in=(AST)_t;
match(_t,BXOR);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t489;
_t=_t.getNextSibling();
break;
}
case BAND:
{
AST __t490=_t;
AST tmp116_AST_in=(AST)_t;
match(_t,BAND);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t490;
_t=_t.getNextSibling();
break;
}
case NOT_EQUAL:
{
AST __t491=_t;
AST tmp117_AST_in=(AST)_t;
match(_t,NOT_EQUAL);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t491;
_t=_t.getNextSibling();
break;
}
case EQUAL:
{
AST __t492=_t;
AST tmp118_AST_in=(AST)_t;
match(_t,EQUAL);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t492;
_t=_t.getNextSibling();
break;
}
case LT:
{
AST __t493=_t;
AST tmp119_AST_in=(AST)_t;
match(_t,LT);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t493;
_t=_t.getNextSibling();
break;
}
case GT:
{
AST __t494=_t;
AST tmp120_AST_in=(AST)_t;
match(_t,GT);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t494;
_t=_t.getNextSibling();
break;
}
case LE:
{
AST __t495=_t;
AST tmp121_AST_in=(AST)_t;
match(_t,LE);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t495;
_t=_t.getNextSibling();
break;
}
case GE:
{
AST __t496=_t;
AST tmp122_AST_in=(AST)_t;
match(_t,GE);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t496;
_t=_t.getNextSibling();
break;
}
case SL:
{
AST __t497=_t;
AST tmp123_AST_in=(AST)_t;
match(_t,SL);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t497;
_t=_t.getNextSibling();
break;
}
case SR:
{
AST __t498=_t;
AST tmp124_AST_in=(AST)_t;
match(_t,SR);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t498;
_t=_t.getNextSibling();
break;
}
case BSR:
{
AST __t499=_t;
AST tmp125_AST_in=(AST)_t;
match(_t,BSR);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t499;
_t=_t.getNextSibling();
break;
}
case PLUS:
{
AST __t500=_t;
AST tmp126_AST_in=(AST)_t;
match(_t,PLUS);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t500;
_t=_t.getNextSibling();
break;
}
case MINUS:
{
AST __t501=_t;
AST tmp127_AST_in=(AST)_t;
match(_t,MINUS);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t501;
_t=_t.getNextSibling();
break;
}
case DIV:
{
AST __t502=_t;
AST tmp128_AST_in=(AST)_t;
match(_t,DIV);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t502;
_t=_t.getNextSibling();
break;
}
case MOD:
{
AST __t503=_t;
AST tmp129_AST_in=(AST)_t;
match(_t,MOD);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t503;
_t=_t.getNextSibling();
break;
}
case STAR:
{
AST __t504=_t;
AST tmp130_AST_in=(AST)_t;
match(_t,STAR);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t504;
_t=_t.getNextSibling();
break;
}
case INC:
{
AST __t505=_t;
AST tmp131_AST_in=(AST)_t;
match(_t,INC);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
_t=__t505;
_t=_t.getNextSibling();
break;
}
case DEC:
{
AST __t506=_t;
AST tmp132_AST_in=(AST)_t;
match(_t,DEC);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
_t=__t506;
_t=_t.getNextSibling();
break;
}
case POST_INC:
{
AST __t507=_t;
AST tmp133_AST_in=(AST)_t;
match(_t,POST_INC);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
_t=__t507;
_t=_t.getNextSibling();
break;
}
case POST_DEC:
{
AST __t508=_t;
AST tmp134_AST_in=(AST)_t;
match(_t,POST_DEC);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
_t=__t508;
_t=_t.getNextSibling();
break;
}
case BNOT:
{
AST __t509=_t;
AST tmp135_AST_in=(AST)_t;
match(_t,BNOT);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
_t=__t509;
_t=_t.getNextSibling();
break;
}
case LNOT:
{
AST __t510=_t;
AST tmp136_AST_in=(AST)_t;
match(_t,LNOT);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
_t=__t510;
_t=_t.getNextSibling();
break;
}
case LITERAL_instanceof:
{
AST __t511=_t;
AST tmp137_AST_in=(AST)_t;
match(_t,LITERAL_instanceof);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t511;
_t=_t.getNextSibling();
break;
}
case UNARY_MINUS:
{
AST __t512=_t;
AST tmp138_AST_in=(AST)_t;
match(_t,UNARY_MINUS);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
_t=__t512;
_t=_t.getNextSibling();
break;
}
case UNARY_PLUS:
{
AST __t513=_t;
AST tmp139_AST_in=(AST)_t;
match(_t,UNARY_PLUS);
_t=_t.getFirstChild();
expr(_t);
_t=_retTree;
_t=__t513;
_t=_t.getNextSibling();
break;
}
case TYPE:
case TYPECAST:
case INDEX_OP:
case METHOD_CALL:
case IDENT:
case DOT:
case LITERAL_this:
case LITERAL_super:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case LITERAL_new:
case NUM_INT:
case CHAR_LITERAL:
case STRING_LITERAL:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
{
primaryExpression(_t);
_t=_retTree;
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
}
