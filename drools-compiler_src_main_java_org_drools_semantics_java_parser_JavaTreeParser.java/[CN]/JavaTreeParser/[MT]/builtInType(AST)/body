{
  AST builtInType_AST_in=(AST)_t;
  try {
    if (_t == null)     _t=ASTNULL;
switch (_t.getType()) {
case LITERAL_void:
{
        AST tmp34_AST_in=(AST)_t;
        match(_t,LITERAL_void);
        _t=_t.getNextSibling();
        break;
      }
case LITERAL_boolean:
{
      AST tmp35_AST_in=(AST)_t;
      match(_t,LITERAL_boolean);
      _t=_t.getNextSibling();
      break;
    }
case LITERAL_byte:
{
    AST tmp36_AST_in=(AST)_t;
    match(_t,LITERAL_byte);
    _t=_t.getNextSibling();
    break;
  }
case LITERAL_char:
{
  AST tmp37_AST_in=(AST)_t;
  match(_t,LITERAL_char);
  _t=_t.getNextSibling();
  break;
}
case LITERAL_short:
{
AST tmp38_AST_in=(AST)_t;
match(_t,LITERAL_short);
_t=_t.getNextSibling();
break;
}
case LITERAL_int:
{
AST tmp39_AST_in=(AST)_t;
match(_t,LITERAL_int);
_t=_t.getNextSibling();
break;
}
case LITERAL_float:
{
AST tmp40_AST_in=(AST)_t;
match(_t,LITERAL_float);
_t=_t.getNextSibling();
break;
}
case LITERAL_long:
{
AST tmp41_AST_in=(AST)_t;
match(_t,LITERAL_long);
_t=_t.getNextSibling();
break;
}
case LITERAL_double:
{
AST tmp42_AST_in=(AST)_t;
match(_t,LITERAL_double);
_t=_t.getNextSibling();
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
}
