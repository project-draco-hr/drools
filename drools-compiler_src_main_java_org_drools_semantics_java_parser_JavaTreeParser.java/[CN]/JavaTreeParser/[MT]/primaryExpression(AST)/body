{
  AST primaryExpression_AST_in=(AST)_t;
  AST i=null;
  try {
    if (_t == null)     _t=ASTNULL;
switch (_t.getType()) {
case IDENT:
{
        i=(AST)_t;
        match(_t,IDENT);
        _t=_t.getNextSibling();
        this.variableRefs.add(i.getText());
        break;
      }
case DOT:
{
      AST __t515=_t;
      AST tmp141_AST_in=(AST)_t;
      match(_t,DOT);
      _t=_t.getFirstChild();
{
        if (_t == null)         _t=ASTNULL;
switch (_t.getType()) {
case TYPE:
case TYPECAST:
case INDEX_OP:
case POST_INC:
case POST_DEC:
case METHOD_CALL:
case UNARY_MINUS:
case UNARY_PLUS:
case IDENT:
case ASSIGN:
case DOT:
case STAR:
case LITERAL_this:
case LITERAL_super:
case PLUS_ASSIGN:
case MINUS_ASSIGN:
case STAR_ASSIGN:
case DIV_ASSIGN:
case MOD_ASSIGN:
case SR_ASSIGN:
case BSR_ASSIGN:
case SL_ASSIGN:
case BAND_ASSIGN:
case BXOR_ASSIGN:
case BOR_ASSIGN:
case QUESTION:
case LOR:
case LAND:
case BOR:
case BXOR:
case BAND:
case NOT_EQUAL:
case EQUAL:
case LT:
case GT:
case LE:
case GE:
case LITERAL_instanceof:
case SL:
case SR:
case BSR:
case PLUS:
case MINUS:
case DIV:
case MOD:
case INC:
case DEC:
case BNOT:
case LNOT:
case LITERAL_true:
case LITERAL_false:
case LITERAL_null:
case LITERAL_new:
case NUM_INT:
case CHAR_LITERAL:
case STRING_LITERAL:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
{
            expr(_t);
            _t=_retTree;
{
              if (_t == null)               _t=ASTNULL;
switch (_t.getType()) {
case IDENT:
{
                  AST tmp142_AST_in=(AST)_t;
                  match(_t,IDENT);
                  _t=_t.getNextSibling();
                  break;
                }
case INDEX_OP:
{
                arrayIndex(_t);
                _t=_retTree;
                break;
              }
case LITERAL_this:
{
              AST tmp143_AST_in=(AST)_t;
              match(_t,LITERAL_this);
              _t=_t.getNextSibling();
              break;
            }
case LITERAL_class:
{
            AST tmp144_AST_in=(AST)_t;
            match(_t,LITERAL_class);
            _t=_t.getNextSibling();
            break;
          }
case LITERAL_new:
{
          AST __t518=_t;
          AST tmp145_AST_in=(AST)_t;
          match(_t,LITERAL_new);
          _t=_t.getFirstChild();
          AST tmp146_AST_in=(AST)_t;
          match(_t,IDENT);
          _t=_t.getNextSibling();
          elist(_t);
          _t=_retTree;
          _t=__t518;
          _t=_t.getNextSibling();
          break;
        }
case LITERAL_super:
{
        AST tmp147_AST_in=(AST)_t;
        match(_t,LITERAL_super);
        _t=_t.getNextSibling();
        break;
      }
default :
{
      throw new NoViableAltException(_t);
    }
}
}
break;
}
case ARRAY_DECLARATOR:
{
AST __t519=_t;
AST tmp148_AST_in=(AST)_t;
match(_t,ARRAY_DECLARATOR);
_t=_t.getFirstChild();
typeSpecArray(_t);
_t=_retTree;
_t=__t519;
_t=_t.getNextSibling();
break;
}
case LITERAL_void:
case LITERAL_boolean:
case LITERAL_byte:
case LITERAL_char:
case LITERAL_short:
case LITERAL_int:
case LITERAL_float:
case LITERAL_long:
case LITERAL_double:
{
builtInType(_t);
_t=_retTree;
{
if (_t == null) _t=ASTNULL;
switch (_t.getType()) {
case LITERAL_class:
{
AST tmp149_AST_in=(AST)_t;
match(_t,LITERAL_class);
_t=_t.getNextSibling();
break;
}
case 3:
{
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
_t=__t515;
_t=_t.getNextSibling();
break;
}
case INDEX_OP:
{
arrayIndex(_t);
_t=_retTree;
break;
}
case METHOD_CALL:
{
AST __t521=_t;
AST tmp150_AST_in=(AST)_t;
match(_t,METHOD_CALL);
_t=_t.getFirstChild();
primaryExpression(_t);
_t=_retTree;
elist(_t);
_t=_retTree;
_t=__t521;
_t=_t.getNextSibling();
break;
}
case TYPECAST:
{
AST __t522=_t;
AST tmp151_AST_in=(AST)_t;
match(_t,TYPECAST);
_t=_t.getFirstChild();
typeSpec(_t);
_t=_retTree;
expr(_t);
_t=_retTree;
_t=__t522;
_t=_t.getNextSibling();
break;
}
case LITERAL_new:
{
newExpression(_t);
_t=_retTree;
break;
}
case NUM_INT:
case CHAR_LITERAL:
case STRING_LITERAL:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
{
constant(_t);
_t=_retTree;
break;
}
case LITERAL_super:
{
AST tmp152_AST_in=(AST)_t;
match(_t,LITERAL_super);
_t=_t.getNextSibling();
break;
}
case LITERAL_true:
{
AST tmp153_AST_in=(AST)_t;
match(_t,LITERAL_true);
_t=_t.getNextSibling();
break;
}
case LITERAL_false:
{
AST tmp154_AST_in=(AST)_t;
match(_t,LITERAL_false);
_t=_t.getNextSibling();
break;
}
case LITERAL_this:
{
AST tmp155_AST_in=(AST)_t;
match(_t,LITERAL_this);
_t=_t.getNextSibling();
break;
}
case LITERAL_null:
{
AST tmp156_AST_in=(AST)_t;
match(_t,LITERAL_null);
_t=_t.getNextSibling();
break;
}
case TYPE:
{
typeSpec(_t);
_t=_retTree;
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
}
