{
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)this.ruleBase.newStatefulSession();
  final Rete rete=ruleBase.getRete();
  ObjectTypeNode objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(List.class),buildContext);
  objectTypeNode.attach();
  MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(Collection.class),buildContext);
  objectTypeNode.attach();
  sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(ArrayList.class),buildContext);
  objectTypeNode.attach();
  sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final DefaultFactHandle h1=new DefaultFactHandle(1,new ArrayList());
  rete.assertObject(h1,new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null),workingMemory);
  h1.setObject(new LinkedList());
  rete.assertObject(h1,new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null),workingMemory);
  final ObjectHashMap map=(ObjectHashMap)workingMemory.getNodeMemory(rete);
  ClassObjectTypeConf conf=(ClassObjectTypeConf)map.get(ArrayList.class);
  assertLength(3,conf.getObjectTypeNodes());
  conf=(ClassObjectTypeConf)map.get(LinkedList.class);
  assertLength(3,conf.getObjectTypeNodes());
}
