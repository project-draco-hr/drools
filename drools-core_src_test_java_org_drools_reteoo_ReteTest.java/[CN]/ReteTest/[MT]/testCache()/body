{
  final ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(1,ruleBase);
  final Rete rete=ruleBase.getRete();
  ObjectTypeNode objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(List.class),rete);
  objectTypeNode.attach();
  MockObjectSink sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(Collection.class),rete);
  objectTypeNode.attach();
  sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  objectTypeNode=new ObjectTypeNode(1,new ClassObjectType(ArrayList.class),rete);
  objectTypeNode.attach();
  sink=new MockObjectSink();
  objectTypeNode.addObjectSink(sink);
  final DefaultFactHandle h1=new DefaultFactHandle(1,new ArrayList());
  rete.assertObject(h1,null,workingMemory);
  h1.setObject(new LinkedList());
  rete.assertObject(h1,null,workingMemory);
  final ObjectHashMap map=(ObjectHashMap)workingMemory.getNodeMemory(rete);
  assertLength(3,(ObjectTypeNode[])map.get(ArrayList.class));
  assertLength(2,(ObjectTypeNode[])map.get(LinkedList.class));
}
