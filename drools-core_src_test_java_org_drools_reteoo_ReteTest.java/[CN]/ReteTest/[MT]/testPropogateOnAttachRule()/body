{
  PropagationContext context=new PropagationContextImpl(PropagationContext.ASSERTION,null,null);
  this.rete=new Rete();
  this.workingMemory=new WorkingMemoryImpl(new RuleBaseImpl(this.rete));
  this.objectTypeNode=this.rete.getOrCreateObjectTypeNode(new ClassObjectType(Object.class));
  this.objectTypeNode.addObjectSink(new MockObjectSink());
  this.stringTypeNode=this.rete.getOrCreateObjectTypeNode(new ClassObjectType(String.class));
  this.stringTypeNode.addObjectSink(new MockObjectSink());
  this.rete.ruleAdded();
  Object object1=new Object();
  String string1="cheese";
  String string2="bread";
  FactHandleImpl handle1=new FactHandleImpl(1);
  FactHandleImpl handle2=new FactHandleImpl(2);
  FactHandleImpl handle3=new FactHandleImpl(3);
  this.workingMemory.putObject(handle1,object1);
  this.workingMemory.putObject(handle2,string1);
  this.workingMemory.putObject(handle3,string2);
  this.rete.assertObject(object1,handle1,context,this.workingMemory);
  this.rete.assertObject(string1,handle2,context,this.workingMemory);
  this.rete.assertObject(string2,handle3,context,this.workingMemory);
  MockObjectSink sink1=(MockObjectSink)this.objectTypeNode.getObjectSinks().get(0);
  assertLength(3,sink1.getAsserted());
  MockObjectSink sink2=(MockObjectSink)this.stringTypeNode.getObjectSinks().get(0);
  assertLength(2,sink2.getAsserted());
  this.stringTypeNode=this.rete.getOrCreateObjectTypeNode(new ClassObjectType(String.class));
  this.stringTypeNode.addObjectSink(new MockObjectSink());
  assertLength(2,this.stringTypeNode.getObjectSinks());
  MockObjectSink sink3=(MockObjectSink)this.stringTypeNode.getObjectSinks().get(1);
  assertLength(0,sink3.getAsserted());
  this.cheeseTypeNode=this.rete.getOrCreateObjectTypeNode(new ClassObjectType(Cheese.class));
  this.cheeseTypeNode.addObjectSink(new MockObjectSink());
  MockObjectSink sink4=(MockObjectSink)this.cheeseTypeNode.getObjectSinks().get(0);
  assertLength(0,sink4.getAsserted());
  this.rete.updateWorkingMemory(this.workingMemory);
  assertLength(3,sink1.getAsserted());
  assertLength(2,sink2.getAsserted());
  assertLength(2,sink3.getAsserted());
  assertLength(0,sink4.getAsserted());
  this.rete.ruleAdded();
  this.rete.updateWorkingMemory(this.workingMemory);
  assertLength(2,sink3.getAsserted());
  assertLength(0,sink4.getAsserted());
}
