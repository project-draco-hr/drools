{
  setupKnowledgeBase();
  assertEquals(2,lian_1.getSinkPropagator().size());
  assertTrue(lian_1.isAssociatedWith(rules.get("r1")));
  assertTrue(lian_1.isAssociatedWith(rules.get("r2")));
  RuleTerminalNode rtn1=(RuleTerminalNode)lian_1.getSinkPropagator().getSinks()[0];
  assertTrue(rtn1.isAssociatedWith(rules.get("r1")));
  RuleTerminalNode rtn2=(RuleTerminalNode)lian_1.getSinkPropagator().getSinks()[1];
  assertTrue(rtn2.isAssociatedWith(rules.get("r2")));
  Map<String,Integer> countingMap=((MethodCountingLeftInputAdapterNode)lian_1).getMethodCountMap();
  assertNotNull(countingMap);
  assertEquals(3,countingMap.get("thisNodeEquals").intValue());
  assertEquals(2,lian_2.getAssociationsSize());
  assertEquals(2,lian_2.getSinkPropagator().size());
  assertTrue(lian_2.isAssociatedWith(rules.get("r3")));
  assertTrue(lian_2.isAssociatedWith(rules.get("r4")));
  rtn1=(RuleTerminalNode)lian_2.getSinkPropagator().getSinks()[0];
  assertTrue(rtn1.isAssociatedWith(rules.get("r3")));
  rtn2=(RuleTerminalNode)lian_2.getSinkPropagator().getSinks()[1];
  assertTrue(rtn2.isAssociatedWith(rules.get("r4")));
  countingMap=((MethodCountingLeftInputAdapterNode)lian_2).getMethodCountMap();
  assertNotNull(countingMap);
  assertEquals(1,countingMap.get("thisNodeEquals").intValue());
  assertNull(countingMap.get("equals"));
}
