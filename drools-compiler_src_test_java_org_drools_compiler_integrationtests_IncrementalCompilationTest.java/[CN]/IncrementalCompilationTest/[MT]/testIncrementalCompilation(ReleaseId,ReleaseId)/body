{
  String drl1="package org.drools.compiler\n" + "global java.util.List list\n" + "rule R0 when then list.add( \"000\" ); end \n"+ ""+ "rule R1 when\n"+ " $s : String() "+ "then\n"+ " list.add( \"a\" + $s );"+ "end\n";
  String drl2="package org.drools.compiler\n" + "global java.util.List list\n" + "rule R2 when\n"+ " $s : String() \n"+ "then\n"+ " list.add( \"b\" + $s );"+ "end\n";
  KieServices ks=KieServices.Factory.get();
  KieFileSystem kfs=ks.newKieFileSystem();
  KieBuilder kieBuilder=ks.newKieBuilder(kfs);
  kfs.generateAndWritePomXML(releaseId1);
  kfs.write("src/main/resources/drl1.drl",drl1);
  kieBuilder.buildAll();
  KieModule kieModule=kieBuilder.getKieModule();
  assertEquals(releaseId1,kieModule.getReleaseId());
  KieContainer kc=ks.newKieContainer(releaseId1);
  KieSession ksession=kc.newKieSession();
  List<String> list=new ArrayList<String>();
  ksession.setGlobal("list",list);
  ksession.insert("Foo");
  ksession.fireAllRules();
  assertEquals(2,list.size());
  assertTrue(list.containsAll(asList("000","aFoo")));
  list.clear();
  kfs.generateAndWritePomXML(releaseId2);
  kfs.write("src/main/resources/drl2.drl",drl2);
  KieBuilderSet kbSet=((InternalKieBuilder)kieBuilder).createFileSet("src/main/resources/drl2.drl");
  IncrementalResults results=kbSet.build();
  assertEquals(0,results.getAddedMessages().size());
  kieModule=kieBuilder.getKieModule();
  assertEquals(releaseId2,kieModule.getReleaseId());
  kc.updateToVersion(releaseId2);
  ksession.insert("Bar");
  ksession.fireAllRules();
  assertEquals(3,list.size());
  assertTrue(list.containsAll(asList("bBar","bFoo","aBar")));
}
