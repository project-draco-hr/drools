{
  String drl1="import " + MyEvent.class.getCanonicalName() + "\n"+ "global java.util.concurrent.atomic.AtomicInteger result\n"+ "declare MyEvent @expires(5m) @role( event ) end\n"+ "rule A when\n"+ "    accumulate( $e : MyEvent() over window:time(10s), $result : count($e) )\n"+ "then"+ "    System.out.println(\"Result-1: \" + $result);\n"+ "    result.set( $result.intValue() );\n"+ "end";
  String drl2="import " + MyEvent.class.getCanonicalName() + "\n"+ "global java.util.concurrent.atomic.AtomicInteger result\n"+ "declare MyEvent @expires(5m) @role( event ) end\n"+ "rule A when\n"+ "    accumulate( $e : MyEvent() over window:time(5s), $result : count($e) )\n"+ "then"+ "    System.out.println(\"Result-2: \" + $result);\n"+ "    result.set( $result.intValue() );\n"+ "end";
  KieServices ks=KieServices.Factory.get();
  KieModuleModel kproj=ks.newKieModuleModel();
  KieBaseModel kieBaseModel1=kproj.newKieBaseModel("KBase1").setDefault(true).setEventProcessingMode(EventProcessingOption.STREAM);
  KieSessionModel ksession1=kieBaseModel1.newKieSessionModel("KSession1").setDefault(true).setType(KieSessionModel.KieSessionType.STATEFUL).setClockType(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
  ReleaseId releaseId1=ks.newReleaseId("org.kie","test-upgrade","1.0.0");
  deployJar(ks,createKJar(ks,kproj,releaseId1,null,drl1));
  KieContainer kc=ks.newKieContainer(releaseId1);
  KieSession ksession=kc.newKieSession();
  PseudoClockScheduler clock=ksession.getSessionClock();
  AtomicInteger result=new AtomicInteger(0);
  ksession.setGlobal("result",result);
  ksession.insert(new MyEvent(1));
  clock.advanceTime(4,TimeUnit.SECONDS);
  ksession.insert(new MyEvent(2));
  clock.advanceTime(4,TimeUnit.SECONDS);
  ksession.insert(new MyEvent(3));
  ksession.fireAllRules();
  assertEquals(3,result.get());
  clock.advanceTime(3,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(2,result.get());
  ReleaseId releaseId2=ks.newReleaseId("org.kie","test-upgrade","1.1.0");
  deployJar(ks,createKJar(ks,kproj,releaseId2,null,drl2));
  kc.updateToVersion(releaseId2);
  ksession.fireAllRules();
  assertEquals(1,result.get());
  ksession.insert(new MyEvent(4));
  ksession.insert(new MyEvent(5));
  ksession.fireAllRules();
  assertEquals(3,result.get());
  clock.advanceTime(3,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(2,result.get());
  clock.advanceTime(3,TimeUnit.SECONDS);
  ksession.fireAllRules();
  assertEquals(0,result.get());
}
