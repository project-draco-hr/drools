{
  String drl1="rule R1 when\n" + "    exists( Integer() )\n" + "then\n"+ "    insertLogical( \"found1\" );"+ "end\n";
  String drl2="package org.drools.compiler\n" + "rule R2 when\n" + "    exists( Integer() )\n"+ "then\n"+ "    insertLogical( \"found2\" );"+ "end\n";
  String drl3="package org.drools.compiler\n" + "rule R3 when\n" + "    exists( Integer() )\n"+ "then\n"+ "    insertLogical( \"found3\");"+ "end\n";
  KieServices ks=KieServices.Factory.get();
  ReleaseId releaseId1=ks.newReleaseId("org.kie","test-upgrade","1.1.1");
  KieModule km=createAndDeployJar(ks,releaseId1,drl1,drl2,drl3);
  KieContainer kc=ks.newKieContainer(km.getReleaseId());
  KieSession ksession=kc.newKieSession();
  ksession.insert(4);
  ksession.fireAllRules();
  assertEquals(3,ksession.getObjects(new ClassObjectFilter(String.class)).size());
  ReleaseId releaseId2=ks.newReleaseId("org.kie","test-upgrade","1.1.2");
  km=createAndDeployJar(ks,releaseId2,drl1,drl2);
  kc.updateToVersion(releaseId2);
  ksession.fireAllRules();
  assertEquals(2,ksession.getObjects(new ClassObjectFilter(String.class)).size());
  ReleaseId releaseId3=ks.newReleaseId("org.kie","test-upgrade","1.1.3");
  km=createAndDeployJar(ks,releaseId3,drl1);
  kc.updateToVersion(releaseId3);
  ksession.fireAllRules();
  assertEquals(1,ksession.getObjects(new ClassObjectFilter(String.class)).size());
  ReleaseId releaseId4=ks.newReleaseId("org.kie","test-upgrade","1.1.4");
  km=createAndDeployJar(ks,releaseId4);
  kc.updateToVersion(releaseId4);
  ksession.fireAllRules();
  assertEquals(0,ksession.getObjects(new ClassObjectFilter(String.class)).size());
}
