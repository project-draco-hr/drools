{
  String drl1="global java.util.List list\n" + "rule R1 when\n" + " $s : String() "+ "then\n"+ " list.add( \"a\" + $s );"+ "end\n";
  String drl2="global java.util.List list\n" + "rule R1 when\n" + " $s : String() "+ "then\n"+ " list.add( \"b\" + $s );"+ "end\n";
  ReleaseId releaseId=KieServices.Factory.get().newReleaseId("org.test","test","1.0.0-SNAPSHOT");
  KieServices ks=KieServices.Factory.get();
  KieModuleModel kproj=ks.newKieModuleModel();
  KieBaseModel kieBaseModel1=kproj.newKieBaseModel("KBase1").addPackage("org.pkg1");
  kieBaseModel1.newKieSessionModel("KSession1");
  KieBaseModel kieBaseModel2=kproj.newKieBaseModel("KBase2").addPackage("org.pkg2").addInclude("KBase1");
  kieBaseModel2.newKieSessionModel("KSession2");
  KieFileSystem kfs=ks.newKieFileSystem().generateAndWritePomXML(releaseId).write("src/main/resources/KBase1/org/pkg1/r1.drl",drl1).writeKModuleXML(kproj.toXML());
  KieBuilder kieBuilder=ks.newKieBuilder(kfs);
  kieBuilder.buildAll();
  assertEquals(0,kieBuilder.getResults().getMessages().size());
  KieContainer kc=ks.newKieContainer(releaseId);
  KieSession ksession=kc.newKieSession("KSession2");
  List<String> list=new ArrayList<String>();
  ksession.setGlobal("list",list);
  ksession.insert("Foo");
  ksession.fireAllRules();
  assertEquals(1,list.size());
  assertEquals("aFoo",list.get(0));
  list.clear();
  kfs.delete("src/main/resources/KBase1/org/pkg1/r1.drl");
  kfs.write("src/main/resources/KBase1/org/pkg1/r2.drl",drl2);
  IncrementalResults results=((InternalKieBuilder)kieBuilder).incrementalBuild();
  assertEquals(0,results.getAddedMessages().size());
  Results updateResults=kc.updateToVersion(releaseId);
  assertEquals(0,updateResults.getMessages().size());
  ksession.insert("Bar");
  ksession.fireAllRules();
  assertEquals(2,list.size());
  assertTrue(list.containsAll(asList("bBar","bFoo")));
}
