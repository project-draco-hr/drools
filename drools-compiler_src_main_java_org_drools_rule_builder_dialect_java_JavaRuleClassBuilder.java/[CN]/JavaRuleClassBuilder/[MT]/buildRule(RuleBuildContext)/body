{
  if (context.getMethods().isEmpty()) {
    return null;
  }
  final String lineSeparator=System.getProperty("line.separator");
  final StringBuffer buffer=new StringBuffer();
  buffer.append("package " + context.getPkg().getName() + ";"+ lineSeparator);
  for (final Iterator it=context.getPkg().getImports().keySet().iterator(); it.hasNext(); ) {
    buffer.append("import " + it.next() + ";");
  }
  for (final Iterator it=context.getPkg().getStaticImports().iterator(); it.hasNext(); ) {
    buffer.append("import static " + it.next() + ";");
  }
  buffer.append(lineSeparator);
  final RuleDescr ruleDescr=context.getRuleDescr();
  buffer.append("public class " + StringUtils.ucFirst(ruleDescr.getClassName()) + " {"+ lineSeparator);
  buffer.append("    private static final long serialVersionUID = 400L;" + lineSeparator);
  for (int i=0, size=context.getMethods().size() - 1; i < size; i++) {
    buffer.append(context.getMethods().get(i) + lineSeparator);
  }
  final String[] lines=buffer.toString().split(lineSeparator,-1);
  ruleDescr.setConsequenceOffset(lines.length);
  buffer.append(context.getMethods().get(context.getMethods().size() - 1) + lineSeparator);
  buffer.append("}");
  return buffer.toString();
}
