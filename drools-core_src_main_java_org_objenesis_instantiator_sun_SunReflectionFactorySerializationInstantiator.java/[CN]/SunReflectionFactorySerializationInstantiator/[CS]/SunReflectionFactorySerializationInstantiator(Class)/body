{
  final Class nonSerializableAncestor=SerializationInstantiatorHelper.getNonSerializableSuperClass(type);
  final ReflectionFactory reflectionFactory=ReflectionFactory.getReflectionFactory();
  Constructor nonSerializableAncestorConstructor;
  try {
    nonSerializableAncestorConstructor=nonSerializableAncestor.getConstructor((Class[])null);
  }
 catch (  final NoSuchMethodException e) {
    throw new ObjenesisException(new NotSerializableException(type + " has no suitable superclass constructor"));
  }
  this.mungedConstructor=reflectionFactory.newConstructorForSerialization(type,nonSerializableAncestorConstructor);
  this.mungedConstructor.setAccessible(true);
}
