{
  for (int i=0, length=workingMemories.length; i < length; i++) {
    WorkingMemoryImpl workingMemory=workingMemories[i];
    TerminalNodeMemory memory=(TerminalNodeMemory)workingMemory.getNodeMemory(this);
    AgendaGroupImpl group=memory.getAgendaGroup();
    Queueable[] elements=group.getQueueable();
    List list=new ArrayList();
    for (int j=1, size=group.size() + 1; j < size; j++) {
      AgendaItem item=(AgendaItem)elements[j];
      if (item.getRule() == this.rule) {
        list.add(item);
      }
    }
    for (Iterator it=list.iterator(); it.hasNext(); ) {
      AgendaItem item=(AgendaItem)it.next();
      if (item.isActivated()) {
        item.remove();
        workingMemory.getAgendaEventSupport().fireActivationCancelled(item);
      }
      PropagationContext propagationContext=new PropagationContextImpl(workingMemory.getNextPropagationIdCounter(),PropagationContext.RULE_REMOVAL,null,null);
      workingMemory.removeLogicalDependencies(item,propagationContext,this.rule);
    }
  }
  tupleSource.remove(this,workingMemories);
}
