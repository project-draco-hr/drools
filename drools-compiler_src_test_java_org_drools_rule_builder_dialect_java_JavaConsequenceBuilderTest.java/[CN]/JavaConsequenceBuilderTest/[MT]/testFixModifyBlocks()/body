{
  String consequence=" System.out.println(\"this is a test\");\n " + " Cheese c1 = $cheese;\n" + " try { \r\n"+ "     modify( c1 ) { setPrice( 10 ), \n"+ "                    setOldPrice( age ) }\n "+ "     Cheese c4 = $cheese;\n"+ "     try { \n"+ "         modify( c4 ) { setPrice( 10 ), setOldPrice( age ) }\n "+ "     } catch (java.lang.Exception e) {\n"+ "         modify( c1 ) { setPrice( 10 ), setOldPrice( age ) }\n "+ "     } finally {\n "+ "         Cheese c3 = $cheese;\n"+ "         modify( c3 ) { setPrice( 10 ), setOldPrice( age ) }\n "+ "    }\n"+ " } catch (java.lang.Exception e) {\n"+ "     Cheese c2 = $cheese;\n"+ "     modify( c2 ) { setPrice( 10 ), setOldPrice( age ) }\n "+ " } finally {\n "+ "     Cheese c3 = $cheese;\n"+ "     modify( c3 ) { setPrice( 10 ), setOldPrice( age ) }\n "+ "}\n"+ " modify( $cheese ) { setPrice( 10 ), setOldPrice( age ) }\n "+ " System.out.println(\"we are done\");\n ";
  setupTest("",new HashMap<String,Object>());
  ruleDescr.setConsequence(consequence);
  JavaExprAnalyzer analyzer=new JavaExprAnalyzer();
  Map<String,Class<?>> declrCls=new HashMap<String,Class<?>>();
  declrCls.put("$cheese",Cheese.class);
  JavaAnalysisResult analysis=(JavaAnalysisResult)analyzer.analyzeBlock((String)ruleDescr.getConsequence(),new BoundIdentifiers(declrCls,new HashMap<String,Class<?>>()));
  BoundIdentifiers bindings=new BoundIdentifiers(new HashMap(),new HashMap());
  bindings.getDeclrClasses().put("$cheese",Cheese.class);
  bindings.getDeclrClasses().put("age",int.class);
  List<JavaBlockDescr> descrs=new ArrayList<JavaBlockDescr>();
  builder.setContainerBlockInputs(context,descrs,analysis.getBlockDescrs(),consequence,bindings,new HashMap(),0);
  String fixed=builder.fixBlockDescr(context,(String)ruleDescr.getConsequence(),descrs,bindings,context.getDeclarationResolver().getDeclarations(context.getRule()));
  String expected=" System.out.println(\"this is a test\");\r\n" + "  Cheese c1 = $cheese;\r\n" + " try { \r\n"+ "     { org.drools.Cheese __obj__ = ( c1 ); org.drools.FactHandle __obj____Handle2__ = drools.getFactHandle(__obj__);__obj__.setPrice( 10 ); \r\n"+ "__obj__.setOldPrice( age ); drools.update( __obj____Handle2__ ); }\r\n"+ "      Cheese c4 = $cheese;\r\n"+ "     try { \r\n"+ "         { org.drools.Cheese __obj__ = ( c4 ); org.drools.FactHandle __obj____Handle2__ = drools.getFactHandle(__obj__);__obj__.setPrice( 10 ); __obj__.setOldPrice( age ); drools.update( __obj____Handle2__ ); }\r\n"+ "      } catch (java.lang.Exception e) {\r\n"+ "         { org.drools.Cheese __obj__ = ( c1 ); org.drools.FactHandle __obj____Handle2__ = drools.getFactHandle(__obj__);__obj__.setPrice( 10 ); __obj__.setOldPrice( age ); drools.update( __obj____Handle2__ ); }\r\n"+ "      } finally {\r\n"+ "          Cheese c3 = $cheese;\r\n"+ "         { org.drools.Cheese __obj__ = ( c3 ); org.drools.FactHandle __obj____Handle2__ = drools.getFactHandle(__obj__);__obj__.setPrice( 10 ); __obj__.setOldPrice( age ); drools.update( __obj____Handle2__ ); }\r\n"+ "     }\r\n"+ " } catch (java.lang.Exception e) {\r\n"+ "     Cheese c2 = $cheese;\r\n"+ "     { org.drools.Cheese __obj__ = ( c2 ); org.drools.FactHandle __obj____Handle2__ = drools.getFactHandle(__obj__);__obj__.setPrice( 10 ); __obj__.setOldPrice( age ); drools.update( __obj____Handle2__ ); }\r\n"+ "  } finally {\r\n"+ "      Cheese c3 = $cheese;\r\n"+ "     { org.drools.Cheese __obj__ = ( c3 ); org.drools.FactHandle __obj____Handle2__ = drools.getFactHandle(__obj__);__obj__.setPrice( 10 ); __obj__.setOldPrice( age ); drools.update( __obj____Handle2__ ); }\r\n"+ " }\r\n"+ " { $cheese.setPrice( 10 ); $cheese.setOldPrice( age ); drools.update( $cheese__Handle__ ); }\r\n"+ "  System.out.println(\"we are done\");\r\n"+ " \r\n"+ "";
  assertNotNull(context.getErrors().toString(),fixed);
  assertEqualsIgnoreSpaces(expected,fixed);
}
