{
  String consequence=" System.out.println(\"this is a test\");\n " + " modify( $cheese ) { setPrice( 10 ), setAge( age ) }\n " + " System.out.println(\"we are done\");\n ";
  setupTest(consequence);
  try {
    JavaExprAnalyzer analyzer=new JavaExprAnalyzer();
    JavaAnalysisResult analysis=(JavaAnalysisResult)analyzer.analyzeBlock((String)ruleDescr.getConsequence(),new Map[]{});
    String fixed=builder.fixBlockDescr(context,analysis,(String)ruleDescr.getConsequence());
    String expected=" System.out.println(\"this is a test\");\n" + "{ org.drools.Cheese __obj__ = (org.drools.Cheese) ( $cheese );\n" + "modifyRetract( __obj__ );\n"+ "__obj__.setPrice( 10 );\n"+ "__obj__.setAge( age );\n"+ "modifyInsert( __obj__ );}\n"+ "System.out.println(\"we are done\");\n";
    assertNotNull(context.getErrors().toString(),fixed);
    assertEqualsIgnoreSpaces(expected,fixed);
  }
 catch (  RecognitionException e) {
    e.printStackTrace();
  }
}
