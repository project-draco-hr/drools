{
  String consequence=" modify( $cheese ) { setPrice( 10 ), setOldPrice( age ) }\n " + " throw new java.lang.RuntimeException(\"xxx\");\n " + " Cheese c1 = $cheese;\n"+ " modify( c1 ) { setPrice( 10 ), setOldPrice( age ) }\n ";
  setupTest("",new HashMap<String,Object>());
  try {
    ruleDescr.setConsequence(consequence);
    JavaExprAnalyzer analyzer=new JavaExprAnalyzer();
    Map<String,Class<?>> declrCls=new HashMap<String,Class<?>>();
    declrCls.put("$cheese",Cheese.class);
    JavaAnalysisResult analysis=(JavaAnalysisResult)analyzer.analyzeBlock((String)ruleDescr.getConsequence(),new BoundIdentifiers(declrCls,new HashMap<String,Class<?>>()));
    BoundIdentifiers bindings=new BoundIdentifiers(new HashMap(),new HashMap());
    bindings.getDeclrClasses().put("$cheese",Cheese.class);
    bindings.getDeclrClasses().put("age",int.class);
    List<JavaBlockDescr> descrs=new ArrayList<JavaBlockDescr>();
    setContainerBlockInputs(context,descrs,analysis.getBlockDescrs(),consequence,bindings,new HashMap(),0);
    context.getPackageBuilder().getTypeDeclaration(Cheese.class).setPropertyReactive(true);
    String fixed=fixBlockDescr(context,analysis,context.getDeclarationResolver().getDeclarations(context.getRule()));
    String expected=" { $cheese.setPrice( 10 ); $cheese.setOldPrice( age ); drools.update( $cheese__Handle__, 12L ); }\r\n" + "  throw new java.lang.RuntimeException(\"xxx\");\r\n" + "  Cheese c1 = $cheese;\r\n"+ " { org.kie.Cheese __obj__ = ( c1 ); org.kie.FactHandle __obj____Handle2__ = drools.getFactHandle(__obj__);__obj__.setPrice( 10 ); __obj__.setOldPrice( age ); drools.update( __obj____Handle2__, 9223372036854775807L ); }\r\n"+ " \r\n"+ "";
    assertNotNull(context.getErrors().toString(),fixed);
    assertEqualsIgnoreSpaces(expected,fixed);
  }
 catch (  RecognitionException e) {
    e.printStackTrace();
  }
}
