{
  KieServices ks=KieServices.Factory.get();
  String group="org.kie.test";
  String artifact="test-module";
  String version="1.0.0-SNAPSHOT";
  ReleaseId releaseId=ks.newReleaseId(group,artifact,version);
  String prefix=new File(".").getAbsolutePath().contains("kie-ci") ? "" : "kie-ci/";
  File kjar=new File(prefix + "src/test/resources/kjar/kjar-module-before.jar");
  File pom=new File(prefix + "src/test/resources/kjar/pom-kjar.xml");
  MavenRepository repository=getMavenRepository();
  repository.installArtifact(releaseId,kjar,pom);
  KieContainer kContainer=ks.newKieContainer(releaseId);
  KieBase kbase=kContainer.getKieBase();
  assertNotNull(kbase);
  Collection<KiePackage> packages=kbase.getKiePackages();
  assertNotNull(packages);
  assertEquals(1,packages.size());
  Collection<Rule> rules=packages.iterator().next().getRules();
  assertEquals(2,rules.size());
  ks.getRepository().removeKieModule(releaseId);
  File kjar1=new File(prefix + "src/test/resources/kjar/kjar-module-after.jar");
  File pom1=new File(prefix + "src/test/resources/kjar/pom-kjar.xml");
  repository.installArtifact(releaseId,kjar1,pom1);
  KieContainer kContainer2=ks.newKieContainer(releaseId);
  KieBase kbase2=kContainer2.getKieBase();
  assertNotNull(kbase2);
  Collection<KiePackage> packages2=kbase2.getKiePackages();
  assertNotNull(packages2);
  assertEquals(1,packages2.size());
  Collection<Rule> rules2=packages2.iterator().next().getRules();
  assertEquals(4,rules2.size());
  ks.getRepository().removeKieModule(releaseId);
}
