{
  final Configuration config=this.xmlPackageReader.endConfiguration();
  final String name=config.getAttribute("name");
  if (name == null || name.trim().equals("")) {
    throw new SAXParseException("<function> requires a 'name' attribute",this.xmlPackageReader.getLocator());
  }
  final String returnType=config.getAttribute("return-type");
  if (returnType == null || returnType.trim().equals("")) {
    throw new SAXParseException("<function> requires a 'return-type' attribute",this.xmlPackageReader.getLocator());
  }
  final FunctionDescr functionDescr=new FunctionDescr(name,returnType);
  final Configuration[] parameters=config.getChildren("parameter");
  for (int i=0, length=parameters.length; i < length; i++) {
    final String identifier=parameters[i].getAttribute("identifier");
    if (name == null || identifier.trim().equals("")) {
      throw new SAXParseException("function's <parameter> requires an 'identifier' attribute",this.xmlPackageReader.getLocator());
    }
    final String type=parameters[i].getText();
    if (type == null || type.trim().equals("")) {
      throw new SAXParseException("function's <parameter> must specify a 'type'",this.xmlPackageReader.getLocator());
    }
    functionDescr.addParameter(type,identifier);
  }
  final Configuration body=config.getChild("body");
  if (body == null) {
    throw new SAXParseException("function must have a <body>",this.xmlPackageReader.getLocator());
  }
  functionDescr.setText(body.getText());
  final PackageDescr packageDescr=this.xmlPackageReader.getPackageDescr();
  packageDescr.addFunction(functionDescr);
  return functionDescr;
}
