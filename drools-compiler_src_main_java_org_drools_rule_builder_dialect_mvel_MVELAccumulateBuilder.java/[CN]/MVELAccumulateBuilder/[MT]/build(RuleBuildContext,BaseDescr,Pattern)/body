{
  boolean typesafe=context.isTypesafe();
  try {
    final AccumulateDescr accumDescr=(AccumulateDescr)descr;
    if (!accumDescr.hasValidInput()) {
      return null;
    }
    final RuleConditionBuilder builder=(RuleConditionBuilder)context.getDialect().getBuilder(accumDescr.getInput().getClass());
    final RuleConditionElement source=builder.build(context,accumDescr.getInput());
    if (source == null) {
      return null;
    }
    MVELDialect dialect=(MVELDialect)context.getDialect();
    Map<String,Declaration> decls=context.getDeclarationResolver().getDeclarations(context.getRule());
    Map<String,Declaration> sourceOuterDeclr=source.getOuterDeclarations();
    Map<String,Declaration> mergedDecl=new HashMap(decls);
    mergedDecl.putAll(sourceOuterDeclr);
    Map<String,Class<?>> declarationClasses=context.getDeclarationResolver().getDeclarationClasses(decls);
    declarationClasses.putAll(context.getDeclarationResolver().getDeclarationClasses(sourceOuterDeclr));
    BoundIdentifiers boundIds=new BoundIdentifiers(declarationClasses,context.getPackageBuilder().getGlobals());
    boundIds.setDeclarations(mergedDecl);
    Accumulator[] accumulators=null;
    final boolean readLocalsFromTuple=PackageBuilderUtil.isReadLocalsFromTuple(accumDescr,source);
    if (accumDescr.isExternalFunction()) {
      accumulators=buildExternalFunctions(context,accumDescr,dialect,decls,sourceOuterDeclr,boundIds,readLocalsFromTuple);
    }
 else {
      accumulators=buildCustomAccumulate(context,accumDescr,source,dialect,decls,sourceOuterDeclr,boundIds,readLocalsFromTuple);
    }
    final Accumulate accumulate=new Accumulate(source,null,accumulators,accumDescr.isMultiFunction());
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
    int index=0;
    for (    Accumulator accumulator : accumulators) {
      data.addCompileable(accumulate.new Wirer(index++),(MVELCompileable)accumulator);
      ((MVELCompileable)accumulator).compile(data);
    }
    return accumulate;
  }
 catch (  Exception e) {
    copyErrorLocation(e,descr);
    context.addError(new DescrBuildError(context.getParentDescr(),descr,e,"Unable to build expression for 'accumulate' : " + e.getMessage()));
    return null;
  }
 finally {
    context.setTypesafe(typesafe);
  }
}
