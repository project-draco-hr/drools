{
  LeftTupleMemory ltm=bm.getLeftTupleMemory();
  RightTupleMemory rtm=bm.getRightTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=existsNode.getRawConstraints();
  boolean leftUpdateOptimizationAllowed=existsNode.isLeftUpdateOptimizationAllowed();
  for (LeftTuple leftTuple=srcLeftTuples.getUpdateFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    FastIterator rightIt=existsNode.getRightIterator(rtm);
    RightTuple firstRightTuple=existsNode.getFirstRightTuple(leftTuple,rtm,null,rightIt);
    RightTuple blocker=leftTuple.getBlocker();
    if (blocker == null) {
      if (leftTuple.getMemory() != null) {
        ltm.remove(leftTuple);
      }
    }
 else {
      if (rtm.isIndexed() && !rightIt.isFullIterator()) {
        if (firstRightTuple == null || firstRightTuple.getMemory() != blocker.getMemory()) {
          blocker.removeBlocked(leftTuple);
          blocker=null;
        }
      }
    }
    constraints.updateFromTuple(contextEntry,wm,leftTuple);
    if (!leftUpdateOptimizationAllowed && blocker != null) {
      blocker.removeBlocked(leftTuple);
      blocker=null;
    }
    if (blocker == null || !constraints.isAllowedCachedLeft(contextEntry,blocker.getFactHandle())) {
      if (blocker != null) {
        blocker.removeBlocked(leftTuple);
      }
      for (RightTuple newBlocker=firstRightTuple; newBlocker != null; newBlocker=(RightTuple)rightIt.next(newBlocker)) {
        if (constraints.isAllowedCachedLeft(contextEntry,newBlocker.getFactHandle())) {
          leftTuple.setBlocker(newBlocker);
          newBlocker.addBlocked(leftTuple);
          break;
        }
      }
    }
    if (leftTuple.getBlocker() == null) {
      ltm.add(leftTuple);
      if (leftTuple.getFirstChild() != null) {
        RuleNetworkEvaluator.deleteLeftChild(leftTuple.getFirstChild(),trgLeftTuples,stagedLeftTuples);
      }
    }
 else     if (leftTuple.getFirstChild() == null) {
      trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,sink,leftTuple.getBlocker().getPropagationContext(),true));
    }
 else {
      LeftTuple childLeftTuple=leftTuple.getFirstChild();
      while (childLeftTuple != null) {
        childLeftTuple.setPropagationContext(leftTuple.getBlocker().getPropagationContext());
        updateChildLeftTuple(childLeftTuple,stagedLeftTuples,trgLeftTuples);
        childLeftTuple.reAddRight();
        childLeftTuple=childLeftTuple.getLeftParentNext();
      }
    }
    leftTuple.clearStaged();
    leftTuple=next;
  }
  constraints.resetTuple(contextEntry);
}
