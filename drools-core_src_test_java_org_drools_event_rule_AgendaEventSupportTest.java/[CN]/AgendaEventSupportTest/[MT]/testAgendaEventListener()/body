{
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  final Package pkg=new Package("org.drools.test");
  final Rule rule=new Rule("test1");
  rule.setAgendaGroup("test group");
  final ClassObjectType cheeseObjectType=new ClassObjectType(Cheese.class);
  final Pattern pattern=new Pattern(0,cheeseObjectType);
  pkg.setClassFieldAccessorCache(new ClassFieldAccessorCache(Thread.currentThread().getContextClassLoader()));
  pkg.getClassFieldAccessorStore().setEagerWire(true);
  final ClassFieldReader extractor=pkg.getClassFieldAccessorStore().getReader(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue field=FieldFactory.getInstance().getFieldValue("cheddar");
  final MvelConstraint constraint=new MvelConstraintTestUtil("type == \"cheddar\"",field,extractor);
  pattern.addConstraint(constraint);
  rule.addPattern(pattern);
  rule.setConsequence(new Consequence(){
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final org.drools.WorkingMemory workingMemory) throws Exception {
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return null;
    }
  }
);
  pkg.addRule(rule);
  List<KnowledgePackage> pkgs=new ArrayList<KnowledgePackage>();
  pkgs.add(new KnowledgePackageImp(pkg));
  kbase.addKnowledgePackages(pkgs);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  final List agendaList=new ArrayList();
  final AgendaEventListener agendaEventListener=new AgendaEventListener(){
    public void activationCancelled(    MatchCancelledEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void activationCreated(    MatchCreatedEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void afterActivationFired(    AfterMatchFiredEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void agendaGroupPopped(    AgendaGroupPoppedEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void agendaGroupPushed(    AgendaGroupPushedEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void beforeActivationFired(    BeforeMatchFiredEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void beforeRuleFlowGroupActivated(    RuleFlowGroupActivatedEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void afterRuleFlowGroupActivated(    RuleFlowGroupActivatedEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void beforeRuleFlowGroupDeactivated(    RuleFlowGroupDeactivatedEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
    public void afterRuleFlowGroupDeactivated(    RuleFlowGroupDeactivatedEvent event){
      assertNotNull(event.getKnowledgeRuntime());
      agendaList.add(event);
    }
  }
;
  ksession.addEventListener(agendaEventListener);
  assertEquals(1,ksession.getAgendaEventListeners().size());
  final Cheese cheddar=new Cheese("cheddar",15);
  FactHandle cheddarHandle=ksession.insert(cheddar);
  assertEquals(1,agendaList.size());
  MatchCreatedEvent createdEvent=(MatchCreatedEvent)agendaList.get(0);
  assertSame(cheddarHandle,createdEvent.getMatch().getFactHandles().toArray()[0]);
  ksession.getAgenda().clear();
  MatchCancelledEvent cancelledEvent=(MatchCancelledEvent)agendaList.get(1);
  assertEquals(MatchCancelledCause.CLEAR,cancelledEvent.getCause());
  agendaList.clear();
  cheddar.setPrice(14);
  ksession.update(cheddarHandle,cheddar);
  assertEquals(1,agendaList.size());
  createdEvent=(MatchCreatedEvent)agendaList.get(0);
  assertSame(cheddarHandle,createdEvent.getMatch().getFactHandles().toArray()[0]);
  agendaList.clear();
  cheddar.setPrice(14);
  ksession.update(cheddarHandle,cheddar);
  assertEquals(0,agendaList.size());
  ksession.retract(cheddarHandle);
  assertEquals(1,agendaList.size());
  cancelledEvent=(MatchCancelledEvent)agendaList.get(0);
  assertNull(((InternalFactHandle)cancelledEvent.getMatch().getFactHandles().toArray()[0]).getObject());
  cheddarHandle=ksession.insert(cheddar);
  agendaList.clear();
  ksession.getAgenda().getAgendaGroup("test group").setFocus();
  assertEquals(1,agendaList.size());
  final AgendaGroupPushedEvent pushedEvent=(AgendaGroupPushedEvent)agendaList.get(0);
  assertEquals("test group",pushedEvent.getAgendaGroup().getName());
  agendaList.clear();
  ksession.fireAllRules();
  assertEquals(3,agendaList.size());
  final BeforeMatchFiredEvent beforeEvent=(BeforeMatchFiredEvent)agendaList.get(0);
  assertSame(cheddarHandle,beforeEvent.getMatch().getFactHandles().toArray()[0]);
  final AfterMatchFiredEvent afterEvent=(AfterMatchFiredEvent)agendaList.get(1);
  assertSame(cheddarHandle,afterEvent.getMatch().getFactHandles().toArray()[0]);
  final AgendaGroupPoppedEvent poppedEvent=(AgendaGroupPoppedEvent)agendaList.get(2);
  assertEquals("test group",poppedEvent.getAgendaGroup().getName());
}
