{
  if (this.hashedFieldIndexes != null) {
    if (useHash && this.hashedSinkMap != null) {
      final Object object=handle.getObject();
      for (FieldIndex fieldIndex=(FieldIndex)this.hashedFieldIndexes.getFirst(); fieldIndex != null && fieldIndex.isHashed(); fieldIndex=(FieldIndex)fieldIndex.getNext()) {
        final int index=fieldIndex.getIndex();
        final FieldExtractor extractor=fieldIndex.getFieldExtactor();
        this.hashKey.setIndex(index);
        this.hashKey.setValue(extractor.getValue(object));
        final ObjectSink sink=(ObjectSink)this.hashedSinkMap.get(this.hashKey);
        if (sink != null) {
          sink.retractObject(handle,context,workingMemory);
        }
      }
    }
 else     if (this.hashedSinkMap != null) {
      final Iterator it=this.hashedSinkMap.iterator();
      for (ObjectEntry entry=(ObjectEntry)it.next(); entry != null; entry=(ObjectEntry)it.next()) {
        final ObjectSink sink=(ObjectSink)entry.getValue();
        sink.retractObject(handle,context,workingMemory);
      }
    }
  }
  if (this.hashableSinks != null) {
    for (ObjectSinkNode sink=this.hashableSinks.getFirst(); sink != null; sink=sink.getNextObjectSinkNode()) {
      sink.retractObject(handle,context,workingMemory);
    }
  }
  if (this.otherSinks != null) {
    for (ObjectSinkNode sink=this.otherSinks.getFirst(); sink != null; sink=sink.getNextObjectSinkNode()) {
      sink.retractObject(handle,context,workingMemory);
    }
  }
}
