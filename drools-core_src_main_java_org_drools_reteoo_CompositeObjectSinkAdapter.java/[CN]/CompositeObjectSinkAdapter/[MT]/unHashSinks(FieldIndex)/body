{
  final int index=fieldIndex.getIndex();
  final List sinks=new ArrayList();
  final Iterator mapIt=this.hashedSinkMap.iterator();
  for (ObjectHashMap.ObjectEntry e=(ObjectHashMap.ObjectEntry)mapIt.next(); e != null; ) {
    sinks.add(e.getValue());
    e=(ObjectHashMap.ObjectEntry)mapIt.next();
  }
  for (final java.util.Iterator iter=sinks.iterator(); iter.hasNext(); ) {
    final AlphaNode sink=(AlphaNode)iter.next();
    final AlphaNode alphaNode=sink;
    final AlphaNodeFieldConstraint fieldConstraint=alphaNode.getConstraint();
    final LiteralConstraint literalConstraint=(LiteralConstraint)fieldConstraint;
    final Evaluator evaluator=literalConstraint.getEvaluator();
    if (evaluator.getOperator() == Operator.EQUAL && index == literalConstraint.getFieldExtractor().getIndex()) {
      final FieldValue value=literalConstraint.getField();
      if (this.hashableSinks == null) {
        this.hashableSinks=new ObjectSinkNodeList();
      }
      this.hashableSinks.add(sink);
      this.hashedSinkMap.remove(new HashKey(index,value));
    }
    ;
  }
  if (this.hashedSinkMap.isEmpty()) {
    this.hashedSinkMap=null;
  }
  fieldIndex.setHashed(false);
}
