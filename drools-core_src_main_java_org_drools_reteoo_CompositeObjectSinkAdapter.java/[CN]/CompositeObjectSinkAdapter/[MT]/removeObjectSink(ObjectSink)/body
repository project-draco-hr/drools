{
  if (sink.getType() == NodeTypeEnums.AlphaNode) {
    final AlphaNode alphaNode=(AlphaNode)sink;
    final AlphaNodeFieldConstraint fieldConstraint=alphaNode.getConstraint();
    if (fieldConstraint instanceof IndexableConstraint) {
      final IndexableConstraint indexableConstraint=(IndexableConstraint)fieldConstraint;
      final FieldValue value=indexableConstraint.getField();
      if (indexableConstraint.isIndexable(NodeTypeEnums.AlphaNode) && indexableConstraint.getField() != null && indexableConstraint.getFieldExtractor().getValueType() != ValueType.OBJECT_TYPE && !(indexableConstraint.getFieldExtractor() instanceof MVELClassFieldReader)) {
        final InternalReadAccessor fieldAccessor=indexableConstraint.getFieldExtractor();
        final int index=fieldAccessor.getIndex();
        final FieldIndex fieldIndex=unregisterFieldIndex(index);
        if (fieldIndex.isHashed()) {
          HashKey hashKey=new HashKey(index,value,fieldAccessor);
          this.hashedSinkMap.remove(hashKey);
          if (fieldIndex.getCount() <= this.alphaNodeHashingThreshold - 1) {
            unHashSinks(fieldIndex);
          }
        }
 else {
          this.hashableSinks.remove(alphaNode);
        }
        if (this.hashableSinks != null && this.hashableSinks.isEmpty()) {
          this.hashableSinks=null;
        }
        return;
      }
    }
  }
  this.otherSinks.remove((ObjectSinkNode)sink);
  if (this.otherSinks.isEmpty()) {
    this.otherSinks=null;
  }
}
