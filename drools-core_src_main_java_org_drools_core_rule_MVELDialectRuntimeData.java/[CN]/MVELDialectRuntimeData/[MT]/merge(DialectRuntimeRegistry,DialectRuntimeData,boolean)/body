{
  MVELDialectRuntimeData other=(MVELDialectRuntimeData)newData;
  for (  Entry<String,Object> entry : other.imports.entrySet()) {
    if (entry.getValue() instanceof Class) {
      if (!this.imports.containsKey(entry.getKey())) {
        this.imports.put(entry.getKey(),((Class)entry.getValue()).getName());
      }
    }
 else     if (entry.getValue() instanceof Method) {
      this.imports.put(entry.getKey(),"m:" + ((Method)entry.getValue()).getDeclaringClass().getName());
    }
 else {
      this.imports.put(entry.getKey(),entry.getValue());
    }
  }
  this.packageImports.addAll(other.packageImports);
  for (  Entry<Wireable,List<MVELCompileable>> entry : other.invokerLookups.entrySet()) {
    invokerLookups.put(entry.getKey(),entry.getValue());
    if (this.wireList == Collections.<Wireable>emptyList()) {
      this.wireList=new ArrayList<Wireable>();
    }
    wireList.add(entry.getKey());
  }
  this.mvelReaders=new HashSet<MVELCompileable>();
  this.mvelReaders.addAll(other.mvelReaders);
}
