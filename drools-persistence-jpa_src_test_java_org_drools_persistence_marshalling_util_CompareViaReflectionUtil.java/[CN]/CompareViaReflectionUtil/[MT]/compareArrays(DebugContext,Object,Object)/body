{
  Object classTypeValue=arrClassMap.get(objA.getClass());
  int classType=-1;
  if (classTypeValue != null) {
    classType=(Integer)classTypeValue;
  }
 else   if (objA.getClass().isArray()) {
    classType=OBJECT;
  }
 else   if (classTypeValue == null) {
    classType=NULL;
  }
  boolean same=false;
switch (classType) {
case BYTE:
    same=Arrays.equals((byte[])objB,(byte[])objA);
  break;
case SHORT:
same=Arrays.equals((short[])objB,(short[])objA);
break;
case INT:
same=Arrays.equals((int[])objB,(int[])objA);
break;
case LONG:
same=Arrays.equals((long[])objB,(long[])objA);
break;
case FLOAT:
same=Arrays.equals((float[])objB,(float[])objA);
break;
case DOUBLE:
same=Arrays.equals((double[])objB,(double[])objA);
break;
case BOOLEAN:
same=Arrays.equals((boolean[])objB,(boolean[])objA);
break;
case CHAR:
same=Arrays.equals((char[])objB,(char[])objA);
break;
case OBJECT:
int lengthA=Array.getLength(objA);
int lengthB=Array.getLength(objB);
if (lengthA != lengthB) {
same=false;
}
 else if (lengthA == 0) {
same=true;
}
 else {
same=true;
for (int i=0; same && i < lengthA; ++i) {
DebugContext subContext=context.clone();
subContext.level=context.level + 1;
subContext.name=context.name + ": (" + i+ ") ";
same=compareInstances(subContext,Array.get(objA,i),Array.get(objB,i));
}
}
break;
case NULL:
same=objA == objB;
break;
default :
fail("Unable to determine class of array [" + classType + "]");
}
return same;
}
