{
  String str="package BROKEN_TEST;\n" + "import " + Holder.class.getCanonicalName() + ";\n"+ "rule \"_12\"\n"+ "    \n"+ "    salience 3\n"+ "    activation-group \"BROKEN\"\n"+ "    when\n"+ "        $a : Holder(value in (0))\n"+ "    then\n"+ "        System.out.println(\"setting 0\");\n"+ "        $a.setOutcome(\"setting 0\");\n"+ "end\n"+ "\n"+ "rule \"_13\"\n"+ "    \n"+ "    salience 2\n"+ "    activation-group \"BROKEN\"\n"+ "    when\n"+ "        $a : Holder(value in (1))\n"+ "    then\n"+ "        System.out.println(\"setting 1\");\n"+ "        $a.setOutcome(\"setting 1\");\n"+ "end\n"+ "\n"+ "rule \"_22\"\n"+ "    \n"+ "    salience 1\n"+ "    activation-group \"BROKEN\"\n"+ "    when\n"+ "        $a : Holder(value == null)\n"+ "    then\n"+ "        System.out.println(\"setting null\");\n"+ "        $a.setOutcome(\"setting null\");\n"+ "end\n"+ "\n"+ "";
  KieBase kbase=loadKnowledgeBaseFromString(str);
  KieSession ksession=kbase.newKieSession();
  Holder inrec=new Holder(1);
  System.out.println("Holds: " + inrec.getValue());
  ksession.insert(inrec);
  ksession.fireAllRules();
  Assert.assertEquals(1,ksession.getFactHandles().size());
  Assert.assertEquals("setting 1",inrec.getOutcome());
  ksession.dispose();
  ksession=kbase.newKieSession();
  inrec=new Holder(null);
  System.out.println("Holds: " + inrec.getValue());
  ksession.insert(inrec);
  ksession.fireAllRules();
  Assert.assertEquals(1,ksession.getFactHandles().size());
  Assert.assertEquals("setting null",inrec.getOutcome());
  ksession.dispose();
  ksession=kbase.newKieSession();
  inrec=new Holder(0);
  System.out.println("Holds: " + inrec.getValue());
  ksession.insert(inrec);
  ksession.fireAllRules();
  Assert.assertEquals(1,ksession.getFactHandles().size());
  Assert.assertEquals("setting 0",inrec.getOutcome());
}
