{
  KieBase kbase=loadKnowledgeBase("test_LockOnActiveWithModify.drl");
  KieSession ksession=kbase.newKieSession();
  final int size=3;
  Cell[][] cells=new Cell[size][];
  FactHandle[][] handles=new FactHandle[size][];
  for (int row=0; row < size; row++) {
    cells[row]=new Cell[size];
    handles[row]=new FactHandle[size];
    for (int col=0; col < size; col++) {
      cells[row][col]=new Cell(Cell.DEAD,row,col);
      handles[row][col]=(FactHandle)ksession.insert(cells[row][col]);
      if (row >= 1 && col >= 1) {
        ksession.insert(new Neighbor(cells[row - 1][col - 1],cells[row][col]));
        ksession.insert(new Neighbor(cells[row][col],cells[row - 1][col - 1]));
      }
      if (row >= 1) {
        ksession.insert(new Neighbor(cells[row - 1][col],cells[row][col]));
        ksession.insert(new Neighbor(cells[row][col],cells[row - 1][col]));
      }
      if (row >= 1 && col < (size - 1)) {
        ksession.insert(new Neighbor(cells[row - 1][col + 1],cells[row][col]));
        ksession.insert(new Neighbor(cells[row][col],cells[row - 1][col + 1]));
      }
      if (col >= 1) {
        ksession.insert(new Neighbor(cells[row][col - 1],cells[row][col]));
        ksession.insert(new Neighbor(cells[row][col],cells[row][col - 1]));
      }
    }
  }
  ksession.getAgenda().getAgendaGroup("calculate").clear();
  int fired=ksession.fireAllRules(100);
  assertEquals(0,fired);
  ksession.getAgenda().getAgendaGroup("calculate").setFocus();
  fired=ksession.fireAllRules(100);
  assertEquals(0,fired);
  assertEquals("MAIN",((InternalAgenda)ksession.getAgenda()).getFocusName());
  cells[0][0].setState(Cell.LIVE);
  ksession.update(handles[0][0],cells[0][0]);
  ksession.getAgenda().getAgendaGroup("birth").setFocus();
  ksession.getAgenda().getAgendaGroup("calculate").setFocus();
  fired=ksession.fireAllRules(100);
  int[][] expected=new int[][]{{0,1,0},{1,1,0},{0,0,0}};
  assertEqualsMatrix(size,cells,expected);
  assertEquals("MAIN",((InternalAgenda)ksession.getAgenda()).getFocusName());
  cells[1][1].setState(Cell.LIVE);
  ksession.update(handles[1][1],cells[1][1]);
  ksession.getAgenda().getAgendaGroup("calculate").setFocus();
  ksession.fireAllRules(100);
  expected=new int[][]{{1,2,1},{2,1,1},{1,1,1}};
  assertEqualsMatrix(size,cells,expected);
  assertEquals("MAIN",((InternalAgenda)ksession.getAgenda()).getFocusName());
  ksession.getAgenda().getAgendaGroup("birth").setFocus();
  ksession.fireAllRules(100);
  expected=new int[][]{{1,2,1},{2,1,1},{1,1,1}};
  assertEqualsMatrix(size,cells,expected);
  assertEquals("MAIN",((InternalAgenda)ksession.getAgenda()).getFocusName());
  System.out.println("--------");
  ksession.getAgenda().getAgendaGroup("calculate").setFocus();
  ksession.fireAllRules(100);
  expected=new int[][]{{3,3,2},{3,3,2},{2,2,1}};
  assertEqualsMatrix(size,cells,expected);
  assertEquals("MAIN",((InternalAgenda)ksession.getAgenda()).getFocusName());
  System.out.println("--------");
  cells[0][0].setState(Cell.DEAD);
  ksession.update(handles[0][0],cells[0][0]);
  ksession.getAgenda().getAgendaGroup("calculate").setFocus();
  ksession.fireAllRules(100);
  expected=new int[][]{{3,2,2},{2,2,2},{2,2,1}};
  assertEqualsMatrix(size,cells,expected);
  assertEquals("MAIN",((InternalAgenda)ksession.getAgenda()).getFocusName());
}
