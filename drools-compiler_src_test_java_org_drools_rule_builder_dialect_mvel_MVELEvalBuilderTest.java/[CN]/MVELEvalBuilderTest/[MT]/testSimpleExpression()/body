{
  final Package pkg=new Package("pkg1");
  final RuleDescr ruleDescr=new RuleDescr("rule 1");
  DialectRegistry registry=new DialectRegistry();
  registry.addDialect("default",new MVELDialect(new PackageBuilder(pkg)));
  final InstrumentedBuildContent context=new InstrumentedBuildContent(pkg,ruleDescr,registry);
  final InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final FieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"price");
  final Pattern pattern=new Pattern(0,new ClassObjectType(int.class));
  final Declaration declaration=new Declaration("a",extractor,pattern);
  final Map map=new HashMap();
  map.put("a",declaration);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  final EvalDescr evalDescr=new EvalDescr();
  evalDescr.setContent("a == 10");
  final MVELEvalBuilder builder=new MVELEvalBuilder();
  final EvalCondition eval=(EvalCondition)builder.build(context,evalDescr);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final WorkingMemory wm=ruleBase.newStatefulSession();
  final Cheese cheddar=new Cheese("cheddar",10);
  final InternalFactHandle f0=(InternalFactHandle)wm.assertObject(cheddar);
  final ReteTuple tuple=new ReteTuple(f0);
  assertTrue(eval.isAllowed(tuple,wm));
  cheddar.setPrice(9);
  wm.modifyObject(f0,cheddar);
  assertFalse(eval.isAllowed(tuple,wm));
}
