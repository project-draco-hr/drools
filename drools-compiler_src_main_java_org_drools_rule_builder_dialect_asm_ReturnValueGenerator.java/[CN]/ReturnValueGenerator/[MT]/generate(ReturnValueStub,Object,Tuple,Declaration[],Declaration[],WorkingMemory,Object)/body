{
  final LeftTuple leftTuple=(LeftTuple)tuple;
  final String[] previousDeclarationTypes=stub.getDeclarationTypes();
  final String[] localDeclarationTypes=stub.getLocalDeclarationTypes();
  final String[] globals=stub.getGlobals();
  final String[] globalTypes=stub.getGlobalTypes();
  final List<InvokerGenerator.DeclarationMatcher> declarationMatchers=matchDeclarationsToTuple(previousDeclarationTypes,previousDeclarations,leftTuple);
  final ClassGenerator generator=createInvokerClassGenerator(stub,workingMemory).setInterfaces(ReturnValueExpression.class,CompiledInvoker.class);
  generator.addMethod(ACC_PUBLIC,"createContext",generator.methodDescr(Object.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      mv.visitInsn(ACONST_NULL);
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"replaceDeclaration",generator.methodDescr(null,Declaration.class,Declaration.class)).addMethod(ACC_PUBLIC,"evaluate",generator.methodDescr(FieldValue.class,Object.class,Tuple.class,Declaration[].class,Declaration[].class,WorkingMemory.class,Object.class),new String[]{"java/lang/Exception"},new InvokerGenerator.EvaluateMethod(){
    public void body(    MethodVisitor mv){
      offset=9;
      int[] previousDeclarationsParamsPos=new int[previousDeclarations.length];
      mv.visitVarInsn(ALOAD,2);
      cast(LeftTuple.class);
      mv.visitVarInsn(ASTORE,7);
      for (      InvokerGenerator.DeclarationMatcher matcher : declarationMatchers) {
        int i=matcher.getOriginalIndex();
        previousDeclarationsParamsPos[i]=offset;
        traverseTuplesUntilDeclaration(i,3,7,8);
        mv.visitVarInsn(ALOAD,3);
        push(i);
        mv.visitInsn(AALOAD);
        mv.visitVarInsn(ALOAD,5);
        mv.visitVarInsn(ALOAD,7);
        invokeInterface(LeftTuple.class,"getHandle",InternalFactHandle.class);
        invokeInterface(InternalFactHandle.class,"getObject",Object.class);
        storeObjectFromDeclaration(previousDeclarations[i],previousDeclarationTypes[i]);
      }
      int[] localDeclarationsParamsPos=parseDeclarations(localDeclarations,localDeclarationTypes,4,2,5,false);
      StringBuilder returnValueMethodDescr=new StringBuilder("(");
      for (int i=0; i < previousDeclarations.length; i++) {
        load(previousDeclarationsParamsPos[i]);
        returnValueMethodDescr.append(typeDescr(previousDeclarationTypes[i]));
      }
      for (int i=0; i < localDeclarations.length; i++) {
        load(localDeclarationsParamsPos[i]);
        returnValueMethodDescr.append(typeDescr(localDeclarationTypes[i]));
      }
      parseGlobals(globals,globalTypes,5,returnValueMethodDescr);
      returnValueMethodDescr.append(")Lorg/drools/spi/FieldValue;");
      mv.visitMethodInsn(INVOKESTATIC,stub.getInternalRuleClassName(),stub.getMethodName(),returnValueMethodDescr.toString());
      mv.visitInsn(ARETURN);
    }
  }
);
  stub.setReturnValue(generator.<ReturnValueExpression>newInstance());
}
