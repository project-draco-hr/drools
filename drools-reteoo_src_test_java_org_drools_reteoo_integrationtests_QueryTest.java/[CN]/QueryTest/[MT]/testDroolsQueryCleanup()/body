{
  KnowledgeBase kbase=SerializationHelper.serializeObject(loadKnowledgeBase("test_QueryMemoryLeak.drl"));
  StatefulKnowledgeSession session=createKnowledgeSession(kbase);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  String workerId="B1234";
  Worker worker=new Worker();
  worker.setId(workerId);
  FactHandle handle=ksession.insert(worker);
  ksession.fireAllRules();
  assertNotNull(handle);
  Object retractedWorker=null;
  for (int i=0; i < 100; i++) {
    retractedWorker=(Object)ksession.getQueryResults("getWorker",new Object[]{workerId});
  }
  assertNotNull(retractedWorker);
  StatefulKnowledgeSessionImpl sessionImpl=(StatefulKnowledgeSessionImpl)ksession;
  Collection<EntryPointNode> entryPointNodes=sessionImpl.getKnowledgeBase().getRete().getEntryPointNodes().values();
  EntryPointNode defaultEntryPointNode=null;
  for (  EntryPointNode epNode : entryPointNodes) {
    if (epNode.getEntryPoint().getEntryPointId().equals("DEFAULT")) {
      defaultEntryPointNode=epNode;
      break;
    }
  }
  assertNotNull(defaultEntryPointNode);
  Map<ObjectType,ObjectTypeNode> obnodes=defaultEntryPointNode.getObjectTypeNodes();
  ObjectType key=new ClassObjectType(DroolsQuery.class);
  ObjectTypeNode droolsQueryNode=obnodes.get(key);
  ObjectHashSet droolsQueryMemory=((ObjectTypeNodeMemory)sessionImpl.getNodeMemory(droolsQueryNode)).memory;
  assertEquals(0,droolsQueryMemory.size());
  Entry[] entries=droolsQueryMemory.getTable();
  int entryCounter=0;
  for (  Entry entry : entries) {
    if (entry != null) {
      entryCounter++;
      ObjectEntry oEntry=(ObjectEntry)entry;
      DefaultFactHandle factHandle=(DefaultFactHandle)oEntry.getValue();
      assertNull(factHandle.getObject());
    }
  }
}
