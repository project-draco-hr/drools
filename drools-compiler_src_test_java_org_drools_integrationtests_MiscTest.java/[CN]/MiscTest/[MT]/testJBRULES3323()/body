{
  StringBuilder rule=new StringBuilder();
  rule.append("package de.orbitx.accumulatetesettest;\n");
  rule.append("import java.util.Set;\n");
  rule.append("import java.util.HashSet;\n");
  rule.append("import org.drools.Foo;\n");
  rule.append("import org.drools.Bar;\n");
  rule.append("rule \"Sub optimal foo parallelism - this rule is causing NPE upon reverse\"\n");
  rule.append("when\n");
  rule.append("$foo : Foo($leftId : id, $leftBar : Bar != null)\n");
  rule.append("$fooSet : Set()\n");
  rule.append("from accumulate ( Foo(id > $leftId, bar != null && != $leftBar, $bar : bar),\n");
  rule.append("collectSet( $bar ) )\n");
  rule.append("then\n");
  rule.append("//System.out.println(\"ok\");\n");
  rule.append("end\n");
  KnowledgeBase kbase=loadKnowledgeBaseFromString(rule.toString());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  Bar[] barList=new Bar[3];
  for (int i=0; i < barList.length; i++) {
    barList[i]=new Bar(String.valueOf(i));
  }
  org.drools.Foo[] fooList=new org.drools.Foo[4];
  for (int i=0; i < fooList.length; i++) {
    fooList[i]=new org.drools.Foo(String.valueOf(i),i == 3 ? barList[2] : barList[i]);
  }
  for (  org.drools.Foo foo : fooList) {
    ksession.insert(foo);
  }
  int[] magicFoos=new int[]{3,3,1,1,0,0,2,2,1,1,0,0,3,3,2,2,3,1,1};
  int[] magicBars=new int[]{1,2,0,1,1,0,1,2,2,1,2,0,0,2,0,2,0,0,1};
  for (int i=0; i < magicFoos.length; i++) {
    org.drools.Foo tehFoo=fooList[magicFoos[i]];
    org.drools.runtime.rule.FactHandle fooFactHandle=ksession.getFactHandle(tehFoo);
    tehFoo.setBar(barList[magicBars[i]]);
    ksession.update(fooFactHandle,tehFoo);
    ksession.fireAllRules();
  }
  ksession.dispose();
}
