{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_globalCustomResolver.drl")));
  final Package pkg=builder.getPackage();
  RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  ruleBase=SerializationHelper.serializeObject(ruleBase);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  final Map map=new HashMap();
  List list=new ArrayList();
  String string="stilton";
  map.put("list",list);
  map.put("string",string);
  workingMemory.setGlobalResolver(new GlobalResolver(){
    public Object resolveGlobal(    String identifier){
      return map.get(identifier);
    }
    public void setGlobal(    String identifier,    Object value){
      map.put(identifier,value);
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public Object get(    String identifier){
      return resolveGlobal(identifier);
    }
    public void set(    String identifier,    Object value){
      setGlobal(identifier,value);
    }
    public void setDelegate(    Globals delegate){
    }
  }
);
  Cheese bree=new Cheese();
  bree.setPrice(100);
  workingMemory.insert(bree);
  workingMemory.fireAllRules();
  assertEquals(2,list.size());
  assertEquals(new Integer(5),list.get(0));
  assertEquals(new Integer(6),list.get(1));
}
