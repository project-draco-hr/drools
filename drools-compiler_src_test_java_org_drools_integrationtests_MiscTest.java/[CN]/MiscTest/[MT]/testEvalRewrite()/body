{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_EvalRewrite.drl")));
  final Package pkg=builder.getPackage();
  RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  ruleBase=SerializationHelper.serializeObject(ruleBase);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  final List list=new ArrayList();
  workingMemory.setGlobal("results",list);
  final Order order1=new Order(10,"Bob");
  final OrderItem item11=new OrderItem(order1,1);
  final OrderItem item12=new OrderItem(order1,2);
  order1.addItem(item11);
  order1.addItem(item12);
  final Order order2=new Order(11,"Bob");
  final OrderItem item21=new OrderItem(order2,1);
  final OrderItem item22=new OrderItem(order2,2);
  order2.addItem(item21);
  order2.addItem(item22);
  final Order order3=new Order(12,"Bob");
  final OrderItem item31=new OrderItem(order3,1);
  final OrderItem item32=new OrderItem(order3,2);
  order3.addItem(item31);
  order3.addItem(item32);
  final Order order4=new Order(13,"Bob");
  final OrderItem item41=new OrderItem(order4,1);
  final OrderItem item42=new OrderItem(order4,2);
  order4.addItem(item41);
  order4.addItem(item42);
  workingMemory.insert(order1);
  workingMemory.insert(item11);
  workingMemory.insert(item12);
  workingMemory.insert(order2);
  workingMemory.insert(item21);
  workingMemory.insert(item22);
  workingMemory.insert(order3);
  workingMemory.insert(item31);
  workingMemory.insert(item32);
  workingMemory.insert(order4);
  workingMemory.insert(item41);
  workingMemory.insert(item42);
  workingMemory.fireAllRules();
  assertEquals(5,list.size());
  assertTrue(list.contains(item11));
  assertTrue(list.contains(item12));
  assertTrue(list.contains(item22));
  assertTrue(list.contains(order3));
  assertTrue(list.contains(order4));
}
