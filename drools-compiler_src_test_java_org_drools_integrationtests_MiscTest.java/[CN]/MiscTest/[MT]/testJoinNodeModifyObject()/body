{
  final Reader reader=new InputStreamReader(getClass().getResourceAsStream("test_JoinNodeModifyObject.drl"));
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(reader);
  final Package pkg1=builder.getPackage();
  RuleBase ruleBase=getSinglethreadRuleBase();
  ruleBase.addPackage(pkg1);
  ruleBase=SerializationHelper.serializeObject(ruleBase);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  try {
    final List orderedFacts=new ArrayList();
    final List errors=new ArrayList();
    workingMemory.setGlobal("orderedNumbers",orderedFacts);
    workingMemory.setGlobal("errors",errors);
    final int MAX=2;
    for (int i=1; i <= MAX; i++) {
      final IndexedNumber n=new IndexedNumber(i,MAX - i + 1);
      workingMemory.insert(n);
    }
    workingMemory.fireAllRules();
    assertTrue("Processing generated errors: " + errors.toString(),errors.isEmpty());
    for (int i=1; i <= MAX; i++) {
      final IndexedNumber n=(IndexedNumber)orderedFacts.get(i - 1);
      assertEquals("Fact is out of order",i,n.getIndex());
    }
  }
  finally {
  }
}
