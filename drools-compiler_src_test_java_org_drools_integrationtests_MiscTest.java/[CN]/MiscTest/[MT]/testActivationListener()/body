{
  String rule="";
  rule+="package org.drools;\n";
  rule+="import java.util.Map;\n";
  rule+="import java.util.HashMap;\n";
  rule+="rule \"Test Rule\" @activationListener('blah')\n";
  rule+="  when\n";
  rule+="     String( this == \"xxx\" )\n ";
  rule+="  then\n";
  rule+="end";
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new StringReader(rule));
  final org.drools.rule.Package pkg=builder.getPackage();
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  final List list=new ArrayList();
  conf.addActivationListener("blah",new ActivationListenerFactory(){
    public TerminalNode createActivationListener(    int id,    LeftTupleSource source,    org.drools.rule.Rule rule,    GroupElement subrule,    int subruleIndex,    BuildContext context,    Object... args){
      return new RuleTerminalNode(id,source,rule,subrule,0,context){
        @Override public void assertLeftTuple(        LeftTuple tuple,        PropagationContext context,        InternalWorkingMemory workingMemory){
          list.add("inserted");
        }
        @Override public void modifyLeftTuple(        LeftTuple leftTuple,        PropagationContext context,        InternalWorkingMemory workingMemory){
          list.add("updated");
        }
        @Override public void retractLeftTuple(        LeftTuple leftTuple,        PropagationContext context,        InternalWorkingMemory workingMemory){
          list.add("retracted");
        }
      }
;
    }
  }
);
  final RuleBase ruleBase=getRuleBase(conf);
  ruleBase.addPackage(pkg);
  StatefulSession session=ruleBase.newStatefulSession();
  FactHandle fh=session.insert("xxx");
  session.fireAllRules();
  session.update(fh,"xxx");
  session.fireAllRules();
  session.retract(fh);
  session.fireAllRules();
  assertEquals("inserted",list.get(0));
  assertEquals("updated",list.get(1));
  assertEquals("retracted",list.get(2));
  assertNotNull(session);
}
