{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_duplicateVariableBinding.drl")));
  final Package pkg=builder.getPackage();
  RuleBase ruleBase=getSinglethreadRuleBase();
  ruleBase.addPackage(pkg);
  ruleBase=SerializationHelper.serializeObject(ruleBase);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  final Map result=new HashMap();
  workingMemory.setGlobal("results",result);
  final Cheese stilton=new Cheese("stilton",20);
  final Cheese brie=new Cheese("brie",10);
  workingMemory.insert(stilton);
  workingMemory.insert(brie);
  workingMemory.fireAllRules();
  assertEquals(5,result.size());
  assertEquals(stilton.getPrice(),((Integer)result.get(stilton.getType())).intValue());
  assertEquals(brie.getPrice(),((Integer)result.get(brie.getType())).intValue());
  assertEquals(stilton.getPrice(),((Integer)result.get(stilton)).intValue());
  assertEquals(brie.getPrice(),((Integer)result.get(brie)).intValue());
  assertEquals(stilton.getPrice(),((Integer)result.get("test3" + stilton.getType())).intValue());
  workingMemory.insert(new Person("bob",brie.getType()));
  workingMemory.fireAllRules();
  assertEquals(6,result.size());
  assertEquals(brie.getPrice(),((Integer)result.get("test3" + brie.getType())).intValue());
}
