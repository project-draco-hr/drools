{
  final Reader reader=new InputStreamReader(getClass().getResourceAsStream("test_JoinNodeModifyObject.drl"));
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(reader);
  final Package pkg1=builder.getPackage();
  final RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg1);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  final List orderedFacts=new ArrayList();
  final List errors=new ArrayList();
  workingMemory.setGlobal("orderedNumbers",orderedFacts);
  workingMemory.setGlobal("errors",errors);
  final int MAX=5;
  for (int i=1; i <= MAX; i++) {
    final IndexedNumber n=new IndexedNumber(i,MAX - i + 1);
    workingMemory.assertObject(n);
  }
  workingMemory.fireAllRules();
  Assert.assertTrue("Processing generated errors: " + errors.toString(),errors.isEmpty());
  for (int i=1; i <= MAX; i++) {
    final IndexedNumber n=(IndexedNumber)orderedFacts.get(i - 1);
    Assert.assertEquals("Fact is out of order",i,n.getIndex());
  }
}
