{
  final DrlParser parser=new DrlParser();
  final PackageDescr pkg=parser.parse(new InputStreamReader(getClass().getResourceAsStream("test_Dumpers.drl")));
  if (parser.hasErrors()) {
    for (    DroolsError error : parser.getErrors()) {
      logger.warn(error.toString());
    }
    fail(parser.getErrors().toString());
  }
  PackageBuilder builder=new PackageBuilder();
  builder.addPackage(pkg);
  RuleBase ruleBase=getSinglethreadRuleBase();
  ruleBase.addPackage(builder.getPackage());
  ruleBase=SerializationHelper.serializeObject(ruleBase);
  WorkingMemory workingMemory=ruleBase.newStatefulSession();
  List list=new ArrayList();
  workingMemory.setGlobal("list",list);
  final Cheese brie=new Cheese("brie",12);
  workingMemory.insert(brie);
  workingMemory.fireAllRules();
  assertEquals(3,list.size());
  assertEquals("3 1",list.get(0));
  assertEquals("MAIN",list.get(1));
  assertEquals("1 1",list.get(2));
  final DrlDumper drlDumper=new DrlDumper();
  final String drlResult=drlDumper.dump(pkg);
  builder=new PackageBuilder();
  builder.addPackageFromDrl(new StringReader(drlResult));
  if (builder.hasErrors()) {
    for (    DroolsError error : builder.getErrors().getErrors()) {
      logger.warn(error.toString());
    }
    fail(parser.getErrors().toString());
  }
  ruleBase=getSinglethreadRuleBase();
  ruleBase.addPackage(builder.getPackage());
  workingMemory=ruleBase.newStatefulSession();
  list=new ArrayList();
  workingMemory.setGlobal("list",list);
  workingMemory.insert(brie);
  workingMemory.fireAllRules();
  assertEquals(3,list.size());
  assertEquals("3 1",list.get(0));
  assertEquals("MAIN",list.get(1));
  assertEquals("1 1",list.get(2));
  final XmlDumper xmlDumper=new XmlDumper();
  final String xmlResult=xmlDumper.dump(pkg);
  builder=new PackageBuilder();
  builder.addPackageFromXml(new StringReader(xmlResult));
  if (builder.hasErrors()) {
    for (    DroolsError error : builder.getErrors().getErrors()) {
      logger.warn(error.toString());
    }
    fail(parser.getErrors().toString());
  }
  ruleBase=getSinglethreadRuleBase();
  ruleBase.addPackage(builder.getPackage());
  workingMemory=ruleBase.newStatefulSession();
  list=new ArrayList();
  workingMemory.setGlobal("list",list);
  workingMemory.insert(brie);
  workingMemory.fireAllRules();
  assertEquals(3,list.size());
  assertEquals("3 1",list.get(0));
  assertEquals("MAIN",list.get(1));
  assertEquals("1 1",list.get(2));
}
