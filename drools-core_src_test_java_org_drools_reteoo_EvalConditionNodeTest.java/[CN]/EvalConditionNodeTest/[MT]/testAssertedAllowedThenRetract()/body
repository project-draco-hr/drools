{
  final MockEvalCondition eval=new MockEvalCondition(true);
  final EvalConditionNode node=new EvalConditionNode(1,new MockTupleSource(15),eval,buildContext);
  final MockTupleSink sink=new MockTupleSink();
  node.addTupleSink(sink);
  final DefaultFactHandle f0=new DefaultFactHandle(0,"stilton");
  final ReteTuple tuple0=new ReteTuple(f0);
  node.assertTuple(tuple0,this.context,this.workingMemory);
  final DefaultFactHandle f1=new DefaultFactHandle(1,"cheddar");
  final ReteTuple tuple1=new ReteTuple(f1);
  node.assertTuple(tuple1,this.context,this.workingMemory);
  final EvalMemory memory=(EvalMemory)this.workingMemory.getNodeMemory(node);
  assertEquals(2,memory.tupleMemory.size());
  assertTrue(memory.tupleMemory.contains(tuple0));
  assertTrue(memory.tupleMemory.contains(tuple1));
  assertEquals(2,sink.getAsserted().size());
  node.retractTuple(tuple0,this.context,this.workingMemory);
  assertEquals(1,memory.tupleMemory.size());
  assertTrue(memory.tupleMemory.contains(tuple1));
  assertEquals(1,sink.getRetracted().size());
  node.retractTuple(tuple1,this.context,this.workingMemory);
  assertEquals(0,memory.tupleMemory.size());
  assertEquals(2,sink.getRetracted().size());
}
