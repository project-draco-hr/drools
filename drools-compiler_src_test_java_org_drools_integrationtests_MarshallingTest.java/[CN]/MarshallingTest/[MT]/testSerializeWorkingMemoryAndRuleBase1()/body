{
  final Reader reader=new InputStreamReader(getClass().getResourceAsStream("test_Serializable.drl"));
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(reader);
  final Package pkg=SerializationHelper.serializeObject(builder.getPackage());
  assertEquals(0,builder.getErrors().getErrors().length);
  RuleBase ruleBase=getRuleBase();
  StatefulSession session=ruleBase.newStatefulSession();
  Map map=new HashMap();
  map.put("x",ruleBase);
  map=SerializationHelper.serializeObject(map);
  ruleBase=(RuleBase)map.get("x");
  ruleBase.addPackage(pkg);
  session=SerializationHelper.getSerialisedStatefulSession(session,ruleBase);
  ruleBase=SerializationHelper.serializeObject(ruleBase);
  session.setGlobal("list",new ArrayList());
  final Person bob=new Person("bob");
  session.insert(bob);
  final Rule[] rules=ruleBase.getPackages()[0].getRules();
  assertEquals(4,rules.length);
  assertEquals("match Person 1",rules[0].getName());
  assertEquals("match Person 2",rules[1].getName());
  assertEquals("match Person 3",rules[2].getName());
  assertEquals("match Integer",rules[3].getName());
  assertEquals(1,IteratorToList.convert(session.iterateObjects()).size());
  assertEquals(bob,IteratorToList.convert(session.iterateObjects()).get(0));
  assertEquals(2,session.getAgenda().agendaSize());
  session=SerializationHelper.getSerialisedStatefulSession(session);
  session.fireAllRules();
  final List list=(List)session.getGlobal("list");
  assertEquals(3,list.size());
  assertEquals(new Integer(4),list.get(0));
  assertEquals(2,IteratorToList.convert(session.iterateObjects()).size());
  assertTrue(IteratorToList.convert(session.iterateObjects()).contains(bob));
  assertTrue(IteratorToList.convert(session.iterateObjects()).contains(new Person("help")));
}
