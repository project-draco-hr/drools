{
  String rule="package org.test;\n";
  rule+="global java.util.List list\n";
  rule+="rule \"Rule 1\"\n";
  rule+="when\n";
  rule+="then\n";
  rule+="    list.add( \"fired\" );\n";
  rule+="end";
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new StringReader(rule));
  assertTrue(builder.getErrors().isEmpty());
  final Package pkg=builder.getPackage();
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(pkg);
  Map<Integer,BaseNode> nodes=RuleBaseNodes.getNodeMap((InternalRuleBase)ruleBase);
  assertEquals(2,nodes.size());
  assertEquals("InitialFact",((ClassObjectType)((ObjectTypeNode)nodes.get(2)).getObjectType()).getClassType().getSimpleName());
  assertEquals("Rule 1",((RuleTerminalNode)nodes.get(4)).getRule().getName());
  StatefulSession session=ruleBase.newStatefulSession();
  List list=new ArrayList();
  session.setGlobal("list",list);
  session=getSerialisedStatefulSession(session);
  session.fireAllRules();
  session=getSerialisedStatefulSession(session);
  assertEquals(1,((List)session.getGlobal("list")).size());
  assertEquals("fired",((List)session.getGlobal("list")).get(0));
}
