{
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_Dynamic1_0.drl")));
  Package pkg=serialisePackage(builder.getPackage());
  ruleBase.addPackage(pkg);
  List results=new ArrayList();
  StatefulSession session=ruleBase.newStatefulSession();
  session.setGlobal("results",results);
  InternalFactHandle stilton1=(InternalFactHandle)session.insert(new Cheese("stilton",10));
  InternalFactHandle brie1=(InternalFactHandle)session.insert(new Cheese("brie",10));
  session.fireAllRules();
  byte[] serializedSession=serializeOut(session);
  byte[] serializedRulebase=serializeOut(ruleBase);
  session.dispose();
  assertEquals(1,results.size());
  assertEquals(stilton1.getObject(),results.get(0));
  ruleBase=(RuleBase)serializeIn(serializedRulebase);
  session=ruleBase.newStatefulSession(new ByteArrayInputStream(serializedSession));
  results=(List)session.getGlobal("results");
  builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_Dynamic1_1.drl")));
  pkg=serialisePackage(builder.getPackage());
  ruleBase.addPackage(pkg);
  InternalFactHandle stilton2=(InternalFactHandle)session.insert(new Cheese("stilton",20));
  InternalFactHandle brie2=(InternalFactHandle)session.insert(new Cheese("brie",20));
  InternalFactHandle brie3=(InternalFactHandle)session.insert(new Cheese("brie",30));
  session.fireAllRules();
  assertEquals(5,results.size());
  assertEquals(brie1.getObject(),results.get(1));
  assertEquals(stilton2.getObject(),results.get(2));
  assertEquals(brie2.getObject(),results.get(4));
  assertEquals(brie3.getObject(),results.get(3));
  serializedSession=null;
  serializedRulebase=null;
  serializedSession=serializeOut(session);
  serializedRulebase=serializeOut(ruleBase);
  session.dispose();
}
