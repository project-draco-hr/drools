{
  Class<?> leftType=isDeclarationExpression(left) ? convertFromPrimitiveType(left.getType()) : left.getType();
  Class<?> rightType=isDeclarationExpression(right) ? convertFromPrimitiveType(right.getType()) : right.getType();
  jitExpression(left,type != null ? type : leftType);
  if (isDeclarationExpression(left) && left.getType().isPrimitive()) {
    castFromPrimitive(left.getType());
  }
  store(LEFT_OPERAND,leftType);
  jitExpression(right,type != null ? type : rightType);
  if (isDeclarationExpression(right) && right.getType().isPrimitive()) {
    castFromPrimitive(right.getType());
  }
  store(RIGHT_OPERAND,rightType);
  Label shortcutEvaluation=new Label();
  BooleanOperator operation=singleCondition.getOperation();
  prepareLeftOperand(operation,type,leftType,rightType,shortcutEvaluation);
  prepareRightOperand(right,type,rightType,shortcutEvaluation);
  load(LEFT_OPERAND);
  load(RIGHT_OPERAND);
switch (operation) {
case CONTAINS:
    invokeStatic(EvaluatorHelper.class,"contains",boolean.class,Object.class,rightType.isPrimitive() ? rightType : Object.class);
  break;
case MATCHES:
invokeVirtual(type,"matches",boolean.class,String.class);
break;
case SOUNDSLIKE:
invokeStatic(EvaluatorHelper.class,"soundslike",boolean.class,String.class,String.class);
break;
default :
if (operation.isEquality() && type != BigDecimal.class) {
if (type.isInterface()) {
invokeInterface(type,"equals",boolean.class,Object.class);
}
 else {
invokeVirtual(type,"equals",boolean.class,Object.class);
}
}
 else {
if (type.isInterface()) {
invokeInterface(type,"compareTo",int.class,type == Comparable.class ? Object.class : type);
}
 else {
invokeVirtual(type,"compareTo",int.class,type);
}
mv.visitInsn(ICONST_0);
jitPrimitiveOperation(operation == BooleanOperator.NE ? BooleanOperator.EQ : operation,int.class);
}
if (operation == BooleanOperator.NE) {
singleCondition.toggleNegation();
}
}
mv.visitLabel(shortcutEvaluation);
}
