{
  if (conf == null) {
    conf=new SessionConfiguration();
  }
  this.env=env;
  checkEnvironment(this.env);
  this.sessionInfo=new SessionInfo();
  initTransactionManager(this.env);
  ReteooStatefulSession session=(ReteooStatefulSession)((KnowledgeBaseImpl)kbase).ruleBase.newStatefulSession((SessionConfiguration)conf,this.env);
  this.ksession=new StatefulKnowledgeSessionImpl(session,kbase);
  this.kContext=new KnowledgeCommandContext(new ContextImpl("ksession",null),null,null,this.ksession,null);
  ((JPASignalManager)((StatefulKnowledgeSessionImpl)ksession).session.getSignalManager()).setCommandService(this);
  this.marshallingHelper=new JPASessionMarshallingHelper(this.ksession,conf);
  this.sessionInfo.setJPASessionMashallingHelper(this.marshallingHelper);
  ((StatefulKnowledgeSessionImpl)this.ksession).session.setEndOperationListener(new EndOperationListenerImpl(this.sessionInfo));
  try {
    this.txm.begin();
    registerRollbackSync();
    jpm.getApplicationScopedEntityManager().persist(this.sessionInfo);
    this.txm.commit();
  }
 catch (  Exception t1) {
    try {
      this.txm.rollback();
    }
 catch (    Throwable t2) {
      throw new RuntimeException("Could not commit session or rollback",t2);
    }
    throw new RuntimeException("Could not commit session",t1);
  }
  ((StatefulKnowledgeSessionImpl)ksession).session.setId(this.sessionInfo.getId());
}
