{
  if (!isMvelOperator(operator)) {
    Evaluator evaluator=buildLiteralEvaluator(context,extractor,restrictionDescr,vtype);
    if (evaluator != null && evaluator.isTemporal()) {
      try {
        field=context.getCompilerFactory().getFieldFactory().getFieldValue(field.getValue(),ValueType.DATE_TYPE);
      }
 catch (      Exception e) {
        context.addError(new DescrBuildError(context.getParentDescr(),restrictionDescr,null,e.getMessage()));
      }
    }
    return new EvaluatorConstraint(field,evaluator,extractor);
  }
  String mvelExpr=normalizeMVELLiteralExpression(vtype,field,expression,leftValue,operator,rightValue,restrictionDescr);
  IndexUtil.ConstraintType constraintType=IndexUtil.ConstraintType.decode(operator);
  MVELCompilationUnit compilationUnit=buildCompilationUnit(context,pattern,mvelExpr,aliases);
  EvaluatorWrapper[] operators=getOperators(buildOperators(context,pattern,restrictionDescr,aliases));
  return new MvelConstraint(context.getPkg().getName(),mvelExpr,compilationUnit,constraintType,field,extractor,operators);
}
