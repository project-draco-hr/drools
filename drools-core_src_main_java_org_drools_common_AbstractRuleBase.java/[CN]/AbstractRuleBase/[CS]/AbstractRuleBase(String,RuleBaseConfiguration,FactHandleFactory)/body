{
  this.config=(config != null) ? config : new RuleBaseConfiguration();
  this.config.makeImmutable();
  createRulebaseId(id);
  this.factHandleFactory=factHandleFactory;
  if (this.config.isSequential()) {
    this.agendaGroupRuleTotals=new HashMap();
  }
  this.rootClassLoader=this.config.getClassLoader();
  this.rootClassLoader.addClassLoader(getClass().getClassLoader());
  this.declarationClassLoader=new JavaDialectRuntimeData.TypeDeclarationClassLoader(new JavaDialectRuntimeData(),this.rootClassLoader);
  this.rootClassLoader.addClassLoader(this.declarationClassLoader);
  this.pkgs=new HashMap<String,Package>();
  this.processes=new HashMap();
  this.globals=new HashMap<String,Class<?>>();
  this.statefulSessions=new ObjectHashSet();
  this.classTypeDeclaration=new HashMap<String,TypeDeclaration>();
  this.partitionIDs=new CopyOnWriteArrayList<RuleBasePartitionId>();
  this.classFieldAccessorCache=new ClassFieldAccessorCache(this.rootClassLoader);
}
