{
  lock();
  try {
    for (    Package newPkg : newPkgs) {
      newPkg.checkValidity();
      this.additionsSinceLock++;
      this.eventSupport.fireBeforePackageAdded(newPkg);
      Package pkg=this.pkgs.get(newPkg.getName());
      if (pkg == null) {
        pkg=new Package(newPkg.getName());
        pkg.setClassFieldAccessorCache(this.classFieldAccessorCache);
        pkgs.put(pkg.getName(),pkg);
      }
      pkg.getDialectRuntimeRegistry().merge(newPkg.getDialectRuntimeRegistry(),this.rootClassLoader,true);
    }
    for (    Package newPkg : newPkgs) {
      String lastType=null;
      try {
        if (newPkg.getTypeDeclarations() != null) {
          for (          TypeDeclaration newDecl : newPkg.getTypeDeclarations().values()) {
            lastType=newDecl.getTypeClassName();
            TypeDeclaration typeDeclaration=this.classTypeDeclaration.get(newDecl.getTypeClassName());
            if (typeDeclaration == null) {
              String className=newDecl.getTypeClassName();
              byte[] def=((JavaDialectRuntimeData)newPkg.getDialectRuntimeRegistry().getDialectData("java")).getClassDefinition(JavaDialectRuntimeData.convertClassToResourcePath(className));
              Class<?> definedKlass=registerAndLoadTypeDefinition(className,def);
              if (definedKlass == null && typeDeclaration.isNovel()) {
                throw new RuntimeException("Registering nyll bytes for class " + className);
              }
              newDecl.getTypeClassDef().setDefinedClass(definedKlass);
              newDecl.setTypeClass(definedKlass);
              this.classTypeDeclaration.put(className,newDecl);
              typeDeclaration=newDecl;
            }
 else {
              Class<?> definedKlass=typeDeclaration.getTypeClass();
              newDecl.getTypeClassDef().setDefinedClass(definedKlass);
              newDecl.setTypeClass(definedKlass);
              mergeTypeDeclarations(typeDeclaration,newDecl);
            }
            updateDependentTypes(newPkg,typeDeclaration);
          }
        }
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
        throw new RuntimeDroolsException("unable to resolve Type Declaration class '" + lastType + "'");
      }
    }
    for (    Package newPkg : newPkgs) {
      Package pkg=this.pkgs.get(newPkg.getName());
      if (newPkg.getFunctions() != null) {
        for (        Map.Entry<String,Function> entry : newPkg.getFunctions().entrySet()) {
          pkg.addFunction(entry.getValue());
        }
      }
      pkg.getDialectRuntimeRegistry().onBeforeExecute();
      pkg.getClassFieldAccessorStore().merge(newPkg.getClassFieldAccessorStore());
    }
    for (    Package newPkg : newPkgs) {
      Package pkg=this.pkgs.get(newPkg.getName());
      mergePackage(pkg,newPkg);
      for (      WindowDeclaration window : newPkg.getWindowDeclarations().values()) {
        addWindowDeclaration(newPkg,window);
      }
      for (      String id : newPkg.getEntryPointIds()) {
        addEntryPoint(id);
      }
      final Rule[] rules=newPkg.getRules();
      for (int i=0; i < rules.length; ++i) {
        addRule(newPkg,rules[i]);
      }
      if (newPkg.getRuleFlows() != null) {
        final Map<String,org.drools.definition.process.Process> flows=newPkg.getRuleFlows();
        for (        org.drools.definition.process.Process process : flows.values()) {
          addProcess(process);
        }
      }
      this.eventSupport.fireAfterPackageAdded(newPkg);
    }
  }
  finally {
    unlock();
  }
}
