{
  newPkg.checkValidity();
  final Package pkg=(Package)this.pkgs.get(newPkg.getName());
  for (final Iterator it=this.workingMemories.keySet().iterator(); it.hasNext(); ) {
    final AbstractWorkingMemory workingMemory=(AbstractWorkingMemory)it.next();
    workingMemory.getLock().lock();
  }
  if (pkg != null) {
    mergePackage(pkg,newPkg);
  }
 else {
    this.pkgs.put(newPkg.getName(),newPkg);
  }
  final Map newGlobals=newPkg.getGlobals();
  for (final Iterator it=newGlobals.keySet().iterator(); it.hasNext(); ) {
    final String identifier=(String)it.next();
    final Class type=(Class)newGlobals.get(identifier);
    if (this.globals.containsKey(identifier) && !this.globals.get(identifier).equals(type)) {
      throw new PackageIntegrationException(pkg);
    }
  }
  this.globals.putAll(newGlobals);
  final Rule[] rules=newPkg.getRules();
  for (int i=0; i < rules.length; ++i) {
    addRule(rules[i]);
  }
  this.packageClassLoader.addClassLoader(newPkg.getPackageCompilationData().getClassLoader());
  for (final Iterator it=this.workingMemories.keySet().iterator(); it.hasNext(); ) {
    final AbstractWorkingMemory workingMemory=(AbstractWorkingMemory)it.next();
    workingMemory.fireAllRules();
    workingMemory.getLock().unlock();
  }
}
