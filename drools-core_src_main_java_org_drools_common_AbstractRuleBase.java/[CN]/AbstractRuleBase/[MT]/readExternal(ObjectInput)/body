{
  DroolsObjectInput droolsStream=null;
  boolean isDrools=in instanceof DroolsObjectInput;
  if (isDrools) {
    droolsStream=(DroolsObjectInput)in;
  }
 else {
    droolsStream=new DroolsObjectInputStream((ObjectInputStream)in);
  }
  this.rootClassLoader=new CompositeClassLoader(droolsStream.getParentClassLoader());
  droolsStream.setClassLoader(this.rootClassLoader);
  droolsStream.setRuleBase(this);
  this.classFieldAccessorCache=new ClassFieldAccessorCache(this.rootClassLoader);
  this.config=(RuleBaseConfiguration)droolsStream.readObject();
  this.config.setClassLoader(droolsStream.getParentClassLoader());
  this.pkgs=(Map)droolsStream.readObject();
  for (  final Object object : this.pkgs.values()) {
    ((Package)object).getDialectRuntimeRegistry().onAdd(this.rootClassLoader);
  }
  this.id=(String)droolsStream.readObject();
  this.workingMemoryCounter=droolsStream.readInt();
  this.processes=(Map)droolsStream.readObject();
  this.agendaGroupRuleTotals=(Map)droolsStream.readObject();
  Class cls=null;
  try {
    cls=droolsStream.getParentClassLoader().loadClass(droolsStream.readUTF());
    this.factHandleFactory=(FactHandleFactory)cls.newInstance();
  }
 catch (  InstantiationException e) {
    DroolsObjectInputStream.newInvalidClassException(cls,e);
  }
catch (  IllegalAccessException e) {
    DroolsObjectInputStream.newInvalidClassException(cls,e);
  }
  for (  final Object object : this.pkgs.values()) {
    ((Package)object).getDialectRuntimeRegistry().onBeforeExecute();
    ((Package)object).getClassFieldAccessorStore().setClassFieldAccessorCache(this.classFieldAccessorCache);
    ((Package)object).getClassFieldAccessorStore().wire();
  }
  this.populateTypeDeclarationMaps();
  this.globals=(Map)droolsStream.readObject();
  this.partitionIDs=(List<RuleBasePartitionId>)droolsStream.readObject();
  this.eventSupport=(RuleBaseEventSupport)droolsStream.readObject();
  this.eventSupport.setRuleBase(this);
  this.statefulSessions=new ObjectHashSet();
  if (!isDrools) {
    droolsStream.close();
  }
}
