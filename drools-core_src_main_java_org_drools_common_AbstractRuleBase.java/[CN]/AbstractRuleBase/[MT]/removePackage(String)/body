{
synchronized (this.pkgs) {
    final Package pkg=(Package)this.pkgs.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException("Package name '" + packageName + "' does not exist for this Rule Base.");
    }
    int lastAquiredLock=0;
    final InternalWorkingMemory[] wms=getWorkingMemories();
    try {
      for (lastAquiredLock=0; lastAquiredLock < wms.length; lastAquiredLock++) {
        wms[lastAquiredLock].getLock().lock();
      }
      final Rule[] rules=pkg.getRules();
      for (int i=0; i < rules.length; ++i) {
        removeRule(rules[i]);
      }
      this.packageClassLoader.removeClassLoader(pkg.getPackageCompilationData().getClassLoader());
      pkg.clear();
      final Set referencedGlobals=new HashSet();
      for (final Iterator it=this.pkgs.values().iterator(); it.hasNext(); ) {
        final org.drools.rule.Package pkgref=(org.drools.rule.Package)it.next();
        if (pkgref != pkg) {
          referencedGlobals.addAll(pkgref.getGlobals().keySet());
        }
      }
      for (final Iterator it=pkg.getGlobals().keySet().iterator(); it.hasNext(); ) {
        final String globalName=(String)it.next();
        if (!referencedGlobals.contains(globalName)) {
          this.globals.remove(globalName);
        }
      }
      Map flows=pkg.getRuleFlows();
      for (Iterator iter=flows.keySet().iterator(); iter.hasNext(); ) {
        removeProcess((String)iter.next());
      }
      this.pkgs.remove(pkg.getName());
    }
  finally {
      for (lastAquiredLock--; lastAquiredLock > -1; lastAquiredLock--) {
        wms[lastAquiredLock].fireAllRules();
        wms[lastAquiredLock].getLock().unlock();
      }
    }
  }
}
