{
  if (this.config.isSequential()) {
    throw new RuntimeException("Cannot have a stateful rule session, with sequential configuration set to true");
  }
  final DroolsObjectInputStream streamWithLoader=new DroolsObjectInputStream(stream,this.packageClassLoader);
  streamWithLoader.setRuleBase(this);
  final StatefulSession session=(StatefulSession)streamWithLoader.readObject();
synchronized (this.pkgs) {
    ((InternalWorkingMemory)session).setRuleBase(this);
    ((InternalWorkingMemory)session).setId((nextWorkingMemoryCounter()));
    ExecutorService executor=ExecutorServiceFactory.createExecutorService(this.config.getExecutorService());
    executor.setCommandExecutor(new CommandExecutor(session));
    ((InternalWorkingMemory)session).setExecutorService(executor);
    if (keepReference) {
      addStatefulSession(session);
      for (Iterator it=session.getRuleBaseUpdateListeners().iterator(); it.hasNext(); ) {
        addEventListener((RuleBaseEventListener)it.next());
      }
    }
    return session;
  }
}
