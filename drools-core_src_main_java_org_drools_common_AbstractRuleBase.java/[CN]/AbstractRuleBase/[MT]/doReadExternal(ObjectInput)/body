{
  this.pkgs=(Map)stream.readObject();
  if (stream instanceof DroolsObjectInputStream) {
    final DroolsObjectInputStream parentStream=(DroolsObjectInputStream)stream;
    parentStream.setRuleBase(this);
    this.packageClassLoader=new CompositePackageClassLoader(parentStream.getClassLoader());
    this.classLoader=new MapBackedClassLoader(parentStream.getClassLoader());
  }
 else {
    this.packageClassLoader=new CompositePackageClassLoader(Thread.currentThread().getContextClassLoader());
    this.classLoader=new MapBackedClassLoader(Thread.currentThread().getContextClassLoader());
  }
  this.packageClassLoader.addClassLoader(this.classLoader);
  this.objenesis=createObjenesis();
  for (final Iterator it=this.pkgs.values().iterator(); it.hasNext(); ) {
    this.packageClassLoader.addClassLoader(((Package)it.next()).getDialectDatas().getClassLoader());
  }
  this.id=(String)stream.readObject();
  this.processes=(Map)stream.readObject();
  this.agendaGroupRuleTotals=(Map)stream.readObject();
  this.factHandleFactory=(FactHandleFactory)stream.readObject();
  this.globals=(Map)stream.readObject();
  this.config=(RuleBaseConfiguration)stream.readObject();
  this.config.setClassLoader(this.packageClassLoader);
  this.eventSupport=(RuleBaseEventSupport)stream.readObject();
  this.eventSupport.setRuleBase(this);
  this.statefulSessions=new ObjectHashSet();
}
