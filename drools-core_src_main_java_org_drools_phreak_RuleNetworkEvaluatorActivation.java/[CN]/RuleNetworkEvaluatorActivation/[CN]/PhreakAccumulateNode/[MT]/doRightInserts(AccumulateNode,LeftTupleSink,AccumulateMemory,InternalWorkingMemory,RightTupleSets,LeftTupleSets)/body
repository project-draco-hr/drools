{
  boolean tupleMemory=true;
  boolean tupleMemoryEnabled=true;
  Accumulate accumulate=accNode.getAccumulate();
  BetaMemory bm=am.getBetaMemory();
  LeftTupleMemory ltm=bm.getLeftTupleMemory();
  RightTupleMemory rtm=bm.getRightTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=accNode.getRawConstraints();
  FastIterator it=accNode.getLeftIterator(ltm);
  for (RightTuple rightTuple=srcRightTuples.getInsertFirst(); rightTuple != null; ) {
    RightTuple next=rightTuple.getStagedNext();
    rtm.add(rightTuple);
    PropagationContext context=rightTuple.getPropagationContext();
    constraints.updateFromFactHandle(contextEntry,wm,rightTuple.getFactHandle());
    FastIterator leftIt=accNode.getLeftIterator(ltm);
    for (LeftTuple leftTuple=accNode.getFirstLeftTuple(rightTuple,ltm,context,leftIt); leftTuple != null; leftTuple=(LeftTuple)leftIt.next(leftTuple)) {
      if (constraints.isAllowedCachedRight(contextEntry,leftTuple)) {
        final AccumulateContext accctx=(AccumulateContext)leftTuple.getObject();
        addMatch(accNode,accumulate,leftTuple,rightTuple,null,null,wm,am,accctx,tupleMemoryEnabled);
        if (leftTuple.getStagedType() == LeftTuple.NONE) {
          trgLeftTuples.addUpdate(leftTuple);
        }
      }
    }
    rightTuple.clearStaged();
    rightTuple=next;
  }
  constraints.resetFactHandle(contextEntry);
}
