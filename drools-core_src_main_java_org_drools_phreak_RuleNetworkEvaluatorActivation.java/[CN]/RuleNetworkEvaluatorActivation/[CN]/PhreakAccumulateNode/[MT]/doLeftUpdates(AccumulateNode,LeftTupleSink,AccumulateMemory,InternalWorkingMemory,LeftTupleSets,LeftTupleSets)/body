{
  boolean tupleMemory=true;
  BetaMemory bm=am.getBetaMemory();
  RightTupleMemory rtm=bm.getRightTupleMemory();
  Accumulate accumulate=accNode.getAccumulate();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=accNode.getRawConstraints();
  FastIterator rightIt=accNode.getRightIterator(rtm);
  for (LeftTuple leftTuple=srcLeftTuples.getUpdateFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    final AccumulateContext accctx=(AccumulateContext)leftTuple.getObject();
    PropagationContext context=leftTuple.getPropagationContext();
    constraints.updateFromTuple(contextEntry,wm,leftTuple);
    RightTuple rightTuple=accNode.getFirstRightTuple(leftTuple,rtm,context,rightIt);
    LeftTuple childLeftTuple=leftTuple.getFirstChild();
    if (childLeftTuple != null && rtm.isIndexed() && !rightIt.isFullIterator() && (rightTuple == null || (rightTuple.getMemory() != childLeftTuple.getRightParent().getMemory()))) {
      removePreviousMatchesForLeftTuple(accNode,accumulate,leftTuple,wm,am,accctx,true);
      childLeftTuple=null;
    }
    if (rightTuple != null) {
      doLeftUpdatesProcessChildren(accNode,am,wm,bm,accumulate,constraints,rightIt,leftTuple,accctx,rightTuple,childLeftTuple);
    }
    leftTuple.clearStaged();
    trgLeftTuples.addUpdate(leftTuple);
    leftTuple=next;
  }
  constraints.resetTuple(contextEntry);
}
