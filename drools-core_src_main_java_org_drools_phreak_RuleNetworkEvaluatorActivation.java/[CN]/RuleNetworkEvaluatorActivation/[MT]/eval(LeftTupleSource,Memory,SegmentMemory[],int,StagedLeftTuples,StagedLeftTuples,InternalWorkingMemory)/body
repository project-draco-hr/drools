{
  StagedLeftTuples srcTuples=null;
  boolean foundSegmentTip=false;
  SegmentMemory smem=smems[smemIndex];
  while (true) {
    srcTuples=trgTuples;
    if (NodeTypeEnums.isTerminalNode(node)) {
      RuleTerminalNode rtn=rmem.getRuleTerminalNode();
      pRtnNode.doNode(rtn,wm,srcTuples);
      break;
    }
 else     if (NodeTypeEnums.RightInputAdaterNode == node.getType()) {
      return trgTuples;
    }
 else     if (nodeMem == null) {
      SegmentPropagator.propagate(smem,trgTuples,wm);
      smem=smems[smemIndex++];
      node=smem.getRootNode();
      nodeMem=smem.getNodeMemories().getFirst();
    }
    if (node == smem.getTipNode() && smem.getFirst() != null) {
      stagedLeftTuples=smem.getFirst().getStagedLeftTuples();
    }
 else {
      stagedLeftTuples=null;
    }
    trgTuples=new StagedLeftTuples();
    if (NodeTypeEnums.isBetaNode(node)) {
      BetaNode betaNode=(BetaNode)node;
      BetaMemory bm=(BetaMemory)nodeMem;
      if (betaNode.isRightInputIsRiaNode()) {
        StagedLeftTuples peerTuples=new StagedLeftTuples();
        SegmentPropagator.processPeers(srcTuples,peerTuples,betaNode);
        SegmentMemory subSmem=bm.getSubnetworkSegmentMemory();
        StagedLeftTuples subnetworkStaged=subSmem.getStagedLeftTuples();
        subnetworkStaged.addAllDeletes(srcTuples.getDeleteFirst());
        subnetworkStaged.addAllUpdates(srcTuples.getUpdateFirst());
        subnetworkStaged.addAllInserts(srcTuples.getInsertFirst());
        List<RuleMemory> ruleMemories=subSmem.getRuleMemories();
        RiaRuleMemory rm=null;
        if (ruleMemories.size() == 1) {
          rm=(RiaRuleMemory)ruleMemories.get(0);
        }
 else {
          for (int i=0, size=ruleMemories.size(); i < size; i++) {
            if (ruleMemories.get(i) instanceof RiaRuleMemory) {
              rm=(RiaRuleMemory)ruleMemories.get(i);
            }
          }
        }
        RightInputAdapterNode riaNode=(RightInputAdapterNode)betaNode.getRightInput();
        StagedLeftTuples riaStagedTuples=eval(subSmem.getRootNode(),subSmem.getNodeMemories().getFirst(),rm.getSegmentMemories(),0,srcTuples,null,wm);
        StagedRightTuples riaStageRight=bm.getStagedRightTuples();
        for (LeftTuple leftTuple=riaStagedTuples.getInsertFirst(); leftTuple != null; leftTuple=leftTuple.getStagedNext()) {
          InternalFactHandle handle=riaNode.createFactHandle(leftTuple,leftTuple.getPropagationContext(),wm);
          RightTuple rightTuple=betaNode.createRightTuple(handle,betaNode,leftTuple.getPropagationContext());
        }
      }
switch (node.getType()) {
case NodeTypeEnums.JoinNode:
        pJoinNode.doNode((JoinNode)node,node.getSinkPropagator().getFirstLeftTupleSink(),bm,wm,srcTuples,trgTuples,stagedLeftTuples);
      break;
case NodeTypeEnums.NotNode:
    pNotNode.doNode((NotNode)node,node.getSinkPropagator().getFirstLeftTupleSink(),bm,wm,srcTuples,trgTuples,stagedLeftTuples);
  break;
case NodeTypeEnums.ExistsNode:
pExistsNode.doNode((ExistsNode)node,node.getSinkPropagator().getFirstLeftTupleSink(),bm,wm,srcTuples,trgTuples,stagedLeftTuples);
break;
}
}
if (node.getSinkPropagator().size() > 1) {
stagedLeftTuples=new StagedLeftTuples();
LeftTupleSource subNetworkNode=(LeftTupleSource)node.getSinkPropagator().getFirstLeftTupleSink();
;
}
node=(LeftTupleSource)node.getSinkPropagator().getFirstLeftTupleSink();
nodeMem=nodeMem.getNext();
}
return null;
}
