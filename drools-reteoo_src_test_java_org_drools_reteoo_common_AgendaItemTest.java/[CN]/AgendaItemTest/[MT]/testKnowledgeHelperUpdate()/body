{
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  conf.setOption(RuleEngineOption.RETEOO);
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase(conf);
  StatefulKnowledgeSessionImpl ksession=(StatefulKnowledgeSessionImpl)kBase.newStatefulKnowledgeSession();
  InternalAgenda agenda=(InternalAgenda)ksession.getAgenda();
  AgendaItem item1=new RuleTerminalNodeLeftTuple();
  AgendaItem item2=new RuleTerminalNodeLeftTuple();
  AgendaItem item3=new RuleTerminalNodeLeftTuple();
  AgendaItem item4=new RuleTerminalNodeLeftTuple();
  agenda.createAgendaItem((LeftTuple)item1,0,null,null,null,null);
  agenda.createAgendaItem((LeftTuple)item2,0,null,null,null,null);
  agenda.createAgendaItem((LeftTuple)item3,0,null,null,null,null);
  agenda.createAgendaItem((LeftTuple)item4,0,null,null,null,null);
  DefaultKnowledgeHelper kcontext=new DefaultKnowledgeHelper(ksession);
  kcontext.setActivation(item1);
  kcontext.blockMatch(item2);
  kcontext.blockMatch(item3);
  kcontext.reset();
  kcontext.setActivation(item1);
  kcontext.blockMatch(item4);
  kcontext.cancelRemainingPreviousLogicalDependencies();
  assertEquals(1,item1.getBlocked().size());
  assertEquals(item4,((LogicalDependency)item1.getBlocked().getFirst()).getJustified());
  assertEquals(0,item2.getBlockers().size());
  assertEquals(0,item3.getBlockers().size());
  assertEquals(1,item4.getBlockers().size());
}
