{
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  conf.setOption(RuleEngineOption.RETEOO);
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase(conf);
  StatefulKnowledgeSessionImpl ksession=(StatefulKnowledgeSessionImpl)kBase.newStatefulKnowledgeSession();
  InternalAgenda agenda=(InternalAgenda)ksession.getAgenda();
  RuleTerminalNodeLeftTuple item1=new RuleTerminalNodeLeftTuple();
  RuleTerminalNodeLeftTuple item2=new RuleTerminalNodeLeftTuple();
  RuleTerminalNodeLeftTuple item3=new RuleTerminalNodeLeftTuple();
  agenda.createAgendaItem(item1,0,null,null,null);
  agenda.createAgendaItem(item2,0,null,null,null);
  agenda.createAgendaItem(item3,0,null,null,null);
  DefaultKnowledgeHelper kcontext=new DefaultKnowledgeHelper(ksession);
  kcontext.setActivation(item1);
  kcontext.blockMatch(item2);
  kcontext.blockMatch(item3);
  assertNull(item1.getBlockers());
  assertEquals(2,item1.getBlocked().size());
  assertEquals(1,item2.getBlockers().size());
  assertEquals(1,item3.getBlockers().size());
  kcontext.reset();
  kcontext.setActivation(item2);
  kcontext.blockMatch(item3);
  assertEquals(2,item1.getBlocked().size());
  assertEquals(1,item2.getBlocked().size());
  assertEquals(1,item2.getBlockers().size());
  assertEquals(2,item3.getBlockers().size());
}
