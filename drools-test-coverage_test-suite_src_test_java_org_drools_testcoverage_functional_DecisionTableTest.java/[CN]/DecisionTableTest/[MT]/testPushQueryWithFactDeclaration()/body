{
  final Resource decisionTable=KieBaseUtil.getDecisionTableResourceFromClasspath("queries.xls",getClass(),DecisionTableInputType.XLS);
  final KieBase kbase=KieBaseUtil.getKieBaseFromResources(true,decisionTable);
  final FactType locationType=kbase.getFactType(TestConstants.PACKAGE_FUNCTIONAL,"Location");
  final KieSession ksession=kbase.newKieSession();
  final TrackingAgendaEventListener listener=new TrackingAgendaEventListener();
  ksession.addEventListener(listener);
  final Person peter=new Person("Peter");
  peter.setLikes("steak");
  final Object steakLocation=locationType.newInstance();
  locationType.set(steakLocation,"thing","steak");
  locationType.set(steakLocation,"location","table");
  final Object tableLocation=locationType.newInstance();
  locationType.set(tableLocation,"thing","table");
  locationType.set(tableLocation,"location","office");
  ksession.insert(peter);
  final FactHandle steakHandle=ksession.insert(steakLocation);
  final FactHandle tableHandle=ksession.insert(tableLocation);
  ksession.insert("push");
  ksession.fireAllRules();
  Assertions.assertThat(listener.isRuleFired("testPushQueryRule")).isTrue();
  Assertions.assertThat(listener.isRuleFired("testPullQueryRule")).isFalse();
  listener.clear();
  final Object steakLocation2=locationType.newInstance();
  locationType.set(steakLocation2,"thing","steak");
  locationType.set(steakLocation2,"location","desk");
  final Object deskLocation=locationType.newInstance();
  locationType.set(deskLocation,"thing","desk");
  locationType.set(deskLocation,"location","office");
  ksession.insert(steakLocation2);
  ksession.insert(deskLocation);
  ksession.delete(steakHandle);
  ksession.delete(tableHandle);
  ksession.fireAllRules();
  Assertions.assertThat(listener.isRuleFired("testPushQueryRule")).isTrue();
  Assertions.assertThat(listener.isRuleFired("testPullQueryRule")).isFalse();
  listener.clear();
  final Person paul=new Person("Paul");
  paul.setLikes("steak");
  ksession.insert(paul);
  ksession.fireAllRules();
  Assertions.assertThat(listener.isRuleFired("testPushQueryRule")).isTrue();
  Assertions.assertThat(listener.isRuleFired("testPullQueryRule")).isFalse();
  listener.clear();
  ksession.dispose();
}
