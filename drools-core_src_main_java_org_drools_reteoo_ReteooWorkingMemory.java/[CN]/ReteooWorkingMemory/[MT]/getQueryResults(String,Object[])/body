{
  try {
    startOperation();
    Object object=new DroolsQuery(query,arguments);
    InternalFactHandle handle=this.handleFactory.newFactHandle(object,this.getObjectTypeConfigurationRegistry().getObjectTypeConf(EntryPoint.DEFAULT,object),this);
    insert(handle,object,null,null,this.typeConfReg.getObjectTypeConf(this.entryPoint,object));
    final QueryTerminalNode node=(QueryTerminalNode)this.queryResults.remove(query);
    Query queryObj=null;
    List list=null;
    if (node == null) {
      final org.drools.rule.Package[] pkgs=this.ruleBase.getPackages();
      for (int i=0; i < pkgs.length; i++) {
        final Rule rule=pkgs[i].getRule(query);
        if ((rule != null) && (rule instanceof Query)) {
          queryObj=(Query)rule;
          break;
        }
      }
      this.handleFactory.destroyFactHandle(handle);
      if (queryObj == null) {
        throw new IllegalArgumentException("Query '" + query + "' does not exist");
      }
      list=Collections.EMPTY_LIST;
    }
 else {
      list=(List)this.getNodeMemory(node);
      if (list == null) {
        list=Collections.EMPTY_LIST;
      }
 else {
        this.clearNodeMemory(node);
      }
      queryObj=(Query)node.getRule();
      this.handleFactory.destroyFactHandle(handle);
    }
    return new QueryResults(list,queryObj,this);
  }
  finally {
    endOperation();
  }
}
