{
synchronized (this.resourcesMap) {
    for (    Resource resource : changeSet.getResourcesAdded()) {
      if (((InternalResource)resource).getResourceType() == ResourceType.CHANGE_SET) {
        this.listener.debug("KnowledgeAgent processing sub ChangeSet=" + resource);
        processChangeSet(resource,changeSetState);
      }
 else       if (((InternalResource)resource).isDirectory()) {
        this.resourceDirectories.add(resource);
        this.listener.debug("KnowledgeAgent subscribing to directory=" + resource);
        this.notifier.subscribeResourceChangeListener(this,resource);
        for (        Resource child : ((InternalResource)resource).listResources()) {
          if (((InternalResource)child).isDirectory()) {
            continue;
          }
          ((InternalResource)child).setResourceType(((InternalResource)resource).getResourceType());
          if (this.resourcesMap.addResourceMapping(child,true) && changeSetState.incrementalBuild) {
            changeSetState.addedResources.add(child);
          }
        }
      }
 else {
        if (this.resourcesMap.addResourceMapping(resource,true) && changeSetState.incrementalBuild) {
          changeSetState.addedResources.add(resource);
        }
      }
    }
    for (    Resource resource : changeSet.getResourcesRemoved()) {
      if (((InternalResource)resource).getResourceType() == ResourceType.CHANGE_SET) {
        processChangeSet(resource,changeSetState);
      }
 else       if (changeSetState.scanDirectories && ((InternalResource)resource).isDirectory()) {
        this.listener.debug("KnowledgeAgent unsubscribing from directory resource=" + resource);
        this.resourceDirectories.remove(resource);
        this.notifier.unsubscribeResourceChangeListener(this,resource);
      }
 else {
        ResourceMapEntry removedEntry=this.resourcesMap.removeResourceMapping(resource,true);
        if (removedEntry != null && changeSetState.incrementalBuild) {
          changeSetState.removedResourceMappings.add(removedEntry);
        }
      }
    }
    for (    Resource resource : changeSet.getResourcesModified()) {
      if (((InternalResource)resource).getResourceType() == ResourceType.CHANGE_SET) {
        continue;
      }
 else       if (((InternalResource)resource).isDirectory()) {
        if (this.resourceDirectories.add(resource)) {
          this.listener.warning("KnowledgeAgent is subscribing to a modified directory=" + resource + " when it should have already been subscribed");
          this.notifier.subscribeResourceChangeListener(this,resource);
        }
        for (        Resource child : ((InternalResource)resource).listResources()) {
          if (((InternalResource)child).isDirectory()) {
            continue;
          }
          if (this.resourcesMap.addResourceMapping(child,true)) {
            ((InternalResource)child).setResourceType(((InternalResource)resource).getResourceType());
            if (changeSetState.incrementalBuild) {
              changeSetState.addedResources.add(child);
            }
          }
        }
      }
 else {
        ResourceMapEntry modifiedMapping=this.resourcesMap.removeResourceMapping(resource,false);
        if (modifiedMapping == null) {
          this.listener.warning("KnowledgeAgent subscribing to new resource=" + resource + ", though it was marked as modified.");
          this.resourcesMap.addResourceMapping(resource,true);
          if (changeSetState.incrementalBuild) {
            changeSetState.addedResources.add(resource);
          }
        }
 else {
          this.resourcesMap.addResourceMapping(resource,false);
          if (changeSetState.incrementalBuild) {
            changeSetState.modifiedResourceMappings.add(modifiedMapping);
          }
        }
      }
    }
    for (    Resource resource : changeSet.getKnowledgeDefinitionsRemoved().keySet()) {
      KnowledgeDefinition removedDefinition=this.resourcesMap.removeResourceMappingEntry(resource,changeSet.getKnowledgeDefinitionsRemoved().get(resource));
      if (removedDefinition == null) {
        this.listener.warning("Knowledge definition " + changeSet.getKnowledgeDefinitionsRemoved().get(resource) + " couldn't be removed from "+ resource);
      }
 else {
        changeSetState.removedKnowledgeDefinitions.put(resource,removedDefinition);
      }
    }
  }
}
