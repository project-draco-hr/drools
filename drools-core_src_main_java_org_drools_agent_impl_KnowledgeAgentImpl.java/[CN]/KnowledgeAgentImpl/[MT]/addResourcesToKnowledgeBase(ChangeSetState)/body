{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  List<Package> packages=new ArrayList<Package>();
  for (  Resource resource : changeSetState.addedResources) {
    KnowledgePackageImp createdPackage=this.createPackageFromResource(resource,kbuilder);
    changeSetState.createdPackages.put(resource,createdPackage);
  }
  for (  Map.Entry<Resource,KnowledgePackage> entry : changeSetState.createdPackages.entrySet()) {
    Resource resource=entry.getKey();
    this.listener.debug("KnowledgeAgent obtaining pkg resource=" + resource);
    try {
      Package pkg=((KnowledgePackageImp)entry.getValue()).pkg;
      for (      Rule rule : pkg.getRules()) {
        rule.setResource(resource);
      }
      packages.add(pkg);
      this.buildResourceMapping(pkg,resource);
    }
 catch (    Exception e) {
      this.listener.exception(new RuntimeException("KnowledgeAgent exception while trying to deserialize KnowledgeDefinitionsPackage  ",e));
    }
  }
  if (kbuilder != null) {
    if (kbuilder.hasErrors()) {
      this.listener.warning("KnowledgeAgent has KnowledgeBuilder errors ",kbuilder.getErrors());
    }
    this.listener.debug("KnowledgeAgent adding KnowledgePackages from KnowledgeBuilder");
    this.kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  }
  for (  Package pkg : packages) {
    this.listener.debug("KnowledgeAgent adding KnowledgeDefinitionsPackage " + pkg.getName());
    ((KnowledgeBaseImpl)this.kbase).ruleBase.addPackage(pkg);
  }
}
