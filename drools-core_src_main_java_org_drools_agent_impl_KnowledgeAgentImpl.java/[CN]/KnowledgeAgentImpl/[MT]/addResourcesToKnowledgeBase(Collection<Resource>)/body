{
  KnowledgeBuilder kbuilder=null;
  List<Package> packages=new ArrayList<Package>();
  for (  Resource resource : resources) {
    if (((InternalResource)resource).getResourceType() != ResourceType.PKG) {
      this.listener.debug("KnowledgeAgent building resource=" + resource);
      if (kbuilder == null) {
        kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
      }
      kbuilder.add(resource,((InternalResource)resource).getResourceType());
    }
 else {
      this.listener.debug("KnowledgeAgent obtaining pkg resource=" + resource);
      InputStream is=null;
      try {
        is=resource.getInputStream();
        Object object=DroolsStreamUtils.streamIn(is);
        Package pkg=null;
        if (object instanceof KnowledgePackage) {
          pkg=((KnowledgePackageImp)object).pkg;
        }
 else {
          pkg=(Package)object;
        }
        for (        Rule rule : pkg.getRules()) {
          rule.setResource(resource);
        }
        packages.add(pkg);
      }
 catch (      Exception e) {
        this.listener.exception(new RuntimeException("KnowledgeAgent exception while trying to deserialize KnowledgeDefinitionsPackage  ",e));
      }
 finally {
        try {
          if (is != null) {
            is.close();
          }
        }
 catch (        IOException e) {
          this.listener.exception(new RuntimeException("KnowledgeAgent exception while trying to close KnowledgeDefinitionsPackage  ",e));
        }
      }
    }
  }
  if (kbuilder != null) {
    if (kbuilder.hasErrors()) {
      this.listener.warning("KnowledgeAgent has KnowledgeBuilder errors ",kbuilder.getErrors());
    }
    this.listener.debug("KnowledgeAgent adding KnowledgePackages from KnowledgeBuilder");
    this.kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  }
  for (  Package pkg : packages) {
    this.listener.debug("KnowledgeAgent adding KnowledgeDefinitionsPackage " + pkg.getName());
    ((KnowledgeBaseImpl)this.kbase).ruleBase.addPackage(pkg);
  }
}
