{
  if (this.newInstance) {
    this.listener.warning("KnowledgeAgent incremental build of KnowledgeBase when newInstance is true");
  }
  KnowledgeBuilder kBuilder=createKBuilder();
synchronized (this.registeredResources) {
    this.listener.info("KnowledgeAgent performing an incremental build of the ChangeSet");
    if (this.kbase == null) {
      this.kbase=KnowledgeBaseFactory.newKnowledgeBase();
    }
    for (    Map.Entry<Resource,Set<KnowledgeDefinition>> entry : changeSetState.removedResourceMappings.entrySet()) {
      for (      KnowledgeDefinition kd : entry.getValue()) {
        removeKnowledgeDefinitionFromBase(kd);
      }
    }
    for (    Map.Entry<Resource,Set<KnowledgeDefinition>> entry : changeSetState.modifiedResourceMappings.entrySet()) {
      Collection<KnowledgePackage> newPackages=createPackageFromResource(entry.getKey());
      removeDeletedPackages(entry,newPackages);
      if (newPackages == null) {
        continue;
      }
      for (      KnowledgePackage pkage : newPackages) {
        KnowledgePackageImp newPackage=(KnowledgePackageImp)pkage;
        Set<KnowledgeDefinition> kdefs=getKnowledgeDefinitions(entry,newPackage);
        KnowledgePackageImp oldPackage=(KnowledgePackageImp)this.kbase.getKnowledgePackage(newPackage.getName());
        AbstractRuleBase abstractRuleBase=(AbstractRuleBase)((KnowledgeBaseImpl)this.kbase).ruleBase;
        CompositeClassLoader rootClassLoader=abstractRuleBase.getRootClassLoader();
        newPackage.pkg.getDialectRuntimeRegistry().onAdd(rootClassLoader);
        newPackage.pkg.getDialectRuntimeRegistry().onBeforeExecute();
        newPackage.pkg.getClassFieldAccessorStore().setClassFieldAccessorCache(abstractRuleBase.getClassFieldAccessorCache());
        newPackage.pkg.getClassFieldAccessorStore().wire();
        this.listener.debug("KnowledgeAgent: Diffing: " + entry.getKey());
        ResourceDiffProducer rdp=new BinaryResourceDiffProducerImpl();
        ResourceDiffResult diff=rdp.diff(kdefs,newPackage,oldPackage);
        for (        KnowledgeDefinition kd : diff.getRemovedDefinitions()) {
          this.listener.debug("KnowledgeAgent: Removing: " + kd);
          removeKnowledgeDefinitionFromBase(kd);
        }
        for (        KnowledgeDefinition knowledgeDefinition : diff.getUnmodifiedDefinitions()) {
          this.addDefinitionMapping(entry.getKey(),knowledgeDefinition,false);
        }
        Set<KnowledgePackage> set=changeSetState.createdPackages.get(entry.getKey());
        if (set == null) {
          set=new HashSet<KnowledgePackage>();
          changeSetState.createdPackages.put(entry.getKey(),set);
        }
        set.add(diff.getPkg());
      }
    }
    for (    Resource resource : changeSetState.addedResources) {
      Collection<KnowledgePackage> kpkgs=createPackageFromResource(resource,kBuilder);
      if (kpkgs == null || kpkgs.isEmpty()) {
        this.listener.warning("KnowledgeAgent: The resource didn't create any package: " + resource);
        continue;
      }
      changeSetState.createdPackages.put(resource,new HashSet<KnowledgePackage>(kpkgs));
    }
    changeSetState.addedResources.clear();
    changeSetState.modifiedResourceMappings.clear();
    addResourcesToKnowledgeBase(changeSetState);
  }
  this.listener.info("KnowledgeAgent incremental build of KnowledgeBase finished and in use");
}
