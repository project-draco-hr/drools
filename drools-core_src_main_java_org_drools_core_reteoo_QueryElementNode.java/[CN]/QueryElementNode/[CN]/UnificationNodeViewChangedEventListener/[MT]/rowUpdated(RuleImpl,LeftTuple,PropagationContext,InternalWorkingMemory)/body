{
  RightTuple rightTuple=(RightTuple)resultLeftTuple.getContextObject();
  if (rightTuple.getMemory() != null) {
    return;
  }
  rightTuple.setBlocked(null);
  resultLeftTuple.setContextObject(null);
  QueryTerminalNode node=resultLeftTuple.getTupleSink();
  Declaration[] decls=node.getRequiredDeclarations();
  InternalFactHandle rootHandle=resultLeftTuple.get(0);
  DroolsQuery dquery=(DroolsQuery)rootHandle.getObject();
  Object[] objects=new Object[dquery.getElements().length];
  Declaration decl;
  for (  int variable : this.variables) {
    decl=decls[variable];
    objects[variable]=decl.getValue(workingMemory,resultLeftTuple.get(decl).getObject());
  }
  QueryElementFactHandle handle=(QueryElementFactHandle)rightTuple.getFactHandle();
  handle.setRecency(workingMemory.getFactHandleFactory().getAtomicRecency().incrementAndGet());
  handle.setObject(objects);
  if (dquery.isOpen()) {
    rightTuple.setBlocked(resultLeftTuple);
    resultLeftTuple.setContextObject(rightTuple);
  }
  TupleSets<LeftTuple> leftTuples=dquery.getResultLeftTupleSets();
  LeftTuple childLeftTuple=rightTuple.getFirstChild();
switch (childLeftTuple.getStagedTypeForQueries()) {
case LeftTuple.INSERT:
    leftTuples.removeInsert(childLeftTuple);
  break;
case LeftTuple.UPDATE:
leftTuples.removeUpdate(childLeftTuple);
break;
}
leftTuples.addUpdate(childLeftTuple);
}
