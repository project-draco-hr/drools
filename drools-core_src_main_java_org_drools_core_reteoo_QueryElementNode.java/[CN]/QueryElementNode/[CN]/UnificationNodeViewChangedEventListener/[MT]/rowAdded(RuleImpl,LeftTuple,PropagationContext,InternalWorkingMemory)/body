{
  QueryTerminalNode node=resultLeftTuple.getTupleSink();
  QueryImpl query=node.getQuery();
  Declaration[] decls=node.getRequiredDeclarations();
  DroolsQuery dquery=(DroolsQuery)this.factHandle.getObject();
  Object[] objects=new Object[determineResultSize(query,dquery)];
  Declaration decl;
  for (  int variable : this.variables) {
    decl=decls[variable];
    objects[variable]=decl.getValue(workingMemory,resultLeftTuple.get(decl).getObject());
  }
  QueryElementFactHandle resultHandle=createQueryResultHandle(context,workingMemory,objects);
  RightTuple rightTuple=createResultRightTuple(resultHandle,resultLeftTuple,dquery.isOpen());
  boolean pass=true;
  if (query.isAbductive()) {
    AbductiveQuery aq=((AbductiveQuery)query);
    int numArgs=aq.getAbducibleArgs().length;
    Object[] constructorArgs=new Object[aq.getAbducibleArgs().length];
    for (int j=0; j < numArgs; j++) {
      int k=aq.mapArgToParam(j);
      if (objects[k] != null) {
        constructorArgs[j]=objects[k];
      }
 else       if (dquery.getElements()[k] != null) {
        constructorArgs[j]=dquery.getElements()[k];
      }
    }
    Object abduced=aq.abduce(constructorArgs);
    if (abduced != null) {
      boolean firstAssertion=true;
      ObjectStore store=workingMemory.getObjectStore();
      InternalFactHandle handle=store.getHandleForObject(abduced);
      if (handle != null) {
        abduced=handle.getObject();
        firstAssertion=false;
      }
 else {
        handle=((InternalWorkingMemoryActions)workingMemory).getTruthMaintenanceSystem().insert(abduced,MODE.POSITIVE.getId(),query,(RuleTerminalNodeLeftTuple)resultLeftTuple);
      }
      BeliefSet bs=handle.getEqualityKey() != null ? handle.getEqualityKey().getBeliefSet() : null;
      if (bs == null) {
        abduced=handle.getObject();
      }
 else {
        if (!bs.isPositive()) {
          pass=false;
        }
 else {
          if (!firstAssertion) {
            ((InternalWorkingMemoryActions)workingMemory).getTruthMaintenanceSystem().insert(abduced,MODE.POSITIVE.getId(),query,(RuleTerminalNodeLeftTuple)resultLeftTuple);
          }
        }
      }
    }
    objects[objects.length - 1]=abduced;
  }
  if (pass) {
    LeftTupleSink sink=dquery.getLeftTupleSink();
    LeftTuple childLeftTuple=sink.createLeftTuple(this.leftTuple,rightTuple,sink);
    boolean stagedInsertWasEmpty=dquery.getResultLeftTupleSets().addInsert(childLeftTuple);
    if (stagedInsertWasEmpty) {
      dquery.getQueryNodeMemory().setNodeDirtyWithoutNotify();
    }
  }
}
