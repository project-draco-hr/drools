{
  mockery.checking(new Expectations(){
{
      allowing(constraint).isAllowedCachedLeft(with(any(ContextEntry.class)),with(any(InternalFactHandle.class)));
      will(returnValue(true));
      allowing(constraint).isAllowedCachedRight(with(any(LeftTuple.class)),with(any(ContextEntry.class)));
      will(returnValue(true));
    }
  }
);
  final Field objectFfield=ObjectSource.class.getDeclaredField("sink");
  objectFfield.setAccessible(true);
  ObjectSinkPropagator objectSink=(ObjectSinkPropagator)objectFfield.get(this.objectSource);
  final Field tupleField=LeftTupleSource.class.getDeclaredField("sink");
  tupleField.setAccessible(true);
  LeftTupleSinkPropagator tupleSink=(LeftTupleSinkPropagator)tupleField.get(this.tupleSource);
  assertEquals(15,this.node.getId());
  assertNotNull(objectSink);
  assertNotNull(tupleSink);
  this.node.attach();
  objectSink=(ObjectSinkPropagator)objectFfield.get(this.objectSource);
  tupleSink=(LeftTupleSinkPropagator)tupleField.get(this.tupleSource);
  assertEquals(1,objectSink.getSinks().length);
  assertEquals(1,tupleSink.getSinks().length);
  assertSame(this.node,objectSink.getSinks()[0]);
  assertSame(this.node,tupleSink.getSinks()[0]);
}
