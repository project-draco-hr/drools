{
  FieldExtractor priceExtractor=new ClassFieldExtractor(Cheese.class,Cheese.getIndex(Cheese.class,"price"));
  Declaration price1Declaration=new Declaration(0,"price1",priceExtractor,0);
  Declaration price2Declaration=new Declaration(1,"price2",priceExtractor,1);
  PredicateExpression evaluator=new PredicateExpression(){
    public boolean evaluate(    Tuple tuple,    FactHandle factHandle,    Declaration declaration,    Declaration[] declarations,    WorkingMemory workingMemory){
      int price1=((Integer)declarations[0].getValue(workingMemory.getObject(tuple.get(declarations[0])))).intValue();
      int price2=((Integer)declaration.getValue(workingMemory.getObject(factHandle))).intValue();
      return (price2 == (price1 * 2));
    }
  }
;
  PredicateConstraint constraint=new PredicateConstraint(evaluator,price2Declaration,new Declaration[]{price1Declaration});
  this.node=new JoinNode(15,new MockTupleSource(5),new MockObjectSource(8),0,new BetaNodeBinder(constraint));
  this.node.addTupleSink(this.sink);
  this.memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
  Cheese cheddar=new Cheese("cheddar",5);
  FactHandleImpl f0=(FactHandleImpl)this.workingMemory.assertObject(cheddar);
  ReteTuple tuple1=new ReteTuple(0,f0,this.workingMemory);
  this.node.assertTuple(tuple1,this.context,this.workingMemory);
  Cheese brie=new Cheese("brie",10);
  FactHandleImpl f1=(FactHandleImpl)this.workingMemory.assertObject(brie);
  this.node.assertObject(f1,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  Object[] list=(Object[])this.sink.getAsserted().get(0);
  ReteTuple joinedTuple=(ReteTuple)list[0];
  assertEquals(new Cheese("cheddar",5),this.workingMemory.getObject(joinedTuple.get(0)));
  assertEquals(new Cheese("brie",10),this.workingMemory.getObject(joinedTuple.get(1)));
  Cheese stilton=new Cheese("stilton",12);
  FactHandleImpl f2=(FactHandleImpl)this.workingMemory.assertObject(stilton);
  ReteTuple tuple2=new ReteTuple(0,f2,this.workingMemory);
  this.node.assertTuple(tuple2,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  assertEquals(2,iteratorSize(this.memory.leftTupleIterator(context,workingMemory)));
  assertEquals(1,iteratorSize(this.memory.rightObjectIterator()));
  stilton=new Cheese("stilton",20);
  FactHandleImpl f3=new FactHandleImpl(3);
  this.workingMemory.putObject(f3,stilton);
  this.node.assertObject(f3,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  assertEquals(2,iteratorSize(this.memory.leftTupleIterator(context,workingMemory)));
  assertEquals(2,iteratorSize(this.memory.rightObjectIterator()));
}
