{
  FieldExtractor priceExtractor=new ClassFieldExtractor(Cheese.class,Cheese.getIndex(Cheese.class,"price"));
  Declaration string1Declaration=new Declaration(0,"price1",priceExtractor,3);
  Declaration string2Declaration=new Declaration(0,"price2",priceExtractor,9);
  PredicateEvaluator checkString=new PredicateEvaluator(){
    public boolean evaluate(    Tuple tuple,    Object object,    FactHandle handle,    Declaration declaration,    Declaration[] declarations){
      int price1=((Integer)tuple.get(declarations[0])).intValue();
      int price2=((Integer)declaration.getValue(object)).intValue();
      return (price2 == (price1 * 2));
    }
  }
;
  PredicateConstraint constraint=new PredicateConstraint(checkString,string1Declaration,new Declaration[]{string2Declaration});
  this.node=new JoinNode(15,new MockTupleSource(5),new MockObjectSource(8),3,new BetaNodeBinder(constraint));
  this.node.addTupleSink(this.sink);
  this.memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
  Cheese cheddar=new Cheese("cheddar",5);
  FactHandleImpl f0=new FactHandleImpl(0);
  this.workingMemory.putObject(f0,cheddar);
  ReteTuple tuple1=new ReteTuple(9,f0,this.workingMemory);
  this.node.assertTuple(tuple1,this.context,this.workingMemory);
  Cheese brie=new Cheese("brie",10);
  FactHandleImpl f1=new FactHandleImpl(1);
  this.workingMemory.putObject(f1,brie);
  this.node.assertObject(brie,f1,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  Object[] list=(Object[])this.sink.getAsserted().get(0);
  ReteTuple joinedTuple=(ReteTuple)list[0];
  assertEquals(new Cheese("brie",10),joinedTuple.get(3));
  assertEquals(new Cheese("cheddar",5),joinedTuple.get(9));
  Cheese stilton=new Cheese("stilton",12);
  FactHandleImpl f2=new FactHandleImpl(2);
  this.workingMemory.putObject(f2,stilton);
  ReteTuple tuple2=new ReteTuple(9,f2,this.workingMemory);
  this.node.assertTuple(tuple2,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  assertEquals(2,this.memory.leftMemorySize());
  assertEquals(1,this.memory.rightMemorySize());
  stilton=new Cheese("stilton",20);
  FactHandleImpl f3=new FactHandleImpl(3);
  this.workingMemory.putObject(f3,stilton);
  this.node.assertObject(stilton,f3,this.context,this.workingMemory);
  assertLength(1,this.sink.getAsserted());
  assertEquals(2,this.memory.leftMemorySize());
  assertEquals(2,this.memory.rightMemorySize());
}
