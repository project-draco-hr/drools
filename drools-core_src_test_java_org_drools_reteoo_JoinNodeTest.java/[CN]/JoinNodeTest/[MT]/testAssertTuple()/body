{
  mockery.checking(new Expectations(){
{
      allowing(constraint).isAllowedCachedLeft(with(any(ContextEntry.class)),with(any(InternalFactHandle.class)));
      will(returnValue(true));
      allowing(constraint).isAllowedCachedRight(with(any(LeftTuple.class)),with(any(ContextEntry.class)));
      will(returnValue(true));
    }
  }
);
  final DefaultFactHandle f0=new DefaultFactHandle(0,"cheese");
  final LeftTuple tuple0=new LeftTuple(f0,this.node,true);
  this.node.assertLeftTuple(tuple0,this.context,this.workingMemory);
  assertEquals(1,this.memory.getLeftTupleMemory().size());
  assertEquals(0,this.memory.getRightTupleMemory().size());
  final DefaultFactHandle f1=new DefaultFactHandle(1,"cheese");
  final LeftTuple tuple1=new LeftTuple(f1,this.node,true);
  this.node.assertLeftTuple(tuple1,this.context,this.workingMemory);
  assertEquals(2,this.memory.getLeftTupleMemory().size());
  LeftTuple leftTuple=this.memory.getLeftTupleMemory().getFirst(null);
  assertEquals(tuple1,leftTuple);
  assertEquals(tuple0,leftTuple.getNext());
}
