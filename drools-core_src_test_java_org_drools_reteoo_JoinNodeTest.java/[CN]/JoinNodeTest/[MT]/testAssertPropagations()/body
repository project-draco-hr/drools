{
  final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.insert("test0");
  this.node.assertObject(f0,this.context,this.workingMemory);
  final DefaultFactHandle f1=new DefaultFactHandle(1,"cheese");
  final LeftTuple tuple1=new LeftTuple(f1,this.node,true);
  this.node.assertLeftTuple(tuple1,this.context,this.workingMemory);
  assertEquals(1,this.sink.getAsserted().size());
  assertEquals(new LeftTuple(tuple1,f0.getRightTuple(),this.sink,true),((Object[])this.sink.getAsserted().get(0))[0]);
  final DefaultFactHandle f2=new DefaultFactHandle(2,"cheese");
  final LeftTuple tuple2=new LeftTuple(f2,this.node,true);
  this.node.assertLeftTuple(tuple2,this.context,this.workingMemory);
  assertEquals(2,this.sink.getAsserted().size());
  assertEquals(new LeftTuple(tuple2,f0.getRightTuple(),this.sink,true),((Object[])this.sink.getAsserted().get(1))[0]);
  final DefaultFactHandle f3=(DefaultFactHandle)this.workingMemory.insert("test2");
  this.node.assertObject(f3,this.context,this.workingMemory);
  assertEquals(4,this.sink.getAsserted().size());
  final List tuples=new ArrayList();
  tuples.add(((Object[])this.sink.getAsserted().get(2))[0]);
  tuples.add(((Object[])this.sink.getAsserted().get(3))[0]);
  assertTrue(tuples.contains(new LeftTuple(tuple1,f3.getRightTuple(),this.sink,true)));
  assertTrue(tuples.contains(new LeftTuple(tuple2,f3.getRightTuple(),this.sink,true)));
}
