{
  final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.assertObject("test0");
  this.node.assertObject(f0,this.context,this.workingMemory);
  final DefaultFactHandle f1=new DefaultFactHandle(1,"cheese");
  final ReteTuple tuple1=new ReteTuple(f1);
  this.node.assertTuple(tuple1,this.context,this.workingMemory);
  assertEquals(1,this.sink.getAsserted().size());
  assertEquals(new ReteTuple(tuple1,f0),((Object[])this.sink.getAsserted().get(0))[0]);
  final DefaultFactHandle f2=new DefaultFactHandle(2,"cheese");
  final ReteTuple tuple2=new ReteTuple(f2);
  this.node.assertTuple(tuple2,this.context,this.workingMemory);
  assertEquals(2,this.sink.getAsserted().size());
  assertEquals(new ReteTuple(tuple2,f0),((Object[])this.sink.getAsserted().get(1))[0]);
  final DefaultFactHandle f3=(DefaultFactHandle)this.workingMemory.assertObject("test2");
  this.node.assertObject(f3,this.context,this.workingMemory);
  assertEquals(4,this.sink.getAsserted().size());
  List tuples=new ArrayList();
  tuples.add(((Object[])this.sink.getAsserted().get(2))[0]);
  tuples.add(((Object[])this.sink.getAsserted().get(3))[0]);
  assertTrue(tuples.contains(new ReteTuple(tuple1,f3)));
  assertTrue(tuples.contains(new ReteTuple(tuple2,f3)));
}
