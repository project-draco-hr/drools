{
  mockery.checking(new Expectations(){
{
      allowing(constraint).isAllowedCachedLeft(with(any(ContextEntry.class)),with(any(InternalFactHandle.class)));
      will(returnValue(true));
      allowing(constraint).isAllowedCachedRight(with(any(LeftTuple.class)),with(any(ContextEntry.class)));
      will(returnValue(true));
    }
  }
);
  final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.insert("test0");
  this.node.assertObject(f0,this.context,this.workingMemory);
  assertEquals(0,this.memory.getLeftTupleMemory().size());
  assertEquals(1,this.memory.getRightTupleMemory().size());
  final DefaultFactHandle f1=(DefaultFactHandle)this.workingMemory.insert("test1");
  this.node.assertObject(f1,this.context,this.workingMemory);
  assertEquals(2,this.memory.getRightTupleMemory().size());
  RightTuple rightTuple=this.memory.getRightTupleMemory().getFirst(new LeftTuple(f0,this.node,true));
  final InternalFactHandle rf1=rightTuple.getFactHandle();
  final InternalFactHandle rf0=((RightTuple)rightTuple.getNext()).getFactHandle();
  assertEquals(f0,rf0);
  assertEquals(f1,rf1);
}
