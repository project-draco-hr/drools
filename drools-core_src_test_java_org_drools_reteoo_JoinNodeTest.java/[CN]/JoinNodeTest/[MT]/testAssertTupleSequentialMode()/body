{
  when(constraint.isAllowedCachedLeft(any(ContextEntry.class),any(InternalFactHandle.class))).thenReturn(true);
  when(constraint.isAllowedCachedRight(any(LeftTuple.class),any(ContextEntry.class))).thenReturn(true);
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  conf.setSequential(true);
  this.workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase(conf));
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  BuildContext buildContext=new BuildContext(ruleBase,ruleBase.getReteooBuilder().getIdGenerator());
  buildContext.setTupleMemoryEnabled(false);
  buildContext.setObjectTypeNodeMemoryEnabled(false);
  this.node=new JoinNode(15,this.tupleSource,this.objectSource,new DefaultBetaConstraints(new BetaNodeFieldConstraint[]{this.constraint},conf),Behavior.EMPTY_BEHAVIOR_LIST,buildContext);
  this.node.addTupleSink(this.sink);
  this.memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
  final DefaultFactHandle f0=new DefaultFactHandle(0,"cheese");
  final LeftTuple tuple0=new LeftTuple(f0,this.node,true);
  this.node.assertObject(f0,this.context,this.workingMemory);
  this.node.assertLeftTuple(tuple0,this.context,this.workingMemory);
  assertEquals(1,this.sink.getAsserted().size());
  assertNull(this.memory.getLeftTupleMemory());
  assertEquals(1,this.memory.getRightTupleMemory().size());
  assertEquals(new LeftTuple(tuple0,f0.getFirstRightTuple(),this.sink,true),((Object[])this.sink.getAsserted().get(0))[0]);
}
