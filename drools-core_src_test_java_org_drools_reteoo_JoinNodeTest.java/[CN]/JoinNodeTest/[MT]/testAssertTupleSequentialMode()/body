{
  RuleBaseConfiguration conf=new RuleBaseConfiguration();
  conf.setSequential(true);
  this.workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase(conf));
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  BuildContext buildContext=new BuildContext(ruleBase,ruleBase.getReteooBuilder().getIdGenerator());
  buildContext.setHasLeftMemory(false);
  buildContext.setHasObjectTypeMemory(false);
  this.node=new JoinNode(15,this.tupleSource,this.objectSource,new DefaultBetaConstraints(new BetaNodeFieldConstraint[]{this.constraint},conf),buildContext);
  this.node.addTupleSink(this.sink);
  this.memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
  final DefaultFactHandle f0=new DefaultFactHandle(0,"cheese");
  final ReteTuple tuple0=new ReteTuple(f0);
  this.node.assertObject(f0,this.context,this.workingMemory);
  this.node.assertTuple(tuple0,this.context,this.workingMemory);
  assertEquals(1,this.sink.getAsserted().size());
  assertNull(this.memory.getTupleMemory());
  assertEquals(1,this.memory.getFactHandleMemory().size());
  assertEquals(new ReteTuple(tuple0,f0),((Object[])this.sink.getAsserted().get(0))[0]);
}
