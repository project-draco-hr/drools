{
  FactHandleImpl f0=(FactHandleImpl)this.workingMemory.assertObject("test0");
  this.node.assertObject(f0,this.context,this.workingMemory);
  FactHandleImpl f1=(FactHandleImpl)this.workingMemory.assertObject("test1");
  ReteTuple tuple1=new ReteTuple(f1);
  this.node.assertTuple(tuple1,this.context,this.workingMemory);
  FactHandleImpl f2=(FactHandleImpl)this.workingMemory.assertObject("test2");
  ReteTuple tuple2=new ReteTuple(f2);
  this.node.assertTuple(tuple2,this.context,this.workingMemory);
  FactHandleImpl f3=(FactHandleImpl)this.workingMemory.assertObject("test3");
  this.node.assertObject(f3,this.context,this.workingMemory);
  FactHandleImpl f4=(FactHandleImpl)this.workingMemory.assertObject("test4");
  this.node.assertObject(f4,this.context,this.workingMemory);
  assertLength(6,this.sink.getAsserted());
  this.node.retractObject(f0,this.context,this.workingMemory);
  assertLength(2,this.sink.getRetracted());
  assertNull(tuple1.getTupleMatches().get(f0));
  assertNull(tuple2.getTupleMatches().get(f0));
  this.node.retractTuple(tuple2,this.context,this.workingMemory);
  ObjectMatches matches=this.getMatchesFor(tuple2,f3);
  for (TupleMatch match=matches.getFirstTupleMatch(); match != null; match=(TupleMatch)match.getNext()) {
    assertNotSame(tuple2,match.getTuple());
  }
  matches=this.getMatchesFor(tuple2,f4);
  for (TupleMatch match=matches.getFirstTupleMatch(); match != null; match=(TupleMatch)match.getNext()) {
    assertNotSame(tuple2,match.getTuple());
  }
  assertLength(4,this.sink.getRetracted());
}
