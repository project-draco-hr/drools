{
  final DefaultFactHandle f0=(DefaultFactHandle)this.workingMemory.assertObject("test0");
  this.node.assertObject(f0,this.context,this.workingMemory);
  final DefaultFactHandle f1=(DefaultFactHandle)this.workingMemory.assertObject("test1");
  final ReteTuple tuple1=new ReteTuple(f1);
  this.node.assertTuple(tuple1,this.context,this.workingMemory);
  final DefaultFactHandle f2=(DefaultFactHandle)this.workingMemory.assertObject("test2");
  final ReteTuple tuple2=new ReteTuple(f2);
  this.node.assertTuple(tuple2,this.context,this.workingMemory);
  final DefaultFactHandle f3=(DefaultFactHandle)this.workingMemory.assertObject("test3");
  this.node.assertObject(f3,this.context,this.workingMemory);
  final DefaultFactHandle f4=(DefaultFactHandle)this.workingMemory.assertObject("test4");
  this.node.assertObject(f4,this.context,this.workingMemory);
  assertLength(6,this.sink.getAsserted());
  final BetaMemory memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
  assertTrue(memory.getFactHandleMemory().contains(f0));
  this.node.retractObject(f0,this.context,this.workingMemory);
  assertLength(2,this.sink.getRetracted());
  List tuples=new ArrayList();
  tuples.add(((Object[])this.sink.getRetracted().get(0))[0]);
  tuples.add(((Object[])this.sink.getRetracted().get(1))[0]);
  assertTrue(tuples.contains(new ReteTuple(tuple1,f0)));
  assertTrue(tuples.contains(new ReteTuple(tuple1,f0)));
  assertFalse(memory.getFactHandleMemory().contains(f0));
  this.node.retractTuple(tuple2,this.context,this.workingMemory);
  assertEquals(4,this.sink.getRetracted().size());
  tuples=new ArrayList();
  tuples.add(((Object[])this.sink.getRetracted().get(2))[0]);
  tuples.add(((Object[])this.sink.getRetracted().get(3))[0]);
  assertTrue(tuples.contains(new ReteTuple(tuple2,f3)));
  assertTrue(tuples.contains(new ReteTuple(tuple2,f4)));
}
