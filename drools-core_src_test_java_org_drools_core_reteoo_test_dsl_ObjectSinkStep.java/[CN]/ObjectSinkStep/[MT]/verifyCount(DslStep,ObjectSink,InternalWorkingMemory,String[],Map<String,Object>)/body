{
  int times=Integer.valueOf(cmd[3]);
  VerificationMode counter;
  if (times >= 0) {
    counter=times(times);
  }
 else {
    counter=atLeastOnce();
  }
  try {
    ArgumentCaptor<InternalFactHandle> captor=ArgumentCaptor.forClass(InternalFactHandle.class);
    if ("assert".equals(cmd[1])) {
      verify(node,counter).assertObject(captor.capture(),any(PropagationContext.class),same(wm));
    }
 else     if ("modify".equals(cmd[1])) {
      verify(node,counter).modifyObject(captor.capture(),any(ModifyPreviousTuples.class),any(PropagationContext.class),same(wm));
    }
 else {
      throw new IllegalArgumentException("line " + step.getLine() + ": command does not exist "+ Arrays.toString(cmd));
    }
    String key=getCaptorKey(node,cmd);
    context.put(key,captor);
  }
 catch (  MockitoAssertionError e) {
    AssertionError ae=new AssertionError("line " + step.getLine() + ": verify failed: "+ e.getMessage());
    ae.setStackTrace(e.getStackTrace());
    throw ae;
  }
}
