{
  RuleFlowProcess process=new RuleFlowProcess();
  process.setId("org.drools.process.event");
  process.setName("Event Process");
  List<Variable> variables=new ArrayList<Variable>();
  Variable variable=new Variable();
  variable.setName("event");
  ObjectDataType personDataType=new ObjectDataType();
  personDataType.setClassName("org.drools.Person");
  variable.setType(personDataType);
  variables.add(variable);
  process.getVariableScope().setVariables(variables);
  StartNode startNode=new StartNode();
  startNode.setName("Start");
  startNode.setId(1);
  process.addNode(startNode);
  MilestoneNode milestoneNode=new MilestoneNode();
  milestoneNode.setName("Milestone");
  milestoneNode.setConstraint("eval(false)");
  milestoneNode.setId(2);
  process.addNode(milestoneNode);
  new ConnectionImpl(startNode,Node.CONNECTION_DEFAULT_TYPE,milestoneNode,Node.CONNECTION_DEFAULT_TYPE);
  EndNode endNode=new EndNode();
  endNode.setName("EndNode");
  endNode.setId(3);
  process.addNode(endNode);
  new ConnectionImpl(milestoneNode,Node.CONNECTION_DEFAULT_TYPE,endNode,Node.CONNECTION_DEFAULT_TYPE);
  EventNode eventNode=new EventNode();
  EventTypeFilter eventFilter=new EventTypeFilter();
  eventFilter.setType("myEvent");
  eventNode.addEventFilter(eventFilter);
  eventNode.setVariableName("event");
  eventNode.setId(4);
  process.addNode(eventNode);
  final List<String> myList=new ArrayList<String>();
  ActionNode actionNode=new ActionNode();
  actionNode.setName("Print");
  DroolsAction action=new DroolsConsequenceAction("java",null);
  action.setMetaData("Action",new Action(){
    public void execute(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory,    ActionContext context) throws Exception {
      System.out.println("Detected event for person " + ((Person)context.getVariable("event")).getName());
      myList.add("Executed action");
    }
  }
);
  actionNode.setAction(action);
  actionNode.setId(5);
  process.addNode(actionNode);
  new ConnectionImpl(eventNode,Node.CONNECTION_DEFAULT_TYPE,actionNode,Node.CONNECTION_DEFAULT_TYPE);
  EndNode endNode2=new EndNode();
  endNode2.setName("EndNode");
  endNode2.setTerminate(false);
  endNode2.setId(6);
  process.addNode(endNode2);
  new ConnectionImpl(actionNode,Node.CONNECTION_DEFAULT_TYPE,endNode2,Node.CONNECTION_DEFAULT_TYPE);
  AbstractRuleBase ruleBase=(AbstractRuleBase)RuleBaseFactory.newRuleBase();
  ruleBase.addProcess(process);
  InternalWorkingMemory workingMemory=new ReteooWorkingMemory(1,ruleBase);
  ProcessInstance processInstance=workingMemory.startProcess("org.drools.process.event");
  assertEquals(0,myList.size());
  Person jack=new Person();
  jack.setName("Jack");
  processInstance.signalEvent("myEvent",jack);
  assertEquals(1,myList.size());
  Person john=new Person();
  john.setName("John");
  processInstance.signalEvent("myEvent",john);
  assertEquals(2,myList.size());
}
