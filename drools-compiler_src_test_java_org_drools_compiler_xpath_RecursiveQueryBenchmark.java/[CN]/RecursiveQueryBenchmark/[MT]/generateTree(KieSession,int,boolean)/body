{
  final Random RANDOM=new Random(0);
  Node root=new Node(1);
  root.setRoot(true);
  ksession.insert(root);
  List<Node> nodes=new ArrayList<Node>(n);
  for (int i=0; i < n; i++) {
    Node node=new Node(i / 10);
    nodes.add(node);
  }
  List<Node> nodesInTree=new ArrayList<Node>(n);
  nodesInTree.add(root);
  while (!nodes.isEmpty()) {
    Node parent=nodesInTree.get(RANDOM.nextInt(nodesInTree.size()));
    Node node=nodes.remove(RANDOM.nextInt(nodes.size()));
    Edge edge=new Edge(parent,node);
    parent.addOutEdge(edge);
    nodesInTree.add(node);
    if (insertAll) {
      ksession.insert(edge);
      ksession.insert(node);
    }
  }
  return root;
}
