{
  try {
    int _type=LITERAL;
    int _channel=DEFAULT_TOKEN_CHANNEL;
{
      int cnt4=0;
      loop4:       do {
        int alt4=9;
        alt4=dfa4.predict(input);
switch (alt4) {
case 1:
{
            matchRange('a','z');
            if (state.failed)             return;
          }
        break;
case 2:
{
        matchRange('A','Z');
        if (state.failed)         return;
      }
    break;
case 3:
{
    match('_');
    if (state.failed)     return;
  }
break;
case 4:
{
matchRange('0','9');
if (state.failed) return;
}
break;
case 5:
{
matchRange('\u00C0','\u00FF');
if (state.failed) return;
}
break;
case 6:
{
mMISC();
if (state.failed) return;
}
break;
case 7:
{
mEscapeSequence();
if (state.failed) return;
}
break;
case 8:
{
mDOT();
if (state.failed) return;
}
break;
default :
if (cnt4 >= 1) break loop4;
if (state.backtracking > 0) {
state.failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(4,input);
throw eee;
}
cnt4++;
}
 while (true);
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
}
