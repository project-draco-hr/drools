{
  int alt5=13;
switch (input.LA(1)) {
case '\t':
case '\f':
case ' ':
{
      alt5=1;
    }
  break;
case '\n':
case '\r':
{
  alt5=2;
}
break;
case '[':
{
alt5=3;
}
break;
case ']':
{
alt5=4;
}
break;
case '{':
{
alt5=5;
}
break;
case '}':
{
alt5=6;
}
break;
case '=':
{
alt5=7;
}
break;
case '.':
{
int LA5_8=input.LA(2);
if (((LA5_8 >= '!' && LA5_8 <= '\"') || (LA5_8 >= '$' && LA5_8 <= '+') || (LA5_8 >= '-' && LA5_8 <= '9')|| (LA5_8 >= ';' && LA5_8 <= '<')|| (LA5_8 >= '>' && LA5_8 <= 'Z')|| LA5_8 == '\\' || (LA5_8 >= '^' && LA5_8 <= '_') || (LA5_8 >= 'a' && LA5_8 <= 'z') || LA5_8 == '|' || (LA5_8 >= '\u00C0' && LA5_8 <= '\u00FF'))) {
alt5=13;
}
 else {
alt5=8;
}
}
break;
case '#':
{
int LA5_9=input.LA(2);
if (((LA5_9 >= '\u0000' && LA5_9 <= '\uFFFE'))) {
alt5=12;
}
 else {
alt5=9;
}
}
break;
case ':':
{
alt5=10;
}
break;
case ',':
{
alt5=11;
}
break;
case '!':
case '\"':
case '$':
case '%':
case '&':
case '\'':
case '(':
case ')':
case '*':
case '+':
case '-':
case '/':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case ';':
case '<':
case '>':
case '?':
case '@':
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
case 'G':
case 'H':
case 'I':
case 'J':
case 'K':
case 'L':
case 'M':
case 'N':
case 'O':
case 'P':
case 'Q':
case 'R':
case 'S':
case 'T':
case 'U':
case 'V':
case 'W':
case 'X':
case 'Y':
case 'Z':
case '\\':
case '^':
case '_':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'g':
case 'h':
case 'i':
case 'j':
case 'k':
case 'l':
case 'm':
case 'n':
case 'o':
case 'p':
case 'q':
case 'r':
case 's':
case 't':
case 'u':
case 'v':
case 'w':
case 'x':
case 'y':
case 'z':
case '|':
case '\u00C0':
case '\u00C1':
case '\u00C2':
case '\u00C3':
case '\u00C4':
case '\u00C5':
case '\u00C6':
case '\u00C7':
case '\u00C8':
case '\u00C9':
case '\u00CA':
case '\u00CB':
case '\u00CC':
case '\u00CD':
case '\u00CE':
case '\u00CF':
case '\u00D0':
case '\u00D1':
case '\u00D2':
case '\u00D3':
case '\u00D4':
case '\u00D5':
case '\u00D6':
case '\u00D7':
case '\u00D8':
case '\u00D9':
case '\u00DA':
case '\u00DB':
case '\u00DC':
case '\u00DD':
case '\u00DE':
case '\u00DF':
case '\u00E0':
case '\u00E1':
case '\u00E2':
case '\u00E3':
case '\u00E4':
case '\u00E5':
case '\u00E6':
case '\u00E7':
case '\u00E8':
case '\u00E9':
case '\u00EA':
case '\u00EB':
case '\u00EC':
case '\u00ED':
case '\u00EE':
case '\u00EF':
case '\u00F0':
case '\u00F1':
case '\u00F2':
case '\u00F3':
case '\u00F4':
case '\u00F5':
case '\u00F6':
case '\u00F7':
case '\u00F8':
case '\u00F9':
case '\u00FA':
case '\u00FB':
case '\u00FC':
case '\u00FD':
case '\u00FE':
case '\u00FF':
{
alt5=13;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("1:1: Tokens : ( WS | EOL | LEFT_SQUARE | RIGHT_SQUARE | LEFT_CURLY | RIGHT_CURLY | EQUALS | DOT | POUND | COLON | COMMA | LINE_COMMENT | LITERAL );",5,0,input);
throw nvae;
}
switch (alt5) {
case 1:
{
mWS();
if (failed) return;
}
break;
case 2:
{
mEOL();
if (failed) return;
}
break;
case 3:
{
mLEFT_SQUARE();
if (failed) return;
}
break;
case 4:
{
mRIGHT_SQUARE();
if (failed) return;
}
break;
case 5:
{
mLEFT_CURLY();
if (failed) return;
}
break;
case 6:
{
mRIGHT_CURLY();
if (failed) return;
}
break;
case 7:
{
mEQUALS();
if (failed) return;
}
break;
case 8:
{
mDOT();
if (failed) return;
}
break;
case 9:
{
mPOUND();
if (failed) return;
}
break;
case 10:
{
mCOLON();
if (failed) return;
}
break;
case 11:
{
mCOMMA();
if (failed) return;
}
break;
case 12:
{
mLINE_COMMENT();
if (failed) return;
}
break;
case 13:
{
mLITERAL();
if (failed) return;
}
break;
}
}
