{
  String str="package org.drools.compiler.test\n" + "declare Event\n" + "   @role(event)\n"+ "   name : String\n"+ "end\n"+ "declare Monitor\n"+ "   @role(event)\n"+ "   event : Event\n"+ "   name : String\n"+ "end\n"+ "\n"+ "rule \"start monitoring\"\n"+ "when\n"+ "    $e : Event( $in : name )\n"+ "    not Monitor( name == $in )\n"+ "then\n"+ "    Monitor m = new Monitor( $e, $in );\n"+ "    insert( m );\n"+ "end\n"+ "\n"+ "rule \"stop monitoring\"\n"+ "timer( int: 1s )\n"+ "when\n"+ "    $m : Monitor( $in : name )\n"+ "    $e : Event( name == $in )\n"+ "then\n"+ "    retract( $m );\n"+ "    retract( $m.getEvent() );\n"+ "end\n"+ "rule \"halt\"\n"+ "salience -1\n"+ "when\n"+ "    not Event( )\n"+ "then\n"+ "    drools.halt();\n"+ "end\n";
  KieBaseConfiguration kBaseConfig=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kBaseConfig.setOption(EventProcessingOption.STREAM);
  KnowledgeBase kbase=loadKnowledgeBaseFromString(kBaseConfig,str);
  StatefulKnowledgeSession ksession=createKnowledgeSession(kbase);
  ksession.addEventListener(new org.kie.api.event.rule.DebugAgendaEventListener());
  FactType eventType=kbase.getFactType("org.drools.compiler.test","Event");
  Object event=eventType.newInstance();
  eventType.set(event,"name","myName");
  ksession.insert(event);
  ksession.fireUntilHalt();
}
