{
  String str="package org.drools.compiler\n" + "declare StockTick\n" + "        @role ( event )\n"+ "end\n"+ "rule R1 salience 100\n"+ "    when\n"+ "        $s1 : StockTick( company == 'RHT', price == 10 ) from entry-point ep1\n"+ "    then\n"+ "        StockTick s = $s1;\n"+ "        modify( s ) { setPrice( 50 ) };\n"+ "end\n"+ "rule R2 salience 90\n"+ "    when\n"+ "        $s1 : StockTick( company == 'RHT', price == 10 ) from entry-point ep2\n"+ "    then\n"+ "        StockTick s = $s1;\n"+ "        modify( s ) { setPrice( 50 ) };\n"+ "end\n"+ "rule R3 salience 80\n"+ "    when\n"+ "        $s1 : StockTick( company == 'RHT', price == 10 ) from entry-point ep3\n"+ "    then\n"+ "        StockTick s = $s1;\n"+ "        modify( s ) { setPrice( 50 ) };\n"+ "end\n";
  KnowledgeBase kbase=loadKnowledgeBaseFromString((KieBaseConfiguration)null,str);
  StatefulKnowledgeSession ksession=createKnowledgeSession(kbase);
  org.kie.api.event.rule.AgendaEventListener ael=mock(org.kie.api.event.rule.AgendaEventListener.class);
  ksession.addEventListener(ael);
  EntryPoint ep1=ksession.getEntryPoint("ep1");
  EntryPoint ep2=ksession.getEntryPoint("ep2");
  EntryPoint ep3=ksession.getEntryPoint("ep3");
  ep1.insert(new StockTick(1,"RHT",10,1000));
  ep2.insert(new StockTick(1,"RHT",10,1000));
  ep3.insert(new StockTick(1,"RHT",10,1000));
  int rulesFired=ksession.fireAllRules();
  assertEquals(3,rulesFired);
  ArgumentCaptor<org.kie.api.event.rule.AfterMatchFiredEvent> captor=ArgumentCaptor.forClass(org.kie.api.event.rule.AfterMatchFiredEvent.class);
  verify(ael,times(3)).afterMatchFired(captor.capture());
  List<org.kie.api.event.rule.AfterMatchFiredEvent> aafe=captor.getAllValues();
  Assert.assertThat(aafe.get(0).getMatch().getRule().getName(),is("R1"));
  Assert.assertThat(aafe.get(1).getMatch().getRule().getName(),is("R2"));
  Assert.assertThat(aafe.get(2).getMatch().getRule().getName(),is("R3"));
}
