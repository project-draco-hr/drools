{
  String drl="package org.drools.compiler\n" + "declare StockTick\n" + "    @role(event)\n"+ "end\n"+ "declare window RedHatTicks\n"+ "    StockTick( company == 'RHT' )\n"+ "               over window:length(5)\n"+ "               from entry-point ticks\n"+ "end\n"+ "rule X\n"+ "when\n"+ "    accumulate( $s : StockTick( price > 20 ) from window RedHatTicks,\n"+ "                $sum : sum( $s.getPrice() ),\n"+ "                $cnt : count( $s ) )\n"+ "then\n"+ "end\n";
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(EventProcessingOption.STREAM);
  KnowledgeBase kbase=loadKnowledgeBaseFromString(kconf,drl);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  AgendaEventListener ael=mock(AgendaEventListener.class);
  ksession.addEventListener(ael);
  SessionEntryPoint ep=ksession.getEntryPoint("ticks");
  ep.insert(new StockTick(1,"ACME",20,1000));
  ep.insert(new StockTick(2,"RHT",20,1000));
  ep.insert(new StockTick(3,"RHT",30,1000));
  ep.insert(new StockTick(4,"ACME",30,1000));
  ep.insert(new StockTick(5,"RHT",25,1000));
  ep.insert(new StockTick(6,"ACME",10,1000));
  ep.insert(new StockTick(7,"RHT",10,1000));
  ep.insert(new StockTick(8,"RHT",40,1000));
  ksession.fireAllRules();
  ArgumentCaptor<org.kie.event.rule.AfterMatchFiredEvent> captor=ArgumentCaptor.forClass(org.kie.event.rule.AfterMatchFiredEvent.class);
  verify(ael,times(1)).afterMatchFired(captor.capture());
  AfterMatchFiredEvent aafe=captor.getValue();
  Assert.assertThat(((Number)aafe.getMatch().getDeclarationValue("$sum")).intValue(),is(95));
  Assert.assertThat(((Number)aafe.getMatch().getDeclarationValue("$cnt")).intValue(),is(3));
}
