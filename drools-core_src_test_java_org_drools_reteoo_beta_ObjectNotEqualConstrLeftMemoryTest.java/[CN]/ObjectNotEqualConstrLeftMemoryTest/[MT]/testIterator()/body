{
  try {
    this.memory.add(this.workingMemory,this.tuple0);
    this.memory.add(this.workingMemory,this.tuple1);
    Assert.assertEquals("Memory should have size 2",2,this.memory.size());
    Iterator iterator=this.memory.iterator(this.workingMemory,this.f0);
    Assert.assertTrue("There should be a next element",iterator.hasNext());
    final ReteTuple t1=(ReteTuple)iterator.next();
    Assert.assertSame("The first object to return should have been tuple1",this.tuple1,t1);
    iterator.remove();
    Assert.assertEquals("Memory should have size 1",1,this.memory.size());
    Assert.assertFalse("There should not be a next element",iterator.hasNext());
    try {
      iterator.next();
      Assert.fail("Iterator is supposed to throw an Exception when there are no more elements");
    }
 catch (    final NoSuchElementException nse) {
    }
    final DummyValueObject obj2=new DummyValueObject(false,"string3",30,"object3");
    final DefaultFactHandle f2=(DefaultFactHandle)this.factory.newFactHandle(obj2);
    iterator=this.memory.iterator(this.workingMemory,f2);
    Assert.assertTrue("There should be a next element",iterator.hasNext());
    final ReteTuple t0=(ReteTuple)iterator.next();
    Assert.assertSame("The first object to return should have been tuple0",this.tuple0,t0);
    Assert.assertFalse("There should not be a next element",iterator.hasNext());
    try {
      iterator.next();
      Assert.fail("Iterator is supposed to throw an Exception when there are no more elements");
    }
 catch (    final NoSuchElementException nse) {
    }
  }
 catch (  final Exception e) {
    e.printStackTrace();
    Assert.fail("Memory is not supposed to throw any exception during iteration");
  }
}
