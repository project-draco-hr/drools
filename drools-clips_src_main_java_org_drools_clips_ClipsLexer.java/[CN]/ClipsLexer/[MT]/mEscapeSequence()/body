{
  try {
    int alt11=3;
    int LA11_0=input.LA(1);
    if ((LA11_0 == '\\')) {
switch (input.LA(2)) {
case '\"':
case '\'':
case '\\':
case 'b':
case 'f':
case 'n':
case 'r':
case 't':
{
          alt11=1;
        }
      break;
case 'u':
{
      alt11=2;
    }
  break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
{
  alt11=3;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",11,1,input);
throw nvae;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",11,0,input);
throw nvae;
}
switch (alt11) {
case 1:
{
match('\\');
if (state.failed) return;
if (input.LA(1) == '\"' || input.LA(1) == '\'' || input.LA(1) == '\\' || input.LA(1) == 'b' || input.LA(1) == 'f' || input.LA(1) == 'n' || input.LA(1) == 'r' || input.LA(1) == 't') {
input.consume();
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
case 2:
{
mUnicodeEscape();
if (state.failed) return;
}
break;
case 3:
{
mOctalEscape();
if (state.failed) return;
}
break;
}
}
  finally {
}
}
