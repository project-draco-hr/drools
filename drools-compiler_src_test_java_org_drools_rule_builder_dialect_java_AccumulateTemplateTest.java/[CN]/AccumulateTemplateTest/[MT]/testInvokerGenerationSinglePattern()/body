{
  final String className="accumulate0";
  final String[] declarationTypes=new String[]{"String","int"};
  final Declaration[] declarations=new Declaration[]{new Declaration("name",store.getReader(Person.class,"name",getClass().getClassLoader()),null),new Declaration("age",store.getReader(Person.class,"age",getClass().getClassLoader()),null)};
  final Declaration[] inner=new Declaration[]{new Declaration("cheese",new PatternExtractor(new ClassObjectType(Cheese.class)),null),new Declaration("price",store.getReader(Cheese.class,"price",getClass().getClassLoader()),null)};
  final String[] globals=new String[]{"aGlobal","anotherGlobal"};
  final List globalTypes=Arrays.asList(new String[]{"String","String"});
  final Map map=new HashMap();
  map.put("className",StringUtils.ucFirst(className));
  map.put("instanceName",className);
  map.put("package","org.kie");
  map.put("ruleClassName","Rule0");
  map.put("invokerClassName","Rule0" + StringUtils.ucFirst(className) + "Invoker");
  map.put("declarations",declarations);
  map.put("declarationTypes",declarationTypes);
  map.put("globals",globals);
  map.put("globalTypes",globalTypes);
  map.put("innerDeclarations",inner);
  map.put("attributes",new Attribute[]{new Attribute("int","x")});
  map.put("initCode","x = 0;");
  map.put("actionCode","x += 1;");
  map.put("reverseCode","");
  map.put("resultCode","x + 10");
  map.put("supportsReverse","false");
  map.put("resultType",Integer.class);
  map.put("hashCode",new Integer(10));
  map.put("isMultiPattern",Boolean.FALSE);
  TemplateRegistry registry=getInvokerTemplateRegistry();
  Object method=TemplateRuntime.execute(registry.getNamedTemplate("accumulateInvoker"),null,new MapVariableResolverFactory(map),registry);
}
