{
  RuleDescr rule;
  Token loc=null;
  Token any=null;
  String ruleName=null;
  rule=null;
  String consequence="";
  try {
{
      following.push(FOLLOW_opt_eol_in_rule758);
      opt_eol();
      following.pop();
      loc=(Token)input.LT(1);
      match(input,31,FOLLOW_31_in_rule764);
      following.push(FOLLOW_word_in_rule768);
      ruleName=word();
      following.pop();
      following.push(FOLLOW_opt_eol_in_rule770);
      opt_eol();
      following.pop();
      debug("start rule: " + ruleName);
      rule=new RuleDescr(ruleName,null);
      rule.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      int alt20=2;
switch (input.LA(1)) {
case 33:
case 35:
        alt20=1;
      break;
case EOL:
case 15:
case 24:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
    alt20=1;
  break;
case 32:
alt20=1;
break;
case 34:
alt20=1;
break;
case 29:
alt20=1;
break;
default :
NoViableAltException nvae=new NoViableAltException("483:17: ( rule_attributes[rule] )?",20,0,input);
throw nvae;
}
switch (alt20) {
case 1:
{
following.push(FOLLOW_rule_attributes_in_rule781);
rule_attributes(rule);
following.pop();
}
break;
}
following.push(FOLLOW_opt_eol_in_rule791);
opt_eol();
following.pop();
int alt28=2;
int LA28_0=input.LA(1);
if (LA28_0 == EOL || LA28_0 == 15 || LA28_0 == 32 || LA28_0 == 34) {
alt28=1;
}
 else if (LA28_0 == 29) {
alt28=1;
}
 else {
NoViableAltException nvae=new NoViableAltException("486:17: ( (loc= \'when\' ( \':\' )? opt_eol ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] ) )? ( opt_eol loc= \'then\' ( \':\' )? opt_eol ( options {greedy=false; } : any= . ( EOL )* )* )? )?",28,0,input);
throw nvae;
}
switch (alt28) {
case 1:
{
int alt23=2;
int LA23_0=input.LA(1);
if (LA23_0 == 32) {
alt23=1;
}
 else if (LA23_0 == EOL || LA23_0 == 15 || LA23_0 == 29 || LA23_0 == 34) {
alt23=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("486:18: (loc= \'when\' ( \':\' )? opt_eol ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] ) )?",23,0,input);
throw nvae;
}
switch (alt23) {
case 1:
{
loc=(Token)input.LT(1);
match(input,32,FOLLOW_32_in_rule800);
int alt21=2;
int LA21_0=input.LA(1);
if (LA21_0 == 33) {
int LA21_1=input.LA(2);
if (!(expander != null)) {
alt21=1;
}
 else if (expander != null) {
alt21=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("486:36: ( \':\' )?",21,1,input);
throw nvae;
}
}
 else if ((LA21_0 >= EOL && LA21_0 <= 32) || (LA21_0 >= 34 && LA21_0 <= 67)) {
alt21=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("486:36: ( \':\' )?",21,0,input);
throw nvae;
}
switch (alt21) {
case 1:
{
match(input,33,FOLLOW_33_in_rule802);
}
break;
}
following.push(FOLLOW_opt_eol_in_rule805);
opt_eol();
following.pop();
AndDescr lhs=new AndDescr();
rule.setLhs(lhs);
lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
int alt22=2;
switch (input.LA(1)) {
case 23:
int LA22_1=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,1,input);
throw nvae;
}
break;
case EOL:
int LA22_2=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,2,input);
throw nvae;
}
break;
case 15:
int LA22_3=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,3,input);
throw nvae;
}
break;
case 34:
int LA22_4=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,4,input);
throw nvae;
}
break;
case 29:
int LA22_5=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,5,input);
throw nvae;
}
break;
case 54:
int LA22_6=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,6,input);
throw nvae;
}
break;
case 55:
int LA22_7=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,7,input);
throw nvae;
}
break;
case 56:
int LA22_8=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,8,input);
throw nvae;
}
break;
case ID:
int LA22_9=input.LA(2);
if (expander != null) {
alt22=1;
}
 else if (true) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,9,input);
throw nvae;
}
break;
case INT:
case BOOL:
case STRING:
case FLOAT:
case MISC:
case WS:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 24:
case 25:
case 26:
case 27:
case 28:
case 30:
case 31:
case 32:
case 33:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
alt22=1;
break;
default :
NoViableAltException nvae=new NoViableAltException("491:25: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",22,0,input);
throw nvae;
}
switch (alt22) {
case 1:
{
if (!(expander != null)) {
throw new FailedPredicateException(input,"rule"," expander != null ");
}
following.push(FOLLOW_expander_lhs_block_in_rule823);
expander_lhs_block(lhs);
following.pop();
}
break;
case 2:
{
following.push(FOLLOW_normal_lhs_block_in_rule832);
normal_lhs_block(lhs);
following.pop();
}
break;
}
}
break;
}
int alt27=2;
int LA27_0=input.LA(1);
if (LA27_0 == EOL || LA27_0 == 15 || LA27_0 == 34) {
alt27=1;
}
 else if (LA27_0 == 29) {
alt27=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("497:17: ( opt_eol loc= \'then\' ( \':\' )? opt_eol ( options {greedy=false; } : any= . ( EOL )* )* )?",27,0,input);
throw nvae;
}
switch (alt27) {
case 1:
{
following.push(FOLLOW_opt_eol_in_rule855);
opt_eol();
following.pop();
loc=(Token)input.LT(1);
match(input,34,FOLLOW_34_in_rule859);
int alt24=2;
int LA24_0=input.LA(1);
if (LA24_0 == 33) {
alt24=1;
}
 else if ((LA24_0 >= EOL && LA24_0 <= 32) || (LA24_0 >= 34 && LA24_0 <= 67)) {
alt24=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("497:38: ( \':\' )?",24,0,input);
throw nvae;
}
switch (alt24) {
case 1:
{
match(input,33,FOLLOW_33_in_rule861);
}
break;
}
following.push(FOLLOW_opt_eol_in_rule865);
opt_eol();
following.pop();
int prevLine=loc.getLine() + 1;
loop26: do {
int alt26=2;
int LA26_0=input.LA(1);
if (LA26_0 == 29) {
alt26=2;
}
 else if ((LA26_0 >= EOL && LA26_0 <= 28) || (LA26_0 >= 30 && LA26_0 <= 67)) {
alt26=1;
}
switch (alt26) {
case 1:
{
any=(Token)input.LT(1);
matchAny(input);
loop25: do {
int alt25=2;
int LA25_0=input.LA(1);
if (LA25_0 == EOL) {
alt25=1;
}
switch (alt25) {
case 1:
{
match(input,EOL,FOLLOW_EOL_in_rule892);
}
break;
default :
break loop25;
}
}
 while (true);
int diff=any.getLine() - prevLine;
consequence=padConsequenceLine(diff,consequence);
consequence=consequence + " " + any.getText();
prevLine=any.getLine();
}
break;
default :
break loop26;
}
}
 while (true);
if (expander != null) {
String expanded=runThenExpander(consequence,offset(loc.getLine()));
rule.setConsequence(expanded);
}
 else {
rule.setConsequence(consequence);
}
rule.setConsequenceLocation(offset(loc.getLine()),loc.getCharPositionInLine());
}
break;
}
}
break;
}
match(input,29,FOLLOW_29_in_rule922);
following.push(FOLLOW_opt_eol_in_rule924);
opt_eol();
following.pop();
debug("end rule: " + ruleName);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
