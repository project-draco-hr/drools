{
  RuleDescr rule;
  Token loc=null;
  Token any=null;
  String ruleName=null;
  List a=null;
  PatternDescr l=null;
  rule=null;
  String consequence="";
  try {
{
      following.push(FOLLOW_opt_eol_in_rule271);
      opt_eol();
      following.pop();
      loc=(Token)input.LT(1);
      match(input,19,FOLLOW_19_in_rule277);
      following.push(FOLLOW_word_in_rule281);
      ruleName=word();
      following.pop();
      following.push(FOLLOW_opt_eol_in_rule283);
      opt_eol();
      following.pop();
      rule=new RuleDescr(ruleName,null);
      rule.setLocation(loc.getLine(),loc.getCharPositionInLine());
      int alt11=2;
      int LA11_0=input.LA(1);
      if (LA11_0 == 25) {
        alt11=1;
      }
 else       if (LA11_0 == EOL || LA11_0 == 20 || LA11_0 == 23) {
        alt11=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("111:17: (a= rule_options )?",11,0,input);
        throw nvae;
      }
switch (alt11) {
case 1:
{
          following.push(FOLLOW_rule_options_in_rule296);
          a=rule_options();
          following.pop();
          rule.setAttributes(a);
        }
      break;
  }
  int alt16=2;
  int LA16_0=input.LA(1);
  if (LA16_0 == 20) {
    alt16=1;
  }
 else   if (LA16_0 == EOL || LA16_0 == 23) {
    alt16=2;
  }
 else {
    NoViableAltException nvae=new NoViableAltException("116:17: (loc= \'when\' ( \':\' )? opt_eol ({...}? ( \'>\' l= lhs | ( options {greedy=false; } : any= . )+ EOL ) | l= lhs )* )?",16,0,input);
    throw nvae;
  }
switch (alt16) {
case 1:
{
      loc=(Token)input.LT(1);
      match(input,20,FOLLOW_20_in_rule314);
      int alt12=2;
      int LA12_0=input.LA(1);
      if (LA12_0 == 21) {
        int LA12_1=input.LA(2);
        if (!(expander != null)) {
          alt12=1;
        }
 else         if (expander != null) {
          alt12=2;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("116:36: ( \':\' )?",12,1,input);
          throw nvae;
        }
      }
 else       if ((LA12_0 >= EOL && LA12_0 <= 20) || (LA12_0 >= 22 && LA12_0 <= 43)) {
        alt12=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("116:36: ( \':\' )?",12,0,input);
        throw nvae;
      }
switch (alt12) {
case 1:
{
          match(input,21,FOLLOW_21_in_rule316);
        }
      break;
  }
  following.push(FOLLOW_opt_eol_in_rule319);
  opt_eol();
  following.pop();
  AndDescr lhs=new AndDescr();
  rule.setLhs(lhs);
  lhs.setLocation(loc.getLine(),loc.getCharPositionInLine());
  loop15:   do {
    int alt15=3;
switch (input.LA(1)) {
case 23:
      int LA15_1=input.LA(2);
    if (expander != null) {
      alt15=1;
    }
  break;
case EOL:
int LA15_2=input.LA(2);
if (expander != null) {
alt15=1;
}
break;
case INT:
case STRING:
case FLOAT:
case MISC:
case WS:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 24:
case 25:
case 26:
case 27:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 43:
alt15=1;
break;
case 40:
int LA15_4=input.LA(2);
if (expander != null) {
alt15=1;
}
 else if (true) {
alt15=2;
}
break;
case 41:
int LA15_5=input.LA(2);
if (expander != null) {
alt15=1;
}
 else if (true) {
alt15=2;
}
break;
case 42:
int LA15_6=input.LA(2);
if (expander != null) {
alt15=1;
}
 else if (true) {
alt15=2;
}
break;
case ID:
int LA15_7=input.LA(2);
if (expander != null) {
alt15=1;
}
 else if (true) {
alt15=2;
}
break;
case 28:
int LA15_8=input.LA(2);
if (expander != null) {
alt15=1;
}
 else if (true) {
alt15=2;
}
break;
}
switch (alt15) {
case 1:
{
if (!(expander != null)) {
throw new FailedPredicateException(input,"rule"," expander != null ");
}
int alt14=2;
int LA14_0=input.LA(1);
if (LA14_0 == 22) {
alt14=1;
}
 else if ((LA14_0 >= EOL && LA14_0 <= 21) || (LA14_0 >= 23 && LA14_0 <= 43)) {
alt14=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("123:41: ( \'>\' l= lhs | ( options {greedy=false; } : any= . )+ EOL )",14,0,input);
throw nvae;
}
switch (alt14) {
case 1:
{
match(input,22,FOLLOW_22_in_rule351);
following.push(FOLLOW_lhs_in_rule355);
l=lhs();
following.pop();
lhs.addDescr(l);
}
break;
case 2:
{
String text=null;
int cnt13=0;
loop13: do {
int alt13=2;
int LA13_0=input.LA(1);
if (LA13_0 == EOL) {
alt13=2;
}
 else if ((LA13_0 >= ID && LA13_0 <= 43)) {
alt13=1;
}
switch (alt13) {
case 1:
{
any=(Token)input.LT(1);
matchAny(input);
System.err.println("[[" + any.getText() + "]]");
if (text == null) {
text=any.getText();
}
 else {
text=text + " " + any.getText();
}
}
break;
default :
if (cnt13 >= 1) break loop13;
EarlyExitException eee=new EarlyExitException(13,input);
throw eee;
}
cnt13++;
}
 while (true);
match(input,EOL,FOLLOW_EOL_in_rule418);
}
break;
}
}
break;
case 2:
{
following.push(FOLLOW_lhs_in_rule435);
l=lhs();
following.pop();
lhs.addDescr(l);
}
break;
default :
break loop15;
}
}
 while (true);
}
break;
}
int alt19=2;
int LA19_0=input.LA(1);
if (LA19_0 == 23) {
alt19=1;
}
 else if (LA19_0 == EOL) {
alt19=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("151:17: ( \'then\' ( \':\' )? (any= . )* )?",19,0,input);
throw nvae;
}
switch (alt19) {
case 1:
{
match(input,23,FOLLOW_23_in_rule459);
int alt17=2;
int LA17_0=input.LA(1);
if (LA17_0 == 21) {
alt17=1;
}
 else if ((LA17_0 >= EOL && LA17_0 <= 20) || (LA17_0 >= 22 && LA17_0 <= 43)) {
alt17=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("151:32: ( \':\' )?",17,0,input);
throw nvae;
}
switch (alt17) {
case 1:
{
match(input,21,FOLLOW_21_in_rule461);
}
break;
}
loop18: do {
int alt18=2;
alt18=dfa18.predict(input);
switch (alt18) {
case 1:
{
any=(Token)input.LT(1);
matchAny(input);
consequence=consequence + " " + any.getText();
}
break;
default :
break loop18;
}
}
 while (true);
rule.setConsequence(consequence);
}
break;
}
match(input,EOL,FOLLOW_EOL_in_rule496);
match(input,24,FOLLOW_24_in_rule498);
following.push(FOLLOW_opt_eol_in_rule500);
opt_eol();
following.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
