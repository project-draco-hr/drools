{
  PatternDescr d;
  PatternDescr left=null;
  PatternDescr right=null;
  d=null;
  try {
{
      AndDescr and=null;
      this.following.push(RuleParser.FOLLOW_lhs_unary_in_lhs_and2494);
      left=lhs_unary();
      this.following.pop();
      d=left;
      loop59:       do {
        int alt59=2;
        final int LA59_0=this.input.LA(1);
        if ((LA59_0 >= 54 && LA59_0 <= 55)) {
          alt59=1;
        }
switch (alt59) {
case 1:
{
            if ((this.input.LA(1) >= 54 && this.input.LA(1) <= 55)) {
              this.input.consume();
              this.errorRecovery=false;
            }
 else {
              final MismatchedSetException mse=new MismatchedSetException(null,this.input);
              recoverFromMismatchedSet(this.input,mse,RuleParser.FOLLOW_set_in_lhs_and2503);
              throw mse;
            }
            this.following.push(RuleParser.FOLLOW_opt_eol_in_lhs_and2508);
            opt_eol();
            this.following.pop();
            this.following.push(RuleParser.FOLLOW_lhs_unary_in_lhs_and2515);
            right=lhs_unary();
            this.following.pop();
            if (and == null) {
              and=new AndDescr();
              and.addDescr(left);
              d=and;
            }
            and.addDescr(right);
          }
        break;
default :
      break loop59;
  }
}
 while (true);
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return d;
}
