{
  List constraints;
  constraints=new ArrayList();
  try {
{
      following.push(FOLLOW_opt_eol_in_constraints1404);
      opt_eol();
      following.pop();
      int alt42=2;
      int LA42_0=input.LA(1);
      if (LA42_0 == EOL) {
        alt42=1;
      }
 else       if (LA42_0 == ID) {
        int LA42_2=input.LA(2);
        if (LA42_2 == 30) {
          int LA42_3=input.LA(3);
          if (LA42_3 == ID) {
            int LA42_8=input.LA(4);
            if (LA42_8 == 47) {
              alt42=2;
            }
 else             if (LA42_8 == EOL || (LA42_8 >= 22 && LA42_8 <= 23) || (LA42_8 >= 39 && LA42_8 <= 46)) {
              alt42=1;
            }
 else {
              NoViableAltException nvae=new NoViableAltException("452:17: ( constraint[constraints] | predicate[constraints] )",42,8,input);
              throw nvae;
            }
          }
 else           if (LA42_3 == EOL) {
            alt42=1;
          }
 else {
            NoViableAltException nvae=new NoViableAltException("452:17: ( constraint[constraints] | predicate[constraints] )",42,3,input);
            throw nvae;
          }
        }
 else         if (LA42_2 == EOL || (LA42_2 >= 22 && LA42_2 <= 23) || (LA42_2 >= 39 && LA42_2 <= 46)) {
          alt42=1;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("452:17: ( constraint[constraints] | predicate[constraints] )",42,2,input);
          throw nvae;
        }
      }
 else {
        NoViableAltException nvae=new NoViableAltException("452:17: ( constraint[constraints] | predicate[constraints] )",42,0,input);
        throw nvae;
      }
switch (alt42) {
case 1:
{
          following.push(FOLLOW_constraint_in_constraints1409);
          constraint(constraints);
          following.pop();
        }
      break;
case 2:
{
      following.push(FOLLOW_predicate_in_constraints1412);
      predicate(constraints);
      following.pop();
    }
  break;
}
loop44: do {
int alt44=2;
alt44=dfa44.predict(input);
switch (alt44) {
case 1:
{
    following.push(FOLLOW_opt_eol_in_constraints1420);
    opt_eol();
    following.pop();
    match(input,22,FOLLOW_22_in_constraints1422);
    following.push(FOLLOW_opt_eol_in_constraints1424);
    opt_eol();
    following.pop();
    int alt43=2;
    int LA43_0=input.LA(1);
    if (LA43_0 == EOL) {
      alt43=1;
    }
 else     if (LA43_0 == ID) {
      int LA43_2=input.LA(2);
      if (LA43_2 == 30) {
        int LA43_3=input.LA(3);
        if (LA43_3 == ID) {
          int LA43_8=input.LA(4);
          if (LA43_8 == 47) {
            alt43=2;
          }
 else           if (LA43_8 == EOL || (LA43_8 >= 22 && LA43_8 <= 23) || (LA43_8 >= 39 && LA43_8 <= 46)) {
            alt43=1;
          }
 else {
            NoViableAltException nvae=new NoViableAltException("453:39: ( constraint[constraints] | predicate[constraints] )",43,8,input);
            throw nvae;
          }
        }
 else         if (LA43_3 == EOL) {
          alt43=1;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("453:39: ( constraint[constraints] | predicate[constraints] )",43,3,input);
          throw nvae;
        }
      }
 else       if (LA43_2 == EOL || (LA43_2 >= 22 && LA43_2 <= 23) || (LA43_2 >= 39 && LA43_2 <= 46)) {
        alt43=1;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("453:39: ( constraint[constraints] | predicate[constraints] )",43,2,input);
        throw nvae;
      }
    }
 else {
      NoViableAltException nvae=new NoViableAltException("453:39: ( constraint[constraints] | predicate[constraints] )",43,0,input);
      throw nvae;
    }
switch (alt43) {
case 1:
{
        following.push(FOLLOW_constraint_in_constraints1427);
        constraint(constraints);
        following.pop();
      }
    break;
case 2:
{
    following.push(FOLLOW_predicate_in_constraints1430);
    predicate(constraints);
    following.pop();
  }
break;
}
}
break;
default :
break loop44;
}
}
 while (true);
following.push(FOLLOW_opt_eol_in_constraints1438);
opt_eol();
following.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return constraints;
}
