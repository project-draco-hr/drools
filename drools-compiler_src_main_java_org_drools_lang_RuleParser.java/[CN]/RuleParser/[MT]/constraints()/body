{
  List constraints;
  constraints=new ArrayList();
  try {
{
      following.push(FOLLOW_opt_eol_in_constraints1352);
      opt_eol();
      following.pop();
      int alt40=2;
      int LA40_0=input.LA(1);
      if (LA40_0 == EOL) {
        alt40=1;
      }
 else       if (LA40_0 == ID) {
        int LA40_2=input.LA(2);
        if (LA40_2 == 29) {
          int LA40_3=input.LA(3);
          if (LA40_3 == ID) {
            int LA40_8=input.LA(4);
            if (LA40_8 == 46) {
              alt40=2;
            }
 else             if (LA40_8 == EOL || (LA40_8 >= 21 && LA40_8 <= 22) || (LA40_8 >= 38 && LA40_8 <= 45)) {
              alt40=1;
            }
 else {
              NoViableAltException nvae=new NoViableAltException("440:17: ( constraint[constraints] | predicate[constraints] )",40,8,input);
              throw nvae;
            }
          }
 else           if (LA40_3 == EOL) {
            alt40=1;
          }
 else {
            NoViableAltException nvae=new NoViableAltException("440:17: ( constraint[constraints] | predicate[constraints] )",40,3,input);
            throw nvae;
          }
        }
 else         if (LA40_2 == EOL || (LA40_2 >= 21 && LA40_2 <= 22) || (LA40_2 >= 38 && LA40_2 <= 45)) {
          alt40=1;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("440:17: ( constraint[constraints] | predicate[constraints] )",40,2,input);
          throw nvae;
        }
      }
 else {
        NoViableAltException nvae=new NoViableAltException("440:17: ( constraint[constraints] | predicate[constraints] )",40,0,input);
        throw nvae;
      }
switch (alt40) {
case 1:
{
          following.push(FOLLOW_constraint_in_constraints1357);
          constraint(constraints);
          following.pop();
        }
      break;
case 2:
{
      following.push(FOLLOW_predicate_in_constraints1360);
      predicate(constraints);
      following.pop();
    }
  break;
}
loop42: do {
int alt42=2;
alt42=dfa42.predict(input);
switch (alt42) {
case 1:
{
    following.push(FOLLOW_opt_eol_in_constraints1368);
    opt_eol();
    following.pop();
    match(input,21,FOLLOW_21_in_constraints1370);
    following.push(FOLLOW_opt_eol_in_constraints1372);
    opt_eol();
    following.pop();
    int alt41=2;
    int LA41_0=input.LA(1);
    if (LA41_0 == EOL) {
      alt41=1;
    }
 else     if (LA41_0 == ID) {
      int LA41_2=input.LA(2);
      if (LA41_2 == 29) {
        int LA41_3=input.LA(3);
        if (LA41_3 == ID) {
          int LA41_8=input.LA(4);
          if (LA41_8 == 46) {
            alt41=2;
          }
 else           if (LA41_8 == EOL || (LA41_8 >= 21 && LA41_8 <= 22) || (LA41_8 >= 38 && LA41_8 <= 45)) {
            alt41=1;
          }
 else {
            NoViableAltException nvae=new NoViableAltException("441:39: ( constraint[constraints] | predicate[constraints] )",41,8,input);
            throw nvae;
          }
        }
 else         if (LA41_3 == EOL) {
          alt41=1;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("441:39: ( constraint[constraints] | predicate[constraints] )",41,3,input);
          throw nvae;
        }
      }
 else       if (LA41_2 == EOL || (LA41_2 >= 21 && LA41_2 <= 22) || (LA41_2 >= 38 && LA41_2 <= 45)) {
        alt41=1;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("441:39: ( constraint[constraints] | predicate[constraints] )",41,2,input);
        throw nvae;
      }
    }
 else {
      NoViableAltException nvae=new NoViableAltException("441:39: ( constraint[constraints] | predicate[constraints] )",41,0,input);
      throw nvae;
    }
switch (alt41) {
case 1:
{
        following.push(FOLLOW_constraint_in_constraints1375);
        constraint(constraints);
        following.pop();
      }
    break;
case 2:
{
    following.push(FOLLOW_predicate_in_constraints1378);
    predicate(constraints);
    following.pop();
  }
break;
}
}
break;
default :
break loop42;
}
}
 while (true);
following.push(FOLLOW_opt_eol_in_constraints1386);
opt_eol();
following.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return constraints;
}
