{
  List constraints;
  constraints=new ArrayList();
  try {
{
      following.push(FOLLOW_opt_eol_in_constraints1392);
      opt_eol();
      following.pop();
      int alt39=2;
      int LA39_0=input.LA(1);
      if (LA39_0 == EOL) {
        alt39=1;
      }
 else       if (LA39_0 == ID) {
        int LA39_2=input.LA(2);
        if (LA39_2 == 29) {
          int LA39_3=input.LA(3);
          if (LA39_3 == ID) {
            int LA39_8=input.LA(4);
            if (LA39_8 == 46) {
              alt39=2;
            }
 else             if (LA39_8 == EOL || (LA39_8 >= 21 && LA39_8 <= 22) || LA39_8 == 37 || (LA39_8 >= 39 && LA39_8 <= 45)) {
              alt39=1;
            }
 else {
              NoViableAltException nvae=new NoViableAltException("436:17: ( constraint[constraints] | predicate[constraints] )",39,8,input);
              throw nvae;
            }
          }
 else           if (LA39_3 == EOL) {
            alt39=1;
          }
 else {
            NoViableAltException nvae=new NoViableAltException("436:17: ( constraint[constraints] | predicate[constraints] )",39,3,input);
            throw nvae;
          }
        }
 else         if (LA39_2 == EOL || (LA39_2 >= 21 && LA39_2 <= 22) || LA39_2 == 37 || (LA39_2 >= 39 && LA39_2 <= 45)) {
          alt39=1;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("436:17: ( constraint[constraints] | predicate[constraints] )",39,2,input);
          throw nvae;
        }
      }
 else {
        NoViableAltException nvae=new NoViableAltException("436:17: ( constraint[constraints] | predicate[constraints] )",39,0,input);
        throw nvae;
      }
switch (alt39) {
case 1:
{
          following.push(FOLLOW_constraint_in_constraints1397);
          constraint(constraints);
          following.pop();
        }
      break;
case 2:
{
      following.push(FOLLOW_predicate_in_constraints1400);
      predicate(constraints);
      following.pop();
    }
  break;
}
loop41: do {
int alt41=2;
alt41=dfa41.predict(input);
switch (alt41) {
case 1:
{
    following.push(FOLLOW_opt_eol_in_constraints1408);
    opt_eol();
    following.pop();
    match(input,21,FOLLOW_21_in_constraints1410);
    following.push(FOLLOW_opt_eol_in_constraints1412);
    opt_eol();
    following.pop();
    int alt40=2;
    int LA40_0=input.LA(1);
    if (LA40_0 == EOL) {
      alt40=1;
    }
 else     if (LA40_0 == ID) {
      int LA40_2=input.LA(2);
      if (LA40_2 == 29) {
        int LA40_3=input.LA(3);
        if (LA40_3 == ID) {
          int LA40_8=input.LA(4);
          if (LA40_8 == 46) {
            alt40=2;
          }
 else           if (LA40_8 == EOL || (LA40_8 >= 21 && LA40_8 <= 22) || LA40_8 == 37 || (LA40_8 >= 39 && LA40_8 <= 45)) {
            alt40=1;
          }
 else {
            NoViableAltException nvae=new NoViableAltException("437:39: ( constraint[constraints] | predicate[constraints] )",40,8,input);
            throw nvae;
          }
        }
 else         if (LA40_3 == EOL) {
          alt40=1;
        }
 else {
          NoViableAltException nvae=new NoViableAltException("437:39: ( constraint[constraints] | predicate[constraints] )",40,3,input);
          throw nvae;
        }
      }
 else       if (LA40_2 == EOL || (LA40_2 >= 21 && LA40_2 <= 22) || LA40_2 == 37 || (LA40_2 >= 39 && LA40_2 <= 45)) {
        alt40=1;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("437:39: ( constraint[constraints] | predicate[constraints] )",40,2,input);
        throw nvae;
      }
    }
 else {
      NoViableAltException nvae=new NoViableAltException("437:39: ( constraint[constraints] | predicate[constraints] )",40,0,input);
      throw nvae;
    }
switch (alt40) {
case 1:
{
        following.push(FOLLOW_constraint_in_constraints1415);
        constraint(constraints);
        following.pop();
      }
    break;
case 2:
{
    following.push(FOLLOW_predicate_in_constraints1418);
    predicate(constraints);
    following.pop();
  }
break;
}
}
break;
default :
break loop41;
}
}
 while (true);
following.push(FOLLOW_opt_eol_in_constraints1426);
opt_eol();
following.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return constraints;
}
