{
  AttributeDescr a=null;
  try {
{
      int alt27=2;
      final int LA27_0=this.input.LA(1);
      if (LA27_0 == 34) {
        alt27=1;
      }
 else       if (LA27_0 == RuleParser.EOL || LA27_0 == 15 || LA27_0 == 24 || LA27_0 == 29 || (LA27_0 >= 31 && LA27_0 <= 33) || (LA27_0 >= 35 && LA27_0 <= 40)) {
        alt27=2;
      }
 else {
        final NoViableAltException nvae=new NoViableAltException("447:25: ( \'attributes\' )?",27,0,this.input);
        throw nvae;
      }
switch (alt27) {
case 1:
{
          match(this.input,34,RuleParser.FOLLOW_34_in_rule_attributes802);
        }
      break;
  }
  int alt28=2;
  final int LA28_0=this.input.LA(1);
  if (LA28_0 == 32) {
    alt28=1;
  }
 else   if (LA28_0 == RuleParser.EOL || LA28_0 == 15 || LA28_0 == 24 || LA28_0 == 29 || LA28_0 == 31 || LA28_0 == 33 || (LA28_0 >= 35 && LA28_0 <= 40)) {
    alt28=2;
  }
 else {
    final NoViableAltException nvae=new NoViableAltException("447:39: ( \':\' )?",28,0,this.input);
    throw nvae;
  }
switch (alt28) {
case 1:
{
      match(this.input,32,RuleParser.FOLLOW_32_in_rule_attributes805);
    }
  break;
}
this.following.push(RuleParser.FOLLOW_opt_eol_in_rule_attributes808);
opt_eol();
this.following.pop();
loop30: do {
int alt30=2;
final int LA30_0=this.input.LA(1);
if (LA30_0 == 24 || (LA30_0 >= 35 && LA30_0 <= 40)) {
  alt30=1;
}
switch (alt30) {
case 1:
{
    int alt29=2;
    final int LA29_0=this.input.LA(1);
    if (LA29_0 == 24) {
      alt29=1;
    }
 else     if ((LA29_0 >= 35 && LA29_0 <= 40)) {
      alt29=2;
    }
 else {
      final NoViableAltException nvae=new NoViableAltException("448:33: ( \',\' )?",29,0,this.input);
      throw nvae;
    }
switch (alt29) {
case 1:
{
        match(this.input,24,RuleParser.FOLLOW_24_in_rule_attributes815);
      }
    break;
}
this.following.push(RuleParser.FOLLOW_rule_attribute_in_rule_attributes820);
a=rule_attribute();
this.following.pop();
this.following.push(RuleParser.FOLLOW_opt_eol_in_rule_attributes822);
opt_eol();
this.following.pop();
rule.addAttribute(a);
}
break;
default :
break loop30;
}
}
 while (true);
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return;
}
