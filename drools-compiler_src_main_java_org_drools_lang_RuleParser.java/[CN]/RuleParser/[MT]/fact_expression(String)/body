{
  PatternDescr pd;
  PatternDescr fe=null;
  PatternDescr f=null;
  pd=null;
  boolean multi=false;
  try {
    int alt51=2;
    int LA51_0=input.LA(1);
    if (LA51_0 == 23) {
      alt51=1;
    }
 else     if (LA51_0 == ID) {
      alt51=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("806:2: fact_expression[String id] returns [PatternDescr pd] : ( \'(\' opt_eol fe= fact_expression[id] opt_eol \')\' | f= fact opt_eol ( (\'or\'|\'||\') opt_eol f= fact )* );",51,0,input);
      throw nvae;
    }
switch (alt51) {
case 1:
{
        match(input,23,FOLLOW_23_in_fact_expression1991);
        following.push(FOLLOW_opt_eol_in_fact_expression1993);
        opt_eol();
        following.pop();
        following.push(FOLLOW_fact_expression_in_fact_expression1997);
        fe=fact_expression(id);
        following.pop();
        following.push(FOLLOW_opt_eol_in_fact_expression1999);
        opt_eol();
        following.pop();
        match(input,25,FOLLOW_25_in_fact_expression2001);
        pd=fe;
      }
    break;
case 2:
{
    following.push(FOLLOW_fact_in_fact_expression2012);
    f=fact();
    following.pop();
    following.push(FOLLOW_opt_eol_in_fact_expression2014);
    opt_eol();
    following.pop();
    ((ColumnDescr)f).setIdentifier(id);
    pd=f;
    loop50:     do {
      int alt50=2;
      int LA50_0=input.LA(1);
      if ((LA50_0 >= 44 && LA50_0 <= 45)) {
        alt50=1;
      }
switch (alt50) {
case 1:
{
          if ((input.LA(1) >= 44 && input.LA(1) <= 45)) {
            input.consume();
            errorRecovery=false;
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_fact_expression2027);
            throw mse;
          }
          following.push(FOLLOW_opt_eol_in_fact_expression2032);
          opt_eol();
          following.pop();
          if (!multi) {
            PatternDescr first=pd;
            pd=new OrDescr();
            ((OrDescr)pd).addDescr(first);
            multi=true;
          }
          following.push(FOLLOW_fact_in_fact_expression2046);
          f=fact();
          following.pop();
          ((ColumnDescr)f).setIdentifier(id);
          ((OrDescr)pd).addDescr(f);
        }
      break;
default :
    break loop50;
}
}
 while (true);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return pd;
}
