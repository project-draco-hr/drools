{
  PatternDescr d;
  Token f=null;
  Token op=null;
  String lc=null;
  String rvc=null;
  d=null;
  try {
{
      following.push(FOLLOW_opt_eol_in_constraint942);
      opt_eol();
      following.pop();
      f=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_constraint948);
      following.push(FOLLOW_opt_eol_in_constraint950);
      opt_eol();
      following.pop();
      op=(Token)input.LT(1);
      if (input.LA(1) == 27 || (input.LA(1) >= 31 && input.LA(1) <= 35)) {
        input.consume();
        errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_constraint957);
        throw mse;
      }
      following.push(FOLLOW_opt_eol_in_constraint1011);
      opt_eol();
      following.pop();
      int alt28=2;
switch (input.LA(1)) {
case STRING:
        alt28=1;
      break;
case INT:
    alt28=1;
  break;
case FLOAT:
alt28=1;
break;
case EOL:
case ID:
case MISC:
case WS:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
alt28=2;
break;
default :
NoViableAltException nvae=new NoViableAltException("288:41: (lc= literal_constraint | rvc= retval_constraint )",28,0,input);
throw nvae;
}
switch (alt28) {
case 1:
{
following.push(FOLLOW_literal_constraint_in_constraint1029);
lc=literal_constraint();
following.pop();
d=new LiteralDescr(f.getText(),op.getText(),lc);
d.setLocation(f.getLine(),f.getCharPositionInLine());
}
break;
case 2:
{
following.push(FOLLOW_retval_constraint_in_constraint1049);
rvc=retval_constraint();
following.pop();
d=new ReturnValueDescr(f.getText(),op.getText(),rvc);
d.setLocation(f.getLine(),f.getCharPositionInLine());
}
break;
}
following.push(FOLLOW_opt_eol_in_constraint1070);
opt_eol();
following.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
