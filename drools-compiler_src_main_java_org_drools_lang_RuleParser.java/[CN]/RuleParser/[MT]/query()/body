{
  QueryDescr query;
  Token loc=null;
  String queryName=null;
  query=null;
  try {
{
      following.push(FOLLOW_opt_eol_in_query532);
      opt_eol();
      following.pop();
      loc=(Token)input.LT(1);
      match(input,28,FOLLOW_28_in_query538);
      following.push(FOLLOW_word_in_query542);
      queryName=word();
      following.pop();
      following.push(FOLLOW_opt_eol_in_query544);
      opt_eol();
      following.pop();
      query=new QueryDescr(queryName,null);
      query.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      AndDescr lhs=new AndDescr();
      query.setLhs(lhs);
      lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
      int alt17=2;
switch (input.LA(1)) {
case 23:
        int LA17_1=input.LA(2);
      if (expander != null) {
        alt17=1;
      }
 else       if (true) {
        alt17=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,1,input);
        throw nvae;
      }
    break;
case EOL:
  int LA17_2=input.LA(2);
if (expander != null) {
  alt17=1;
}
 else if (true) {
  alt17=2;
}
 else {
  NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,2,input);
  throw nvae;
}
break;
case 29:
int LA17_3=input.LA(2);
if (expander != null) {
alt17=1;
}
 else if (true) {
alt17=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,3,input);
throw nvae;
}
break;
case 51:
int LA17_4=input.LA(2);
if (expander != null) {
alt17=1;
}
 else if (true) {
alt17=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,4,input);
throw nvae;
}
break;
case 52:
int LA17_5=input.LA(2);
if (expander != null) {
alt17=1;
}
 else if (true) {
alt17=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,5,input);
throw nvae;
}
break;
case 53:
int LA17_6=input.LA(2);
if (expander != null) {
alt17=1;
}
 else if (true) {
alt17=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,6,input);
throw nvae;
}
break;
case ID:
int LA17_7=input.LA(2);
if (expander != null) {
alt17=1;
}
 else if (true) {
alt17=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,7,input);
throw nvae;
}
break;
case 15:
int LA17_8=input.LA(2);
if (expander != null) {
alt17=1;
}
 else if (true) {
alt17=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,8,input);
throw nvae;
}
break;
case INT:
case BOOL:
case STRING:
case FLOAT:
case MISC:
case WS:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 24:
case 25:
case 26:
case 27:
case 28:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
alt17=1;
break;
default :
NoViableAltException nvae=new NoViableAltException("409:17: ({...}? expander_lhs_block[lhs] | normal_lhs_block[lhs] )",17,0,input);
throw nvae;
}
switch (alt17) {
case 1:
{
if (!(expander != null)) {
throw new FailedPredicateException(input,"query"," expander != null ");
}
following.push(FOLLOW_expander_lhs_block_in_query560);
expander_lhs_block(lhs);
following.pop();
}
break;
case 2:
{
following.push(FOLLOW_normal_lhs_block_in_query568);
normal_lhs_block(lhs);
following.pop();
}
break;
}
match(input,29,FOLLOW_29_in_query583);
following.push(FOLLOW_opt_eol_in_query585);
opt_eol();
following.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return query;
}
