{
  Token loc=null;
  String text=null;
  String lhsBlock=null;
  String eol=System.getProperty("line.separator");
  List constraints=null;
  try {
{
      loop47:       do {
        int alt47=2;
switch (input.LA(1)) {
case 29:
          alt47=2;
        break;
case EOL:
      alt47=2;
    break;
case 34:
  alt47=2;
break;
case ID:
case INT:
case BOOL:
case STRING:
case FLOAT:
case MISC:
case WS:
case SH_STYLE_SINGLE_LINE_COMMENT:
case C_STYLE_SINGLE_LINE_COMMENT:
case MULTI_LINE_COMMENT:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 30:
case 31:
case 32:
case 33:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
alt47=1;
break;
case 15:
alt47=2;
break;
}
switch (alt47) {
case 1:
{
following.push(FOLLOW_paren_chunk_in_expander_lhs_block1526);
text=paren_chunk();
following.pop();
loc=(Token)input.LT(1);
match(input,EOL,FOLLOW_EOL_in_expander_lhs_block1530);
if (text != null) {
if (text.trim().startsWith("-")) {
if (constraints == null) {
constraints=new ArrayList();
}
constraints.add(runWhenExpander(text,offset(loc.getLine())));
}
 else {
if (constraints != null) {
lhsBlock=applyConstraints(constraints,lhsBlock);
constraints=null;
}
if (lhsBlock == null) {
lhsBlock=runWhenExpander(text,offset(loc.getLine()));
}
 else {
lhsBlock=lhsBlock + eol + runWhenExpander(text,offset(loc.getLine()));
}
}
text=null;
}
loop46: do {
int alt46=2;
int LA46_0=input.LA(1);
if (LA46_0 == EOL) {
alt46=1;
}
switch (alt46) {
case 1:
{
match(input,EOL,FOLLOW_EOL_in_expander_lhs_block1545);
}
break;
default :
break loop46;
}
}
 while (true);
}
break;
default :
break loop47;
}
}
 while (true);
lhsBlock=applyConstraints(constraints,lhsBlock);
if (lhsBlock != null) {
reparseLhs(lhsBlock,descrs);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
