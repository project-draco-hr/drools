{
  PatternDescr d;
  Token id=null;
  List c=null;
  d=null;
  try {
{
      id=(Token)input.LT(1);
      match(input,ID,FOLLOW_ID_in_fact975);
      d=new ColumnDescr(id.getText());
      d.setLocation(id.getLine(),id.getCharPositionInLine());
      following.push(FOLLOW_opt_eol_in_fact983);
      opt_eol();
      following.pop();
      match(input,30,FOLLOW_30_in_fact989);
      following.push(FOLLOW_opt_eol_in_fact991);
      opt_eol();
      following.pop();
      int alt27=2;
      alt27=dfa27.predict(input);
switch (alt27) {
case 1:
{
          following.push(FOLLOW_constraints_in_fact997);
          c=constraints();
          following.pop();
          for (Iterator cIter=c.iterator(); cIter.hasNext(); ) {
            ((ColumnDescr)d).addDescr((PatternDescr)cIter.next());
          }
        }
      break;
  }
  following.push(FOLLOW_opt_eol_in_fact1016);
  opt_eol();
  following.pop();
  match(input,31,FOLLOW_31_in_fact1018);
  following.push(FOLLOW_opt_eol_in_fact1020);
  opt_eol();
  following.pop();
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
