{
  PatternDescr d;
  PatternDescr left=null;
  PatternDescr right=null;
  d=null;
  try {
{
      OrDescr or=null;
      this.following.push(RuleParser.FOLLOW_lhs_and_in_lhs_or2433);
      left=lhs_and();
      this.following.pop();
      d=left;
      loop58:       do {
        int alt58=2;
        final int LA58_0=this.input.LA(1);
        if (LA58_0 == 41 || LA58_0 == 53) {
          alt58=1;
        }
switch (alt58) {
case 1:
{
            if (this.input.LA(1) == 41 || this.input.LA(1) == 53) {
              this.input.consume();
              this.errorRecovery=false;
            }
 else {
              final MismatchedSetException mse=new MismatchedSetException(null,this.input);
              recoverFromMismatchedSet(this.input,mse,RuleParser.FOLLOW_set_in_lhs_or2442);
              throw mse;
            }
            this.following.push(RuleParser.FOLLOW_opt_eol_in_lhs_or2447);
            opt_eol();
            this.following.pop();
            this.following.push(RuleParser.FOLLOW_lhs_and_in_lhs_or2454);
            right=lhs_and();
            this.following.pop();
            if (or == null) {
              or=new OrDescr();
              or.addDescr(left);
              d=or;
            }
            or.addDescr(right);
          }
        break;
default :
      break loop58;
  }
}
 while (true);
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return d;
}
