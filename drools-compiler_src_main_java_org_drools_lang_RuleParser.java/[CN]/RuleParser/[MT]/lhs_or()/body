{
  PatternDescr d;
  PatternDescr left=null;
  PatternDescr right=null;
  d=null;
  try {
{
      OrDescr or=null;
      following.push(FOLLOW_lhs_and_in_lhs_or3020);
      left=lhs_and();
      following.pop();
      d=left;
      loop66:       do {
        int alt66=2;
        int LA66_0=input.LA(1);
        if ((LA66_0 >= 44 && LA66_0 <= 45)) {
          alt66=1;
        }
switch (alt66) {
case 1:
{
            if ((input.LA(1) >= 44 && input.LA(1) <= 45)) {
              input.consume();
              errorRecovery=false;
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recoverFromMismatchedSet(input,mse,FOLLOW_set_in_lhs_or3029);
              throw mse;
            }
            following.push(FOLLOW_opt_eol_in_lhs_or3034);
            opt_eol();
            following.pop();
            following.push(FOLLOW_lhs_and_in_lhs_or3041);
            right=lhs_and();
            following.pop();
            if (or == null) {
              or=new OrDescr();
              or.addDescr(left);
              d=or;
            }
            or.addDescr(right);
          }
        break;
default :
      break loop66;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return d;
}
