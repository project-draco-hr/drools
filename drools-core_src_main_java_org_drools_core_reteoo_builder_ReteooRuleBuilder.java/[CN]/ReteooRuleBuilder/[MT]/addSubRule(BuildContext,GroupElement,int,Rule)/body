{
  context.setSubRule(subrule);
  ReteooComponentBuilder builder=this.utils.getBuilderFor(subrule);
  if (builder.requiresLeftActivation(this.utils,subrule)) {
    this.addInitialFactPattern(subrule);
  }
  builder.build(context,this.utils,subrule);
  if (context.getRuleBase().getConfiguration().isPhreakEnabled() && rule.getTimer() != null) {
    builder=this.utils.getBuilderFor(Timer.class);
    builder.build(context,this.utils,rule.getTimer());
  }
  ActivationListenerFactory factory=context.getRuleBase().getConfiguration().getActivationListenerFactory(rule.getActivationListener());
  TerminalNode terminal=factory.createActivationListener(context.getNextId(),context.getTupleSource(),rule,subrule,subruleIndex,context);
  BaseNode baseTerminalNode=(BaseNode)terminal;
  baseTerminalNode.networkUpdated(new UpdateContext());
  baseTerminalNode.attach(context);
  if (context.getRuleBase().getConfiguration().isPhreakEnabled()) {
    AddRemoveRule.addRule(terminal,context.getWorkingMemories());
  }
  context.getNodes().add(baseTerminalNode);
  return terminal;
}
