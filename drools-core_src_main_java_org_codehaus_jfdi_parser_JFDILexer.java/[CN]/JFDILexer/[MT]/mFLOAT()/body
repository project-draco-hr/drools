{
  try {
    ruleNestingLevel++;
    int _type=FLOAT;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      int cnt9=0;
      loop9:       do {
        int alt9=2;
        int LA9_0=input.LA(1);
        if (((LA9_0 >= '0' && LA9_0 <= '9'))) {
          alt9=1;
        }
switch (alt9) {
case 1:
{
            matchRange('0','9');
          }
        break;
default :
      if (cnt9 >= 1)       break loop9;
    EarlyExitException eee=new EarlyExitException(9,input);
  throw eee;
}
cnt9++;
}
 while (true);
match('.');
int cnt10=0;
loop10: do {
int alt10=2;
int LA10_0=input.LA(1);
if (((LA10_0 >= '0' && LA10_0 <= '9'))) {
alt10=1;
}
switch (alt10) {
case 1:
{
  matchRange('0','9');
}
break;
default :
if (cnt10 >= 1) break loop10;
EarlyExitException eee=new EarlyExitException(10,input);
throw eee;
}
cnt10++;
}
 while (true);
}
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
