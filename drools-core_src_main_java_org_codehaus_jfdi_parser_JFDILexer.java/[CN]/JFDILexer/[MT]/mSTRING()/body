{
  try {
    ruleNestingLevel++;
    int _type=STRING;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      int alt8=2;
      int LA8_0=input.LA(1);
      if ((LA8_0 == '\"')) {
        alt8=1;
      }
 else       if ((LA8_0 == '\'')) {
        alt8=2;
      }
 else {
        NoViableAltException nvae=new NoViableAltException("280:3: ( ( '\"' (~ '\"' )+ '\"' ) | ( '\\'' (~ '\\'' )+ '\\'' ) )",8,0,input);
        throw nvae;
      }
switch (alt8) {
case 1:
{
{
            match('\"');
            int cnt6=0;
            loop6:             do {
              int alt6=2;
              int LA6_0=input.LA(1);
              if (((LA6_0 >= '\u0000' && LA6_0 <= '!') || (LA6_0 >= '#' && LA6_0 <= '\uFFFE'))) {
                alt6=1;
              }
switch (alt6) {
case 1:
{
                  if ((input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '\uFFFE')) {
                    input.consume();
                  }
 else {
                    MismatchedSetException mse=new MismatchedSetException(null,input);
                    recover(mse);
                    throw mse;
                  }
                }
              break;
default :
            if (cnt6 >= 1)             break loop6;
          EarlyExitException eee=new EarlyExitException(6,input);
        throw eee;
    }
    cnt6++;
  }
 while (true);
  match('\"');
}
}
break;
case 2:
{
{
match('\'');
int cnt7=0;
loop7: do {
int alt7=2;
int LA7_0=input.LA(1);
if (((LA7_0 >= '\u0000' && LA7_0 <= '&') || (LA7_0 >= '(' && LA7_0 <= '\uFFFE'))) {
  alt7=1;
}
switch (alt7) {
case 1:
{
    if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '\uFFFE')) {
      input.consume();
    }
 else {
      MismatchedSetException mse=new MismatchedSetException(null,input);
      recover(mse);
      throw mse;
    }
  }
break;
default :
if (cnt7 >= 1) break loop7;
EarlyExitException eee=new EarlyExitException(7,input);
throw eee;
}
cnt7++;
}
 while (true);
match('\'');
}
}
break;
}
}
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
