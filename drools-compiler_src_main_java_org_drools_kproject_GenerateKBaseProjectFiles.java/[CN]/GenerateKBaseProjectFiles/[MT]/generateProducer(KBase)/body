{
  String s="package " + kbase.getNamespace() + ";\n"+ "import java.util.Properties;\n"+ "import java.io.IOException;\n"+ "import java.io.InputStream;\n"+ "import javax.enterprise.inject.Produces;\n"+ "import javax.inject.Named;\n"+ "import org.drools.KnowledgeBase;\n"+ "import org.drools.KnowledgeBaseConfiguration;\n"+ "import org.drools.KnowledgeBaseFactory;\n"+ "import org.drools.builder.CompositeKnowledgeBuilder;\n"+ "import org.drools.builder.KnowledgeBuilder;\n"+ "import org.drools.builder.KnowledgeBuilderFactory;\n"+ "import org.drools.builder.ResourceType;\n"+ "import org.drools.io.ResourceFactory;\n"+ "public class "+ kbase.getName()+ "Producer extends "+ KBaseBuilder.class.getName()+ " {\n"+ "    @Produces \n"+ "    @"+ kbase.getName()+ "\n"+ "    public KnowledgeBase newKnowledgeBase() {\n"+ "        return "+ KBaseBuilder.class.getName()+ ".fluent()\n"+ "                    .setKBaseQName( \""+ kbase.getQName()+ "\" )\n";
switch (kbase.getEventProcessingMode()) {
case CLOUD:
    s+="                    .setEventProcessingMode( " + kbase.getEventProcessingMode().getClass().getName() + ".CLOUD )\n";
  break;
case STREAM:
s+="                    .setEventProcessingMode( " + kbase.getEventProcessingMode().getClass().getName() + ".STREAM )\n";
break;
}
switch (kbase.getEqualsBehavior()) {
case EQUALITY:
s+="                    .setEqualsBehavior( " + kbase.getEqualsBehavior().getClass().getName() + ".EQUALITY )\n";
break;
case IDENTITY:
s+="                    .setEqualsBehavior( " + kbase.getEqualsBehavior().getClass().getName() + ".IDENTITY )\n";
break;
}
s+="                    .build(getClass());\n" + "    }\n" + "}\n";
return s;
}
