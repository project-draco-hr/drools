{
  String s="package " + kbase.getNamespace() + ";\n"+ "import java.util.Properties;\n"+ "import java.io.IOException;\n"+ "import java.io.InputStream;\n"+ "import javax.enterprise.inject.Produces;\n"+ "import javax.inject.Named;\n"+ "import org.drools.KnowledgeBase;\n"+ "import org.drools.KnowledgeBaseConfiguration;\n"+ "import org.drools.KnowledgeBaseFactory;\n"+ "import org.drools.builder.CompositeKnowledgeBuilder;\n"+ "import org.drools.builder.KnowledgeBuilder;\n"+ "import org.drools.builder.KnowledgeBuilderFactory;\n"+ "import org.drools.builder.ResourceType;\n"+ "import org.drools.io.ResourceFactory;\n"+ "public class "+ kbase.getName()+ "Producer {\n"+ "    @Produces \n"+ "    @"+ kbase.getName()+ "\n"+ "    public KnowledgeBase newKnowledgeBase() {\n"+ "        String fileStr = null;\n"+ "        InputStream is = null;\n"+ "        try {\n"+ "            is = getClass().getResourceAsStream( \"/"+ kbase.getQName()+ ".files.dat\" );\n"+ "            fileStr = org.drools.core.util.StringUtils.toString( is );\n"+ "        } catch ( IOException e ) {\n"+ "            throw new RuntimeException( \"Unable to fine files for KnowledgeBase "+ kbase.getQName()+ "\" );\n"+ "        } finally {\n"+ "            if ( is != null ) {\n"+ "                try {\n"+ "                    is.close();\n"+ "                } catch (IOException e) {\n"+ "                    throw new RuntimeException( \"Unable to fine files for KnowledgeBase "+ kbase.getQName()+ "\" );\n"+ "                }\n"+ "            }\n"+ "        }\n"+ "        \n"+ "        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n"+ "        CompositeKnowledgeBuilder ckbuilder = kbuilder.batch();\n"+ "        \n"+ "        String[] files = fileStr.split( \",\" );\n"+ "        if ( files.length > 0 ) {\n"+ "            for ( String file : files ) {\n"+ "                if ( file.endsWith(\".drl\" ) ) {\n"+ "                    ckbuilder.add( ResourceFactory.newUrlResource( getClass().getResource( \"/\" + file.trim() ) ), ResourceType.DRL );\n"+ "                }\n"+ "            }\n"+ "        }\n"+ "        ckbuilder.build();\n"+ "\n"+ "        \n"+ "        if ( kbuilder.hasErrors() ) {\n"+ "            throw new RuntimeException( \"Unable to compile "+ kbase.getQName()+ ":\\n\" + kbuilder.getErrors() );\n"+ "        }\n"+ "        \n"+ "        KnowledgeBaseConfiguration kconf = KnowledgeBaseFactory.newKnowledgeBaseConfiguration();\n";
switch (kbase.getEventProcessingMode()) {
case CLOUD:
    s+="        kconf.setOption( " + kbase.getEventProcessingMode().getClass().getName() + ".CLOUD );\n";
  break;
case STREAM:
s+="        kconf.setOption( " + kbase.getEventProcessingMode().getClass().getName() + ".STREAM );\n";
break;
}
switch (kbase.getEqualsBehavior()) {
case EQUALITY:
s+="        kconf.setOption( " + kbase.getEqualsBehavior().getClass().getName() + ".EQUALITY );\n";
break;
case IDENTITY:
s+="        kconf.setOption( " + kbase.getEqualsBehavior().getClass().getName() + ".IDENTITY );\n";
break;
}
s+="        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase(kconf);" + "        kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );\n" + "        return kbase; \n"+ "    }\n"+ "}\n";
return s;
}
