{
  if (object == null) {
    writeNull();
  }
 else {
    Class clazz=object.getClass();
    if (clazz == EMPTY_SET_CLASS) {
      writeEmptySet();
    }
 else     if (clazz == EMPTY_LIST_CLASS) {
      writeEmptyList();
    }
 else     if (clazz == EMPTY_MAP_CLASS) {
      writeEmptyMap();
    }
 else {
      if (clazz == String.class)       object=((String)object).intern();
      int handle=registerObject(object);
      if (handle < 0) {
        handle=-handle;
        if (Externalizable.class.isAssignableFrom(clazz)) {
          writeRecordType(RT_EXTERNALIZABLE);
          writeHandle(handle);
          writeObject(clazz);
          ((Externalizable)object).writeExternal(this);
        }
 else         if (String.class.isAssignableFrom(clazz)) {
          writeString((String)object,handle);
        }
 else         if (Map.class.isAssignableFrom(clazz)) {
          Map map=(Map)object;
          writeRecordType(RT_MAP);
          writeHandle(handle);
          writeObject(clazz);
          writeInt(map.size());
          for (          Object obj : map.entrySet()) {
            Map.Entry entry=(Map.Entry)obj;
            writeObject(entry.getKey());
            writeObject(entry.getValue());
          }
        }
 else         if (Collection.class.isAssignableFrom(clazz)) {
          Collection collection=(Collection)object;
          writeRecordType(RT_COLLECTION);
          writeHandle(handle);
          writeObject(clazz);
          writeInt(collection.size());
          for (          Object obj : collection) {
            writeObject(obj);
          }
        }
 else         if (clazz == Class.class) {
          writeClass((Class)object,handle);
        }
 else         if (clazz.isArray()) {
          writeRecordType(RT_ARRAY);
          writeHandle(handle);
          writeObject(clazz);
          Class componentType=clazz.getComponentType();
          if (componentType.isPrimitive()) {
            writePrimitiveArray(object,componentType);
          }
 else {
            Object[] array=(Object[])object;
            int length=array.length;
            writeInt(length);
            for (int i=0; i < length; ++i) {
              writeObject(array[i]);
            }
          }
        }
 else         if (AtomicReferenceArray.class.isAssignableFrom(clazz)) {
          AtomicReferenceArray array=(AtomicReferenceArray)object;
          writeRecordType(RT_ATOMICREFERENCEARRAY);
          writeHandle(handle);
          writeInt(array.length());
          for (int i=0; i < array.length(); i++)           writeObject(array.get(i));
        }
 else         if (Serializable.class.isAssignableFrom(clazz)) {
          writeRecordType(RT_SERIALIZABLE);
          writeHandle(handle);
          dataOutput.writeObject(object);
        }
 else {
          throw new NotSerializableException("Unsupported class: " + clazz);
        }
      }
 else {
        writeRecordType(RT_REFERENCE);
        writeHandle(handle);
      }
    }
  }
  flush();
}
