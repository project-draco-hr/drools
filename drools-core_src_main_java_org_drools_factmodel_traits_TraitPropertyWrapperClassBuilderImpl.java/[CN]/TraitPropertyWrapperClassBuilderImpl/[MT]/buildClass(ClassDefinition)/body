{
  ClassWriter cw=new ClassWriter(0);
  FieldVisitor fv;
  MethodVisitor mv;
  long mask=TraitRegistry.getInstance().getFieldMask(trait.getName(),core.getDefinedClass().getName());
  String name=TraitFactory.getPropertyWrapperName(trait,core);
  String masterName=TraitFactory.getProxyName(trait,core);
  String internalWrapper=BuildUtils.getInternalType(name);
  String internalProxy=BuildUtils.getInternalType(masterName);
  String descrWrapper=BuildUtils.getTypeDescriptor(name);
  String descrProxy=BuildUtils.getTypeDescriptor(masterName);
  String internalCore=BuildUtils.getInternalType(core.getClassName());
  String descrCore=BuildUtils.getTypeDescriptor(core.getClassName());
  String internalTrait=BuildUtils.getInternalType(trait.getClassName());
  String descrTrait=BuildUtils.getTypeDescriptor(trait.getClassName());
  cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,internalWrapper,"Ljava/lang/Object;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lorg/drools/factmodel/traits/MapWrapper;","java/lang/Object",new String[]{"java/util/Map","org/drools/factmodel/traits/MapWrapper"});
  cw.visitInnerClass("java/util/Map$Entry","java/util/Map","Entry",ACC_PUBLIC + ACC_STATIC + ACC_ABSTRACT+ ACC_INTERFACE);
  for (  FieldDefinition fld : core.getFieldsDefinitions()) {
    fv=cw.visitField(ACC_PUBLIC + ACC_STATIC,fld.getName() + "_reader","Lorg/drools/spi/InternalReadAccessor;",null,null);
    fv.visitEnd();
    fv=cw.visitField(ACC_PUBLIC + ACC_STATIC,fld.getName() + "_writer","Lorg/drools/spi/WriteAccessor;",null,null);
    fv.visitEnd();
  }
{
    fv=cw.visitField(0,"object",descrCore,null,null);
    fv.visitEnd();
  }
{
    fv=cw.visitField(0,"map","Ljava/util/Map;","Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;",null);
    fv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"<init>","(" + descrCore + "Ljava/util/Map;)V","(" + descrCore + "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V",null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/Object","<init>","()V");
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitFieldInsn(PUTFIELD,internalWrapper,"object",descrCore);
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,2);
    mv.visitFieldInsn(PUTFIELD,internalWrapper,"map","Ljava/util/Map;");
    int stackSize=initSoftFields(mv,trait,mask,2);
    mv.visitInsn(RETURN);
    mv.visitMaxs(2 + stackSize,3);
    mv.visitEnd();
  }
  buildSize(cw,name,core.getClassName(),trait,core,mask);
  buildIsEmpty(cw,name,core.getClassName(),trait,core,mask);
  buildGet(cw,name,core.getClassName(),trait,core,mask);
  buildPut(cw,name,core.getClassName(),trait,core,mask);
  buildClear(cw,name,core.getClassName(),trait,core,mask);
  buildRemove(cw,name,core.getClassName(),trait,core,mask);
  buildContainsKey(cw,name,core.getClassName(),trait,core,mask);
  buildContainsValue(cw,name,core.getClassName(),trait,core,mask);
  buildKeyset(cw,name,core.getClassName(),trait,core,mask);
  buildValues(cw,name,core.getClassName(),trait,core,mask);
  buildEntryset(cw,name,core.getClassName(),trait,core,mask);
  buildCommonMethods(cw,name);
  cw.visitEnd();
  return cw.toByteArray();
}
