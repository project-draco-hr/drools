{
  Node<K,K> root=new Node<K,K>(null);
  Map<K,Node<K,K>> map=new HashMap<K,Node<K,K>>();
  for (  K element : hierarchy.keySet()) {
    K key=element;
    Node<K,K> node=map.get(key);
    if (node == null) {
      node=new Node(key,element);
      map.put(key,node);
    }
 else     if (node.getData() == null) {
      node.setData(element);
    }
    Collection<K> px=hierarchy.get(key);
    if (px.isEmpty()) {
      root.addChild(node);
    }
 else {
      for (      K parentElement : px) {
        K superKey=parentElement;
        Node<K,K> superNode=map.get(superKey);
        if (superNode == null) {
          superNode=new Node<K,K>(superKey);
          map.put(superKey,superNode);
        }
        if (!superNode.children.contains(node)) {
          superNode.addChild(node);
        }
      }
    }
  }
  java.util.Iterator<Node<K,K>> iter=map.values().iterator();
  while (iter.hasNext()) {
    Node<K,K> n=iter.next();
    if (n.getData() == null)     root.addChild(n);
  }
  List<K> sortedList=new java.util.LinkedList<K>();
  root.accept(sortedList);
  return sortedList;
}
