{
  final ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  final InternalWorkingMemory workingMemory=(InternalWorkingMemory)ruleBase.newStatefulSession();
  final ClassFieldReader typeExtractor=store.getReader(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue cheddarField=FieldFactory.getFieldValue("cheddar");
  final Evaluator stringEqual=equals.getEvaluator(ValueType.STRING_TYPE,Operator.EQUAL);
  final LiteralConstraint constraint1=new LiteralConstraint(typeExtractor,stringEqual,cheddarField);
  final ClassFieldReader priceExtractor=store.getReader(Cheese.class,"price",getClass().getClassLoader());
  final FieldValue field10=FieldFactory.getFieldValue(10);
  final Evaluator integerGreater=comparables.getEvaluator(ValueType.INTEGER_TYPE,Operator.GREATER);
  final LiteralConstraint constraint2=new LiteralConstraint(priceExtractor,integerGreater,field10);
  final AndConstraint and1=new AndConstraint();
  and1.addAlphaConstraint(constraint1);
  and1.addAlphaConstraint(constraint2);
  final FieldValue stiltonField=FieldFactory.getFieldValue("stilton");
  final LiteralConstraint constraint3=new LiteralConstraint(typeExtractor,stringEqual,stiltonField);
  final Evaluator integerLess=comparables.getEvaluator(ValueType.INTEGER_TYPE,Operator.LESS);
  final LiteralConstraint constraint4=new LiteralConstraint(priceExtractor,integerLess,field10);
  final AndConstraint and2=new AndConstraint();
  and2.addAlphaConstraint(constraint3);
  and2.addAlphaConstraint(constraint4);
  final OrConstraint constraint=new OrConstraint();
  constraint.addAlphaConstraint(and1);
  constraint.addAlphaConstraint(and2);
  final ContextEntry context=constraint.createContextEntry();
  final Cheese cheddar=new Cheese("cheddar",15);
  final InternalFactHandle cheddarHandle=(InternalFactHandle)workingMemory.insert(cheddar);
  assertTrue(constraint.isAllowed(cheddarHandle,workingMemory,context));
  cheddar.setPrice(5);
  assertFalse(constraint.isAllowed(cheddarHandle,workingMemory,context));
  cheddar.setType("stilton");
  assertTrue(constraint.isAllowed(cheddarHandle,workingMemory,context));
  cheddar.setPrice(15);
  assertFalse(constraint.isAllowed(cheddarHandle,workingMemory,context));
}
