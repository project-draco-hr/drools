{
  final ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  final InternalWorkingMemory workingMemory=(InternalWorkingMemory)ruleBase.newStatefulSession();
  final ClassFieldExtractor extractor=cache.getExtractor(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue field=FieldFactory.getFieldValue("cheddar");
  final Evaluator evaluator=equals.getEvaluator(ValueType.STRING_TYPE,Operator.EQUAL);
  final LiteralConstraint constraint1=new LiteralConstraint(extractor,evaluator,field);
  final ClassFieldExtractor priceExtractor=cache.getExtractor(Cheese.class,"price",getClass().getClassLoader());
  final FieldValue priceField=FieldFactory.getFieldValue(10);
  final Evaluator priceEvaluator=comparables.getEvaluator(ValueType.INTEGER_TYPE,Operator.GREATER);
  final LiteralConstraint constraint2=new LiteralConstraint(priceExtractor,priceEvaluator,priceField);
  final Cheese cheddar=new Cheese("cheddar",15);
  final OrConstraint constraint=new OrConstraint();
  constraint.addAlphaConstraint(constraint1);
  constraint.addAlphaConstraint(constraint2);
  final InternalFactHandle cheddarHandle=(InternalFactHandle)workingMemory.insert(cheddar);
  assertTrue(constraint.isAllowed(cheddarHandle,workingMemory));
  cheddar.setPrice(5);
  ((ShadowProxy)cheddarHandle.getObject()).updateProxy();
  assertTrue(constraint.isAllowed(cheddarHandle,workingMemory));
  cheddar.setType("stilton");
  ((ShadowProxy)cheddarHandle.getObject()).updateProxy();
  assertFalse(constraint.isAllowed(cheddarHandle,workingMemory));
  cheddar.setPrice(15);
  ((ShadowProxy)cheddarHandle.getObject()).updateProxy();
  assertTrue(constraint.isAllowed(cheddarHandle,workingMemory));
}
