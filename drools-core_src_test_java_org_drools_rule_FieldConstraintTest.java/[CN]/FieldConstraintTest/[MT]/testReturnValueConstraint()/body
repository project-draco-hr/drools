{
  final ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  final InternalWorkingMemory workingMemory=(InternalWorkingMemory)ruleBase.newWorkingMemory();
  final FieldExtractor priceExtractor=new ClassFieldExtractor(Cheese.class,"price");
  final Column column=new Column(0,new ClassObjectType(Cheese.class));
  final Declaration priceDeclaration=new Declaration("price1",priceExtractor,column);
  final ReturnValueExpression isDoubleThePrice=new ReturnValueExpression(){
    /** 
 */
    private static final long serialVersionUID=5673999834006100045L;
    public FieldValue evaluate(    Tuple tuple,    Declaration[] declarations,    WorkingMemory workingMemory){
      int price=((Integer)declarations[0].getValue(workingMemory.getObject(tuple.get(declarations[0])))).intValue();
      return FieldFactory.getFieldValue(2 * price);
    }
  }
;
  final ReturnValueConstraint constraint1=new ReturnValueConstraint(priceExtractor,isDoubleThePrice,new Declaration[]{priceDeclaration},ValueType.INTEGER_TYPE.getEvaluator(Operator.EQUAL));
  final ReturnValueConstraint constraint2=new ReturnValueConstraint(priceExtractor,isDoubleThePrice,new Declaration[]{priceDeclaration},ValueType.INTEGER_TYPE.getEvaluator(Operator.GREATER));
  final Cheese cheddar0=new Cheese("cheddar",5);
  final FactHandle f0=workingMemory.assertObject(cheddar0);
  InstrumentedReteTuple tuple=new InstrumentedReteTuple(f0);
  final Cheese cheddar1=new Cheese("cheddar",10);
  final InternalFactHandle f1=(InternalFactHandle)workingMemory.assertObject(cheddar1);
  tuple=new InstrumentedReteTuple(tuple,f1);
  assertTrue(constraint1.isAllowed(f1.getObject(),workingMemory));
  assertFalse(constraint2.isAllowed(f1.getObject(),workingMemory));
  final Cheese cheddar2=new Cheese("cheddar",11);
  final InternalFactHandle f2=(InternalFactHandle)workingMemory.assertObject(cheddar2);
  assertTrue(constraint2.isAllowed(f2.getObject(),workingMemory));
}
