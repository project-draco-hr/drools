{
  final ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  final InternalWorkingMemory workingMemory=(InternalWorkingMemory)ruleBase.newStatefulSession();
  final FieldExtractor priceExtractor=new ClassFieldExtractor(Cheese.class,"price");
  final Pattern pattern=new Pattern(0,new ClassObjectType(Cheese.class));
  final Declaration priceDeclaration=new Declaration("price1",priceExtractor,pattern);
  final ReturnValueExpression isDoubleThePrice=new ReturnValueExpression(){
    /** 
 */
    private static final long serialVersionUID=5673999834006100045L;
    public FieldValue evaluate(    Object object,    Tuple tuple,    Declaration[] previousDeclarations,    Declaration[] localDeclarations,    WorkingMemory workingMemory){
      int price=((Number)previousDeclarations[0].getValue(workingMemory.getObject(tuple.get(previousDeclarations[0])))).intValue();
      return FieldFactory.getFieldValue(2 * price);
    }
  }
;
  final ReturnValueRestriction restriction1=new ReturnValueRestriction(priceExtractor,isDoubleThePrice,new Declaration[]{priceDeclaration},new Declaration[0],new String[0],ValueType.INTEGER_TYPE.getEvaluator(Operator.EQUAL));
  final ReturnValueConstraint constraint1=new ReturnValueConstraint(priceExtractor,restriction1);
  final ReturnValueRestriction restriction2=new ReturnValueRestriction(priceExtractor,isDoubleThePrice,new Declaration[]{priceDeclaration},new Declaration[0],new String[0],ValueType.INTEGER_TYPE.getEvaluator(Operator.GREATER));
  final ReturnValueConstraint constraint2=new ReturnValueConstraint(priceExtractor,restriction2);
  final Cheese cheddar0=new Cheese("cheddar",5);
  final FactHandle f0=workingMemory.assertObject(cheddar0);
  InstrumentedReteTuple tuple=new InstrumentedReteTuple(f0);
  final Cheese cheddar1=new Cheese("cheddar",10);
  final InternalFactHandle f1=(InternalFactHandle)workingMemory.assertObject(cheddar1);
  tuple=new InstrumentedReteTuple(tuple,f1);
  final ReturnValueContextEntry context1=(ReturnValueContextEntry)constraint1.getContextEntry();
  context1.updateFromTuple(workingMemory,tuple);
  assertTrue(constraint1.isAllowedCachedLeft(context1,f1.getObject()));
  final ReturnValueContextEntry context2=(ReturnValueContextEntry)constraint2.getContextEntry();
  context2.updateFromTuple(workingMemory,tuple);
  assertFalse(constraint2.isAllowedCachedLeft(context2,f1.getObject()));
  final Cheese cheddar2=new Cheese("cheddar",11);
  final InternalFactHandle f2=(InternalFactHandle)workingMemory.assertObject(cheddar2);
  assertTrue(constraint2.isAllowedCachedLeft(context2,f2.getObject()));
}
