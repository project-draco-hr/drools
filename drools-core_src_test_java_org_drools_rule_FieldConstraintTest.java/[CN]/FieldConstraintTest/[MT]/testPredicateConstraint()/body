{
  final ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  final WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  final FieldExtractor priceExtractor=new ClassFieldExtractor(Cheese.class,"price");
  final Declaration price1Declaration=new Declaration("price1",priceExtractor,0);
  final Declaration price2Declaration=new Declaration("price2",priceExtractor,1);
  final PredicateExpression evaluator=new PredicateExpression(){
    /** 
 */
    private static final long serialVersionUID=-7805842671538257493L;
    public boolean evaluate(    Tuple tuple,    FactHandle factHandle,    Declaration declaration,    Declaration[] declarations,    WorkingMemory workingMemory){
      int price1=((Integer)declarations[0].getValue(workingMemory.getObject(tuple.get(declarations[0])))).intValue();
      int price2=((Integer)declaration.getValue(workingMemory.getObject(factHandle))).intValue();
      return (price2 == (price1 * 2));
    }
  }
;
  final PredicateConstraint constraint1=new PredicateConstraint(evaluator,price2Declaration,new Declaration[]{price1Declaration});
  final Cheese cheddar0=new Cheese("cheddar",5);
  final FactHandle f0=workingMemory.assertObject(cheddar0);
  InstrumentedReteTuple tuple=new InstrumentedReteTuple(f0);
  final Cheese cheddar1=new Cheese("cheddar",10);
  final InternalFactHandle f1=(InternalFactHandle)workingMemory.assertObject(cheddar1);
  tuple=new InstrumentedReteTuple(tuple,f1);
  assertTrue(constraint1.isAllowed(f1,tuple,workingMemory));
}
