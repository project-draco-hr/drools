{
  Class coreKlass=core.getClass();
  ClassDefinition tdef=getTraitRegistry().getTrait(trait.getName());
  ClassDefinition cdef=getTraitRegistry().getTraitable(coreKlass.getName());
  if (tdef == null) {
    if (trait.getAnnotation(Trait.class) != null) {
      try {
        if (Thing.class.isAssignableFrom(trait)) {
          tdef=buildClassDefinition(trait,null);
        }
 else {
          throw new RuntimeException("Unable to create definition for class " + trait + " : trait interfaces should extend "+ Thing.class.getName()+ " or be DECLARED as traits explicitly");
        }
      }
 catch (      IOException e) {
        throw new RuntimeException("Unable to create definition for class " + trait + " : "+ e.getMessage());
      }
      getTraitRegistry().addTrait(tdef);
    }
 else {
      throw new RuntimeException("Unable to find Trait definition for class " + trait.getName() + ". It should have been DECLARED as a trait");
    }
  }
  if (cdef == null) {
    if (core.getClass().getAnnotation(Traitable.class) != null) {
      try {
        cdef=buildClassDefinition(core.getClass(),core.getClass());
      }
 catch (      IOException e) {
        throw new RuntimeException("Unable to create definition for class " + coreKlass.getName() + " : "+ e.getMessage());
      }
      getTraitRegistry().addTraitable(cdef);
    }
 else {
      throw new RuntimeException("Unable to find Core class definition for class " + coreKlass.getName() + ". It should have been DECLARED as a trait");
    }
  }
  String proxyName=getProxyName(tdef,cdef);
  String wrapperName=getPropertyWrapperName(tdef,cdef);
  KieComponentFactory rcf=getComponentFactory();
  TraitPropertyWrapperClassBuilder propWrapperBuilder=(TraitPropertyWrapperClassBuilder)rcf.getClassBuilderFactory().getPropertyWrapperBuilder();
  propWrapperBuilder.init(tdef,getTraitRegistry());
  try {
    byte[] propWrapper=propWrapperBuilder.buildClass(cdef,getRootClassLoader());
    registerAndLoadTypeDefinition(wrapperName,propWrapper);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  TraitProxyClassBuilder proxyBuilder=(TraitProxyClassBuilder)rcf.getClassBuilderFactory().getTraitProxyBuilder();
  proxyBuilder.init(tdef,rcf.getBaseTraitProxyClass(),getTraitRegistry());
  try {
    byte[] proxy=proxyBuilder.buildClass(cdef,getRootClassLoader());
    registerAndLoadTypeDefinition(proxyName,proxy);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    BitSet mask=getTraitRegistry().getFieldMask(trait.getName(),cdef.getDefinedClass().getName());
    Class<T> wrapperClass=(Class<T>)getRootClassLoader().loadClass(wrapperName);
    Class<T> proxyClass=(Class<T>)getRootClassLoader().loadClass(proxyName);
    return proxyClass;
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return null;
  }
}
