{
  RuleBaseImpl ruleBase=new RuleBaseImpl();
  Rete rete=ruleBase.getRete();
  ClassObjectType queryObjectType=new ClassObjectType(DroolsQuery.class);
  ObjectTypeNode queryObjectTypeNode=new ObjectTypeNode(1,queryObjectType,rete);
  queryObjectTypeNode.attach();
  ClassFieldExtractor extractor=new ClassFieldExtractor(DroolsQuery.class,"name");
  FieldValue field=new MockField("query-1");
  Evaluator evaluator=EvaluatorFactory.getEvaluator(Evaluator.STRING_TYPE,Evaluator.EQUAL);
  LiteralConstraint constraint=new LiteralConstraint(field,extractor,evaluator);
  AlphaNode alphaNode=new AlphaNode(2,constraint,queryObjectTypeNode);
  alphaNode.attach();
  LeftInputAdapterNode liaNode=new LeftInputAdapterNode(3,alphaNode);
  liaNode.attach();
  ClassObjectType cheeseObjectType=new ClassObjectType(Cheese.class);
  ObjectTypeNode cheeseObjectTypeNode=new ObjectTypeNode(4,cheeseObjectType,rete);
  cheeseObjectTypeNode.attach();
  extractor=new ClassFieldExtractor(Cheese.class,"type");
  field=new MockField("stilton");
  constraint=new LiteralConstraint(field,extractor,evaluator);
  alphaNode=new AlphaNode(5,constraint,cheeseObjectTypeNode);
  alphaNode.attach();
  JoinNode joinNode=new JoinNode(6,liaNode,alphaNode);
  joinNode.attach();
  Query query=new Query("query-1");
  QueryTerminalNode queryNode=new QueryTerminalNode(7,joinNode,query);
  queryNode.attach();
  WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  QueryResults results=workingMemory.getQueryResults("query-1");
  assertNull(results);
  Cheese stilton1=new Cheese("stilton",100);
  FactHandle handle1=workingMemory.assertObject(stilton1);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  Cheese cheddar=new Cheese("cheddar",55);
  workingMemory.assertObject(cheddar);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  Cheese stilton2=new Cheese("stilton",5);
  FactHandle handle2=workingMemory.assertObject(stilton2);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(2,results.size());
  QueryResult result=results.get(0);
  assertEquals(1,result.size());
  assertSame(stilton1,result.get(0));
  result=results.get(1);
  assertEquals(1,result.size());
  assertSame(stilton2,result.get(0));
  int i=0;
  for (Iterator it=results.iterator(); it.hasNext(); ) {
    result=(QueryResult)it.next();
    assertEquals(1,result.size());
    if (i == 0) {
      assertSame(stilton1,result.get(0));
    }
 else {
      assertSame(stilton2,result.get(0));
    }
    i++;
  }
  workingMemory.retractObject(handle1);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  workingMemory.retractObject(handle2);
  results=workingMemory.getQueryResults("query-1");
  assertNull(results);
}
