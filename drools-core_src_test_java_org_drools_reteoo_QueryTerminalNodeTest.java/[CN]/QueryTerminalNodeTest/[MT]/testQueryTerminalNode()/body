{
  final ClassObjectType queryObjectType=new ClassObjectType(DroolsQuery.class);
  final ObjectTypeNode queryObjectTypeNode=new ObjectTypeNode(this.buildContext.getNextId(),this.entryPoint,queryObjectType,buildContext);
  queryObjectTypeNode.attach();
  ClassFieldReader extractor=store.getReader(DroolsQuery.class,"name",DroolsQuery.class.getClassLoader());
  MvelConstraint constraint=new MvelConstraintTestUtil("name == \"query-1\"",FieldFactory.getFieldValue("query-1"),extractor);
  AlphaNode alphaNode=new AlphaNode(this.buildContext.getNextId(),constraint,queryObjectTypeNode,buildContext);
  alphaNode.attach();
  final LeftInputAdapterNode liaNode=new LeftInputAdapterNode(this.buildContext.getNextId(),alphaNode,this.buildContext);
  liaNode.attach();
  final ClassObjectType cheeseObjectType=new ClassObjectType(Cheese.class);
  final ObjectTypeNode cheeseObjectTypeNode=new ObjectTypeNode(this.buildContext.getNextId(),this.entryPoint,cheeseObjectType,buildContext);
  cheeseObjectTypeNode.attach();
  extractor=store.getReader(Cheese.class,"type",getClass().getClassLoader());
  constraint=new MvelConstraintTestUtil("type == \"stilton\"",FieldFactory.getFieldValue("stilton"),extractor);
  alphaNode=new AlphaNode(this.buildContext.getNextId(),constraint,cheeseObjectTypeNode,buildContext);
  alphaNode.attach();
  BuildContext buildContext=new BuildContext(ruleBase,ruleBase.getReteooBuilder().getIdGenerator());
  buildContext.setTupleMemoryEnabled(false);
  final JoinNode joinNode=new JoinNode(this.buildContext.getNextId(),liaNode,alphaNode,EmptyBetaConstraints.getInstance(),buildContext);
  joinNode.attach();
  final Query query=new Query("query-1");
  final QueryTerminalNode queryNode=new QueryTerminalNode(this.buildContext.getNextId(),joinNode,query,query.getLhs(),0,buildContext);
  queryNode.attach();
  final org.drools.rule.Package pkg=new org.drools.rule.Package("com.drools.test");
  pkg.addRule(query);
  try {
    final Field pkgField=ruleBase.getClass().getSuperclass().getDeclaredField("pkgs");
    pkgField.setAccessible(true);
    final Map pkgs=(Map)pkgField.get(ruleBase);
    pkgs.put(pkg.getName(),pkg);
  }
 catch (  final Exception e) {
    fail("Should not throw any exception: " + e.getMessage());
  }
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  QueryResults results=workingMemory.getQueryResults("query-1");
  assertEquals(0,results.size());
  final Cheese stilton1=new Cheese("stilton",100);
  final FactHandle handle1=workingMemory.insert(stilton1);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  final Cheese cheddar=new Cheese("cheddar",55);
  workingMemory.insert(cheddar);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  final Cheese stilton2=new Cheese("stilton",5);
  final FactHandle handle2=workingMemory.insert(stilton2);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(2,results.size());
  QueryResult result=results.get(0);
  assertEquals(1,result.size());
  assertEquals(stilton1,result.get(0));
  result=results.get(1);
  assertEquals(1,result.size());
  assertEquals(stilton2,result.get(0));
  int i=0;
  for (final Iterator it=results.iterator(); it.hasNext(); ) {
    result=(QueryResult)it.next();
    assertEquals(1,result.size());
    if (i == 1) {
      assertSame(stilton2,result.get(0));
    }
 else {
      assertSame(stilton1,result.get(0));
    }
    i++;
  }
  workingMemory.retract(handle1);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  workingMemory.retract(handle2);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(0,results.size());
}
