{
  final ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  final Rete rete=ruleBase.getRete();
  final ClassObjectType queryObjectType=new ClassObjectType(DroolsQuery.class);
  final ObjectTypeNode queryObjectTypeNode=new ObjectTypeNode(1,queryObjectType,rete,3);
  queryObjectTypeNode.attach();
  ClassFieldExtractor extractor=new ClassFieldExtractor(DroolsQuery.class,"name");
  FieldValue field=FieldFactory.getFieldValue("query-1");
  final Evaluator evaluator=ValueType.STRING_TYPE.getEvaluator(Operator.EQUAL);
  LiteralConstraint constraint=new LiteralConstraint(extractor,evaluator,field);
  AlphaNode alphaNode=new AlphaNode(2,constraint,queryObjectTypeNode);
  alphaNode.attach();
  final LeftInputAdapterNode liaNode=new LeftInputAdapterNode(3,alphaNode);
  liaNode.attach();
  final ClassObjectType cheeseObjectType=new ClassObjectType(Cheese.class);
  final ObjectTypeNode cheeseObjectTypeNode=new ObjectTypeNode(4,cheeseObjectType,rete,3);
  cheeseObjectTypeNode.attach();
  extractor=new ClassFieldExtractor(Cheese.class,"type");
  field=FieldFactory.getFieldValue("stilton");
  constraint=new LiteralConstraint(extractor,evaluator,field);
  alphaNode=new AlphaNode(5,constraint,cheeseObjectTypeNode);
  alphaNode.attach();
  final JoinNode joinNode=new JoinNode(6,liaNode,alphaNode);
  joinNode.attach();
  final Query query=new Query("query-1");
  final QueryTerminalNode queryNode=new QueryTerminalNode(7,joinNode,query,query.getLhs());
  queryNode.attach();
  final org.drools.rule.Package pkg=new org.drools.rule.Package("com.drools.test");
  pkg.addRule(query);
  try {
    Field pkgField=ruleBase.getClass().getSuperclass().getDeclaredField("pkgs");
    pkgField.setAccessible(true);
    Map pkgs=(Map)pkgField.get(ruleBase);
    pkgs.put(pkg.getName(),pkg);
  }
 catch (  Exception e) {
    Assert.fail("Should not throw any exception: " + e.getMessage());
  }
  final WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  QueryResults results=workingMemory.getQueryResults("query-1");
  assertEquals(0,results.size());
  final Cheese stilton1=new Cheese("stilton",100);
  final FactHandle handle1=workingMemory.assertObject(stilton1);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  final Cheese cheddar=new Cheese("cheddar",55);
  workingMemory.assertObject(cheddar);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  final Cheese stilton2=new Cheese("stilton",5);
  final FactHandle handle2=workingMemory.assertObject(stilton2);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(2,results.size());
  QueryResult result=results.get(0);
  assertEquals(1,result.size());
  assertEquals(stilton2,result.get(0));
  result=results.get(1);
  assertEquals(1,result.size());
  assertEquals(stilton1,result.get(0));
  int i=0;
  for (final Iterator it=results.iterator(); it.hasNext(); ) {
    result=(QueryResult)it.next();
    assertEquals(1,result.size());
    if (i == 1) {
      assertSame(stilton1,result.get(0));
    }
 else {
      assertSame(stilton2,result.get(0));
    }
    i++;
  }
  workingMemory.retractObject(handle1);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(1,results.size());
  workingMemory.retractObject(handle2);
  results=workingMemory.getQueryResults("query-1");
  assertEquals(0,results.size());
}
