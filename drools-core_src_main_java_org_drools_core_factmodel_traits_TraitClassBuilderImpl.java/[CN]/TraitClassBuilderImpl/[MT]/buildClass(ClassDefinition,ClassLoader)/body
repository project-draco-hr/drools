{
  init(classDef);
  ClassWriter cw=null;
  try {
    String cName=BuildUtils.getInternalType(classDef.getClassName());
    String genericTypes=BuildUtils.getGenericTypes(classDef.getInterfaces());
    String superType=Type.getInternalName(Object.class);
    String[] intfaces=null;
    if (Object.class.getName().equals(classDef.getSuperClass())) {
      String[] tmp=BuildUtils.getInternalTypes(classDef.getInterfaces());
      intfaces=new String[tmp.length + 2];
      System.arraycopy(tmp,0,intfaces,0,tmp.length);
      intfaces[tmp.length]=Type.getInternalName(Serializable.class);
      intfaces[tmp.length + 1]=Type.getInternalName(GeneratedFact.class);
    }
 else {
      String[] tmp=BuildUtils.getInternalTypes(classDef.getInterfaces());
      intfaces=new String[tmp.length + 3];
      System.arraycopy(tmp,0,intfaces,0,tmp.length);
      intfaces[tmp.length]=BuildUtils.getInternalType(classDef.getSuperClass());
      intfaces[tmp.length + 1]=Type.getInternalName(Serializable.class);
      intfaces[tmp.length + 2]=Type.getInternalName(GeneratedFact.class);
    }
    cw=createClassWriter(classLoader,ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE,cName,genericTypes,superType,intfaces);
{
      if (classDef.getDefinedClass() == null || classDef.getDefinedClass().getAnnotation(Trait.class) == null) {
        AnnotationVisitor av0=cw.visitAnnotation(Type.getDescriptor(Trait.class),true);
        for (        AnnotationDefinition adef : classDef.getAnnotations()) {
          if (Trait.class.getName().equals(adef.getName())) {
            addAnnotationAttribute(adef,av0);
            break;
          }
        }
        av0.visitEnd();
      }
    }
    for (    FieldDefinition field : classDef.getFieldsDefinitions()) {
      buildField(cw,field);
    }
    finalizeCreation(classDef);
    cw.visitEnd();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return cw.toByteArray();
}
