{
  if (context.getType() == PropagationContext.MODIFICATION && this.skipOnModify && context.getDormantActivations() == 0) {
    return;
  }
  if (this.objectMemoryEnabled) {
    final ObjectHashSet memory=(ObjectHashSet)workingMemory.getNodeMemory(this);
    memory.add(factHandle,false);
  }
  this.sink.propagateAssertObject(factHandle,context,workingMemory);
  if (this.expirationOffset >= 0) {
    WorkingMemoryReteExpireAction expire=new WorkingMemoryReteExpireAction(factHandle,this);
    TimerService clock=workingMemory.getTimerService();
    long nextTimestamp=Math.max(clock.getCurrentTime() + this.expirationOffset,((EventFactHandle)factHandle).getStartTimestamp() + this.expirationOffset);
    JobContext jobctx=new ExpireJobContext(expire,workingMemory);
    JobHandle handle=clock.scheduleJob(new ExpireJob(),jobctx,new PointInTimeTrigger(nextTimestamp));
    jobctx.setJobHandle(handle);
  }
}
