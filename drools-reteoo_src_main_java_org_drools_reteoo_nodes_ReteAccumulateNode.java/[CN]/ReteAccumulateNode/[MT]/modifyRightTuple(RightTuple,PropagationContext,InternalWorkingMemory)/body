{
  final AccumulateMemory memory=(AccumulateMemory)workingMemory.getNodeMemory(this);
  BetaMemory bm=memory.getBetaMemory();
  bm.getRightTupleMemory().removeAdd(rightTuple);
  if (bm.getLeftTupleMemory() == null || bm.getLeftTupleMemory().size() == 0) {
    return;
  }
  LeftTuple childLeftTuple=rightTuple.firstChild;
  LeftTupleMemory leftMemory=bm.getLeftTupleMemory();
  FastIterator leftIt=getLeftIterator(leftMemory);
  LeftTuple leftTuple=getFirstLeftTuple(rightTuple,leftMemory,leftIt);
  this.constraints.updateFromFactHandle(bm.getContext(),workingMemory,rightTuple.getFactHandle());
  if (childLeftTuple != null && leftMemory.isIndexed() && !leftIt.isFullIterator() && (leftTuple == null || (leftTuple.getMemory() != childLeftTuple.getLeftParent().getMemory()))) {
    removePreviousMatchesForRightTuple(rightTuple,context,workingMemory,memory,childLeftTuple);
    childLeftTuple=null;
  }
  if (leftTuple != null) {
    if (childLeftTuple == null) {
      for (; leftTuple != null; leftTuple=(LeftTuple)leftIt.next(leftTuple)) {
        if (this.constraints.isAllowedCachedRight(bm.getContext(),leftTuple)) {
          final AccumulateContext accctx=(AccumulateContext)leftTuple.getObject();
          addMatch(leftTuple,rightTuple,null,null,workingMemory,memory,accctx,true);
          if (accctx.getAction() == null) {
            EvaluateResultConstraints action=new EvaluateResultConstraints(ActivitySource.LEFT,leftTuple,context,workingMemory,memory,accctx,true,this);
            accctx.setAction(action);
            context.addInsertAction(action);
          }
        }
      }
    }
 else {
      for (; leftTuple != null; leftTuple=(LeftTuple)leftIt.next(leftTuple)) {
        if (this.constraints.isAllowedCachedRight(bm.getContext(),leftTuple)) {
          final AccumulateContext accctx=(AccumulateContext)leftTuple.getObject();
          LeftTuple temp=null;
          if (childLeftTuple != null && childLeftTuple.getLeftParent() == leftTuple) {
            temp=childLeftTuple.getRightParentNext();
            childLeftTuple.reAddLeft();
            removeMatch(rightTuple,childLeftTuple,workingMemory,memory,accctx,true);
            childLeftTuple=temp;
          }
          addMatch(leftTuple,rightTuple,null,childLeftTuple,workingMemory,memory,accctx,true);
          if (temp != null) {
            childLeftTuple=temp;
          }
          if (accctx.getAction() == null) {
            EvaluateResultConstraints action=new EvaluateResultConstraints(ActivitySource.LEFT,leftTuple,context,workingMemory,memory,accctx,true,this);
            accctx.setAction(action);
            context.addInsertAction(action);
          }
        }
 else         if (childLeftTuple != null && childLeftTuple.getLeftParent() == leftTuple) {
          LeftTuple temp=childLeftTuple.getRightParentNext();
          final AccumulateContext accctx=(AccumulateContext)leftTuple.getObject();
          removeMatch(rightTuple,childLeftTuple,workingMemory,memory,accctx,true);
          if (accctx.getAction() == null) {
            EvaluateResultConstraints action=new EvaluateResultConstraints(ActivitySource.LEFT,leftTuple,context,workingMemory,memory,accctx,true,this);
            accctx.setAction(action);
            context.addInsertAction(action);
          }
          childLeftTuple=temp;
        }
      }
    }
  }
  this.constraints.resetFactHandle(bm.getContext());
}
