{
  final Set keys=new HashSet();
  keys.add("abstract");
  keys.add("continue");
  keys.add("for");
  keys.add("new");
  keys.add("switch");
  keys.add("assert");
  keys.add("default");
  keys.add("goto");
  keys.add("package");
  keys.add("synchronized");
  keys.add("boolean");
  keys.add("do");
  keys.add("if");
  keys.add("private");
  keys.add("this");
  keys.add("break");
  keys.add("double");
  keys.add("implements");
  keys.add("protected");
  keys.add("throw");
  keys.add("byte");
  keys.add("else");
  keys.add("import");
  keys.add("public");
  keys.add("throws");
  keys.add("case");
  keys.add("enum");
  keys.add("instanceof");
  keys.add("return");
  keys.add("transient");
  keys.add("catch");
  keys.add("extends");
  keys.add("int");
  keys.add("short");
  keys.add("try");
  keys.add("char");
  keys.add("final");
  keys.add("interface");
  keys.add("static");
  keys.add("void");
  keys.add("class");
  keys.add("finally");
  keys.add("long");
  keys.add("strictfp");
  keys.add("volatile");
  keys.add("const");
  keys.add("float");
  keys.add("native");
  keys.add("super");
  keys.add("while");
  return keys;
}
