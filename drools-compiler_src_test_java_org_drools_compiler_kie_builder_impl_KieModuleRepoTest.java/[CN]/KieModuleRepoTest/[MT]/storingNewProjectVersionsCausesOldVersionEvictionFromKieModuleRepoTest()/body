{
  setFinalField(maxSizeGaCacheField,null,2);
  setFinalField(maxSizeGaVersionsCacheField,null,3);
  ReleaseIdImpl[] releaseIds=new ReleaseIdImpl[7];
  for (int i=0; i < releaseIds.length; ++i) {
    releaseIds[i]=new ReleaseIdImpl("org","test","1." + i);
  }
  for (int i=0; i < releaseIds.length; ++i) {
    InternalKieModule kieModule=mock(InternalKieModule.class);
    when(kieModule.getReleaseId()).thenReturn(releaseIds[i]);
    when(kieModule.getCreationTimestamp()).thenReturn(10l);
    kieModuleRepo.store(kieModule);
    kieModuleRepo.store(kieModule);
  }
  int numKieModules=countKieModules(kieModuleRepo.kieModules);
  assertEquals("KieModuleRepo cache should not grow past " + KieModuleRepo.MAX_SIZE_GA_VERSIONS_CACHE + ": ",KieModuleRepo.MAX_SIZE_GA_VERSIONS_CACHE,numKieModules);
  int oldKieModulesSize=kieModuleRepo.oldKieModules.size();
  int maxOldKieModules=KieModuleRepo.MAX_SIZE_GA_CACHE * KieModuleRepo.MAX_SIZE_GA_VERSIONS_CACHE;
  assertTrue("KieModuleRepo old KieModules map is not limited in it's growth: " + oldKieModulesSize + " > "+ maxOldKieModules,oldKieModulesSize <= maxOldKieModules);
  for (int o=0; o < 2; ++o) {
    for (int i=0; i < releaseIds.length; ++i) {
      InternalKieModule kieModule=mock(InternalKieModule.class);
      when(kieModule.getReleaseId()).thenReturn(releaseIds[i]);
      when(kieModule.getCreationTimestamp()).thenReturn(10l);
      kieModuleRepo.store(kieModule);
    }
  }
  numKieModules=countKieModules(kieModuleRepo.kieModules);
  assertEquals("KieModuleRepo cache should not grow past " + KieModuleRepo.MAX_SIZE_GA_VERSIONS_CACHE + ": ",KieModuleRepo.MAX_SIZE_GA_VERSIONS_CACHE,numKieModules);
  oldKieModulesSize=kieModuleRepo.oldKieModules.size();
  assertTrue("KieModuleRepo old KieModules map is not limited in it's growth: " + oldKieModulesSize + " > "+ maxOldKieModules,oldKieModulesSize <= maxOldKieModules);
}
