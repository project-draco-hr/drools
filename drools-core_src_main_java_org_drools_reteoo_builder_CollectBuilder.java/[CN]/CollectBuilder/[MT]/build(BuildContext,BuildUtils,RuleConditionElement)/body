{
  boolean existSubNetwort=false;
  final Collect collect=(Collect)rce;
  context.pushRuleComponent(collect);
  final List resultBetaConstraints=context.getBetaconstraints();
  final List resultAlphaConstraints=context.getAlphaConstraints();
  final List resultBehaviors=context.getBehaviors();
  final Pattern sourcePattern=collect.getSourcePattern();
  final Pattern resultPattern=collect.getResultPattern();
  final ReteooComponentBuilder builder=utils.getBuilderFor(sourcePattern);
  final LeftTupleSource tupleSource=context.getTupleSource();
  final int currentPatternIndex=context.getCurrentPatternOffset();
  builder.build(context,utils,sourcePattern);
  if (context.getObjectSource() == null) {
    context.setObjectSource((ObjectSource)utils.attachNode(context,new RightInputAdapterNode(context.getNextId(),context.getTupleSource(),context)));
    context.setTupleSource(tupleSource);
    final TupleStartEqualsConstraint constraint=TupleStartEqualsConstraint.getInstance();
    final List betaConstraints=new ArrayList();
    betaConstraints.add(constraint);
    context.setBetaconstraints(betaConstraints);
    existSubNetwort=true;
  }
  BetaConstraints binder=utils.createBetaNodeConstraint(context,context.getBetaconstraints(),false);
  BetaConstraints resultBinder=utils.createBetaNodeConstraint(context,resultBetaConstraints,true);
  Behavior[] behaviors=Behavior.EMPTY_BEHAVIOR_LIST;
  if (!context.getBehaviors().isEmpty()) {
    behaviors=(Behavior[])context.getBehaviors().toArray(new Behavior[context.getBehaviors().size()]);
  }
  CollectAccumulator accumulator=new CollectAccumulator(collect);
  Accumulate accumulate=new Accumulate(sourcePattern,sourcePattern.getRequiredDeclarations(),(Declaration[])collect.getInnerDeclarations().values().toArray(new Declaration[0]),new Accumulator[]{accumulator});
  context.setTupleSource((LeftTupleSource)utils.attachNode(context,new AccumulateNode(context.getNextId(),context.getTupleSource(),context.getObjectSource(),(AlphaNodeFieldConstraint[])resultAlphaConstraints.toArray(new AlphaNodeFieldConstraint[resultAlphaConstraints.size()]),binder,resultBinder,behaviors,accumulate,existSubNetwort,context)));
  context.setObjectSource(null);
  context.setCurrentPatternOffset(currentPatternIndex);
  context.setBehaviors(Collections.EMPTY_LIST);
  context.popRuleComponent();
}
