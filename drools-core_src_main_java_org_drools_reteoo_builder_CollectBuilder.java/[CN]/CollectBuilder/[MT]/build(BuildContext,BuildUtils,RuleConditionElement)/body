{
  final Collect collect=(Collect)rce;
  final Pattern sourcePattern=collect.getSourcePattern();
  final ReteooComponentBuilder builder=utils.getBuilderFor(sourcePattern);
  builder.build(context,utils,sourcePattern);
  final Pattern pattern=collect.getResultPattern();
  pattern.setOffset(context.getCurrentPatternOffset() - 1);
  final List constraints=pattern.getConstraints();
  final List betaConstraints=new ArrayList();
  final List alphaConstraints=new ArrayList();
  for (final Iterator it=constraints.iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof Declaration) {
      continue;
    }
    final AlphaNodeFieldConstraint fieldConstraint=(AlphaNodeFieldConstraint)object;
    if (fieldConstraint instanceof LiteralConstraint) {
      alphaConstraints.add(fieldConstraint);
    }
 else {
      utils.checkUnboundDeclarations(context,fieldConstraint.getRequiredDeclarations());
      betaConstraints.add(fieldConstraint);
    }
  }
  final BetaConstraints resultsBinder=utils.createBetaNodeConstraint(context,betaConstraints);
  context.setTupleSource((TupleSource)utils.attachNode(context,new CollectNode(context.getNextId(),context.getTupleSource(),context.getObjectSource(),(AlphaNodeFieldConstraint[])alphaConstraints.toArray(new AlphaNodeFieldConstraint[alphaConstraints.size()]),context.getBetaconstraints(),resultsBinder,collect)));
  context.setObjectSource(null);
}
