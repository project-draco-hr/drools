{
  pattern.setOffset(context.getCurrentPatternOffset());
  if (ClassObjectType.Activation_ObjectType.isAssignableFrom(pattern.getObjectType())) {
    PropertyHandler handler=PropertyHandlerFactory.getPropertyHandler(AgendaItem.class);
    if (handler == null) {
      PropertyHandlerFactoryFixer.getPropertyHandlerClass().put(AgendaItem.class,new ActivationPropertyHandler());
    }
  }
  final List<AlphaNodeFieldConstraint> alphaConstraints=new LinkedList<AlphaNodeFieldConstraint>();
  final List<BetaNodeFieldConstraint> betaConstraints=new LinkedList<BetaNodeFieldConstraint>();
  final List<Behavior> behaviors=pattern.getBehaviors();
  this.createConstraints(context,utils,pattern,alphaConstraints,betaConstraints);
  context.setBetaconstraints(betaConstraints);
  if (pattern.getSource() != null) {
    context.setAlphaConstraints(alphaConstraints);
    final int currentOffset=context.getCurrentPatternOffset();
    PatternSource source=pattern.getSource();
    ReteooComponentBuilder builder=utils.getBuilderFor(source);
    if (builder == null) {
      throw new RuntimeException("Unknown pattern source type: " + source.getClass() + " for source "+ source+ " on pattern "+ pattern);
    }
    builder.build(context,utils,source);
    context.setCurrentPatternOffset(currentOffset);
  }
 else {
    PatternSource source=EntryPoint.DEFAULT;
    ReteooComponentBuilder builder=utils.getBuilderFor(source);
    builder.build(context,utils,source);
  }
  if (pattern.getSource() == null || (!(pattern.getSource() instanceof WindowReference) && (context.getCurrentEntryPoint() != EntryPoint.DEFAULT || !behaviors.isEmpty()))) {
    attachObjectTypeNode(context,utils,pattern);
  }
  if (!behaviors.isEmpty()) {
    WindowNode wn=new WindowNode(context.getNextId(),alphaConstraints,behaviors,context.getObjectSource(),context);
    context.setObjectSource((WindowNode)utils.attachNode(context,wn));
    alphaConstraints.clear();
  }
  if (context.getObjectSource() != null) {
    attachAlphaNodes(context,utils,pattern,alphaConstraints);
  }
  context.incrementCurrentPatternOffset();
}
