{
  boolean objectMemory=context.isObjectTypeNodeMemoryEnabled();
  boolean alphaMemory=context.isAlphaMemoryAllowed();
  ObjectType objectType=pattern.getObjectType();
  if (pattern.getObjectType() instanceof ClassObjectType) {
    if (DroolsQuery.class == ((ClassObjectType)pattern.getObjectType()).getClassType()) {
      context.setTupleMemoryEnabled(false);
      context.setObjectTypeNodeMemoryEnabled(false);
      context.setTerminalNodeMemoryEnabled(false);
      context.setAlphaNodeMemoryAllowed(false);
    }
    Class cls=((ClassObjectType)pattern.getObjectType()).getClassType();
    try {
      Class rbCls=context.getRuleBase().getCompositePackageClassLoader().loadClass(cls.getName());
      if (cls != rbCls) {
        objectType=new ClassObjectType(rbCls);
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        DroolsObjectOutputStream stream=new DroolsObjectOutputStream(baos);
        List list=new ArrayList(alphaConstraints.size());
        for (final Iterator it=alphaConstraints.iterator(); it.hasNext(); ) {
          AlphaNodeFieldConstraint constraint=(AlphaNodeFieldConstraint)it.next();
          constraint.writeExternal(stream);
          constraint=constraint.getClass().newInstance();
          constraint.readExternal(new DroolsObjectInputStream(new ByteArrayInputStream(baos.toByteArray()),context.getRuleBase().getCompositePackageClassLoader()));
          list.add(constraint);
        }
        alphaConstraints=list;
      }
    }
 catch (    Exception e) {
      throw new RuntimeDroolsException("Unable to Attach ObjectTypeNode as class cannot be found '" + cls.getName() + "'",e);
    }
  }
  context.setObjectSource((ObjectSource)utils.attachNode(context,new EntryPointNode(context.getNextId(),context.getRuleBase().getRete(),context)));
  context.setObjectSource((ObjectSource)utils.attachNode(context,new ObjectTypeNode(context.getNextId(),(EntryPointNode)context.getObjectSource(),objectType,context)));
  for (final Iterator it=alphaConstraints.iterator(); it.hasNext(); ) {
    final AlphaNodeFieldConstraint constraint=(AlphaNodeFieldConstraint)it.next();
    context.setObjectSource((ObjectSource)utils.attachNode(context,new AlphaNode(context.getNextId(),(AlphaNodeFieldConstraint)constraint,context.getObjectSource(),context)));
  }
  context.setObjectTypeNodeMemoryEnabled(objectMemory);
  context.setAlphaNodeMemoryAllowed(alphaMemory);
}
