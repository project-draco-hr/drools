{
  boolean objectMemory=context.isObjectTypeNodeMemoryEnabled();
  boolean alphaMemory=context.isAlphaMemoryAllowed();
  ObjectType objectType=pattern.getObjectType();
  if (pattern.getObjectType() instanceof ClassObjectType) {
    if (DroolsQuery.class == ((ClassObjectType)pattern.getObjectType()).getClassType()) {
      context.setTupleMemoryEnabled(false);
      context.setObjectTypeNodeMemoryEnabled(false);
      context.setTerminalNodeMemoryEnabled(false);
      context.setAlphaNodeMemoryAllowed(false);
    }
  }
  context.setObjectSource((ObjectSource)utils.attachNode(context,new EntryPointNode(context.getNextId(),context.getRuleBase().getRete(),context)));
  ObjectTypeNode otn=new ObjectTypeNode(context.getNextId(),(EntryPointNode)context.getObjectSource(),objectType,context);
  if (objectType.isEvent() && EventProcessingOption.STREAM.equals(context.getRuleBase().getConfiguration().getEventProcessingMode())) {
    long expirationOffset=0;
    for (    TypeDeclaration type : context.getRuleBase().getTypeDeclarations()) {
      if (type.getObjectType().isAssignableFrom(objectType)) {
        expirationOffset=Math.max(type.getExpirationOffset(),expirationOffset);
      }
    }
    if (expirationOffset == 0) {
      otn.setExpirationOffset(context.getTemporalDistance().getExpirationOffset(pattern));
    }
 else {
      otn.setExpirationOffset(expirationOffset);
    }
  }
  context.setObjectSource((ObjectSource)utils.attachNode(context,otn));
  for (final Iterator<Constraint> it=alphaConstraints.iterator(); it.hasNext(); ) {
    final AlphaNodeFieldConstraint constraint=(AlphaNodeFieldConstraint)it.next();
    context.setObjectSource((ObjectSource)utils.attachNode(context,new AlphaNode(context.getNextId(),(AlphaNodeFieldConstraint)constraint,context.getObjectSource(),context)));
  }
  context.setObjectTypeNodeMemoryEnabled(objectMemory);
  context.setAlphaNodeMemoryAllowed(alphaMemory);
}
