{
  boolean typesafe=context.isTypesafe();
  context.getBuildStack().push(((RuleImpl)context.getRule()).getLhs());
  try {
    MVELDialect dialect=(MVELDialect)context.getDialect("mvel");
    Map<String,Declaration> decls=context.getDeclarationResolver().getDeclarations((RuleImpl)context.getRule());
    MVELAnalysisResult analysis=(MVELAnalysisResult)dialect.analyzeExpression(context,context.getRuleDescr(),(String)context.getRuleDescr().getSalience(),new BoundIdentifiers(context.getDeclarationResolver().getDeclarationClasses(decls),context.getKnowledgeBuilder().getGlobals()));
    context.setTypesafe(analysis.isTypesafe());
    final BoundIdentifiers usedIdentifiers=analysis.getBoundIdentifiers();
    int i=usedIdentifiers.getDeclrClasses().keySet().size();
    Declaration[] previousDeclarations=new Declaration[i];
    i=0;
    for (    String id : usedIdentifiers.getDeclrClasses().keySet()) {
      previousDeclarations[i++]=decls.get(id);
    }
    Arrays.sort(previousDeclarations,SortDeclarations.instance);
    MVELCompilationUnit unit=dialect.getMVELCompilationUnit((String)context.getRuleDescr().getSalience(),analysis,previousDeclarations,null,null,context,"drools",KnowledgeHelper.class,false);
    MVELSalienceExpression expr=new MVELSalienceExpression(unit,dialect.getId());
    context.getRule().setSalience(KiePolicyHelper.isPolicyEnabled() ? new SafeSalience(expr) : expr);
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
    data.addCompileable(context.getRule(),expr);
    expr.compile(data);
  }
 catch (  final Exception e) {
    copyErrorLocation(e,context.getRuleDescr());
    context.addError(new DescrBuildError(context.getParentDescr(),context.getRuleDescr(),null,"Unable to build expression for 'salience' : " + e.getMessage() + "'"+ context.getRuleDescr().getSalience()+ "'"));
  }
 finally {
    context.setTypesafe(typesafe);
  }
}
