{
  if (this.active == active) {
    return;
  }
  this.active=active;
  if (active) {
    ((EventSupport)this.workingMemory).getRuleFlowEventSupport().fireBeforeRuleFlowGroupActivated(this,this.workingMemory);
    if (this.list.isEmpty()) {
      if (this.autoDeactivate) {
        WorkingMemoryAction action=new DeactivateCallback(this);
        this.workingMemory.queueWorkingMemoryAction(action);
      }
    }
 else {
      triggerActivations();
    }
    ((EventSupport)this.workingMemory).getRuleFlowEventSupport().fireAfterRuleFlowGroupActivated(this,this.workingMemory);
  }
 else {
    ((EventSupport)this.workingMemory).getRuleFlowEventSupport().fireBeforeRuleFlowGroupDeactivated(this,this.workingMemory);
    final Iterator it=this.list.iterator();
    for (RuleFlowGroupNode node=(RuleFlowGroupNode)it.next(); node != null; node=(RuleFlowGroupNode)it.next()) {
      final Activation activation=node.getActivation();
      activation.remove();
      if (activation.getActivationGroupNode() != null) {
        activation.getActivationGroupNode().getActivationGroup().removeActivation(activation);
      }
    }
    notifyRuleFlowGroupListeners();
    ((EventSupport)this.workingMemory).getRuleFlowEventSupport().fireAfterRuleFlowGroupDeactivated(this,this.workingMemory);
  }
}
