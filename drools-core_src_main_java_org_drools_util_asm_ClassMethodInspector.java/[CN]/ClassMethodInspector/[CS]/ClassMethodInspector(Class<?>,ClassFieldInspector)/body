{
  this.classFieldInspector=classFieldInspector;
  Method[] methods=clazz.getDeclaredMethods();
  Map<String,Method> listSetters=classFieldInspector.getSetterMethods();
  Map<String,Method> listGetters=classFieldInspector.getSetterMethods();
  for (int i=0; i < methods.length; i++) {
    Method aMethod=methods[i];
    int modifiers=methods[i].getModifiers();
    String methodName=aMethod.getName();
    if (methodName != "hashCode" && methodName != "equals" && Modifier.isPublic(modifiers)) {
      if (methodName.length() >= 4) {
        char c[]=new char[1];
        c[0]=methodName.charAt(3);
        methodName=new String(c).toLowerCase() + methodName.substring(4);
      }
 else {
        methodName=aMethod.getName();
      }
      if (aMethod.getName().length() <= 3 || (listSetters.containsKey(methodName) == false && listGetters.containsKey(methodName) == false)) {
        Class<?>[] listParam=aMethod.getParameterTypes();
        for (int j=0; j < listParam.length; j++) {
          Class c=listParam[j];
          System.out.println(aMethod.getName());
          addParamMethod(aMethod.getName(),listParam[j].getName().substring(listParam[j].getName().lastIndexOf(".") + 1));
        }
      }
    }
  }
}
