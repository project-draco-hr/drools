{
  List<XpathPart> parts=new ArrayList<XpathPart>();
  boolean lazyPath=false;
  int i=0;
  if (xpath.charAt(0) == '/') {
    i=1;
  }
 else   if (xpath.charAt(0) == '?' && xpath.charAt(1) == '/') {
    lazyPath=true;
    i=2;
  }
 else {
    new XpathAnalysis(parts,"An oopath expression has to start with '/' or '?/'");
  }
  List<String> constraints=new ArrayList<String>();
  String inlineCast=null;
  int index=-1;
  int lastStart=i;
  int nestedParam=0;
  int nestedCurly=0;
  int nestedSquare=0;
  boolean iterate=true;
  boolean isQuoted=false;
  String field=null;
  String error=null;
  for (; i < xpath.length() && error == null; i++) {
switch (xpath.charAt(i)) {
case '/':
case '.':
      if (!isQuoted && nestedParam == 0 && nestedCurly == 0 && nestedSquare == 0) {
        if (field == null) {
          field=xpath.substring(lastStart,xpath.charAt(i - 1) == '?' ? i - 1 : i).trim();
        }
        parts.add(new XpathPart(field,iterate,lazyPath,constraints,inlineCast,index));
        iterate=xpath.charAt(i) == '/';
        if (xpath.charAt(i - 1) == '?') {
          if (lazyPath) {
            error="It is not possible to have 2 non-reactive parts in the same oopath";
            break;
          }
 else {
            lazyPath=true;
          }
        }
        constraints=new ArrayList<String>();
        inlineCast=null;
        index=-1;
        lastStart=i + 1;
        field=null;
      }
    break;
case '(':
  if (!isQuoted) {
    nestedParam++;
  }
break;
case ')':
if (!isQuoted) {
nestedParam--;
if (nestedParam < 0) {
  error="Unbalanced parenthesis";
}
}
break;
case '[':
if (!isQuoted && nestedParam == 0 && nestedCurly == 0) {
if (nestedSquare == 0) {
if (field == null) {
field=xpath.substring(lastStart,i).trim();
}
lastStart=i + 1;
}
nestedSquare++;
}
break;
case ']':
if (!isQuoted && nestedParam == 0 && nestedCurly == 0) {
nestedSquare--;
if (nestedSquare == 0) {
try {
index=Integer.parseInt(xpath.substring(lastStart,i).trim());
}
 catch (Exception e) {
error="Expected int but found: " + xpath.substring(lastStart,i).trim();
}
}
 else if (nestedSquare < 0) {
error="Unbalanced square brackets";
}
}
break;
case '{':
if (!isQuoted && nestedParam == 0 && nestedSquare == 0) {
if (nestedCurly == 0) {
if (field == null) {
field=xpath.substring(lastStart,i).trim();
}
lastStart=i + 1;
}
nestedCurly++;
}
break;
case '}':
if (!isQuoted && nestedParam == 0 && nestedSquare == 0) {
nestedCurly--;
if (nestedCurly == 0) {
String constraint=xpath.substring(lastStart,i).trim();
if (constraint.startsWith("#")) {
inlineCast=constraint.substring(1);
}
 else {
constraints.add(constraint);
}
}
 else if (nestedCurly < 0) {
error="Unbalanced curly braces";
}
}
break;
case ',':
if (!isQuoted && nestedParam == 0 && nestedCurly == 1) {
String constraint=xpath.substring(lastStart,i).trim();
if (constraint.startsWith("#")) {
inlineCast=constraint.substring(1);
}
 else {
constraints.add(constraint);
}
lastStart=i + 1;
}
break;
case '"':
case '\'':
isQuoted=!isQuoted;
break;
}
}
if (field == null) {
field=xpath.substring(lastStart).trim();
}
parts.add(new XpathPart(field,iterate,lazyPath,constraints,inlineCast,index));
return new XpathAnalysis(parts,error);
}
