{
  ModelSource modelSource=new ModelSource(){
    @Override public InputStream getInputStream() throws IOException {
      return mavenProjectStream;
    }
    @Override public String getLocation(){
      return "";
    }
  }
;
  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(this.plexusContainer.getContainerRealm());
    ProjectBuilder projectBuilder=lookup(ProjectBuilder.class);
    ProjectBuildingResult result=projectBuilder.build(modelSource,getProjectBuildingRequest());
    if (result != null && result.getDependencyResolutionResult() != null && !result.getDependencyResolutionResult().getCollectionErrors().isEmpty()) {
      Exception depedencyResolutionException=result.getDependencyResolutionResult().getCollectionErrors().get(0);
      if (depedencyResolutionException != null)       throw new MavenEmbedderException(depedencyResolutionException.getMessage(),depedencyResolutionException);
    }
    return result.getProject();
  }
 catch (  ComponentLookupException e) {
    throw new MavenEmbedderException(e.getMessage(),e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(originalCl);
    try {
      mavenProjectStream.close();
    }
 catch (    IOException e) {
    }
  }
}
