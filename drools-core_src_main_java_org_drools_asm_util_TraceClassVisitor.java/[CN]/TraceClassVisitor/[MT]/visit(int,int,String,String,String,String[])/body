{
  final int major=version & 0xFFFF;
  final int minor=version >>> 16;
  this.buf.setLength(0);
  this.buf.append("// class version ").append(major).append('.').append(minor).append(" (").append(version).append(")\n");
  if ((access & Opcodes.ACC_DEPRECATED) != 0) {
    this.buf.append("// DEPRECATED\n");
  }
  this.buf.append("// access flags ").append(access).append('\n');
  appendDescriptor(TraceAbstractVisitor.CLASS_SIGNATURE,signature);
  if (signature != null) {
    final TraceSignatureVisitor sv=new TraceSignatureVisitor(access);
    final SignatureReader r=new SignatureReader(signature);
    r.accept(sv);
    this.buf.append("// declaration: ").append(name).append(sv.getDeclaration()).append('\n');
  }
  appendAccess(access & ~Opcodes.ACC_SUPER);
  if ((access & Opcodes.ACC_ANNOTATION) != 0) {
    this.buf.append("@interface ");
  }
 else   if ((access & Opcodes.ACC_INTERFACE) != 0) {
    this.buf.append("interface ");
  }
 else   if ((access & Opcodes.ACC_ENUM) != 0) {
    this.buf.append("enum ");
  }
 else {
    this.buf.append("class ");
  }
  appendDescriptor(TraceAbstractVisitor.INTERNAL_NAME,name);
  if (superName != null && !superName.equals("java/lang/Object")) {
    this.buf.append(" extends ");
    appendDescriptor(TraceAbstractVisitor.INTERNAL_NAME,superName);
    this.buf.append(' ');
  }
  if (interfaces != null && interfaces.length > 0) {
    this.buf.append(" implements ");
    for (int i=0; i < interfaces.length; ++i) {
      appendDescriptor(TraceAbstractVisitor.INTERNAL_NAME,interfaces[i]);
      this.buf.append(' ');
    }
  }
  this.buf.append(" {\n\n");
  this.text.add(this.buf.toString());
  if (this.cv != null) {
    this.cv.visit(version,access,name,signature,superName,interfaces);
  }
}
