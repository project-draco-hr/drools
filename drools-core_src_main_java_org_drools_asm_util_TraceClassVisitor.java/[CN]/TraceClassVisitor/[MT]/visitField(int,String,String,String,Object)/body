{
  this.buf.setLength(0);
  this.buf.append('\n');
  if ((access & Opcodes.ACC_DEPRECATED) != 0) {
    this.buf.append(this.tab).append("// DEPRECATED\n");
  }
  this.buf.append(this.tab).append("// access flags ").append(access).append('\n');
  if (signature != null) {
    this.buf.append(this.tab);
    appendDescriptor(TraceAbstractVisitor.FIELD_SIGNATURE,signature);
    final TraceSignatureVisitor sv=new TraceSignatureVisitor(0);
    final SignatureReader r=new SignatureReader(signature);
    r.acceptType(sv);
    this.buf.append(this.tab).append("// declaration: ").append(sv.getDeclaration()).append('\n');
  }
  this.buf.append(this.tab);
  appendAccess(access);
  if ((access & Opcodes.ACC_ENUM) != 0) {
    this.buf.append("enum ");
  }
  appendDescriptor(TraceAbstractVisitor.FIELD_DESCRIPTOR,desc);
  this.buf.append(' ').append(name);
  if (value != null) {
    this.buf.append(" = ");
    if (value instanceof String) {
      this.buf.append("\"").append(value).append("\"");
    }
 else {
      this.buf.append(value);
    }
  }
  this.buf.append('\n');
  this.text.add(this.buf.toString());
  final TraceFieldVisitor tav=createTraceFieldVisitor();
  this.text.add(tav.getText());
  if (this.cv != null) {
    tav.fv=this.cv.visitField(access,name,desc,signature,value);
  }
  return tav;
}
