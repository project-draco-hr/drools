{
  this.buf.setLength(0);
  this.buf.append('\n');
  if ((access & Opcodes.ACC_DEPRECATED) != 0) {
    this.buf.append(this.tab).append("// DEPRECATED\n");
  }
  this.buf.append(this.tab).append("// access flags ").append(access).append('\n');
  this.buf.append(this.tab);
  appendDescriptor(TraceAbstractVisitor.METHOD_SIGNATURE,signature);
  if (signature != null) {
    final TraceSignatureVisitor v=new TraceSignatureVisitor(0);
    final SignatureReader r=new SignatureReader(signature);
    r.accept(v);
    final String genericDecl=v.getDeclaration();
    final String genericReturn=v.getReturnType();
    final String genericExceptions=v.getExceptions();
    this.buf.append(this.tab).append("// declaration: ").append(genericReturn).append(' ').append(name).append(genericDecl);
    if (genericExceptions != null) {
      this.buf.append(" throws ").append(genericExceptions);
    }
    this.buf.append('\n');
  }
  appendAccess(access);
  if ((access & Opcodes.ACC_NATIVE) != 0) {
    this.buf.append("native ");
  }
  if ((access & Opcodes.ACC_VARARGS) != 0) {
    this.buf.append("varargs ");
  }
  if ((access & Opcodes.ACC_BRIDGE) != 0) {
    this.buf.append("bridge ");
  }
  this.buf.append(name);
  appendDescriptor(TraceAbstractVisitor.METHOD_DESCRIPTOR,desc);
  if (exceptions != null && exceptions.length > 0) {
    this.buf.append(" throws ");
    for (int i=0; i < exceptions.length; ++i) {
      appendDescriptor(TraceAbstractVisitor.INTERNAL_NAME,exceptions[i]);
      this.buf.append(' ');
    }
  }
  this.buf.append('\n');
  this.text.add(this.buf.toString());
  final TraceMethodVisitor tcv=createTraceMethodVisitor();
  this.text.add(tcv.getText());
  if (this.cv != null) {
    tcv.mv=this.cv.visitMethod(access,name,desc,signature,exceptions);
  }
  return tcv;
}
