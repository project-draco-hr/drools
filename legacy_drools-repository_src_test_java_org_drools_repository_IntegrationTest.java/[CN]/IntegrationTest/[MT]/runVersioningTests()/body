{
  RepositoryManager repo=RepositoryFactory.getStatefulRepository();
  RuleDef rule=new RuleDef("Integration rule 1","rule { when bob likes cheese then print 'yeah' }");
  rule.setDocumentation("This is an initial rule");
  rule.addTag("CHEESE RULE");
  rule.setMetaData(new MetaData("a rule","michael","cheese","something","drl"));
  repo.save(rule);
  List list=repo.findRulesByTag("CHEESE RULE");
  assertEquals(1,list.size());
  rule=(RuleDef)list.get(0);
  assertEquals("This is an initial rule",rule.getDocumentation());
  MetaData meta=new MetaData();
  meta.setContributor("Michael");
  meta.setDescription("A test ruleset");
  RuleSetDef ruleSet=new RuleSetDef("Integration ruleset 1",meta);
  RuleSetVersionInfo info=ruleSet.getVersionInfoWorking();
  info.setStatus("draft");
  repo.save(ruleSet);
  repo.close();
  repo=RepositoryFactory.getStatefulRepository();
  assertTrue(repo.listRuleSets().size() > 0);
  ruleSet=repo.loadRuleSet("Integration ruleset 1",1);
  assertEquals("draft",ruleSet.getVersionInfoWorking().getStatus());
  repo.close();
  ruleSet.addRule(rule);
  ruleSet.addRule(new RuleDef("Integration rule 2","Some content"));
  ruleSet.addFunction(new FunctionDef("this is a function","blah blah blah"));
  ruleSet.addApplicationData(new ApplicationDataDef("blah","String"));
  ruleSet.addImport(new ImportDef("java.lang.String"));
  repo=RepositoryFactory.getStatefulRepository();
  repo.save(ruleSet);
  repo.close();
  repo=RepositoryFactory.getStatefulRepository();
  ruleSet=repo.loadRuleSet("Integration ruleset 1",1);
  repo.close();
  assertEquals("this is a function",((FunctionDef)ruleSet.getFunctions().iterator().next()).getFunctionContent());
  assertEquals(2,ruleSet.getRules().size());
  for (Iterator iter=ruleSet.getRules().iterator(); iter.hasNext(); ) {
    RuleDef myRule=(RuleDef)iter.next();
    myRule.setContent("CHANGED RULE TEXT");
    ruleSet.modify(myRule);
  }
  repo=RepositoryFactory.getStatefulRepository();
  repo.save(ruleSet);
  ruleSet=repo.loadRuleSet("Integration ruleset 1",1);
  rule=ruleSet.findRuleByName("Integration rule 2");
  List history=repo.listSaveHistory(rule);
  assertEquals(1,history.size());
  RuleDef historicalRule=(RuleDef)history.get(0);
  String oldContent=historicalRule.getContent();
  assertTrue(!oldContent.equals(rule.getContent()));
  assertEquals(2,ruleSet.getRules().size());
  ruleSet.createNewVersion("New version");
  ruleSet.getVersionInfoWorking().setStatus("pending");
  repo.save(ruleSet);
  repo.close();
  repo=RepositoryFactory.getStatefulRepository();
  ruleSet=repo.loadRuleSet("Integration ruleset 1",2);
  assertEquals(2,ruleSet.getVersionHistory().size());
  assertEquals("New version",ruleSet.getVersionInfoWorking().getVersionComment());
  assertEquals("pending",ruleSet.getVersionInfoWorking().getStatus());
  ruleSet.addRule(new RuleDef("Integration rule 3","content"));
  repo.save(ruleSet);
  ruleSet=repo.loadRuleSet("Integration ruleset 1",1);
  assertEquals(2,ruleSet.getRules().size());
  assertEquals("draft",ruleSet.getVersionInfoWorking().getStatus());
  assertEquals(3,repo.loadRuleSet("Integration ruleset 1",2).getRules().size());
  runTestQueryAPI(repo);
  repo.close();
}
