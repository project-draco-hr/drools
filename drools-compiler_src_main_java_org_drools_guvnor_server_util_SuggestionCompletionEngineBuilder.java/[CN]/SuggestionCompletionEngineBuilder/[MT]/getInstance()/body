{
  this.instance.setFactTypes(this.factTypes.toArray(new String[this.factTypes.size()]));
  this.instance.setModifiers(this.modifiersForType);
  Map<String,ModelField[]> modelMap=new HashMap<String,ModelField[]>();
  for (  Map.Entry<String,String[]> typeEntry : this.fieldsForType.entrySet()) {
    List<ModelField> fields=new ArrayList<ModelField>();
    for (    String field : typeEntry.getValue()) {
      String fieldName=field;
      String fieldType=this.fieldTypes.get(typeEntry.getKey() + "." + field);
      Class<?> fieldClazz=this.fieldClasses.get(typeEntry.getKey() + "." + field);
      fields.add(new ModelField(fieldName,fieldClazz == null ? null : fieldClazz.getName(),fieldType));
    }
    modelMap.put(typeEntry.getKey(),fields.toArray(new ModelField[fields.size()]));
  }
  this.instance.setFieldsForTypes(modelMap);
  for (  String fieldName : this.fieldTypesField.keySet()) {
    Field field=this.fieldTypesField.get(fieldName);
    if (field != null) {
      String genericType=obtainGenericType(field.getGenericType());
      if (genericType != null) {
        this.instance.putParametricFieldType(fieldName,genericType);
      }
      Class<?> fieldClass=field.getType();
      if (fieldClass.isEnum()) {
        Field[] flds=fieldClass.getDeclaredFields();
        List<String> listEnum=new ArrayList<String>();
        int i=0;
        for (        Field f : flds) {
          if (f.isEnumConstant()) {
            listEnum.add(i + "=" + f.getName());
            i++;
          }
        }
        String a[]=new String[listEnum.size()];
        i=0;
        for (        String value : listEnum) {
          a[i]=value;
          i++;
        }
        this.instance.putDataEnumList(fieldName,a);
      }
    }
  }
  this.instance.setGlobalVariables(this.globalTypes);
  this.instance.actionDSLSentences=makeArray(this.actionDSLSentences);
  this.instance.conditionDSLSentences=makeArray(this.conditionDSLSentences);
  this.instance.keywordDSLItems=makeArray(this.keywordDSLItems);
  this.instance.anyScopeDSLItems=makeArray(this.anyScopeDSLItems);
  this.instance.setGlobalCollections(this.globalCollections.toArray(new String[globalCollections.size()]));
  return this.instance;
}
