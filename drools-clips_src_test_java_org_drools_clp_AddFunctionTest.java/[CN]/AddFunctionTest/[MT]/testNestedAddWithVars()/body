{
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  InternalWorkingMemory workingMemory=(InternalWorkingMemory)ruleBase.newStatefulSession();
  InternalFactHandle factHandle=(InternalFactHandle)workingMemory.assertObject(new BigDecimal(10));
  ReteTuple tuple=new ReteTuple(factHandle);
  ObjectType objectType=new ClassObjectType(BigDecimal.class);
  Pattern pattern0=new Pattern(0,objectType);
  Pattern pattern1=new Pattern(1,objectType);
  PatternExtractor extractor=new PatternExtractor(objectType);
  Map variables=new HashMap();
  variables.put("pd",new CLPPreviousDeclarationVariable(new Declaration("pd",extractor,pattern0)));
  variables.put("ld",new CLPLocalDeclarationVariable(new Declaration("ld",extractor,pattern1)));
  ValueHandler val1=new TempTokenVariable("pd");
  ValueHandler val2=new IndexedLocalVariableValue("lv",0);
  ValueHandler val3=new TempTokenVariable("ld");
  ExecutionContext context=new ExecutionContext(workingMemory,tuple,new BigDecimal(10),1);
  context.setLocalVariable(0,new ObjectValueHandler(new BigDecimal(10)));
  FunctionCaller functionValue=new FunctionCaller(new PlusFunction());
  functionValue.addParameter(val1);
  functionValue.addParameter(val2);
  PlusFunction add=new PlusFunction();
  FunctionCaller f=new FunctionCaller(add);
  f.addParameter(val3);
  f.addParameter(functionValue);
  f.replaceTempTokens(variables);
  assertEquals(new BigDecimal(30),f.getBigDecimalValue(context));
}
