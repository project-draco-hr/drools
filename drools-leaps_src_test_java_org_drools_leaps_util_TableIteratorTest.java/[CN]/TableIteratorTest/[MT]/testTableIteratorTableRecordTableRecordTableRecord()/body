{
  this.testTable.add(this.h1);
  IteratorFromPositionToTableStart it=new IteratorFromPositionToTableStart(this.testTable.headRecord,this.testTable.tailRecord);
  assertTrue(it.hasNext());
  assertFalse(it.isEmpty());
  assertEquals(this.h1,it.next());
  assertFalse(it.hasNext());
  assertFalse(it.isEmpty());
  this.testTable.clear();
  this.testTable.add(this.h1);
  this.testTable.add(this.h1000);
  this.testTable.add(this.h10);
  this.testTable.add(this.h100);
  it=new IteratorFromPositionToTableStart(this.testTable.headRecord,this.testTable.headRecord);
  assertFalse(it.isEmpty());
  assertTrue(it.hasNext());
  assertEquals(this.h1000,it.next());
  assertTrue(it.hasNext());
  assertEquals(this.h100,it.next());
  assertTrue(it.hasNext());
  assertEquals(this.h10,it.next());
  assertTrue(it.hasNext());
  assertEquals(this.h1,it.next());
  assertFalse(it.hasNext());
  this.testTable.clear();
  this.testTable.add(this.h1);
  this.testTable.add(this.h1000);
  this.testTable.add(this.h10);
  this.testTable.add(this.h100);
  it=new IteratorFromPositionToTableStart(this.testTable.headRecord,this.testTable.tailRecord);
  assertFalse(it.isEmpty());
  assertTrue(it.hasNext());
  assertTrue(it.hasNext());
  assertEquals(this.h1,it.next());
  assertFalse(it.hasNext());
}
