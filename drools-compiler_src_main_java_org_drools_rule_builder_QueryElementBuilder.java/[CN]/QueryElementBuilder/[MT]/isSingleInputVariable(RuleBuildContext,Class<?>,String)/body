{
  expr=expr.trim();
switch (expr.charAt(0)) {
case '\'':
case '-':
case '+':
case '!':
case '>':
case '<':
case '&':
case '|':
case '?':
case '^':
case '%':
case '=':
case '.':
case '(':
case ')':
case '[':
case ']':
case '{':
case '}':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
    return false;
}
for (int i=1; i < expr.length(); i++) {
switch (expr.charAt(i)) {
case '\'':
case '-':
case '+':
case '!':
case '>':
case '<':
case '&':
case '|':
case '?':
case '^':
case '%':
case '=':
case '{':
case '}':
    return false;
}
}
MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
ParserConfiguration conf=data.getParserConfiguration();
conf.setClassLoader(context.getPackageBuilder().getRootClassLoader());
final ParserContext pctx=new ParserContext(conf);
pctx.setStrictTypeEnforcement(false);
pctx.setStrongTyping(false);
pctx.addInput("empty",boolean.class);
MVEL.COMPILER_OPT_ALLOW_NAKED_METH_CALL=true;
MVEL.analysisCompile(expr,pctx);
return pctx.getInputs().size() == 2;
}
