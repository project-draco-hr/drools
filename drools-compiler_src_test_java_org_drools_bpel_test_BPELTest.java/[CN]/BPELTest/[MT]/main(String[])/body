{
  BPELProcess process=new BPELProcess();
  process.setName("Purchase Order Process");
  process.setId("1");
  process.setVersion("1");
  process.setPackageName("org.drools.bpel.test");
  BPELSequence sequence=new BPELSequence();
  sequence.setName("sequence");
  List<BPELActivity> sequenceActivities=new ArrayList<BPELActivity>();
  BPELReceive receive=new BPELReceive();
  receive.setName("Receive Purchase Order");
  receive.setPartnerLink("purchasing");
  receive.setPortType("lns:purchaseOrderPT");
  receive.setOperation("sendPurchaseOrder");
  receive.setVariable("PO");
  receive.setCreateInstance(true);
  sequenceActivities.add(receive);
  BPELFlow flow=new BPELFlow();
  flow.setName("flow");
  flow.setLinks(new String[]{"ship-to-invoice","ship-to-scheduling"});
  List<BPELActivity> flowActivities=new ArrayList<BPELActivity>();
  BPELSequence sequence1=new BPELSequence();
  sequence1.setName("sequence1");
  List<BPELActivity> sequence1Activities=new ArrayList<BPELActivity>();
  BPELAssign assign1=new BPELAssign();
  assign1.setAction("");
  sequence1Activities.add(assign1);
  BPELInvoke invoke1=new BPELInvoke();
  invoke1.setName("Decide On Shipper");
  invoke1.setPartnerLink("shipping");
  invoke1.setPortType("lns:shippingPT");
  invoke1.setOperation("requestShipping");
  invoke1.setInputVariable("shippingRequest");
  invoke1.setOutputVariable("shippingInfo");
  invoke1.setSourceLinks(new String[]{"ship-to-invoice"});
  sequence1Activities.add(invoke1);
  BPELReceive receive1=new BPELReceive();
  receive1.setName("Arrange Logistics");
  receive1.setPartnerLink("shipping");
  receive1.setPortType("lns:shippingCallbackPT");
  receive1.setOperation("sendSchedule");
  receive1.setVariable("shippingSchedule");
  receive1.setCreateInstance(false);
  receive1.setSourceLinks(new String[]{"ship-to-scheduling"});
  sequence1Activities.add(receive1);
  sequence1.setActivities(sequence1Activities);
  flowActivities.add(sequence1);
  BPELSequence sequence2=new BPELSequence();
  sequence2.setName("sequence2");
  List<BPELActivity> sequence2Activities=new ArrayList<BPELActivity>();
  BPELInvoke invoke2a=new BPELInvoke();
  invoke2a.setName("Initial Price Calculation");
  invoke2a.setPartnerLink("invoicing");
  invoke2a.setPortType("lns:computePricePT");
  invoke2a.setOperation("initiatePriceCalculation");
  invoke2a.setInputVariable("PO");
  sequence2Activities.add(invoke2a);
  BPELInvoke invoke2b=new BPELInvoke();
  invoke2b.setName("Complete Price Calculation");
  invoke2b.setPartnerLink("invoicing");
  invoke2b.setPortType("lns:computePricePT");
  invoke2b.setOperation("sendShippingPrice");
  invoke2b.setInputVariable("shippingInfo");
  invoke2b.setTargetLinks(new String[]{"ship-to-invoice"});
  sequence2Activities.add(invoke2b);
  BPELReceive receive2=new BPELReceive();
  receive2.setName("Receive Invoice");
  receive2.setPartnerLink("invoicing");
  receive2.setPortType("lns:invoiceCallbackPT");
  receive2.setOperation("sendInvoice");
  receive2.setVariable("Invoice");
  receive2.setCreateInstance(false);
  sequence2Activities.add(receive2);
  sequence2.setActivities(sequence2Activities);
  flowActivities.add(sequence2);
  BPELSequence sequence3=new BPELSequence();
  sequence3.setName("sequence3");
  List<BPELActivity> sequence3Activities=new ArrayList<BPELActivity>();
  BPELInvoke invoke3a=new BPELInvoke();
  invoke3a.setName("Initiate Production Scheduling");
  invoke3a.setPartnerLink("scheduling");
  invoke3a.setPortType("lns:schedulingPT");
  invoke3a.setOperation("requestProductionScheduling");
  invoke3a.setInputVariable("PO");
  sequence3Activities.add(invoke3a);
  BPELInvoke invoke3b=new BPELInvoke();
  invoke3b.setName("Complete Production Scheduling");
  invoke3b.setPartnerLink("scheduling");
  invoke3b.setPortType("lns:schedulingPT");
  invoke3b.setOperation("sendShippingSchedule");
  invoke3b.setInputVariable("shippingSchedule");
  invoke3b.setTargetLinks(new String[]{"ship-to-scheduling"});
  sequence3Activities.add(invoke3b);
  sequence3.setActivities(sequence3Activities);
  flowActivities.add(sequence3);
  flow.setActivities(flowActivities);
  sequenceActivities.add(flow);
  BPELReply reply=new BPELReply();
  reply.setName("Invoice Processing");
  reply.setPartnerLink("purchasing");
  reply.setPortType("lns:purchaseOrderPT");
  reply.setOperation("sendPurchaseOrder");
  reply.setVariable("Invoice");
  sequenceActivities.add(reply);
  sequence.setActivities(sequenceActivities);
  process.setActivity(sequence);
  Properties properties=new Properties();
  properties.put("processNodeBuilderRegistry","bpelNodeBuilderRegistry.conf");
  PackageBuilderConfiguration packageConf=new PackageBuilderConfiguration(properties);
  PackageBuilder packageBuilder=new PackageBuilder(packageConf);
  ProcessBuilder processBuilder=new ProcessBuilder(packageBuilder);
  processBuilder.buildProcess(process);
  properties=new Properties();
  properties.put("processNodeInstanceFactoryRegistry","bpelProcessNodeInstanceFactory.conf");
  RuleBaseConfiguration ruleBaseConf=new RuleBaseConfiguration(properties);
  AbstractRuleBase ruleBase=(AbstractRuleBase)RuleBaseFactory.newRuleBase(ruleBaseConf);
  ruleBase.addProcess(process);
  InternalWorkingMemory workingMemory=new ReteooWorkingMemory(1,ruleBase);
  workingMemory.registerProcessInstanceFactory(BPELProcess.BPEL_TYPE,new BPELProcessInstanceFactory());
  WorkItemHandler handler=new WebServiceInvocationHandler();
  workingMemory.getWorkItemManager().registerWorkItemHandler("WebServiceInvocation",handler);
  WorkingMemoryFileLogger logger=new WorkingMemoryFileLogger(workingMemory);
  BPELProcessInstance processInstance=(BPELProcessInstance)workingMemory.startProcess("1");
  webServiceInvocation(processInstance,"purchasing","lns:purchaseOrderPT","sendPurchaseOrder","PURCHASE ORDER");
  WorkItem workItem=findWebServiceInvocation(workingMemory,"scheduling","lns:schedulingPT","requestProductionScheduling");
  replyWebServiceInvocation(workingMemory,workItem,null);
  workItem=findWebServiceInvocation(workingMemory,"invoicing","lns:computePricePT","initiatePriceCalculation");
  replyWebServiceInvocation(workingMemory,workItem,null);
  workItem=findWebServiceInvocation(workingMemory,"shipping","lns:shippingPT","requestShipping");
  replyWebServiceInvocation(workingMemory,workItem,"SHIPPING");
  workItem=findWebServiceInvocation(workingMemory,"invoicing","lns:computePricePT","sendShippingPrice");
  replyWebServiceInvocation(workingMemory,workItem,null);
  webServiceInvocation(processInstance,"shipping","lns:shippingCallbackPT","sendSchedule","SCHEDULE");
  webServiceInvocation(processInstance,"invoicing","lns:invoiceCallbackPT","sendInvoice","INVOICE");
  workItem=findWebServiceInvocation(workingMemory,"scheduling","lns:schedulingPT","sendShippingSchedule");
  replyWebServiceInvocation(workingMemory,workItem,null);
  logger.writeToDisk();
}
