{
  final CompositeObjectSinkAdapter ad=new CompositeObjectSinkAdapter();
  InternalReadAccessor extractor=store.getReader(Cheese.class,"type",this.getClass().getClassLoader());
  final MvelConstraint lit1=new MvelConstraintTestUtil("type == \"stilton\"",new ObjectFieldImpl("stilton"),new MockExtractor());
  final AlphaNode al1=new AlphaNode(buildContext.getNextId(),lit1,new MockObjectSource(buildContext.getNextId()),buildContext);
  final MvelConstraint lit2=new MvelConstraintTestUtil("type == \"brie\"",new ObjectFieldImpl("brie"),new MockExtractor());
  final AlphaNode al2=new AlphaNode(buildContext.getNextId(),lit2,new MockObjectSource(buildContext.getNextId()),buildContext);
  final MvelConstraint lit3=new MvelConstraintTestUtil("type == \"muzzarela\"",new ObjectFieldImpl("muzzarela"),new MockExtractor());
  final AlphaNode al3=new AlphaNode(buildContext.getNextId(),lit3,new MockObjectSource(buildContext.getNextId()),buildContext);
  ad.addObjectSink(al1);
  ad.addObjectSink(al2);
  ad.addObjectSink(al3);
  InternalFactHandle handle=new ReteooFactHandleFactory().newFactHandle(new Cheese(),null,null,new DisconnectedWorkingMemoryEntryPoint("DEFAULT"));
  try {
    ad.propagateAssertObject(handle,null,null);
  }
 catch (  RuntimeException e) {
    fail("Not supposed to throw any exception: " + e.getMessage());
  }
}
