{
  final PackageDescr packageDescr=(PackageDescr)parser.getData();
  final Element element=parser.endElementBuilder();
  NodeList imports=element.getElementsByTagName("import");
  for (int i=0, length=imports.getLength(); i < length; i++) {
    final String importEntry=((Element)imports.item(i)).getAttribute("name");
    if (importEntry == null || importEntry.trim().equals("")) {
      throw new SAXParseException("<import> cannot be blank",parser.getLocator());
    }
    packageDescr.addImport(new ImportDescr(importEntry));
  }
  NodeList importfunctions=element.getElementsByTagName("importfunction");
  for (int i=0, length=importfunctions.getLength(); i < length; i++) {
    final String importfunctionEntry=((Element)importfunctions.item(i)).getAttribute("name");
    if (importfunctionEntry == null || importfunctionEntry.trim().equals("")) {
      throw new SAXParseException("<importfunction> cannot be blank",parser.getLocator());
    }
    FunctionImportDescr funcdescr=new FunctionImportDescr();
    funcdescr.setTarget(importfunctionEntry);
    packageDescr.addFunctionImport(funcdescr);
  }
  NodeList globals=element.getElementsByTagName("global");
  for (int i=0, length=globals.getLength(); i < length; i++) {
    final String identifier=((Element)globals.item(i)).getAttribute("identifier");
    if (identifier == null || identifier.trim().equals("")) {
      throw new SAXParseException("<global> must have an identifier",parser.getLocator());
    }
    final String type=((Element)globals.item(i)).getAttribute("type");
    if (type == null || type.trim().equals("")) {
      throw new SAXParseException("<global> must have specify a type",parser.getLocator());
    }
    final GlobalDescr global=new GlobalDescr(identifier,type);
    packageDescr.addGlobal(global);
  }
  return packageDescr;
}
