{
  Class cls;
  try {
    cls=runtimeData.getRootClassLoader().loadClass(target.getClassName());
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalStateException("Unable to compile as Class could not be found '" + target.getClassName() + "'");
  }
  ParserContext context=new ParserContext(runtimeData.getParserConfiguration(),evaluationContext);
  context.addInput("this",cls);
  context.setStrongTyping(target.isTypeSafe());
  MVEL.COMPILER_OPT_ALLOW_NAKED_METH_CALL=true;
  MVEL.COMPILER_OPT_ALLOW_OVERRIDE_ALL_PROPHANDLING=true;
  MVEL.COMPILER_OPT_ALLOW_RESOLVE_INNERCLASSES_WITH_DOTNOTATION=true;
  MVEL.COMPILER_OPT_SUPPORT_JAVA_STYLE_CLASS_LITERALS=true;
  ExecutableStatement mvelExpression=(ExecutableStatement)MVEL.compileExpression(target.getExpression(),context);
  Class returnType=mvelExpression.getKnownEgressType();
  target.setExecutableStatement(mvelExpression);
  target.setFieldType(returnType);
  target.setValueType(ValueType.determineValueType(returnType));
  target.setEvaluationContext(evaluationContext);
}
