{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="import " + F.class.getCanonicalName() + "\n";
  str+="import " + G.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   $a : A() \n";
  str+="   forall( B() )\n";
  str+="   $c : C() \n";
  str+="then \n";
  str+="  list.add( 'x' ); \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(LRUnlinkingOption.ENABLED);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode aotn=getObjectTypeNode(kbase,A.class);
  ObjectTypeNode botn=getObjectTypeNode(kbase,A.class);
  ObjectTypeNode cotn=getObjectTypeNode(kbase,A.class);
  ReteooWorkingMemoryInterface wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession()).session;
  List list=new ArrayList();
  wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession()).session;
  list=new ArrayList();
  wm.setGlobal("list",list);
  for (int i=0; i < 2; i++) {
    wm.insert(new A(i));
  }
  for (int i=0; i < 27; i++) {
    wm.insert(new B(1));
  }
  for (int i=0; i < 2; i++) {
    wm.insert(new C(i));
  }
  wm.fireAllRules();
  assertEquals(4,list.size());
}
