{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="import " + F.class.getCanonicalName() + "\n";
  str+="import " + G.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   $a : A() \n";
  str+="   not( B( value == $a.value ) ) \n";
  str+="   C() \n";
  str+="then \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode node=getObjectTypeNode(kbase,A.class);
  InternalWorkingMemory wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession());
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)node.getObjectSinkPropagator().getSinks()[0];
  assertEquals(1,liaNode.getSinkPropagator().size());
  wm.insert(new A());
  wm.flushPropagations();
  NotNode notNode=(NotNode)liaNode.getSinkPropagator().getSinks()[0];
  JoinNode cNode=(JoinNode)notNode.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn=(RuleTerminalNode)cNode.getSinkPropagator().getSinks()[0];
  PathMemory pmem=(PathMemory)wm.getNodeMemory(rtn);
  assertEquals(1,pmem.getSegmentMemories().length);
  assertEquals(1,pmem.getAllLinkedMaskTest());
  SegmentMemory sm=pmem.getSegmentMemories()[0];
  assertEquals(5,sm.getAllLinkedMaskTest());
  assertEquals(3,sm.getLinkedNodeMask());
  assertFalse(sm.isSegmentLinked());
  assertFalse(pmem.isRuleLinked());
  wm.insert(new C());
  wm.flushPropagations();
  assertEquals(7,sm.getLinkedNodeMask());
  assertTrue(sm.isSegmentLinked());
  assertTrue(pmem.isRuleLinked());
}
