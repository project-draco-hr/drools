{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="import " + F.class.getCanonicalName() + "\n";
  str+="import " + G.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   A() \n";
  str+="   exists( B() and C() ) \n";
  str+="   exists( eval(1==1) ) \n";
  str+="   D() \n";
  str+="then \n";
  str+="end \n";
  str+="rule rule2 when \n";
  str+="   A() \n";
  str+="   exists( B() and C() ) \n";
  str+="   exists( eval(1==1) ) \n";
  str+="   E() \n";
  str+="then \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode node=getObjectTypeNode(kbase,A.class);
  InternalWorkingMemory wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession());
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)node.getSinkPropagator().getSinks()[0];
  assertEquals(2,liaNode.getSinkPropagator().size());
  JoinNode bNode=(JoinNode)liaNode.getSinkPropagator().getSinks()[0];
  JoinNode cNode=(JoinNode)bNode.getSinkPropagator().getSinks()[0];
  ExistsNode exists1n=(ExistsNode)liaNode.getSinkPropagator().getSinks()[1];
  EvalConditionNode evalNode=(EvalConditionNode)exists1n.getSinkPropagator().getSinks()[0];
  ExistsNode exists2n=(ExistsNode)exists1n.getSinkPropagator().getSinks()[1];
  JoinNode dNode=(JoinNode)exists2n.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn=(RuleTerminalNode)dNode.getSinkPropagator().getSinks()[0];
  wm.insert(new A());
  PathMemory pmem=(PathMemory)wm.getNodeMemory(rtn);
  assertEquals(4,pmem.getSegmentMemories().length);
  assertEquals(11,pmem.getAllLinkedMaskTest());
  RightInputAdapterNode.RiaNodeMemory riaMem=(RightInputAdapterNode.RiaNodeMemory)wm.getNodeMemory((MemoryFactory)exists1n.getRightInput());
  assertEquals(2,riaMem.getRiaPathMemory().getAllLinkedMaskTest());
  wm.insert(new B());
  wm.insert(new C());
  assertEquals(2,riaMem.getRiaPathMemory().getSegmentMemories().length);
  riaMem=(RightInputAdapterNode.RiaNodeMemory)wm.getNodeMemory((MemoryFactory)exists2n.getRightInput());
  assertEquals(0,riaMem.getRiaPathMemory().getAllLinkedMaskTest());
}
