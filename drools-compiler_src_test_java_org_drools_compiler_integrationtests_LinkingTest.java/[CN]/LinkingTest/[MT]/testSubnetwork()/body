{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="import " + F.class.getCanonicalName() + "\n";
  str+="import " + G.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   $a : A() \n";
  str+="   exists ( B() and C() ) \n";
  str+="   $e : D() \n";
  str+="then \n";
  str+="  list.add( 'x' ); \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode aotn=getObjectTypeNode(kbase,A.class);
  ObjectTypeNode botn=getObjectTypeNode(kbase,A.class);
  ObjectTypeNode cotn=getObjectTypeNode(kbase,A.class);
  InternalWorkingMemory wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession());
  List list=new ArrayList();
  wm.setGlobal("list",list);
  wm.insert(new A());
  wm.insert(new B());
  for (int i=0; i < 28; i++) {
    wm.insert(new C());
  }
  wm.insert(new D());
  wm.flushPropagations();
  InternalAgenda agenda=(InternalAgenda)wm.getAgenda();
  InternalAgendaGroup group=(InternalAgendaGroup)agenda.getNextFocus();
  AgendaItem item=(AgendaItem)group.remove();
  int count=((RuleAgendaItem)item).getRuleExecutor().evaluateNetworkAndFire(wm,null,0,-1);
  wm.fireAllRules();
  assertEquals(1,list.size());
  wm.fireAllRules();
  assertEquals(1,list.size());
}
