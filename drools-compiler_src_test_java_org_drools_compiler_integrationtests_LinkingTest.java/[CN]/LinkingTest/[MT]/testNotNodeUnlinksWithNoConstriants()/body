{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="import " + F.class.getCanonicalName() + "\n";
  str+="import " + G.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   $a : A() \n";
  str+="   not B() \n";
  str+="   $c : C() \n";
  str+="then \n";
  str+="  list.add( 'x' ); \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode aotn=getObjectTypeNode(kbase,A.class);
  InternalWorkingMemory wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession());
  List list=new ArrayList();
  wm.setGlobal("list",list);
  LeftInputAdapterNode aNode=(LeftInputAdapterNode)aotn.getObjectSinkPropagator().getSinks()[0];
  NotNode bNode=(NotNode)aNode.getSinkPropagator().getSinks()[0];
  JoinNode cNode=(JoinNode)bNode.getSinkPropagator().getSinks()[0];
  SegmentUtilities.createSegmentMemory(cNode,wm);
  LiaNodeMemory amem=(LiaNodeMemory)wm.getNodeMemory(aNode);
  assertEquals(2,amem.getSegmentMemory().getLinkedNodeMask());
  FactHandle fha=wm.insert(new A());
  FactHandle fhb=wm.insert(new B());
  FactHandle fhc=wm.insert(new C());
  wm.fireAllRules();
  assertEquals(0,list.size());
  assertEquals(5,amem.getSegmentMemory().getLinkedNodeMask());
  wm.retract(fhb);
  wm.flushPropagations();
  assertEquals(7,amem.getSegmentMemory().getLinkedNodeMask());
  wm.fireAllRules();
  assertEquals(1,list.size());
  list.clear();
  List<FactHandle> handles=new ArrayList<FactHandle>();
  for (int i=0; i < 5; i++) {
    handles.add(wm.insert(new B()));
  }
  wm.fireAllRules();
  assertEquals(0,list.size());
  assertEquals(5,amem.getSegmentMemory().getLinkedNodeMask());
  for (  FactHandle fh : handles) {
    wm.retract(fh);
  }
  wm.flushPropagations();
  assertEquals(7,amem.getSegmentMemory().getLinkedNodeMask());
  wm.fireAllRules();
  assertEquals(1,list.size());
}
