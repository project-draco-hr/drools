{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="import " + F.class.getCanonicalName() + "\n";
  str+="import " + G.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   $a : A() \n";
  str+="   $b : B() \n";
  str+="   $c : C() \n";
  str+="then \n";
  str+="  list.add( $a.getValue() + \":\"+ $b.getValue() + \":\" + $c.getValue() ); \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode aotn=getObjectTypeNode(kbase,A.class);
  ObjectTypeNode botn=getObjectTypeNode(kbase,B.class);
  ObjectTypeNode cotn=getObjectTypeNode(kbase,C.class);
  InternalWorkingMemory wm=(InternalWorkingMemory)kbase.newStatefulKnowledgeSession();
  List list=new ArrayList();
  wm.setGlobal("list",list);
  for (int i=0; i < 3; i++) {
    wm.insert(new A(i));
  }
  for (int i=0; i < 3; i++) {
    wm.insert(new B(i));
  }
  for (int i=0; i < 29; i++) {
    wm.insert(new C(i));
  }
  wm.flushPropagations();
  LeftInputAdapterNode aNode=(LeftInputAdapterNode)aotn.getSinkPropagator().getSinks()[0];
  JoinNode bNode=(JoinNode)aNode.getSinkPropagator().getSinks()[0];
  JoinNode cNode=(JoinNode)bNode.getSinkPropagator().getSinks()[0];
  LiaNodeMemory amem=(LiaNodeMemory)wm.getNodeMemory(aNode);
  BetaMemory bmem=(BetaMemory)wm.getNodeMemory(bNode);
  BetaMemory cmem=(BetaMemory)wm.getNodeMemory(cNode);
  assertEquals(3,amem.getSegmentMemory().getStagedLeftTuples().insertSize());
  assertEquals(3,bmem.getStagedRightTuples().insertSize());
  assertEquals(29,cmem.getStagedRightTuples().insertSize());
  wm.fireAllRules();
  assertEquals(0,amem.getSegmentMemory().getStagedLeftTuples().insertSize());
  assertEquals(0,bmem.getStagedRightTuples().insertSize());
  assertEquals(0,cmem.getStagedRightTuples().insertSize());
  assertEquals(261,list.size());
  assertTrue(list.contains("2:2:14"));
  assertTrue(list.contains("1:0:6"));
  assertTrue(list.contains("0:1:1"));
  assertTrue(list.contains("2:2:14"));
  assertTrue(list.contains("0:0:25"));
}
