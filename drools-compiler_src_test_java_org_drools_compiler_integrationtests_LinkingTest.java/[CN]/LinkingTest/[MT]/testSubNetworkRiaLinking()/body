{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   A() \n";
  str+="   B() \n";
  str+="   exists( C() and D() ) \n";
  str+="   E() \n";
  str+="then \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode node=getObjectTypeNode(kbase,A.class);
  ReteooWorkingMemoryInterface wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession());
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)node.getSinkPropagator().getSinks()[0];
  assertEquals(1,liaNode.getSinkPropagator().size());
  JoinNode bNode=(JoinNode)liaNode.getSinkPropagator().getSinks()[0];
  assertEquals(2,bNode.getSinkPropagator().size());
  ExistsNode exists1n=(ExistsNode)bNode.getSinkPropagator().getSinks()[1];
  JoinNode cNode=(JoinNode)bNode.getSinkPropagator().getSinks()[0];
  JoinNode dNode=(JoinNode)cNode.getSinkPropagator().getSinks()[0];
  assertEquals(1,dNode.getSinkPropagator().size());
  RightInputAdapterNode riaNode1=(RightInputAdapterNode)dNode.getSinkPropagator().getSinks()[0];
  JoinNode eNode=(JoinNode)exists1n.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn=(RuleTerminalNode)eNode.getSinkPropagator().getSinks()[0];
  SegmentUtilities.createSegmentMemory(exists1n,wm);
  BetaMemory existsBm=(BetaMemory)wm.getNodeMemory(exists1n);
  assertEquals(0,existsBm.getSegmentMemory().getLinkedNodeMask());
  FactHandle fhc=wm.insert(new C());
  FactHandle fhd=wm.insert(new D());
  assertEquals(1,existsBm.getSegmentMemory().getLinkedNodeMask());
  wm.retract(fhd);
  assertEquals(0,existsBm.getSegmentMemory().getLinkedNodeMask());
  PathMemory rs=(PathMemory)wm.getNodeMemory(rtn);
  assertFalse(rs.isRuleLinked());
  wm.insert(new A());
  assertFalse(rs.isRuleLinked());
  wm.insert(new B());
  assertFalse(rs.isRuleLinked());
  wm.insert(new E());
  assertFalse(rs.isRuleLinked());
  wm.insert(new D());
  assertTrue(rs.isRuleLinked());
  wm.retract(fhc);
  assertFalse(rs.isRuleLinked());
  wm.insert(new C());
  assertTrue(rs.isRuleLinked());
}
