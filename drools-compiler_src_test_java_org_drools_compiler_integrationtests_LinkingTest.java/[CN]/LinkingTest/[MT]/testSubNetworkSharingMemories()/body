{
  String str="";
  str+="package org.kie \n";
  str+="import " + A.class.getCanonicalName() + "\n";
  str+="import " + B.class.getCanonicalName() + "\n";
  str+="import " + C.class.getCanonicalName() + "\n";
  str+="import " + D.class.getCanonicalName() + "\n";
  str+="import " + E.class.getCanonicalName() + "\n";
  str+="global java.util.List list \n";
  str+="rule rule1 when \n";
  str+="   A() \n";
  str+="   B() \n";
  str+="   C() \n";
  str+="   D() \n";
  str+="then \n";
  str+="end \n";
  str+="rule rule2 when \n";
  str+="   A() \n";
  str+="   exists( B() and C() ) \n";
  str+="   D() \n";
  str+="then \n";
  str+="end \n";
  str+="rule rule3 when \n";
  str+="   A() \n";
  str+="   exists( B() and C() and D() ) \n";
  str+="   E() \n";
  str+="then \n";
  str+="end \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(str.getBytes()),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kconf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode node=getObjectTypeNode(kbase,A.class);
  InternalWorkingMemory wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession());
  LeftInputAdapterNode liaNodeA=(LeftInputAdapterNode)node.getObjectSinkPropagator().getSinks()[0];
  ExistsNode existsNode2=(ExistsNode)liaNodeA.getSinkPropagator().getSinks()[1];
  ExistsNode existsNode3=(ExistsNode)liaNodeA.getSinkPropagator().getSinks()[2];
  JoinNode joinNodeB=(JoinNode)liaNodeA.getSinkPropagator().getSinks()[0];
  JoinNode joinNodeC=(JoinNode)joinNodeB.getSinkPropagator().getSinks()[0];
  JoinNode joinNodeD1=(JoinNode)joinNodeC.getSinkPropagator().getSinks()[0];
  JoinNode joinNodeD2=(JoinNode)existsNode2.getSinkPropagator().getSinks()[0];
  JoinNode joinNodeE=(JoinNode)existsNode3.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn1=(RuleTerminalNode)joinNodeD1.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn2=(RuleTerminalNode)joinNodeD2.getSinkPropagator().getSinks()[0];
  RuleTerminalNode rtn3=(RuleTerminalNode)joinNodeE.getSinkPropagator().getSinks()[0];
  FactHandle fha=wm.insert(new A());
  wm.insert(new B());
  wm.insert(new C());
  wm.insert(new D());
  wm.flushPropagations();
  BetaMemory bm=null;
  LiaNodeMemory liam=(LiaNodeMemory)wm.getNodeMemory(liaNodeA);
  BetaMemory bm1=(BetaMemory)wm.getNodeMemory(joinNodeB);
  BetaMemory bm2=(BetaMemory)wm.getNodeMemory(joinNodeC);
  BetaMemory bm3=(BetaMemory)wm.getNodeMemory(joinNodeD1);
  assertEquals(1,liam.getNodePosMaskBit());
  assertEquals(1,bm1.getNodePosMaskBit());
  assertEquals(2,bm2.getNodePosMaskBit());
  assertEquals(1,bm3.getNodePosMaskBit());
  assertNotSame(liam.getSegmentMemory(),bm1.getSegmentMemory());
  assertSame(bm1.getSegmentMemory(),bm2.getSegmentMemory());
  assertNotSame(bm2.getSegmentMemory(),bm3.getSegmentMemory());
  BetaMemory bm4=(BetaMemory)wm.getNodeMemory(existsNode2);
  BetaMemory bm5=(BetaMemory)wm.getNodeMemory(joinNodeD2);
  assertEquals(1,bm4.getNodePosMaskBit());
  assertEquals(2,bm5.getNodePosMaskBit());
  assertSame(bm4.getSegmentMemory(),bm5.getSegmentMemory());
  PathMemory rs1=(PathMemory)wm.getNodeMemory(rtn1);
  PathMemory rs2=(PathMemory)wm.getNodeMemory(rtn2);
  PathMemory rs3=(PathMemory)wm.getNodeMemory(rtn3);
  assertTrue(rs1.isRuleLinked());
  assertTrue(rs2.isRuleLinked());
  assertFalse(rs3.isRuleLinked());
  wm.insert(new E());
  wm.flushPropagations();
  BetaMemory bm6=(BetaMemory)wm.getNodeMemory(existsNode3);
  BetaMemory bm7=(BetaMemory)wm.getNodeMemory(joinNodeE);
  assertEquals(1,bm6.getNodePosMaskBit());
  assertEquals(2,bm7.getNodePosMaskBit());
  assertSame(bm6.getSegmentMemory(),bm7.getSegmentMemory());
  assertTrue(rs1.isRuleLinked());
  assertTrue(rs2.isRuleLinked());
  assertTrue(rs3.isRuleLinked());
  wm.retract(fha);
  wm.fireAllRules();
  assertFalse(rs1.isRuleLinked());
  assertFalse(rs2.isRuleLinked());
  assertFalse(rs3.isRuleLinked());
}
