{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  ContextEntry[] contextEntry=memory.getContext();
  memory.getLeftTupleMemory().removeAdd(leftTuple);
  this.constraints.updateFromTuple(contextEntry,workingMemory,leftTuple);
  LeftTuple childLeftTuple=leftTuple.getFirstChild();
  RightTupleMemory rightMemory=memory.getRightTupleMemory();
  FastIterator it=getRightIterator(rightMemory);
  RightTuple rightTuple=getFirstRightTuple(leftTuple,rightMemory,context,it);
  if (childLeftTuple != null && rightMemory.isIndexed() && !it.isFullIterator() && (rightTuple == null || (rightTuple.getMemory() != childLeftTuple.getRightParent().getMemory()))) {
    this.sink.propagateRetractLeftTuple(leftTuple,context,workingMemory);
    childLeftTuple=null;
  }
  if (rightTuple != null) {
    if (childLeftTuple == null) {
      for (; rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
        propagateFromLeft(rightTuple,leftTuple,contextEntry,true,context,workingMemory);
      }
    }
 else {
      for (; rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
        childLeftTuple=propagateOrModifyFromLeft(rightTuple,leftTuple,childLeftTuple,contextEntry,context,workingMemory);
      }
    }
  }
  this.constraints.resetTuple(contextEntry);
}
