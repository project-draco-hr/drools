{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  RightTuple rightTuple=createRightTuple(factHandle,this);
  if (!behavior.assertRightTuple(memory.getBehaviorContext(),rightTuple,workingMemory)) {
    rightTuple.unlinkFromRightParent();
    return;
  }
  memory.getRightTupleMemory().add(rightTuple);
  if (!this.tupleMemoryEnabled) {
    return;
  }
  this.constraints.updateFromFactHandle(memory.getContext(),workingMemory,factHandle);
  int i=0;
  for (LeftTuple leftTuple=memory.getLeftTupleMemory().getFirst(rightTuple); leftTuple != null; leftTuple=(LeftTuple)leftTuple.getNext()) {
    if (this.constraints.isAllowedCachedRight(memory.getContext(),leftTuple)) {
      this.sink.propagateAssertLeftTuple(leftTuple,rightTuple,context,workingMemory,this.tupleMemoryEnabled);
    }
    i++;
  }
  this.constraints.resetFactHandle(memory.getContext());
}
