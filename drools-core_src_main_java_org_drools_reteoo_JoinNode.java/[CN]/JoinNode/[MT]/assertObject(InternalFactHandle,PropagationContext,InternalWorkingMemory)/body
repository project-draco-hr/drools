{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  RightTuple rightTuple=createRightTuple(factHandle,this);
  if (!behavior.assertRightTuple(memory.getBehaviorContext(),rightTuple,workingMemory)) {
    rightTuple.unlinkFromRightParent();
    return;
  }
  memory.getRightTupleMemory().add(rightTuple);
  if (memory.getLeftTupleMemory() == null || memory.getLeftTupleMemory().size() == 0) {
    return;
  }
  this.constraints.updateFromFactHandle(memory.getContext(),workingMemory,factHandle);
  FastIterator it=memory.getLeftTupleMemory().fastIterator();
  for (LeftTuple leftTuple=memory.getLeftTupleMemory().getFirst(rightTuple); leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
    if (this.constraints.isAllowedCachedRight(memory.getContext(),leftTuple)) {
      this.sink.propagateAssertLeftTuple(leftTuple,rightTuple,null,null,context,workingMemory,true);
    }
  }
  this.constraints.resetFactHandle(memory.getContext());
}
