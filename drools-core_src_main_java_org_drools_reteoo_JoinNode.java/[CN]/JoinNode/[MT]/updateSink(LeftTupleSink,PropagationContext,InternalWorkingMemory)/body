{
  Memory m=workingMemory.getNodeMemory(this);
  BetaMemory memory=null;
  if (m instanceof BetaMemory) {
    memory=(BetaMemory)m;
  }
 else {
    workingMemory.getNodeMemory(this);
  }
  FastIterator it=memory.getLeftTupleMemory().fastIterator();
  final Iterator tupleIter=memory.getLeftTupleMemory().iterator();
  for (LeftTuple leftTuple=(LeftTuple)tupleIter.next(); leftTuple != null; leftTuple=(LeftTuple)tupleIter.next()) {
    this.constraints.updateFromTuple(memory.getContext(),workingMemory,leftTuple);
    for (RightTuple rightTuple=memory.getRightTupleMemory().getFirst(leftTuple,(InternalFactHandle)context.getFactHandle(),it); rightTuple != null; rightTuple=(RightTuple)it.next(rightTuple)) {
      if (this.constraints.isAllowedCachedLeft(memory.getContext(),rightTuple.getFactHandle())) {
        sink.assertLeftTuple(sink.createLeftTuple(leftTuple,rightTuple,null,null,sink,true),context,workingMemory);
      }
    }
    this.constraints.resetTuple(memory.getContext());
  }
}
