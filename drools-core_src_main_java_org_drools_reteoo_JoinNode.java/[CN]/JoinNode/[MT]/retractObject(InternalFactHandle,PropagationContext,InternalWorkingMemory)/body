{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  if (!memory.getFactHandleMemory().remove(handle)) {
    return;
  }
  final Iterator it=memory.getTupleMemory().iterator(handle);
  this.constraints.updateFromFactHandle(memory.getContext(),workingMemory,handle);
  for (LeftTuple leftTuple=(LeftTuple)it.next(); leftTuple != null; leftTuple=(LeftTuple)it.next()) {
    if (this.constraints.isAllowedCachedRight(memory.getContext(),leftTuple)) {
      this.sink.propagateRetractLeftTuple(leftTuple,handle,context,workingMemory);
    }
  }
  this.constraints.resetFactHandle(memory.getContext());
}
