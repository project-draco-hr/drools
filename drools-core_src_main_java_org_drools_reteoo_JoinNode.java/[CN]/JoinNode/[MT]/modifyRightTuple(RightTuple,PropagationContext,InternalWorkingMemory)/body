{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  if (isUnlinkingEnabled() && isStagedForModifyRight(rightTuple,memory,context,workingMemory)) {
    return;
  }
  memory.getRightTupleMemory().removeAdd(rightTuple);
  if (memory.getLeftTupleMemory() != null && memory.getLeftTupleMemory().size() == 0) {
    return;
  }
  LeftTuple childLeftTuple=rightTuple.firstChild;
  LeftTupleMemory leftMemory=memory.getLeftTupleMemory();
  FastIterator it=getLeftIterator(leftMemory);
  LeftTuple leftTuple=getFirstLeftTuple(rightTuple,leftMemory,context,it);
  this.constraints.updateFromFactHandle(memory.getContext(),workingMemory,rightTuple.getFactHandle());
  if (childLeftTuple != null && leftMemory.isIndexed() && !it.isFullIterator() && (leftTuple == null || (leftTuple.getMemory() != childLeftTuple.getLeftParent().getMemory()))) {
    this.sink.propagateRetractRightTuple(rightTuple,context,workingMemory);
    childLeftTuple=null;
  }
  if (leftTuple != null) {
    if (childLeftTuple == null) {
      for (; leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
        propagateFromRight(rightTuple,leftTuple,memory,context,workingMemory);
      }
    }
 else {
      for (; leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
        childLeftTuple=propagateOrModifyFromRight(rightTuple,leftTuple,childLeftTuple,memory,context,workingMemory);
      }
    }
  }
  this.constraints.resetFactHandle(memory.getContext());
}
