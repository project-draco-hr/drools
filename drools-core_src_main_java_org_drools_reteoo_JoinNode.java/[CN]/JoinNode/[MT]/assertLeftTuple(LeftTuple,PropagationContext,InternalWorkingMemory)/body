{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  if (this.tupleMemoryEnabled) {
    memory.getLeftTupleMemory().add(leftTuple);
  }
  this.constraints.updateFromTuple(memory.getContext(),workingMemory,leftTuple);
  for (RightTuple rightTuple=memory.getRightTupleMemory().getFirst(leftTuple); rightTuple != null; rightTuple=(RightTuple)rightTuple.getNext()) {
    final InternalFactHandle handle=rightTuple.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(memory.getContext(),handle)) {
      this.sink.propagateAssertLeftTuple(leftTuple,rightTuple,context,workingMemory,this.tupleMemoryEnabled);
    }
  }
  this.constraints.resetTuple(memory.getContext());
}
