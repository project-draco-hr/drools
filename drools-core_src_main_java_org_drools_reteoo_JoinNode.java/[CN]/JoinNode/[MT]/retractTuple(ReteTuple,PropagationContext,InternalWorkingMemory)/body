{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  final ReteTuple tuple=memory.getTupleMemory().remove(leftTuple);
  if (tuple == null) {
    return;
  }
  final Iterator it=memory.getFactHandleMemory().iterator(leftTuple);
  this.constraints.updateFromTuple(workingMemory,leftTuple);
  for (FactEntry entry=(FactEntry)it.next(); entry != null; entry=(FactEntry)it.next()) {
    final InternalFactHandle handle=entry.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(handle)) {
      this.sink.propagateRetractTuple(leftTuple,handle,context,workingMemory);
    }
  }
}
