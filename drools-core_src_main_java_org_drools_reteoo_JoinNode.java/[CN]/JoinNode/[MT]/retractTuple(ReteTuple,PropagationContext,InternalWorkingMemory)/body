{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  ReteTuple tuple=(ReteTuple)memory.getTupleMemory().remove(leftTuple);
  if (tuple == null) {
    leftTuple.release();
    return;
  }
  Iterator it=memory.getObjectMemory().iterator(leftTuple);
  this.constraints.updateFromTuple(leftTuple);
  for (FactEntry entry=(FactEntry)it.next(); entry != null; entry=(FactEntry)it.next()) {
    InternalFactHandle handle=entry.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(handle.getObject())) {
      sink.propagateRetractTuple(leftTuple,handle,context,workingMemory);
    }
  }
  tuple.release();
  leftTuple.release();
}
