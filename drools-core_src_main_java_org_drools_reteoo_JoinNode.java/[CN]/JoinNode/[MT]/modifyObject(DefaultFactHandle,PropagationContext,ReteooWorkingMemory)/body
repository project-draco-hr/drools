{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  final ObjectMatches objectMatches=memory.remove(workingMemory,handle);
  memory.add(workingMemory,objectMatches);
  TupleMatch tupleMatch=objectMatches.getFirstTupleMatch();
  final BetaNodeBinder binder=getJoinNodeBinder();
  for (final Iterator it=memory.leftTupleIterator(workingMemory,handle); it.hasNext(); ) {
    final ReteTuple leftTuple=(ReteTuple)it.next();
    if (tupleMatch != null && tupleMatch.getTuple() == leftTuple) {
      if (binder.isAllowed(handle,leftTuple,workingMemory)) {
        propagateModifyTuple(tupleMatch,context,workingMemory);
      }
 else {
        leftTuple.removeMatch(handle);
        objectMatches.remove(tupleMatch);
        propagateRetractTuple(tupleMatch,context,workingMemory);
      }
      tupleMatch=(TupleMatch)tupleMatch.getNext();
    }
 else {
      final TupleMatch newTupleMatch=attemptJoin(leftTuple,handle,objectMatches,binder,workingMemory);
      if (newTupleMatch != null) {
        propagateAssertTuple(new ReteTuple(leftTuple,handle),newTupleMatch,context,workingMemory);
      }
    }
  }
}
