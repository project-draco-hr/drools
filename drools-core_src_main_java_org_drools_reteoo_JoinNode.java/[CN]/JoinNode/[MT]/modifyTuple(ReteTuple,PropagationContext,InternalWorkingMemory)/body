{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  if (!memory.getTupleMemory().contains(leftTuple)) {
    assertTuple(leftTuple,context,workingMemory);
  }
  Iterator iterator;
  if (leftTuple.isFieldIndexed()) {
    iterator=memory.getObjectMemory().iterator(leftTuple.getFieldIndexHashCode());
  }
 else {
    iterator=memory.getObjectMemory().iterator();
  }
  for (FactEntry entry=(FactEntry)iterator.next(); entry != null; entry=(FactEntry)entry.getNext()) {
    InternalFactHandle handle=entry.getFactHandle();
    if (this.constraints.isAllowed(handle,leftTuple,workingMemory)) {
      this.sink.propagateModifyTuple(leftTuple,handle,context,workingMemory);
    }
 else {
      this.sink.propagateRetractTuple(leftTuple,handle,context,workingMemory);
    }
  }
}
