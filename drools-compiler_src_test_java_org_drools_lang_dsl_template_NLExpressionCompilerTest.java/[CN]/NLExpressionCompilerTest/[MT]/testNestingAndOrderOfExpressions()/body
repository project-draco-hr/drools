{
  NLGrammar grammar=new NLGrammar();
  grammar.addNLItem(new NLMappingItem("{0} likes cheese","{0}.likesCheese()","*"));
  grammar.addNLItem(new NLMappingItem("print out cheese fan status {0}","print({0})","*"));
  NLExpressionCompiler compiler=new NLExpressionCompiler(grammar);
  String nl="print out cheese fan status bob likes cheese";
  String expected="print(bob.likesCheese())";
  final String result=compiler.compile(nl,"when");
  assertEquals(expected,result);
  grammar=new NLGrammar();
  grammar.addNLItem(new NLMappingItem("date of '{0}'","dateOf({0})","*"));
  grammar.addNLItem(new NLMappingItem("age of [{0}]","{0}.getAge()","*"));
  grammar.addNLItem(new NLMappingItem("Today","new java.util.Date()","*"));
  grammar.addNLItem(new NLMappingItem("{0} is before {1}","({0}).compareTo({1}) > 0","*"));
  nl="date of '10-jul-2006' is before Today";
  compiler=new NLExpressionCompiler(grammar);
  expected="(dateOf(10-jul-2006)).compareTo(new java.util.Date()) > 0";
  assertEquals(expected,compiler.compile(nl,"when"));
  nl="age of [bob] < age of [michael]";
  expected="bob.getAge() < michael.getAge()";
  assertEquals(expected,compiler.compile(nl,"when"));
  nl="nothing relevant here... move along";
  expected=nl;
  try {
    assertEquals(expected,compiler.compile(nl,"when"));
    fail("should have thrown an exception for non expansion.");
  }
 catch (  final RuntimeException e) {
  }
}
