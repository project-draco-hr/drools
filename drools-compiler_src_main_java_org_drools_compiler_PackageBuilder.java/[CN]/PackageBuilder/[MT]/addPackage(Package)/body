{
  PackageRegistry pkgRegistry=this.pkgRegistryMap.get(newPkg.getName());
  Package pkg=null;
  if (pkgRegistry != null) {
    pkg=pkgRegistry.getPackage();
  }
  if (pkg == null) {
    pkg=newPackage(new PackageDescr(newPkg.getName())).getPackage();
  }
  pkg.getDialectRuntimeRegistry().merge(newPkg.getDialectRuntimeRegistry(),this.rootClassLoader);
  if (newPkg.getFunctions() != null) {
    for (    Map.Entry<String,Function> entry : newPkg.getFunctions().entrySet()) {
      if (pkg.getFunctions().containsKey(entry.getKey())) {
        this.results.add(new DuplicateFunction(entry.getValue(),this.configuration));
      }
      pkg.addFunction(entry.getValue());
    }
  }
  pkg.getClassFieldAccessorStore().merge(newPkg.getClassFieldAccessorStore());
  pkg.getDialectRuntimeRegistry().onBeforeExecute();
  TypeDeclaration lastType=null;
  try {
    if (newPkg.getTypeDeclarations() != null) {
      for (      TypeDeclaration type : newPkg.getTypeDeclarations().values()) {
        lastType=type;
        type.setTypeClass(this.rootClassLoader.loadClass(type.getTypeClassName()));
      }
    }
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeDroolsException("unable to resolve Type Declaration class '" + lastType.getTypeName() + "'");
  }
  mergePackage(pkg,newPkg);
}
