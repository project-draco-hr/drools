{
  String fullName=typeDescr.getNamespace() + "." + typeDescr.getTypeName();
  String fullSuperType=typeDescr.getSuperTypeName() != null ? (typeDescr.getSuperTypeNamespace() + "." + typeDescr.getSuperTypeName()) : Object.class.getName();
  String[] interfaces=new String[]{Serializable.class.getName()};
  ClassDefinition def=new ClassDefinition(fullName,fullSuperType,interfaces);
  for (  String annotationName : typeDescr.getAnnotationNames()) {
    Class annotation=resolveAnnotation(annotationName,pkgRegistry.getTypeResolver());
    if (annotation != null) {
      try {
        AnnotationDefinition annotationDefinition=AnnotationDefinition.build(annotation,typeDescr.getAnnotations().get(annotationName).getValueMap(),pkgRegistry.getTypeResolver());
        def.addAnnotation(annotationDefinition);
      }
 catch (      NoSuchMethodException nsme) {
        this.results.add(new TypeDeclarationError("Annotated type " + fullName + "  - undefined property in @annotation "+ annotationName+ ": "+ nsme.getMessage()+ ";",typeDescr.getLine()));
      }
    }
  }
  if (typeDescr.getFields().size() > 0) {
    PriorityQueue<FieldDefinition> fieldDefs=sortFields(typeDescr.getFields(),pkgRegistry);
    while (fieldDefs.size() > 0) {
      FieldDefinition fld=fieldDefs.poll();
      def.addField(fld);
    }
  }
  type.setNovel(isNovelClass(typeDescr));
  if (type.isNovel()) {
    try {
      ClassBuilder cb=new ClassBuilder();
      byte[] d=cb.buildClass(def);
      JavaDialectRuntimeData dialect=(JavaDialectRuntimeData)pkgRegistry.getDialectRuntimeRegistry().getDialectData("java");
      dialect.write(JavaDialectRuntimeData.convertClassToResourcePath(fullName),d);
    }
 catch (    Exception e) {
      this.results.add(new TypeDeclarationError("Unable to create a class for declared type " + fullName + ": "+ e.getMessage()+ ";",typeDescr.getLine()));
    }
  }
  type.setTypeClassDef(def);
}
