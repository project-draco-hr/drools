{
  if (this.typeResolver.getImports().isEmpty()) {
    this.typeResolver.addImport(pkg.getName() + ".*");
  }
  final List imports=packageDescr.getImports();
  for (final Iterator it=imports.iterator(); it.hasNext(); ) {
    String importEntry=((ImportDescr)it.next()).getTarget();
    pkg.addImport(importEntry);
    this.typeResolver.addImport(importEntry);
    this.configuration.getDialectRegistry().addImport(importEntry);
  }
  for (final Iterator it=packageDescr.getFunctionImports().iterator(); it.hasNext(); ) {
    String importEntry=((FunctionImportDescr)it.next()).getTarget();
    this.configuration.getDialectRegistry().addStaticImport(importEntry);
    pkg.addStaticImport(importEntry);
  }
  ((ClassTypeResolver)this.typeResolver).setClassLoader(pkg.getPackageCompilationData().getClassLoader());
  final List globals=packageDescr.getGlobals();
  for (final Iterator it=globals.iterator(); it.hasNext(); ) {
    final GlobalDescr global=(GlobalDescr)it.next();
    final String identifier=global.getIdentifier();
    final String className=global.getType();
    Class clazz;
    try {
      clazz=typeResolver.resolveType(className);
      pkg.addGlobal(identifier,clazz);
    }
 catch (    final ClassNotFoundException e) {
      this.results.add(new GlobalError(identifier,global.getLine()));
    }
  }
}
