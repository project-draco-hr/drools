{
  validatePackageName(packageDescr);
  validateUniqueRuleNames(packageDescr);
  String dialectName=null;
  for (Iterator it=packageDescr.getAttributes().iterator(); it.hasNext(); ) {
    AttributeDescr value=(AttributeDescr)it.next();
    if ("dialect".equals(value.getName())) {
      dialectName=value.getValue();
      break;
    }
  }
  if (dialectName != null) {
    this.dialect=this.dialectRegistry.getDialect(dialectName);
  }
 else   if (this.dialect == null) {
    this.dialect=this.dialectRegistry.getDialect(this.configuration.getDefaultDialect());
  }
  if (this.pkg != null) {
    mergePackage(packageDescr);
  }
 else {
    newPackage(packageDescr);
  }
  this.ruleBuilder=new RuleBuilder();
  if (!hasErrors()) {
    for (final Iterator it=packageDescr.getFactTemplates().iterator(); it.hasNext(); ) {
      addFactTemplate((FactTemplateDescr)it.next());
    }
    if (!packageDescr.getFunctions().isEmpty()) {
      for (final Iterator it=packageDescr.getFunctions().iterator(); it.hasNext(); ) {
        FunctionDescr functionDescr=(FunctionDescr)it.next();
        functionDescr.setDialect(this.dialect.getId());
        addFunction(functionDescr);
      }
      this.dialectRegistry.compileAll();
      for (final Iterator it=packageDescr.getFunctions().iterator(); it.hasNext(); ) {
        FunctionDescr functionDescr=(FunctionDescr)it.next();
        postCompileAddFunction(functionDescr);
      }
    }
    for (final Iterator it=packageDescr.getRules().iterator(); it.hasNext(); ) {
      addRule((RuleDescr)it.next());
    }
  }
  this.dialectRegistry.compileAll();
  this.pkg.getDialectDatas().reloadDirty();
  this.results=this.dialectRegistry.addResults(this.results);
}
