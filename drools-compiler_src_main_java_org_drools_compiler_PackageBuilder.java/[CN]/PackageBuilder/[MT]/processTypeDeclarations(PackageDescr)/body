{
  PackageRegistry defaultRegistry=this.pkgRegistryMap.get(packageDescr.getNamespace());
  PackageRegistry pkgRegistry=null;
  for (  TypeDeclarationDescr typeDescr : packageDescr.getTypeDeclarations()) {
    int dotPos=typeDescr.getTypeName().lastIndexOf('.');
    if (dotPos >= 0) {
      typeDescr.setNamespace(typeDescr.getTypeName().substring(0,dotPos));
      typeDescr.setTypeName(typeDescr.getTypeName().substring(dotPos + 1));
    }
    if (isEmpty(typeDescr.getNamespace())) {
      try {
        Class<?> cls=defaultRegistry.getTypeResolver().resolveType(typeDescr.getTypeName());
        typeDescr.setNamespace(ClassUtils.getPackage(cls));
        typeDescr.setTypeName(cls.getSimpleName());
      }
 catch (      ClassNotFoundException e) {
        typeDescr.setNamespace(packageDescr.getNamespace());
      }
    }
    if (isEmpty(typeDescr.getNamespace())) {
      for (      ImportDescr id : packageDescr.getImports()) {
        String imp=id.getTarget();
        if (imp.endsWith(typeDescr.getTypeName())) {
          typeDescr.setNamespace(imp.substring(0,imp.lastIndexOf('.')));
        }
      }
    }
    fillSuperType(typeDescr,packageDescr);
    if (!typeDescr.getNamespace().equals(packageDescr.getNamespace())) {
      PackageDescr altDescr=new PackageDescr(typeDescr.getNamespace());
      altDescr.addTypeDeclaration(typeDescr);
      for (      ImportDescr imp : packageDescr.getImports()) {
        altDescr.addImport(imp);
      }
      newPackage(altDescr);
    }
  }
  Collection<TypeDeclarationDescr> sortedTypeDescriptors=sortByHierarchy(packageDescr.getTypeDeclarations());
  for (  TypeDeclarationDescr typeDescr : sortedTypeDescriptors) {
    if (!typeDescr.getNamespace().equals(packageDescr.getNamespace())) {
      continue;
    }
    pkgRegistry=this.pkgRegistryMap.get(packageDescr.getNamespace());
    mergeInheritedFields(typeDescr);
    TypeDeclaration type=new TypeDeclaration(typeDescr.getTypeName());
    if (resource != null && ((InternalResource)resource).hasURL()) {
      type.setResource(this.resource);
    }
    AnnotationDescr annotationDescr=typeDescr.getAnnotation(TypeDeclaration.Role.ID);
    String role=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
    if (role != null) {
      type.setRole(TypeDeclaration.Role.parseRole(role));
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_TYPESAFE);
    String typesafe=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
    if (typesafe != null) {
      type.setTypesafe(Boolean.parseBoolean(typesafe));
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_TEMPLATE);
    String templateName=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
    if (templateName != null) {
      type.setFormat(TypeDeclaration.Format.TEMPLATE);
      FactTemplate template=pkgRegistry.getPackage().getFactTemplate(templateName);
      if (template != null) {
        type.setTypeTemplate(template);
      }
 else {
        this.results.add(new TypeDeclarationError("Template not found for TypeDeclaration '" + template + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
        continue;
      }
    }
 else {
      annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_CLASS);
      String className=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
      if (StringUtils.isEmpty(className)) {
        className=type.getTypeName();
      }
      type.setFormat(TypeDeclaration.Format.POJO);
      Class clazz;
      try {
        generateDeclaredBean(typeDescr,type,pkgRegistry);
        clazz=pkgRegistry.getTypeResolver().resolveType(className);
        type.setTypeClass(clazz);
        if (type.getTypeClassDef() != null) {
          try {
            buildFieldAccessors(type,pkgRegistry);
          }
 catch (          Exception e) {
            this.results.add(new TypeDeclarationError("Error creating field accessors for TypeDeclaration '" + className + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
            continue;
          }
        }
      }
 catch (      final ClassNotFoundException e) {
        this.results.add(new TypeDeclarationError("Class not found TypeDeclaration'" + className + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
        continue;
      }
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_TIMESTAMP);
    String timestamp=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
    if (timestamp != null) {
      type.setTimestampAttribute(timestamp);
      ClassDefinition cd=type.getTypeClassDef();
      ClassFieldAccessorStore store=pkgRegistry.getPackage().getClassFieldAccessorStore();
      InternalReadAccessor extractor=store.getReader(type.getTypeClass().getName(),timestamp,type.new TimestampAccessorSetter());
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_DURATION);
    String duration=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
    if (duration != null) {
      type.setDurationAttribute(duration);
      ClassDefinition cd=type.getTypeClassDef();
      ClassFieldAccessorStore store=pkgRegistry.getPackage().getClassFieldAccessorStore();
      InternalReadAccessor extractor=store.getReader(type.getTypeClass().getName(),duration,type.new DurationAccessorSetter());
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_EXPIRE);
    String expiration=(annotationDescr != null) ? annotationDescr.getSingleValue() : null;
    if (expiration != null) {
      if (timeParser == null) {
        timeParser=new TimeIntervalParser();
      }
      type.setExpirationOffset(timeParser.parse(expiration)[0].longValue());
    }
    boolean dynamic=typeDescr.getAnnotationNames().contains(TypeDeclaration.ATTR_PROP_CHANGE_SUPPORT);
    type.setDynamic(dynamic);
    pkgRegistry.getPackage().addTypeDeclaration(type);
  }
}
