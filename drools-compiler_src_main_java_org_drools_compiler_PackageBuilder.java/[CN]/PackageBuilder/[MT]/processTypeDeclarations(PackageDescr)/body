{
  PackageRegistry defaultRegistry=this.pkgRegistryMap.get(packageDescr.getNamespace());
  PackageRegistry pkgRegistry=null;
  for (  TypeDeclarationDescr typeDescr : packageDescr.getTypeDeclarations()) {
    if (isEmpty(typeDescr.getNamespace())) {
      typeDescr.setNamespace(packageDescr.getNamespace());
    }
    pkgRegistry=this.pkgRegistryMap.get(typeDescr.getNamespace());
    TypeDeclaration type=new TypeDeclaration(typeDescr.getTypeName());
    if (resource != null && ((InternalResource)resource).hasURL()) {
      type.setResource(this.resource);
    }
    AnnotationDescr annotationDescr=typeDescr.getAnnotation(TypeDeclaration.Role.ID);
    if (annotationDescr != null) {
      String role=annotationDescr.getValue();
      if (role != null) {
        type.setRole(TypeDeclaration.Role.parseRole(role));
      }
    }
    String sup=typeDescr.getSuperTypeName();
    if (sup != null && !sup.contains(".")) {
      for (      ImportDescr id : packageDescr.getImports()) {
        if (id.getTarget().endsWith("." + sup)) {
          typeDescr.setSuperTypeName(id.getTarget());
          break;
        }
      }
    }
    if ((sup=typeDescr.getSuperTypeName()) != null && !sup.contains(".")) {
      for (      TypeDeclarationDescr td : packageDescr.getTypeDeclarations()) {
        if (sup.equals(td.getTypeName()))         typeDescr.setSuperTypeName(packageDescr.getNamespace() + "." + sup);
      }
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_TEMPLATE);
    String templateName=null;
    if (annotationDescr != null) {
      templateName=annotationDescr.getValue();
    }
    if (templateName != null) {
      type.setFormat(TypeDeclaration.Format.TEMPLATE);
      FactTemplate template=pkgRegistry.getPackage().getFactTemplate(templateName);
      if (template != null) {
        type.setTypeTemplate(template);
      }
 else {
        this.results.add(new TypeDeclarationError("Template not found '" + template + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
        continue;
      }
    }
 else {
      annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_CLASS);
      String className=null;
      if (annotationDescr != null) {
        className=annotationDescr.getValue();
      }
      if (className == null) {
        className=type.getTypeName();
      }
      type.setFormat(TypeDeclaration.Format.POJO);
      Class clazz;
      try {
        if (typeDescr.getFields().size() > 0) {
          generateDeclaredBean(typeDescr,type,pkgRegistry);
        }
        clazz=pkgRegistry.getTypeResolver().resolveType(className);
        type.setTypeClass(clazz);
        if (type.getTypeClassDef() != null) {
          try {
            buildFieldAccessors(type,pkgRegistry);
          }
 catch (          Exception e) {
            this.results.add(new TypeDeclarationError("Error creating field accessors for '" + className + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
            continue;
          }
        }
      }
 catch (      final ClassNotFoundException e) {
        this.results.add(new TypeDeclarationError("Class not found '" + className + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
        continue;
      }
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_TIMESTAMP);
    String timestamp=null;
    if (annotationDescr != null) {
      timestamp=annotationDescr.getValue();
    }
    if (timestamp != null) {
      type.setTimestampAttribute(timestamp);
      ClassDefinition cd=type.getTypeClassDef();
      ClassFieldAccessorStore store=pkgRegistry.getPackage().getClassFieldAccessorStore();
      InternalReadAccessor extractor=store.getReader(type.getTypeClass().getName(),timestamp,type.new TimestampAccessorSetter());
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_DURATION);
    String duration=null;
    if (annotationDescr != null) {
      duration=annotationDescr.getValue();
    }
    if (duration != null) {
      type.setDurationAttribute(duration);
      ClassDefinition cd=type.getTypeClassDef();
      ClassFieldAccessorStore store=pkgRegistry.getPackage().getClassFieldAccessorStore();
      InternalReadAccessor extractor=store.getReader(type.getTypeClass().getName(),duration,type.new DurationAccessorSetter());
    }
    annotationDescr=typeDescr.getAnnotation(TypeDeclaration.ATTR_EXPIRE);
    String expiration=null;
    if (annotationDescr != null) {
      expiration=annotationDescr.getValue();
    }
    if (expiration != null) {
      if (timeParser == null) {
        timeParser=new TimeIntervalParser();
      }
      type.setExpirationOffset(timeParser.parse(expiration)[0].longValue());
    }
    boolean dynamic=typeDescr.getAnnotationNames().contains(TypeDeclaration.ATTR_PROP_CHANGE_SUPPORT);
    type.setDynamic(dynamic);
    pkgRegistry.getPackage().addTypeDeclaration(type);
  }
}
