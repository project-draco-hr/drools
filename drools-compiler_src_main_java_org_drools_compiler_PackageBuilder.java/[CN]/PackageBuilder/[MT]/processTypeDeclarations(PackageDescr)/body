{
  PackageRegistry defaultRegistry;
  if (isEmpty(packageDescr.getName())) {
    defaultRegistry=this.pkgRegistryMap.get(this.defaultNamespace);
  }
 else {
    defaultRegistry=this.pkgRegistryMap.get(packageDescr.getNamespace());
  }
  PackageRegistry pkgRegistry=null;
  for (  TypeDeclarationDescr typeDescr : packageDescr.getTypeDeclarations()) {
    if (isEmpty(typeDescr.getNamespace())) {
      typeDescr.setNamespace(defaultRegistry.getPackage().getName());
      pkgRegistry=defaultRegistry;
    }
 else {
      pkgRegistry=this.pkgRegistryMap.get(typeDescr.getNamespace());
    }
    TypeDeclaration type=new TypeDeclaration(typeDescr.getTypeName());
    if (resource != null && ((InternalResource)resource).hasURL()) {
      type.setResource(this.resource);
    }
    String role=typeDescr.getMetaAttribute(TypeDeclaration.Role.ID);
    if (role != null) {
      type.setRole(TypeDeclaration.Role.parseRole(role));
    }
    String templateName=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_TEMPLATE);
    if (templateName != null) {
      type.setFormat(TypeDeclaration.Format.TEMPLATE);
      FactTemplate template=pkgRegistry.getPackage().getFactTemplate(templateName);
      if (template != null) {
        type.setTypeTemplate(template);
      }
 else {
        this.results.add(new TypeDeclarationError("Template not found '" + template + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
        continue;
      }
    }
 else {
      String className=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_CLASS);
      if (className == null) {
        className=type.getTypeName();
      }
      type.setFormat(TypeDeclaration.Format.POJO);
      Class clazz;
      try {
        if (typeDescr.getFields().size() > 0) {
          generateDeclaredBean(typeDescr,type,pkgRegistry);
        }
        clazz=pkgRegistry.getTypeResolver().resolveType(className);
        type.setTypeClass(clazz);
        if (type.getTypeClassDef() != null) {
          try {
            buildFieldAccessors(type,pkgRegistry);
          }
 catch (          Exception e) {
            this.results.add(new TypeDeclarationError("Error creating field accessors for '" + className + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
            continue;
          }
        }
      }
 catch (      final ClassNotFoundException e) {
        this.results.add(new TypeDeclarationError("Class not found '" + className + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
        continue;
      }
    }
    String timestamp=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_TIMESTAMP);
    if (timestamp != null) {
      type.setTimestampAttribute(timestamp);
      ClassDefinition cd=type.getTypeClassDef();
      ClassFieldAccessorStore store=pkgRegistry.getPackage().getClassFieldAccessorStore();
      InternalReadAccessor extractor=store.getReader(type.getTypeClass().getName(),timestamp,type.new TimestampAccessorSetter());
    }
    String duration=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_DURATION);
    if (duration != null) {
      type.setDurationAttribute(duration);
      ClassDefinition cd=type.getTypeClassDef();
      ClassFieldAccessorStore store=pkgRegistry.getPackage().getClassFieldAccessorStore();
      InternalReadAccessor extractor=store.getReader(type.getTypeClass().getName(),duration,type.new DurationAccessorSetter());
    }
    String expiration=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_EXPIRE);
    if (expiration != null) {
      if (timeParser == null) {
        timeParser=new TimeIntervalParser();
      }
      type.setExpirationOffset(timeParser.parse(expiration)[0].longValue());
    }
    pkgRegistry.getPackage().addTypeDeclaration(type);
  }
}
