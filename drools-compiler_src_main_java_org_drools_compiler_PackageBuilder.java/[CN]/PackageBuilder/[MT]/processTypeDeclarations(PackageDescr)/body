{
  for (  TypeDeclarationDescr typeDescr : packageDescr.getTypeDeclarations()) {
    TypeDeclaration type=new TypeDeclaration(typeDescr.getTypeName());
    String role=typeDescr.getMetaAttribute(TypeDeclaration.Role.ID);
    if (role != null) {
      type.setRole(TypeDeclaration.Role.parseRole(role));
    }
    String templateName=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_TEMPLATE);
    if (templateName != null) {
      type.setFormat(TypeDeclaration.Format.TEMPLATE);
      FactTemplate template=this.pkg.getFactTemplate(templateName);
      if (template != null) {
        type.setTypeTemplate(template);
      }
 else {
        this.results.add(new TypeDeclarationError("Template not found '" + template + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
        continue;
      }
    }
 else {
      String className=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_CLASS);
      if (className == null) {
        className=type.getTypeName();
      }
      type.setFormat(TypeDeclaration.Format.POJO);
      Class clazz;
      try {
        if (typeDescr.getFields().size() > 0) {
          generateDeclaredBean(typeDescr);
        }
        clazz=typeResolver.resolveType(className);
        type.setTypeClass(clazz);
      }
 catch (      final ClassNotFoundException e) {
        this.results.add(new TypeDeclarationError("Class not found '" + className + "' for type '"+ type.getTypeName()+ "'",typeDescr.getLine()));
        continue;
      }
    }
    String timestamp=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_TIMESTAMP);
    if (timestamp != null) {
      type.setTimestampAttribute(timestamp);
    }
    String duration=typeDescr.getMetaAttribute(TypeDeclaration.ATTR_DURATION);
    if (duration != null) {
      type.setDurationAttribute(duration);
      InternalReadAccessor extractor=ClassFieldAccessorCache.getInstance().getReader(type.getTypeClass(),duration,this.configuration.getClassLoader());
      type.setDurationExtractor(extractor);
    }
    this.pkg.addTypeDeclaration(type);
  }
}
