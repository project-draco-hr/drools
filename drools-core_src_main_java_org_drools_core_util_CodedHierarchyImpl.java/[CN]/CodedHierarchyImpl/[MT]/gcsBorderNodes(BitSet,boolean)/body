{
  List<HierNode<T>> border=new LinkedList<HierNode<T>>();
  int n=line.size() != 0 ? line.lastKey().length() : 0;
  for (int j=key.length(); j <= n; j++) {
    BitSet start=new BitSet();
    start.or(key);
    if (j > 0) {
      start.set(j - 1);
    }
    BitSet end=new BitSet();
    end.set(j);
    for (    HierNode<T> val : line.subMap(start,end).values()) {
      BitSet candidate=val.getBitMask();
      boolean minimal=true;
      int check=superset(candidate,key);
      if ((includeEquals && check >= 0) || (!includeEquals && check > 0)) {
        for (int k=0; k < border.size(); k++) {
          HierNode<T> ex=border.get(k);
          if (ex != null) {
            if (superset(candidate,ex.getBitMask()) >= 0) {
              minimal=false;
              break;
            }
 else             if (superset(ex.getBitMask(),candidate) > 0) {
              border.set(k,null);
            }
          }
        }
        if (minimal) {
          border.add(val);
        }
      }
    }
  }
  return border;
}
