{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Redundancy.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Find redundant Pattern shells"));
  Collection<Object> data=getTestData(this.getClass().getResourceAsStream("PatternRedundancyTest.drl"));
  AnalysisResultNormal analysisResult=new AnalysisResultNormal();
  session.setGlobal("result",analysisResult);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<String,Set<String>> map=createRedundancyMap(sessionResult.iterateObjects());
  assertTrue(mapContains(map,"Pattern redundancy 1a","Pattern redundancy 1b"));
  assertTrue(mapContains(map,"Pattern redundancy 1b","Pattern redundancy 1a"));
  assertTrue(mapContains(map,"Pattern redundancy 2a","Pattern redundancy 2b"));
  assertTrue(mapContains(map,"Pattern redundancy 2b","Pattern redundancy 2a"));
  assertTrue(mapContains(map,"Pattern redundancy 3a","Pattern redundancy 3b"));
  assertTrue(mapContains(map,"Pattern redundancy 3b","Pattern redundancy 3a"));
  assertTrue(mapContains(map,"Pattern redundancy 4a","Pattern redundancy 4b"));
  assertTrue(mapContains(map,"Pattern redundancy 4b","Pattern redundancy 4a"));
  if (!map.isEmpty()) {
    fail("More redundancies than was expected.");
  }
}
