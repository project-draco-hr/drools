{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Redundancy.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Find redundant LiteralRestriction"));
  Collection<Object> data=getTestData(this.getClass().getResourceAsStream("RedundancyLiteralRestrictionTest.drl"));
  AnalysisResultNormal analysisResult=new AnalysisResultNormal();
  session.setGlobal("result",analysisResult);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<String,Set<String>> map=createRedundancyMap(sessionResult.iterateObjects());
  assertTrue(mapContains(map,"Redundant 1a","Redundant 1b"));
  assertTrue(mapContains(map,"Redundant 1b","Redundant 1a"));
  assertTrue(mapContains(map,"Redundant 2a","Redundant 2b"));
  assertTrue(mapContains(map,"Redundant 2b","Redundant 2a"));
  assertTrue(mapContains(map,"Redundant 3a","Redundant 3b"));
  assertTrue(mapContains(map,"Redundant 3b","Redundant 3a"));
  assertTrue(mapContains(map,"Redundant 4a","Redundant 4b"));
  assertTrue(mapContains(map,"Redundant 4b","Redundant 4a"));
  assertTrue(mapContains(map,"Redundant 5a","Redundant 5b"));
  assertTrue(mapContains(map,"Redundant 5b","Redundant 5a"));
  assertTrue(mapContains(map,"Redundant 6a","Redundant 6b"));
  assertTrue(mapContains(map,"Redundant 6b","Redundant 6a"));
  if (!map.isEmpty()) {
    fail("More redundancies than was expected.");
  }
}
