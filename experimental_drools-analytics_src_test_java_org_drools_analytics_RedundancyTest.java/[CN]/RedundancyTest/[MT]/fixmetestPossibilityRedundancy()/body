{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("redundancy/Possibilities.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Find redundant Possibilities"));
  Collection<Object> data=new ArrayList<Object>();
  AnalysisResultNormal analysisResult=new AnalysisResultNormal();
  session.setGlobal("result",analysisResult);
  String ruleName1="Rule 1";
  String ruleName2="Rule 2";
  PatternPossibility pp1=new PatternPossibility();
  pp1.setRuleName(ruleName1);
  PatternPossibility pp2=new PatternPossibility();
  pp2.setRuleName(ruleName2);
  Subsumption s1=new Subsumption(pp1,pp2);
  Subsumption s2=new Subsumption(pp2,pp1);
  data.add(pp1);
  data.add(pp2);
  data.add(s1);
  data.add(s2);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Iterator iter=sessionResult.iterateObjects();
  Map<String,Set<String>> map=createRedundancyMap(iter);
  assertTrue(RedundancyTest.mapContains(map,ruleName2,ruleName1));
  if (!map.isEmpty()) {
    fail("More redundancies than was expected.");
  }
}
