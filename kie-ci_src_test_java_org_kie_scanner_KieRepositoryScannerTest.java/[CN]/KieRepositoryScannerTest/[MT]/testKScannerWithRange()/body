{
  KieServices ks=KieServices.Factory.get();
  ReleaseId releaseId1=ks.newReleaseId("org.kie","scanner-range-test","1.0.1");
  ReleaseId releaseId2=ks.newReleaseId("org.kie","scanner-range-test","1.0.2");
  ReleaseId releaseRange=ks.newReleaseId("org.kie","scanner-range-test","[1.0.0,)");
  InternalKieModule kJar1=createKieJar(ks,releaseId1,"rule1","rule2");
  KieContainer kieContainer=ks.newKieContainer(releaseRange);
  MavenRepository repository=getMavenRepository();
  repository.installArtifact(releaseId1,kJar1,createKPom(fileManager,releaseId1));
  KieSession ksession=kieContainer.newKieSession("KSession1");
  checkKSession(ksession,"rule1","rule2");
  InternalKieModule kJar2=createKieJar(ks,releaseId2,"rule2","rule3");
  repository.installArtifact(releaseId2,kJar2,createKPom(fileManager,releaseId2));
  InternalKieScanner scanner=(InternalKieScanner)ks.newKieScanner(kieContainer);
  assertEquals(releaseId1,scanner.getCurrentReleaseId());
  assertEquals(InternalKieScanner.Status.STOPPED,scanner.getStatus());
  scanner.scanNow();
  assertEquals(releaseId2,scanner.getCurrentReleaseId());
  assertEquals(InternalKieScanner.Status.STOPPED,scanner.getStatus());
  KieSession ksession2=kieContainer.newKieSession("KSession1");
  checkKSession(ksession2,"rule2","rule3");
  ks.getRepository().removeKieModule(releaseId1);
  ks.getRepository().removeKieModule(releaseId2);
}
