{
  MavenRepository repository=getMavenRepository();
  KieServices ks=KieServices.Factory.get();
  ReleaseId containerReleaseId=KieServices.Factory.get().newReleaseId("org.kie","test-container","1.0.0-SNAPSHOT");
  ReleaseId includedReleaseId=KieServices.Factory.get().newReleaseId("org.kie","test-project","1.0.0-SNAPSHOT");
  InternalKieModule kJar1=createKieJar(ks,includedReleaseId,"rule1");
  repository.deployArtifact(includedReleaseId,kJar1,createKPom(fileManager,includedReleaseId));
  resetFileManager();
  InternalKieModule containerKJar=createIncludingKJar(containerReleaseId,includedReleaseId,"ruleX");
  repository.deployArtifact(containerReleaseId,containerKJar,createKPom(fileManager,containerReleaseId,includedReleaseId));
  KieContainer kieContainer=ks.newKieContainer(containerReleaseId);
  KieSession ksession=kieContainer.newKieSession("KSession2");
  checkKSession(ksession,"rule1","ruleX");
  resetFileManager();
  KieScanner scanner=ks.newKieScanner(kieContainer);
  InternalKieModule kJar2=createKieJar(ks,includedReleaseId,"rule2");
  repository.deployArtifact(includedReleaseId,kJar2,createKPom(fileManager,includedReleaseId));
  resetFileManager();
  InternalKieModule containerKJar2=createIncludingKJar(containerReleaseId,includedReleaseId,"ruleY");
  repository.deployArtifact(containerReleaseId,containerKJar2,createKPom(fileManager,containerReleaseId,includedReleaseId));
  resetFileManager();
  scanner.scanNow();
  KieSession ksession2=kieContainer.newKieSession("KSession2");
  checkKSession(ksession2,"rule2","ruleY");
  ks.getRepository().removeKieModule(containerReleaseId);
  ks.getRepository().removeKieModule(includedReleaseId);
}
