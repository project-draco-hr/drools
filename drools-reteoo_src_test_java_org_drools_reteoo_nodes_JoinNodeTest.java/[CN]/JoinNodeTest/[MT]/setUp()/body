{
  constraint=mock(BetaNodeFieldConstraint.class);
  final ContextEntry c=mock(ContextEntry.class);
  when(constraint.createContextEntry()).thenReturn(c);
  this.rule=new RuleImpl("test-rule");
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  pctxFactory=kBase.getConfiguration().getComponentFactory().getPropagationContextFactory();
  this.context=pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null);
  this.workingMemory=new StatefulKnowledgeSessionImpl(1L,kBase);
  this.tupleSource=new MockTupleSource(4);
  this.objectSource=new MockObjectSource(4);
  this.sink=new MockLeftTupleSink();
  final RuleBaseConfiguration configuration=new RuleBaseConfiguration();
  InternalKnowledgeBase kBase2=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  BuildContext buildContext=new BuildContext(kBase2,kBase2.getReteooBuilder().getIdGenerator());
  this.node=new JoinNode(15,this.tupleSource,this.objectSource,new DefaultBetaConstraints(new BetaNodeFieldConstraint[]{this.constraint},configuration),buildContext);
  this.node.addTupleSink(this.sink);
  this.memory=(BetaMemory)this.workingMemory.getNodeMemory(this.node);
  assertEquals(0,this.memory.getLeftTupleMemory().size());
  assertEquals(0,this.memory.getRightTupleMemory().size());
}
