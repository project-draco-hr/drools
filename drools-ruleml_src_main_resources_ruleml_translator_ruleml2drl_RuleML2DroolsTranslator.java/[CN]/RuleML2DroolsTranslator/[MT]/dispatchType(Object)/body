{
  if (value instanceof SlotType) {
    currentProcessor.processSlot((SlotType)value);
  }
 else   if (value instanceof IndType) {
    currentProcessor.processInd((IndType)value);
  }
 else   if (value instanceof VarType) {
    currentProcessor.processVar((VarType)value);
  }
 else   if (value instanceof OpAtomType) {
    currentProcessor.processOpAtom((OpAtomType)value);
  }
 else   if (value instanceof RelType) {
    currentProcessor.processRel((RelType)value);
  }
 else   if (value instanceof IfType) {
    currentProcessor.processIf((IfType)value);
  }
 else   if (value instanceof ThenType) {
    currentProcessor.processThen((ThenType)value);
  }
 else   if (value instanceof DoType) {
    currentProcessor.processDo((DoType)value);
  }
 else   if (value instanceof AssertType) {
    currentProcessor.processAssert((AssertType)value);
  }
 else   if (value instanceof RetractType) {
    currentProcessor.processRetract((RetractType)value);
  }
 else   if (value instanceof QueryType) {
    currentProcessor.processQuery((QueryType)value);
  }
 else   if (value instanceof ImpliesType) {
    currentProcessor.processImplies((ImpliesType)value);
  }
 else   if (value instanceof RuleType) {
    currentProcessor.processRule((RuleType)value);
  }
 else   if (value instanceof AtomType) {
    currentProcessor.processAtom((AtomType)value);
  }
 else   if (value instanceof AndInnerType) {
    currentProcessor.processAnd((AndInnerType)value);
  }
 else   if (value instanceof AndQueryType) {
    currentProcessor.processAnd((AndQueryType)value);
  }
 else   if (value instanceof OrInnerType) {
    currentProcessor.processOr((OrInnerType)value);
  }
 else   if (value instanceof RuleMLType) {
    dispatchType(((RuleMLType)value).getAssertOrRetractOrQuery());
  }
 else   if (value instanceof List) {
    for (    Object o : (List)value) {
      dispatchType(o);
    }
  }
 else   if (value instanceof JAXBElement<?>) {
    dispatchType(((JAXBElement<?>)value).getValue());
  }
}
