{
  ConditionalBranchEvaluator branchEvaluator=branchNode.getBranchEvaluator();
  RuleAgendaItem ruleAgendaItem=executor.getRuleAgendaItem();
  int salienceInt=0;
  Salience salience=ruleAgendaItem.getRule().getSalience();
  if (!salience.isDynamic()) {
    salienceInt=ruleAgendaItem.getRule().getSalience().getValue();
    salience=null;
  }
  for (LeftTuple leftTuple=srcLeftTuples.getUpdateFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    BranchTuples branchTuples=getBranchTuples(sink,leftTuple);
    RuleTerminalNode oldRtn=null;
    if (branchTuples.rtnLeftTuple != null) {
      oldRtn=branchTuples.rtnLeftTuple.getTupleSink();
    }
    ConditionalExecution conditionalExecution=branchEvaluator.evaluate(leftTuple,wm,cbm.context);
    RuleTerminalNode newRtn=null;
    boolean breaking=false;
    if (conditionalExecution != null) {
      newRtn=(RuleTerminalNode)conditionalExecution.getSink().getFirstLeftTupleSink();
      breaking=conditionalExecution.isBreaking();
    }
    if (oldRtn != null) {
      if (newRtn == null) {
        if (branchTuples.rtnLeftTuple.getMemory() != null) {
          executor.removeLeftTuple(branchTuples.rtnLeftTuple);
        }
        PhreakRuleTerminalNode.doLeftDelete(wm,executor,branchTuples.rtnLeftTuple);
      }
 else       if (newRtn == oldRtn) {
        PhreakRuleTerminalNode.doLeftTupleUpdate(newRtn,executor,wm.getAgenda(),salienceInt,salience,branchTuples.rtnLeftTuple,wm);
      }
 else {
        if (branchTuples.rtnLeftTuple.getMemory() != null) {
          executor.removeLeftTuple(branchTuples.rtnLeftTuple);
        }
        PhreakRuleTerminalNode.doLeftDelete(wm,executor,branchTuples.rtnLeftTuple);
        branchTuples.rtnLeftTuple=newRtn.createLeftTuple(leftTuple,newRtn,leftTuple.getPropagationContext(),true);
        PhreakRuleTerminalNode.doLeftTupleInsert(newRtn,executor,wm.getAgenda(),executor.getRuleAgendaItem(),salienceInt,salience,branchTuples.rtnLeftTuple,wm);
      }
    }
 else     if (newRtn != null) {
      branchTuples.rtnLeftTuple=newRtn.createLeftTuple(leftTuple,newRtn,leftTuple.getPropagationContext(),true);
      PhreakRuleTerminalNode.doLeftTupleInsert(newRtn,executor,wm.getAgenda(),executor.getRuleAgendaItem(),salienceInt,salience,branchTuples.rtnLeftTuple,wm);
    }
    if (branchTuples.mainLeftTuple != null) {
switch (branchTuples.mainLeftTuple.getStagedType()) {
case LeftTuple.INSERT:
        stagedLeftTuples.removeInsert(branchTuples.mainLeftTuple);
      break;
case LeftTuple.UPDATE:
    stagedLeftTuples.removeUpdate(branchTuples.mainLeftTuple);
  break;
}
if (!breaking) {
trgLeftTuples.addUpdate(branchTuples.mainLeftTuple);
}
 else {
trgLeftTuples.addDelete(branchTuples.mainLeftTuple);
}
}
 else if (!breaking) {
trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,sink,leftTuple.getPropagationContext(),true));
}
leftTuple.clearStaged();
leftTuple=next;
}
}
