{
  if (objectTypeNode == null) {
    throw new IllegalArgumentException("ObjectTypeNode cannot be null!");
  }
  if (pkgBuilder == null) {
    throw new IllegalArgumentException("PackageBuilder cannot be null!");
  }
  ObjectTypeNodeCompiler compiler=new ObjectTypeNodeCompiler(objectTypeNode);
  String packageName=compiler.getPackageName();
  PackageRegistry pkgReg=pkgBuilder.getPackageRegistry(packageName);
  if (pkgReg == null) {
    pkgBuilder.addPackage(new PackageDescr(packageName));
    pkgReg=pkgBuilder.getPackageRegistry(packageName);
  }
  String source=compiler.generateSource();
  String generatedSourceName=compiler.getName();
  JavaDialect dialect=(JavaDialect)pkgReg.getDialectCompiletimeRegistry().getDialect("java");
  dialect.addSrc(compiler.getBinaryName(),source.getBytes());
  pkgBuilder.compileAll();
  pkgBuilder.updateResults();
  CompiledNetwork network;
  try {
    network=(CompiledNetwork)Class.forName(generatedSourceName,true,pkgBuilder.getRootClassLoader()).newInstance();
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("This is a bug. Please contact the development team",e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException("This is a bug. Please contact the development team",e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException("This is a bug. Please contact the development team",e);
  }
  return network;
}
