{
  for (final Iterator it=pkgDescr.getImports().iterator(); it.hasNext(); ) {
    final ImportDescr imp=(ImportDescr)it.next();
    final String className=imp.getTarget();
    if (className.endsWith("*")) {
      this.errors.add("Unable to introspect model for wild card imports (" + className + "). Please explicitly import each fact type you require.");
    }
 else {
      resolver.addImport(className);
      final Class clazz=loadClass(className,jars);
      if (clazz != null) {
        try {
          final String shortTypeName=getShortNameOfClass(clazz.getName());
          loadClassFields(clazz,shortTypeName);
          this.builder.addFactType(shortTypeName);
        }
 catch (        final IOException e) {
          this.errors.add("Error while inspecting the class: " + className + ". The error was: "+ e.getMessage());
        }
catch (        NoClassDefFoundError e) {
          this.errors.add("Unable to find the class: " + e.getMessage().replace('/','.') + " which is required by: "+ className+ ". You may need to add more classes to the model.");
        }
      }
    }
  }
  Set<String> declaredTypes=new HashSet<String>();
  for (final Iterator<TypeDeclarationDescr> it=pkgDescr.getTypeDeclarations().iterator(); it.hasNext(); ) {
    TypeDeclarationDescr td=it.next();
    declaredTypes.add(td.getTypeName());
  }
  for (final Iterator<TypeDeclarationDescr> it=pkgDescr.getTypeDeclarations().iterator(); it.hasNext(); ) {
    TypeDeclarationDescr td=it.next();
    if (td.getFields().size() > 0) {
      String declaredType=td.getTypeName();
      this.builder.addFactType(declaredType);
      List<String> fieldNames=new ArrayList<String>();
      for (      Map.Entry<String,TypeFieldDescr> f : td.getFields().entrySet()) {
        String fieldName=f.getKey();
        fieldNames.add(fieldName);
        String fieldClass=f.getValue().getPattern().getObjectType();
        if (declaredTypes.contains(fieldClass)) {
          this.builder.addFieldType(declaredType + "." + fieldName,fieldClass,null);
        }
 else {
          try {
            Class clz=resolver.resolveType(fieldClass);
            this.builder.addFieldType(declaredType + "." + fieldName,translateClassToGenericType(clz),clz);
          }
 catch (          ClassNotFoundException e) {
            this.errors.add("Class of field not found: " + fieldClass);
          }
        }
      }
      this.builder.addFieldsForType(declaredType,fieldNames.toArray(new String[fieldNames.size()]));
    }
  }
  populateFactTemplateTypes(pkgDescr,resolver);
}
