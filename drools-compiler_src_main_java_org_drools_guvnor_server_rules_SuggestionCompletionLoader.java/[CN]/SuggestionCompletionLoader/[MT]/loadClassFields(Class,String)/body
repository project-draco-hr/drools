{
  if (clazz == null) {
    return;
  }
  final ClassFieldInspector inspector=new ClassFieldInspector(clazz);
  String[] fields=(String[])inspector.getFieldNames().keySet().toArray(new String[inspector.getFieldNames().size()]);
  Arrays.sort(fields);
  fields=removeIrrelevantFields(fields);
  this.builder.addFieldsForType(shortTypeName,fields);
  Method[] methods=clazz.getMethods();
  List modifierStrings=new ArrayList();
  for (int i=0; i < methods.length; i++) {
    Method method=methods[i];
    modifierStrings.add((String)method.getName());
  }
  String[] modifiers=new String[modifierStrings.size()];
  modifierStrings.toArray(modifiers);
  this.builder.addModifiersForType(shortTypeName,modifiers);
  for (int i=0; i < fields.length; i++) {
    final Class type=(Class)inspector.getFieldTypes().get(fields[i]);
    final String fieldType=getFieldType(type);
    this.builder.addFieldType(shortTypeName + "." + fields[i],fieldType);
  }
}
