{
  if (clazz == null) {
    return;
  }
  final ClassFieldInspector inspector=new ClassFieldInspector(clazz);
  Set<String> fieldSet=new TreeSet<String>();
  fieldSet.addAll(inspector.getFieldNames().keySet());
  fieldSet.add("this");
  this.builder.addFieldsForType(shortTypeName,removeIrrelevantFields(fieldSet));
  Method[] methods=clazz.getMethods();
  List<String> modifierStrings=new ArrayList<String>();
  Map<String,FieldAccessorsAndMutators> accessorsAndMutators=new HashMap<String,FieldAccessorsAndMutators>();
  for (  Method method : methods) {
    modifierStrings.add(method.getName());
    if (method.getParameterTypes().length > 0) {
      String name=method.getName();
      if (name.startsWith("set")) {
        name=Introspector.decapitalize(name.substring(3));
      }
      String factField=shortTypeName + "." + name;
      if (accessorsAndMutators.get(factField) == FieldAccessorsAndMutators.ACCESSOR) {
        accessorsAndMutators.put(factField,FieldAccessorsAndMutators.BOTH);
      }
 else {
        accessorsAndMutators.put(factField,FieldAccessorsAndMutators.MUTATOR);
      }
    }
 else     if (!method.getReturnType().equals("void")) {
      String name=method.getName();
      if (name.startsWith("get")) {
        name=Introspector.decapitalize(name.substring(3));
      }
 else       if (name.startsWith("is")) {
        name=Introspector.decapitalize(name.substring(2));
      }
      String factField=shortTypeName + "." + name;
      if (accessorsAndMutators.get(factField) == FieldAccessorsAndMutators.MUTATOR) {
        accessorsAndMutators.put(factField,FieldAccessorsAndMutators.BOTH);
      }
 else {
        accessorsAndMutators.put(shortTypeName + "." + name,FieldAccessorsAndMutators.ACCESSOR);
      }
    }
  }
  String[] modifiers=new String[modifierStrings.size()];
  modifierStrings.toArray(modifiers);
  this.builder.addModifiersForType(shortTypeName,modifiers);
  this.builder.addFieldAccessorsAndMutatorsForField(accessorsAndMutators);
  fieldSet.remove("this");
  this.builder.addFieldType(shortTypeName + ".this",SuggestionCompletionEngine.TYPE_OBJECT,clazz);
  for (  String field : fieldSet) {
    final Class<?> type=inspector.getFieldTypes().get(field);
    final String fieldType=translateClassToGenericType(type);
    this.builder.addFieldType(shortTypeName + "." + field,fieldType,type);
    Field f=inspector.getFieldTypesField().get(field);
    this.builder.addFieldTypeField(shortTypeName + "." + field,f);
  }
  ClassMethodInspector methodInspector=new ClassMethodInspector(clazz,this);
  List<MethodInfo> methodInfos=methodInspector.getMethodInfos();
  for (  MethodInfo mi : methodInfos) {
    String genericType=mi.getParametricReturnType();
    if (genericType != null) {
      this.builder.putParametricFieldType(shortTypeName + "." + mi.getNameWithParameters(),genericType);
    }
  }
  this.builder.getInstance().addMethodInfo(shortTypeName,methodInfos);
}
