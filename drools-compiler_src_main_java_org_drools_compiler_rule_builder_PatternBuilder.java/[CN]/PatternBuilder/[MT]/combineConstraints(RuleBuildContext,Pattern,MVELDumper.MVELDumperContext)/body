{
  List<MvelConstraint> combinableConstraints=pattern.getCombinableConstraints();
  if (combinableConstraints == null || combinableConstraints.size() < 2) {
    return;
  }
  List<Declaration> declarations=new ArrayList<Declaration>();
  Set<String> declarationNames=new HashSet<String>();
  boolean isFirst=true;
  Collection<String> packageNames=null;
  StringBuilder expressionBuilder=new StringBuilder(combinableConstraints.size() * 25);
  for (  MvelConstraint constraint : combinableConstraints) {
    pattern.removeConstraint(constraint);
    if (isFirst) {
      packageNames=constraint.getPackageNames();
      isFirst=false;
    }
 else {
      expressionBuilder.append(" && ");
    }
    String constraintExpression=constraint.getExpression();
    boolean isComplex=constraintExpression.contains("&&") || constraintExpression.contains("||");
    if (isComplex) {
      expressionBuilder.append("( ");
    }
    expressionBuilder.append(constraintExpression);
    if (isComplex) {
      expressionBuilder.append(" )");
    }
    for (    Declaration declaration : constraint.getRequiredDeclarations()) {
      if (declarationNames.add(declaration.getBindingName())) {
        declarations.add(declaration);
      }
    }
  }
  String expression=expressionBuilder.toString();
  MVELCompilationUnit compilationUnit=getConstraintBuilder(context).buildCompilationUnit(context,pattern,expression,mvelCtx.getAliases());
  Constraint combinedConstraint=getConstraintBuilder(context).buildMvelConstraint(packageNames,expression,declarations.toArray(new Declaration[declarations.size()]),compilationUnit,IndexUtil.ConstraintType.UNKNOWN,null,null,false);
  pattern.addConstraint(combinedConstraint);
}
