{
  String expression=((ExpressionDescr)descr).getExpression();
  XpathAnalysis xpathAnalysis=XpathAnalysis.analyze(expression);
  if (xpathAnalysis.hasError()) {
    context.addError(new DescrBuildError(context.getParentDescr(),descr,null,"Invalid xpath expression '" + expression + "': "+ xpathAnalysis.getError()));
    return null;
  }
  XpathConstraint xpathConstraint=new XpathConstraint();
  ObjectType objectType=pattern.getObjectType();
  Class<?> patternClass=((ClassObjectType)objectType).getClassType();
  List<Class<?>> backReferenceClasses=new ArrayList<Class<?>>();
  backReferenceClasses.add(patternClass);
  XpathBackReference backRef=new XpathBackReference(pattern,backReferenceClasses);
  pattern.setBackRefDeclarations(backRef);
  ObjectType originalType=pattern.getObjectType();
  ObjectType currentObjectType=originalType;
  mvelCtx.setInXpath(true);
  try {
    for (    XpathAnalysis.XpathPart part : xpathAnalysis) {
      XpathConstraint.XpathChunk xpathChunk=xpathConstraint.addChunck(patternClass,part.getField(),part.getIndex(),part.isIterate(),part.isLazy());
      context.getPkg().getClassFieldAccessorStore().getClassObjectType(((ClassObjectType)currentObjectType),xpathChunk);
      if (xpathChunk == null) {
        context.addError(new DescrBuildError(context.getParentDescr(),descr,null,"Invalid xpath expression '" + expression + "': cannot access "+ part.getField()+ " on "+ patternClass));
        pattern.setObjectType(originalType);
        return null;
      }
      if (part.getInlineCast() != null) {
        try {
          patternClass=context.getDialect().getTypeResolver().resolveType(part.getInlineCast());
        }
 catch (        ClassNotFoundException e) {
          context.addError(new DescrBuildError(context.getParentDescr(),descr,null,"Unknown class " + part.getInlineCast() + " in xpath expression '"+ expression+ "'"));
          return null;
        }
        part.addInlineCastConstraint(patternClass);
        currentObjectType=getObjectType(context,patternDescr,patternClass.getName());
        xpathChunk.setReturnedType((ClassObjectType)currentObjectType);
      }
 else {
        patternClass=xpathChunk.getReturnedClass();
        currentObjectType=getObjectType(context,patternDescr,patternClass.getName());
      }
      pattern.setObjectType(currentObjectType);
      backReferenceClasses.add(0,patternClass);
      backRef.reset();
      for (      String constraint : part.getConstraints()) {
        ConstraintConnectiveDescr result=parseExpression(context,patternDescr,new ExprConstraintDescr(constraint),constraint);
        if (result == null) {
          continue;
        }
        for (        Constraint c : build(context,patternDescr,pattern,result,mvelCtx)) {
          xpathChunk.addConstraint(c);
        }
      }
    }
  }
  finally {
    mvelCtx.setInXpath(false);
    pattern.setBackRefDeclarations(null);
    pattern.setObjectType(originalType);
  }
  xpathConstraint.setXpathStartDeclaration(patternDescr.getXpathStartDeclaration());
  if (descr instanceof BindingDescr) {
    xpathConstraint.setDeclaration(pattern.addDeclaration(((BindingDescr)descr).getVariable()));
  }
  return xpathConstraint;
}
