{
  String expression=((ExpressionDescr)descr).getExpression();
  XpathAnalysis xpathAnalysis=XpathAnalysis.analyze(expression);
  if (xpathAnalysis == null) {
    context.addError(new DescrBuildError(context.getParentDescr(),descr,null,"Invalid xpath expression '" + expression + "'"));
    return null;
  }
  XpathConstraint xpathConstraint=new XpathConstraint();
  ObjectType objectType=pattern.getObjectType();
  Class<?> patternClass=((ClassObjectType)objectType).getClassType();
  ObjectType originalType=pattern.getObjectType();
  for (  XpathAnalysis.XpathPart part : xpathAnalysis) {
    XpathConstraint.XpathChunk xpathChunk=xpathConstraint.addChunck(patternClass,part.getField(),part.isIterate());
    if (xpathChunk == null) {
      context.addError(new DescrBuildError(context.getParentDescr(),descr,null,"Invalid xpath expression '" + expression + "': cannot access "+ part.getField()+ " on "+ patternClass));
      pattern.setObjectType(originalType);
      return null;
    }
    if (part.getInlineCast() != null) {
      try {
        patternClass=context.getDialect().getTypeResolver().resolveType(part.getInlineCast());
      }
 catch (      ClassNotFoundException e) {
        context.addError(new DescrBuildError(context.getParentDescr(),descr,null,"Unknown class " + part.getInlineCast() + " in xpath expression '"+ expression+ "'"));
        return null;
      }
      part.addInlineCastConstraint(patternClass);
    }
 else {
      patternClass=xpathChunk.getReturnedClass();
    }
    pattern.setObjectType(new ClassObjectType(patternClass));
    for (    String constraint : part.getConstraints()) {
      ConstraintConnectiveDescr result=parseExpression(context,patternDescr,new ExprConstraintDescr(constraint),constraint);
      if (result == null) {
        continue;
      }
      for (      Constraint c : build(context,patternDescr,pattern,result,mvelCtx)) {
        xpathChunk.addConstraint(c);
      }
    }
  }
  pattern.setObjectType(originalType);
  if (descr instanceof BindingDescr) {
    xpathConstraint.setDeclaration(pattern.addDeclaration(((BindingDescr)descr).getVariable()));
  }
  return xpathConstraint;
}
