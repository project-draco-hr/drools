{
  if (!(d instanceof ConstraintConnectiveDescr) || ((ConstraintConnectiveDescr)d).getConnective() != ConnectiveType.OR) {
    return expr;
  }
  List<BaseDescr> subDescrs=((ConstraintConnectiveDescr)d).getDescrs();
  for (  BaseDescr subDescr : subDescrs) {
    if (!(subDescr instanceof RelationalExprDescr && isSimpleExpr((RelationalExprDescr)subDescr))) {
      return expr;
    }
  }
  String[] subExprs=expr.split("\\Q||\\E");
  if (subExprs.length != subDescrs.size()) {
    return expr;
  }
  int i=0;
  StringBuilder sb=new StringBuilder();
  for (  BaseDescr subDescr : subDescrs) {
    RelationalExprDescr relDescr=(RelationalExprDescr)subDescr;
    String[] values=new String[2];
    findExpressionValues(relDescr,values);
    String normalizedExpr;
    if (!getExprBindings(context,pattern,values[1]).isConstant()) {
      normalizedExpr=subExprs[i++];
    }
 else {
      InternalReadAccessor extractor=getFieldReadAccessor(context,relDescr,pattern.getObjectType(),values[0],null,true);
      if (extractor == null) {
        normalizedExpr=subExprs[i++];
      }
 else {
        ValueType vtype=extractor.getValueType();
        LiteralRestrictionDescr restrictionDescr=new LiteralRestrictionDescr(relDescr.getOperator(),relDescr.isNegated(),relDescr.getParameters(),values[1],LiteralRestrictionDescr.TYPE_STRING);
        normalizedExpr=normalizeMVELLiteralExpression(vtype,getFieldValue(context,vtype,restrictionDescr),subExprs[i++],values[0],relDescr.getOperator(),values[1],restrictionDescr);
      }
    }
    sb.append(normalizedExpr);
    if (i < subExprs.length) {
      sb.append(" || ");
    }
  }
  return sb.toString();
}
