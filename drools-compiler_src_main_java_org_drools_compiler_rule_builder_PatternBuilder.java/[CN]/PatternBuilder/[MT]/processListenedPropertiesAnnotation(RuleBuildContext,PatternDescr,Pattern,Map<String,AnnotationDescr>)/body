{
  AnnotationDescr listenedProps=annotationMap.get(Pattern.ATTR_LISTENED_PROPS);
  if (listenedProps != null) {
    List<String> settableProperties=getSettableProperties(context,patternDescr,pattern);
    List<String> listenedProperties=new ArrayList<String>();
    for (    String propertyName : listenedProps.getValue().toString().split(",")) {
      propertyName=propertyName.trim();
      if (propertyName.equals("*") || propertyName.equals("!*")) {
        if (listenedProperties.contains("*") || listenedProperties.contains("!*")) {
          context.addError(new DescrBuildError(context.getParentDescr(),patternDescr,null,"Duplicate usage of wildcard * in @" + Pattern.ATTR_LISTENED_PROPS + " annotation"));
        }
 else {
          listenedProperties.add(propertyName);
        }
        continue;
      }
      boolean isNegative=propertyName.startsWith("!");
      propertyName=isNegative ? propertyName.substring(1).trim() : propertyName;
      if (settableProperties != null && !settableProperties.contains(propertyName)) {
        context.addError(new DescrBuildError(context.getParentDescr(),patternDescr,null,"Unknown property " + propertyName + " in @"+ Pattern.ATTR_LISTENED_PROPS+ " annotation"));
      }
 else       if (listenedProperties.contains(propertyName) || listenedProperties.contains("!" + propertyName)) {
        context.addError(new DescrBuildError(context.getParentDescr(),patternDescr,null,"Duplicate property " + propertyName + " in @"+ Pattern.ATTR_LISTENED_PROPS+ " annotation"));
      }
 else {
        listenedProperties.add(isNegative ? "!" + propertyName : propertyName);
      }
    }
    for (    Constraint constr : pattern.getConstraints()) {
      if (constr instanceof EvaluatorConstraint && ((EvaluatorConstraint)constr).isSelf()) {
        EvaluatorConstraint ec=((EvaluatorConstraint)constr);
        if (ec.getEvaluator().getOperator() == IsAEvaluatorDefinition.ISA || ec.getEvaluator().getOperator() == IsAEvaluatorDefinition.NOT_ISA) {
          listenedProperties.add(TraitableBean.TRAITSET_FIELD_NAME);
        }
      }
    }
    pattern.setListenedProperties(listenedProperties);
  }
}
