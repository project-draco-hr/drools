{
  LeftTupleMemory ltm=bm.getLeftTupleMemory();
  RightTupleMemory rtm=bm.getRightTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=notNode.getRawConstraints();
  LeftTupleSets stagedLeftTuples=null;
  if (!bm.getSegmentMemory().isEmpty()) {
    stagedLeftTuples=bm.getSegmentMemory().getFirst().getStagedLeftTuples();
  }
  unlinkNotNodeOnRightInsert(notNode,bm,wm);
  for (RightTuple rightTuple=srcRightTuples.getInsertFirst(); rightTuple != null; ) {
    RightTuple next=rightTuple.getStagedNext();
    rtm.add(rightTuple);
    FastIterator it=notNode.getLeftIterator(ltm);
    PropagationContext context=rightTuple.getPropagationContext();
    constraints.updateFromFactHandle(contextEntry,wm,rightTuple.getFactHandle());
    for (LeftTuple leftTuple=notNode.getFirstLeftTuple(rightTuple,ltm,context,it); leftTuple != null; ) {
      LeftTuple temp=(LeftTuple)it.next(leftTuple);
      if (leftTuple.getStagedType() == LeftTuple.UPDATE) {
        leftTuple=temp;
        continue;
      }
      if (constraints.isAllowedCachedRight(contextEntry,leftTuple)) {
        leftTuple.setBlocker(rightTuple);
        rightTuple.addBlocked(leftTuple);
        ltm.remove(leftTuple);
        LeftTuple childLeftTuple=leftTuple.getFirstChild();
        if (childLeftTuple != null) {
          childLeftTuple.setPropagationContext(rightTuple.getPropagationContext());
          childLeftTuple=RuleNetworkEvaluator.deleteLeftChild(childLeftTuple,trgLeftTuples,stagedLeftTuples);
        }
      }
      leftTuple=temp;
    }
    rightTuple.clearStaged();
    rightTuple=next;
  }
  constraints.resetFactHandle(contextEntry);
}
