{
  TupleMemory ltm=bm.getLeftTupleMemory();
  TupleMemory rtm=bm.getRightTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=notNode.getRawConstraints();
  boolean iterateFromStart=notNode.isIndexedUnificationJoin() || rtm.getIndexType().isComparison();
  for (RightTuple rightTuple=srcRightTuples.getUpdateFirst(); rightTuple != null; ) {
    RightTuple next=rightTuple.getStagedNext();
    if (ltm != null && ltm.size() > 0) {
      constraints.updateFromFactHandle(contextEntry,wm,rightTuple.getFactHandleForEvaluation());
      FastIterator leftIt=notNode.getLeftIterator(ltm);
      LeftTuple firstLeftTuple=notNode.getFirstLeftTuple(rightTuple,ltm,leftIt);
      for (LeftTuple leftTuple=firstLeftTuple; leftTuple != null; ) {
        LeftTuple temp=(LeftTuple)leftIt.next(leftTuple);
        if (leftTuple.getStagedType() == LeftTuple.UPDATE) {
          leftTuple=temp;
          continue;
        }
        if (constraints.isAllowedCachedRight(contextEntry,leftTuple)) {
          leftTuple.setBlocker(rightTuple);
          rightTuple.addBlocked(leftTuple);
          ltm.remove(leftTuple);
          LeftTuple childLeftTuple=leftTuple.getFirstChild();
          if (childLeftTuple != null) {
            childLeftTuple.setPropagationContext(rightTuple.getPropagationContext());
            RuleNetworkEvaluator.unlinkAndDeleteChildLeftTuple(childLeftTuple,trgLeftTuples,stagedLeftTuples);
          }
        }
        leftTuple=temp;
      }
    }
    LeftTuple firstBlocked=rightTuple.getTempBlocked();
    if (firstBlocked != null) {
      RightTuple rootBlocker=rightTuple.getTempNextRightTuple();
      if (rootBlocker == null) {
        iterateFromStart=true;
      }
      FastIterator rightIt=notNode.getRightIterator(rtm);
      for (LeftTuple leftTuple=firstBlocked; leftTuple != null; ) {
        LeftTuple temp=leftTuple.getBlockedNext();
        leftTuple.clearBlocker();
        if (leftTuple.getStagedType() == LeftTuple.UPDATE) {
          leftTuple.setBlocker(rightTuple);
          rightTuple.addBlocked(leftTuple);
          leftTuple=temp;
          continue;
        }
        constraints.updateFromTuple(contextEntry,wm,leftTuple);
        if (iterateFromStart) {
          rootBlocker=notNode.getFirstRightTuple(leftTuple,rtm,null,rightIt);
        }
        for (RightTuple newBlocker=rootBlocker; newBlocker != null; newBlocker=(RightTuple)rightIt.next(newBlocker)) {
          if (leftTuple.getStagedType() != LeftTuple.DELETE && newBlocker.getStagedType() != LeftTuple.DELETE && constraints.isAllowedCachedLeft(contextEntry,newBlocker.getFactHandleForEvaluation())) {
            leftTuple.setBlocker(newBlocker);
            newBlocker.addBlocked(leftTuple);
            break;
          }
        }
        if (leftTuple.getBlocker() == null) {
          insertChildLeftTuple(sink,trgLeftTuples,ltm,leftTuple,rightTuple.getPropagationContext(),true);
        }
        leftTuple=temp;
      }
    }
    rightTuple.clearStaged();
    rightTuple=next;
  }
  constraints.resetFactHandle(contextEntry);
  constraints.resetTuple(contextEntry);
}
