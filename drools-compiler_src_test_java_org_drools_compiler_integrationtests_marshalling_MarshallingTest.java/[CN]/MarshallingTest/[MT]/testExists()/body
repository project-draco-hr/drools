{
  String header="package org.drools.compiler.test;\n";
  header+="import java.util.List;\n";
  header+="import org.drools.compiler.Person\n";
  header+="import org.drools.compiler.Cheese\n";
  header+="global java.util.List list;\n";
  String rule1="rule \"not rule test\"\n";
  rule1+="salience 10\n";
  rule1+="when\n";
  rule1+="    Person()\n";
  rule1+="    exists Cheese( price >= 5 )\n";
  rule1+="then\n";
  rule1+="    list.add( new Integer( 5 ) );\n";
  rule1+="end\n";
  final KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource((header + rule1).getBytes()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  Environment env=EnvironmentFactory.newEnvironment();
  env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES,new ObjectMarshallingStrategy[]{new IdentityPlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)});
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(null,env);
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  Person bobba=new Person("bobba fet",50);
  ksession.insert(bobba);
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  assertEquals(0,list.size());
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  Person darth=new Person("darth vadar",200);
  ksession.insert(darth);
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  assertEquals(0,list.size());
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  Cheese stilton=new Cheese("stilton",5);
  ksession.insert(stilton);
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  assertEquals(2,list.size());
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.retract(ksession.getFactHandle(stilton));
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  assertEquals(2,list.size());
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.insert(stilton);
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  Cheese brie=new Cheese("brie",18);
  ksession.insert(brie);
  ksession.fireAllRules();
  assertEquals(4,list.size());
  ksession.retract(ksession.getFactHandle(stilton));
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  assertEquals(4,list.size());
  ksession.retract(ksession.getFactHandle(bobba));
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  assertEquals(4,list.size());
  ksession.retract(ksession.getFactHandle(brie));
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.fireAllRules();
  assertEquals(4,list.size());
  ksession=getSerialisedStatefulKnowledgeSession(ksession,true);
  ksession.insert(stilton);
  ksession.fireAllRules();
  assertEquals(5,list.size());
}
