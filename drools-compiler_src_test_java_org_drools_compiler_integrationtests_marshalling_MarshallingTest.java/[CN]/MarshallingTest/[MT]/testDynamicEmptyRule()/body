{
  String rule1="package org.test;\n";
  rule1+="global java.util.List list\n";
  rule1+="rule \"Rule 1\"\n";
  rule1+="when\n";
  rule1+="then\n";
  rule1+="    list.add( \"fired1\" );\n";
  rule1+="end";
  String rule2="package org.test;\n";
  rule2+="global java.util.List list\n";
  rule2+="rule \"Rule 2\"\n";
  rule2+="when\n";
  rule2+="then\n";
  rule2+="    list.add( \"fired2\" );\n";
  rule2+="end";
  PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new StringReader(rule1));
  Package pkg=builder.getPackage();
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(pkg);
  Map<Integer,BaseNode> nodes=RuleBaseNodes.getNodeMap((InternalRuleBase)ruleBase);
  assertEquals(2,nodes.size());
  assertEquals("InitialFactImpl",((ClassObjectType)((ObjectTypeNode)nodes.get(2)).getObjectType()).getClassType().getSimpleName());
  assertEquals("Rule 1",((RuleTerminalNode)nodes.get(4)).getRule().getName());
  StatefulSession session=ruleBase.newStatefulSession();
  List list=new ArrayList();
  session.setGlobal("list",list);
  StatefulSession session1=getSerialisedStatefulSession(session);
  session1.fireAllRules();
  assertEquals(1,((List)session1.getGlobal("list")).size());
  WorkingMemory session2=getSerialisedStatefulSession(session1,true);
  session.dispose();
  session1.dispose();
  builder=new PackageBuilder();
  builder.addPackageFromDrl(new StringReader(rule2));
  pkg=builder.getPackage();
  ruleBase.addPackage(pkg);
  session2.fireAllRules();
  System.out.println(session2.getGlobal("list"));
  assertEquals(2,((List)session2.getGlobal("list")).size());
  assertEquals("fired1",((List)session2.getGlobal("list")).get(0));
  assertEquals("fired2",((List)session2.getGlobal("list")).get(1));
}
