{
  final Package pkg=new Package("pkg1");
  final RuleDescr ruleDescr=new RuleDescr("rule 1");
  ruleDescr.setConsequence("if (cheese.price == 10) { cheese.price = 5; }");
  Properties properties=new Properties();
  properties.setProperty("drools.dialect.default","mvel");
  PackageBuilderConfiguration cfg1=new PackageBuilderConfiguration(properties);
  PackageBuilder pkgBuilder=new PackageBuilder(pkg,cfg1);
  final PackageBuilderConfiguration conf=pkgBuilder.getPackageBuilderConfiguration();
  PackageRegistry pkgRegistry=pkgBuilder.getPackageRegistry(pkg.getName());
  DialectCompiletimeRegistry dialectRegistry=pkgBuilder.getPackageRegistry(pkg.getName()).getDialectCompiletimeRegistry();
  MVELDialect mvelDialect=(MVELDialect)dialectRegistry.getDialect(pkgRegistry.getDialect());
  final InstrumentedBuildContent context=new InstrumentedBuildContent(pkgBuilder,ruleDescr,dialectRegistry,pkg,mvelDialect);
  final InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final ObjectType cheeseObjeectType=new ClassObjectType(Cheese.class);
  final Pattern pattern=new Pattern(0,cheeseObjeectType);
  final PatternExtractor extractor=new PatternExtractor(cheeseObjeectType);
  final Declaration declaration=new Declaration("cheese",extractor,pattern);
  final Map<String,Declaration> map=new HashMap<String,Declaration>();
  map.put("cheese",declaration);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  final MVELConsequenceBuilder builder=new MVELConsequenceBuilder();
  builder.build(context);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final WorkingMemory wm=ruleBase.newStatefulSession();
  final Cheese cheddar=new Cheese("cheddar",10);
  final InternalFactHandle f0=(InternalFactHandle)wm.insert(cheddar);
  final LeftTuple tuple=new LeftTuple(f0,null,true);
  final AgendaItem item=new AgendaItem(0,tuple,10,null,context.getRule(),null);
  final DefaultKnowledgeHelper kbHelper=new DefaultKnowledgeHelper(wm);
  kbHelper.setActivation(item);
  try {
    ((MVELConsequence)context.getRule().getConsequence()).compile(Thread.currentThread().getContextClassLoader());
    context.getRule().getConsequence().evaluate(kbHelper,wm);
    fail("should throw an exception, as 'if' is not allowed");
  }
 catch (  Exception e) {
  }
  assertEquals(10,cheddar.getPrice());
}
