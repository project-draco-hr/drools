{
  MVELDebugHandler.setDebugMode(true);
  try {
    final DrlParser parser=new DrlParser();
    final PackageDescr pkgDescr=parser.parse(new InputStreamReader(getClass().getResourceAsStream("mvel_rule.drl")));
    Assert.assertFalse(parser.getErrors().toString(),parser.hasErrors());
    final Package pkg=new Package("org.drools");
    final RuleDescr ruleDescr=(RuleDescr)pkgDescr.getRules().get(0);
    final RuleBuilder builder=new RuleBuilder();
    final PackageBuilder pkgBuilder=new PackageBuilder(pkg);
    final PackageBuilderConfiguration conf=pkgBuilder.getPackageBuilderConfiguration();
    Dialect dialect=pkgBuilder.getDialectRegistry().getDialect("mvel");
    RuleBuildContext context=new RuleBuildContext(conf,pkg,ruleDescr,pkgBuilder.getDialectRegistry(),dialect);
    builder.build(context);
    Assert.assertTrue(context.getErrors().toString(),context.getErrors().isEmpty());
    final Rule rule=context.getRule();
    MVELConsequence mvelCons=(MVELConsequence)rule.getConsequence();
    String s=org.mvel.debug.DebugTools.decompile(mvelCons.getCompExpr());
    int fromIndex=0;
    int count=0;
    while ((fromIndex=s.indexOf("DEBUG_SYMBOL",fromIndex + 1)) > -1) {
      count++;
    }
    assertEquals(4,count);
  }
  finally {
    MVELDebugHandler.setDebugMode(false);
  }
}
