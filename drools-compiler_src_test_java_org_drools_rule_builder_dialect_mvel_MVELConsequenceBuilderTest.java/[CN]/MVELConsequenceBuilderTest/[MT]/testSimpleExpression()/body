{
  Package pkg=new Package("pkg1");
  RuleDescr ruleDescr=new RuleDescr("rule 1");
  ruleDescr.setConsequence("cheese.setPrice( 5 );");
  InstrumentedBuildContent context=new InstrumentedBuildContent(pkg,ruleDescr);
  InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  ObjectType cheeseObjeectType=new ClassObjectType(Cheese.class);
  Column column=new Column(0,cheeseObjeectType);
  ColumnExtractor extractor=new ColumnExtractor(cheeseObjeectType);
  Declaration declaration=new Declaration("cheese",extractor,column);
  Map map=new HashMap();
  map.put("cheese",declaration);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  MVELConsequenceBuilder builder=new MVELConsequenceBuilder();
  builder.build(context,null,ruleDescr);
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  WorkingMemory wm=ruleBase.newWorkingMemory();
  Cheese cheddar=new Cheese("cheddar",10);
  InternalFactHandle f0=(InternalFactHandle)wm.assertObject(cheddar);
  ReteTuple tuple=new ReteTuple(f0);
  AgendaItem item=new AgendaItem(0,tuple,null,context.getRule(),null);
  DefaultKnowledgeHelper kbHelper=new DefaultKnowledgeHelper(item,wm);
  context.getRule().getConsequence().evaluate(kbHelper,wm);
  assertEquals(5,cheddar.getPrice());
}
