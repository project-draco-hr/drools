{
  final Package pkg=new Package("pkg1");
  final RuleDescr ruleDescr=new RuleDescr("rule 1");
  ruleDescr.setConsequence("cheese.setPrice( 5 );");
  final InstrumentedBuildContent context=new InstrumentedBuildContent(pkg,ruleDescr);
  final InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final ObjectType cheeseObjeectType=new ClassObjectType(Cheese.class);
  final Column column=new Column(0,cheeseObjeectType);
  final ColumnExtractor extractor=new ColumnExtractor(cheeseObjeectType);
  final Declaration declaration=new Declaration("cheese",extractor,column);
  final Map map=new HashMap();
  map.put("cheese",declaration);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  final MVELConsequenceBuilder builder=new MVELConsequenceBuilder();
  builder.build(context,null,ruleDescr);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final WorkingMemory wm=ruleBase.newStatefulSession();
  final Cheese cheddar=new Cheese("cheddar",10);
  final InternalFactHandle f0=(InternalFactHandle)wm.assertObject(cheddar);
  final ReteTuple tuple=new ReteTuple(f0);
  final AgendaItem item=new AgendaItem(0,tuple,null,context.getRule(),null);
  final DefaultKnowledgeHelper kbHelper=new DefaultKnowledgeHelper(item,wm);
  context.getRule().getConsequence().evaluate(kbHelper,wm);
  assertEquals(5,cheddar.getPrice());
}
