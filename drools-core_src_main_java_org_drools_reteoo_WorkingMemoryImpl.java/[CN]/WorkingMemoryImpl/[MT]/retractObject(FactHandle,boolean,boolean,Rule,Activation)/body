{
  this.lock.lock();
  try {
    removePropertyChangeListener(handle);
    PropagationContext propagationContext=new PropagationContextImpl(this.propagationIdCounter++,PropagationContext.RETRACTION,rule,activation);
    this.ruleBase.retractObject(handle,propagationContext,this);
    Object oldObject=removeObject(handle);
    if (removeLogical) {
      removeLogicalDependencies(handle);
    }
    if (removeLogical || updateEqualsMap) {
      FactStatus status=(FactStatus)this.logicalAssertMap.get(oldObject);
      if (status != null) {
        status.decCounter();
        if (status.getCounter() <= 0) {
          this.logicalAssertMap.remove(oldObject);
        }
      }
    }
    this.factHandlePool.push(((FactHandleImpl)handle).getId());
    this.workingMemoryEventSupport.fireObjectRetracted(propagationContext,handle,oldObject);
    ((FactHandleImpl)handle).invalidate();
    if (!this.factQueue.isEmpty()) {
      propagateQueuedActions();
    }
  }
  finally {
    this.lock.unlock();
  }
}
