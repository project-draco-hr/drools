{
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase());
  final Rule rule=new Rule("test-rule");
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  final MockObjectSource source=new MockObjectSource(15);
  final FieldExtractor extractor=ClassFieldExtractorCache.getExtractor(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue field=FieldFactory.getFieldValue("cheddar");
  final Evaluator evaluator=ValueType.OBJECT_TYPE.getEvaluator(Operator.EQUAL);
  final LiteralConstraint constraint=new LiteralConstraint(extractor,evaluator,field);
  final AlphaNode alphaNode=new AlphaNode(2,constraint,source);
  final MockObjectSink sink=new MockObjectSink();
  alphaNode.addObjectSink(sink);
  final Cheese cheddar=new Cheese("cheddar",5);
  final DefaultFactHandle f0=(DefaultFactHandle)workingMemory.insert(cheddar);
  assertLength(0,sink.getAsserted());
  alphaNode.assertObject(f0,context,workingMemory);
  assertLength(1,sink.getAsserted());
  final Object[] list=(Object[])sink.getAsserted().get(0);
  assertSame(cheddar,workingMemory.getObject((DefaultFactHandle)list[0]));
  final Cheese stilton=new Cheese("stilton",6);
  f0.setObject(stilton);
  sink.getAsserted().clear();
  alphaNode.assertObject(f0,context,workingMemory);
  assertLength(0,sink.getAsserted());
}
