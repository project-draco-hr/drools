{
  WorkingMemoryImpl workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  Rule rule=new Rule("test-rule");
  PropagationContext context=new PropagationContextImpl(PropagationContext.ASSERTION,null,null);
  MockObjectSource source=new MockObjectSource(1);
  LiteralExpressionConstraint mockConstraint0=new LiteralExpressionConstraint(){
    public boolean isAllowed(    Object object,    ConstraintComparator comparator){
      return true;
    }
  }
;
  LiteralConstraint constraint0=new LiteralConstraint(mockConstraint0,new StringConstraintComparator(ConstraintComparator.EQUAL));
  AlphaNode alphaNode=new AlphaNode(2,constraint0,true,source);
  alphaNode.attach();
  MockObjectSink sink1=new MockObjectSink();
  alphaNode.addObjectSink(sink1);
  String object1="string";
  FactHandleImpl handle1=new FactHandleImpl(1);
  workingMemory.putObject(handle1,object1);
  source.propagateAssertObject(object1,handle1,context,workingMemory);
  assertLength(1,sink1.getAsserted());
  MockObjectSink sink2=new MockObjectSink();
  alphaNode.addObjectSink(sink2);
  alphaNode.updateNewNode(workingMemory,context);
  assertLength(1,sink1.getAsserted());
  assertLength(1,sink2.getAsserted());
  assertEquals(0,source.getUdated());
}
