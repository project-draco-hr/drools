{
  RuleBaseConfiguration config=new RuleBaseConfiguration();
  config.setAlphaMemory(false);
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase(config);
  BuildContext buildContext=new BuildContext(ruleBase,((ReteooRuleBase)ruleBase).getReteooBuilder().getIdGenerator());
  ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final Rule rule=new Rule("test-rule");
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  final MockObjectSource source=new MockObjectSource(buildContext.getNextId());
  final FieldExtractor extractor=cache.getExtractor(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue field=FieldFactory.getFieldValue("cheddar");
  final Evaluator evaluator=equals.getEvaluator(ValueType.OBJECT_TYPE,Operator.EQUAL);
  final LiteralConstraint constraint=new LiteralConstraint(extractor,evaluator,field);
  final AlphaNode alphaNode=new AlphaNode(buildContext.getNextId(),constraint,source,buildContext);
  final MockObjectSink sink=new MockObjectSink();
  alphaNode.addObjectSink(sink);
  final Cheese cheddar=new Cheese("cheddar",5);
  final DefaultFactHandle f0=new DefaultFactHandle(0,cheddar);
  final FactHashTable memory=(FactHashTable)workingMemory.getNodeMemory(alphaNode);
  assertEquals(0,memory.size());
  alphaNode.assertObject(f0,context,workingMemory);
  assertEquals(0,memory.size());
  final DefaultFactHandle f1=new DefaultFactHandle(1,new Cheese("brie",10));
  alphaNode.retractObject(f1,context,workingMemory);
  assertLength(0,sink.getRetracted());
  assertEquals(0,memory.size());
  assertFalse("Should not contain 'cheddar handle'",memory.contains(f0));
  alphaNode.retractObject(f0,context,workingMemory);
  assertLength(1,sink.getRetracted());
  assertEquals(0,memory.size());
  final Object[] list=(Object[])sink.getRetracted().get(0);
  assertSame(f0,list[0]);
}
