{
  WorkingMemoryImpl workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  Rule rule=new Rule("test-rule");
  PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  MockObjectSource source=new MockObjectSource(15);
  ClassFieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"type");
  FieldValue field=new MockField("cheddar");
  Evaluator evaluator=EvaluatorFactory.getInstance().getEvaluator(Evaluator.OBJECT_TYPE,Evaluator.EQUAL);
  LiteralConstraint constraint=new LiteralConstraint(field,extractor,evaluator);
  AlphaNode alphaNode=new AlphaNode(2,constraint,source);
  MockObjectSink sink=new MockObjectSink();
  alphaNode.addObjectSink(sink);
  FactHandleImpl f0=new FactHandleImpl(0);
  Cheese cheddar=new Cheese("cheddar",5);
  workingMemory.putObject(f0,cheddar);
  assertLength(0,sink.getAsserted());
  Set memory=(Set)workingMemory.getNodeMemory(alphaNode);
  assertLength(0,memory);
  alphaNode.assertObject(f0,context,workingMemory);
  assertLength(1,sink.getAsserted());
  assertLength(1,memory);
  Object[] list=(Object[])sink.getAsserted().get(0);
  assertSame(cheddar,workingMemory.getObject((FactHandleImpl)list[0]));
  assertTrue("Should contain 'cheddar handle'",memory.contains(f0));
  FactHandleImpl f1=new FactHandleImpl(1);
  Cheese stilton=new Cheese("stilton",6);
  workingMemory.putObject(f1,stilton);
  alphaNode.assertObject(f1,context,workingMemory);
  assertLength(1,sink.getAsserted());
  assertLength(1,memory);
  list=(Object[])sink.getAsserted().get(0);
  assertSame(cheddar,workingMemory.getObject((FactHandleImpl)list[0]));
  assertTrue("Should contain 'cheddar handle'",memory.contains(f0));
}
