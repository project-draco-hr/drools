{
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  BuildContext buildContext=new BuildContext(ruleBase,((ReteooRuleBase)ruleBase).getReteooBuilder().getIdGenerator());
  ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final Rule rule=new Rule("test-rule");
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null,null);
  final MockObjectSource source=new MockObjectSource(buildContext.getNextId());
  final InternalReadAccessor extractor=store.getReader(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue field=FieldFactory.getFieldValue("cheddar");
  final Evaluator evaluator=equals.getEvaluator(ValueType.OBJECT_TYPE,Operator.EQUAL);
  final LiteralConstraint constraint=new LiteralConstraint(extractor,evaluator,field);
  final AlphaNode alphaNode=new AlphaNode(buildContext.getNextId(),constraint,source,buildContext);
  alphaNode.attach();
  final MockObjectSink sink1=new MockObjectSink();
  alphaNode.addObjectSink(sink1);
  final Cheese cheese=new Cheese("cheddar",0);
  final DefaultFactHandle handle1=new DefaultFactHandle(1,cheese);
  source.addFact(handle1);
  alphaNode.assertObject(handle1,context,workingMemory);
  final Cheese stilton=new Cheese("stilton",10);
  final DefaultFactHandle handle2=new DefaultFactHandle(2,stilton);
  source.addFact(handle2);
  alphaNode.assertObject(handle2,context,workingMemory);
  assertLength(1,sink1.getAsserted());
  final MockObjectSink sink2=new MockObjectSink();
  alphaNode.updateSink(sink2,context,workingMemory);
  assertLength(1,sink1.getAsserted());
  assertLength(1,sink2.getAsserted());
  assertEquals(1,source.getUdated());
}
