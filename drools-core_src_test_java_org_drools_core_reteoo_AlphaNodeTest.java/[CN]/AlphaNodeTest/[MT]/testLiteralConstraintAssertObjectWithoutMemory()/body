{
  ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  BuildContext buildContext=new BuildContext(ruleBase,((ReteooRuleBase)ruleBase).getReteooBuilder().getIdGenerator());
  AbstractWorkingMemory workingMemory=(AbstractWorkingMemory)ruleBase.newStatefulSession();
  final Rule rule=new Rule("test-rule");
  PropagationContextFactory pctxFactory=ruleBase.getConfiguration().getComponentFactory().getPropagationContextFactory();
  final PropagationContext context=pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null);
  final MockObjectSource source=new MockObjectSource(buildContext.getNextId());
  final ClassFieldReader extractor=store.getReader(Cheese.class,"type",getClass().getClassLoader());
  final FieldValue field=FieldFactory.getInstance().getFieldValue("cheddar");
  final MvelConstraint constraint=new MvelConstraintTestUtil("type == \"cheddar\"",field,extractor);
  final AlphaNode alphaNode=new AlphaNode(buildContext.getNextId(),constraint,source,buildContext);
  final MockObjectSink sink=new MockObjectSink();
  alphaNode.addObjectSink(sink);
  final Cheese cheddar=new Cheese("cheddar",5);
  final DefaultFactHandle f0=(DefaultFactHandle)workingMemory.insert(cheddar);
  assertLength(0,sink.getAsserted());
  final AlphaMemory memory=(AlphaMemory)workingMemory.getNodeMemory(alphaNode);
  alphaNode.assertObject(f0,context,workingMemory);
  assertEquals(1,sink.getAsserted().size());
  Object[] list=(Object[])sink.getAsserted().get(0);
  assertSame(cheddar,workingMemory.getObject((DefaultFactHandle)list[0]));
  final Cheese stilton=new Cheese("stilton",6);
  final DefaultFactHandle f1=new DefaultFactHandle(1,stilton);
  alphaNode.assertObject(f1,context,workingMemory);
  assertLength(1,sink.getAsserted());
  list=(Object[])sink.getAsserted().get(0);
  assertSame(cheddar,workingMemory.getObject((DefaultFactHandle)list[0]));
}
