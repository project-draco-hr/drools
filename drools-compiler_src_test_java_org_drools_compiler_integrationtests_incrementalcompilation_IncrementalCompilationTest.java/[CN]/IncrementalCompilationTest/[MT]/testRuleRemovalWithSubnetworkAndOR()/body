{
  String drl1="global java.util.concurrent.atomic.AtomicInteger globalInt\n" + "rule R1 when\n" + "    $s : String()\n"+ "	 (or exists Integer(this == 1)\n"+ "	     exists Integer(this == 2) )\n"+ "	 exists Integer() from globalInt.get()\n"+ "then\n"+ "end\n";
  KieServices ks=KieServices.Factory.get();
  ReleaseId releaseId1=ks.newReleaseId("org.kie","test-upgrade","1.1.1");
  KieModule km=createAndDeployJar(ks,releaseId1,drl1);
  KieContainer kc=ks.newKieContainer(km.getReleaseId());
  KieSession ksession=kc.newKieSession();
  ksession.setGlobal("globalInt",new AtomicInteger(0));
  ksession.insert(1);
  ksession.insert("1");
  ksession.fireAllRules();
  ReleaseId releaseId2=ks.newReleaseId("org.kie","test-upgrade","1.1.2");
  km=createAndDeployJar(ks,releaseId2);
  try {
    kc.updateToVersion(releaseId2);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Incremental update should succeed, but failed with " + e.getLocalizedMessage());
  }
  ksession.fireAllRules();
}
