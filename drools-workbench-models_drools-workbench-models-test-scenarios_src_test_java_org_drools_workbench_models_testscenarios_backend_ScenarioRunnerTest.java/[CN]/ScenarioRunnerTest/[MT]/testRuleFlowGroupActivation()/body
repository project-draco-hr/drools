{
  Scenario scenario=new Scenario();
  scenario.getImports().addImport(new Import("foo.bar.Coolness"));
  Fixture[] given=new Fixture[]{new FactData("Coolness","c",Arrays.<Field>asList(new FieldData("num","42"),new FieldData("name","mic")),false)};
  scenario.getFixtures().addAll(Arrays.asList(given));
  ExecutionTrace executionTrace=new ExecutionTrace();
  scenario.getRules().add("rule1");
  scenario.setInclusive(true);
  scenario.getFixtures().add(executionTrace);
  Expectation[] assertions=new Expectation[2];
  assertions[0]=new VerifyFact("c",ls(new VerifyField("num","42","==")));
  assertions[1]=new VerifyRuleFired("rule1",1,null);
  scenario.getFixtures().addAll(Arrays.asList(assertions));
  KieSession ksession=getKieSession("rule_flow_actication.drl");
  ClassLoader classLoader=((AbstractRuleBase)((KnowledgeBaseImpl)ksession.getKieBase()).getRuleBase()).getRootClassLoader();
  HashSet<String> imports=new HashSet<String>();
  imports.add("foo.bar.*");
  TypeResolver resolver=new ClassTypeResolver(imports,classLoader);
  Class<?> coolnessClass=classLoader.loadClass("foo.bar.Coolness");
  assertNotNull(coolnessClass);
  ClassLoader cl_=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  ScenarioRunner scenarioRunner=new ScenarioRunner(ksession);
  scenarioRunner.run(scenario);
  assertEquals(0,executionTrace.getNumberOfRulesFired().intValue());
  assertFalse(scenario.wasSuccessful());
  scenario.getFixtures().clear();
  given=new Fixture[]{new FactData("Coolness","c",Arrays.<Field>asList(new FieldData("num","42"),new FieldData("name","mic")),false),new ActivateRuleFlowGroup("asdf")};
  ksession.getAgenda().clear();
  scenario.getFixtures().addAll(Arrays.asList(given));
  scenario.getFixtures().add(executionTrace);
  ((RuleFlowGroupImpl)ksession.getAgenda().getRuleFlowGroup("asdf")).setAutoDeactivate(false);
  scenarioRunner=new ScenarioRunner(ksession);
  scenarioRunner.run(scenario);
  assertEquals(1,executionTrace.getNumberOfRulesFired().intValue());
  assertTrue(scenario.wasSuccessful());
  Thread.currentThread().setContextClassLoader(cl_);
}
