{
  Scenario scenario=new Scenario();
  scenario.getImports().addImport(new Import("foo.bar.Coolness"));
  FactData[] facts=new FactData[]{new FactData("Coolness","c",Arrays.<Field>asList(new FieldData("num","42"),new FieldData("name","mic")),false)};
  scenario.getFixtures().addAll(Arrays.asList(facts));
  ExecutionTrace executionTrace=new ExecutionTrace();
  scenario.getRules().add("rule1");
  scenario.setInclusive(true);
  scenario.getFixtures().add(executionTrace);
  Expectation[] assertions=new Expectation[2];
  assertions[0]=new VerifyFact("c",ls(new VerifyField("num","42","==")));
  assertions[1]=new VerifyRuleFired("rule1",1,null);
  scenario.getFixtures().addAll(Arrays.asList(assertions));
  KieSession ksession=getKieSession("test_rules3.drl");
  ClassLoader cl=((ReteooRuleBase)((KnowledgeBaseImpl)ksession.getKieBase()).getRuleBase()).getRootClassLoader();
  HashSet<String> imports=new HashSet<String>();
  imports.add("foo.bar.*");
  assertNotNull(cl.loadClass("foo.bar.Coolness"));
  ClassLoader cl_=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(cl);
  ScenarioRunner run=new ScenarioRunner(ksession);
  run.run(scenario);
  assertEquals(1,executionTrace.getNumberOfRulesFired().intValue());
  assertTrue(scenario.wasSuccessful());
  Thread.currentThread().setContextClassLoader(cl_);
}
