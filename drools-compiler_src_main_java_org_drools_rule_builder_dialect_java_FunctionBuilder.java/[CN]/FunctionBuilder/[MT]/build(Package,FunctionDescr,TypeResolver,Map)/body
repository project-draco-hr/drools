{
  final StringTemplate st=FunctionBuilder.functionGroup.getInstanceOf("function");
  st.setAttribute("package",pkg.getName());
  st.setAttribute("imports",pkg.getImports());
  st.setAttribute("className",ucFirst(functionDescr.getName()));
  st.setAttribute("methodName",functionDescr.getName());
  st.setAttribute("returnType",functionDescr.getReturnType());
  st.setAttribute("parameterTypes",functionDescr.getParameterTypes());
  st.setAttribute("parameterNames",functionDescr.getParameterNames());
  Map params=new HashMap();
  List names=functionDescr.getParameterNames();
  List types=functionDescr.getParameterTypes();
  try {
    for (int i=0, size=names.size(); i < size; i++) {
      params.put(names.get(i),typeResolver.resolveType((String)types.get(i)));
    }
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeDroolsException(e);
  }
  st.setAttribute("text",functionDescr.getText());
  String text=st.toString();
  BufferedReader reader=new BufferedReader(new StringReader(text));
  String line=null;
  String lineStartsWith="    public static " + functionDescr.getReturnType() + " "+ functionDescr.getName();
  int offset=0;
  try {
    while ((line=reader.readLine()) != null) {
      offset++;
      if (line.startsWith(lineStartsWith)) {
        break;
      }
    }
    functionDescr.setOffset(offset);
  }
 catch (  IOException e) {
    throw new RuntimeDroolsException("Error determining start offset with function");
  }
  String name=pkg.getName() + "." + ucFirst(functionDescr.getName());
  LineMappings mapping=new LineMappings(name);
  mapping.setStartLine(functionDescr.getLine());
  mapping.setOffset(functionDescr.getOffset());
  lineMappings.put(name,lineMappings);
  return text;
}
