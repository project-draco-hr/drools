{
  lhs_return retval=new lhs_return();
  retval.start=input.LT(1);
  DroolsTree start=null;
  DroolsTree pc=null;
  lhs_return dt=null;
  lhs_return dt1=null;
  lhs_return dt2=null;
  BaseDescr pn=null;
  from_elements_return fe=null;
  List<BaseDescr> lhsList=new LinkedList<BaseDescr>();
  try {
    int alt26=10;
switch (input.LA(1)) {
case VT_OR_PREFIX:
{
        alt26=1;
      }
    break;
case VT_OR_INFIX:
{
    alt26=2;
  }
break;
case VT_AND_PREFIX:
{
alt26=3;
}
break;
case VT_AND_INFIX:
{
alt26=4;
}
break;
case VK_EXISTS:
{
alt26=5;
}
break;
case VK_NOT:
{
alt26=6;
}
break;
case VK_EVAL:
{
alt26=7;
}
break;
case VK_FORALL:
{
alt26=8;
}
break;
case VK_FROM:
{
alt26=9;
}
break;
case VT_PATTERN:
{
alt26=10;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("181:1: lhs returns [BaseDescr baseDescr] : ( ^(start= VT_OR_PREFIX (dt= lhs )+ ) | ^(start= VT_OR_INFIX dt1= lhs dt2= lhs ) | ^(start= VT_AND_PREFIX (dt= lhs )+ ) | ^(start= VT_AND_INFIX dt1= lhs dt2= lhs ) | ^(start= VK_EXISTS dt= lhs ) | ^(start= VK_NOT dt= lhs ) | ^(start= VK_EVAL pc= VT_PAREN_CHUNK ) | ^(start= VK_FORALL (dt= lhs )+ ) | ^( VK_FROM pn= lhs_pattern fe= from_elements ) | pn= lhs_pattern );",26,0,input);
throw nvae;
}
switch (alt26) {
case 1:
{
start=(DroolsTree)input.LT(1);
match(input,VT_OR_PREFIX,FOLLOW_VT_OR_PREFIX_in_lhs885);
match(input,Token.DOWN,null);
int cnt23=0;
loop23: do {
int alt23=2;
int LA23_0=input.LA(1);
if (((LA23_0 >= VT_AND_PREFIX && LA23_0 <= VT_OR_INFIX) || LA23_0 == VT_PATTERN || LA23_0 == VK_EVAL || LA23_0 == VK_NOT || (LA23_0 >= VK_EXISTS && LA23_0 <= VK_FROM))) {
alt23=1;
}
switch (alt23) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs890);
dt=lhs();
_fsp--;
lhsList.add(dt.baseDescr);
}
break;
default :
if (cnt23 >= 1) break loop23;
EarlyExitException eee=new EarlyExitException(23,input);
throw eee;
}
cnt23++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createOr(start,lhsList);
}
break;
case 2:
{
start=(DroolsTree)input.LT(1);
match(input,VT_OR_INFIX,FOLLOW_VT_OR_INFIX_in_lhs906);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs910);
dt1=lhs();
_fsp--;
pushFollow(FOLLOW_lhs_in_lhs914);
dt2=lhs();
_fsp--;
match(input,Token.UP,null);
lhsList.add(dt1.baseDescr);
lhsList.add(dt2.baseDescr);
retval.baseDescr=factory.createOr(start,lhsList);
}
break;
case 3:
{
start=(DroolsTree)input.LT(1);
match(input,VT_AND_PREFIX,FOLLOW_VT_AND_PREFIX_in_lhs926);
match(input,Token.DOWN,null);
int cnt24=0;
loop24: do {
int alt24=2;
int LA24_0=input.LA(1);
if (((LA24_0 >= VT_AND_PREFIX && LA24_0 <= VT_OR_INFIX) || LA24_0 == VT_PATTERN || LA24_0 == VK_EVAL || LA24_0 == VK_NOT || (LA24_0 >= VK_EXISTS && LA24_0 <= VK_FROM))) {
alt24=1;
}
switch (alt24) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs931);
dt=lhs();
_fsp--;
lhsList.add(dt.baseDescr);
}
break;
default :
if (cnt24 >= 1) break loop24;
EarlyExitException eee=new EarlyExitException(24,input);
throw eee;
}
cnt24++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createAnd(start,lhsList);
}
break;
case 4:
{
start=(DroolsTree)input.LT(1);
match(input,VT_AND_INFIX,FOLLOW_VT_AND_INFIX_in_lhs947);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs951);
dt1=lhs();
_fsp--;
pushFollow(FOLLOW_lhs_in_lhs955);
dt2=lhs();
_fsp--;
match(input,Token.UP,null);
lhsList.add(dt1.baseDescr);
lhsList.add(dt2.baseDescr);
retval.baseDescr=factory.createAnd(start,lhsList);
}
break;
case 5:
{
start=(DroolsTree)input.LT(1);
match(input,VK_EXISTS,FOLLOW_VK_EXISTS_in_lhs967);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs971);
dt=lhs();
_fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.createExists(start,dt.baseDescr);
}
break;
case 6:
{
start=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_lhs983);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs987);
dt=lhs();
_fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.createNot(start,dt.baseDescr);
}
break;
case 7:
{
start=(DroolsTree)input.LT(1);
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_lhs999);
match(input,Token.DOWN,null);
pc=(DroolsTree)input.LT(1);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_lhs1003);
match(input,Token.UP,null);
retval.baseDescr=factory.createEval(start,pc);
}
break;
case 8:
{
start=(DroolsTree)input.LT(1);
match(input,VK_FORALL,FOLLOW_VK_FORALL_in_lhs1015);
match(input,Token.DOWN,null);
int cnt25=0;
loop25: do {
int alt25=2;
int LA25_0=input.LA(1);
if (((LA25_0 >= VT_AND_PREFIX && LA25_0 <= VT_OR_INFIX) || LA25_0 == VT_PATTERN || LA25_0 == VK_EVAL || LA25_0 == VK_NOT || (LA25_0 >= VK_EXISTS && LA25_0 <= VK_FROM))) {
alt25=1;
}
switch (alt25) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs1020);
dt=lhs();
_fsp--;
lhsList.add(dt.baseDescr);
}
break;
default :
if (cnt25 >= 1) break loop25;
EarlyExitException eee=new EarlyExitException(25,input);
throw eee;
}
cnt25++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createForAll(start,lhsList);
}
break;
case 9:
{
match(input,VK_FROM,FOLLOW_VK_FROM_in_lhs1034);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_pattern_in_lhs1038);
pn=lhs_pattern();
_fsp--;
pushFollow(FOLLOW_from_elements_in_lhs1042);
fe=from_elements();
_fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.setupFrom(pn,fe.patternSourceDescr);
}
break;
case 10:
{
pushFollow(FOLLOW_lhs_pattern_in_lhs1053);
pn=lhs_pattern();
_fsp--;
retval.baseDescr=pn;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
