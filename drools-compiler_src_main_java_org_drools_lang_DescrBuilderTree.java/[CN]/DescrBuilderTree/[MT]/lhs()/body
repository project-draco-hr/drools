{
  lhs_return retval=new lhs_return();
  retval.start=input.LT(1);
  DroolsTree start=null;
  DroolsTree pc=null;
  lhs_return dt=null;
  lhs_return dt1=null;
  lhs_return dt2=null;
  BaseDescr pn=null;
  from_elements_return fe=null;
  List<BaseDescr> lhsList=new LinkedList<BaseDescr>();
  try {
    int alt32=10;
switch (input.LA(1)) {
case VT_OR_PREFIX:
{
        alt32=1;
      }
    break;
case VT_OR_INFIX:
{
    alt32=2;
  }
break;
case VT_AND_PREFIX:
{
alt32=3;
}
break;
case VT_AND_INFIX:
{
alt32=4;
}
break;
case VK_EXISTS:
{
alt32=5;
}
break;
case VK_NOT:
{
alt32=6;
}
break;
case VK_EVAL:
{
alt32=7;
}
break;
case VK_FORALL:
{
alt32=8;
}
break;
case FROM:
{
alt32=9;
}
break;
case VT_PATTERN:
{
alt32=10;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("215:1: lhs returns [BaseDescr baseDescr] : ( ^(start= VT_OR_PREFIX (dt= lhs )+ ) | ^(start= VT_OR_INFIX dt1= lhs dt2= lhs ) | ^(start= VT_AND_PREFIX (dt= lhs )+ ) | ^(start= VT_AND_INFIX dt1= lhs dt2= lhs ) | ^(start= VK_EXISTS dt= lhs ) | ^(start= VK_NOT dt= lhs ) | ^(start= VK_EVAL pc= VT_PAREN_CHUNK ) | ^(start= VK_FORALL (dt= lhs )+ ) | ^( FROM pn= lhs_pattern fe= from_elements ) | pn= lhs_pattern );",32,0,input);
throw nvae;
}
switch (alt32) {
case 1:
{
start=(DroolsTree)input.LT(1);
match(input,VT_OR_PREFIX,FOLLOW_VT_OR_PREFIX_in_lhs1084);
match(input,Token.DOWN,null);
int cnt29=0;
loop29: do {
int alt29=2;
int LA29_0=input.LA(1);
if (((LA29_0 >= VT_AND_PREFIX && LA29_0 <= VT_OR_INFIX) || LA29_0 == VT_PATTERN || LA29_0 == VK_EVAL || LA29_0 == VK_NOT || (LA29_0 >= VK_EXISTS && LA29_0 <= VK_FORALL) || LA29_0 == FROM)) {
alt29=1;
}
switch (alt29) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs1089);
dt=lhs();
_fsp--;
lhsList.add(dt.baseDescr);
}
break;
default :
if (cnt29 >= 1) break loop29;
EarlyExitException eee=new EarlyExitException(29,input);
throw eee;
}
cnt29++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createOr(start,lhsList);
}
break;
case 2:
{
start=(DroolsTree)input.LT(1);
match(input,VT_OR_INFIX,FOLLOW_VT_OR_INFIX_in_lhs1105);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1109);
dt1=lhs();
_fsp--;
pushFollow(FOLLOW_lhs_in_lhs1113);
dt2=lhs();
_fsp--;
match(input,Token.UP,null);
lhsList.add(dt1.baseDescr);
lhsList.add(dt2.baseDescr);
retval.baseDescr=factory.createOr(start,lhsList);
}
break;
case 3:
{
start=(DroolsTree)input.LT(1);
match(input,VT_AND_PREFIX,FOLLOW_VT_AND_PREFIX_in_lhs1125);
match(input,Token.DOWN,null);
int cnt30=0;
loop30: do {
int alt30=2;
int LA30_0=input.LA(1);
if (((LA30_0 >= VT_AND_PREFIX && LA30_0 <= VT_OR_INFIX) || LA30_0 == VT_PATTERN || LA30_0 == VK_EVAL || LA30_0 == VK_NOT || (LA30_0 >= VK_EXISTS && LA30_0 <= VK_FORALL) || LA30_0 == FROM)) {
alt30=1;
}
switch (alt30) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs1130);
dt=lhs();
_fsp--;
lhsList.add(dt.baseDescr);
}
break;
default :
if (cnt30 >= 1) break loop30;
EarlyExitException eee=new EarlyExitException(30,input);
throw eee;
}
cnt30++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createAnd(start,lhsList);
}
break;
case 4:
{
start=(DroolsTree)input.LT(1);
match(input,VT_AND_INFIX,FOLLOW_VT_AND_INFIX_in_lhs1146);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1150);
dt1=lhs();
_fsp--;
pushFollow(FOLLOW_lhs_in_lhs1154);
dt2=lhs();
_fsp--;
match(input,Token.UP,null);
lhsList.add(dt1.baseDescr);
lhsList.add(dt2.baseDescr);
retval.baseDescr=factory.createAnd(start,lhsList);
}
break;
case 5:
{
start=(DroolsTree)input.LT(1);
match(input,VK_EXISTS,FOLLOW_VK_EXISTS_in_lhs1166);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1170);
dt=lhs();
_fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.createExists(start,dt.baseDescr);
}
break;
case 6:
{
start=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_lhs1182);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1186);
dt=lhs();
_fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.createNot(start,dt.baseDescr);
}
break;
case 7:
{
start=(DroolsTree)input.LT(1);
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_lhs1198);
match(input,Token.DOWN,null);
pc=(DroolsTree)input.LT(1);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_lhs1202);
match(input,Token.UP,null);
retval.baseDescr=factory.createEval(start,pc);
}
break;
case 8:
{
start=(DroolsTree)input.LT(1);
match(input,VK_FORALL,FOLLOW_VK_FORALL_in_lhs1214);
match(input,Token.DOWN,null);
int cnt31=0;
loop31: do {
int alt31=2;
int LA31_0=input.LA(1);
if (((LA31_0 >= VT_AND_PREFIX && LA31_0 <= VT_OR_INFIX) || LA31_0 == VT_PATTERN || LA31_0 == VK_EVAL || LA31_0 == VK_NOT || (LA31_0 >= VK_EXISTS && LA31_0 <= VK_FORALL) || LA31_0 == FROM)) {
alt31=1;
}
switch (alt31) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs1219);
dt=lhs();
_fsp--;
lhsList.add(dt.baseDescr);
}
break;
default :
if (cnt31 >= 1) break loop31;
EarlyExitException eee=new EarlyExitException(31,input);
throw eee;
}
cnt31++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createForAll(start,lhsList);
}
break;
case 9:
{
match(input,FROM,FOLLOW_FROM_in_lhs1233);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_pattern_in_lhs1237);
pn=lhs_pattern();
_fsp--;
pushFollow(FOLLOW_from_elements_in_lhs1241);
fe=from_elements();
_fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.setupFrom(pn,fe.patternSourceDescr);
}
break;
case 10:
{
pushFollow(FOLLOW_lhs_pattern_in_lhs1252);
pn=lhs_pattern();
_fsp--;
retval.baseDescr=pn;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
