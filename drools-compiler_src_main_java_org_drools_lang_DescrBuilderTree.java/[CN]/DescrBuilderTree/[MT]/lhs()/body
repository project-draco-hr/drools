{
  DescrBuilderTree.lhs_return retval=new DescrBuilderTree.lhs_return();
  retval.start=input.LT(1);
  DroolsTree start=null;
  DroolsTree pc=null;
  DescrBuilderTree.lhs_return dt=null;
  DescrBuilderTree.lhs_return dt1=null;
  DescrBuilderTree.lhs_return dt2=null;
  BaseDescr pn=null;
  DescrBuilderTree.from_elements_return fe=null;
  List<BaseDescr> lhsList=new LinkedList<BaseDescr>();
  try {
    int alt40=11;
switch (input.LA(1)) {
case VT_OR_PREFIX:
{
        alt40=1;
      }
    break;
case VT_OR_INFIX:
{
    alt40=2;
  }
break;
case VT_AND_PREFIX:
{
alt40=3;
}
break;
case VT_AND_INFIX:
{
alt40=4;
}
break;
case VK_EXISTS:
{
alt40=5;
}
break;
case VK_NOT:
{
alt40=6;
}
break;
case VK_EVAL:
{
alt40=7;
}
break;
case VK_FORALL:
{
alt40=8;
}
break;
case VT_FOR_CE:
{
alt40=9;
}
break;
case FROM:
{
alt40=10;
}
break;
case VT_PATTERN:
{
alt40=11;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",40,0,input);
throw nvae;
}
switch (alt40) {
case 1:
{
start=(DroolsTree)match(input,VT_OR_PREFIX,FOLLOW_VT_OR_PREFIX_in_lhs1152);
match(input,Token.DOWN,null);
int cnt36=0;
loop36: do {
int alt36=2;
int LA36_0=input.LA(1);
if (((LA36_0 >= VT_AND_PREFIX && LA36_0 <= VT_OR_INFIX) || LA36_0 == VT_FOR_CE || LA36_0 == VT_PATTERN || LA36_0 == VK_EVAL || LA36_0 == VK_NOT || (LA36_0 >= VK_EXISTS && LA36_0 <= VK_FORALL) || LA36_0 == FROM)) {
alt36=1;
}
switch (alt36) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs1157);
dt=lhs();
state._fsp--;
lhsList.add((dt != null ? dt.baseDescr : null));
}
break;
default :
if (cnt36 >= 1) break loop36;
EarlyExitException eee=new EarlyExitException(36,input);
throw eee;
}
cnt36++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createOr(start,lhsList);
}
break;
case 2:
{
start=(DroolsTree)match(input,VT_OR_INFIX,FOLLOW_VT_OR_INFIX_in_lhs1173);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1177);
dt1=lhs();
state._fsp--;
pushFollow(FOLLOW_lhs_in_lhs1181);
dt2=lhs();
state._fsp--;
match(input,Token.UP,null);
lhsList.add((dt1 != null ? dt1.baseDescr : null));
lhsList.add((dt2 != null ? dt2.baseDescr : null));
retval.baseDescr=factory.createOr(start,lhsList);
}
break;
case 3:
{
start=(DroolsTree)match(input,VT_AND_PREFIX,FOLLOW_VT_AND_PREFIX_in_lhs1193);
match(input,Token.DOWN,null);
int cnt37=0;
loop37: do {
int alt37=2;
int LA37_0=input.LA(1);
if (((LA37_0 >= VT_AND_PREFIX && LA37_0 <= VT_OR_INFIX) || LA37_0 == VT_FOR_CE || LA37_0 == VT_PATTERN || LA37_0 == VK_EVAL || LA37_0 == VK_NOT || (LA37_0 >= VK_EXISTS && LA37_0 <= VK_FORALL) || LA37_0 == FROM)) {
alt37=1;
}
switch (alt37) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs1198);
dt=lhs();
state._fsp--;
lhsList.add((dt != null ? dt.baseDescr : null));
}
break;
default :
if (cnt37 >= 1) break loop37;
EarlyExitException eee=new EarlyExitException(37,input);
throw eee;
}
cnt37++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createAnd(start,lhsList);
}
break;
case 4:
{
start=(DroolsTree)match(input,VT_AND_INFIX,FOLLOW_VT_AND_INFIX_in_lhs1214);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1218);
dt1=lhs();
state._fsp--;
pushFollow(FOLLOW_lhs_in_lhs1222);
dt2=lhs();
state._fsp--;
match(input,Token.UP,null);
lhsList.add((dt1 != null ? dt1.baseDescr : null));
lhsList.add((dt2 != null ? dt2.baseDescr : null));
retval.baseDescr=factory.createAnd(start,lhsList);
}
break;
case 5:
{
start=(DroolsTree)match(input,VK_EXISTS,FOLLOW_VK_EXISTS_in_lhs1234);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1238);
dt=lhs();
state._fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.createExists(start,(dt != null ? dt.baseDescr : null));
}
break;
case 6:
{
start=(DroolsTree)match(input,VK_NOT,FOLLOW_VK_NOT_in_lhs1250);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1254);
dt=lhs();
state._fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.createNot(start,(dt != null ? dt.baseDescr : null));
}
break;
case 7:
{
start=(DroolsTree)match(input,VK_EVAL,FOLLOW_VK_EVAL_in_lhs1266);
match(input,Token.DOWN,null);
pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_lhs1270);
match(input,Token.UP,null);
retval.baseDescr=factory.createEval(start,pc);
}
break;
case 8:
{
start=(DroolsTree)match(input,VK_FORALL,FOLLOW_VK_FORALL_in_lhs1282);
match(input,Token.DOWN,null);
int cnt38=0;
loop38: do {
int alt38=2;
int LA38_0=input.LA(1);
if (((LA38_0 >= VT_AND_PREFIX && LA38_0 <= VT_OR_INFIX) || LA38_0 == VT_FOR_CE || LA38_0 == VT_PATTERN || LA38_0 == VK_EVAL || LA38_0 == VK_NOT || (LA38_0 >= VK_EXISTS && LA38_0 <= VK_FORALL) || LA38_0 == FROM)) {
alt38=1;
}
switch (alt38) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs1287);
dt=lhs();
state._fsp--;
lhsList.add((dt != null ? dt.baseDescr : null));
}
break;
default :
if (cnt38 >= 1) break loop38;
EarlyExitException eee=new EarlyExitException(38,input);
throw eee;
}
cnt38++;
}
 while (true);
match(input,Token.UP,null);
retval.baseDescr=factory.createForAll(start,lhsList);
}
break;
case 9:
{
start=(DroolsTree)match(input,VT_FOR_CE,FOLLOW_VT_FOR_CE_in_lhs1303);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs1307);
dt=lhs();
state._fsp--;
pushFollow(FOLLOW_for_functions_in_lhs1309);
for_functions();
state._fsp--;
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == VT_FACT || LA39_0 == VT_PAREN_CHUNK || (LA39_0 >= VT_FACT_BINDING && LA39_0 <= VT_ACCESSOR_PATH) || LA39_0 == VK_EVAL || LA39_0 == VK_IN || LA39_0 == VK_OPERATOR || (LA39_0 >= SIGNED_DECIMAL && LA39_0 <= SIGNED_FLOAT) || LA39_0 == STRING || LA39_0 == BOOL || LA39_0 == DECIMAL || (LA39_0 >= DOUBLE_PIPE && LA39_0 <= DOUBLE_AMPER) || (LA39_0 >= EQUALS && LA39_0 <= NOT_EQUALS) || (LA39_0 >= NULL && LA39_0 <= FLOAT))) {
alt39=1;
}
switch (alt39) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_lhs1311);
fact_expression();
state._fsp--;
}
break;
}
match(input,Token.UP,null);
}
break;
case 10:
{
match(input,FROM,FOLLOW_FROM_in_lhs1322);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_pattern_in_lhs1326);
pn=lhs_pattern();
state._fsp--;
pushFollow(FOLLOW_from_elements_in_lhs1330);
fe=from_elements();
state._fsp--;
match(input,Token.UP,null);
retval.baseDescr=factory.setupFrom(pn,(fe != null ? fe.patternSourceDescr : null));
}
break;
case 11:
{
pushFollow(FOLLOW_lhs_pattern_in_lhs1341);
pn=lhs_pattern();
state._fsp--;
retval.baseDescr=pn;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
