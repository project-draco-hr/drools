{
  expression_chain_return retval=new expression_chain_return();
  retval.start=input.LT(1);
  DroolsTree start=null;
  DroolsTree id=null;
  DroolsTree sc=null;
  DroolsTree pc=null;
  try {
{
      start=(DroolsTree)input.LT(1);
      match(input,VT_EXPRESSION_CHAIN,FOLLOW_VT_EXPRESSION_CHAIN_in_expression_chain1519);
      match(input,Token.DOWN,null);
      id=(DroolsTree)input.LT(1);
      match(input,ID,FOLLOW_ID_in_expression_chain1523);
      int alt36=2;
      int LA36_0=input.LA(1);
      if ((LA36_0 == VT_SQUARE_CHUNK)) {
        alt36=1;
      }
switch (alt36) {
case 1:
{
          sc=(DroolsTree)input.LT(1);
          match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_expression_chain1527);
        }
      break;
  }
  int alt37=2;
  int LA37_0=input.LA(1);
  if ((LA37_0 == VT_PAREN_CHUNK)) {
    alt37=1;
  }
switch (alt37) {
case 1:
{
      pc=(DroolsTree)input.LT(1);
      match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_expression_chain1532);
    }
  break;
}
DeclarativeInvokerDescr declarativeInvokerResult=factory.createExpressionChain(start,id,sc,pc);
((from_source_clause_scope)from_source_clause_stack.peek()).accessorDescr.addInvoker(declarativeInvokerResult);
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == VT_EXPRESSION_CHAIN)) {
alt38=1;
}
switch (alt38) {
case 1:
{
  pushFollow(FOLLOW_expression_chain_in_expression_chain1540);
  expression_chain();
  _fsp--;
}
break;
}
match(input,Token.UP,null);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
