{
  DescrBuilderTree.expression_chain_return retval=new DescrBuilderTree.expression_chain_return();
  retval.start=input.LT(1);
  DroolsTree start=null;
  DroolsTree id=null;
  DroolsTree sc=null;
  DroolsTree pc=null;
  try {
{
      start=(DroolsTree)match(input,VT_EXPRESSION_CHAIN,FOLLOW_VT_EXPRESSION_CHAIN_in_expression_chain1598);
      match(input,Token.DOWN,null);
      id=(DroolsTree)match(input,ID,FOLLOW_ID_in_expression_chain1602);
      int alt42=2;
      int LA42_0=input.LA(1);
      if ((LA42_0 == VT_SQUARE_CHUNK)) {
        alt42=1;
      }
switch (alt42) {
case 1:
{
          sc=(DroolsTree)match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_expression_chain1606);
        }
      break;
  }
  int alt43=2;
  int LA43_0=input.LA(1);
  if ((LA43_0 == VT_PAREN_CHUNK)) {
    alt43=1;
  }
switch (alt43) {
case 1:
{
      pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_expression_chain1611);
    }
  break;
}
DeclarativeInvokerDescr declarativeInvokerResult=factory.createExpressionChain(start,id,sc,pc);
((from_source_clause_scope)from_source_clause_stack.peek()).accessorDescr.addInvoker(declarativeInvokerResult);
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == VT_EXPRESSION_CHAIN)) {
alt44=1;
}
switch (alt44) {
case 1:
{
  pushFollow(FOLLOW_expression_chain_in_expression_chain1619);
  expression_chain();
  state._fsp--;
}
break;
}
match(input,Token.UP,null);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
