{
  fact_expression_return retval=new fact_expression_return();
  retval.start=input.LT(1);
  DroolsTree label=null;
  DroolsTree start=null;
  DroolsTree pc=null;
  DroolsTree op=null;
  DroolsTree not=null;
  DroolsTree param=null;
  DroolsTree s=null;
  DroolsTree i=null;
  DroolsTree f=null;
  DroolsTree b=null;
  DroolsTree n=null;
  BaseDescr pt=null;
  fact_expression_return fe=null;
  fact_expression_return fact=null;
  fact_expression_return left=null;
  fact_expression_return right=null;
  FieldConstraintDescr field=null;
  BaseDescr ae=null;
  List<BaseDescr> exprList=new LinkedList<BaseDescr>();
  try {
    int alt56=28;
switch (input.LA(1)) {
case VT_FACT:
{
        alt56=1;
      }
    break;
case VT_FACT_BINDING:
{
    alt56=2;
  }
break;
case VT_FACT_OR:
{
alt56=3;
}
break;
case VT_FIELD:
{
alt56=4;
}
break;
case VT_BIND_FIELD:
{
alt56=5;
}
break;
case VK_EVAL:
{
alt56=6;
}
break;
case EQUAL:
{
alt56=7;
}
break;
case NOT_EQUAL:
{
alt56=8;
}
break;
case GREATER:
{
alt56=9;
}
break;
case GREATER_EQUAL:
{
alt56=10;
}
break;
case LESS:
{
alt56=11;
}
break;
case LESS_EQUAL:
{
alt56=12;
}
break;
case VK_CONTAINS:
{
alt56=13;
}
break;
case VK_EXCLUDES:
{
alt56=14;
}
break;
case VK_MATCHES:
{
alt56=15;
}
break;
case VK_SOUNDSLIKE:
{
alt56=16;
}
break;
case VK_MEMBEROF:
{
alt56=17;
}
break;
case ID:
{
alt56=18;
}
break;
case VK_IN:
{
alt56=19;
}
break;
case DOUBLE_PIPE:
{
alt56=20;
}
break;
case DOUBLE_AMPER:
{
alt56=21;
}
break;
case VT_ACCESSOR_PATH:
{
alt56=22;
}
break;
case STRING:
{
alt56=23;
}
break;
case INT:
{
alt56=24;
}
break;
case FLOAT:
{
alt56=25;
}
break;
case BOOL:
{
alt56=26;
}
break;
case NULL:
{
alt56=27;
}
break;
case VT_PAREN_CHUNK:
{
alt56=28;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("321:1: fact_expression returns [BaseDescr descr] : ( ^( VT_FACT pt= pattern_type (fe= fact_expression )* ) | ^( VT_FACT_BINDING label= VT_LABEL fact= fact_expression ) | ^(start= VT_FACT_OR left= fact_expression right= fact_expression ) | ^( VT_FIELD field= field_element (fe= fact_expression )? ) | ^( VT_BIND_FIELD label= VT_LABEL fe= fact_expression ) | ^( VK_EVAL pc= VT_PAREN_CHUNK ) | ^(op= EQUAL fe= fact_expression ) | ^(op= NOT_EQUAL fe= fact_expression ) | ^(op= GREATER fe= fact_expression ) | ^(op= GREATER_EQUAL fe= fact_expression ) | ^(op= LESS fe= fact_expression ) | ^(op= LESS_EQUAL fe= fact_expression ) | ^(op= VK_CONTAINS (not= VK_NOT )? fe= fact_expression ) | ^(op= VK_EXCLUDES (not= VK_NOT )? fe= fact_expression ) | ^(op= VK_MATCHES (not= VK_NOT )? fe= fact_expression ) | ^(op= VK_SOUNDSLIKE (not= VK_NOT )? fe= fact_expression ) | ^(op= VK_MEMBEROF (not= VK_NOT )? fe= fact_expression ) | ^(op= ID (not= VK_NOT )? (param= VT_SQUARE_CHUNK )? fe= fact_expression ) | ^( VK_IN (not= VK_NOT )? (fe= fact_expression )+ ) | ^( DOUBLE_PIPE left= fact_expression right= fact_expression ) | ^( DOUBLE_AMPER left= fact_expression right= fact_expression ) | ^( VT_ACCESSOR_PATH (ae= accessor_element )+ ) | s= STRING | i= INT | f= FLOAT | b= BOOL | n= NULL | pc= VT_PAREN_CHUNK );",56,0,input);
throw nvae;
}
switch (alt56) {
case 1:
{
match(input,VT_FACT,FOLLOW_VT_FACT_in_fact_expression1692);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_pattern_type_in_fact_expression1696);
pt=pattern_type();
_fsp--;
loop44: do {
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == VT_FACT || LA44_0 == VT_PAREN_CHUNK || (LA44_0 >= VT_FACT_BINDING && LA44_0 <= VT_ACCESSOR_PATH) || (LA44_0 >= VK_EVAL && LA44_0 <= VK_MEMBEROF) || LA44_0 == VK_IN || LA44_0 == ID || LA44_0 == STRING || (LA44_0 >= BOOL && LA44_0 <= DOUBLE_AMPER) || (LA44_0 >= EQUAL && LA44_0 <= NOT_EQUAL) || (LA44_0 >= FLOAT && LA44_0 <= NULL))) {
alt44=1;
}
switch (alt44) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1701);
fe=fact_expression();
_fsp--;
exprList.add(fe.descr);
}
break;
default :
break loop44;
}
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createPattern(pt,exprList);
}
break;
case 2:
{
match(input,VT_FACT_BINDING,FOLLOW_VT_FACT_BINDING_in_fact_expression1715);
match(input,Token.DOWN,null);
label=(DroolsTree)input.LT(1);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1719);
pushFollow(FOLLOW_fact_expression_in_fact_expression1723);
fact=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupPatternBiding(label,fact.descr);
}
break;
case 3:
{
start=(DroolsTree)input.LT(1);
match(input,VT_FACT_OR,FOLLOW_VT_FACT_OR_in_fact_expression1735);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1739);
left=fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression1743);
right=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.createFactOr(start,left.descr,right.descr);
}
break;
case 4:
{
match(input,VT_FIELD,FOLLOW_VT_FIELD_in_fact_expression1754);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_field_element_in_fact_expression1758);
field=field_element();
_fsp--;
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == VT_FACT || LA45_0 == VT_PAREN_CHUNK || (LA45_0 >= VT_FACT_BINDING && LA45_0 <= VT_ACCESSOR_PATH) || (LA45_0 >= VK_EVAL && LA45_0 <= VK_MEMBEROF) || LA45_0 == VK_IN || LA45_0 == ID || LA45_0 == STRING || (LA45_0 >= BOOL && LA45_0 <= DOUBLE_AMPER) || (LA45_0 >= EQUAL && LA45_0 <= NOT_EQUAL) || (LA45_0 >= FLOAT && LA45_0 <= NULL))) {
alt45=1;
}
switch (alt45) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1762);
fe=fact_expression();
_fsp--;
}
break;
}
match(input,Token.UP,null);
if (null != fe) {
retval.descr=factory.setupFieldConstraint(field,fe.descr);
}
 else {
retval.descr=factory.setupFieldConstraint(field,null);
}
}
break;
case 5:
{
match(input,VT_BIND_FIELD,FOLLOW_VT_BIND_FIELD_in_fact_expression1773);
match(input,Token.DOWN,null);
label=(DroolsTree)input.LT(1);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1777);
pushFollow(FOLLOW_fact_expression_in_fact_expression1781);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.createFieldBinding(label,fe.descr);
}
break;
case 6:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_fact_expression1792);
match(input,Token.DOWN,null);
pc=(DroolsTree)input.LT(1);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression1796);
match(input,Token.UP,null);
retval.descr=factory.createPredicate(pc);
}
break;
case 7:
{
op=(DroolsTree)input.LT(1);
match(input,EQUAL,FOLLOW_EQUAL_in_fact_expression1809);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1813);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,fe.descr);
}
break;
case 8:
{
op=(DroolsTree)input.LT(1);
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_fact_expression1825);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1829);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,fe.descr);
}
break;
case 9:
{
op=(DroolsTree)input.LT(1);
match(input,GREATER,FOLLOW_GREATER_in_fact_expression1841);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1845);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,fe.descr);
}
break;
case 10:
{
op=(DroolsTree)input.LT(1);
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_fact_expression1857);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1861);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,fe.descr);
}
break;
case 11:
{
op=(DroolsTree)input.LT(1);
match(input,LESS,FOLLOW_LESS_in_fact_expression1873);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1877);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,fe.descr);
}
break;
case 12:
{
op=(DroolsTree)input.LT(1);
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_fact_expression1889);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1893);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,fe.descr);
}
break;
case 13:
{
op=(DroolsTree)input.LT(1);
match(input,VK_CONTAINS,FOLLOW_VK_CONTAINS_in_fact_expression1905);
match(input,Token.DOWN,null);
int alt46=2;
int LA46_0=input.LA(1);
if ((LA46_0 == VK_NOT)) {
alt46=1;
}
switch (alt46) {
case 1:
{
not=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1909);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1914);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,fe.descr);
}
break;
case 14:
{
op=(DroolsTree)input.LT(1);
match(input,VK_EXCLUDES,FOLLOW_VK_EXCLUDES_in_fact_expression1926);
match(input,Token.DOWN,null);
int alt47=2;
int LA47_0=input.LA(1);
if ((LA47_0 == VK_NOT)) {
alt47=1;
}
switch (alt47) {
case 1:
{
not=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1930);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1935);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,fe.descr);
}
break;
case 15:
{
op=(DroolsTree)input.LT(1);
match(input,VK_MATCHES,FOLLOW_VK_MATCHES_in_fact_expression1947);
match(input,Token.DOWN,null);
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == VK_NOT)) {
alt48=1;
}
switch (alt48) {
case 1:
{
not=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1951);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1956);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,fe.descr);
}
break;
case 16:
{
op=(DroolsTree)input.LT(1);
match(input,VK_SOUNDSLIKE,FOLLOW_VK_SOUNDSLIKE_in_fact_expression1968);
match(input,Token.DOWN,null);
int alt49=2;
int LA49_0=input.LA(1);
if ((LA49_0 == VK_NOT)) {
alt49=1;
}
switch (alt49) {
case 1:
{
not=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1972);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1977);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,fe.descr);
}
break;
case 17:
{
op=(DroolsTree)input.LT(1);
match(input,VK_MEMBEROF,FOLLOW_VK_MEMBEROF_in_fact_expression1989);
match(input,Token.DOWN,null);
int alt50=2;
int LA50_0=input.LA(1);
if ((LA50_0 == VK_NOT)) {
alt50=1;
}
switch (alt50) {
case 1:
{
not=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1993);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1998);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,fe.descr);
}
break;
case 18:
{
op=(DroolsTree)input.LT(1);
match(input,ID,FOLLOW_ID_in_fact_expression2010);
match(input,Token.DOWN,null);
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == VK_NOT)) {
alt51=1;
}
switch (alt51) {
case 1:
{
not=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression2014);
}
break;
}
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == VT_SQUARE_CHUNK)) {
alt52=1;
}
switch (alt52) {
case 1:
{
param=(DroolsTree)input.LT(1);
match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression2019);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression2024);
fe=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,fe.descr,param);
}
break;
case 19:
{
match(input,VK_IN,FOLLOW_VK_IN_in_fact_expression2035);
match(input,Token.DOWN,null);
int alt53=2;
int LA53_0=input.LA(1);
if ((LA53_0 == VK_NOT)) {
alt53=1;
}
switch (alt53) {
case 1:
{
not=(DroolsTree)input.LT(1);
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression2039);
}
break;
}
int cnt54=0;
loop54: do {
int alt54=2;
int LA54_0=input.LA(1);
if ((LA54_0 == VT_FACT || LA54_0 == VT_PAREN_CHUNK || (LA54_0 >= VT_FACT_BINDING && LA54_0 <= VT_ACCESSOR_PATH) || (LA54_0 >= VK_EVAL && LA54_0 <= VK_MEMBEROF) || LA54_0 == VK_IN || LA54_0 == ID || LA54_0 == STRING || (LA54_0 >= BOOL && LA54_0 <= DOUBLE_AMPER) || (LA54_0 >= EQUAL && LA54_0 <= NOT_EQUAL) || (LA54_0 >= FLOAT && LA54_0 <= NULL))) {
alt54=1;
}
switch (alt54) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression2045);
fe=fact_expression();
_fsp--;
exprList.add(fe.descr);
}
break;
default :
if (cnt54 >= 1) break loop54;
EarlyExitException eee=new EarlyExitException(54,input);
throw eee;
}
cnt54++;
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createRestrictionConnective(not,exprList);
}
break;
case 20:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_expression2060);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression2064);
left=fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression2068);
right=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.createOrRestrictionConnective(left.descr,right.descr);
}
break;
case 21:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_fact_expression2078);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression2082);
left=fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression2086);
right=fact_expression();
_fsp--;
match(input,Token.UP,null);
retval.descr=factory.createAndRestrictionConnective(left.descr,right.descr);
}
break;
case 22:
{
match(input,VT_ACCESSOR_PATH,FOLLOW_VT_ACCESSOR_PATH_in_fact_expression2097);
match(input,Token.DOWN,null);
int cnt55=0;
loop55: do {
int alt55=2;
int LA55_0=input.LA(1);
if ((LA55_0 == VT_ACCESSOR_ELEMENT)) {
alt55=1;
}
switch (alt55) {
case 1:
{
pushFollow(FOLLOW_accessor_element_in_fact_expression2102);
ae=accessor_element();
_fsp--;
exprList.add(ae);
}
break;
default :
if (cnt55 >= 1) break loop55;
EarlyExitException eee=new EarlyExitException(55,input);
throw eee;
}
cnt55++;
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createAccessorPath(exprList);
}
break;
case 23:
{
s=(DroolsTree)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_fact_expression2117);
retval.descr=factory.createStringLiteralRestriction(s);
}
break;
case 24:
{
i=(DroolsTree)input.LT(1);
match(input,INT,FOLLOW_INT_in_fact_expression2127);
retval.descr=factory.createIntLiteralRestriction(i);
}
break;
case 25:
{
f=(DroolsTree)input.LT(1);
match(input,FLOAT,FOLLOW_FLOAT_in_fact_expression2137);
retval.descr=factory.createFloatLiteralRestriction(f);
}
break;
case 26:
{
b=(DroolsTree)input.LT(1);
match(input,BOOL,FOLLOW_BOOL_in_fact_expression2147);
retval.descr=factory.createBoolLiteralRestriction(b);
}
break;
case 27:
{
n=(DroolsTree)input.LT(1);
match(input,NULL,FOLLOW_NULL_in_fact_expression2157);
retval.descr=factory.createNullLiteralRestriction(n);
}
break;
case 28:
{
pc=(DroolsTree)input.LT(1);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression2167);
retval.descr=factory.createReturnValue(pc);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
