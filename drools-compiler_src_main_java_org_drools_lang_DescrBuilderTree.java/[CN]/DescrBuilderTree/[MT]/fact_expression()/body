{
  DescrBuilderTree.fact_expression_return retval=new DescrBuilderTree.fact_expression_return();
  retval.start=input.LT(1);
  DroolsTree label=null;
  DroolsTree start=null;
  DroolsTree pc=null;
  DroolsTree op=null;
  DroolsTree not=null;
  DroolsTree param=null;
  DroolsTree s=null;
  DroolsTree m=null;
  DroolsTree i=null;
  DroolsTree h=null;
  DroolsTree f=null;
  DroolsTree b=null;
  DroolsTree n=null;
  BaseDescr pt=null;
  DescrBuilderTree.fact_expression_return fe=null;
  DescrBuilderTree.fact_expression_return fact=null;
  DescrBuilderTree.fact_expression_return left=null;
  DescrBuilderTree.fact_expression_return right=null;
  FieldConstraintDescr field=null;
  BaseDescr ae=null;
  List<BaseDescr> exprList=new LinkedList<BaseDescr>();
  try {
    int alt59=22;
switch (input.LA(1)) {
case VT_FACT:
{
        alt59=1;
      }
    break;
case VT_FACT_BINDING:
{
    alt59=2;
  }
break;
case VT_FACT_OR:
{
alt59=3;
}
break;
case VT_FIELD:
{
alt59=4;
}
break;
case VT_BIND_FIELD:
{
alt59=5;
}
break;
case VK_EVAL:
{
alt59=6;
}
break;
case EQUALS:
{
alt59=7;
}
break;
case NOT_EQUALS:
{
alt59=8;
}
break;
case GREATER:
{
alt59=9;
}
break;
case GREATER_EQUALS:
{
alt59=10;
}
break;
case LESS:
{
alt59=11;
}
break;
case LESS_EQUALS:
{
alt59=12;
}
break;
case VK_OPERATOR:
{
alt59=13;
}
break;
case VK_IN:
{
alt59=14;
}
break;
case DOUBLE_PIPE:
{
alt59=15;
}
break;
case DOUBLE_AMPER:
{
alt59=16;
}
break;
case VT_ACCESSOR_PATH:
{
alt59=17;
}
break;
case STRING:
{
alt59=18;
}
break;
case SIGNED_DECIMAL:
case SIGNED_HEX:
case SIGNED_FLOAT:
case DECIMAL:
case PLUS:
case MINUS:
case HEX:
case FLOAT:
{
alt59=19;
}
break;
case BOOL:
{
alt59=20;
}
break;
case NULL:
{
alt59=21;
}
break;
case VT_PAREN_CHUNK:
{
alt59=22;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",59,0,input);
throw nvae;
}
switch (alt59) {
case 1:
{
match(input,VT_FACT,FOLLOW_VT_FACT_in_fact_expression1730);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_pattern_type_in_fact_expression1734);
pt=pattern_type();
state._fsp--;
loop47: do {
int alt47=2;
int LA47_0=input.LA(1);
if ((LA47_0 == VT_FACT || LA47_0 == VT_PAREN_CHUNK || (LA47_0 >= VT_FACT_BINDING && LA47_0 <= VT_ACCESSOR_PATH) || LA47_0 == VK_EVAL || LA47_0 == VK_IN || LA47_0 == VK_OPERATOR || (LA47_0 >= SIGNED_DECIMAL && LA47_0 <= SIGNED_FLOAT) || LA47_0 == STRING || LA47_0 == BOOL || LA47_0 == DECIMAL || (LA47_0 >= DOUBLE_PIPE && LA47_0 <= DOUBLE_AMPER) || (LA47_0 >= EQUALS && LA47_0 <= NOT_EQUALS) || (LA47_0 >= NULL && LA47_0 <= FLOAT))) {
alt47=1;
}
switch (alt47) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1739);
fe=fact_expression();
state._fsp--;
exprList.add((fe != null ? fe.descr : null));
}
break;
default :
break loop47;
}
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createPattern(pt,exprList);
}
break;
case 2:
{
match(input,VT_FACT_BINDING,FOLLOW_VT_FACT_BINDING_in_fact_expression1753);
match(input,Token.DOWN,null);
label=(DroolsTree)match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1757);
pushFollow(FOLLOW_fact_expression_in_fact_expression1761);
fact=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupPatternBiding(label,(fact != null ? fact.descr : null));
}
break;
case 3:
{
start=(DroolsTree)match(input,VT_FACT_OR,FOLLOW_VT_FACT_OR_in_fact_expression1773);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1777);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression1781);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createFactOr(start,(left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 4:
{
match(input,VT_FIELD,FOLLOW_VT_FIELD_in_fact_expression1792);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_field_element_in_fact_expression1796);
field=field_element();
state._fsp--;
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == VT_FACT || LA48_0 == VT_PAREN_CHUNK || (LA48_0 >= VT_FACT_BINDING && LA48_0 <= VT_ACCESSOR_PATH) || LA48_0 == VK_EVAL || LA48_0 == VK_IN || LA48_0 == VK_OPERATOR || (LA48_0 >= SIGNED_DECIMAL && LA48_0 <= SIGNED_FLOAT) || LA48_0 == STRING || LA48_0 == BOOL || LA48_0 == DECIMAL || (LA48_0 >= DOUBLE_PIPE && LA48_0 <= DOUBLE_AMPER) || (LA48_0 >= EQUALS && LA48_0 <= NOT_EQUALS) || (LA48_0 >= NULL && LA48_0 <= FLOAT))) {
alt48=1;
}
switch (alt48) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1800);
fe=fact_expression();
state._fsp--;
}
break;
}
match(input,Token.UP,null);
if (null != fe) {
retval.descr=factory.setupFieldConstraint(field,(fe != null ? fe.descr : null));
}
 else {
retval.descr=factory.setupFieldConstraint(field,null);
}
}
break;
case 5:
{
match(input,VT_BIND_FIELD,FOLLOW_VT_BIND_FIELD_in_fact_expression1811);
match(input,Token.DOWN,null);
label=(DroolsTree)match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1815);
pushFollow(FOLLOW_fact_expression_in_fact_expression1819);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createFieldBinding(label,(fe != null ? fe.descr : null));
}
break;
case 6:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_fact_expression1830);
match(input,Token.DOWN,null);
pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression1834);
match(input,Token.UP,null);
retval.descr=factory.createPredicate(pc);
}
break;
case 7:
{
op=(DroolsTree)match(input,EQUALS,FOLLOW_EQUALS_in_fact_expression1847);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1851);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 8:
{
op=(DroolsTree)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_fact_expression1863);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1867);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 9:
{
op=(DroolsTree)match(input,GREATER,FOLLOW_GREATER_in_fact_expression1879);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1883);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 10:
{
op=(DroolsTree)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_fact_expression1895);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1899);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 11:
{
op=(DroolsTree)match(input,LESS,FOLLOW_LESS_in_fact_expression1911);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1915);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 12:
{
op=(DroolsTree)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_fact_expression1927);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1931);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 13:
{
op=(DroolsTree)match(input,VK_OPERATOR,FOLLOW_VK_OPERATOR_in_fact_expression1943);
match(input,Token.DOWN,null);
int alt49=2;
int LA49_0=input.LA(1);
if ((LA49_0 == VK_NOT)) {
alt49=1;
}
switch (alt49) {
case 1:
{
not=(DroolsTree)match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1947);
}
break;
}
int alt50=2;
int LA50_0=input.LA(1);
if ((LA50_0 == VT_SQUARE_CHUNK)) {
alt50=1;
}
switch (alt50) {
case 1:
{
param=(DroolsTree)match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression1952);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1957);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,(fe != null ? fe.descr : null),param);
}
break;
case 14:
{
match(input,VK_IN,FOLLOW_VK_IN_in_fact_expression1968);
match(input,Token.DOWN,null);
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == VK_NOT)) {
alt51=1;
}
switch (alt51) {
case 1:
{
not=(DroolsTree)match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1972);
}
break;
}
int cnt52=0;
loop52: do {
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == VT_FACT || LA52_0 == VT_PAREN_CHUNK || (LA52_0 >= VT_FACT_BINDING && LA52_0 <= VT_ACCESSOR_PATH) || LA52_0 == VK_EVAL || LA52_0 == VK_IN || LA52_0 == VK_OPERATOR || (LA52_0 >= SIGNED_DECIMAL && LA52_0 <= SIGNED_FLOAT) || LA52_0 == STRING || LA52_0 == BOOL || LA52_0 == DECIMAL || (LA52_0 >= DOUBLE_PIPE && LA52_0 <= DOUBLE_AMPER) || (LA52_0 >= EQUALS && LA52_0 <= NOT_EQUALS) || (LA52_0 >= NULL && LA52_0 <= FLOAT))) {
alt52=1;
}
switch (alt52) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1978);
fe=fact_expression();
state._fsp--;
exprList.add((fe != null ? fe.descr : null));
}
break;
default :
if (cnt52 >= 1) break loop52;
EarlyExitException eee=new EarlyExitException(52,input);
throw eee;
}
cnt52++;
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createRestrictionConnective(not,exprList);
}
break;
case 15:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_expression1993);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1997);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression2001);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createOrRestrictionConnective((left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 16:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_fact_expression2011);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression2015);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression2019);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createAndRestrictionConnective((left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 17:
{
match(input,VT_ACCESSOR_PATH,FOLLOW_VT_ACCESSOR_PATH_in_fact_expression2030);
match(input,Token.DOWN,null);
int cnt53=0;
loop53: do {
int alt53=2;
int LA53_0=input.LA(1);
if ((LA53_0 == VT_ACCESSOR_ELEMENT)) {
alt53=1;
}
switch (alt53) {
case 1:
{
pushFollow(FOLLOW_accessor_element_in_fact_expression2035);
ae=accessor_element();
state._fsp--;
exprList.add(ae);
}
break;
default :
if (cnt53 >= 1) break loop53;
EarlyExitException eee=new EarlyExitException(53,input);
throw eee;
}
cnt53++;
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createAccessorPath(exprList);
}
break;
case 18:
{
s=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_fact_expression2050);
retval.descr=factory.createStringLiteralRestriction(s);
}
break;
case 19:
{
int alt54=3;
int LA54_0=input.LA(1);
if ((LA54_0 == PLUS)) {
alt54=1;
}
 else if ((LA54_0 == MINUS)) {
alt54=2;
}
switch (alt54) {
case 1:
{
match(input,PLUS,FOLLOW_PLUS_in_fact_expression2059);
}
break;
case 2:
{
m=(DroolsTree)match(input,MINUS,FOLLOW_MINUS_in_fact_expression2063);
}
break;
}
int alt58=3;
switch (input.LA(1)) {
case SIGNED_DECIMAL:
case DECIMAL:
{
alt58=1;
}
break;
case SIGNED_HEX:
case HEX:
{
alt58=2;
}
break;
case SIGNED_FLOAT:
case FLOAT:
{
alt58=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",58,0,input);
throw nvae;
}
switch (alt58) {
case 1:
{
int alt55=2;
int LA55_0=input.LA(1);
if ((LA55_0 == DECIMAL)) {
alt55=1;
}
 else if ((LA55_0 == SIGNED_DECIMAL)) {
alt55=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",55,0,input);
throw nvae;
}
switch (alt55) {
case 1:
{
i=(DroolsTree)match(input,DECIMAL,FOLLOW_DECIMAL_in_fact_expression2082);
}
break;
case 2:
{
i=(DroolsTree)match(input,SIGNED_DECIMAL,FOLLOW_SIGNED_DECIMAL_in_fact_expression2086);
}
break;
}
retval.descr=factory.createIntLiteralRestriction(i,m != null);
}
break;
case 2:
{
int alt56=2;
int LA56_0=input.LA(1);
if ((LA56_0 == HEX)) {
alt56=1;
}
 else if ((LA56_0 == SIGNED_HEX)) {
alt56=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",56,0,input);
throw nvae;
}
switch (alt56) {
case 1:
{
h=(DroolsTree)match(input,HEX,FOLLOW_HEX_in_fact_expression2098);
}
break;
case 2:
{
h=(DroolsTree)match(input,SIGNED_HEX,FOLLOW_SIGNED_HEX_in_fact_expression2102);
}
break;
}
retval.descr=factory.createIntLiteralRestriction(h,m != null);
}
break;
case 3:
{
int alt57=2;
int LA57_0=input.LA(1);
if ((LA57_0 == FLOAT)) {
alt57=1;
}
 else if ((LA57_0 == SIGNED_FLOAT)) {
alt57=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",57,0,input);
throw nvae;
}
switch (alt57) {
case 1:
{
f=(DroolsTree)match(input,FLOAT,FOLLOW_FLOAT_in_fact_expression2116);
}
break;
case 2:
{
f=(DroolsTree)match(input,SIGNED_FLOAT,FOLLOW_SIGNED_FLOAT_in_fact_expression2120);
}
break;
}
retval.descr=factory.createFloatLiteralRestriction(f,m != null);
}
break;
}
}
break;
case 20:
{
b=(DroolsTree)match(input,BOOL,FOLLOW_BOOL_in_fact_expression2136);
retval.descr=factory.createBoolLiteralRestriction(b);
}
break;
case 21:
{
n=(DroolsTree)match(input,NULL,FOLLOW_NULL_in_fact_expression2146);
retval.descr=factory.createNullLiteralRestriction(n);
}
break;
case 22:
{
pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression2156);
retval.descr=factory.createReturnValue(pc);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
