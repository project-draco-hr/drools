{
  DescrBuilderTree.fact_expression_return retval=new DescrBuilderTree.fact_expression_return();
  retval.start=input.LT(1);
  DroolsTree label=null;
  DroolsTree start=null;
  DroolsTree pc=null;
  DroolsTree op=null;
  DroolsTree not=null;
  DroolsTree param=null;
  DroolsTree s=null;
  DroolsTree m=null;
  DroolsTree i=null;
  DroolsTree h=null;
  DroolsTree f=null;
  DroolsTree b=null;
  DroolsTree n=null;
  BaseDescr pt=null;
  DescrBuilderTree.fact_expression_return fe=null;
  DescrBuilderTree.fact_expression_return fact=null;
  DescrBuilderTree.fact_expression_return left=null;
  DescrBuilderTree.fact_expression_return right=null;
  FieldConstraintDescr field=null;
  BaseDescr ae=null;
  List<BaseDescr> exprList=new LinkedList<BaseDescr>();
  try {
    int alt55=22;
switch (input.LA(1)) {
case VT_FACT:
{
        alt55=1;
      }
    break;
case VT_FACT_BINDING:
{
    alt55=2;
  }
break;
case VT_FACT_OR:
{
alt55=3;
}
break;
case VT_FIELD:
{
alt55=4;
}
break;
case VT_BIND_FIELD:
{
alt55=5;
}
break;
case VK_EVAL:
{
alt55=6;
}
break;
case EQUALS:
{
alt55=7;
}
break;
case NOT_EQUALS:
{
alt55=8;
}
break;
case GREATER:
{
alt55=9;
}
break;
case GREATER_EQUALS:
{
alt55=10;
}
break;
case LESS:
{
alt55=11;
}
break;
case LESS_EQUALS:
{
alt55=12;
}
break;
case VK_OPERATOR:
{
alt55=13;
}
break;
case VK_IN:
{
alt55=14;
}
break;
case DOUBLE_PIPE:
{
alt55=15;
}
break;
case DOUBLE_AMPER:
{
alt55=16;
}
break;
case VT_ACCESSOR_PATH:
{
alt55=17;
}
break;
case STRING:
{
alt55=18;
}
break;
case SIGNED_DECIMAL:
case SIGNED_HEX:
case SIGNED_FLOAT:
case PLUS:
case MINUS:
case DECIMAL:
case HEX:
case FLOAT:
{
alt55=19;
}
break;
case BOOL:
{
alt55=20;
}
break;
case NULL:
{
alt55=21;
}
break;
case VT_PAREN_CHUNK:
{
alt55=22;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",55,0,input);
throw nvae;
}
switch (alt55) {
case 1:
{
match(input,VT_FACT,FOLLOW_VT_FACT_in_fact_expression1624);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_pattern_type_in_fact_expression1628);
pt=pattern_type();
state._fsp--;
loop43: do {
int alt43=2;
int LA43_0=input.LA(1);
if ((LA43_0 == VT_FACT || LA43_0 == VT_PAREN_CHUNK || (LA43_0 >= VT_FACT_BINDING && LA43_0 <= VT_ACCESSOR_PATH) || LA43_0 == VK_EVAL || LA43_0 == VK_IN || LA43_0 == VK_OPERATOR || (LA43_0 >= SIGNED_DECIMAL && LA43_0 <= SIGNED_FLOAT) || LA43_0 == STRING || LA43_0 == BOOL || (LA43_0 >= DOUBLE_PIPE && LA43_0 <= DOUBLE_AMPER) || (LA43_0 >= EQUALS && LA43_0 <= FLOAT))) {
alt43=1;
}
switch (alt43) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1633);
fe=fact_expression();
state._fsp--;
exprList.add((fe != null ? fe.descr : null));
}
break;
default :
break loop43;
}
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createPattern(pt,exprList);
}
break;
case 2:
{
match(input,VT_FACT_BINDING,FOLLOW_VT_FACT_BINDING_in_fact_expression1647);
match(input,Token.DOWN,null);
label=(DroolsTree)match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1651);
pushFollow(FOLLOW_fact_expression_in_fact_expression1655);
fact=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupPatternBiding(label,(fact != null ? fact.descr : null));
}
break;
case 3:
{
start=(DroolsTree)match(input,VT_FACT_OR,FOLLOW_VT_FACT_OR_in_fact_expression1667);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1671);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression1675);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createFactOr(start,(left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 4:
{
match(input,VT_FIELD,FOLLOW_VT_FIELD_in_fact_expression1686);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_field_element_in_fact_expression1690);
field=field_element();
state._fsp--;
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == VT_FACT || LA44_0 == VT_PAREN_CHUNK || (LA44_0 >= VT_FACT_BINDING && LA44_0 <= VT_ACCESSOR_PATH) || LA44_0 == VK_EVAL || LA44_0 == VK_IN || LA44_0 == VK_OPERATOR || (LA44_0 >= SIGNED_DECIMAL && LA44_0 <= SIGNED_FLOAT) || LA44_0 == STRING || LA44_0 == BOOL || (LA44_0 >= DOUBLE_PIPE && LA44_0 <= DOUBLE_AMPER) || (LA44_0 >= EQUALS && LA44_0 <= FLOAT))) {
alt44=1;
}
switch (alt44) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1694);
fe=fact_expression();
state._fsp--;
}
break;
}
match(input,Token.UP,null);
if (null != fe) {
retval.descr=factory.setupFieldConstraint(field,(fe != null ? fe.descr : null));
}
 else {
retval.descr=factory.setupFieldConstraint(field,null);
}
}
break;
case 5:
{
match(input,VT_BIND_FIELD,FOLLOW_VT_BIND_FIELD_in_fact_expression1705);
match(input,Token.DOWN,null);
label=(DroolsTree)match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1709);
pushFollow(FOLLOW_fact_expression_in_fact_expression1713);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createFieldBinding(label,(fe != null ? fe.descr : null));
}
break;
case 6:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_fact_expression1724);
match(input,Token.DOWN,null);
pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression1728);
match(input,Token.UP,null);
retval.descr=factory.createPredicate(pc);
}
break;
case 7:
{
op=(DroolsTree)match(input,EQUALS,FOLLOW_EQUALS_in_fact_expression1741);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1745);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 8:
{
op=(DroolsTree)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_fact_expression1757);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1761);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 9:
{
op=(DroolsTree)match(input,GREATER,FOLLOW_GREATER_in_fact_expression1773);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1777);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 10:
{
op=(DroolsTree)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_fact_expression1789);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1793);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 11:
{
op=(DroolsTree)match(input,LESS,FOLLOW_LESS_in_fact_expression1805);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1809);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 12:
{
op=(DroolsTree)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_fact_expression1821);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1825);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 13:
{
op=(DroolsTree)match(input,VK_OPERATOR,FOLLOW_VK_OPERATOR_in_fact_expression1837);
match(input,Token.DOWN,null);
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == VK_NOT)) {
alt45=1;
}
switch (alt45) {
case 1:
{
not=(DroolsTree)match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1841);
}
break;
}
int alt46=2;
int LA46_0=input.LA(1);
if ((LA46_0 == VT_SQUARE_CHUNK)) {
alt46=1;
}
switch (alt46) {
case 1:
{
param=(DroolsTree)match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression1846);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1851);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,(fe != null ? fe.descr : null),param);
}
break;
case 14:
{
match(input,VK_IN,FOLLOW_VK_IN_in_fact_expression1862);
match(input,Token.DOWN,null);
int alt47=2;
int LA47_0=input.LA(1);
if ((LA47_0 == VK_NOT)) {
alt47=1;
}
switch (alt47) {
case 1:
{
not=(DroolsTree)match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1866);
}
break;
}
int cnt48=0;
loop48: do {
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == VT_FACT || LA48_0 == VT_PAREN_CHUNK || (LA48_0 >= VT_FACT_BINDING && LA48_0 <= VT_ACCESSOR_PATH) || LA48_0 == VK_EVAL || LA48_0 == VK_IN || LA48_0 == VK_OPERATOR || (LA48_0 >= SIGNED_DECIMAL && LA48_0 <= SIGNED_FLOAT) || LA48_0 == STRING || LA48_0 == BOOL || (LA48_0 >= DOUBLE_PIPE && LA48_0 <= DOUBLE_AMPER) || (LA48_0 >= EQUALS && LA48_0 <= FLOAT))) {
alt48=1;
}
switch (alt48) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1872);
fe=fact_expression();
state._fsp--;
exprList.add((fe != null ? fe.descr : null));
}
break;
default :
if (cnt48 >= 1) break loop48;
EarlyExitException eee=new EarlyExitException(48,input);
throw eee;
}
cnt48++;
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createRestrictionConnective(not,exprList);
}
break;
case 15:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_expression1887);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1891);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression1895);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createOrRestrictionConnective((left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 16:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_fact_expression1905);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1909);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression1913);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createAndRestrictionConnective((left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 17:
{
match(input,VT_ACCESSOR_PATH,FOLLOW_VT_ACCESSOR_PATH_in_fact_expression1924);
match(input,Token.DOWN,null);
int cnt49=0;
loop49: do {
int alt49=2;
int LA49_0=input.LA(1);
if ((LA49_0 == VT_ACCESSOR_ELEMENT)) {
alt49=1;
}
switch (alt49) {
case 1:
{
pushFollow(FOLLOW_accessor_element_in_fact_expression1929);
ae=accessor_element();
state._fsp--;
exprList.add(ae);
}
break;
default :
if (cnt49 >= 1) break loop49;
EarlyExitException eee=new EarlyExitException(49,input);
throw eee;
}
cnt49++;
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createAccessorPath(exprList);
}
break;
case 18:
{
s=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_fact_expression1944);
retval.descr=factory.createStringLiteralRestriction(s);
}
break;
case 19:
{
int alt50=3;
int LA50_0=input.LA(1);
if ((LA50_0 == PLUS)) {
alt50=1;
}
 else if ((LA50_0 == MINUS)) {
alt50=2;
}
switch (alt50) {
case 1:
{
match(input,PLUS,FOLLOW_PLUS_in_fact_expression1953);
}
break;
case 2:
{
m=(DroolsTree)match(input,MINUS,FOLLOW_MINUS_in_fact_expression1957);
}
break;
}
int alt54=3;
switch (input.LA(1)) {
case SIGNED_DECIMAL:
case DECIMAL:
{
alt54=1;
}
break;
case SIGNED_HEX:
case HEX:
{
alt54=2;
}
break;
case SIGNED_FLOAT:
case FLOAT:
{
alt54=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",54,0,input);
throw nvae;
}
switch (alt54) {
case 1:
{
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == DECIMAL)) {
alt51=1;
}
 else if ((LA51_0 == SIGNED_DECIMAL)) {
alt51=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",51,0,input);
throw nvae;
}
switch (alt51) {
case 1:
{
i=(DroolsTree)match(input,DECIMAL,FOLLOW_DECIMAL_in_fact_expression1976);
}
break;
case 2:
{
i=(DroolsTree)match(input,SIGNED_DECIMAL,FOLLOW_SIGNED_DECIMAL_in_fact_expression1980);
}
break;
}
retval.descr=factory.createIntLiteralRestriction(i,m != null);
}
break;
case 2:
{
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == HEX)) {
alt52=1;
}
 else if ((LA52_0 == SIGNED_HEX)) {
alt52=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",52,0,input);
throw nvae;
}
switch (alt52) {
case 1:
{
h=(DroolsTree)match(input,HEX,FOLLOW_HEX_in_fact_expression1992);
}
break;
case 2:
{
h=(DroolsTree)match(input,SIGNED_HEX,FOLLOW_SIGNED_HEX_in_fact_expression1996);
}
break;
}
retval.descr=factory.createIntLiteralRestriction(h,m != null);
}
break;
case 3:
{
int alt53=2;
int LA53_0=input.LA(1);
if ((LA53_0 == FLOAT)) {
alt53=1;
}
 else if ((LA53_0 == SIGNED_FLOAT)) {
alt53=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",53,0,input);
throw nvae;
}
switch (alt53) {
case 1:
{
f=(DroolsTree)match(input,FLOAT,FOLLOW_FLOAT_in_fact_expression2010);
}
break;
case 2:
{
f=(DroolsTree)match(input,SIGNED_FLOAT,FOLLOW_SIGNED_FLOAT_in_fact_expression2014);
}
break;
}
retval.descr=factory.createFloatLiteralRestriction(f,m != null);
}
break;
}
}
break;
case 20:
{
b=(DroolsTree)match(input,BOOL,FOLLOW_BOOL_in_fact_expression2030);
retval.descr=factory.createBoolLiteralRestriction(b);
}
break;
case 21:
{
n=(DroolsTree)match(input,NULL,FOLLOW_NULL_in_fact_expression2040);
retval.descr=factory.createNullLiteralRestriction(n);
}
break;
case 22:
{
pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression2050);
retval.descr=factory.createReturnValue(pc);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
