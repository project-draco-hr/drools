{
  DescrBuilderTree.fact_expression_return retval=new DescrBuilderTree.fact_expression_return();
  retval.start=input.LT(1);
  DroolsTree label=null;
  DroolsTree start=null;
  DroolsTree pc=null;
  DroolsTree op=null;
  DroolsTree not=null;
  DroolsTree param=null;
  DroolsTree s=null;
  DroolsTree i=null;
  DroolsTree f=null;
  DroolsTree b=null;
  DroolsTree n=null;
  BaseDescr pt=null;
  DescrBuilderTree.fact_expression_return fe=null;
  DescrBuilderTree.fact_expression_return fact=null;
  DescrBuilderTree.fact_expression_return left=null;
  DescrBuilderTree.fact_expression_return right=null;
  FieldConstraintDescr field=null;
  BaseDescr ae=null;
  List<BaseDescr> exprList=new LinkedList<BaseDescr>();
  try {
    int alt53=23;
switch (input.LA(1)) {
case VT_FACT:
{
        alt53=1;
      }
    break;
case VT_FACT_BINDING:
{
    alt53=2;
  }
break;
case VT_FACT_OR:
{
alt53=3;
}
break;
case VT_FIELD:
{
alt53=4;
}
break;
case VT_BIND_FIELD:
{
alt53=5;
}
break;
case VK_EVAL:
{
alt53=6;
}
break;
case EQUAL:
{
alt53=7;
}
break;
case NOT_EQUAL:
{
alt53=8;
}
break;
case GREATER:
{
alt53=9;
}
break;
case GREATER_EQUAL:
{
alt53=10;
}
break;
case LESS:
{
alt53=11;
}
break;
case LESS_EQUAL:
{
alt53=12;
}
break;
case VK_OPERATOR:
{
alt53=13;
}
break;
case VK_IN:
{
alt53=14;
}
break;
case DOUBLE_PIPE:
{
alt53=15;
}
break;
case DOUBLE_AMPER:
{
alt53=16;
}
break;
case VT_ACCESSOR_PATH:
{
alt53=17;
}
break;
case STRING:
{
alt53=18;
}
break;
case INT:
{
alt53=19;
}
break;
case FLOAT:
{
alt53=20;
}
break;
case BOOL:
{
alt53=21;
}
break;
case NULL:
{
alt53=22;
}
break;
case VT_PAREN_CHUNK:
{
alt53=23;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",53,0,input);
throw nvae;
}
switch (alt53) {
case 1:
{
match(input,VT_FACT,FOLLOW_VT_FACT_in_fact_expression1699);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_pattern_type_in_fact_expression1703);
pt=pattern_type();
state._fsp--;
loop46: do {
int alt46=2;
int LA46_0=input.LA(1);
if ((LA46_0 == VT_FACT || LA46_0 == VT_PAREN_CHUNK || (LA46_0 >= VT_FACT_BINDING && LA46_0 <= VT_ACCESSOR_PATH) || LA46_0 == VK_EVAL || LA46_0 == VK_IN || LA46_0 == VK_OPERATOR || LA46_0 == STRING || (LA46_0 >= BOOL && LA46_0 <= DOUBLE_AMPER) || (LA46_0 >= EQUAL && LA46_0 <= NULL))) {
alt46=1;
}
switch (alt46) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1708);
fe=fact_expression();
state._fsp--;
exprList.add((fe != null ? fe.descr : null));
}
break;
default :
break loop46;
}
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createPattern(pt,exprList);
}
break;
case 2:
{
match(input,VT_FACT_BINDING,FOLLOW_VT_FACT_BINDING_in_fact_expression1722);
match(input,Token.DOWN,null);
label=(DroolsTree)match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1726);
pushFollow(FOLLOW_fact_expression_in_fact_expression1730);
fact=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupPatternBiding(label,(fact != null ? fact.descr : null));
}
break;
case 3:
{
start=(DroolsTree)match(input,VT_FACT_OR,FOLLOW_VT_FACT_OR_in_fact_expression1742);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1746);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression1750);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createFactOr(start,(left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 4:
{
match(input,VT_FIELD,FOLLOW_VT_FIELD_in_fact_expression1761);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_field_element_in_fact_expression1765);
field=field_element();
state._fsp--;
int alt47=2;
int LA47_0=input.LA(1);
if ((LA47_0 == VT_FACT || LA47_0 == VT_PAREN_CHUNK || (LA47_0 >= VT_FACT_BINDING && LA47_0 <= VT_ACCESSOR_PATH) || LA47_0 == VK_EVAL || LA47_0 == VK_IN || LA47_0 == VK_OPERATOR || LA47_0 == STRING || (LA47_0 >= BOOL && LA47_0 <= DOUBLE_AMPER) || (LA47_0 >= EQUAL && LA47_0 <= NULL))) {
alt47=1;
}
switch (alt47) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1769);
fe=fact_expression();
state._fsp--;
}
break;
}
match(input,Token.UP,null);
if (null != fe) {
retval.descr=factory.setupFieldConstraint(field,(fe != null ? fe.descr : null));
}
 else {
retval.descr=factory.setupFieldConstraint(field,null);
}
}
break;
case 5:
{
match(input,VT_BIND_FIELD,FOLLOW_VT_BIND_FIELD_in_fact_expression1780);
match(input,Token.DOWN,null);
label=(DroolsTree)match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1784);
pushFollow(FOLLOW_fact_expression_in_fact_expression1788);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createFieldBinding(label,(fe != null ? fe.descr : null));
}
break;
case 6:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_fact_expression1799);
match(input,Token.DOWN,null);
pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression1803);
match(input,Token.UP,null);
retval.descr=factory.createPredicate(pc);
}
break;
case 7:
{
op=(DroolsTree)match(input,EQUAL,FOLLOW_EQUAL_in_fact_expression1816);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1820);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 8:
{
op=(DroolsTree)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_fact_expression1832);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1836);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 9:
{
op=(DroolsTree)match(input,GREATER,FOLLOW_GREATER_in_fact_expression1848);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1852);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 10:
{
op=(DroolsTree)match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_fact_expression1864);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1868);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 11:
{
op=(DroolsTree)match(input,LESS,FOLLOW_LESS_in_fact_expression1880);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1884);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 12:
{
op=(DroolsTree)match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_fact_expression1896);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1900);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,null,(fe != null ? fe.descr : null));
}
break;
case 13:
{
op=(DroolsTree)match(input,VK_OPERATOR,FOLLOW_VK_OPERATOR_in_fact_expression1912);
match(input,Token.DOWN,null);
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == VK_NOT)) {
alt48=1;
}
switch (alt48) {
case 1:
{
not=(DroolsTree)match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1916);
}
break;
}
int alt49=2;
int LA49_0=input.LA(1);
if ((LA49_0 == VT_SQUARE_CHUNK)) {
alt49=1;
}
switch (alt49) {
case 1:
{
param=(DroolsTree)match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression1921);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1926);
fe=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.setupRestriction(op,not,(fe != null ? fe.descr : null),param);
}
break;
case 14:
{
match(input,VK_IN,FOLLOW_VK_IN_in_fact_expression1937);
match(input,Token.DOWN,null);
int alt50=2;
int LA50_0=input.LA(1);
if ((LA50_0 == VK_NOT)) {
alt50=1;
}
switch (alt50) {
case 1:
{
not=(DroolsTree)match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1941);
}
break;
}
int cnt51=0;
loop51: do {
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == VT_FACT || LA51_0 == VT_PAREN_CHUNK || (LA51_0 >= VT_FACT_BINDING && LA51_0 <= VT_ACCESSOR_PATH) || LA51_0 == VK_EVAL || LA51_0 == VK_IN || LA51_0 == VK_OPERATOR || LA51_0 == STRING || (LA51_0 >= BOOL && LA51_0 <= DOUBLE_AMPER) || (LA51_0 >= EQUAL && LA51_0 <= NULL))) {
alt51=1;
}
switch (alt51) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1947);
fe=fact_expression();
state._fsp--;
exprList.add((fe != null ? fe.descr : null));
}
break;
default :
if (cnt51 >= 1) break loop51;
EarlyExitException eee=new EarlyExitException(51,input);
throw eee;
}
cnt51++;
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createRestrictionConnective(not,exprList);
}
break;
case 15:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_expression1962);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1966);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression1970);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createOrRestrictionConnective((left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 16:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_fact_expression1980);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1984);
left=fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression1988);
right=fact_expression();
state._fsp--;
match(input,Token.UP,null);
retval.descr=factory.createAndRestrictionConnective((left != null ? left.descr : null),(right != null ? right.descr : null));
}
break;
case 17:
{
match(input,VT_ACCESSOR_PATH,FOLLOW_VT_ACCESSOR_PATH_in_fact_expression1999);
match(input,Token.DOWN,null);
int cnt52=0;
loop52: do {
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == VT_ACCESSOR_ELEMENT)) {
alt52=1;
}
switch (alt52) {
case 1:
{
pushFollow(FOLLOW_accessor_element_in_fact_expression2004);
ae=accessor_element();
state._fsp--;
exprList.add(ae);
}
break;
default :
if (cnt52 >= 1) break loop52;
EarlyExitException eee=new EarlyExitException(52,input);
throw eee;
}
cnt52++;
}
 while (true);
match(input,Token.UP,null);
retval.descr=factory.createAccessorPath(exprList);
}
break;
case 18:
{
s=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_fact_expression2019);
retval.descr=factory.createStringLiteralRestriction(s);
}
break;
case 19:
{
i=(DroolsTree)match(input,INT,FOLLOW_INT_in_fact_expression2029);
retval.descr=factory.createIntLiteralRestriction(i);
}
break;
case 20:
{
f=(DroolsTree)match(input,FLOAT,FOLLOW_FLOAT_in_fact_expression2039);
retval.descr=factory.createFloatLiteralRestriction(f);
}
break;
case 21:
{
b=(DroolsTree)match(input,BOOL,FOLLOW_BOOL_in_fact_expression2049);
retval.descr=factory.createBoolLiteralRestriction(b);
}
break;
case 22:
{
n=(DroolsTree)match(input,NULL,FOLLOW_NULL_in_fact_expression2059);
retval.descr=factory.createNullLiteralRestriction(n);
}
break;
case 23:
{
pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression2069);
retval.descr=factory.createReturnValue(pc);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
