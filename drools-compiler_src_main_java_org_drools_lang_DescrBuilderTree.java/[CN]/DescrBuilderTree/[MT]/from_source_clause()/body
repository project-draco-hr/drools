{
  from_source_clause_stack.push(new from_source_clause_scope());
  DescrBuilderTree.from_source_clause_return retval=new DescrBuilderTree.from_source_clause_return();
  retval.start=input.LT(1);
  DroolsTree id=null;
  DroolsTree pc=null;
  try {
{
      match(input,VT_FROM_SOURCE,FOLLOW_VT_FROM_SOURCE_in_from_source_clause1530);
      match(input,Token.DOWN,null);
      id=(DroolsTree)match(input,ID,FOLLOW_ID_in_from_source_clause1534);
      int alt38=2;
      int LA38_0=input.LA(1);
      if ((LA38_0 == VT_PAREN_CHUNK)) {
        alt38=1;
      }
switch (alt38) {
case 1:
{
          pc=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_from_source_clause1538);
        }
      break;
  }
  ((from_source_clause_scope)from_source_clause_stack.peek()).accessorDescr=factory.createAccessor(id,pc);
  retval.retAccessorDescr=((from_source_clause_scope)from_source_clause_stack.peek()).accessorDescr;
  int alt39=2;
  int LA39_0=input.LA(1);
  if ((LA39_0 == VT_EXPRESSION_CHAIN)) {
    alt39=1;
  }
switch (alt39) {
case 1:
{
      pushFollow(FOLLOW_expression_chain_in_from_source_clause1547);
      expression_chain();
      state._fsp--;
    }
  break;
}
match(input,Token.UP,null);
retval.fromDescr=factory.createFromSource(factory.setupAccessorOffset(((from_source_clause_scope)from_source_clause_stack.peek()).accessorDescr));
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
from_source_clause_stack.pop();
}
return retval;
}
