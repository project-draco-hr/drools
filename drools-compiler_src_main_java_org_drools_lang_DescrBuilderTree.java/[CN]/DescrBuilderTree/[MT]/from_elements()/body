{
  from_elements_return retval=new from_elements_return();
  retval.start=input.LT(1);
  DroolsTree start=null;
  DroolsTree entryId=null;
  lhs_return dt=null;
  AccumulateDescr ret=null;
  from_source_clause_return fs=null;
  try {
    int alt34=4;
switch (input.LA(1)) {
case ACCUMULATE:
{
        alt34=1;
      }
    break;
case COLLECT:
{
    alt34=2;
  }
break;
case VK_ENTRY_POINT:
{
alt34=3;
}
break;
case VT_FROM_SOURCE:
{
alt34=4;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("245:1: from_elements returns [PatternSourceDescr patternSourceDescr] : ( ^(start= ACCUMULATE dt= lhs ret= accumulate_parts[$patternSourceDescr] ) | ^(start= COLLECT dt= lhs ) | ^(start= VK_ENTRY_POINT entryId= VT_ENTRYPOINT_ID ) | fs= from_source_clause );",34,0,input);
throw nvae;
}
switch (alt34) {
case 1:
{
start=(DroolsTree)input.LT(1);
match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_from_elements1287);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_from_elements1291);
dt=lhs();
_fsp--;
retval.patternSourceDescr=factory.createAccumulate(start,dt.baseDescr);
pushFollow(FOLLOW_accumulate_parts_in_from_elements1301);
ret=accumulate_parts(retval.patternSourceDescr);
_fsp--;
match(input,Token.UP,null);
retval.patternSourceDescr=ret;
}
break;
case 2:
{
start=(DroolsTree)input.LT(1);
match(input,COLLECT,FOLLOW_COLLECT_in_from_elements1314);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_from_elements1318);
dt=lhs();
_fsp--;
match(input,Token.UP,null);
retval.patternSourceDescr=factory.createCollect(start,dt.baseDescr);
}
break;
case 3:
{
start=(DroolsTree)input.LT(1);
match(input,VK_ENTRY_POINT,FOLLOW_VK_ENTRY_POINT_in_from_elements1330);
match(input,Token.DOWN,null);
entryId=(DroolsTree)input.LT(1);
match(input,VT_ENTRYPOINT_ID,FOLLOW_VT_ENTRYPOINT_ID_in_from_elements1334);
match(input,Token.UP,null);
retval.patternSourceDescr=factory.createEntryPoint(start,entryId);
}
break;
case 4:
{
pushFollow(FOLLOW_from_source_clause_in_from_elements1345);
fs=from_source_clause();
_fsp--;
retval.patternSourceDescr=fs.fromDescr;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
