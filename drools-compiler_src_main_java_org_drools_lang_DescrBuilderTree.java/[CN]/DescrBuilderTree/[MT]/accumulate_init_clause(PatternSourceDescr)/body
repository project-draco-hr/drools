{
  accumulate_init_clause_return retval=new accumulate_init_clause_return();
  retval.start=input.LT(1);
  DroolsTree start=null;
  DroolsTree pc1=null;
  DroolsTree pc2=null;
  DroolsTree pc3=null;
  accumulate_init_reverse_clause_return rev=null;
  try {
{
      match(input,VT_ACCUMULATE_INIT_CLAUSE,FOLLOW_VT_ACCUMULATE_INIT_CLAUSE_in_accumulate_init_clause1359);
      match(input,Token.DOWN,null);
      start=(DroolsTree)input.LT(1);
      match(input,VK_INIT,FOLLOW_VK_INIT_in_accumulate_init_clause1368);
      match(input,Token.DOWN,null);
      pc1=(DroolsTree)input.LT(1);
      match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_accumulate_init_clause1372);
      match(input,Token.UP,null);
      match(input,VK_ACTION,FOLLOW_VK_ACTION_in_accumulate_init_clause1380);
      match(input,Token.DOWN,null);
      pc2=(DroolsTree)input.LT(1);
      match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_accumulate_init_clause1384);
      match(input,Token.UP,null);
      int alt33=2;
      int LA33_0=input.LA(1);
      if ((LA33_0 == VK_REVERSE)) {
        alt33=1;
      }
switch (alt33) {
case 1:
{
          pushFollow(FOLLOW_accumulate_init_reverse_clause_in_accumulate_init_clause1393);
          rev=accumulate_init_reverse_clause();
          _fsp--;
        }
      break;
  }
  match(input,VK_RESULT,FOLLOW_VK_RESULT_in_accumulate_init_clause1400);
  match(input,Token.DOWN,null);
  pc3=(DroolsTree)input.LT(1);
  match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_accumulate_init_clause1404);
  match(input,Token.UP,null);
  match(input,Token.UP,null);
  if (null == rev) {
    retval.accumulateDescr=factory.setupAccumulateInit(accumulateParam,start,pc1,pc2,pc3,null);
  }
 else {
    retval.accumulateDescr=factory.setupAccumulateInit(accumulateParam,start,pc1,pc2,pc3,rev.vkReverseChunk);
  }
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return retval;
}
