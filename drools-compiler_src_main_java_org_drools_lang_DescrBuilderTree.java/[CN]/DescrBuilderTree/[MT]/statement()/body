{
  AttributeDescr a=null;
  FunctionImportDescr fi=null;
  ImportDescr is=null;
  global_return gl=null;
  function_return fn=null;
  template_return tp=null;
  rule_return rl=null;
  query_return qr=null;
  try {
    int alt4=8;
switch (input.LA(1)) {
case VK_DATE_EFFECTIVE:
case VK_DATE_EXPIRES:
case VK_LOCK_ON_ACTIVE:
case VK_NO_LOOP:
case VK_AUTO_FOCUS:
case VK_ACTIVATION_GROUP:
case VK_AGENDA_GROUP:
case VK_RULEFLOW_GROUP:
case VK_DURATION:
case VK_DIALECT:
case VK_SALIENCE:
case VK_ENABLED:
{
        alt4=1;
      }
    break;
case VT_FUNCTION_IMPORT:
{
    alt4=2;
  }
break;
case VK_IMPORT:
{
alt4=3;
}
break;
case VK_GLOBAL:
{
alt4=4;
}
break;
case VK_FUNCTION:
{
alt4=5;
}
break;
case VK_TEMPLATE:
{
alt4=6;
}
break;
case VK_RULE:
{
alt4=7;
}
break;
case VK_QUERY:
{
alt4=8;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("63:1: statement : (a= rule_attribute | fi= function_import_statement | is= import_statement | gl= global | fn= function | tp= template | rl= rule | qr= query );",4,0,input);
throw nvae;
}
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_rule_attribute_in_statement124);
a=rule_attribute();
_fsp--;
this.packageDescr.addAttribute(a);
}
break;
case 2:
{
pushFollow(FOLLOW_function_import_statement_in_statement134);
fi=function_import_statement();
_fsp--;
this.packageDescr.addFunctionImport(fi);
}
break;
case 3:
{
pushFollow(FOLLOW_import_statement_in_statement144);
is=import_statement();
_fsp--;
this.packageDescr.addImport(is);
}
break;
case 4:
{
pushFollow(FOLLOW_global_in_statement155);
gl=global();
_fsp--;
this.packageDescr.addGlobal(gl.globalDescr);
}
break;
case 5:
{
pushFollow(FOLLOW_function_in_statement165);
fn=function();
_fsp--;
this.packageDescr.addFunction(fn.functionDescr);
}
break;
case 6:
{
pushFollow(FOLLOW_template_in_statement175);
tp=template();
_fsp--;
this.packageDescr.addFactTemplate(tp.factTemplateDescr);
}
break;
case 7:
{
pushFollow(FOLLOW_rule_in_statement185);
rl=rule();
_fsp--;
this.packageDescr.addRule(rl.ruleDescr);
}
break;
case 8:
{
pushFollow(FOLLOW_query_in_statement195);
qr=query();
_fsp--;
this.packageDescr.addRule(qr.queryDescr);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
