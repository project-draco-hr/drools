{
  AttributeDescr attributeDescr=null;
  DroolsTree attrName=null;
  DroolsTree value=null;
  try {
{
      int alt27=12;
switch (input.LA(1)) {
case VK_SALIENCE:
{
          alt27=1;
        }
      break;
case VK_NO_LOOP:
{
      alt27=2;
    }
  break;
case VK_AGENDA_GROUP:
{
  alt27=3;
}
break;
case VK_DURATION:
{
alt27=4;
}
break;
case VK_ACTIVATION_GROUP:
{
alt27=5;
}
break;
case VK_AUTO_FOCUS:
{
alt27=6;
}
break;
case VK_DATE_EFFECTIVE:
{
alt27=7;
}
break;
case VK_DATE_EXPIRES:
{
alt27=8;
}
break;
case VK_ENABLED:
{
alt27=9;
}
break;
case VK_RULEFLOW_GROUP:
{
alt27=10;
}
break;
case VK_LOCK_ON_ACTIVE:
{
alt27=11;
}
break;
case VK_DIALECT:
{
alt27=12;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("194:4: ( ^(attrName= VK_SALIENCE (value= INT | value= VT_PAREN_CHUNK ) ) | ^(attrName= VK_NO_LOOP (value= BOOL )? ) | ^(attrName= VK_AGENDA_GROUP value= STRING ) | ^(attrName= VK_DURATION value= INT ) | ^(attrName= VK_ACTIVATION_GROUP value= STRING ) | ^(attrName= VK_AUTO_FOCUS (value= BOOL )? ) | ^(attrName= VK_DATE_EFFECTIVE value= STRING ) | ^(attrName= VK_DATE_EXPIRES value= STRING ) | ^(attrName= VK_ENABLED (value= BOOL | value= VT_PAREN_CHUNK ) ) | ^(attrName= VK_RULEFLOW_GROUP value= STRING ) | ^(attrName= VK_LOCK_ON_ACTIVE (value= BOOL )? ) | ^(attrName= VK_DIALECT value= STRING ) )",27,0,input);
throw nvae;
}
switch (alt27) {
case 1:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_SALIENCE,FOLLOW_VK_SALIENCE_in_rule_attribute852);
match(input,Token.DOWN,null);
int alt22=2;
int LA22_0=input.LA(1);
if ((LA22_0 == INT)) {
alt22=1;
}
 else if ((LA22_0 == VT_PAREN_CHUNK)) {
alt22=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("194:28: (value= INT | value= VT_PAREN_CHUNK )",22,0,input);
throw nvae;
}
switch (alt22) {
case 1:
{
value=(DroolsTree)input.LT(1);
match(input,INT,FOLLOW_INT_in_rule_attribute857);
}
break;
case 2:
{
value=(DroolsTree)input.LT(1);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_rule_attribute861);
}
break;
}
match(input,Token.UP,null);
}
break;
case 2:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_NO_LOOP,FOLLOW_VK_NO_LOOP_in_rule_attribute872);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt23=2;
int LA23_0=input.LA(1);
if ((LA23_0 == BOOL)) {
alt23=1;
}
switch (alt23) {
case 1:
{
value=(DroolsTree)input.LT(1);
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute876);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 3:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_AGENDA_GROUP,FOLLOW_VK_AGENDA_GROUP_in_rule_attribute888);
match(input,Token.DOWN,null);
value=(DroolsTree)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_rule_attribute892);
match(input,Token.UP,null);
}
break;
case 4:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_DURATION,FOLLOW_VK_DURATION_in_rule_attribute903);
match(input,Token.DOWN,null);
value=(DroolsTree)input.LT(1);
match(input,INT,FOLLOW_INT_in_rule_attribute907);
match(input,Token.UP,null);
}
break;
case 5:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_ACTIVATION_GROUP,FOLLOW_VK_ACTIVATION_GROUP_in_rule_attribute919);
match(input,Token.DOWN,null);
value=(DroolsTree)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_rule_attribute923);
match(input,Token.UP,null);
}
break;
case 6:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_AUTO_FOCUS,FOLLOW_VK_AUTO_FOCUS_in_rule_attribute933);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt24=2;
int LA24_0=input.LA(1);
if ((LA24_0 == BOOL)) {
alt24=1;
}
switch (alt24) {
case 1:
{
value=(DroolsTree)input.LT(1);
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute937);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 7:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_DATE_EFFECTIVE,FOLLOW_VK_DATE_EFFECTIVE_in_rule_attribute948);
match(input,Token.DOWN,null);
value=(DroolsTree)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_rule_attribute952);
match(input,Token.UP,null);
}
break;
case 8:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_DATE_EXPIRES,FOLLOW_VK_DATE_EXPIRES_in_rule_attribute962);
match(input,Token.DOWN,null);
value=(DroolsTree)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_rule_attribute966);
match(input,Token.UP,null);
}
break;
case 9:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_ENABLED,FOLLOW_VK_ENABLED_in_rule_attribute976);
match(input,Token.DOWN,null);
int alt25=2;
int LA25_0=input.LA(1);
if ((LA25_0 == BOOL)) {
alt25=1;
}
 else if ((LA25_0 == VT_PAREN_CHUNK)) {
alt25=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("202:26: (value= BOOL | value= VT_PAREN_CHUNK )",25,0,input);
throw nvae;
}
switch (alt25) {
case 1:
{
value=(DroolsTree)input.LT(1);
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute981);
}
break;
case 2:
{
value=(DroolsTree)input.LT(1);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_rule_attribute985);
}
break;
}
match(input,Token.UP,null);
}
break;
case 10:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_RULEFLOW_GROUP,FOLLOW_VK_RULEFLOW_GROUP_in_rule_attribute996);
match(input,Token.DOWN,null);
value=(DroolsTree)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_rule_attribute1000);
match(input,Token.UP,null);
}
break;
case 11:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_LOCK_ON_ACTIVE,FOLLOW_VK_LOCK_ON_ACTIVE_in_rule_attribute1010);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt26=2;
int LA26_0=input.LA(1);
if ((LA26_0 == BOOL)) {
alt26=1;
}
switch (alt26) {
case 1:
{
value=(DroolsTree)input.LT(1);
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute1014);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 12:
{
attrName=(DroolsTree)input.LT(1);
match(input,VK_DIALECT,FOLLOW_VK_DIALECT_in_rule_attribute1024);
match(input,Token.DOWN,null);
value=(DroolsTree)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_rule_attribute1028);
match(input,Token.UP,null);
}
break;
}
attributeDescr=factory.createAttribute(attrName,value);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return attributeDescr;
}
