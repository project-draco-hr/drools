{
  AttributeDescr attributeDescr=null;
  DroolsTree attrName=null;
  DroolsTree value=null;
  try {
{
      int alt30=13;
switch (input.LA(1)) {
case VK_SALIENCE:
{
          alt30=1;
        }
      break;
case VK_NO_LOOP:
{
      alt30=2;
    }
  break;
case VK_AGENDA_GROUP:
{
  alt30=3;
}
break;
case VK_TIMER:
{
alt30=4;
}
break;
case VK_ACTIVATION_GROUP:
{
alt30=5;
}
break;
case VK_AUTO_FOCUS:
{
alt30=6;
}
break;
case VK_DATE_EFFECTIVE:
{
alt30=7;
}
break;
case VK_DATE_EXPIRES:
{
alt30=8;
}
break;
case VK_ENABLED:
{
alt30=9;
}
break;
case VK_RULEFLOW_GROUP:
{
alt30=10;
}
break;
case VK_LOCK_ON_ACTIVE:
{
alt30=11;
}
break;
case VK_DIALECT:
{
alt30=12;
}
break;
case VK_CALENDARS:
{
alt30=13;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",30,0,input);
throw nvae;
}
switch (alt30) {
case 1:
{
attrName=(DroolsTree)match(input,VK_SALIENCE,FOLLOW_VK_SALIENCE_in_rule_attribute867);
match(input,Token.DOWN,null);
int alt24=2;
int LA24_0=input.LA(1);
if ((LA24_0 == INT)) {
alt24=1;
}
 else if ((LA24_0 == VT_PAREN_CHUNK)) {
alt24=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",24,0,input);
throw nvae;
}
switch (alt24) {
case 1:
{
value=(DroolsTree)match(input,INT,FOLLOW_INT_in_rule_attribute872);
}
break;
case 2:
{
value=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_rule_attribute876);
}
break;
}
match(input,Token.UP,null);
}
break;
case 2:
{
attrName=(DroolsTree)match(input,VK_NO_LOOP,FOLLOW_VK_NO_LOOP_in_rule_attribute887);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt25=2;
int LA25_0=input.LA(1);
if ((LA25_0 == BOOL)) {
alt25=1;
}
switch (alt25) {
case 1:
{
value=(DroolsTree)match(input,BOOL,FOLLOW_BOOL_in_rule_attribute891);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 3:
{
attrName=(DroolsTree)match(input,VK_AGENDA_GROUP,FOLLOW_VK_AGENDA_GROUP_in_rule_attribute903);
match(input,Token.DOWN,null);
value=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_rule_attribute907);
match(input,Token.UP,null);
}
break;
case 4:
{
attrName=(DroolsTree)match(input,VK_TIMER,FOLLOW_VK_TIMER_in_rule_attribute918);
match(input,Token.DOWN,null);
int alt26=2;
int LA26_0=input.LA(1);
if ((LA26_0 == INT)) {
alt26=1;
}
 else if ((LA26_0 == VT_PAREN_CHUNK)) {
alt26=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",26,0,input);
throw nvae;
}
switch (alt26) {
case 1:
{
value=(DroolsTree)match(input,INT,FOLLOW_INT_in_rule_attribute923);
}
break;
case 2:
{
value=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_rule_attribute927);
}
break;
}
match(input,Token.UP,null);
}
break;
case 5:
{
attrName=(DroolsTree)match(input,VK_ACTIVATION_GROUP,FOLLOW_VK_ACTIVATION_GROUP_in_rule_attribute940);
match(input,Token.DOWN,null);
value=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_rule_attribute944);
match(input,Token.UP,null);
}
break;
case 6:
{
attrName=(DroolsTree)match(input,VK_AUTO_FOCUS,FOLLOW_VK_AUTO_FOCUS_in_rule_attribute954);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt27=2;
int LA27_0=input.LA(1);
if ((LA27_0 == BOOL)) {
alt27=1;
}
switch (alt27) {
case 1:
{
value=(DroolsTree)match(input,BOOL,FOLLOW_BOOL_in_rule_attribute958);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 7:
{
attrName=(DroolsTree)match(input,VK_DATE_EFFECTIVE,FOLLOW_VK_DATE_EFFECTIVE_in_rule_attribute969);
match(input,Token.DOWN,null);
value=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_rule_attribute973);
match(input,Token.UP,null);
}
break;
case 8:
{
attrName=(DroolsTree)match(input,VK_DATE_EXPIRES,FOLLOW_VK_DATE_EXPIRES_in_rule_attribute983);
match(input,Token.DOWN,null);
value=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_rule_attribute987);
match(input,Token.UP,null);
}
break;
case 9:
{
attrName=(DroolsTree)match(input,VK_ENABLED,FOLLOW_VK_ENABLED_in_rule_attribute997);
match(input,Token.DOWN,null);
int alt28=2;
int LA28_0=input.LA(1);
if ((LA28_0 == BOOL)) {
alt28=1;
}
 else if ((LA28_0 == VT_PAREN_CHUNK)) {
alt28=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("",28,0,input);
throw nvae;
}
switch (alt28) {
case 1:
{
value=(DroolsTree)match(input,BOOL,FOLLOW_BOOL_in_rule_attribute1002);
}
break;
case 2:
{
value=(DroolsTree)match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_rule_attribute1006);
}
break;
}
match(input,Token.UP,null);
}
break;
case 10:
{
attrName=(DroolsTree)match(input,VK_RULEFLOW_GROUP,FOLLOW_VK_RULEFLOW_GROUP_in_rule_attribute1017);
match(input,Token.DOWN,null);
value=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_rule_attribute1021);
match(input,Token.UP,null);
}
break;
case 11:
{
attrName=(DroolsTree)match(input,VK_LOCK_ON_ACTIVE,FOLLOW_VK_LOCK_ON_ACTIVE_in_rule_attribute1031);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt29=2;
int LA29_0=input.LA(1);
if ((LA29_0 == BOOL)) {
alt29=1;
}
switch (alt29) {
case 1:
{
value=(DroolsTree)match(input,BOOL,FOLLOW_BOOL_in_rule_attribute1035);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 12:
{
attrName=(DroolsTree)match(input,VK_DIALECT,FOLLOW_VK_DIALECT_in_rule_attribute1045);
match(input,Token.DOWN,null);
value=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_rule_attribute1049);
match(input,Token.UP,null);
}
break;
case 13:
{
attrName=(DroolsTree)match(input,VK_CALENDARS,FOLLOW_VK_CALENDARS_in_rule_attribute1058);
match(input,Token.DOWN,null);
value=(DroolsTree)match(input,STRING,FOLLOW_STRING_in_rule_attribute1062);
match(input,Token.UP,null);
}
break;
}
attributeDescr=factory.createAttribute(attrName,value);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return attributeDescr;
}
