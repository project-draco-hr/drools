{
  String rootPath=urlPathToAdd;
  if (rootPath.lastIndexOf(':') > 0) {
    rootPath=urlPathToAdd.substring(rootPath.lastIndexOf(':') + 1);
  }
  if (urlPathToAdd.endsWith(".jar")) {
    File actualZipFile=new File(rootPath);
    if (!actualZipFile.exists()) {
      log.error("Unable to load pom.properties from" + urlPathToAdd + " as jarPath cannot be found\n"+ rootPath);
    }
    ZipFile zipFile=null;
    try {
      zipFile=new ZipFile(actualZipFile);
      String file=KieBuilderImpl.findPomProperties(zipFile);
      if (file == null) {
        throw new IOException();
      }
      ZipEntry zipEntry=zipFile.getEntry(file);
      String pomProps=StringUtils.readFileAsString(new InputStreamReader(zipFile.getInputStream(zipEntry)));
      log.debug("Found and used pom.properties " + file);
      return pomProps;
    }
 catch (    Exception e) {
      log.error("Unable to load pom.properties from" + urlPathToAdd + "\n"+ e.getMessage());
    }
 finally {
      try {
        zipFile.close();
      }
 catch (      IOException e) {
        log.error("Error when closing InputStream to " + urlPathToAdd + "\n"+ e.getMessage());
      }
    }
  }
 else {
    FileReader reader=null;
    try {
      File file=KieBuilderImpl.findPomProperties(new File(rootPath));
      if (file == null) {
        throw new IOException();
      }
      reader=new FileReader(file);
      log.debug("Found and used pom.properties " + file);
      return StringUtils.toString(reader);
    }
 catch (    Exception e) {
      log.warn("Unable to load pom.properties tried recursing down from" + urlPathToAdd + "\n"+ e.getMessage());
    }
 finally {
      if (reader != null) {
        try {
          reader.close();
        }
 catch (        IOException e) {
          log.error("Error when closing InputStream to " + urlPathToAdd + "\n"+ e.getMessage());
        }
      }
    }
    File file=null;
    for (File folder=new File(rootPath); folder != null; folder=new File(folder.getParent())) {
      file=new File(folder,"pom.xml");
      if (file.exists()) {
        break;
      }
      file=null;
    }
    if (file != null) {
      FileInputStream fis=null;
      try {
        fis=new FileInputStream(file);
        PomModel pomModel=MinimalPomParser.parse(rootPath + "/pom.xml",fis);
        KieBuilderImpl.validatePomModel(pomModel);
        GAVImpl gav=(GAVImpl)KieServices.Factory.get().newGav(pomModel.getGroupId(),pomModel.getArtifactId(),pomModel.getVersion());
        String str=KieBuilderImpl.generatePomProperties(gav);
        log.info("Recursed up folders,  found and used pom.xml " + file);
        return str;
      }
 catch (      Exception e) {
        log.error("As folder project tried to fall back to pom.xml " + file + "\nbut failed with exception:\n"+ e.getMessage());
      }
 finally {
        if (fis != null) {
          try {
            fis.close();
          }
 catch (          IOException e) {
            log.error("Error when closing InputStream to " + file + "\n"+ e.getMessage());
          }
        }
      }
    }
 else {
      log.error("As folder project tried to fall back to pom.xml, but could not find one for " + file);
    }
  }
  log.error("Unable to load pom.properties from" + urlPathToAdd);
  return null;
}
