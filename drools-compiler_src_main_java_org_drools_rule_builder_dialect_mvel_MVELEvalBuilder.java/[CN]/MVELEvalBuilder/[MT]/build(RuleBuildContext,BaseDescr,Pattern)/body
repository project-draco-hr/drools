{
  final EvalDescr evalDescr=(EvalDescr)descr;
  try {
    final DroolsMVELFactory factory=new DroolsMVELFactory(context.getDeclarationResolver().getDeclarations(),null,context.getPkg().getGlobals());
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
    factory.setNextFactory(data.getFunctionFactory());
    Dialect.AnalysisResult analysis=context.getDialect().analyzeExpression(context,evalDescr,evalDescr.getContent(),new Set[]{context.getDeclarationResolver().getDeclarations().keySet(),context.getPkg().getGlobals().keySet()});
    final List[] usedIdentifiers=analysis.getBoundIdentifiers();
    final Declaration[] declarations=new Declaration[usedIdentifiers[0].size()];
    for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
      declarations[i]=context.getDeclarationResolver().getDeclaration((String)usedIdentifiers[0].get(i));
    }
    final EvalCondition eval=new EvalCondition(declarations);
    Serializable expr=((MVELDialect)context.getDialect()).compile((String)evalDescr.getContent(),analysis,null,null,null,context);
    eval.setEvalExpression(new MVELEvalExpression(expr,factory));
    return eval;
  }
 catch (  final Exception e) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),evalDescr,e,"Unable to build expression for 'eval' node '" + evalDescr.getContent() + "'"));
    return null;
  }
}
