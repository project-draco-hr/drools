{
  Package pkg=new Package("pkg1");
  RuleDescr ruleDescr=new RuleDescr("rule 1");
  InstrumentedBuildContent context=new InstrumentedBuildContent(pkg,ruleDescr);
  InstrumentedDeclarationScopeResolver declarationResolver=new InstrumentedDeclarationScopeResolver();
  final FieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"price");
  Column column=new Column(0,new ClassObjectType(int.class));
  Declaration declaration=new Declaration("a",extractor,column);
  Map map=new HashMap();
  map.put("a",declaration);
  declarationResolver.setDeclarations(map);
  context.setDeclarationResolver(declarationResolver);
  EvalDescr evalDescr=new EvalDescr();
  evalDescr.setText("a == 10");
  MVELEvalBuilder builder=new MVELEvalBuilder();
  EvalCondition eval=(EvalCondition)builder.build(context,null,null,evalDescr);
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  WorkingMemory wm=ruleBase.newWorkingMemory();
  Cheese cheddar=new Cheese("cheddar",10);
  InternalFactHandle f0=(InternalFactHandle)wm.assertObject(cheddar);
  ReteTuple tuple=new ReteTuple(f0);
  assertTrue(eval.isAllowed(tuple,wm));
  cheddar.setPrice(9);
  wm.modifyObject(f0,cheddar);
  assertFalse(eval.isAllowed(tuple,wm));
}
