{
  String fieldType=fieldDef.getTypeName();
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,BuildUtils.getInternalType(classDef.getClassName()),TraitableBean.FIELDTMS_FIELD_NAME,Type.getDescriptor(TraitFieldTMS.class));
  mv.visitLdcInsn(fieldDef.resolveAlias());
  if (BuildUtils.isPrimitive(fieldType)) {
    mv.visitVarInsn(BuildUtils.varType(fieldType),1);
    mv.visitMethodInsn(INVOKESTATIC,BuildUtils.getInternalType(BuildUtils.box(fieldType)),"valueOf","(" + BuildUtils.getTypeDescriptor(fieldType) + ")"+ BuildUtils.getTypeDescriptor(BuildUtils.box(fieldType)));
  }
 else {
    mv.visitVarInsn(ALOAD,1);
  }
  if (BuildUtils.isPrimitive(fieldType)) {
    mv.visitLdcInsn(Type.getType(BuildUtils.getTypeDescriptor(BuildUtils.box(fieldDef.getTypeName()))));
  }
 else {
    mv.visitLdcInsn(Type.getType(BuildUtils.getTypeDescriptor(fieldType)));
  }
  mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(TraitFieldTMS.class),"set",Type.getMethodDescriptor(Type.getType(Object.class),new Type[]{Type.getType(String.class),Type.getType(Object.class),Type.getType(Class.class)}));
  if (BuildUtils.isPrimitive(fieldType)) {
    mv.visitTypeInsn(CHECKCAST,BuildUtils.getInternalType(BuildUtils.box(fieldType)));
    mv.visitMethodInsn(INVOKEVIRTUAL,BuildUtils.getInternalType(BuildUtils.box(fieldType)),BuildUtils.numericMorph(BuildUtils.box(fieldType)),"()" + BuildUtils.getTypeDescriptor(fieldType));
  }
 else {
    mv.visitTypeInsn(CHECKCAST,BuildUtils.getInternalType(fieldType));
  }
}
