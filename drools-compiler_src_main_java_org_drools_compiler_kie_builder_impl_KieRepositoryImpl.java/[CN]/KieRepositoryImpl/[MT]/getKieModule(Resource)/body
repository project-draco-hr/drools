{
  InternalResource res=(InternalResource)resource;
  try {
    KieModule kModule;
    if (res.hasURL()) {
      String urlPath=res.getURL().toExternalForm();
      if (res.isDirectory()) {
        if (!urlPath.endsWith("/")) {
          urlPath=urlPath + "/";
        }
        urlPath=urlPath + KieModuleModelImpl.KMODULE_JAR_PATH;
      }
 else {
        urlPath="jar:" + urlPath + "!/"+ KieModuleModelImpl.KMODULE_JAR_PATH;
      }
      kModule=ClasspathKieProject.fetchKModule(new URL(urlPath));
      log.debug("fetched KieModule from resource :" + resource);
    }
 else {
      MemoryFileSystem mfs=MemoryFileSystem.readFromJar(res.getInputStream());
      byte[] bytes=mfs.getBytes(KieModuleModelImpl.KMODULE_JAR_PATH);
      KieModuleModel kieProject=KieModuleModelImpl.fromXML(new ByteArrayInputStream(bytes));
      setDefaultsforEmptyKieModule(kieProject);
      String pomProperties=mfs.findPomProperties();
      ReleaseId releaseId=ReleaseIdImpl.fromPropertiesString(pomProperties);
      kModule=new MemoryKieModule(releaseId,kieProject,mfs);
    }
    return kModule;
  }
 catch (  Exception e) {
    throw new RuntimeException("Unable to fetch module from resource :" + res,e);
  }
}
