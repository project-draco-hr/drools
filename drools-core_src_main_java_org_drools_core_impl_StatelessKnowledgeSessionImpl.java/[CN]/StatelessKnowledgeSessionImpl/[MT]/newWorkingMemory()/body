{
  if (ksession != null && ((StatefulKnowledgeSessionImpl)ksession).isAlive()) {
    return ksession;
  }
  if (this.kagent != null) {
    this.ruleBase=(InternalRuleBase)((KnowledgeBaseImpl)this.kagent.getKnowledgeBase()).ruleBase;
  }
  this.ruleBase.readLock();
  try {
    AbstractWorkingMemory wm=(AbstractWorkingMemory)wmFactory.createWorkingMemory(this.ruleBase.nextWorkingMemoryCounter(),this.ruleBase,(SessionConfiguration)this.conf,this.environment);
    ksession=new StatefulKnowledgeSessionImpl(wm,new KnowledgeBaseImpl(this.ruleBase));
    ((Globals)wm.getGlobalResolver()).setDelegate(this.sessionGlobals);
    if (!initialized) {
      registerSystemListeners(wm);
      registerCustomListeners();
      initialized=true;
    }
    wm.setAgendaEventSupport(this.agendaEventSupport);
    wm.setWorkingMemoryEventSupport(this.workingMemoryEventSupport);
    InternalProcessRuntime processRuntime=wm.getProcessRuntime();
    if (processRuntime != null) {
      processRuntime.setProcessEventSupport(this.processEventSupport);
    }
    for (    Map.Entry<String,Channel> entry : this.channels.entrySet()) {
      wm.registerChannel(entry.getKey(),entry.getValue());
    }
    final InternalFactHandle handle=wm.getFactHandleFactory().newFactHandle(InitialFactImpl.getInstance(),wm.getObjectTypeConfigurationRegistry().getObjectTypeConf(EntryPointId.DEFAULT,InitialFactImpl.getInstance()),wm,wm);
    wm.queueWorkingMemoryAction(new WorkingMemoryReteAssertAction(handle,false,true,null,null));
    return ksession;
  }
  finally {
    this.ruleBase.readUnlock();
  }
}
