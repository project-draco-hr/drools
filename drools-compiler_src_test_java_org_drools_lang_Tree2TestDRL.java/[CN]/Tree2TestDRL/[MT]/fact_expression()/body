{
  try {
    int alt47=24;
switch (input.LA(1)) {
case DOUBLE_PIPE:
{
        alt47=1;
      }
    break;
case DOUBLE_AMPER:
{
    alt47=2;
  }
break;
case VT_FACT_BINDING:
{
alt47=3;
}
break;
case VT_FACT:
{
alt47=4;
}
break;
case VT_FACT_OR:
{
alt47=5;
}
break;
case VK_EVAL:
{
alt47=6;
}
break;
case VK_IN:
{
alt47=7;
}
break;
case EQUAL:
{
alt47=8;
}
break;
case GREATER:
{
alt47=9;
}
break;
case GREATER_EQUAL:
{
alt47=10;
}
break;
case LESS:
{
alt47=11;
}
break;
case LESS_EQUAL:
{
alt47=12;
}
break;
case NOT_EQUAL:
{
alt47=13;
}
break;
case VK_OPERATOR:
{
alt47=14;
}
break;
case ID:
{
alt47=15;
}
break;
case VT_BIND_FIELD:
{
alt47=16;
}
break;
case VT_FIELD:
{
alt47=17;
}
break;
case VT_ACCESSOR_PATH:
{
alt47=18;
}
break;
case STRING:
{
alt47=19;
}
break;
case INT:
{
alt47=20;
}
break;
case FLOAT:
{
alt47=21;
}
break;
case BOOL:
{
alt47=22;
}
break;
case NULL:
{
alt47=23;
}
break;
case VT_PAREN_CHUNK:
{
alt47=24;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",47,0,input);
throw nvae;
}
switch (alt47) {
case 1:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_expression914);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression916);
fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression918);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 2:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_fact_expression925);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression927);
fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression929);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 3:
{
match(input,VT_FACT_BINDING,FOLLOW_VT_FACT_BINDING_in_fact_expression936);
match(input,Token.DOWN,null);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression938);
pushFollow(FOLLOW_fact_expression_in_fact_expression940);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 4:
{
match(input,VT_FACT,FOLLOW_VT_FACT_in_fact_expression947);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_pattern_type_in_fact_expression949);
pattern_type();
state._fsp--;
loop38: do {
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == VT_FACT || LA38_0 == VT_PAREN_CHUNK || (LA38_0 >= VT_FACT_BINDING && LA38_0 <= VT_ACCESSOR_PATH) || LA38_0 == VK_EVAL || LA38_0 == VK_IN || LA38_0 == VK_OPERATOR || LA38_0 == ID || LA38_0 == STRING || (LA38_0 >= BOOL && LA38_0 <= DOUBLE_AMPER) || (LA38_0 >= EQUAL && LA38_0 <= NULL))) {
alt38=1;
}
switch (alt38) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression951);
fact_expression();
state._fsp--;
}
break;
default :
break loop38;
}
}
 while (true);
match(input,Token.UP,null);
}
break;
case 5:
{
match(input,VT_FACT_OR,FOLLOW_VT_FACT_OR_in_fact_expression959);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression961);
fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression963);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 6:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_fact_expression970);
match(input,Token.DOWN,null);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression972);
match(input,Token.UP,null);
}
break;
case 7:
{
match(input,VK_IN,FOLLOW_VK_IN_in_fact_expression979);
match(input,Token.DOWN,null);
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == VK_NOT)) {
alt39=1;
}
switch (alt39) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression981);
}
break;
}
int cnt40=0;
loop40: do {
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 == VT_FACT || LA40_0 == VT_PAREN_CHUNK || (LA40_0 >= VT_FACT_BINDING && LA40_0 <= VT_ACCESSOR_PATH) || LA40_0 == VK_EVAL || LA40_0 == VK_IN || LA40_0 == VK_OPERATOR || LA40_0 == ID || LA40_0 == STRING || (LA40_0 >= BOOL && LA40_0 <= DOUBLE_AMPER) || (LA40_0 >= EQUAL && LA40_0 <= NULL))) {
alt40=1;
}
switch (alt40) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression984);
fact_expression();
state._fsp--;
}
break;
default :
if (cnt40 >= 1) break loop40;
EarlyExitException eee=new EarlyExitException(40,input);
throw eee;
}
cnt40++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 8:
{
match(input,EQUAL,FOLLOW_EQUAL_in_fact_expression992);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression994);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 9:
{
match(input,GREATER,FOLLOW_GREATER_in_fact_expression1001);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1003);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 10:
{
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_fact_expression1010);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1012);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 11:
{
match(input,LESS,FOLLOW_LESS_in_fact_expression1019);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1021);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 12:
{
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_fact_expression1028);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1030);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 13:
{
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_fact_expression1037);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1039);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 14:
{
match(input,VK_OPERATOR,FOLLOW_VK_OPERATOR_in_fact_expression1046);
match(input,Token.DOWN,null);
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == VK_NOT)) {
alt41=1;
}
switch (alt41) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1048);
}
break;
}
int alt42=2;
int LA42_0=input.LA(1);
if ((LA42_0 == VT_SQUARE_CHUNK)) {
alt42=1;
}
switch (alt42) {
case 1:
{
match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression1051);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1054);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 15:
{
match(input,ID,FOLLOW_ID_in_fact_expression1061);
match(input,Token.DOWN,null);
int alt43=2;
int LA43_0=input.LA(1);
if ((LA43_0 == VK_NOT)) {
alt43=1;
}
switch (alt43) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1063);
}
break;
}
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == VT_SQUARE_CHUNK)) {
alt44=1;
}
switch (alt44) {
case 1:
{
match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression1066);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1069);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 16:
{
match(input,VT_BIND_FIELD,FOLLOW_VT_BIND_FIELD_in_fact_expression1076);
match(input,Token.DOWN,null);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1078);
pushFollow(FOLLOW_fact_expression_in_fact_expression1080);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 17:
{
match(input,VT_FIELD,FOLLOW_VT_FIELD_in_fact_expression1087);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1089);
fact_expression();
state._fsp--;
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == VT_FACT || LA45_0 == VT_PAREN_CHUNK || (LA45_0 >= VT_FACT_BINDING && LA45_0 <= VT_ACCESSOR_PATH) || LA45_0 == VK_EVAL || LA45_0 == VK_IN || LA45_0 == VK_OPERATOR || LA45_0 == ID || LA45_0 == STRING || (LA45_0 >= BOOL && LA45_0 <= DOUBLE_AMPER) || (LA45_0 >= EQUAL && LA45_0 <= NULL))) {
alt45=1;
}
switch (alt45) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1091);
fact_expression();
state._fsp--;
}
break;
}
match(input,Token.UP,null);
}
break;
case 18:
{
match(input,VT_ACCESSOR_PATH,FOLLOW_VT_ACCESSOR_PATH_in_fact_expression1099);
match(input,Token.DOWN,null);
int cnt46=0;
loop46: do {
int alt46=2;
int LA46_0=input.LA(1);
if ((LA46_0 == VT_ACCESSOR_ELEMENT)) {
alt46=1;
}
switch (alt46) {
case 1:
{
pushFollow(FOLLOW_accessor_element_in_fact_expression1101);
accessor_element();
state._fsp--;
}
break;
default :
if (cnt46 >= 1) break loop46;
EarlyExitException eee=new EarlyExitException(46,input);
throw eee;
}
cnt46++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 19:
{
match(input,STRING,FOLLOW_STRING_in_fact_expression1108);
}
break;
case 20:
{
match(input,INT,FOLLOW_INT_in_fact_expression1113);
}
break;
case 21:
{
match(input,FLOAT,FOLLOW_FLOAT_in_fact_expression1118);
}
break;
case 22:
{
match(input,BOOL,FOLLOW_BOOL_in_fact_expression1123);
}
break;
case 23:
{
match(input,NULL,FOLLOW_NULL_in_fact_expression1128);
}
break;
case 24:
{
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression1133);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
