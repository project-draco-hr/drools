{
  try {
    int alt43=28;
switch (input.LA(1)) {
case DOUBLE_PIPE:
{
        alt43=1;
      }
    break;
case DOUBLE_AMPER:
{
    alt43=2;
  }
break;
case VT_FACT_BINDING:
{
alt43=3;
}
break;
case VT_FACT:
{
alt43=4;
}
break;
case VT_FACT_OR:
{
alt43=5;
}
break;
case VK_EVAL:
{
alt43=6;
}
break;
case VK_IN:
{
alt43=7;
}
break;
case EQUAL:
{
alt43=8;
}
break;
case GREATER:
{
alt43=9;
}
break;
case GREATER_EQUAL:
{
alt43=10;
}
break;
case LESS:
{
alt43=11;
}
break;
case LESS_EQUAL:
{
alt43=12;
}
break;
case NOT_EQUAL:
{
alt43=13;
}
break;
case VK_CONTAINS:
{
alt43=14;
}
break;
case VK_EXCLUDES:
{
alt43=15;
}
break;
case VK_MATCHES:
{
alt43=16;
}
break;
case VK_SOUNDSLIKE:
{
alt43=17;
}
break;
case VK_MEMBEROF:
{
alt43=18;
}
break;
case ID:
{
alt43=19;
}
break;
case VT_BIND_FIELD:
{
alt43=20;
}
break;
case VT_FIELD:
{
alt43=21;
}
break;
case VT_ACCESSOR_PATH:
{
alt43=22;
}
break;
case STRING:
{
alt43=23;
}
break;
case INT:
{
alt43=24;
}
break;
case FLOAT:
{
alt43=25;
}
break;
case BOOL:
{
alt43=26;
}
break;
case NULL:
{
alt43=27;
}
break;
case VT_PAREN_CHUNK:
{
alt43=28;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("152:1: fact_expression : ( ^( DOUBLE_PIPE fact_expression fact_expression ) | ^( DOUBLE_AMPER fact_expression fact_expression ) | ^( VT_FACT_BINDING VT_LABEL fact_expression ) | ^( VT_FACT pattern_type ( fact_expression )* ) | ^( VT_FACT_OR fact_expression fact_expression ) | ^( VK_EVAL VT_PAREN_CHUNK ) | ^( VK_IN ( VK_NOT )? ( fact_expression )+ ) | ^( EQUAL fact_expression ) | ^( GREATER fact_expression ) | ^( GREATER_EQUAL fact_expression ) | ^( LESS fact_expression ) | ^( LESS_EQUAL fact_expression ) | ^( NOT_EQUAL fact_expression ) | ^( VK_CONTAINS ( VK_NOT )? fact_expression ) | ^( VK_EXCLUDES ( VK_NOT )? fact_expression ) | ^( VK_MATCHES ( VK_NOT )? fact_expression ) | ^( VK_SOUNDSLIKE ( VK_NOT )? fact_expression ) | ^( VK_MEMBEROF ( VK_NOT )? fact_expression ) | ^( ID ( VK_NOT )? ( VT_SQUARE_CHUNK )? fact_expression ) | ^( VT_BIND_FIELD VT_LABEL fact_expression ) | ^( VT_FIELD fact_expression ( fact_expression )? ) | ^( VT_ACCESSOR_PATH ( accessor_element )+ ) | STRING | INT | FLOAT | BOOL | NULL | VT_PAREN_CHUNK );",43,0,input);
throw nvae;
}
switch (alt43) {
case 1:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_expression795);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression797);
fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression799);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 2:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_fact_expression806);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression808);
fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression810);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 3:
{
match(input,VT_FACT_BINDING,FOLLOW_VT_FACT_BINDING_in_fact_expression817);
match(input,Token.DOWN,null);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression819);
pushFollow(FOLLOW_fact_expression_in_fact_expression821);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 4:
{
match(input,VT_FACT,FOLLOW_VT_FACT_in_fact_expression828);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_pattern_type_in_fact_expression830);
pattern_type();
_fsp--;
loop31: do {
int alt31=2;
int LA31_0=input.LA(1);
if ((LA31_0 == VT_FACT || LA31_0 == VT_PAREN_CHUNK || (LA31_0 >= VT_FACT_BINDING && LA31_0 <= VT_ACCESSOR_PATH) || (LA31_0 >= VK_EVAL && LA31_0 <= VK_MEMBEROF) || LA31_0 == VK_IN || LA31_0 == ID || LA31_0 == STRING || (LA31_0 >= BOOL && LA31_0 <= DOUBLE_AMPER) || (LA31_0 >= EQUAL && LA31_0 <= NOT_EQUAL) || (LA31_0 >= FLOAT && LA31_0 <= NULL))) {
alt31=1;
}
switch (alt31) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression832);
fact_expression();
_fsp--;
}
break;
default :
break loop31;
}
}
 while (true);
match(input,Token.UP,null);
}
break;
case 5:
{
match(input,VT_FACT_OR,FOLLOW_VT_FACT_OR_in_fact_expression840);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression842);
fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression844);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 6:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_fact_expression851);
match(input,Token.DOWN,null);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression853);
match(input,Token.UP,null);
}
break;
case 7:
{
match(input,VK_IN,FOLLOW_VK_IN_in_fact_expression860);
match(input,Token.DOWN,null);
int alt32=2;
int LA32_0=input.LA(1);
if ((LA32_0 == VK_NOT)) {
alt32=1;
}
switch (alt32) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression862);
}
break;
}
int cnt33=0;
loop33: do {
int alt33=2;
int LA33_0=input.LA(1);
if ((LA33_0 == VT_FACT || LA33_0 == VT_PAREN_CHUNK || (LA33_0 >= VT_FACT_BINDING && LA33_0 <= VT_ACCESSOR_PATH) || (LA33_0 >= VK_EVAL && LA33_0 <= VK_MEMBEROF) || LA33_0 == VK_IN || LA33_0 == ID || LA33_0 == STRING || (LA33_0 >= BOOL && LA33_0 <= DOUBLE_AMPER) || (LA33_0 >= EQUAL && LA33_0 <= NOT_EQUAL) || (LA33_0 >= FLOAT && LA33_0 <= NULL))) {
alt33=1;
}
switch (alt33) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression865);
fact_expression();
_fsp--;
}
break;
default :
if (cnt33 >= 1) break loop33;
EarlyExitException eee=new EarlyExitException(33,input);
throw eee;
}
cnt33++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 8:
{
match(input,EQUAL,FOLLOW_EQUAL_in_fact_expression873);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression875);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 9:
{
match(input,GREATER,FOLLOW_GREATER_in_fact_expression882);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression884);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 10:
{
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_fact_expression891);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression893);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 11:
{
match(input,LESS,FOLLOW_LESS_in_fact_expression900);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression902);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 12:
{
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_fact_expression909);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression911);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 13:
{
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_fact_expression918);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression920);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 14:
{
match(input,VK_CONTAINS,FOLLOW_VK_CONTAINS_in_fact_expression927);
match(input,Token.DOWN,null);
int alt34=2;
int LA34_0=input.LA(1);
if ((LA34_0 == VK_NOT)) {
alt34=1;
}
switch (alt34) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression929);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression932);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 15:
{
match(input,VK_EXCLUDES,FOLLOW_VK_EXCLUDES_in_fact_expression939);
match(input,Token.DOWN,null);
int alt35=2;
int LA35_0=input.LA(1);
if ((LA35_0 == VK_NOT)) {
alt35=1;
}
switch (alt35) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression941);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression944);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 16:
{
match(input,VK_MATCHES,FOLLOW_VK_MATCHES_in_fact_expression951);
match(input,Token.DOWN,null);
int alt36=2;
int LA36_0=input.LA(1);
if ((LA36_0 == VK_NOT)) {
alt36=1;
}
switch (alt36) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression953);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression956);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 17:
{
match(input,VK_SOUNDSLIKE,FOLLOW_VK_SOUNDSLIKE_in_fact_expression963);
match(input,Token.DOWN,null);
int alt37=2;
int LA37_0=input.LA(1);
if ((LA37_0 == VK_NOT)) {
alt37=1;
}
switch (alt37) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression965);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression968);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 18:
{
match(input,VK_MEMBEROF,FOLLOW_VK_MEMBEROF_in_fact_expression975);
match(input,Token.DOWN,null);
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == VK_NOT)) {
alt38=1;
}
switch (alt38) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression977);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression980);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 19:
{
match(input,ID,FOLLOW_ID_in_fact_expression987);
match(input,Token.DOWN,null);
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == VK_NOT)) {
alt39=1;
}
switch (alt39) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression989);
}
break;
}
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 == VT_SQUARE_CHUNK)) {
alt40=1;
}
switch (alt40) {
case 1:
{
match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression992);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression995);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 20:
{
match(input,VT_BIND_FIELD,FOLLOW_VT_BIND_FIELD_in_fact_expression1002);
match(input,Token.DOWN,null);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1004);
pushFollow(FOLLOW_fact_expression_in_fact_expression1006);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 21:
{
match(input,VT_FIELD,FOLLOW_VT_FIELD_in_fact_expression1013);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1015);
fact_expression();
_fsp--;
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == VT_FACT || LA41_0 == VT_PAREN_CHUNK || (LA41_0 >= VT_FACT_BINDING && LA41_0 <= VT_ACCESSOR_PATH) || (LA41_0 >= VK_EVAL && LA41_0 <= VK_MEMBEROF) || LA41_0 == VK_IN || LA41_0 == ID || LA41_0 == STRING || (LA41_0 >= BOOL && LA41_0 <= DOUBLE_AMPER) || (LA41_0 >= EQUAL && LA41_0 <= NOT_EQUAL) || (LA41_0 >= FLOAT && LA41_0 <= NULL))) {
alt41=1;
}
switch (alt41) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1017);
fact_expression();
_fsp--;
}
break;
}
match(input,Token.UP,null);
}
break;
case 22:
{
match(input,VT_ACCESSOR_PATH,FOLLOW_VT_ACCESSOR_PATH_in_fact_expression1025);
match(input,Token.DOWN,null);
int cnt42=0;
loop42: do {
int alt42=2;
int LA42_0=input.LA(1);
if ((LA42_0 == VT_ACCESSOR_ELEMENT)) {
alt42=1;
}
switch (alt42) {
case 1:
{
pushFollow(FOLLOW_accessor_element_in_fact_expression1027);
accessor_element();
_fsp--;
}
break;
default :
if (cnt42 >= 1) break loop42;
EarlyExitException eee=new EarlyExitException(42,input);
throw eee;
}
cnt42++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 23:
{
match(input,STRING,FOLLOW_STRING_in_fact_expression1034);
}
break;
case 24:
{
match(input,INT,FOLLOW_INT_in_fact_expression1039);
}
break;
case 25:
{
match(input,FLOAT,FOLLOW_FLOAT_in_fact_expression1044);
}
break;
case 26:
{
match(input,BOOL,FOLLOW_BOOL_in_fact_expression1049);
}
break;
case 27:
{
match(input,NULL,FOLLOW_NULL_in_fact_expression1054);
}
break;
case 28:
{
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression1059);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
