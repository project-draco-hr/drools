{
  try {
    int alt49=28;
switch (input.LA(1)) {
case DOUBLE_PIPE:
{
        alt49=1;
      }
    break;
case DOUBLE_AMPER:
{
    alt49=2;
  }
break;
case VT_FACT_BINDING:
{
alt49=3;
}
break;
case VT_FACT:
{
alt49=4;
}
break;
case VT_FACT_OR:
{
alt49=5;
}
break;
case VK_EVAL:
{
alt49=6;
}
break;
case VK_IN:
{
alt49=7;
}
break;
case EQUAL:
{
alt49=8;
}
break;
case GREATER:
{
alt49=9;
}
break;
case GREATER_EQUAL:
{
alt49=10;
}
break;
case LESS:
{
alt49=11;
}
break;
case LESS_EQUAL:
{
alt49=12;
}
break;
case NOT_EQUAL:
{
alt49=13;
}
break;
case VK_CONTAINS:
{
alt49=14;
}
break;
case VK_EXCLUDES:
{
alt49=15;
}
break;
case VK_MATCHES:
{
alt49=16;
}
break;
case VK_SOUNDSLIKE:
{
alt49=17;
}
break;
case VK_MEMBEROF:
{
alt49=18;
}
break;
case ID:
{
alt49=19;
}
break;
case VT_BIND_FIELD:
{
alt49=20;
}
break;
case VT_FIELD:
{
alt49=21;
}
break;
case VT_ACCESSOR_PATH:
{
alt49=22;
}
break;
case STRING:
{
alt49=23;
}
break;
case INT:
{
alt49=24;
}
break;
case FLOAT:
{
alt49=25;
}
break;
case BOOL:
{
alt49=26;
}
break;
case NULL:
{
alt49=27;
}
break;
case VT_PAREN_CHUNK:
{
alt49=28;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("176:1: fact_expression : ( ^( DOUBLE_PIPE fact_expression fact_expression ) | ^( DOUBLE_AMPER fact_expression fact_expression ) | ^( VT_FACT_BINDING VT_LABEL fact_expression ) | ^( VT_FACT pattern_type ( fact_expression )* ) | ^( VT_FACT_OR fact_expression fact_expression ) | ^( VK_EVAL VT_PAREN_CHUNK ) | ^( VK_IN ( VK_NOT )? ( fact_expression )+ ) | ^( EQUAL fact_expression ) | ^( GREATER fact_expression ) | ^( GREATER_EQUAL fact_expression ) | ^( LESS fact_expression ) | ^( LESS_EQUAL fact_expression ) | ^( NOT_EQUAL fact_expression ) | ^( VK_CONTAINS ( VK_NOT )? fact_expression ) | ^( VK_EXCLUDES ( VK_NOT )? fact_expression ) | ^( VK_MATCHES ( VK_NOT )? fact_expression ) | ^( VK_SOUNDSLIKE ( VK_NOT )? fact_expression ) | ^( VK_MEMBEROF ( VK_NOT )? fact_expression ) | ^( ID ( VK_NOT )? ( VT_SQUARE_CHUNK )? fact_expression ) | ^( VT_BIND_FIELD VT_LABEL fact_expression ) | ^( VT_FIELD fact_expression ( fact_expression )? ) | ^( VT_ACCESSOR_PATH ( accessor_element )+ ) | STRING | INT | FLOAT | BOOL | NULL | VT_PAREN_CHUNK );",49,0,input);
throw nvae;
}
switch (alt49) {
case 1:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_expression913);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression915);
fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression917);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 2:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_fact_expression924);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression926);
fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression928);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 3:
{
match(input,VT_FACT_BINDING,FOLLOW_VT_FACT_BINDING_in_fact_expression935);
match(input,Token.DOWN,null);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression937);
pushFollow(FOLLOW_fact_expression_in_fact_expression939);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 4:
{
match(input,VT_FACT,FOLLOW_VT_FACT_in_fact_expression946);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_pattern_type_in_fact_expression948);
pattern_type();
_fsp--;
loop37: do {
int alt37=2;
int LA37_0=input.LA(1);
if ((LA37_0 == VT_FACT || LA37_0 == VT_PAREN_CHUNK || (LA37_0 >= VT_FACT_BINDING && LA37_0 <= VT_ACCESSOR_PATH) || (LA37_0 >= VK_EVAL && LA37_0 <= VK_MEMBEROF) || LA37_0 == VK_IN || LA37_0 == ID || LA37_0 == STRING || (LA37_0 >= BOOL && LA37_0 <= DOUBLE_AMPER) || (LA37_0 >= EQUAL && LA37_0 <= NOT_EQUAL) || (LA37_0 >= FLOAT && LA37_0 <= NULL))) {
alt37=1;
}
switch (alt37) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression950);
fact_expression();
_fsp--;
}
break;
default :
break loop37;
}
}
 while (true);
match(input,Token.UP,null);
}
break;
case 5:
{
match(input,VT_FACT_OR,FOLLOW_VT_FACT_OR_in_fact_expression958);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression960);
fact_expression();
_fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression962);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 6:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_fact_expression969);
match(input,Token.DOWN,null);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression971);
match(input,Token.UP,null);
}
break;
case 7:
{
match(input,VK_IN,FOLLOW_VK_IN_in_fact_expression978);
match(input,Token.DOWN,null);
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == VK_NOT)) {
alt38=1;
}
switch (alt38) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression980);
}
break;
}
int cnt39=0;
loop39: do {
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == VT_FACT || LA39_0 == VT_PAREN_CHUNK || (LA39_0 >= VT_FACT_BINDING && LA39_0 <= VT_ACCESSOR_PATH) || (LA39_0 >= VK_EVAL && LA39_0 <= VK_MEMBEROF) || LA39_0 == VK_IN || LA39_0 == ID || LA39_0 == STRING || (LA39_0 >= BOOL && LA39_0 <= DOUBLE_AMPER) || (LA39_0 >= EQUAL && LA39_0 <= NOT_EQUAL) || (LA39_0 >= FLOAT && LA39_0 <= NULL))) {
alt39=1;
}
switch (alt39) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression983);
fact_expression();
_fsp--;
}
break;
default :
if (cnt39 >= 1) break loop39;
EarlyExitException eee=new EarlyExitException(39,input);
throw eee;
}
cnt39++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 8:
{
match(input,EQUAL,FOLLOW_EQUAL_in_fact_expression991);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression993);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 9:
{
match(input,GREATER,FOLLOW_GREATER_in_fact_expression1000);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1002);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 10:
{
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_fact_expression1009);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1011);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 11:
{
match(input,LESS,FOLLOW_LESS_in_fact_expression1018);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1020);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 12:
{
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_fact_expression1027);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1029);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 13:
{
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_fact_expression1036);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1038);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 14:
{
match(input,VK_CONTAINS,FOLLOW_VK_CONTAINS_in_fact_expression1045);
match(input,Token.DOWN,null);
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 == VK_NOT)) {
alt40=1;
}
switch (alt40) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1047);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1050);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 15:
{
match(input,VK_EXCLUDES,FOLLOW_VK_EXCLUDES_in_fact_expression1057);
match(input,Token.DOWN,null);
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == VK_NOT)) {
alt41=1;
}
switch (alt41) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1059);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1062);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 16:
{
match(input,VK_MATCHES,FOLLOW_VK_MATCHES_in_fact_expression1069);
match(input,Token.DOWN,null);
int alt42=2;
int LA42_0=input.LA(1);
if ((LA42_0 == VK_NOT)) {
alt42=1;
}
switch (alt42) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1071);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1074);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 17:
{
match(input,VK_SOUNDSLIKE,FOLLOW_VK_SOUNDSLIKE_in_fact_expression1081);
match(input,Token.DOWN,null);
int alt43=2;
int LA43_0=input.LA(1);
if ((LA43_0 == VK_NOT)) {
alt43=1;
}
switch (alt43) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1083);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1086);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 18:
{
match(input,VK_MEMBEROF,FOLLOW_VK_MEMBEROF_in_fact_expression1093);
match(input,Token.DOWN,null);
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == VK_NOT)) {
alt44=1;
}
switch (alt44) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1095);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1098);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 19:
{
match(input,ID,FOLLOW_ID_in_fact_expression1105);
match(input,Token.DOWN,null);
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == VK_NOT)) {
alt45=1;
}
switch (alt45) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1107);
}
break;
}
int alt46=2;
int LA46_0=input.LA(1);
if ((LA46_0 == VT_SQUARE_CHUNK)) {
alt46=1;
}
switch (alt46) {
case 1:
{
match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression1110);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1113);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 20:
{
match(input,VT_BIND_FIELD,FOLLOW_VT_BIND_FIELD_in_fact_expression1120);
match(input,Token.DOWN,null);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1122);
pushFollow(FOLLOW_fact_expression_in_fact_expression1124);
fact_expression();
_fsp--;
match(input,Token.UP,null);
}
break;
case 21:
{
match(input,VT_FIELD,FOLLOW_VT_FIELD_in_fact_expression1131);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1133);
fact_expression();
_fsp--;
int alt47=2;
int LA47_0=input.LA(1);
if ((LA47_0 == VT_FACT || LA47_0 == VT_PAREN_CHUNK || (LA47_0 >= VT_FACT_BINDING && LA47_0 <= VT_ACCESSOR_PATH) || (LA47_0 >= VK_EVAL && LA47_0 <= VK_MEMBEROF) || LA47_0 == VK_IN || LA47_0 == ID || LA47_0 == STRING || (LA47_0 >= BOOL && LA47_0 <= DOUBLE_AMPER) || (LA47_0 >= EQUAL && LA47_0 <= NOT_EQUAL) || (LA47_0 >= FLOAT && LA47_0 <= NULL))) {
alt47=1;
}
switch (alt47) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1135);
fact_expression();
_fsp--;
}
break;
}
match(input,Token.UP,null);
}
break;
case 22:
{
match(input,VT_ACCESSOR_PATH,FOLLOW_VT_ACCESSOR_PATH_in_fact_expression1143);
match(input,Token.DOWN,null);
int cnt48=0;
loop48: do {
int alt48=2;
int LA48_0=input.LA(1);
if ((LA48_0 == VT_ACCESSOR_ELEMENT)) {
alt48=1;
}
switch (alt48) {
case 1:
{
pushFollow(FOLLOW_accessor_element_in_fact_expression1145);
accessor_element();
_fsp--;
}
break;
default :
if (cnt48 >= 1) break loop48;
EarlyExitException eee=new EarlyExitException(48,input);
throw eee;
}
cnt48++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 23:
{
match(input,STRING,FOLLOW_STRING_in_fact_expression1152);
}
break;
case 24:
{
match(input,INT,FOLLOW_INT_in_fact_expression1157);
}
break;
case 25:
{
match(input,FLOAT,FOLLOW_FLOAT_in_fact_expression1162);
}
break;
case 26:
{
match(input,BOOL,FOLLOW_BOOL_in_fact_expression1167);
}
break;
case 27:
{
match(input,NULL,FOLLOW_NULL_in_fact_expression1172);
}
break;
case 28:
{
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression1177);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
