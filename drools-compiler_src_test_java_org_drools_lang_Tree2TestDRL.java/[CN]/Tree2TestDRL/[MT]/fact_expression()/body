{
  try {
    int alt46=24;
switch (input.LA(1)) {
case DOUBLE_PIPE:
{
        alt46=1;
      }
    break;
case DOUBLE_AMPER:
{
    alt46=2;
  }
break;
case VT_FACT_BINDING:
{
alt46=3;
}
break;
case VT_FACT:
{
alt46=4;
}
break;
case VT_FACT_OR:
{
alt46=5;
}
break;
case VK_EVAL:
{
alt46=6;
}
break;
case VK_IN:
{
alt46=7;
}
break;
case EQUAL:
{
alt46=8;
}
break;
case GREATER:
{
alt46=9;
}
break;
case GREATER_EQUAL:
{
alt46=10;
}
break;
case LESS:
{
alt46=11;
}
break;
case LESS_EQUAL:
{
alt46=12;
}
break;
case NOT_EQUAL:
{
alt46=13;
}
break;
case VK_OPERATOR:
{
alt46=14;
}
break;
case ID:
{
alt46=15;
}
break;
case VT_BIND_FIELD:
{
alt46=16;
}
break;
case VT_FIELD:
{
alt46=17;
}
break;
case VT_ACCESSOR_PATH:
{
alt46=18;
}
break;
case STRING:
{
alt46=19;
}
break;
case INT:
{
alt46=20;
}
break;
case FLOAT:
{
alt46=21;
}
break;
case BOOL:
{
alt46=22;
}
break;
case NULL:
{
alt46=23;
}
break;
case VT_PAREN_CHUNK:
{
alt46=24;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",46,0,input);
throw nvae;
}
switch (alt46) {
case 1:
{
match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_expression913);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression915);
fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression917);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 2:
{
match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_fact_expression924);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression926);
fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression928);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 3:
{
match(input,VT_FACT_BINDING,FOLLOW_VT_FACT_BINDING_in_fact_expression935);
match(input,Token.DOWN,null);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression937);
pushFollow(FOLLOW_fact_expression_in_fact_expression939);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 4:
{
match(input,VT_FACT,FOLLOW_VT_FACT_in_fact_expression946);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_pattern_type_in_fact_expression948);
pattern_type();
state._fsp--;
loop37: do {
int alt37=2;
int LA37_0=input.LA(1);
if ((LA37_0 == VT_FACT || LA37_0 == VT_PAREN_CHUNK || (LA37_0 >= VT_FACT_BINDING && LA37_0 <= VT_ACCESSOR_PATH) || LA37_0 == VK_EVAL || LA37_0 == VK_IN || LA37_0 == VK_OPERATOR || LA37_0 == ID || LA37_0 == STRING || (LA37_0 >= BOOL && LA37_0 <= DOUBLE_AMPER) || (LA37_0 >= EQUAL && LA37_0 <= NULL))) {
alt37=1;
}
switch (alt37) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression950);
fact_expression();
state._fsp--;
}
break;
default :
break loop37;
}
}
 while (true);
match(input,Token.UP,null);
}
break;
case 5:
{
match(input,VT_FACT_OR,FOLLOW_VT_FACT_OR_in_fact_expression958);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression960);
fact_expression();
state._fsp--;
pushFollow(FOLLOW_fact_expression_in_fact_expression962);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 6:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_fact_expression969);
match(input,Token.DOWN,null);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression971);
match(input,Token.UP,null);
}
break;
case 7:
{
match(input,VK_IN,FOLLOW_VK_IN_in_fact_expression978);
match(input,Token.DOWN,null);
int alt38=2;
int LA38_0=input.LA(1);
if ((LA38_0 == VK_NOT)) {
alt38=1;
}
switch (alt38) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression980);
}
break;
}
int cnt39=0;
loop39: do {
int alt39=2;
int LA39_0=input.LA(1);
if ((LA39_0 == VT_FACT || LA39_0 == VT_PAREN_CHUNK || (LA39_0 >= VT_FACT_BINDING && LA39_0 <= VT_ACCESSOR_PATH) || LA39_0 == VK_EVAL || LA39_0 == VK_IN || LA39_0 == VK_OPERATOR || LA39_0 == ID || LA39_0 == STRING || (LA39_0 >= BOOL && LA39_0 <= DOUBLE_AMPER) || (LA39_0 >= EQUAL && LA39_0 <= NULL))) {
alt39=1;
}
switch (alt39) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression983);
fact_expression();
state._fsp--;
}
break;
default :
if (cnt39 >= 1) break loop39;
EarlyExitException eee=new EarlyExitException(39,input);
throw eee;
}
cnt39++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 8:
{
match(input,EQUAL,FOLLOW_EQUAL_in_fact_expression991);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression993);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 9:
{
match(input,GREATER,FOLLOW_GREATER_in_fact_expression1000);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1002);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 10:
{
match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_fact_expression1009);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1011);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 11:
{
match(input,LESS,FOLLOW_LESS_in_fact_expression1018);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1020);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 12:
{
match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_fact_expression1027);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1029);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 13:
{
match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_fact_expression1036);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1038);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 14:
{
match(input,VK_OPERATOR,FOLLOW_VK_OPERATOR_in_fact_expression1045);
match(input,Token.DOWN,null);
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 == VK_NOT)) {
alt40=1;
}
switch (alt40) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1047);
}
break;
}
int alt41=2;
int LA41_0=input.LA(1);
if ((LA41_0 == VT_SQUARE_CHUNK)) {
alt41=1;
}
switch (alt41) {
case 1:
{
match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression1050);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1053);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 15:
{
match(input,ID,FOLLOW_ID_in_fact_expression1060);
match(input,Token.DOWN,null);
int alt42=2;
int LA42_0=input.LA(1);
if ((LA42_0 == VK_NOT)) {
alt42=1;
}
switch (alt42) {
case 1:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_fact_expression1062);
}
break;
}
int alt43=2;
int LA43_0=input.LA(1);
if ((LA43_0 == VT_SQUARE_CHUNK)) {
alt43=1;
}
switch (alt43) {
case 1:
{
match(input,VT_SQUARE_CHUNK,FOLLOW_VT_SQUARE_CHUNK_in_fact_expression1065);
}
break;
}
pushFollow(FOLLOW_fact_expression_in_fact_expression1068);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 16:
{
match(input,VT_BIND_FIELD,FOLLOW_VT_BIND_FIELD_in_fact_expression1075);
match(input,Token.DOWN,null);
match(input,VT_LABEL,FOLLOW_VT_LABEL_in_fact_expression1077);
pushFollow(FOLLOW_fact_expression_in_fact_expression1079);
fact_expression();
state._fsp--;
match(input,Token.UP,null);
}
break;
case 17:
{
match(input,VT_FIELD,FOLLOW_VT_FIELD_in_fact_expression1086);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_fact_expression_in_fact_expression1088);
fact_expression();
state._fsp--;
int alt44=2;
int LA44_0=input.LA(1);
if ((LA44_0 == VT_FACT || LA44_0 == VT_PAREN_CHUNK || (LA44_0 >= VT_FACT_BINDING && LA44_0 <= VT_ACCESSOR_PATH) || LA44_0 == VK_EVAL || LA44_0 == VK_IN || LA44_0 == VK_OPERATOR || LA44_0 == ID || LA44_0 == STRING || (LA44_0 >= BOOL && LA44_0 <= DOUBLE_AMPER) || (LA44_0 >= EQUAL && LA44_0 <= NULL))) {
alt44=1;
}
switch (alt44) {
case 1:
{
pushFollow(FOLLOW_fact_expression_in_fact_expression1090);
fact_expression();
state._fsp--;
}
break;
}
match(input,Token.UP,null);
}
break;
case 18:
{
match(input,VT_ACCESSOR_PATH,FOLLOW_VT_ACCESSOR_PATH_in_fact_expression1098);
match(input,Token.DOWN,null);
int cnt45=0;
loop45: do {
int alt45=2;
int LA45_0=input.LA(1);
if ((LA45_0 == VT_ACCESSOR_ELEMENT)) {
alt45=1;
}
switch (alt45) {
case 1:
{
pushFollow(FOLLOW_accessor_element_in_fact_expression1100);
accessor_element();
state._fsp--;
}
break;
default :
if (cnt45 >= 1) break loop45;
EarlyExitException eee=new EarlyExitException(45,input);
throw eee;
}
cnt45++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 19:
{
match(input,STRING,FOLLOW_STRING_in_fact_expression1107);
}
break;
case 20:
{
match(input,INT,FOLLOW_INT_in_fact_expression1112);
}
break;
case 21:
{
match(input,FLOAT,FOLLOW_FLOAT_in_fact_expression1117);
}
break;
case 22:
{
match(input,BOOL,FOLLOW_BOOL_in_fact_expression1122);
}
break;
case 23:
{
match(input,NULL,FOLLOW_NULL_in_fact_expression1127);
}
break;
case 24:
{
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_fact_expression1132);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
