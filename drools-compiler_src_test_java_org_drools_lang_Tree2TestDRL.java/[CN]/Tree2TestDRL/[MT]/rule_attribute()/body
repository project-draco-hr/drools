{
  try {
    int alt24=12;
switch (input.LA(1)) {
case VK_SALIENCE:
{
        alt24=1;
      }
    break;
case VK_NO_LOOP:
{
    alt24=2;
  }
break;
case VK_AGENDA_GROUP:
{
alt24=3;
}
break;
case VK_DURATION:
{
alt24=4;
}
break;
case VK_ACTIVATION_GROUP:
{
alt24=5;
}
break;
case VK_AUTO_FOCUS:
{
alt24=6;
}
break;
case VK_DATE_EFFECTIVE:
{
alt24=7;
}
break;
case VK_DATE_EXPIRES:
{
alt24=8;
}
break;
case VK_ENABLED:
{
alt24=9;
}
break;
case VK_RULEFLOW_GROUP:
{
alt24=10;
}
break;
case VK_LOCK_ON_ACTIVE:
{
alt24=11;
}
break;
case VK_DIALECT:
{
alt24=12;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("109:1: rule_attribute : ( ^( VK_SALIENCE ( INT | VT_PAREN_CHUNK ) ) | ^( VK_NO_LOOP ( BOOL )? ) | ^( VK_AGENDA_GROUP STRING ) | ^( VK_DURATION INT ) | ^( VK_ACTIVATION_GROUP STRING ) | ^( VK_AUTO_FOCUS ( BOOL )? ) | ^( VK_DATE_EFFECTIVE STRING ) | ^( VK_DATE_EXPIRES STRING ) | ^( VK_ENABLED BOOL ) | ^( VK_RULEFLOW_GROUP STRING ) | ^( VK_LOCK_ON_ACTIVE ( BOOL )? ) | ^( VK_DIALECT STRING ) );",24,0,input);
throw nvae;
}
switch (alt24) {
case 1:
{
match(input,VK_SALIENCE,FOLLOW_VK_SALIENCE_in_rule_attribute472);
match(input,Token.DOWN,null);
if (input.LA(1) == VT_PAREN_CHUNK || input.LA(1) == INT) {
input.consume();
errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recoverFromMismatchedSet(input,mse,FOLLOW_set_in_rule_attribute474);
throw mse;
}
match(input,Token.UP,null);
}
break;
case 2:
{
match(input,VK_NO_LOOP,FOLLOW_VK_NO_LOOP_in_rule_attribute486);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt21=2;
int LA21_0=input.LA(1);
if ((LA21_0 == BOOL)) {
alt21=1;
}
switch (alt21) {
case 1:
{
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute488);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 3:
{
match(input,VK_AGENDA_GROUP,FOLLOW_VK_AGENDA_GROUP_in_rule_attribute498);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute500);
match(input,Token.UP,null);
}
break;
case 4:
{
match(input,VK_DURATION,FOLLOW_VK_DURATION_in_rule_attribute509);
match(input,Token.DOWN,null);
match(input,INT,FOLLOW_INT_in_rule_attribute511);
match(input,Token.UP,null);
}
break;
case 5:
{
match(input,VK_ACTIVATION_GROUP,FOLLOW_VK_ACTIVATION_GROUP_in_rule_attribute521);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute523);
match(input,Token.UP,null);
}
break;
case 6:
{
match(input,VK_AUTO_FOCUS,FOLLOW_VK_AUTO_FOCUS_in_rule_attribute531);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt22=2;
int LA22_0=input.LA(1);
if ((LA22_0 == BOOL)) {
alt22=1;
}
switch (alt22) {
case 1:
{
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute533);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 7:
{
match(input,VK_DATE_EFFECTIVE,FOLLOW_VK_DATE_EFFECTIVE_in_rule_attribute542);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute544);
match(input,Token.UP,null);
}
break;
case 8:
{
match(input,VK_DATE_EXPIRES,FOLLOW_VK_DATE_EXPIRES_in_rule_attribute552);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute554);
match(input,Token.UP,null);
}
break;
case 9:
{
match(input,VK_ENABLED,FOLLOW_VK_ENABLED_in_rule_attribute562);
match(input,Token.DOWN,null);
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute564);
match(input,Token.UP,null);
}
break;
case 10:
{
match(input,VK_RULEFLOW_GROUP,FOLLOW_VK_RULEFLOW_GROUP_in_rule_attribute572);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute574);
match(input,Token.UP,null);
}
break;
case 11:
{
match(input,VK_LOCK_ON_ACTIVE,FOLLOW_VK_LOCK_ON_ACTIVE_in_rule_attribute582);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt23=2;
int LA23_0=input.LA(1);
if ((LA23_0 == BOOL)) {
alt23=1;
}
switch (alt23) {
case 1:
{
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute584);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 12:
{
match(input,VK_DIALECT,FOLLOW_VK_DIALECT_in_rule_attribute592);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute594);
match(input,Token.UP,null);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
