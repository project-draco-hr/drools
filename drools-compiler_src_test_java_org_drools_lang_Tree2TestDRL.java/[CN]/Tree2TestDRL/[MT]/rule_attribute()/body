{
  try {
    int alt20=12;
switch (input.LA(1)) {
case VK_SALIENCE:
{
        alt20=1;
      }
    break;
case VK_NO_LOOP:
{
    alt20=2;
  }
break;
case VK_AGENDA_GROUP:
{
alt20=3;
}
break;
case VK_DURATION:
{
alt20=4;
}
break;
case VK_ACTIVATION_GROUP:
{
alt20=5;
}
break;
case VK_AUTO_FOCUS:
{
alt20=6;
}
break;
case VK_DATE_EFFECTIVE:
{
alt20=7;
}
break;
case VK_DATE_EXPIRES:
{
alt20=8;
}
break;
case VK_ENABLED:
{
alt20=9;
}
break;
case VK_RULEFLOW_GROUP:
{
alt20=10;
}
break;
case VK_LOCK_ON_ACTIVE:
{
alt20=11;
}
break;
case VK_DIALECT:
{
alt20=12;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("93:1: rule_attribute : ( ^( VK_SALIENCE ( INT | VT_PAREN_CHUNK ) ) | ^( VK_NO_LOOP ( BOOL )? ) | ^( VK_AGENDA_GROUP STRING ) | ^( VK_DURATION INT ) | ^( VK_ACTIVATION_GROUP STRING ) | ^( VK_AUTO_FOCUS ( BOOL )? ) | ^( VK_DATE_EFFECTIVE STRING ) | ^( VK_DATE_EXPIRES STRING ) | ^( VK_ENABLED BOOL ) | ^( VK_RULEFLOW_GROUP STRING ) | ^( VK_LOCK_ON_ACTIVE ( BOOL )? ) | ^( VK_DIALECT STRING ) );",20,0,input);
throw nvae;
}
switch (alt20) {
case 1:
{
match(input,VK_SALIENCE,FOLLOW_VK_SALIENCE_in_rule_attribute392);
match(input,Token.DOWN,null);
if (input.LA(1) == VT_PAREN_CHUNK || input.LA(1) == INT) {
input.consume();
errorRecovery=false;
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recoverFromMismatchedSet(input,mse,FOLLOW_set_in_rule_attribute394);
throw mse;
}
match(input,Token.UP,null);
}
break;
case 2:
{
match(input,VK_NO_LOOP,FOLLOW_VK_NO_LOOP_in_rule_attribute406);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt17=2;
int LA17_0=input.LA(1);
if ((LA17_0 == BOOL)) {
alt17=1;
}
switch (alt17) {
case 1:
{
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute408);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 3:
{
match(input,VK_AGENDA_GROUP,FOLLOW_VK_AGENDA_GROUP_in_rule_attribute418);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute420);
match(input,Token.UP,null);
}
break;
case 4:
{
match(input,VK_DURATION,FOLLOW_VK_DURATION_in_rule_attribute429);
match(input,Token.DOWN,null);
match(input,INT,FOLLOW_INT_in_rule_attribute431);
match(input,Token.UP,null);
}
break;
case 5:
{
match(input,VK_ACTIVATION_GROUP,FOLLOW_VK_ACTIVATION_GROUP_in_rule_attribute441);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute443);
match(input,Token.UP,null);
}
break;
case 6:
{
match(input,VK_AUTO_FOCUS,FOLLOW_VK_AUTO_FOCUS_in_rule_attribute451);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt18=2;
int LA18_0=input.LA(1);
if ((LA18_0 == BOOL)) {
alt18=1;
}
switch (alt18) {
case 1:
{
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute453);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 7:
{
match(input,VK_DATE_EFFECTIVE,FOLLOW_VK_DATE_EFFECTIVE_in_rule_attribute462);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute464);
match(input,Token.UP,null);
}
break;
case 8:
{
match(input,VK_DATE_EXPIRES,FOLLOW_VK_DATE_EXPIRES_in_rule_attribute472);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute474);
match(input,Token.UP,null);
}
break;
case 9:
{
match(input,VK_ENABLED,FOLLOW_VK_ENABLED_in_rule_attribute482);
match(input,Token.DOWN,null);
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute484);
match(input,Token.UP,null);
}
break;
case 10:
{
match(input,VK_RULEFLOW_GROUP,FOLLOW_VK_RULEFLOW_GROUP_in_rule_attribute492);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute494);
match(input,Token.UP,null);
}
break;
case 11:
{
match(input,VK_LOCK_ON_ACTIVE,FOLLOW_VK_LOCK_ON_ACTIVE_in_rule_attribute502);
if (input.LA(1) == Token.DOWN) {
match(input,Token.DOWN,null);
int alt19=2;
int LA19_0=input.LA(1);
if ((LA19_0 == BOOL)) {
alt19=1;
}
switch (alt19) {
case 1:
{
match(input,BOOL,FOLLOW_BOOL_in_rule_attribute504);
}
break;
}
match(input,Token.UP,null);
}
}
break;
case 12:
{
match(input,VK_DIALECT,FOLLOW_VK_DIALECT_in_rule_attribute512);
match(input,Token.DOWN,null);
match(input,STRING,FOLLOW_STRING_in_rule_attribute514);
match(input,Token.UP,null);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
