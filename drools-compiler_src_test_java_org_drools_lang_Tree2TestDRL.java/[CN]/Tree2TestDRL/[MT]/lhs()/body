{
  try {
    int alt29=10;
switch (input.LA(1)) {
case VT_OR_PREFIX:
{
        alt29=1;
      }
    break;
case VT_OR_INFIX:
{
    alt29=2;
  }
break;
case VT_AND_PREFIX:
{
alt29=3;
}
break;
case VT_AND_INFIX:
{
alt29=4;
}
break;
case VK_EXISTS:
{
alt29=5;
}
break;
case VK_NOT:
{
alt29=6;
}
break;
case VK_EVAL:
{
alt29=7;
}
break;
case VK_FORALL:
{
alt29=8;
}
break;
case FROM:
{
alt29=9;
}
break;
case VT_PATTERN:
{
alt29=10;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("128:1: lhs : ( ^( VT_OR_PREFIX ( lhs )+ ) | ^( VT_OR_INFIX lhs lhs ) | ^( VT_AND_PREFIX ( lhs )+ ) | ^( VT_AND_INFIX lhs lhs ) | ^( VK_EXISTS lhs ) | ^( VK_NOT lhs ) | ^( VK_EVAL VT_PAREN_CHUNK ) | ^( VK_FORALL ( lhs )+ ) | ^( FROM lhs_pattern from_elements ) | lhs_pattern );",29,0,input);
throw nvae;
}
switch (alt29) {
case 1:
{
match(input,VT_OR_PREFIX,FOLLOW_VT_OR_PREFIX_in_lhs623);
match(input,Token.DOWN,null);
int cnt26=0;
loop26: do {
int alt26=2;
int LA26_0=input.LA(1);
if (((LA26_0 >= VT_AND_PREFIX && LA26_0 <= VT_OR_INFIX) || LA26_0 == VT_PATTERN || LA26_0 == VK_EVAL || LA26_0 == VK_NOT || (LA26_0 >= VK_EXISTS && LA26_0 <= VK_FORALL) || LA26_0 == FROM)) {
alt26=1;
}
switch (alt26) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs625);
lhs();
_fsp--;
}
break;
default :
if (cnt26 >= 1) break loop26;
EarlyExitException eee=new EarlyExitException(26,input);
throw eee;
}
cnt26++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 2:
{
match(input,VT_OR_INFIX,FOLLOW_VT_OR_INFIX_in_lhs633);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs635);
lhs();
_fsp--;
pushFollow(FOLLOW_lhs_in_lhs637);
lhs();
_fsp--;
match(input,Token.UP,null);
}
break;
case 3:
{
match(input,VT_AND_PREFIX,FOLLOW_VT_AND_PREFIX_in_lhs644);
match(input,Token.DOWN,null);
int cnt27=0;
loop27: do {
int alt27=2;
int LA27_0=input.LA(1);
if (((LA27_0 >= VT_AND_PREFIX && LA27_0 <= VT_OR_INFIX) || LA27_0 == VT_PATTERN || LA27_0 == VK_EVAL || LA27_0 == VK_NOT || (LA27_0 >= VK_EXISTS && LA27_0 <= VK_FORALL) || LA27_0 == FROM)) {
alt27=1;
}
switch (alt27) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs646);
lhs();
_fsp--;
}
break;
default :
if (cnt27 >= 1) break loop27;
EarlyExitException eee=new EarlyExitException(27,input);
throw eee;
}
cnt27++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 4:
{
match(input,VT_AND_INFIX,FOLLOW_VT_AND_INFIX_in_lhs654);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs656);
lhs();
_fsp--;
pushFollow(FOLLOW_lhs_in_lhs658);
lhs();
_fsp--;
match(input,Token.UP,null);
}
break;
case 5:
{
match(input,VK_EXISTS,FOLLOW_VK_EXISTS_in_lhs665);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs667);
lhs();
_fsp--;
match(input,Token.UP,null);
}
break;
case 6:
{
match(input,VK_NOT,FOLLOW_VK_NOT_in_lhs674);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_in_lhs676);
lhs();
_fsp--;
match(input,Token.UP,null);
}
break;
case 7:
{
match(input,VK_EVAL,FOLLOW_VK_EVAL_in_lhs683);
match(input,Token.DOWN,null);
match(input,VT_PAREN_CHUNK,FOLLOW_VT_PAREN_CHUNK_in_lhs685);
match(input,Token.UP,null);
}
break;
case 8:
{
match(input,VK_FORALL,FOLLOW_VK_FORALL_in_lhs692);
match(input,Token.DOWN,null);
int cnt28=0;
loop28: do {
int alt28=2;
int LA28_0=input.LA(1);
if (((LA28_0 >= VT_AND_PREFIX && LA28_0 <= VT_OR_INFIX) || LA28_0 == VT_PATTERN || LA28_0 == VK_EVAL || LA28_0 == VK_NOT || (LA28_0 >= VK_EXISTS && LA28_0 <= VK_FORALL) || LA28_0 == FROM)) {
alt28=1;
}
switch (alt28) {
case 1:
{
pushFollow(FOLLOW_lhs_in_lhs694);
lhs();
_fsp--;
}
break;
default :
if (cnt28 >= 1) break loop28;
EarlyExitException eee=new EarlyExitException(28,input);
throw eee;
}
cnt28++;
}
 while (true);
match(input,Token.UP,null);
}
break;
case 9:
{
match(input,FROM,FOLLOW_FROM_in_lhs702);
match(input,Token.DOWN,null);
pushFollow(FOLLOW_lhs_pattern_in_lhs704);
lhs_pattern();
_fsp--;
pushFollow(FOLLOW_from_elements_in_lhs706);
from_elements();
_fsp--;
match(input,Token.UP,null);
}
break;
case 10:
{
pushFollow(FOLLOW_lhs_pattern_in_lhs712);
lhs_pattern();
_fsp--;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
