{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(drl.getBytes()),ResourceType.DRL);
  for (  KnowledgeBuilderError error : kbuilder.getErrors()) {
    System.out.println(error.getMessage());
  }
  assertFalse(kbuilder.hasErrors());
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession session=kbase.newStatefulKnowledgeSession();
  FactType scorecardType=kbase.getFactType("org.drools.scorecards.example","SampleScore");
  DroolsScorecard scorecard=(DroolsScorecard)scorecardType.newInstance();
  scorecardType.set(scorecard,"age",10);
  session.insert(scorecard);
  session.fireAllRules();
  session.dispose();
  assertTrue(129 == scorecard.getCalculatedScore());
  assertEquals(2,scorecard.getReasonCodes().size());
  assertTrue(scorecard.getReasonCodes().contains("AGE02"));
  assertTrue(scorecard.getReasonCodes().contains("VL002"));
  session=kbase.newStatefulKnowledgeSession();
  scorecard=(DroolsScorecard)scorecardType.newInstance();
  scorecardType.set(scorecard,"age",0);
  scorecardType.set(scorecard,"occupation","SKYDIVER");
  session.insert(scorecard);
  session.fireAllRules();
  session.dispose();
  assertEquals(99.0,scorecard.getCalculatedScore());
  assertEquals(3,scorecard.getReasonCodes().size());
  assertTrue(scorecard.getReasonCodes().contains("AGE01"));
  assertTrue(scorecard.getReasonCodes().contains("VL002"));
  assertTrue(scorecard.getReasonCodes().contains("OCC01"));
  session=kbase.newStatefulKnowledgeSession();
  scorecard=(DroolsScorecard)scorecardType.newInstance();
  scorecardType.set(scorecard,"age",20);
  scorecardType.set(scorecard,"occupation","TEACHER");
  scorecardType.set(scorecard,"residenceState","AP");
  scorecardType.set(scorecard,"validLicense",true);
  session.insert(scorecard);
  session.fireAllRules();
  session.dispose();
  assertEquals(141.0,scorecard.getCalculatedScore());
  assertEquals(4,scorecard.getReasonCodes().size());
  assertTrue(scorecard.getReasonCodes().contains("OCC02"));
  assertTrue(scorecard.getReasonCodes().contains("AGE03"));
  assertTrue(scorecard.getReasonCodes().contains("VL001"));
  assertTrue(scorecard.getReasonCodes().contains("RS001"));
}
