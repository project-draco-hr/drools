{
  KieServices ks=KieServices.Factory.get();
  KieFileSystem kfs=ks.newKieFileSystem();
  kfs.write(ks.getResources().newClassPathResource("scoremodel_reasoncodes.xls").setSourcePath("scoremodel_reasoncodes.xls").setResourceType(ResourceType.SCARD));
  KieBuilder kieBuilder=ks.newKieBuilder(kfs);
  Results res=kieBuilder.buildAll().getResults();
  KieContainer kieContainer=ks.newKieContainer(kieBuilder.getKieModule().getReleaseId());
  KieBase kbase=kieContainer.getKieBase();
  KieSession session=kbase.newKieSession();
  FactType scorecardType=kbase.getFactType("org.drools.scorecards.example","SampleScore");
  FactType scorecardInternalsType=kbase.getFactType(PMML4Helper.pmmlDefaultPackageName(),"ScoreCard");
  FactType scorecardOutputType=kbase.getFactType("org.drools.scorecards.example","SampleScoreOutput");
  Object scorecard=scorecardType.newInstance();
  scorecardType.set(scorecard,"age",10);
  session.insert(scorecard);
  session.fireAllRules();
  assertEquals(129.0,scorecardType.get(scorecard,"scorecard__calculatedScore"));
  Object scorecardInternals=session.getObjects(new ClassObjectFilter(scorecardInternalsType.getFactClass())).iterator().next();
  assertEquals(129.0,scorecardInternalsType.get(scorecardInternals,"score"));
  Map reasonCodesMap=(Map)scorecardInternalsType.get(scorecardInternals,"ranking");
  assertNotNull(reasonCodesMap);
  assertEquals(2,reasonCodesMap.size());
  assertEquals(16.0,reasonCodesMap.get("VL002"));
  assertEquals(-20.0,reasonCodesMap.get("AGE02"));
  Object scorecardOutput=session.getObjects(new ClassObjectFilter(scorecardOutputType.getFactClass())).iterator().next();
  assertEquals(129.0,scorecardOutputType.get(scorecardOutput,"calculatedScore"));
  assertEquals("VL002",scorecardOutputType.get(scorecardOutput,"reasonCode"));
  session.dispose();
  session=kbase.newKieSession();
  scorecard=scorecardType.newInstance();
  scorecardType.set(scorecard,"age",0);
  scorecardType.set(scorecard,"occupation","SKYDIVER");
  session.insert(scorecard);
  session.fireAllRules();
  assertEquals(99.0,scorecardType.get(scorecard,"scorecard__calculatedScore"));
  scorecardInternals=session.getObjects(new ClassObjectFilter(scorecardInternalsType.getFactClass())).iterator().next();
  System.out.println(scorecardInternals);
  assertEquals(99.0,scorecardInternalsType.get(scorecardInternals,"score"));
  reasonCodesMap=(Map)scorecardInternalsType.get(scorecardInternals,"ranking");
  assertNotNull(reasonCodesMap);
  assertEquals(3,reasonCodesMap.size());
  assertEquals(109.0,reasonCodesMap.get("OCC01"));
  assertEquals(16.0,reasonCodesMap.get("VL002"));
  assertEquals(0.0,reasonCodesMap.get("AGE01"));
  scorecardOutput=session.getObjects(new ClassObjectFilter(scorecardOutputType.getFactClass())).iterator().next();
  assertEquals(99.0,scorecardOutputType.get(scorecardOutput,"calculatedScore"));
  assertEquals("OCC01",scorecardOutputType.get(scorecardOutput,"reasonCode"));
  session.dispose();
  session=kbase.newKieSession();
  scorecard=scorecardType.newInstance();
  scorecardType.set(scorecard,"age",20);
  scorecardType.set(scorecard,"occupation","TEACHER");
  scorecardType.set(scorecard,"residenceState","AP");
  scorecardType.set(scorecard,"validLicense",true);
  session.insert(scorecard);
  session.fireAllRules();
  assertEquals(141.0,scorecardType.get(scorecard,"scorecard__calculatedScore"));
  scorecardInternals=session.getObjects(new ClassObjectFilter(scorecardInternalsType.getFactClass())).iterator().next();
  System.out.println(scorecardInternals);
  assertEquals(141.0,scorecardInternalsType.get(scorecardInternals,"score"));
  reasonCodesMap=(Map)scorecardInternalsType.get(scorecardInternals,"ranking");
  assertNotNull(reasonCodesMap);
  assertEquals(4,reasonCodesMap.size());
  assertEquals(89.0,reasonCodesMap.get("OCC02"));
  assertEquals(22.0,reasonCodesMap.get("RS001"));
  assertEquals(14.0,reasonCodesMap.get("VL001"));
  assertEquals(-30.0,reasonCodesMap.get("AGE03"));
  scorecardOutput=session.getObjects(new ClassObjectFilter(scorecardOutputType.getFactClass())).iterator().next();
  assertEquals(141.0,scorecardOutputType.get(scorecardOutput,"calculatedScore"));
  assertEquals("OCC02",scorecardOutputType.get(scorecardOutput,"reasonCode"));
  session.dispose();
}
