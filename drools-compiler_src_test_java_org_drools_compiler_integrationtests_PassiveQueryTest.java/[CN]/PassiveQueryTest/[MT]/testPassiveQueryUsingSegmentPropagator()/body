{
  String str="global java.util.List list\n" + "query Q (Integer i)\n" + "    String( this == i.toString() )\n"+ "end\n"+ "rule R1a @Propagation(IMMEDIATE) when\n"+ "    $i : Integer()\n"+ "    ?Q( $i; )\n"+ "then\n"+ "    list.add( \"R1a\" );\n"+ "end\n"+ "rule R1b @Propagation(IMMEDIATE) when\n"+ "    $i : Integer()\n"+ "    ?Q( $i; )\n"+ "    Long( intValue == $i )\n"+ "then\n"+ "    list.add( \"R1b\" );\n"+ "end\n"+ "rule R2 when\n"+ "    $i : Integer()\n"+ "    ?Q( $i; )\n"+ "then\n"+ "    list.add( \"R2\" );\n"+ "end\n";
  KieBase kbase=new KieHelper().addContent(str,ResourceType.DRL).build();
  KieSession ksession=kbase.newKieSession();
  List<String> list=new ArrayList<String>();
  ksession.setGlobal("list",list);
  ksession.insert(1L);
  FactHandle fh=ksession.insert(1);
  ksession.insert("1");
  Rete rete=((KnowledgeBaseImpl)kbase).getRete();
  LeftInputAdapterNode lia=null;
  for (  ObjectTypeNode otn : rete.getObjectTypeNodes()) {
    if (Integer.class == otn.getObjectType().getValueType().getClassType()) {
      lia=(LeftInputAdapterNode)otn.getObjectSinkPropagator().getSinks()[0];
      break;
    }
  }
  LeftTupleSink[] sinks=lia.getSinkPropagator().getSinks();
  QueryElementNode q1=(QueryElementNode)sinks[0];
  QueryElementNode q2=(QueryElementNode)sinks[1];
  InternalWorkingMemory wm=(InternalWorkingMemory)ksession;
  wm.flushPropagations();
  Memory memory1=wm.getNodeMemory(q1);
  assertTrue(memory1.getSegmentMemory().getStagedLeftTuples().isEmpty());
  ksession.fireAllRules();
  assertEquals(1,list.size());
  assertEquals("R2",list.get(0));
  list.clear();
  ksession.delete(fh);
  ksession.insert(1);
  ksession.fireAllRules();
  assertEquals(3,list.size());
}
