{
  BuildContext buildContext=(BuildContext)context.get("BuildContext");
  if (args.size() != 0) {
    String[] a=args.get(0);
    String name=a[0].trim();
    String leftInput=a[1].trim();
    String rightInput=a[2].trim();
    Class cls=null;
    LeftTupleSource leftTupleSource;
    if (leftInput.startsWith("mock")) {
      leftTupleSource=new MockTupleSource(buildContext.getNextId());
    }
 else {
      leftTupleSource=(LeftTupleSource)context.get(leftInput);
    }
    ObjectSource rightObjectSource;
    if (rightInput.startsWith("mock")) {
      String type=rightInput.substring(5,rightInput.length() - 1);
      try {
        cls=reteTesterHelper.getTypeResolver().resolveType(type);
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
      rightObjectSource=new MockObjectSource(buildContext.getNextId());
    }
 else {
      rightObjectSource=(ObjectSource)context.get(rightInput);
      ObjectSource source=rightObjectSource;
      while (!(source instanceof ObjectTypeNode)) {
        source=source.getParentObjectSource();
      }
      cls=((ClassObjectType)((ObjectTypeNode)source).getObjectType()).getClassType();
    }
    List<BetaNodeFieldConstraint> list=new ArrayList<BetaNodeFieldConstraint>();
    for (int i=1; i < args.size(); i++) {
      a=args.get(i);
      String fieldName=a[0].trim();
      String operator=a[1].trim();
      String var=a[2].trim();
      Declaration declr=(Declaration)context.get(var);
      BetaNodeFieldConstraint betaConstraint;
      try {
        betaConstraint=this.reteTesterHelper.getBoundVariableConstraint(cls,fieldName,declr,operator);
        list.add(betaConstraint);
      }
 catch (      IntrospectionException e) {
        throw new IllegalArgumentException();
      }
    }
    BetaConstraints constraints;
switch (list.size()) {
case 0:
      constraints=new EmptyBetaConstraints();
    break;
case 1:
  constraints=new SingleBetaConstraints(list.get(0),buildContext.getRuleBase().getConfiguration());
break;
case 2:
constraints=new DoubleBetaConstraints(list.toArray(new BetaNodeFieldConstraint[2]),buildContext.getRuleBase().getConfiguration());
break;
case 3:
constraints=new TripleBetaConstraints(list.toArray(new BetaNodeFieldConstraint[2]),buildContext.getRuleBase().getConfiguration());
break;
case 4:
constraints=new QuadroupleBetaConstraints(list.toArray(new BetaNodeFieldConstraint[2]),buildContext.getRuleBase().getConfiguration());
break;
default :
constraints=new DefaultBetaConstraints(list.toArray(new BetaNodeFieldConstraint[2]),buildContext.getRuleBase().getConfiguration());
break;
}
JoinNode joinNode=new JoinNode(buildContext.getNextId(),leftTupleSource,rightObjectSource,constraints,buildContext);
joinNode.attach();
context.put(name,joinNode);
}
 else {
throw new IllegalArgumentException("Cannot arguments " + args);
}
}
