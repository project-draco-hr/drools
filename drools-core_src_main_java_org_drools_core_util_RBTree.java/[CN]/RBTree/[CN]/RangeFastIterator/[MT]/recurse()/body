{
  if (depth == stack.length - 1) {
    stack=new int[depth * 3];
    stack=Arrays.copyOf(stack,stack.length * 3);
  }
  if (direction == LEFT) {
    if (next.left != null) {
      if (leftV) {
        int compResult=lowerBound.key.compareTo(next.left.key);
        if (compResult < 0) {
          compResult=upperBound.key.compareTo(next.left.key);
          if (compResult < 0) {
            next=next.left;
            depth++;
            recurse();
            return;
          }
 else {
            next=next.left;
            depth++;
            return;
          }
        }
      }
 else {
        next=next.left;
        depth++;
        int compResult=upperBound.key.compareTo(next.key);
        if (compResult < 0) {
          recurse();
        }
        return;
      }
    }
    direction=RIGHT;
    recurse();
    return;
  }
 else   if (direction == RIGHT) {
    if (next.right != null) {
      int compResult=upperBound.key.compareTo(next.right.key);
      if (compResult >= 0) {
        stack[depth]=RIGHT;
        next=next.right;
        direction=LEFT;
        depth++;
        return;
      }
 else {
        next=next.right;
        stack[depth]=RIGHT;
        direction=LEFT;
        depth++;
        recurse();
        return;
      }
    }
 else {
      stack[depth]=RIGHT;
      if (next == upperBound) {
        direction=DONE;
        next=null;
        return;
      }
    }
    direction=UP;
    recurse();
    return;
  }
 else   if (direction == UP) {
    if (depth != 0) {
      stack[depth]=LEFT;
      depth--;
      if (stack[depth] == LEFT) {
        next=next.parent;
        if (next == upperBound) {
          direction=DONE;
          next=null;
          return;
        }
        direction=RIGHT;
        recurse();
        return;
      }
 else {
        while (depth >= 0 && stack[depth] == RIGHT) {
          next=next.parent;
          if (next == upperBound) {
            direction=DONE;
            next=null;
            return;
          }
          stack[depth]=LEFT;
          depth--;
        }
        if (depth == -1) {
          leftV=false;
          if (next.parent.key.compareTo(next.key) < 0) {
            next=next.parent;
          }
          direction=UP;
          depth=0;
          recurse();
          return;
        }
 else {
          next=next.parent;
          if (next == upperBound) {
            direction=DONE;
            next=null;
            return;
          }
          direction=RIGHT;
          stack[depth]=direction;
          recurse();
        }
        return;
      }
    }
 else {
      next=next.parent;
      leftV=false;
      int compResult=lowerBound.key.compareTo(next.key);
      if (compResult > 0) {
        recurse();
      }
 else {
        direction=RIGHT;
        stack[depth]=direction;
        return;
      }
    }
  }
}
