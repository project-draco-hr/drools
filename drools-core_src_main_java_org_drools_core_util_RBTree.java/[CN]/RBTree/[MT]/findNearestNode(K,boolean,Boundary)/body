{
  Node<K,V> nearest=null;
  Node<K,V> n=root;
  while (n != null) {
    int compResult=key.compareTo(n.key);
    if (allowEqual && compResult == 0) {
      return n;
    }
    boolean accepted=acceptNode(compResult,boundary);
    if (acceptNode(compResult,boundary) && (nearest == null || acceptNode(n.key.compareTo(nearest.key),boundary))) {
      nearest=n;
    }
    if (compResult == 0) {
      n=boundary == Boundary.LOWER ? n.right : n.left;
    }
 else {
      n=accepted ^ boundary == Boundary.LOWER ? n.right : n.left;
    }
  }
  return nearest;
}
