{
  Node<K,V> n=root;
  boolean bounded=false;
  int compResult=0;
  int lastResult=0;
  Node<K,V> nearest=null;
  while (n != null) {
    compResult=key.compareTo(n.key);
    if (testEqual && compResult == 0) {
      nearest=n;
      break;
    }
 else     if (compResult < 0) {
      if (lastResult > 0) {
        bounded=true;
      }
      nearest=n;
      n=n.left;
    }
 else {
      if (lastResult < 0) {
        bounded=true;
      }
      nearest=n;
      n=n.right;
    }
    lastResult=compResult;
  }
  if (bounded) {
    if (boundary == Boundary.UPPER) {
      while (compResult < 0) {
        nearest=nearest.parent;
        compResult=key.compareTo(nearest.key);
      }
    }
 else {
      while (compResult > 0) {
        nearest=nearest.parent;
        compResult=key.compareTo(nearest.key);
      }
    }
  }
  return nearest;
}
