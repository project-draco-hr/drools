{
  int stagedTuplecount=0;
  while (lt != null) {
    if (startNode == lt) {
      return stagedTuplecount;
    }
    if (NodeTypeEnums.isBetaNode(lt)) {
      BetaNode betaNode=(BetaNode)lt;
      if (betaNode.isRightInputIsRiaNode()) {
        RightInputAdapterNode riaNode=(RightInputAdapterNode)betaNode.getRightInput();
        lt=lt.getLeftTupleSource();
        stagedTuplecount=evaluateNetwork(lt,riaNode.getLeftTupleSource(),wm);
        continue;
      }
      BetaMemory bm;
      if (NodeTypeEnums.AccumulateNode == lt.getType()) {
        bm=((AccumulateMemory)wm.getNodeMemory((AccumulateNode)lt)).getBetaMemory();
      }
 else {
        bm=(BetaMemory)wm.getNodeMemory((BetaNode)lt);
      }
      RightTupleList list=bm.getStagedAssertRightTupleList();
      int length=(list.size() < 25) ? list.size() : 25;
      RightTuple rightTuple=BetaNode.propagateAssertRightTuples(betaNode,list,length,wm);
      if (length == 25 && rightTuple.getNext() != null) {
        stagedTuplecount=stagedTuplecount + list.size() - 25;
        list.split(rightTuple,length);
      }
 else {
        list.clear();
      }
    }
 else     if (NodeTypeEnums.LeftInputAdapterNode == lt.getType()) {
      LiaNodeMemory lm=(LiaNodeMemory)wm.getNodeMemory((LeftInputAdapterNode)lt);
      LeftTupleList list=lm.getStagedLeftTupleList();
      int length=(list.size() < 25) ? list.size() : 25;
      LeftTuple leftTuple=LeftInputAdapterNode.propagateLeftTuples((LeftInputAdapterNode)lt,list,length,wm);
      if (length == 25 && leftTuple.getNext() != null) {
        stagedTuplecount=stagedTuplecount + list.size() - 25;
        list.split(leftTuple,length);
      }
 else {
        list.clear();
      }
    }
    lt=lt.getLeftTupleSource();
  }
  return stagedTuplecount;
}
