{
  try {
    this.memory.add(this.workingMemory,matches0);
    this.memory.add(this.workingMemory,matches1);
    Assert.assertEquals("Memory should have size 2",2,this.memory.size());
    Iterator iterator=this.memory.iterator(workingMemory,tuple0);
    Assert.assertTrue("There should be a next element",iterator.hasNext());
    ObjectMatches om0=(ObjectMatches)iterator.next();
    Assert.assertSame("The first object to return should have been matches0",matches0,om0);
    try {
      iterator.remove();
      Assert.fail("Right side memory Iterators are not supposed to support remove()");
    }
 catch (    UnsupportedOperationException uoe) {
    }
    Assert.assertEquals("Memory should have size 2",2,this.memory.size());
    Assert.assertTrue("There should be a next element",iterator.hasNext());
    ObjectMatches om1=(ObjectMatches)iterator.next();
    Assert.assertSame("The second object to return should have been matches1",matches1,om1);
    Assert.assertFalse("There should not be a next element",iterator.hasNext());
    try {
      iterator.next();
      Assert.fail("Iterator is supposed to throw an Exception when there are no more elements");
    }
 catch (    NoSuchElementException nse) {
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("Memory is not supposed to throw any exception during iteration");
  }
}
