{
  Environment env=KnowledgeBaseFactory.newEnvironment();
  env.set(EnvironmentName.ENTITY_MANAGER_FACTORY,emf);
  env.set(EnvironmentName.TRANSACTION_MANAGER,TransactionManagerServices.getTransactionManager());
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  Collection<KnowledgePackage> kpkgs=getProcessWorkItems();
  kbase.addKnowledgePackages(kpkgs);
  Properties properties=new Properties();
  properties.setProperty("drools.commandService","org.drools.persistence.session.SingleSessionCommandService");
  properties.setProperty("drools.processInstanceManagerFactory","org.drools.persistence.processinstance.JPAProcessInstanceManagerFactory");
  properties.setProperty("drools.workItemManagerFactory","org.drools.persistence.processinstance.JPAWorkItemManagerFactory");
  properties.setProperty("drools.processSignalManagerFactory","org.drools.persistence.processinstance.JPASignalManagerFactory");
  SessionConfiguration config=new SessionConfiguration(properties);
  SingleSessionCommandService service=new SingleSessionCommandService(kbase,config,env);
  int sessionId=service.getSessionId();
  StartProcessCommand startProcessCommand=new StartProcessCommand();
  startProcessCommand.setProcessId("org.drools.test.TestProcess");
  ProcessInstance processInstance=service.execute(startProcessCommand);
  System.out.println("Started process instance " + processInstance.getId());
  TestWorkItemHandler handler=TestWorkItemHandler.getInstance();
  WorkItem workItem=handler.getWorkItem();
  assertNotNull(workItem);
  service.dispose();
  service=new SingleSessionCommandService(sessionId,kbase,config,env);
  GetProcessInstanceCommand getProcessInstanceCommand=new GetProcessInstanceCommand();
  getProcessInstanceCommand.setProcessInstanceId(processInstance.getId());
  processInstance=service.execute(getProcessInstanceCommand);
  assertNotNull(processInstance);
  service.dispose();
  service=new SingleSessionCommandService(sessionId,kbase,config,env);
  CompleteWorkItemCommand completeWorkItemCommand=new CompleteWorkItemCommand();
  completeWorkItemCommand.setWorkItemId(workItem.getId());
  service.execute(completeWorkItemCommand);
  workItem=handler.getWorkItem();
  assertNotNull(workItem);
  service.dispose();
  service=new SingleSessionCommandService(sessionId,kbase,config,env);
  getProcessInstanceCommand=new GetProcessInstanceCommand();
  getProcessInstanceCommand.setProcessInstanceId(processInstance.getId());
  processInstance=service.execute(getProcessInstanceCommand);
  assertNotNull(processInstance);
  service.dispose();
  service=new SingleSessionCommandService(sessionId,kbase,config,env);
  completeWorkItemCommand=new CompleteWorkItemCommand();
  completeWorkItemCommand.setWorkItemId(workItem.getId());
  service.execute(completeWorkItemCommand);
  workItem=handler.getWorkItem();
  assertNotNull(workItem);
  service.dispose();
  service=new SingleSessionCommandService(sessionId,kbase,config,env);
  getProcessInstanceCommand=new GetProcessInstanceCommand();
  getProcessInstanceCommand.setProcessInstanceId(processInstance.getId());
  processInstance=service.execute(getProcessInstanceCommand);
  assertNotNull(processInstance);
  service.dispose();
  service=new SingleSessionCommandService(sessionId,kbase,config,env);
  completeWorkItemCommand=new CompleteWorkItemCommand();
  completeWorkItemCommand.setWorkItemId(workItem.getId());
  service.execute(completeWorkItemCommand);
  workItem=handler.getWorkItem();
  assertNull(workItem);
  service.dispose();
  service=new SingleSessionCommandService(sessionId,kbase,config,env);
  getProcessInstanceCommand=new GetProcessInstanceCommand();
  getProcessInstanceCommand.setProcessInstanceId(processInstance.getId());
  processInstance=service.execute(getProcessInstanceCommand);
  assertNull(processInstance);
  service.dispose();
}
