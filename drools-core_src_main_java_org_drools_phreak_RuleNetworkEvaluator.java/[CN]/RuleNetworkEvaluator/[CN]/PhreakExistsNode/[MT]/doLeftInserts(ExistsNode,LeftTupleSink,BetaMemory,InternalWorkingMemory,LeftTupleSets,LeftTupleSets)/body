{
  LeftTupleMemory ltm=bm.getLeftTupleMemory();
  RightTupleMemory rtm=bm.getRightTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=existsNode.getRawConstraints();
  for (LeftTuple leftTuple=srcLeftTuples.getInsertFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    FastIterator it=existsNode.getRightIterator(rtm);
    PropagationContext context=leftTuple.getPropagationContext();
    boolean useLeftMemory=useLeftMemory(existsNode,leftTuple);
    constraints.updateFromTuple(contextEntry,wm,leftTuple);
    findLeftTupleBlocker(existsNode,rtm,contextEntry,constraints,leftTuple,it,context,useLeftMemory);
    if (leftTuple.getBlocker() != null) {
      trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,sink,useLeftMemory));
    }
 else     if (useLeftMemory) {
      ltm.add(leftTuple);
    }
    leftTuple.clearStaged();
    leftTuple=next;
  }
  constraints.resetTuple(contextEntry);
}
