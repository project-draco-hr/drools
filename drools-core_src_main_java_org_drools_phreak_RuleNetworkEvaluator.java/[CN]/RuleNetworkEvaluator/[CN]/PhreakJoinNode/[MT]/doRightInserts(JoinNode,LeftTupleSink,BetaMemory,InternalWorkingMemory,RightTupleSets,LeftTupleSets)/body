{
  LeftTupleMemory ltm=bm.getLeftTupleMemory();
  RightTupleMemory rtm=bm.getRightTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=joinNode.getRawConstraints();
  for (RightTuple rightTuple=srcRightTuples.getInsertFirst(); rightTuple != null; ) {
    RightTuple next=rightTuple.getStagedNext();
    rtm.add(rightTuple);
    FastIterator it=joinNode.getLeftIterator(ltm);
    PropagationContext context=rightTuple.getPropagationContext();
    constraints.updateFromFactHandle(contextEntry,wm,rightTuple.getFactHandle());
    for (LeftTuple leftTuple=joinNode.getFirstLeftTuple(rightTuple,ltm,context,it); leftTuple != null; leftTuple=(LeftTuple)it.next(leftTuple)) {
      if (leftTuple.getStagedType() == LeftTuple.UPDATE) {
        continue;
      }
      if (constraints.isAllowedCachedRight(contextEntry,leftTuple)) {
        trgLeftTuples.addInsert(sink.createLeftTuple(leftTuple,rightTuple,null,null,sink,true));
      }
    }
    rightTuple.clearStaged();
    rightTuple=next;
  }
  constraints.resetFactHandle(contextEntry);
}
