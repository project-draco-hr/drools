{
  List<String> list=new LinkedList<String>();
  if (length == -1)   length=parm.length;
  int adepth=0;
  int start=offset;
  int i=offset;
  int end=i + length;
  for (; i < end; i++) {
switch (parm[i]) {
case '[':
case '{':
      if (adepth++ == 0)       start=i;
    continue;
case ']':
case '}':
  if (--adepth == 0) {
    list.add(new String(parm,start,i - start + 1));
    while (isWhitespace(parm[i]))     i++;
    start=i + 1;
  }
continue;
case ',':
if (adepth != 0) continue;
if (i > start) {
while (isWhitespace(parm[start])) start++;
list.add(new String(parm,start,i - start));
}
while (isWhitespace(parm[i])) i++;
start=i + 1;
}
}
if (start < length && i > start) {
String s=new String(parm,start,i - start).trim();
if (s.length() > 0) list.add(s);
}
 else if (list.size() == 0) {
String s=new String(parm,start,length).trim();
if (s.length() > 0) list.add(s);
}
return list.toArray(new String[list.size()]);
}
