{
  Class[] parmTypes;
  Method bestCandidate=null;
  int bestScore=0;
  int score=0;
  Class[] targetParms=new Class[arguments.length];
  for (int i=0; i < arguments.length; i++)   targetParms[i]=arguments[i] != null ? arguments[i].getClass() : Object.class;
  Integer hash=createClassSignatureHash(targetParms);
  if (RESOLVED_METH_CACHE.containsKey(method) && RESOLVED_METH_CACHE.get(method).containsKey(hash))   return RESOLVED_METH_CACHE.get(method).get(hash);
  for (  Method meth : methods) {
    if (method.equals(meth.getName())) {
      if ((parmTypes=meth.getParameterTypes()).length != arguments.length)       continue;
 else       if (arguments.length == 0 && parmTypes.length == 0)       return meth;
      for (int i=0; i < arguments.length; i++) {
        if (parmTypes[i].isPrimitive() && boxPrimitive(parmTypes[i]) == targetParms[i])         score+=3;
 else         if (parmTypes[i] == targetParms[i])         score+=4;
 else         if (parmTypes[i].isAssignableFrom(targetParms[i]))         score+=2;
 else         if (canConvert(parmTypes[i],targetParms[i]))         score+=1;
 else {
          score=0;
          break;
        }
      }
      if (score != 0 && score > bestScore) {
        bestCandidate=meth;
        bestScore=score;
      }
      score=0;
    }
  }
  if (bestCandidate != null) {
    if (!RESOLVED_METH_CACHE.containsKey(method))     RESOLVED_METH_CACHE.put(method,new WeakHashMap<Integer,Method>());
    RESOLVED_METH_CACHE.get(method).put(hash,bestCandidate);
  }
  return bestCandidate;
}
