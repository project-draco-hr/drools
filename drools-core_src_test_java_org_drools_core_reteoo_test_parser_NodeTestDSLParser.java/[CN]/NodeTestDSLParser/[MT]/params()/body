{
  NodeTestDSLParser.params_return retval=new NodeTestDSLParser.params_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token COMMA22=null;
  NodeTestDSLParser.param_chunk_return param_chunk21=null;
  NodeTestDSLParser.param_chunk_return param_chunk23=null;
  Object COMMA22_tree=null;
  RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
  RewriteRuleSubtreeStream stream_param_chunk=new RewriteRuleSubtreeStream(adaptor,"rule param_chunk");
  try {
{
      pushFollow(FOLLOW_param_chunk_in_params395);
      param_chunk21=param_chunk();
      state._fsp--;
      stream_param_chunk.add(param_chunk21.getTree());
      loop9:       do {
        int alt9=2;
        int LA9_0=input.LA(1);
        if ((LA9_0 == COMMA)) {
          alt9=1;
        }
switch (alt9) {
case 1:
{
            COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_params398);
            stream_COMMA.add(COMMA22);
            pushFollow(FOLLOW_param_chunk_in_params400);
            param_chunk23=param_chunk();
            state._fsp--;
            stream_param_chunk.add(param_chunk23.getTree());
          }
        break;
default :
      break loop9;
  }
}
 while (true);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(VT_PARAMS,"VT_PARAMS"),root_1);
    if (!(stream_param_chunk.hasNext())) {
      throw new RewriteEarlyExitException();
    }
    while (stream_param_chunk.hasNext()) {
      adaptor.addChild(root_1,stream_param_chunk.nextTree());
    }
    stream_param_chunk.reset();
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
