{
  NodeTestDSLParser.teardown_return retval=new NodeTestDSLParser.teardown_return();
  retval.start=input.LT(1);
  Object root_0=null;
  NodeTestDSLParser.teardown_key_return teardown_key13=null;
  NodeTestDSLParser.step_return step14=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_teardown_key_in_teardown317);
      teardown_key13=teardown_key();
      state._fsp--;
      root_0=(Object)adaptor.becomeRoot(teardown_key13.getTree(),root_0);
      loop6:       do {
        int alt6=2;
        int LA6_0=input.LA(1);
        if ((LA6_0 == ID)) {
          int LA6_1=input.LA(2);
          if ((LA6_1 == COLON)) {
            alt6=1;
          }
        }
switch (alt6) {
case 1:
{
            pushFollow(FOLLOW_step_in_teardown320);
            step14=step();
            state._fsp--;
            adaptor.addChild(root_0,step14.getTree());
          }
        break;
default :
      break loop6;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
