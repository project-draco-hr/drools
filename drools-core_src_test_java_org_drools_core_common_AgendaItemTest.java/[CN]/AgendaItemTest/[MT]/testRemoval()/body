{
  ReteooRuleBase rbase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  StatefulSession wm=rbase.newStatefulSession();
  DefaultAgenda agenda=(DefaultAgenda)wm.getAgenda();
  AgendaItem item1=agenda.createAgendaItem(new RuleTerminalNodeLeftTuple(),0,null,null,null,null,null);
  AgendaItem item2=agenda.createAgendaItem(new RuleTerminalNodeLeftTuple(),0,null,null,null,null,null);
  AgendaItem item3=agenda.createAgendaItem(new RuleTerminalNodeLeftTuple(),0,null,null,null,null,null);
  DefaultKnowledgeHelper kcontext=new DefaultKnowledgeHelper(wm);
  kcontext.setActivation(item1);
  kcontext.blockMatch(item2);
  kcontext.blockMatch(item3);
  kcontext.reset();
  kcontext.setActivation(item2);
  kcontext.blockMatch(item3);
  item1.removeAllBlockersAndBlocked(agenda);
  assertEquals(0,item2.getBlockers().size());
  assertEquals(1,item2.getBlocked().size());
  assertEquals(1,item3.getBlockers().size());
  assertNull(item3.getBlocked());
  assertSame(item2,((LogicalDependency)item2.getBlocked().getFirst()).getJustifier());
  assertSame(item3,((LogicalDependency)item2.getBlocked().getFirst()).getJustified());
  item2.removeAllBlockersAndBlocked(agenda);
  assertEquals(0,item3.getBlockers().size());
  assertNull(item3.getBlocked());
  assertNull(item2.getBlocked());
  assertNull(item2.getBlocked());
  assertNull(item1.getBlocked());
  assertNull(item1.getBlocked());
  kcontext.blockMatch(item3);
  assertNull(item2.getBlockers());
  assertEquals(1,item2.getBlocked().size());
  assertEquals(1,item3.getBlockers().size());
  assertNull(item3.getBlocked());
  assertSame(item2,((LogicalDependency)item2.getBlocked().getFirst()).getJustifier());
  assertSame(item3,((LogicalDependency)item2.getBlocked().getFirst()).getJustified());
  item3.removeAllBlockersAndBlocked(agenda);
  assertNull(item3.getBlockers());
  assertNull(item3.getBlocked());
  assertEquals(0,item2.getBlocked().size());
  assertNull(item2.getBlockers());
  assertNull(item1.getBlocked());
  assertNull(item1.getBlocked());
}
