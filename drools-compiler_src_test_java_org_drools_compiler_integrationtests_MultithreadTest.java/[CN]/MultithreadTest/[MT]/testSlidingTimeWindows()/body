{
  String str="package org.drools\n" + "global java.util.List list; \n" + "import org.drools.compiler.StockTick; \n"+ ""+ "declare StockTick @role(event) end\n"+ ""+ "rule R\n"+ "when\n"+ " accumulate( $st : StockTick() over window:time(400ms)\n"+ "             from entry-point X,\n"+ "             $c : count(1) )"+ "then\n"+ "   list.add( $c ); \n"+ "end \n";
  final List<Exception> errors=new ArrayList<Exception>();
  KieBaseConfiguration kbconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kbconf.setOption(EventProcessingOption.STREAM);
  kbconf.setOption(RuleEngineOption.PHREAK);
  KnowledgeBase kbase=loadKnowledgeBaseFromString(kbconf,str);
  final StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  final EntryPoint ep=ksession.getEntryPoint("X");
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  Executor executor=Executors.newCachedThreadPool(new ThreadFactory(){
    public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setDaemon(true);
      return t;
    }
  }
);
  final int RUN_TIME=5000;
  final int THREAD_NR=2;
  CompletionService<Boolean> ecs=new ExecutorCompletionService<Boolean>(executor);
  ecs.submit(new Callable<Boolean>(){
    public Boolean call() throws Exception {
      try {
        ksession.fireUntilHalt();
        return true;
      }
 catch (      Exception e) {
        errors.add(e);
        e.printStackTrace();
        return false;
      }
    }
  }
);
  for (int i=0; i < THREAD_NR; i++) {
    ecs.submit(new Callable<Boolean>(){
      public Boolean call() throws Exception {
        try {
          final String s=Thread.currentThread().getName();
          long endTS=System.currentTimeMillis() + RUN_TIME;
          int j=0;
          long lastTimeInserted=-1;
          while (System.currentTimeMillis() < endTS) {
            final long currentTimeInMillis=System.currentTimeMillis();
            if (currentTimeInMillis > lastTimeInserted) {
              lastTimeInserted=currentTimeInMillis;
              ep.insert(new StockTick(j++,s,0.0,0));
            }
          }
          return true;
        }
 catch (        Exception e) {
          errors.add(e);
          e.printStackTrace();
          return false;
        }
      }
    }
);
  }
  boolean success=true;
  for (int i=0; i < THREAD_NR; i++) {
    try {
      success=ecs.take().get() && success;
    }
 catch (    Exception e) {
      errors.add(e);
    }
  }
  ksession.halt();
  try {
    success=ecs.take().get() && success;
  }
 catch (  Exception e) {
    errors.add(e);
  }
  for (  Exception e : errors) {
    e.printStackTrace();
  }
  assertTrue(errors.isEmpty());
  assertTrue(success);
  assertTrue(!list.isEmpty() && ((Number)list.get(list.size() - 1)).intValue() > 400);
  ksession.dispose();
}
