{
  final KieBase kieBase=new KieHelper().addContent(drl,ResourceType.DRL).build();
  Executor executor=Executors.newCachedThreadPool(new ThreadFactory(){
    public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setDaemon(true);
      return t;
    }
  }
);
  KieSession ksession=null;
  Callable<Boolean>[] tasks=new Callable[threadCount];
  if (newSessionForEachThread) {
    for (int i=0; i < threadCount; i++) {
      tasks[i]=getTask(objectCount,kieBase,updateFacts);
    }
  }
 else {
    ksession=kieBase.newKieSession();
    for (int i=0; i < threadCount; i++) {
      tasks[i]=getTask(objectCount,ksession,false,updateFacts);
    }
  }
  CompletionService<Boolean> ecs=new ExecutorCompletionService<Boolean>(executor);
  for (  Callable<Boolean> task : tasks) {
    ecs.submit(task);
  }
  int successCounter=0;
  for (int i=0; i < threadCount; i++) {
    try {
      if (ecs.take().get()) {
        successCounter++;
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  assertEquals(threadCount,successCounter);
  if (ksession != null) {
    ksession.dispose();
  }
}
