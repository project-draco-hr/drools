{
  boolean existSubNetwort=false;
  final GroupElement not=(GroupElement)rce;
  final int currentPatternIndex=context.getCurrentPatternOffset();
  final LeftTupleSource tupleSource=context.getTupleSource();
  final RuleConditionElement child=not.getChildren().get(0);
  final ReteooComponentBuilder builder=utils.getBuilderFor(child);
  builder.build(context,utils,child);
  if (context.getObjectSource() == null && context.getTupleSource() != null) {
    RightInputAdapterNode riaNode=context.getComponentFactory().getNodeFactoryService().buildRightInputNode(context.getNextId(),context.getTupleSource(),tupleSource,context);
    context.setObjectSource(utils.attachNode(context,riaNode));
    context.setTupleSource(tupleSource);
    final TupleStartEqualsConstraint constraint=TupleStartEqualsConstraint.getInstance();
    final List<BetaNodeFieldConstraint> predicates=new ArrayList<BetaNodeFieldConstraint>();
    predicates.add(constraint);
    context.setBetaconstraints(predicates);
    existSubNetwort=true;
  }
  NodeFactory nfactory=context.getComponentFactory().getNodeFactoryService();
  if (!context.getKnowledgeBase().getConfiguration().isPhreakEnabled() && !context.isTupleMemoryEnabled() && existSubNetwort) {
    context.setTupleSource(utils.attachNode(context,nfactory.buildQueryRiaFixerNode(context.getNextId(),context.getTupleSource(),context)));
  }
  final BetaConstraints betaConstraints=utils.createBetaNodeConstraint(context,context.getBetaconstraints(),false);
  NotNode node=context.getComponentFactory().getNodeFactoryService().buildNotNode(context.getNextId(),context.getTupleSource(),context.getObjectSource(),betaConstraints,context);
  node.setEmptyBetaConstraints(context.getBetaconstraints().isEmpty());
  context.setTupleSource(utils.attachNode(context,node));
  context.setBetaconstraints(null);
  context.setObjectSource(null);
  context.setCurrentPatternOffset(currentPatternIndex);
}
