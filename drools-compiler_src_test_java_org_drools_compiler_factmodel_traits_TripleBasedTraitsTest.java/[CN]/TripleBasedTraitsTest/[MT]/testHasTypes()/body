{
  String source="org/drools/compiler/factmodel/traits/testTraitDon.drl";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  Resource res=ResourceFactory.newClassPathResource(source);
  assertNotNull(res);
  kbuilder.add(res,ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kb=KnowledgeBaseFactory.newKnowledgeBase();
  kb.addKnowledgePackages(kbuilder.getKnowledgePackages());
  TraitFactory traitBuilder=((ReteooRuleBase)((KnowledgeBaseImpl)kb).getRuleBase()).getConfiguration().getComponentFactory().getTraitFactory();
  TraitFactory.setMode(TraitFactory.VirtualPropertyMode.TRIPLES,kb);
  try {
    FactType impClass=kb.getFactType("org.drools.compiler.trait.test","Imp");
    TraitableBean imp=(TraitableBean)impClass.newInstance();
    impClass.set(imp,"name","aaabcd");
    Class trait=kb.getFactType("org.drools.compiler.trait.test","Student").getFactClass();
    Class trait2=kb.getFactType("org.drools.compiler.trait.test","Role").getFactClass();
    assertNotNull(trait);
    TraitProxy proxy=(TraitProxy)traitBuilder.getProxy(imp,trait);
    Thing thing=traitBuilder.getProxy(imp,Thing.class);
    TraitableBean core=(TraitableBean)proxy.getObject();
    TraitProxy proxy2=(TraitProxy)traitBuilder.getProxy(imp,trait);
    Thing thing2=traitBuilder.getProxy(imp,Thing.class);
    assertSame(proxy,proxy2);
    assertSame(thing,thing2);
    assertEquals(2,core.getTraits().size());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
