{
  final RuleImpl rule=new RuleImpl("assignFirstSeat");
  final Pattern contextPattern=new Pattern(0,this.contextType,"context");
  contextPattern.addConstraint(getLiteralConstraint(contextPattern,"state",Context.START_UP));
  rule.addPattern(contextPattern);
  final Declaration contextDeclaration=rule.getDeclaration("context");
  final Pattern guestPattern=new Pattern(1,this.guestType,"guest");
  rule.addPattern(guestPattern);
  final Declaration guestDeclaration=rule.getDeclaration("guest");
  final Pattern countPattern=new Pattern(2,this.countType,"count");
  rule.addPattern(countPattern);
  final Declaration countDeclaration=rule.getDeclaration("count");
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        RuleImpl rule=drools.getRule();
        LeftTuple tuple=(LeftTuple)drools.getTuple();
        Guest guest=(Guest)drools.get(guestDeclaration);
        Context context=(Context)drools.get(contextDeclaration);
        Count count=(Count)drools.get(countDeclaration);
        String guestName=guest.getName();
        Seating seating=new Seating(count.getValue(),0,true,1,guestName,1,guestName);
        drools.insert(seating);
        Path path=new Path(count.getValue(),1,guestName);
        drools.insert(path);
        count.setValue(count.getValue());
        drools.update(tuple.get(countDeclaration),count);
        context.setState(Context.ASSIGN_SEATS);
        drools.update(tuple.get(contextDeclaration));
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
    public String getName(){
      return "default";
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
