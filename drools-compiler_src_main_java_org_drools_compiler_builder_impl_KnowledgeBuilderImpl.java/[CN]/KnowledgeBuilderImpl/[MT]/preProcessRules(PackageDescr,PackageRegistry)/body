{
  Map<String,RuleBuildContext> ruleCxts=buildRuleBuilderContext(packageDescr.getRules());
  InternalKnowledgePackage pkg=pkgRegistry.getPackage();
  if (this.kBase != null) {
    boolean needsRemoval=false;
    for (    org.kie.api.definition.rule.Rule rule : pkg.getRules()) {
      if (filterAcceptsRemoval(ResourceChange.Type.RULE,rule.getPackageName(),rule.getName())) {
        needsRemoval=true;
        break;
      }
    }
    if (!needsRemoval) {
      for (      RuleDescr ruleDescr : packageDescr.getRules()) {
        if (filterAccepts(ResourceChange.Type.RULE,ruleDescr.getNamespace(),ruleDescr.getName())) {
          if (pkg.getRule(ruleDescr.getName()) != null) {
            needsRemoval=true;
            break;
          }
        }
      }
    }
    if (needsRemoval) {
      try {
        this.kBase.lock();
        for (        org.kie.api.definition.rule.Rule rule : pkg.getRules()) {
          if (filterAcceptsRemoval(ResourceChange.Type.RULE,rule.getPackageName(),rule.getName())) {
            this.kBase.removeRule(pkg,pkg.getRule(rule.getName()));
            pkg.removeRule(((RuleImpl)rule));
          }
        }
        List<RuleImpl> rulesToBeRemoved=new ArrayList<RuleImpl>();
        for (        RuleDescr ruleDescr : packageDescr.getRules()) {
          if (filterAccepts(ResourceChange.Type.RULE,ruleDescr.getNamespace(),ruleDescr.getName())) {
            RuleImpl rule=(RuleImpl)pkg.getRule(ruleDescr.getName());
            if (rule != null) {
              rulesToBeRemoved.add(rule);
            }
          }
        }
        if (!rulesToBeRemoved.isEmpty()) {
          kBase.removeRules(pkg,rulesToBeRemoved);
        }
      }
  finally {
        this.kBase.unlock();
      }
    }
  }
  for (  RuleDescr ruleDescr : packageDescr.getRules()) {
    if (filterAccepts(ResourceChange.Type.RULE,ruleDescr.getNamespace(),ruleDescr.getName())) {
      RuleBuildContext ruleBuildContext=ruleCxts.get(ruleDescr.getName());
      ruleBuilder.preProcess(ruleBuildContext);
      pkg.addRule(ruleBuildContext.getRule());
    }
  }
  return ruleCxts;
}
