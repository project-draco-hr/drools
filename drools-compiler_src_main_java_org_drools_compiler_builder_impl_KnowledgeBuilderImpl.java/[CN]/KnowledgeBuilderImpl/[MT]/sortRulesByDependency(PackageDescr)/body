{
  PackageRegistry pkgRegistry=this.pkgRegistryMap.get(packageDescr.getNamespace());
  InternalKnowledgePackage pkg=pkgRegistry.getPackage();
  List<RuleDescr> roots=new LinkedList<RuleDescr>();
  Map<String,List<RuleDescr>> children=new HashMap<String,List<RuleDescr>>();
  LinkedHashMap<String,RuleDescr> sorted=new LinkedHashMap<String,RuleDescr>();
  List<RuleDescr> queries=new ArrayList<RuleDescr>();
  List<String> compiledRules=new ArrayList<String>();
  for (  RuleDescr ruleDescr : packageDescr.getRules()) {
    if (ruleDescr.isQuery()) {
      queries.add(ruleDescr);
    }
 else     if (!ruleDescr.hasParent()) {
      roots.add(ruleDescr);
    }
 else {
      if (pkg.getRule(ruleDescr.getParentName()) != null) {
        compiledRules.add(ruleDescr.getParentName());
      }
      List<RuleDescr> childz=children.get(ruleDescr.getParentName());
      if (childz == null) {
        childz=new ArrayList<RuleDescr>();
        children.put(ruleDescr.getParentName(),childz);
      }
      childz.add(ruleDescr);
    }
  }
  if (children.isEmpty()) {
    if (!queries.isEmpty()) {
      packageDescr.getRules().removeAll(queries);
      packageDescr.getRules().addAll(0,queries);
    }
    return;
  }
  for (  String compiledRule : compiledRules) {
    List<RuleDescr> childz=children.remove(compiledRule);
    roots.addAll(childz);
  }
  while (!roots.isEmpty()) {
    RuleDescr root=roots.remove(0);
    sorted.put(root.getName(),root);
    List<RuleDescr> childz=children.remove(root.getName());
    if (childz != null) {
      roots.addAll(childz);
    }
  }
  reportHierarchyErrors(children,sorted);
  packageDescr.getRules().clear();
  packageDescr.getRules().addAll(queries);
  for (  RuleDescr descr : sorted.values()) {
    packageDescr.getRules().add(descr);
  }
}
