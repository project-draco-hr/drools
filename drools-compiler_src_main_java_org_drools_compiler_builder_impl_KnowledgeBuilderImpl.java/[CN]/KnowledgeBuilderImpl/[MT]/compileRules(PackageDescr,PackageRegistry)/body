{
  List<FunctionDescr> functions=packageDescr.getFunctions();
  if (!functions.isEmpty()) {
    for (    FunctionDescr functionDescr : functions) {
      if (isEmpty(functionDescr.getNamespace())) {
        functionDescr.setNamespace(packageDescr.getNamespace());
      }
      functionDescr.setDialect("java");
      preCompileAddFunction(functionDescr);
    }
    for (    FunctionDescr functionDescr : functions) {
      if (filterAccepts(ResourceChange.Type.FUNCTION,functionDescr.getNamespace(),functionDescr.getName())) {
        addFunction(functionDescr);
      }
    }
    compileAll();
    for (    FunctionDescr functionDescr : functions) {
      if (filterAccepts(ResourceChange.Type.FUNCTION,functionDescr.getNamespace(),functionDescr.getName())) {
        postCompileAddFunction(functionDescr);
      }
    }
  }
  sortRulesByDependency(packageDescr);
  for (  RuleDescr ruleDescr : packageDescr.getRules()) {
    if (isEmpty(ruleDescr.getNamespace())) {
      ruleDescr.setNamespace(packageDescr.getNamespace());
    }
    Map<String,AttributeDescr> pkgAttributes=packageAttributes.get(packageDescr.getNamespace());
    inheritPackageAttributes(pkgAttributes,ruleDescr);
    if (isEmpty(ruleDescr.getDialect())) {
      ruleDescr.addAttribute(new AttributeDescr("dialect",pkgRegistry.getDialect()));
    }
  }
  Map<String,RuleBuildContext> ruleCxts=preProcessRules(packageDescr,pkgRegistry);
  for (  RuleDescr ruleDescr : packageDescr.getRules()) {
    if (filterAccepts(ResourceChange.Type.RULE,ruleDescr.getNamespace(),ruleDescr.getName())) {
      addRule(ruleCxts.get(ruleDescr.getName()));
    }
  }
}
