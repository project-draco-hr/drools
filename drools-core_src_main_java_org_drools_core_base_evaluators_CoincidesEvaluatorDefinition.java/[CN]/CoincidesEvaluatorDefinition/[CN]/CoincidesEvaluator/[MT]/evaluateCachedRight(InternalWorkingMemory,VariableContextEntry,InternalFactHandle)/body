{
  if (context.rightNull || context.declaration.getExtractor().isNullValue(workingMemory,left.getObject())) {
    return false;
  }
  long rightStartTS, rightEndTS;
  long leftStartTS, leftEndTS;
  rightStartTS=((TemporalVariableContextEntry)context).startTS;
  rightEndTS=((TemporalVariableContextEntry)context).endTS;
  if (context.declaration.getExtractor().isSelfReference()) {
    leftStartTS=((EventFactHandle)left).getStartTimestamp();
    leftEndTS=((EventFactHandle)left).getEndTimestamp();
  }
 else {
    leftStartTS=context.declaration.getExtractor().getLongValue(workingMemory,left.getObject());
    leftEndTS=leftStartTS;
  }
  long distStart=Math.abs(rightStartTS - leftStartTS);
  long distEnd=Math.abs(rightEndTS - leftEndTS);
  return this.getOperator().isNegated() ^ (distStart <= this.startDev && distEnd <= this.endDev);
}
