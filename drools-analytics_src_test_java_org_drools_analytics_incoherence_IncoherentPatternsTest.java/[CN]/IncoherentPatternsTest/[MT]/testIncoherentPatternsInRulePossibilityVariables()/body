{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Patterns.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Incoherent Patterns in rule possibility, variables"));
  AnalyticsResult result=AnalyticsResultFactory.createAnalyticsResult();
  Collection<? extends Object> testData=getTestData(this.getClass().getResourceAsStream("PatternsTest.drl"),result.getAnalyticsData());
  session.setGlobal("result",result);
  session.executeWithResults(testData);
  Iterator<AnalyticsMessageBase> iter=result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).iterator();
  Set<String> rulesThatHadErrors=new HashSet<String>();
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof AnalyticsMessage) {
      AnalyticsRule rule=(AnalyticsRule)((AnalyticsMessage)o).getFaulty();
      rulesThatHadErrors.add(rule.getRuleName());
    }
  }
  assertTrue(rulesThatHadErrors.remove("Incoherent patterns 3"));
  assertTrue(rulesThatHadErrors.remove("Incoherent patterns 4"));
  assertTrue(rulesThatHadErrors.remove("Incoherent patterns 5"));
  assertTrue(rulesThatHadErrors.remove("Incoherent patterns 6"));
  if (!rulesThatHadErrors.isEmpty()) {
    for (    String string : rulesThatHadErrors) {
      fail("Rule " + string + " caused an error.");
    }
  }
}
