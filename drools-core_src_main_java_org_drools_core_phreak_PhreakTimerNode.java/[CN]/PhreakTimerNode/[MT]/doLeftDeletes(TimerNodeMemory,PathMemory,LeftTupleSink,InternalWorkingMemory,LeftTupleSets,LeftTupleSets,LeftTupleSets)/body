{
  TimerService timerService=wm.getTimerService();
  LeftTupleList leftTuples=tm.getInsertOrUpdateLeftTuples();
  LeftTupleList deletes=tm.getDeleteLeftTuples();
  if (!deletes.isEmpty()) {
    for (LeftTuple leftTuple=deletes.getFirst(); leftTuple != null; ) {
      LeftTuple next=(LeftTuple)leftTuple.getNext();
      srcLeftTuples.addDelete(leftTuple);
      if (log.isTraceEnabled()) {
        log.trace("Timer Add Postponed Delete {}",leftTuple);
      }
      leftTuple.clear();
      leftTuple=next;
    }
    deletes.clear();
  }
  for (LeftTuple leftTuple=srcLeftTuples.getDeleteFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    DefaultJobHandle jobHandle=(DefaultJobHandle)leftTuple.getObject();
    if (jobHandle != null) {
      timerService.removeJob(jobHandle);
    }
    org.drools.core.spi.PropagationContext pctx=leftTuple.getPropagationContext();
    pctx=RuleTerminalNode.findMostRecentPropagationContext(leftTuple,pctx);
    if (leftTuple.getMemory() != null) {
      leftTuples.remove(leftTuple);
      if (pctx.getType() == PropagationContext.EXPIRATION) {
        doPropagateChildLeftTuple(sink,trgLeftTuples,stagedLeftTuples,leftTuple);
        tm.getDeleteLeftTuples().add(leftTuple);
        pmem.doLinkRule(wm);
        if (log.isTraceEnabled()) {
          log.trace("Timer Postponed Delete {}",leftTuple);
        }
      }
    }
    if (leftTuple.getMemory() == null) {
      LeftTuple childLeftTuple=leftTuple.getFirstChild();
      if (childLeftTuple != null) {
switch (childLeftTuple.getStagedType()) {
case LeftTuple.INSERT:
          stagedLeftTuples.removeInsert(childLeftTuple);
        break;
case LeftTuple.UPDATE:
      stagedLeftTuples.removeUpdate(childLeftTuple);
    break;
}
childLeftTuple.setPropagationContext(leftTuple.getPropagationContext());
trgLeftTuples.addDelete(childLeftTuple);
if (log.isTraceEnabled()) {
  log.trace("Timer Delete {}",leftTuple);
}
}
}
leftTuple.clearStaged();
leftTuple=next;
}
}
