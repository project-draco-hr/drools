{
  TimerService timerService=wm.getTimerService();
  LeftTupleList leftTuples=tm.getInsertOrUpdateLeftTuples();
synchronized (leftTuples) {
    LeftTupleList deletes=tm.getDeleteLeftTuples();
    if (!deletes.isEmpty()) {
      for (LeftTuple leftTuple=deletes.getFirst(); leftTuple != null; ) {
        LeftTuple next=(LeftTuple)leftTuple.getNext();
        srcLeftTuples.addDelete(leftTuple);
        log.trace("Timer Add Postponed Delete {}",leftTuple);
        leftTuple.clear();
        leftTuple=next;
      }
      deletes.clear();
    }
    for (LeftTuple leftTuple=srcLeftTuples.getDeleteFirst(); leftTuple != null; ) {
      LeftTuple next=leftTuple.getStagedNext();
      DefaultJobHandle jobHandle=(DefaultJobHandle)leftTuple.getObject();
      if (jobHandle != null) {
        timerService.removeJob(jobHandle);
      }
      if (leftTuple.getMemory() != null) {
        leftTuples.remove(leftTuple);
        doPropagateChildLeftTuple(sink,trgLeftTuples,stagedLeftTuples,leftTuple);
        tm.getDeleteLeftTuples().add(leftTuple);
        pmem.doLinkRule(wm);
        log.trace("Timer Postponed Delete {}",leftTuple);
      }
 else {
        LeftTuple childLeftTuple=leftTuple.getFirstChild();
        if (childLeftTuple != null) {
switch (childLeftTuple.getStagedType()) {
case LeftTuple.INSERT:
            stagedLeftTuples.removeInsert(childLeftTuple);
          break;
case LeftTuple.UPDATE:
        stagedLeftTuples.removeUpdate(childLeftTuple);
      break;
  }
  childLeftTuple.setPropagationContext(leftTuple.getPropagationContext());
  trgLeftTuples.addDelete(childLeftTuple);
  log.trace("Timer Delete {}",leftTuple);
}
}
leftTuple.clearStaged();
leftTuple=next;
}
}
}
