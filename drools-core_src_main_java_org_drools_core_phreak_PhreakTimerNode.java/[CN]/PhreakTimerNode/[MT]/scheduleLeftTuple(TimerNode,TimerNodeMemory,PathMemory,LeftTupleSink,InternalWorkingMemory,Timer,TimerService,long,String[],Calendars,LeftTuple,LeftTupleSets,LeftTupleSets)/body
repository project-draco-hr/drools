{
  DefaultJobHandle jobHandle=(DefaultJobHandle)leftTuple.getObject();
  Trigger trigger=timer.createTrigger(timestamp,leftTuple,jobHandle,calendarNames,calendars,timerNode.getDeclarations(),wm);
  if (trigger.hasNextFireTime().getTime() <= timestamp) {
    doPropagateChildLeftTuple(sink,trgLeftTuples,stagedLeftTuples,leftTuple);
    trigger.nextFireTime();
    if (trigger.hasNextFireTime().getTime() <= timestamp) {
      throw new IllegalStateException("Trigger.nextFireTime is not increasing");
    }
  }
  TimerNodeJob job=new TimerNodeJob();
  TimerNodeJobContext jobCtx=new TimerNodeJobContext(trigger,leftTuple,tm,sink,pmem,wm);
  jobHandle=(DefaultJobHandle)timerService.scheduleJob(job,jobCtx,trigger);
  leftTuple.setObject(jobHandle);
}
