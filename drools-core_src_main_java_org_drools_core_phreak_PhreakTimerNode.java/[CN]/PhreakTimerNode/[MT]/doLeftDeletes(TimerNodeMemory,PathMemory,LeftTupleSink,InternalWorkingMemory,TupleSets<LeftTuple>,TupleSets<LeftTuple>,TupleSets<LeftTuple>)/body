{
  TimerService timerService=wm.getTimerService();
  TupleList leftTuples=tm.getInsertOrUpdateLeftTuples();
  TupleList deletes=tm.getDeleteLeftTuples();
  if (!deletes.isEmpty()) {
    for (LeftTuple leftTuple=(LeftTuple)deletes.getFirst(); leftTuple != null; ) {
      LeftTuple next=(LeftTuple)leftTuple.getNext();
      srcLeftTuples.addDelete(leftTuple);
      if (log.isTraceEnabled()) {
        log.trace("Timer Add Postponed Delete {}",leftTuple);
      }
      leftTuple.clear();
      leftTuple=next;
    }
    deletes.clear();
  }
  for (LeftTuple leftTuple=srcLeftTuples.getDeleteFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    DefaultJobHandle jobHandle=(DefaultJobHandle)leftTuple.getContextObject();
    if (jobHandle != null) {
      timerService.removeJob(jobHandle);
    }
    org.drools.core.spi.PropagationContext pctx=leftTuple.getPropagationContext();
    pctx=RuleTerminalNode.findMostRecentPropagationContext(leftTuple,pctx);
    if (leftTuple.getMemory() != null) {
      leftTuples.remove(leftTuple);
      if (((InternalFactHandle)pctx.getFactHandle()).isExpired()) {
        doPropagateChildLeftTuple(sink,trgLeftTuples,stagedLeftTuples,leftTuple);
        tm.getDeleteLeftTuples().add(leftTuple);
        pmem.doLinkRule(wm);
        if (log.isTraceEnabled()) {
          log.trace("Timer Postponed Delete {}",leftTuple);
        }
      }
    }
    if (leftTuple.getMemory() == null) {
      LeftTuple childLeftTuple=leftTuple.getFirstChild();
      if (childLeftTuple != null) {
        childLeftTuple.setPropagationContext(leftTuple.getPropagationContext());
        RuleNetworkEvaluator.deleteChildLeftTuple(childLeftTuple,trgLeftTuples,stagedLeftTuples);
        if (log.isTraceEnabled()) {
          log.trace("Timer Delete {}",leftTuple);
        }
      }
    }
    leftTuple.clearStaged();
    leftTuple=next;
  }
}
