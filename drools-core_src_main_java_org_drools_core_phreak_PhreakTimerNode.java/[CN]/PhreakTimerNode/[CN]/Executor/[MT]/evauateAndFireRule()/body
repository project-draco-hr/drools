{
  SegmentMemory[] smems=pmem.getSegmentMemories();
  LeftInputAdapterNode lian=(LeftInputAdapterNode)smems[0].getRootNode();
  SegmentMemory sm=tm.getSegmentMemory();
  int smemIndex=0;
  for (  SegmentMemory smem : smems) {
    if (smem == sm) {
      break;
    }
    smemIndex++;
  }
  long bit=1;
  for (NetworkNode node=sm.getRootNode(); node != sink; node=((LeftTupleSource)node).getSinkPropagator().getFirstLeftTupleSink()) {
    bit=bit << 1;
  }
  LeftTupleSets trgLeftTuples=new LeftTupleSetsImpl();
  doPropagateChildLeftTuples(null,tm,sink,wm,null,trgLeftTuples,sm.getStagedLeftTuples());
  RuleNetworkEvaluator rne=new RuleNetworkEvaluator();
  LinkedList<StackEntry> outerStack=new LinkedList<StackEntry>();
  rne.outerEval(lian,pmem,sink,bit,tm,smems,smemIndex,trgLeftTuples,wm,new LinkedList<StackEntry>(),outerStack,new HashSet<String>(),true,pmem.getRuleAgendaItem().getRuleExecutor());
  pmem.getRuleAgendaItem().getRuleExecutor().fire(wm,outerStack);
  ((InternalAgenda)wm.getAgenda()).fireAllRules(null,-1);
}
