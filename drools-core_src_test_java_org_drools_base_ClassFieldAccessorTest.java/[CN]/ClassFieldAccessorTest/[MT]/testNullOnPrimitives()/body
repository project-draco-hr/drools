{
  try {
    ClassFieldAccessor intAccessor=store.getAccessor(TestClass.class,"intAttr",getClass().getClassLoader());
    ClassFieldAccessor strAccessor=store.getAccessor(TestClass.class,"strAttr",getClass().getClassLoader());
    ClassFieldAccessor byteAccessor=store.getAccessor(TestClass.class,"byteAttr",getClass().getClassLoader());
    ClassFieldAccessor booleanAccessor=store.getAccessor(TestClass.class,"booleanAttr",getClass().getClassLoader());
    ClassFieldAccessor charAccessor=store.getAccessor(TestClass.class,"charAttr",getClass().getClassLoader());
    ClassFieldAccessor doubleAccessor=store.getAccessor(TestClass.class,"doubleAttr",getClass().getClassLoader());
    ClassFieldAccessor floatAccessor=store.getAccessor(TestClass.class,"floatAttr",getClass().getClassLoader());
    ClassFieldAccessor longAccessor=store.getAccessor(TestClass.class,"longAttr",getClass().getClassLoader());
    ClassFieldAccessor shortAccessor=store.getAccessor(TestClass.class,"shortAttr",getClass().getClassLoader());
    String testString1="TestAttr1";
    TestClass instance=new TestClass();
    instance.setIntAttr(25);
    instance.setStrAttr(testString1);
    instance.setByteAttr((byte)10);
    instance.setBooleanAttr(true);
    instance.setCharAttr('x');
    instance.setDoubleAttr(10.5d);
    instance.setFloatAttr(40.3f);
    instance.setLongAttr(43l);
    instance.setShortAttr((short)20);
    intAccessor.setValue(instance,null);
    strAccessor.setValue(instance,null);
    byteAccessor.setValue(instance,null);
    booleanAccessor.setValue(instance,null);
    charAccessor.setValue(instance,null);
    doubleAccessor.setValue(instance,null);
    floatAccessor.setValue(instance,null);
    longAccessor.setValue(instance,null);
    shortAccessor.setValue(instance,null);
    Assert.assertEquals("Error setting attr",0,instance.getIntAttr());
    Assert.assertNull("Error setting attr",instance.getStrAttr());
    Assert.assertEquals("Error setting attr",0,instance.getByteAttr());
    Assert.assertEquals("Error setting attr",false,instance.isBooleanAttr());
    Assert.assertEquals("Error setting attr",'\0',instance.getCharAttr());
    Assert.assertEquals("Error setting attr",0.0d,instance.getDoubleAttr(),0.1d);
    Assert.assertEquals("Error setting attr",0.0f,instance.getFloatAttr(),0.1f);
    Assert.assertEquals("Error setting attr",0l,instance.getLongAttr());
    Assert.assertEquals("Error setting attr",(short)0,instance.getShortAttr());
    Assert.assertEquals("Error reading int attr",0,((Integer)intAccessor.getValue(instance)).intValue());
    Assert.assertNull("Error reading String attr",strAccessor.getValue(instance));
    Assert.assertEquals("Error reading attr",0,((Byte)byteAccessor.getValue(instance)).byteValue());
    Assert.assertEquals("Error reading attr",false,((Boolean)booleanAccessor.getValue(instance)).booleanValue());
    Assert.assertEquals("Error reading attr",'\0',((Character)charAccessor.getValue(instance)).charValue());
    Assert.assertEquals("Error reading attr",0.0d,((Double)doubleAccessor.getValue(instance)).doubleValue(),0.1d);
    Assert.assertEquals("Error reading attr",0.0f,((Float)floatAccessor.getValue(instance)).floatValue(),0.1f);
    Assert.assertEquals("Error reading attr",0l,((Long)longAccessor.getValue(instance)).longValue());
    Assert.assertEquals("Error reading attr",(short)0,((Short)shortAccessor.getValue(instance)).shortValue());
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("No exception is supposed to be generated when creating field accessor: " + e);
  }
}
