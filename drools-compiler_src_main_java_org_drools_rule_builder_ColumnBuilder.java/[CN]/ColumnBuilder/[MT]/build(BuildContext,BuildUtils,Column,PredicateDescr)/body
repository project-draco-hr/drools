{
  final List[] usedIdentifiers=utils.getUsedIdentifiers(context,predicateDescr,predicateDescr.getText());
  final List tupleDeclarations=new ArrayList();
  final List factDeclarations=new ArrayList();
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    Declaration decl=(Declaration)context.getDeclarationResolver().getDeclaration((String)usedIdentifiers[0].get(i));
    if (decl.getColumn() == column) {
      factDeclarations.add(decl);
    }
 else {
      tupleDeclarations.add(decl);
    }
  }
  Declaration[] previousDeclarations=(Declaration[])tupleDeclarations.toArray(new Declaration[tupleDeclarations.size()]);
  Declaration[] localDeclarations=(Declaration[])factDeclarations.toArray(new Declaration[factDeclarations.size()]);
  final PredicateConstraint predicateConstraint=new PredicateConstraint(previousDeclarations,localDeclarations);
  column.addConstraint(predicateConstraint);
  JavaPredicateBuilder builder=new JavaPredicateBuilder();
  builder.build(context,utils,usedIdentifiers,previousDeclarations,localDeclarations,predicateConstraint,predicateDescr);
}
