{
  String s="package org.drools.core.beliefsystem.jtms;\n" + "\n" + "import org.kie.internal.event.rule.ActivationUnMatchListener;\n"+ "import java.util.List \n"+ "import org.drools.core.common.AgendaItem;"+ "import org.drools.compiler.Person;"+ "global java.util.List list;\n"+ "\n"+ "declare entry-point 'neg' end \n"+ ""+ "rule \"go1\"\n"+ "when\n"+ "    String( this == 'go1' )\n"+ "then\n"+ "    Person p = new Person( 'darth' ); \n"+ "    p.setNotInEqualTestObject(1); \n"+ "    insertLogical( p, 'neg' );\n"+ "end\n"+ "rule \"go2\"\n"+ "when\n"+ "    String( this == 'go2' )\n"+ "then\n"+ "    Person p = new Person( 'darth' ); \n"+ "    p.setNotInEqualTestObject(2); \n"+ "    insertLogical( p, 'neg' );\n"+ "end\n"+ "rule \"go3\"\n"+ "when\n"+ "    String( this == 'go3' )\n"+ "then\n"+ "    Person p = new Person( 'darth' ); \n"+ "    p.setNotInEqualTestObject(3); \n"+ "    insertLogical( p, 'neg' );\n"+ "end\n"+ "\n";
  StatefulKnowledgeSession kSession=getSessionFromString(s);
  List list=new ArrayList();
  kSession.setGlobal("list",list);
  FactHandle fhGo1=kSession.insert("go1");
  kSession.fireAllRules();
  FactHandle fhGo2=kSession.insert("go2");
  kSession.fireAllRules();
  FactHandle fhGo3=kSession.insert("go3");
  kSession.fireAllRules();
  NamedEntryPoint ep=(NamedEntryPoint)((StatefulKnowledgeSessionImpl)kSession).getEntryPoint("DEFAULT");
  assertEquals(3,ep.getObjects().size());
  assertEquals(1,getNegativeObjects(kSession).size());
  int count=0;
  for (  Object object : getNegativeObjects(kSession)) {
    if (object instanceof Person) {
      assertEquals(new Integer(1),((Person)object).getNotInEqualTestObject());
      count++;
    }
  }
  assertEquals(1,count);
  ObjectHashMap equalityMap=ep.getTruthMaintenanceSystem().getEqualityKeyMap();
  assertEquals(1,equalityMap.size());
  org.drools.core.util.Iterator it=equalityMap.iterator();
  EqualityKey key=(EqualityKey)((ObjectEntry)it.next()).getValue();
  while (!key.getFactHandle().getObject().equals(new Person("darth"))) {
    key=(EqualityKey)((ObjectEntry)it.next()).getValue();
  }
  assertEquals(3,key.getBeliefSet().size());
  assertEquals(new Integer(1),((Person)((JTMSBeliefSetImpl)key.getBeliefSet()).getFactHandle().getObject()).getNotInEqualTestObject());
  kSession.retract(fhGo1);
  kSession.fireAllRules();
  it=equalityMap.iterator();
  key=(EqualityKey)((ObjectEntry)it.next()).getValue();
  while (!key.getFactHandle().getObject().equals(new Person("darth"))) {
    key=(EqualityKey)((ObjectEntry)it.next()).getValue();
  }
  assertEquals(2,key.getBeliefSet().size());
  assertEquals(new Integer(3),((Person)((JTMSBeliefSetImpl)key.getBeliefSet()).getFactHandle().getObject()).getNotInEqualTestObject());
  kSession.retract(fhGo3);
  kSession.fireAllRules();
  it=equalityMap.iterator();
  key=(EqualityKey)((ObjectEntry)it.next()).getValue();
  while (!key.getFactHandle().getObject().equals(new Person("darth"))) {
    key=(EqualityKey)((ObjectEntry)it.next()).getValue();
  }
  assertEquals(1,key.getBeliefSet().size());
  assertEquals(new Integer(2),((Person)((JTMSBeliefSetImpl)key.getBeliefSet()).getFactHandle().getObject()).getNotInEqualTestObject());
}
