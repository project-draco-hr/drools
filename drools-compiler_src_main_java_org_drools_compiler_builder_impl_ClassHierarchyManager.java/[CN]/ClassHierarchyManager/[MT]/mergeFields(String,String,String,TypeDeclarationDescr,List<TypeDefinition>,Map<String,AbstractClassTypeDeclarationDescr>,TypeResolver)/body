{
  Map<String,TypeFieldDescr> fieldMap=new LinkedHashMap<String,TypeFieldDescr>();
  boolean isNovel=TypeDeclarationUtils.isNovelClass(typeDescr,kbuilder.getPackageRegistry(typeDescr.getNamespace()));
  PackageRegistry registry=kbuilder.getPackageRegistry(superTypePackageName);
  InternalKnowledgePackage pack=null;
  if (registry != null) {
    pack=registry.getPackage();
  }
 else {
    if (isNovel) {
      unprocessableDescrs.put(typeDescr.getType().getFullName(),typeDescr);
      return false;
    }
  }
  if (unprocessableDescrs.containsKey(fullSuper)) {
    unprocessableDescrs.put(typeDescr.getType().getFullName(),typeDescr);
    return false;
  }
  boolean isSuperClassTagged=false;
  boolean isSuperClassDeclared=true;
  if (pack != null) {
    TypeDeclaration superTypeDeclaration=pack.getTypeDeclaration(simpleSuperTypeName);
    if (superTypeDeclaration != null && superTypeDeclaration.getTypeClassDef() != null) {
      ClassDefinition classDef=superTypeDeclaration.getTypeClassDef();
      for (      org.kie.api.definition.type.FactField fld : classDef.getFields()) {
        TypeFieldDescr inheritedFlDescr=buildInheritedFieldDescrFromDefinition(fld,typeDescr);
        fieldMap.put(inheritedFlDescr.getFieldName(),inheritedFlDescr);
      }
      isSuperClassTagged=!superTypeDeclaration.isNovel();
    }
  }
 else {
    isSuperClassDeclared=false;
  }
  if (!isSuperClassDeclared || isSuperClassTagged) {
    try {
      Class superKlass;
      if (registry != null) {
        superKlass=registry.getTypeResolver().resolveType(fullSuper);
      }
 else {
        superKlass=resolver.resolveType(fullSuper);
      }
      buildDescrsFromFields(superKlass,typeDescr,registry,fieldMap);
    }
 catch (    ClassNotFoundException cnfe) {
      throw new RuntimeException("Unable to resolve Type Declaration superclass '" + fullSuper + "'");
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  for (  String fieldName : typeDescr.getFields().keySet()) {
    if (fieldMap.containsKey(fieldName)) {
      String type1=fieldMap.get(fieldName).getPattern().getObjectType();
      String type2=typeDescr.getFields().get(fieldName).getPattern().getObjectType();
      if (type2.lastIndexOf(".") < 0) {
        try {
          TypeResolver typeResolver=kbuilder.getPackageRegistry(typeDescr.getNamespace()).getTypeResolver();
          type1=typeResolver.resolveType(type1).getName();
          type2=typeResolver.resolveType(type2).getName();
          fieldMap.get(fieldName).getPattern().setObjectType(type1);
          typeDescr.getFields().get(fieldName).getPattern().setObjectType(type2);
        }
 catch (        ClassNotFoundException cnfe) {
        }
      }
      boolean clash=!type1.equals(type2);
      TypeFieldDescr overriding=null;
      if (clash) {
        try {
          Class<?> sup=resolver.resolveType(type1);
          Class<?> loc=resolver.resolveType(type2);
          if (sup.isAssignableFrom(loc)) {
            clash=false;
            overriding=fieldMap.get(fieldName);
          }
        }
 catch (        ClassNotFoundException cnfe) {
        }
      }
      if (clash) {
        kbuilder.addBuilderResult(new TypeDeclarationError(typeDescr,"Cannot redeclare field '" + fieldName + " from "+ type1+ " to "+ type2));
        typeDescr.setType(null,null);
        return false;
      }
 else {
        String initVal=fieldMap.get(fieldName).getInitExpr();
        TypeFieldDescr fd=typeDescr.getFields().get(fieldName);
        if (fd.getInitExpr() == null) {
          fd.setInitExpr(initVal);
        }
        fd.setInherited(fieldMap.get(fieldName).isInherited());
        fd.setOverriding(overriding);
        for (        String key : fieldMap.get(fieldName).getAnnotationNames()) {
          if (fd.getAnnotation(key) == null) {
            fd.addAnnotation(fieldMap.get(fieldName).getAnnotation(key));
          }
        }
        if (fd.getIndex() < 0) {
          fd.setIndex(fieldMap.get(fieldName).getIndex());
        }
      }
    }
    fieldMap.put(fieldName,typeDescr.getFields().get(fieldName));
  }
  typeDescr.setFields(fieldMap);
  return true;
}
