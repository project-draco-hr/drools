{
  final LeftTuple leftTuple=(LeftTuple)tuple;
  final String[] declarationTypes=stub.getDeclarationTypes();
  final String[] globals=stub.getGlobals();
  final String[] globalTypes=stub.getGlobalTypes();
  final List<DeclarationMatcher> declarationMatchers=matchDeclarationsToTuple(declarationTypes,declarations,leftTuple);
  final ClassGenerator generator=createInvokerClassGenerator(stub,workingMemory).setInterfaces(EvalExpression.class,CompiledInvoker.class);
  generator.addMethod(ACC_PUBLIC,"createContext",generator.methodDescr(Object.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      mv.visitInsn(ACONST_NULL);
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"clone",generator.methodDescr(EvalExpression.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      mv.visitVarInsn(ALOAD,0);
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"replaceDeclaration",generator.methodDescr(null,Declaration.class,Declaration.class)).addMethod(ACC_PUBLIC,"evaluate",generator.methodDescr(Boolean.TYPE,Tuple.class,Declaration[].class,WorkingMemory.class,Object.class),new String[]{"java/lang/Exception"},new GeneratorHelper.EvaluateMethod(){
    public void body(    MethodVisitor mv){
      objAstorePos=7;
      int[] declarationsParamsPos=new int[declarations.length];
      mv.visitVarInsn(ALOAD,1);
      cast(LeftTuple.class);
      mv.visitVarInsn(ASTORE,5);
      LeftTuple currentLeftTuple=leftTuple;
      for (      DeclarationMatcher matcher : declarationMatchers) {
        int i=matcher.getOriginalIndex();
        declarationsParamsPos[i]=objAstorePos;
        currentLeftTuple=traverseTuplesUntilDeclaration(currentLeftTuple,i,matcher.getRootDistance(),2,5,6);
        mv.visitVarInsn(ALOAD,2);
        push(i);
        mv.visitInsn(AALOAD);
        mv.visitVarInsn(ALOAD,3);
        mv.visitVarInsn(ALOAD,5);
        invokeInterface(LeftTuple.class,"getHandle",InternalFactHandle.class);
        invokeInterface(InternalFactHandle.class,"getObject",Object.class);
        storeObjectFromDeclaration(declarations[i],declarationTypes[i]);
      }
      StringBuilder evalMethodDescr=new StringBuilder("(");
      for (int i=0; i < declarations.length; i++) {
        load(declarationsParamsPos[i]);
        evalMethodDescr.append(typeDescr(declarationTypes[i]));
      }
      parseGlobals(globals,globalTypes,3,evalMethodDescr);
      evalMethodDescr.append(")Z");
      mv.visitMethodInsn(INVOKESTATIC,stub.getInternalRuleClassName(),stub.getMethodName(),evalMethodDescr.toString());
      mv.visitInsn(IRETURN);
    }
  }
);
  stub.setEval(generator.<EvalExpression>newInstance());
}
