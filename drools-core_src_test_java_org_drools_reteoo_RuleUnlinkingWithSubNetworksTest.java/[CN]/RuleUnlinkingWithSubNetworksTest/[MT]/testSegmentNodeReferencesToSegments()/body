{
  setUp(JOIN_NODE);
  KnowledgeBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(LRUnlinkingOption.ENABLED);
  ReteooWorkingMemory wm=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase((RuleBaseConfiguration)kconf));
  BetaMemory bm=null;
  List<RuleMemory> list;
  RuleMemory rtn1Rs=(RuleMemory)wm.getNodeMemory(rtn1);
  RuleMemory rtn2Rs=(RuleMemory)wm.getNodeMemory(rtn2);
  RuleMemory rtn3Rs=(RuleMemory)wm.getNodeMemory(rtn3);
  n1.createNodeSegmentMemory(n1,wm);
  bm=(BetaMemory)wm.getNodeMemory(n1);
  assertEquals(1,bm.getNodePosMaskBit());
  assertEquals(7,bm.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(1,bm.getSegmentMemory().getSegmentPosMaskBit());
  list=bm.getSegmentMemory().getRuleMemories();
  assertEquals(3,list.size());
  assertTrue(list.contains(rtn1Rs));
  assertTrue(list.contains(rtn2Rs));
  assertTrue(list.contains(rtn3Rs));
  bm=(BetaMemory)wm.getNodeMemory(n2);
  assertEquals(2,bm.getNodePosMaskBit());
  assertEquals(7,bm.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(1,bm.getSegmentMemory().getSegmentPosMaskBit());
  list=bm.getSegmentMemory().getRuleMemories();
  assertEquals(3,list.size());
  assertTrue(list.contains(rtn1Rs));
  assertTrue(list.contains(rtn2Rs));
  assertTrue(list.contains(rtn3Rs));
  bm=(BetaMemory)wm.getNodeMemory(n3);
  assertEquals(4,bm.getNodePosMaskBit());
  assertEquals(7,bm.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(1,bm.getSegmentMemory().getSegmentPosMaskBit());
  list=bm.getSegmentMemory().getRuleMemories();
  assertEquals(3,list.size());
  assertTrue(list.contains(rtn1Rs));
  assertTrue(list.contains(rtn2Rs));
  assertTrue(list.contains(rtn3Rs));
  n4.createNodeSegmentMemory(n4,wm);
  bm=(BetaMemory)wm.getNodeMemory(n4);
  assertEquals(1,bm.getNodePosMaskBit());
  assertEquals(3,bm.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(2,bm.getSegmentMemory().getSegmentPosMaskBit());
  list=bm.getSegmentMemory().getRuleMemories();
  assertEquals(2,list.size());
  assertTrue(list.contains(rtn2Rs));
  assertTrue(list.contains(rtn3Rs));
  bm=(BetaMemory)wm.getNodeMemory(n5);
  assertEquals(2,bm.getNodePosMaskBit());
  assertEquals(3,bm.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(2,bm.getSegmentMemory().getSegmentPosMaskBit());
  list=bm.getSegmentMemory().getRuleMemories();
  assertEquals(2,list.size());
  assertTrue(list.contains(rtn2Rs));
  assertTrue(list.contains(rtn3Rs));
  n6.createNodeSegmentMemory(n6,wm);
  bm=(BetaMemory)wm.getNodeMemory(n6);
  assertEquals(1,bm.getNodePosMaskBit());
  assertEquals(7,bm.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(4,bm.getSegmentMemory().getSegmentPosMaskBit());
  list=bm.getSegmentMemory().getRuleMemories();
  assertEquals(1,list.size());
  assertTrue(list.contains(rtn3Rs));
  bm=(BetaMemory)wm.getNodeMemory(n7);
  assertEquals(2,bm.getNodePosMaskBit());
  assertEquals(7,bm.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(4,bm.getSegmentMemory().getSegmentPosMaskBit());
  list=bm.getSegmentMemory().getRuleMemories();
  assertEquals(1,list.size());
  assertTrue(list.contains(rtn3Rs));
  bm=(BetaMemory)wm.getNodeMemory(n8);
  assertEquals(4,bm.getNodePosMaskBit());
  assertEquals(7,bm.getSegmentMemory().getAllLinkedMaskTest());
  assertEquals(4,bm.getSegmentMemory().getSegmentPosMaskBit());
  list=bm.getSegmentMemory().getRuleMemories();
  assertEquals(1,list.size());
  assertTrue(list.contains(rtn3Rs));
}
