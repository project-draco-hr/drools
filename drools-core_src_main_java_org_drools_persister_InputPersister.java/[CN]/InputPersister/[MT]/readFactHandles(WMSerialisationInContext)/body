{
  ObjectInputStream stream=context.stream;
  InternalRuleBase ruleBase=context.ruleBase;
  PlaceholderResolverStrategyFactory resolverStrategyFactory=context.resolverStrategyFactory;
  ReteooFactHandleFactory factHandleFactory=new ReteooFactHandleFactory();
  factHandleFactory.readExternal(stream);
  context.wm=new ReteooWorkingMemory(0,ruleBase,factHandleFactory);
  int size=stream.readInt();
  if (size == 0) {
    return;
  }
  InternalFactHandle[] handles=new InternalFactHandle[size];
  for (int i=0; i < size; i++) {
    int id=stream.readInt();
    long recency=stream.readLong();
    PlaceholderResolverStrategy strategy=resolverStrategyFactory.get(null);
    Object object=null;
    InternalFactHandle handle=new DefaultFactHandle(id,object,recency);
    context.handles.put(id,handle);
    handles[i]=handle;
    context.wm.getObjectStore().addHandle(handle,object);
    int type=stream.readInt();
    if (type == PersisterEnums.RIGHT_TUPLE) {
      type=PersisterEnums.REPEAT;
      while (type == PersisterEnums.REPEAT) {
        readRightTuple(context,handle);
        type=stream.readInt();
      }
    }
  }
  EntryPointNode node=ruleBase.getRete().getEntryPointNode(EntryPoint.DEFAULT);
  Map<ObjectType,ObjectTypeNode> objectTypeNodes=node.getObjectTypeNodes();
  for (  InternalFactHandle handle : handles) {
    Object object=handle.getObject();
    ClassObjectType objectType=new ClassObjectType(object.getClass());
    ObjectTypeNode objectTypeNode=objectTypeNodes.get(objectType);
    ObjectHashSet set=(ObjectHashSet)context.wm.getNodeMemory(objectTypeNode);
    set.add(handle,false);
  }
}
