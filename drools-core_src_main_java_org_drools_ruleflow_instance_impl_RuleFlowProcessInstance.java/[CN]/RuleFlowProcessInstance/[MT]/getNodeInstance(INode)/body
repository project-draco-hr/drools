{
  if (node instanceof IRuleSetNode) {
    IRuleFlowNodeInstance result=(IRuleFlowNodeInstance)agenda.getRuleFlowGroup(((IRuleSetNode)node).getRuleFlowGroup());
    result.setNodeId(node.getId());
    addNodeInstance(result);
    return result;
  }
 else   if (node instanceof ISplit) {
    IRuleFlowNodeInstance result=getFirstNodeInstance(node.getId());
    if (result == null) {
      result=new RuleFlowSplitInstance();
      result.setNodeId(node.getId());
      addNodeInstance(result);
      return result;
    }
  }
 else   if (node instanceof IJoin) {
    IRuleFlowNodeInstance result=getFirstNodeInstance(node.getId());
    if (result == null) {
      result=new RuleFlowJoinInstance();
      result.setNodeId(node.getId());
      addNodeInstance(result);
    }
    return result;
  }
 else   if (node instanceof IStartNode) {
    IRuleFlowNodeInstance result=new StartNodeInstance();
    result.setNodeId(node.getId());
    addNodeInstance(result);
    return result;
  }
 else   if (node instanceof IEndNode) {
    IRuleFlowNodeInstance result=new EndNodeInstance();
    result.setNodeId(node.getId());
    addNodeInstance(result);
    return result;
  }
  throw new IllegalArgumentException("Illegal node type: " + node.getClass());
}
