{
  BuildContext buildContext=(BuildContext)context.get("BuildContext");
  if (args.size() != 0) {
    String[] a=args.get(0);
    String name=a[0].trim();
    String leftInput=a[1].trim();
    String rightInput=a[2].trim();
    String returnType=a[3].trim();
    LeftTupleSource leftTupleSource;
    if ("mock".equals(leftInput)) {
      leftTupleSource=Mockito.mock(LeftTupleSource.class);
    }
 else {
      leftTupleSource=(LeftTupleSource)context.get(leftInput);
    }
    ObjectSource rightObjectSource;
    if ("mock".equals(rightInput)) {
      rightObjectSource=Mockito.mock(ObjectSource.class);
      ;
    }
 else {
      rightObjectSource=(ObjectSource)context.get(rightInput);
    }
    a=args.get(1);
    String fieldName=a[0].trim();
    String operator=a[1].trim();
    String var=a[2].trim();
    Declaration declr=(Declaration)context.get(var);
    Pattern sourcePattern;
    Pattern resultPattern;
    try {
      sourcePattern=reteTesterHelper.getPattern(0,((ClassObjectType)((ObjectTypeNode)rightObjectSource).getObjectType()).getClassName());
      resultPattern=reteTesterHelper.getPattern(buildContext.getNextId(),returnType);
    }
 catch (    Exception e) {
      throw new IllegalArgumentException();
    }
    BetaNodeFieldConstraint betaConstraint;
    try {
      betaConstraint=this.reteTesterHelper.getBoundVariableConstraint(sourcePattern,fieldName,declr,operator);
    }
 catch (    IntrospectionException e) {
      throw new IllegalArgumentException();
    }
    SingleBetaConstraints constraints=new SingleBetaConstraints(betaConstraint,buildContext.getRuleBase().getConfiguration());
    Collect collect=new Collect(sourcePattern,resultPattern);
    CollectNode collectNode=new CollectNode(buildContext.getNextId(),leftTupleSource,rightObjectSource,new AlphaNodeFieldConstraint[0],constraints,new EmptyBetaConstraints(),BehaviorManager.NO_BEHAVIORS,collect,false,buildContext);
    collectNode.attach();
    context.put(name,collectNode);
  }
 else {
    throw new IllegalArgumentException("Cannot arguments " + args);
  }
}
