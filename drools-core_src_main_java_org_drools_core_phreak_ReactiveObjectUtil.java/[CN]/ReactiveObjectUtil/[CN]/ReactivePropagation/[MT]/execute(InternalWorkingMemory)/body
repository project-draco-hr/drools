{
  ReactiveFromNode.ReactiveFromMemory mem=wm.getNodeMemory(node);
  InternalFactHandle factHandle=node.createFactHandle(leftTuple,propagationContext,wm,object);
  if (type != ModificationType.REMOVE && isAllowed(factHandle,node.getAlphaConstraints(),wm,mem)) {
    ContextEntry[] context=mem.getBetaMemory().getContext();
    BetaConstraints betaConstraints=node.getBetaConstraints();
    betaConstraints.updateFromTuple(context,wm,leftTuple);
    propagate(sink,leftTuple,new RightTupleImpl(factHandle),betaConstraints,propagationContext,context,RuleNetworkEvaluator.useLeftMemory(node,leftTuple),mem.getStagedLeftTuples(),null);
  }
 else {
    LeftTuple childLeftTuple=((LeftTuple)leftTuple).getFirstChild();
    while (childLeftTuple != null) {
      LeftTuple next=childLeftTuple.getHandleNext();
      if (object == childLeftTuple.getFactHandle().getObject()) {
        deleteChildLeftTuple(propagationContext,mem.getStagedLeftTuples(),null,childLeftTuple);
      }
      childLeftTuple=next;
    }
  }
  mem.getBetaMemory().setNodeDirty(wm);
}
