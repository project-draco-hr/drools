{
  final Rule rule=new Rule("label_arrow-1B");
  Column stageColumn=new Column(0,stageType,"stage");
  stageColumn.addConstraint(getLiteralConstraint(stageColumn,"value",new Integer(Stage.LABELING),this.integerEqualEvaluator));
  rule.addPattern(stageColumn);
  final Declaration stageDeclaration=rule.getDeclaration("stage");
  Column junctionColumn=new Column(1,junctionType);
  junctionColumn.addConstraint(getLiteralConstraint(junctionColumn,"type",Junction.ARROW,this.objectEqualEvaluator));
  setFieldDeclaration(junctionColumn,"basePoint","junctionBasePoint");
  setFieldDeclaration(junctionColumn,"p1","junctionP1");
  setFieldDeclaration(junctionColumn,"p2","junctionP2");
  setFieldDeclaration(junctionColumn,"p3","junctionP3");
  rule.addPattern(junctionColumn);
  final Declaration junctionBasePointDeclaration=rule.getDeclaration("junctionBasePoint");
  final Declaration junctionP1Declaration=rule.getDeclaration("junctionP1");
  final Declaration junctionP2Declaration=rule.getDeclaration("junctionP2");
  final Declaration junctionP3Declaration=rule.getDeclaration("junctionP3");
  Column edgeColumn1=new Column(2,edgeType,"edge1");
  rule.addPattern(edgeColumn1);
  final Declaration edge1Declaration=rule.getDeclaration("edge1");
  edgeColumn1.addConstraint(getBoundVariableConstraint(edgeColumn1,"p1",junctionBasePointDeclaration,integerEqualEvaluator));
  edgeColumn1.addConstraint(getBoundVariableConstraint(edgeColumn1,"p2",junctionP1Declaration,integerEqualEvaluator));
  Column edgeColumn2=new Column(3,edgeType,"edge2");
  rule.addPattern(edgeColumn2);
  final Declaration edge2Declaration=rule.getDeclaration("edge2");
  final Declaration edge2P2Declaration=rule.getDeclaration("edge2p2");
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn2,"p1",junctionBasePointDeclaration,integerEqualEvaluator));
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn2,"p2",junctionP2Declaration,integerEqualEvaluator));
  Column edgeColumn3=new Column(4,edgeType,"edge3");
  edgeColumn3.addConstraint(getLiteralConstraint(edgeColumn3,"label",Edge.NIL,this.objectEqualEvaluator));
  rule.addPattern(edgeColumn3);
  final Declaration edge3Declaration=rule.getDeclaration("edge3");
  edgeColumn3.addConstraint(getBoundVariableConstraint(edgeColumn3,"p1",junctionBasePointDeclaration,integerEqualEvaluator));
  edgeColumn3.addConstraint(getBoundVariableConstraint(edgeColumn3,"p2",junctionP3Declaration,integerEqualEvaluator));
  Consequence consequence=new Consequence(){
    public void invoke(    Activation activation,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=activation.getRule();
        Tuple tuple=activation.getTuple();
        KnowledgeHelper drools=new DefaultKnowledgeHelper(rule,tuple,workingMemory);
        Edge edge1=(Edge)drools.get(edge1Declaration);
        Edge edge2=(Edge)drools.get(edge2Declaration);
        edge2.setLabel(Edge.PLUS);
        Edge edge3=(Edge)drools.get(edge3Declaration);
        edge3.setLabel(edge1.getLabel());
        drools.modifyObject(tuple.get(edge2Declaration),edge3);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
