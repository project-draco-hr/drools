{
  final Rule rule=new Rule("make_L");
  Column stageColumn=new Column(0,stageType,"stage");
  stageColumn.addConstraint(getLiteralConstraint(stageColumn,"value",new Integer(Stage.DETECT_JUNCTIONS),this.integerEqualEvaluator));
  rule.addPattern(stageColumn);
  final Declaration stageDeclaration=rule.getDeclaration("stage");
  Column edgeColumn1=new Column(1,edgeType,"edge1");
  edgeColumn1.addConstraint(getLiteralConstraint(edgeColumn1,"joined",new Boolean(false),this.booleanEqualEvaluator));
  setFieldDeclaration(edgeColumn1,"p1","edge1p1");
  setFieldDeclaration(edgeColumn1,"p2","edge1p2");
  rule.addPattern(edgeColumn1);
  final Declaration edge1Declaration=rule.getDeclaration("edge1");
  final Declaration edge1P1Declaration=rule.getDeclaration("edge1p1");
  final Declaration edge1P2Declaration=rule.getDeclaration("edge1p2");
  Column edgeColumn2=new Column(2,edgeType,"edge2");
  edgeColumn2.addConstraint(getLiteralConstraint(edgeColumn2,"joined",new Boolean(false),this.booleanEqualEvaluator));
  setFieldDeclaration(edgeColumn2,"p1","edge2p1");
  setFieldDeclaration(edgeColumn2,"p2","edge2p2");
  rule.addPattern(edgeColumn2);
  final Declaration edge2Declaration=rule.getDeclaration("edge2");
  final Declaration edge2P1Declaration=rule.getDeclaration("edge2p1");
  final Declaration edge2P2Declaration=rule.getDeclaration("edge2p2");
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn1,"p2",edge2P2Declaration,integerNotEqualEvaluator));
  Column notEdgeColumn=new Column(3,edgeType);
  notEdgeColumn.addConstraint(getBoundVariableConstraint(notEdgeColumn,"p1",edge1P1Declaration,integerEqualEvaluator));
  notEdgeColumn.addConstraint(getBoundVariableConstraint(notEdgeColumn,"p2",edge1P2Declaration,integerNotEqualEvaluator));
  notEdgeColumn.addConstraint(getBoundVariableConstraint(notEdgeColumn,"p2",edge2P2Declaration,integerNotEqualEvaluator));
  Not notEdge=new Not();
  notEdge.addChild(notEdgeColumn);
  rule.addPattern(notEdge);
  Consequence consequence=new Consequence(){
    public void invoke(    Activation activation,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=activation.getRule();
        Tuple tuple=activation.getTuple();
        KnowledgeHelper drools=new DefaultKnowledgeHelper(rule,tuple,workingMemory);
        Edge edge1=(Edge)drools.get(edge1Declaration);
        edge1.setJoined(true);
        Edge edge2=(Edge)drools.get(edge2Declaration);
        edge2.setJoined(true);
        drools.assertObject(new Junction(edge1.getP2(),edge2.getP2(),0,edge1.getP1(),Junction.L));
        drools.modifyObject(tuple.get(edge1Declaration),edge1);
        drools.modifyObject(tuple.get(edge1Declaration),edge2);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
