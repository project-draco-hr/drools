{
  final Rule rule=new Rule("reverse_edges");
  Column stageColumn=new Column(0,stageType,"stage");
  stageColumn.addConstraint(getLiteralConstraint(stageColumn,"value",new Integer(Stage.DUPLICATE),this.integerEqualEvaluator));
  rule.addPattern(stageColumn);
  Column lineColumn=new Column(1,lineType,"line");
  rule.addPattern(lineColumn);
  final Declaration lineDeclaration=rule.getDeclaration("line");
  Consequence consequence=new Consequence(){
    public void evaluate(    Activation activation,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=activation.getRule();
        Tuple tuple=activation.getTuple();
        KnowledgeHelper drools=new DefaultKnowledgeHelper(rule,tuple,workingMemory);
        Line line=(Line)drools.get(lineDeclaration);
        drools.assertObject(new Edge(line.getP1(),line.getP2(),false,Edge.NIL,Edge.NIL));
        drools.assertObject(new Edge(line.getP2(),line.getP1(),false,Edge.NIL,Edge.NIL));
        drools.retractObject(tuple.get(lineDeclaration));
        System.out.println("draw " + line.getP1() + " "+ line.getP2());
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
