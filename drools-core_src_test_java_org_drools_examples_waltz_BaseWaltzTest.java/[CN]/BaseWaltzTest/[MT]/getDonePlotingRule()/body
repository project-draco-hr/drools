{
  final Rule rule=new Rule("done_plotting");
  Column stageColumn=new Column(0,stageType,"stage");
  stageColumn.addConstraint(getLiteralConstraint(stageColumn,"value",new Integer(Stage.PLOT_REMAINING_EDGES),this.integerEqualEvaluator));
  rule.addPattern(stageColumn);
  final Declaration stageDeclaration=rule.getDeclaration("stage");
  Column notEdgeColumn=new Column(1,edgeType);
  notEdgeColumn.addConstraint(getLiteralConstraint(notEdgeColumn,"plotted",Edge.NIL,this.objectEqualEvaluator));
  Not notEdge=new Not();
  notEdge.addChild(notEdgeColumn);
  rule.addPattern(notEdge);
  Consequence consequence=new Consequence(){
    public void evaluate(    Activation activation,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=activation.getRule();
        Tuple tuple=activation.getTuple();
        KnowledgeHelper drools=new DefaultKnowledgeHelper(rule,tuple,workingMemory);
        Stage stage=(Stage)drools.get(stageDeclaration);
        stage.setValue(Stage.DONE);
        drools.modifyObject(tuple.get(stageDeclaration),stage);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
