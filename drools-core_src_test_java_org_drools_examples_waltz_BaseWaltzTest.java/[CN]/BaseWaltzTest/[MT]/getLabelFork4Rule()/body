{
  final Rule rule=new Rule("label_fork-4");
  Column stageColumn=new Column(0,stageType,"stage");
  stageColumn.addConstraint(getLiteralConstraint(stageColumn,"value",new Integer(Stage.LABELING),this.integerEqualEvaluator));
  rule.addPattern(stageColumn);
  Column junctionColumn=new Column(1,junctionType);
  junctionColumn.addConstraint(getLiteralConstraint(junctionColumn,"type",Junction.FORK,this.objectEqualEvaluator));
  setFieldDeclaration(junctionColumn,"basePoint","junctionBasePoint");
  rule.addPattern(junctionColumn);
  final Declaration junctionBasePointDeclaration=rule.getDeclaration("junctionBasePoint");
  Column edgeColumn1=new Column(2,edgeType,"edge1");
  edgeColumn1.addConstraint(getLiteralConstraint(edgeColumn1,"label",Edge.MINUS,this.objectEqualEvaluator));
  setFieldDeclaration(edgeColumn1,"p2","edge1p2");
  rule.addPattern(edgeColumn1);
  final Declaration edge1P2Declaration=rule.getDeclaration("edge1p2");
  edgeColumn1.addConstraint(getBoundVariableConstraint(edgeColumn1,"p1",junctionBasePointDeclaration,integerEqualEvaluator));
  Column edgeColumn2=new Column(3,edgeType,"edge2");
  edgeColumn2.addConstraint(getLiteralConstraint(edgeColumn2,"label",Edge.MINUS,this.objectEqualEvaluator));
  setFieldDeclaration(edgeColumn2,"p2","edge2p2");
  rule.addPattern(edgeColumn2);
  final Declaration edge2P2Declaration=rule.getDeclaration("edge2p2");
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn2,"p1",junctionBasePointDeclaration,integerEqualEvaluator));
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn2,"p2",edge1P2Declaration,integerNotEqualEvaluator));
  Column edgeColumn3=new Column(4,edgeType,"edge3");
  edgeColumn3.addConstraint(getLiteralConstraint(edgeColumn3,"label",Edge.NIL,this.objectEqualEvaluator));
  rule.addPattern(edgeColumn3);
  final Declaration edge3Declaration=rule.getDeclaration("edge3");
  edgeColumn3.addConstraint(getBoundVariableConstraint(edgeColumn3,"p1",junctionBasePointDeclaration,integerEqualEvaluator));
  edgeColumn3.addConstraint(getBoundVariableConstraint(edgeColumn3,"p2",edge1P2Declaration,integerNotEqualEvaluator));
  edgeColumn3.addConstraint(getBoundVariableConstraint(edgeColumn3,"p2",edge2P2Declaration,integerNotEqualEvaluator));
  Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Edge edge3=(Edge)drools.get(edge3Declaration);
        edge3.setLabel(Edge.MINUS);
        drools.modifyObject(tuple.get(edge3Declaration),edge3);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
