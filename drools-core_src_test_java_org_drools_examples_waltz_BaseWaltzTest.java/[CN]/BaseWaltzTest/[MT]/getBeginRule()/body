{
  final Rule rule=new Rule("begin");
  Column stageColumn=new Column(0,stageType,"stage");
  stageColumn.addConstraint(getLiteralConstraint(stageColumn,"value",new Integer(Stage.START),this.integerEqualEvaluator));
  rule.addPattern(stageColumn);
  final Declaration stageDeclaration=rule.getDeclaration("stage");
  Consequence consequence=new Consequence(){
    public void invoke(    Activation activation,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=activation.getRule();
        Tuple tuple=activation.getTuple();
        KnowledgeHelper drools=new DefaultKnowledgeHelper(rule,tuple,workingMemory);
        Stage stage=(Stage)drools.get(stageDeclaration);
        stage.setValue(Stage.DUPLICATE);
        drools.modifyObject(tuple.get(stageDeclaration),stage);
        drools.assertObject(new Line(0122,0107));
        drools.assertObject(new Line(0107,2207));
        drools.assertObject(new Line(2207,3204));
        drools.assertObject(new Line(3204,6404));
        drools.assertObject(new Line(2216,2207));
        drools.assertObject(new Line(3213,3204));
        drools.assertObject(new Line(2216,3213));
        drools.assertObject(new Line(0107,2601));
        drools.assertObject(new Line(2601,7401));
        drools.assertObject(new Line(6404,7401));
        drools.assertObject(new Line(3213,6413));
        drools.assertObject(new Line(6413,6404));
        drools.assertObject(new Line(7416,7401));
        drools.assertObject(new Line(5216,6413));
        drools.assertObject(new Line(2216,5216));
        drools.assertObject(new Line(0122,5222));
        drools.assertObject(new Line(5222,7416));
        drools.assertObject(new Line(5222,5216));
        System.out.println("Started waltz...");
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
