{
  final Rule rule=new Rule("plot_boundaries");
  final Column stageColumn=new Column(0,this.stageType,"stage");
  stageColumn.addConstraint(getLiteralConstraint(stageColumn,"value",new Integer(Stage.PLOT_REMAINING_EDGES),this.integerEqualEvaluator));
  rule.addPattern(stageColumn);
  final Column edgeColumn=new Column(1,this.edgeType,"edge");
  edgeColumn.addConstraint(getLiteralConstraint(edgeColumn,"plotted",Edge.NIL,this.objectEqualEvaluator));
  edgeColumn.addConstraint(getLiteralConstraint(edgeColumn,"label",Edge.NIL,this.objectEqualEvaluator));
  rule.addPattern(edgeColumn);
  final Declaration edgeDeclaration=rule.getDeclaration("edge");
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Edge edge=(Edge)drools.get(edgeDeclaration);
        System.out.println("plot B " + edge.getP1() + " "+ edge.getP2());
        edge.setPlotted(Edge.TRUE);
        drools.modifyObject(tuple.get(edgeDeclaration),edge);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
