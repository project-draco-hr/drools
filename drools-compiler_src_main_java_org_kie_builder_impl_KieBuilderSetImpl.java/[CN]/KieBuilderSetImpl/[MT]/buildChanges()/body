{
  List<KnowledgeBuilderError> currentErrors=new ArrayList<KnowledgeBuilderError>();
  InternalKieModule kieModule=(InternalKieModule)kieBuilder.getKieModuleIgnoringErrors();
  for (  KieBaseModel kBaseModel : kieModule.getKieModuleModel().getKieBaseModels().values()) {
    KnowledgeBuilder kBuilder=kieModule.getKnowledgeBuilderForKieBase(kBaseModel.getName());
    CompositeKnowledgeBuilder ckbuilder=kBuilder.batch();
    PackageBuilder pkgBuilder=((KnowledgeBuilderImpl)kBuilder).getPackageBuilder();
    Set<String> wrongResources=resourcesWithErrors.get(kBaseModel.getName());
    for (    String resourceName : wrongResources) {
      pkgBuilder.removeObjectsGeneratedFromResource(new DummyResource(resourceName));
      addResource(ckbuilder,kBaseModel,kieModule,resourceName);
    }
    boolean modified=false;
    for (    String file : files) {
      String resourceName=file.startsWith(KieBuilderImpl.RESOURCES_ROOT) ? file.substring(KieBuilderImpl.RESOURCES_ROOT.length()) : file;
      if (wrongResources.contains(resourceName)) {
        modified=true;
      }
 else {
        modified=pkgBuilder.removeObjectsGeneratedFromResource(new DummyResource(resourceName)) || modified;
        modified=addResource(ckbuilder,kBaseModel,kieModule,resourceName) || modified;
      }
    }
    if (modified) {
      ckbuilder.build();
      resourcesWithErrors.put(kBaseModel.getName(),findResourcesWithErrors(kBuilder));
      if (kBuilder.hasErrors()) {
        currentErrors.addAll(kBuilder.getErrors());
        kBuilder.undo();
      }
 else {
        KieServices.Factory.get().getRepository().addKieModule(kieModule);
      }
    }
  }
  files=null;
  IncrementalResultsImpl results=getIncrementalResults(currentErrors);
  previousErrors=currentErrors;
  return results;
}
