{
  ResourceChangeSet pkgcs=new ResourceChangeSet(file,ChangeType.UPDATED);
  ResourceType type=ResourceType.determineResourceType(file);
  if (ResourceType.DRL.equals(type) || ResourceType.GDRL.equals(type) || ResourceType.RDRL.equals(type)|| ResourceType.TDRL.equals(type)) {
    try {
      PackageDescr opkg=new DrlParser().parse(new ByteArrayResource(ob));
      PackageDescr cpkg=new DrlParser().parse(new ByteArrayResource(cb));
      String pkgName=isEmpty(cpkg.getName()) ? getDefaultPackageName() : cpkg.getName();
      for (      RuleDescr crd : cpkg.getRules()) {
        pkgcs.getLoadOrder().add(new ResourceChangeSet.RuleLoadOrder(pkgName,crd.getName(),crd.getLoadOrder()));
      }
      List<RuleDescr> orules=new ArrayList<RuleDescr>(opkg.getRules());
      diffDescrs(ob,cb,pkgcs,orules,cpkg.getRules(),ResourceChange.Type.RULE,RULE_CONVERTER);
      List<FunctionDescr> ofuncs=new ArrayList<FunctionDescr>(opkg.getFunctions());
      diffDescrs(ob,cb,pkgcs,ofuncs,cpkg.getFunctions(),ResourceChange.Type.FUNCTION,FUNC_CONVERTER);
    }
 catch (    Exception e) {
      logger.error("Error analyzing the contents of " + file + ". Skipping.",e);
    }
  }
  Collections.sort(pkgcs.getChanges(),new Comparator<ResourceChange>(){
    public int compare(    ResourceChange o1,    ResourceChange o2){
      return o1.getChangeType().ordinal() - o2.getChangeType().ordinal();
    }
  }
);
  return pkgcs;
}
