{
  final ZipInputStream zis=new ZipInputStream(this.input);
  final ZipOutputStream zos=new ZipOutputStream(this.output);
  final OutputStreamWriter osw=new OutputStreamWriter(zos);
  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
  final TransformerFactory tf=TransformerFactory.newInstance();
  if (!tf.getFeature(SAXSource.FEATURE) || !tf.getFeature(SAXResult.FEATURE)) {
    return 0;
  }
  final SAXTransformerFactory saxtf=(SAXTransformerFactory)tf;
  Templates templates=null;
  if (this.xslt != null) {
    templates=saxtf.newTemplates(this.xslt);
  }
  final EntryElement entryElement=getEntryElement(zos);
  ContentHandler outDocHandler=null;
switch (this.outRepresentation) {
case BYTECODE:
    outDocHandler=new OutputSlicingHandler(new ASMContentHandlerFactory(zos,this.computeMax),entryElement,false);
  break;
case MULTI_XML:
outDocHandler=new OutputSlicingHandler(new SAXWriterFactory(osw,true),entryElement,true);
break;
case SINGLE_XML:
final ZipEntry outputEntry=new ZipEntry(Processor.SINGLE_XML_NAME);
zos.putNextEntry(outputEntry);
outDocHandler=new SAXWriter(osw,false);
break;
}
ContentHandler inDocHandler=null;
if (templates == null) {
inDocHandler=outDocHandler;
}
 else {
inDocHandler=new InputSlicingHandler("class",outDocHandler,new TransformerHandlerFactory(saxtf,templates,outDocHandler));
}
final ContentHandlerFactory inDocHandlerFactory=new SubdocumentHandlerFactory(inDocHandler);
if (inDocHandler != null && this.inRepresentation != Processor.SINGLE_XML) {
inDocHandler.startDocument();
inDocHandler.startElement("","classes","classes",new AttributesImpl());
}
int i=0;
ZipEntry ze=null;
while ((ze=zis.getNextEntry()) != null) {
update(ze.getName(),this.n++);
if (isClassEntry(ze)) {
processEntry(zis,ze,inDocHandlerFactory);
}
 else {
final OutputStream os=entryElement.openEntry(getName(ze));
copyEntry(zis,os);
entryElement.closeEntry();
}
i++;
}
if (inDocHandler != null && this.inRepresentation != Processor.SINGLE_XML) {
inDocHandler.endElement("","classes","classes");
inDocHandler.endDocument();
}
if (this.outRepresentation == Processor.SINGLE_XML) {
zos.closeEntry();
}
zos.flush();
zos.close();
return i;
}
