{
  KeyStoreHelper helper=new KeyStoreHelper();
  boolean signed=_header.hasSignature();
  if (helper.isSigned() != signed) {
    throw new RuntimeDroolsException("This environment is configured to work with " + (helper.isSigned() ? "signed" : "unsigned") + " serialized objects, but the given object is "+ (signed ? "signed" : "unsigned")+ ". Deserialization aborted.");
  }
  if (signed) {
    if (helper.getPubKeyStore() == null) {
      throw new RuntimeDroolsException("The session was serialized with a signature. Please configure a public keystore with the public key to check the signature. Deserialization aborted.");
    }
    try {
      if (!helper.checkDataWithPublicKey(_header.getKeyAlias(),sessionbuff,_header.getSignature().toByteArray())) {
        throw new RuntimeDroolsException("Signature does not match serialized package. This is a security violation. Deserialisation aborted.");
      }
    }
 catch (    InvalidKeyException e) {
      throw new RuntimeDroolsException("Invalid key checking signature: " + e.getMessage(),e);
    }
catch (    KeyStoreException e) {
      throw new RuntimeDroolsException("Error accessing Key Store: " + e.getMessage(),e);
    }
catch (    NoSuchAlgorithmException e) {
      throw new RuntimeDroolsException("No algorithm available: " + e.getMessage(),e);
    }
catch (    SignatureException e) {
      throw new RuntimeDroolsException("Signature Exception: " + e.getMessage(),e);
    }
  }
}
