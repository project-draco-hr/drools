{
  try {
    int _type=MISC;
    int _channel=DEFAULT_TOKEN_CHANNEL;
    int alt21=25;
    alt21=dfa21.predict(input);
switch (alt21) {
case 1:
{
        match("&&");
        if (state.failed)         return;
      }
    break;
case 2:
{
    match("||");
    if (state.failed)     return;
  }
break;
case 3:
{
match("<=");
if (state.failed) return;
}
break;
case 4:
{
match(">=");
if (state.failed) return;
}
break;
case 5:
{
match("==");
if (state.failed) return;
}
break;
case 6:
{
match("!=");
if (state.failed) return;
}
break;
case 7:
{
match("->");
if (state.failed) return;
}
break;
case 8:
{
match('!');
if (state.failed) return;
}
break;
case 9:
{
match('%');
if (state.failed) return;
}
break;
case 10:
{
match('^');
if (state.failed) return;
}
break;
case 11:
{
match('-');
if (state.failed) return;
}
break;
case 12:
{
match('+');
if (state.failed) return;
}
break;
case 13:
{
match('?');
if (state.failed) return;
}
break;
case 14:
{
match('/');
if (state.failed) return;
}
break;
case 15:
{
match('\'');
if (state.failed) return;
}
break;
case 16:
{
match('\\');
if (state.failed) return;
}
break;
case 17:
{
match('|');
if (state.failed) return;
}
break;
case 18:
{
match('&');
if (state.failed) return;
}
break;
case 19:
{
match('$');
if (state.failed) return;
}
break;
case 20:
{
match('@');
if (state.failed) return;
}
break;
case 21:
{
match('=');
if (state.failed) return;
}
break;
case 22:
{
match('>');
if (state.failed) return;
}
break;
case 23:
{
match('<');
if (state.failed) return;
}
break;
case 24:
{
match('{');
if (state.failed) return;
}
break;
case 25:
{
match('}');
if (state.failed) return;
}
break;
}
state.type=_type;
state.channel=_channel;
}
  finally {
}
}
