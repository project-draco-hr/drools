{
  if (context.getMethods().isEmpty()) {
    return null;
  }
  final String lineSeparator=System.getProperty("line.separator");
  final StringBuilder buffer=new StringBuilder();
  buffer.append("package ").append(context.getPkg().getName()).append(";").append(lineSeparator);
  for (  String s : context.getPkg().getImports().keySet()) {
    buffer.append("import ").append(s).append(";");
  }
  for (  String s : context.getPkg().getStaticImports()) {
    buffer.append("import static ").append(s).append(";");
  }
  buffer.append(lineSeparator);
  final RuleDescr ruleDescr=context.getRuleDescr();
  buffer.append("public class ").append(StringUtils.ucFirst(ruleDescr.getClassName())).append(" {").append(lineSeparator);
  buffer.append("    private static final long serialVersionUID = 510l;").append(lineSeparator);
  for (int i=0, size=context.getMethods().size() - 1; i < size; i++) {
    buffer.append(context.getMethods().get(i)).append(lineSeparator);
  }
  final String[] lines=buffer.toString().split(lineSeparator,-1);
  ruleDescr.setConsequenceOffset(lines.length);
  buffer.append(context.getMethods().get(context.getMethods().size() - 1)).append(lineSeparator);
  buffer.append("}");
  return buffer.toString();
}
