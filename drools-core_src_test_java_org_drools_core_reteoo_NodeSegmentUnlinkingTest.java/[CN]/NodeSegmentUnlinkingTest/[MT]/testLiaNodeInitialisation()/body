{
  setUp(JOIN_NODE);
  KieBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(RuleEngineOption.PHREAK);
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase(kconf);
  StatefulKnowledgeSessionImpl ksession=(StatefulKnowledgeSessionImpl)kBase.newStatefulKnowledgeSession();
  SegmentUtilities.createSegmentMemory(liaNode,ksession);
  liaNode.assertObject((InternalFactHandle)ksession.insert("str"),context,ksession);
  LiaNodeMemory liaMem=(LiaNodeMemory)ksession.getNodeMemory(liaNode);
  assertEquals(1,liaMem.getNodePosMaskBit());
  assertEquals(3,liaMem.getSegmentMemory().getAllLinkedMaskTest());
  BetaMemory bm1=(BetaMemory)ksession.getNodeMemory(n1);
  assertEquals(2,bm1.getNodePosMaskBit());
  assertEquals(3,bm1.getSegmentMemory().getAllLinkedMaskTest());
  kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase(kconf);
  ksession=(StatefulKnowledgeSessionImpl)kBase.newStatefulKnowledgeSession();
  n1.assertObject((InternalFactHandle)ksession.insert("str"),context,ksession);
  liaMem=(LiaNodeMemory)ksession.getNodeMemory(liaNode);
  assertEquals(1,liaMem.getNodePosMaskBit());
  assertEquals(3,liaMem.getSegmentMemory().getAllLinkedMaskTest());
  bm1=(BetaMemory)ksession.getNodeMemory(n1);
  assertEquals(2,bm1.getNodePosMaskBit());
  assertEquals(3,bm1.getSegmentMemory().getAllLinkedMaskTest());
}
