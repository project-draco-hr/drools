{
  PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_DynamicFunction1.drl")));
  final Package pkg=builder.getPackage();
  final RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  final List list=new ArrayList();
  workingMemory.setGlobal("list",list);
  final Cheese stilton=new Cheese("stilton",5);
  workingMemory.insert(stilton);
  workingMemory.fireAllRules();
  assertEquals(new Integer(5),list.get(0));
  ruleBase.removeFunction("org.drools.test","addFive");
  final Cheese cheddar=new Cheese("cheddar",5);
  workingMemory.insert(cheddar);
  try {
    workingMemory.fireAllRules();
    fail("Function should have been removed and NoClassDefFoundError thrown from the Consequence");
  }
 catch (  final NoClassDefFoundError e) {
  }
  builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_DynamicFunction2.drl")));
  ruleBase.addPackage(serialisePackage(builder.getPackage()));
  final Cheese brie=new Cheese("brie",5);
  workingMemory.insert(brie);
  workingMemory.fireAllRules();
  assertEquals(new Integer(6),list.get(1));
  builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_DynamicFunction3.drl")));
  ruleBase.addPackage(serialisePackage(builder.getPackage()));
  final Cheese feta=new Cheese("feta",5);
  workingMemory.insert(feta);
  workingMemory.fireAllRules();
  assertEquals(new Integer(5),list.get(2));
}
