{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("test_CollectDynamicRules1.drl",getClass()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  Collection<KnowledgePackage> kpkgs=SerializationHelper.serializeObject(kbuilder.getKnowledgePackages());
  kbase.addKnowledgePackages(kpkgs);
  kbase=SerializationHelper.serializeObject(kbase);
  Environment env=EnvironmentFactory.newEnvironment();
  env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES,new ObjectMarshallingStrategy[]{new IdentityPlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)});
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession(null,env);
  List results=new ArrayList();
  ksession.setGlobal("results",results);
  final Cheese a=new Cheese("stilton",10);
  final Cheese b=new Cheese("stilton",15);
  final Cheese c=new Cheese("stilton",20);
  ksession.insert(a);
  ksession.insert(b);
  ksession.insert(c);
  kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("test_DynamicNotNode.drl",getClass()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  kpkgs=SerializationHelper.serializeObject(kbuilder.getKnowledgePackages());
  kbase.addKnowledgePackages(kpkgs);
  kbase=SerializationHelper.serializeObject(kbase);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,false);
  results=(List)ksession.getGlobal("results");
  ksession.fireAllRules();
  assertEquals(0,results.size());
  kbase.removeKnowledgePackage("org.drools");
  ksession.retract(ksession.getFactHandle(b));
  kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("test_DynamicNotNode.drl",getClass()),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  kpkgs=SerializationHelper.serializeObject(kbuilder.getKnowledgePackages());
  kbase.addKnowledgePackages(kpkgs);
  kbase=SerializationHelper.serializeObject(kbase);
  ksession=SerializationHelper.getSerialisedStatefulKnowledgeSession(ksession,false);
  results=(List)ksession.getGlobal("results");
  ksession.fireAllRules();
  assertEquals(1,results.size());
}
