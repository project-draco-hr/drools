{
  final String packageName=(String)vars.get("package");
  final String invokerClassName=(String)vars.get("invokerClassName");
  final String ruleClassName=(String)vars.get("ruleClassName");
  final String internalRuleClassName=(packageName + "." + ruleClassName).replace(".","/");
  final String methodName=(String)vars.get("methodName");
  final ClassGenerator generator=new ClassGenerator(packageName + "." + invokerClassName,ruleContext.getPackageBuilder().getRootClassLoader(),ruleContext.getDialect("java").getPackageRegistry().getTypeResolver()).setInterfaces(PredicateExpression.class,CompiledInvoker.class);
  generator.addStaticField(ACC_PRIVATE + ACC_FINAL,"serialVersionUID",Long.TYPE,new Long(510L)).addDefaultConstructor();
  generator.addMethod(ACC_PUBLIC,"createContext",generator.methodDescr(Object.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      mv.visitInsn(ACONST_NULL);
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"hashCode",generator.methodDescr(Integer.TYPE),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      int hashCode=(Integer)vars.get("hashCode");
      push(hashCode);
      mv.visitInsn(IRETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getMethodBytecode",generator.methodDescr(List.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      mv.visitVarInsn(ALOAD,0);
      invokeVirtual(Object.class,"getClass",Class.class);
      push(ruleClassName);
      push(packageName);
      push(methodName);
      push(internalRuleClassName + ".class");
      invokeStatic(Rule.class,"getMethodBytecode",List.class,Class.class,String.class,String.class,String.class,String.class);
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"equals",generator.methodDescr(Boolean.TYPE,Object.class),new ConsequenceGenerator.EqualsMethod()).addMethod(ACC_PUBLIC,"evaluate",generator.methodDescr(Boolean.TYPE,Object.class,Tuple.class,Declaration[].class,Declaration[].class,WorkingMemory.class,Object.class),new String[]{"java/lang/Exception"},new ConsequenceGenerator.EvaluateMethod(){
    public void body(    MethodVisitor mv){
      final Declaration[] previousDeclarations=(Declaration[])vars.get("declarations");
      final String[] previousDeclarationTypes=(String[])vars.get("declarationTypes");
      final Declaration[] localDeclarations=(Declaration[])vars.get("localDeclarations");
      final String[] localDeclarationTypes=(String[])vars.get("localDeclarationTypes");
      final String[] globals=(String[])vars.get("globals");
      final String[] globalTypes=(String[])vars.get("globalTypes");
      offset=7;
      int[] previousDeclarationsParamsPos=parseDeclarations(previousDeclarations,previousDeclarationTypes,3,2,5,false);
      int[] localDeclarationsParamsPos=parseDeclarations(localDeclarations,localDeclarationTypes,4,2,5,true);
      StringBuilder predicateMethodDescr=new StringBuilder("(");
      for (int i=0; i < previousDeclarations.length; i++) {
        load(previousDeclarationsParamsPos[i]);
        predicateMethodDescr.append(typeDescr(previousDeclarationTypes[i]));
      }
      for (int i=0; i < localDeclarations.length; i++) {
        load(localDeclarationsParamsPos[i]);
        predicateMethodDescr.append(typeDescr(localDeclarationTypes[i]));
      }
      parseGlobals(globals,globalTypes,5,predicateMethodDescr);
      predicateMethodDescr.append(")Z");
      mv.visitMethodInsn(INVOKESTATIC,internalRuleClassName,methodName,predicateMethodDescr.toString());
      mv.visitInsn(IRETURN);
    }
  }
);
  return generator.generateBytecode();
}
