{
  final RuleBase rb=RuleBaseFactory.newRuleBase();
  final Package pkg=new Package("org.test");
  pkg.addGlobal("list",List.class);
  rb.addPackage(pkg);
  final WorkingMemory wm=rb.newWorkingMemory();
  final LiteralValue literalKey=new LiteralValue("literalKey1");
  final LiteralValue literalValue=new LiteralValue("literalValue");
  final MapValue.KeyValuePair literalPair=new MapValue.KeyValuePair(literalKey,literalValue);
  final Column column=new Column(0,new ClassObjectType(Cheese.class),"stilton");
  final DeclarationVariable declaration=new DeclarationVariable(column.getDeclaration());
  final MapValue.KeyValuePair declarationLiteralPair=new MapValue.KeyValuePair(declaration,literalValue);
  final LiteralValue literalKey2=new LiteralValue("literalKey2");
  final MapValue.KeyValuePair literalDeclarationPair=new MapValue.KeyValuePair(literalKey2,declaration);
  final GlobalVariable global=new GlobalVariable("list",List.class);
  final MapValue.KeyValuePair globalDeclarationPair=new MapValue.KeyValuePair(global,declaration);
  final LiteralValue literalKey3=new LiteralValue("literalKey3");
  final MapValue.KeyValuePair LiteralGlobalPair=new MapValue.KeyValuePair(literalKey3,global);
  final MapValue mapValue=new MapValue(new MapValue.KeyValuePair[]{literalPair,globalDeclarationPair,LiteralGlobalPair,declarationLiteralPair,literalDeclarationPair});
  final Cheese stilton=new Cheese("stilton",20);
  final FactHandle stiltonHandle=wm.assertObject(stilton);
  final Tuple tuple=new ReteTuple((DefaultFactHandle)stiltonHandle);
  final List list=new ArrayList();
  wm.setGlobal("list",list);
  final Map map=(Map)mapValue.getValue(tuple,wm);
  assertEquals("literalValue",map.get("literalKey1"));
  assertEquals("literalValue",map.get(stilton));
  assertEquals(stilton,map.get("literalKey2"));
  assertEquals(stilton,map.get("literalKey2"));
  assertEquals(stilton,map.get(list));
  assertEquals(list,map.get("literalKey3"));
}
