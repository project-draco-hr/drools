{
  context.getBuildStack().push(context.getRule().getLhs());
  try {
    MVELDialect dialect=(MVELDialect)context.getDialect("mvel");
    Map<String,Class<?>> otherVars=new HashMap<String,Class<?>>();
    otherVars.put("rule",org.drools.rule.Rule.class);
    Map<String,Declaration> declrs=context.getDeclarationResolver().getDeclarations(context.getRule());
    AnalysisResult analysis=dialect.analyzeExpression(context,context.getRuleDescr(),(String)context.getRuleDescr().getEnabled(),new BoundIdentifiers(context.getDeclarationResolver().getDeclarationClasses(declrs),context.getPackageBuilder().getGlobals()),otherVars);
    final BoundIdentifiers usedIdentifiers=analysis.getBoundIdentifiers();
    int i=usedIdentifiers.getDeclrClasses().keySet().size();
    Declaration[] previousDeclarations=new Declaration[i];
    i=0;
    for (    String id : usedIdentifiers.getDeclrClasses().keySet()) {
      previousDeclarations[i++]=declrs.get(id);
    }
    Arrays.sort(previousDeclarations,SortDeclarations.instance);
    String exprStr=(String)context.getRuleDescr().getEnabled();
    exprStr=exprStr.substring(1,exprStr.length() - 1) + " ";
    MVELCompilationUnit unit=dialect.getMVELCompilationUnit(exprStr,analysis,previousDeclarations,null,otherVars,context,"drools",KnowledgeHelper.class);
    MVELEnabledExpression expr=new MVELEnabledExpression(unit,dialect.getId());
    context.getRule().setEnabled(expr);
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel");
    data.addCompileable(context.getRule(),expr);
    expr.compile(data);
  }
 catch (  final Exception e) {
    copyErrorLocation(e,context.getRuleDescr());
    context.addError(new DescrBuildError(context.getParentDescr(),context.getRuleDescr(),null,"Unable to build expression for 'enabled' : " + e.getMessage() + " '"+ context.getRuleDescr().getEnabled()+ "'"));
  }
}
