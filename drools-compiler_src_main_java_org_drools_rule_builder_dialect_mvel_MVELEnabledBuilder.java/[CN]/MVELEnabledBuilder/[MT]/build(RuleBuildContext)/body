{
  context.getBuildStack().push(context.getRule().getLhs());
  try {
    MVELDialect dialect=(MVELDialect)context.getDialect("mvel");
    Dialect.AnalysisResult analysis=dialect.analyzeExpression(context,context.getRuleDescr(),(String)context.getRuleDescr().getSalience(),new Set[]{context.getDeclarationResolver().getDeclarations().keySet(),context.getPkg().getGlobals().keySet()});
    Declaration[] previousDeclarations=(Declaration[])context.getDeclarationResolver().getDeclarations().values().toArray(new Declaration[context.getDeclarationResolver().getDeclarations().size()]);
    MVELCompilationUnit unit=dialect.getMVELCompilationUnit((String)context.getRuleDescr().getSalience(),analysis,previousDeclarations,null,null,context);
    MVELEnabledExpression expr=new MVELEnabledExpression(unit,dialect.getId());
    context.getRule().setEnabled(expr);
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData(dialect.getId());
    data.addCompileable(context.getRule(),expr);
    expr.compile(context.getPackageBuilder().getRootClassLoader());
  }
 catch (  final Exception e) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),context.getRuleDescr(),null,"Unable to build expression for 'enabled' : " + e.getMessage() + " '"+ context.getRuleDescr().getEnabled()+ "'"));
  }
}
