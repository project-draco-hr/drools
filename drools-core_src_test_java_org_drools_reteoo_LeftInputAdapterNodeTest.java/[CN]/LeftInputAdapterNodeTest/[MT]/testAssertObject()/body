{
  PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  WorkingMemoryImpl workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  LeftInputAdapterNode liaNode=new LeftInputAdapterNode(1,new MockObjectSource(15));
  MockTupleSink sink=new MockTupleSink();
  liaNode.addTupleSink(sink);
  Object string1="cheese";
  FactHandleImpl f0=(FactHandleImpl)workingMemory.assertObject(string1);
  liaNode.assertObject(f0,context,workingMemory);
  List asserted=sink.getAsserted();
  assertLength(1,asserted);
  ReteTuple tuple0=(ReteTuple)((Object[])asserted.get(0))[0];
  assertSame(string1,workingMemory.getObject(tuple0.get(0)));
  Map map=(Map)workingMemory.getNodeMemory(liaNode);
  LinkedList list0=(LinkedList)(LinkedList)map.get(f0);
  assertEquals(1,list0.size());
  assertSame(tuple0,((LinkedListObjectWrapper)list0.getFirst()).getObject());
  FactHandleImpl f1=(FactHandleImpl)workingMemory.assertObject("test1");
  liaNode.assertObject(f1,context,workingMemory);
  assertLength(2,asserted);
  ReteTuple tuple1=(ReteTuple)((Object[])asserted.get(1))[0];
  LinkedList list1=(LinkedList)(LinkedList)map.get(f1);
  assertEquals(1,list1.size());
  assertSame(tuple1,((LinkedListObjectWrapper)list1.getFirst()).getObject());
  assertNotSame(tuple0,tuple1);
}
