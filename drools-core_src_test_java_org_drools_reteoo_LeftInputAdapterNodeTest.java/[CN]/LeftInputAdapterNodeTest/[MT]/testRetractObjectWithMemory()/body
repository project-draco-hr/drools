{
  final PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  final ReteooWorkingMemory workingMemory=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase());
  final MockObjectSource source=new MockObjectSource(15);
  final LeftInputAdapterNode liaNode=new LeftInputAdapterNode(1,source);
  final Field field=BaseNode.class.getDeclaredField("hasMemory");
  field.setAccessible(true);
  field.set(liaNode,new Boolean(true));
  final MockTupleSink sink=new MockTupleSink();
  liaNode.addTupleSink(sink);
  final DefaultFactHandle f0=(DefaultFactHandle)workingMemory.insert("f1");
  liaNode.assertObject(f0,context,workingMemory);
  final Tuple tuple=(Tuple)((Object[])sink.getAsserted().get(0))[0];
  final FactHashTable map=(FactHashTable)workingMemory.getNodeMemory(liaNode);
  assertTrue(map.contains(f0));
  liaNode.retractObject(f0,context,workingMemory);
  assertFalse(map.contains(f0));
  assertNotSame(tuple,((Object[])sink.getRetracted().get(0))[0]);
}
