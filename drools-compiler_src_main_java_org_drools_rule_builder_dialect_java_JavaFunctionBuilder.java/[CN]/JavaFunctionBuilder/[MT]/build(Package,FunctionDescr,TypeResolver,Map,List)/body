{
  final StringTemplate st=JavaFunctionBuilder.functionGroup.getInstanceOf("function");
  st.setAttribute("package",pkg.getName());
  st.setAttribute("imports",pkg.getImports());
  st.setAttribute("className",StringUtils.ucFirst(functionDescr.getName()));
  st.setAttribute("methodName",functionDescr.getName());
  st.setAttribute("returnType",functionDescr.getReturnType());
  st.setAttribute("parameterTypes",functionDescr.getParameterTypes());
  st.setAttribute("parameterNames",functionDescr.getParameterNames());
  final Map params=new HashMap();
  final List names=functionDescr.getParameterNames();
  final List types=functionDescr.getParameterTypes();
  try {
    for (int i=0, size=names.size(); i < size; i++) {
      params.put(names.get(i),typeResolver.resolveType((String)types.get(i)));
    }
  }
 catch (  final ClassNotFoundException e) {
    errors.add(new FunctionError(functionDescr,e,"unable to resolve type while building function"));
  }
  st.setAttribute("text",functionDescr.getText());
  final String text=st.toString();
  final BufferedReader reader=new BufferedReader(new StringReader(text));
  String line=null;
  final String lineStartsWith="    public static " + functionDescr.getReturnType() + " "+ functionDescr.getName();
  int offset=0;
  try {
    while ((line=reader.readLine()) != null) {
      offset++;
      if (line.startsWith(lineStartsWith)) {
        break;
      }
    }
    functionDescr.setOffset(offset);
  }
 catch (  final IOException e) {
    throw new RuntimeDroolsException("Error determining start offset with function");
  }
  final String name=pkg.getName() + "." + StringUtils.ucFirst(functionDescr.getName());
  final LineMappings mapping=new LineMappings(name);
  mapping.setStartLine(functionDescr.getLine());
  mapping.setOffset(functionDescr.getOffset());
  lineMappings.put(name,mapping);
  return text;
}
