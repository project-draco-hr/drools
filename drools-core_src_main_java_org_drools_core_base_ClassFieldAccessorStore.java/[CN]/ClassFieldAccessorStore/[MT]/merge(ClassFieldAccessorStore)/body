{
  for (  Entry<AccessorKey,BaseLookupEntry> entry : other.lookup.entrySet()) {
switch (entry.getValue().getAccessorType()) {
case FieldAccessor:
{
        FieldLookupEntry lookupEntry=(FieldLookupEntry)this.lookup.get(entry.getKey());
        if (lookupEntry == null) {
          lookupEntry=(FieldLookupEntry)entry.getValue();
          this.lookup.put(entry.getKey(),lookupEntry);
        }
        if (lookupEntry.getClassFieldReader() != null) {
          wire(((FieldLookupEntry)entry.getValue()).getClassFieldReader());
        }
        if (lookupEntry.getClassFieldWriter() != null) {
          wire(((FieldLookupEntry)entry.getValue()).getClassFieldWriter());
        }
        break;
      }
case ClassObjectType:
{
      ClassObjectTypeLookupEntry lookupEntry=(ClassObjectTypeLookupEntry)this.lookup.get(entry.getKey());
      if (lookupEntry == null) {
        lookupEntry=new ClassObjectTypeLookupEntry(cache.getClassObjectType(((ClassObjectTypeLookupEntry)entry.getValue()).getClassObjectType(),true));
        this.lookup.put(entry.getKey(),lookupEntry);
      }
    }
}
}
}
