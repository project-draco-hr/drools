{
  String proxyType=BuildUtils.getInternalType(proxy);
{
    MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,"toString","()" + Type.getDescriptor(String.class),null,null);
    mv.visitCode();
    mv.visitTypeInsn(NEW,Type.getInternalName(StringBuilder.class));
    mv.visitInsn(DUP);
    mv.visitMethodInsn(INVOKESPECIAL,Type.getInternalName(StringBuilder.class),"<init>","()V");
    mv.visitLdcInsn("(@" + proxy + ") : ");
    mv.visitMethodInsn(INVOKEVIRTUAL,Type.getInternalName(StringBuilder.class),"append","(" + Type.getDescriptor(String.class) + ")"+ Type.getDescriptor(StringBuilder.class));
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKEVIRTUAL,proxyType,"getFields","()" + Type.getDescriptor(Map.class));
    mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Map.class),"entrySet","()" + Type.getDescriptor(Set.class));
    mv.visitMethodInsn(INVOKEVIRTUAL,Type.getInternalName(Object.class),"toString","()" + Type.getDescriptor(String.class));
    mv.visitMethodInsn(INVOKEVIRTUAL,Type.getInternalName(StringBuilder.class),"append","(" + Type.getDescriptor(String.class) + ")"+ Type.getDescriptor(StringBuilder.class));
    mv.visitMethodInsn(INVOKEVIRTUAL,Type.getInternalName(StringBuilder.class),"toString","()" + Type.getDescriptor(String.class));
    mv.visitInsn(ARETURN);
    mv.visitMaxs(0,0);
    mv.visitEnd();
  }
}
