{
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  Rete rete=kBase.getRete();
  NodeFactory nFacotry=kBase.getConfiguration().getComponentFactory().getNodeFactoryService();
  EntryPointNode epn=nFacotry.buildEntryPointNode(kBase.getReteooBuilder().getIdGenerator().getNextId(),RuleBasePartitionId.MAIN_PARTITION,kBase.getConfiguration().isMultithreadEvaluation(),rete,new EntryPointId("xxx"));
  kBase.getRete().addObjectSink(epn);
  StatefulKnowledgeSession ksession=kBase.newStatefulKnowledgeSession();
  FactHandle f1=ksession.insert("f1");
  EntryPoint ep=ksession.getEntryPoint("xxx");
  try {
    ep.update(f1,"s1");
    fail("Should throw an exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    ep.retract(f1);
    fail("Should throw an exception");
  }
 catch (  IllegalArgumentException e) {
  }
  ksession.update(f1,"s1");
  assertNotNull(ksession.getObject(f1));
  ksession.retract(f1);
  ksession.retract(f1);
  assertNull(ksession.getObject(f1));
}
