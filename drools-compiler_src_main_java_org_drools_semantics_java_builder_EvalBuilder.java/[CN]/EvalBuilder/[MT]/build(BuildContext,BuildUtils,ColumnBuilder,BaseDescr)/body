{
  EvalDescr evalDescr=(EvalDescr)descr;
  final String className="eval" + context.getNextId();
  evalDescr.setClassMethodName(className);
  final List[] usedIdentifiers=utils.getUsedIdentifiers(context,evalDescr,evalDescr.getText());
  final Declaration[] declarations=new Declaration[usedIdentifiers[0].size()];
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    declarations[i]=(Declaration)context.getDeclarations().get((String)usedIdentifiers[0].get(i));
  }
  final EvalCondition eval=new EvalCondition(declarations);
  StringTemplate st=utils.getRuleGroup().getInstanceOf("evalMethod");
  utils.setStringTemplateAttributes(context,st,declarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]));
  st.setAttribute("methodName",className);
  final String evalText=utils.getFunctionFixer().fix(evalDescr.getText(),context.getVariables());
  st.setAttribute("text",evalText);
  context.getMethods().add(st.toString());
  st=utils.getInvokerGroup().getInstanceOf("evalInvoker");
  st.setAttribute("package",context.getPkg().getName());
  st.setAttribute("ruleClassName",utils.ucFirst(context.getRuleDescr().getClassName()));
  st.setAttribute("invokerClassName",context.getRuleDescr().getClassName() + utils.ucFirst(className) + "Invoker");
  st.setAttribute("methodName",className);
  utils.setStringTemplateAttributes(context,st,declarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]));
  st.setAttribute("hashCode",evalText.hashCode());
  final String invokerClassName=context.getPkg().getName() + "." + context.getRuleDescr().getClassName()+ utils.ucFirst(className)+ "Invoker";
  context.getInvokers().put(invokerClassName,st.toString());
  context.getInvokerLookups().put(invokerClassName,eval);
  context.getDescrLookups().put(invokerClassName,evalDescr);
  return eval;
}
