{
  setUp(JOIN_NODE);
  KnowledgeBaseConfiguration kconf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kconf.setOption(LRUnlinkingOption.ENABLED);
  ReteooWorkingMemory wm=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase((RuleBaseConfiguration)kconf));
  liaNode.assertObject((InternalFactHandle)wm.insert("str"),context,wm);
  LiaNodeMemory liaMem=(LiaNodeMemory)wm.getNodeMemory(liaNode);
  assertEquals(1,liaMem.getNodePosMaskBit());
  assertEquals(3,liaMem.getSegmentMemory().getAllLinkedMaskTest());
  BetaMemory bm1=(BetaMemory)wm.getNodeMemory(n1);
  assertEquals(2,bm1.getNodePosMaskBit());
  assertEquals(3,bm1.getSegmentMemory().getAllLinkedMaskTest());
  wm=new ReteooWorkingMemory(1,(ReteooRuleBase)RuleBaseFactory.newRuleBase((RuleBaseConfiguration)kconf));
  n1.assertObject((InternalFactHandle)wm.insert("str"),context,wm);
  liaMem=(LiaNodeMemory)wm.getNodeMemory(liaNode);
  assertEquals(1,liaMem.getNodePosMaskBit());
  assertEquals(3,liaMem.getSegmentMemory().getAllLinkedMaskTest());
  bm1=(BetaMemory)wm.getNodeMemory(n1);
  assertEquals(2,bm1.getNodePosMaskBit());
  assertEquals(3,bm1.getSegmentMemory().getAllLinkedMaskTest());
}
