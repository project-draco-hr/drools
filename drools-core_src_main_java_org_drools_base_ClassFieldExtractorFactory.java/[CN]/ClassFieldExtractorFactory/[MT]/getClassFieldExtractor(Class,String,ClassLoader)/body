{
  if (byteArrayClassLoader == null || byteArrayClassLoader.getParent() != classLoader) {
    if (classLoader == null) {
      throw new RuntimeDroolsException("ClassFieldExtractorFactory cannot have a null parent ClassLoader");
    }
    byteArrayClassLoader=new ByteArrayClassLoader(classLoader);
  }
  try {
    if (SELF_REFERENCE_FIELD.equals(fieldName)) {
      return new SelfReferenceClassFieldExtractor(clazz,fieldName);
    }
 else     if (fieldName.indexOf('.') > -1 || fieldName.indexOf('[') > -1) {
      return new MVELClassFieldExtractor(clazz,fieldName,classLoader);
    }
 else {
      ClassFieldInspector inspector=(ClassFieldInspector)inspectors.get(clazz);
      if (inspector == null) {
        inspector=new ClassFieldInspector(clazz);
        inspectors.put(clazz,inspector);
      }
      final Class fieldType=(Class)inspector.getFieldTypes().get(fieldName);
      final Method getterMethod=(Method)inspector.getGetterMethods().get(fieldName);
      if (fieldType != null && getterMethod != null) {
        final String className=ClassFieldExtractorFactory.BASE_PACKAGE + "/" + Type.getInternalName(clazz)+ Math.abs(System.identityHashCode(clazz))+ "$"+ getterMethod.getName();
        final byte[] bytes=dump(clazz,className,getterMethod,fieldType,clazz.isInterface());
        final Class newClass=byteArrayClassLoader.defineClass(className.replace('/','.'),bytes,PROTECTION_DOMAIN);
        final Integer index=(Integer)inspector.getFieldNames().get(fieldName);
        final ValueType valueType=ValueType.determineValueType(fieldType);
        final Object[] params={index,fieldType,valueType};
        return (BaseClassFieldExtractor)newClass.getConstructors()[0].newInstance(params);
      }
 else {
        throw new RuntimeDroolsException("Field/method '" + fieldName + "' not found for class '"+ clazz.getName()+ "'");
      }
    }
  }
 catch (  final RuntimeDroolsException e) {
    throw e;
  }
catch (  final Exception e) {
    throw new RuntimeDroolsException(e);
  }
}
