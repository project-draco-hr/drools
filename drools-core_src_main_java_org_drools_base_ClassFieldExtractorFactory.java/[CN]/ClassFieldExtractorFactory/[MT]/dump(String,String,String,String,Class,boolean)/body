{
  final ClassWriter cw=new ClassWriter(true);
  MethodVisitor mv;
  cw.visit(Opcodes.V1_2,Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,className,null,ClassFieldExtractorFactory.BASE_EXTRACTOR,null);
  cw.visitSource(null,null);
{
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"<init>","(Ljava/lang/Class;Ljava/lang/String;)V",null,null);
    mv.visitCode();
    final Label l0=new Label();
    mv.visitLabel(l0);
    mv.visitLineNumber(10,l0);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitVarInsn(Opcodes.ALOAD,2);
    mv.visitMethodInsn(Opcodes.INVOKESPECIAL,ClassFieldExtractorFactory.BASE_EXTRACTOR,"<init>","(Ljava/lang/Class;Ljava/lang/String;)V");
    final Label l1=new Label();
    mv.visitLabel(l1);
    mv.visitLineNumber(11,l1);
    mv.visitInsn(Opcodes.RETURN);
    final Label l2=new Label();
    mv.visitLabel(l2);
    mv.visitLocalVariable("this","L" + className + ";",null,l0,l2,0);
    mv.visitLocalVariable("clazz","Ljava/lang/Class;",null,l0,l2,1);
    mv.visitLocalVariable("fieldName","Ljava/lang/String;",null,l0,l2,2);
    mv.visitMaxs(3,3);
    mv.visitEnd();
  }
  if (fieldType.isPrimitive()) {
    final String primitiveTypeTag=getPrimitiveTag(fieldType);
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"getValue","(Ljava/lang/Object;)Ljava/lang/Object;",null,null);
    mv.visitCode();
    final Label l0=new Label();
    mv.visitLabel(l0);
    mv.visitLineNumber(14,l0);
    mv.visitTypeInsn(Opcodes.NEW,typeName);
    mv.visitInsn(Opcodes.DUP);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,originalClassName);
    if (isInterface) {
      mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,originalClassName,getterName,"()" + primitiveTypeTag);
    }
 else {
      mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,originalClassName,getterName,"()" + primitiveTypeTag);
    }
    mv.visitMethodInsn(Opcodes.INVOKESPECIAL,typeName,"<init>","(" + primitiveTypeTag + ")V");
    mv.visitInsn(Opcodes.ARETURN);
    final Label l1=new Label();
    mv.visitLabel(l1);
    mv.visitLocalVariable("this","L" + className + ";",null,l0,l1,0);
    mv.visitLocalVariable("object","Ljava/lang/Object;",null,l0,l1,1);
    mv.visitMaxs(3,2);
    mv.visitEnd();
  }
 else {
    String typeNotation=fieldType.isArray() ? typeName : "L" + typeName + ";";
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"getValue","(Ljava/lang/Object;)Ljava/lang/Object;",null,null);
    mv.visitCode();
    final Label l0=new Label();
    mv.visitLabel(l0);
    mv.visitLineNumber(15,l0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,originalClassName);
    if (isInterface) {
      mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,originalClassName,getterName,"()" + typeNotation);
    }
 else {
      mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,originalClassName,getterName,"()" + typeNotation);
    }
    mv.visitInsn(Opcodes.ARETURN);
    final Label l1=new Label();
    mv.visitLabel(l1);
    mv.visitLocalVariable("this","L" + className + ";",null,l0,l1,0);
    mv.visitLocalVariable("object","Ljava/lang/Object;",null,l0,l1,1);
    mv.visitMaxs(1,2);
    mv.visitEnd();
  }
  cw.visitEnd();
  return cw.toByteArray();
}
