{
  try {
    if (SELF_REFERENCE_FIELD.equals(fieldName)) {
      return new SelfReferenceClassFieldExtractor(clazz,fieldName);
    }
 else {
      ClassFieldInspector inspector=(ClassFieldInspector)inspectors.get(clazz);
      if (inspector == null) {
        inspector=new ClassFieldInspector(clazz);
        inspectors.put(clazz,inspector);
      }
      final Class fieldType=(Class)inspector.getFieldTypes().get(fieldName);
      final Method getterMethod=(Method)inspector.getGetterMethods().get(fieldName);
      final String className=ClassFieldExtractorFactory.BASE_PACKAGE + "/" + Type.getInternalName(clazz)+ "$"+ getterMethod.getName();
      final byte[] bytes=dump(clazz,className,getterMethod,fieldType,clazz.isInterface());
      final ByteArrayClassLoader classLoader=new ByteArrayClassLoader(Thread.currentThread().getContextClassLoader());
      final Class newClass=classLoader.defineClass(className.replace('/','.'),bytes,PROTECTION_DOMAIN);
      int index=((Integer)inspector.getFieldNames().get(fieldName)).intValue();
      ValueType valueType=ValueType.determineValueType(fieldType);
      final Object[] params={new Integer(index),fieldType,valueType};
      return (BaseClassFieldExtractor)newClass.getConstructors()[0].newInstance(params);
    }
  }
 catch (  final Exception e) {
    throw new RuntimeDroolsException(e);
  }
}
