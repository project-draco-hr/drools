{
  final FromMemory memory=(FromMemory)workingMemory.getNodeMemory(this);
  memory.betaMemory.getLeftTupleMemory().removeAdd(leftTuple);
  final Map<Object,RightTuple> previousMatches=(Map<Object,RightTuple>)leftTuple.getObject();
  final Map<Object,RightTuple> newMatches=new HashMap<Object,RightTuple>();
  leftTuple.setObject(newMatches);
  this.betaConstraints.updateFromTuple(memory.betaMemory.getContext(),workingMemory,leftTuple);
  FastIterator rightIt=LinkedList.fastIterator;
  for (final java.util.Iterator<?> it=this.dataProvider.getResults(leftTuple,workingMemory,context,memory.providerContext); it.hasNext(); ) {
    final Object object=it.next();
    RightTuple rightTuple=previousMatches.remove(object);
    if (rightTuple == null) {
      final InternalFactHandle handle=workingMemory.getFactHandleFactory().newFactHandle(object,null,workingMemory,null);
      rightTuple=new RightTuple(handle,null);
    }
 else {
      if (rightIt.next(rightTuple) != null) {
        previousMatches.put(object,(RightTuple)rightIt.next(rightTuple));
        rightTuple.setNext(null);
      }
    }
    checkConstraintsAndPropagate(leftTuple,rightTuple,context,workingMemory,memory,true);
    addToCreatedHandlesMap(newMatches,rightTuple);
  }
  this.betaConstraints.resetTuple(memory.betaMemory.getContext());
  for (  RightTuple rightTuple : previousMatches.values()) {
    for (RightTuple current=rightTuple; current != null; current=(RightTuple)rightIt.next(current)) {
      retractMatchAndDestroyHandle(leftTuple,current,context,workingMemory);
    }
  }
}
