{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  memory.getTupleMemory().add(leftTuple);
  this.binder.updateFromTuple(workingMemory,leftTuple);
  for (final java.util.Iterator it=this.dataProvider.getResults(leftTuple,workingMemory,context); it.hasNext(); ) {
    final Object object=it.next();
    for (int i=0, length=this.constraints.length; i < length; i++) {
      if (!this.constraints[i].isAllowed(object,workingMemory)) {
        continue;
      }
    }
    if (this.binder.isAllowedCachedLeft(object)) {
      final InternalFactHandle handle=workingMemory.getFactHandleFactory().newFactHandle(object);
      memory.getCreatedHandles().put(leftTuple,handle);
      this.sink.propagateAssertTuple(leftTuple,handle,context,workingMemory);
    }
  }
}
