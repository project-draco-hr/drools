{
  this.betaConstraints.updateFromTuple(memory.betaMemory.getContext(),workingMemory,leftTuple);
  for (final java.util.Iterator it=this.dataProvider.getResults(leftTuple,workingMemory,context,memory.providerContext); it.hasNext(); ) {
    final Object object=it.next();
    final InternalFactHandle handle=workingMemory.getFactHandleFactory().newFactHandle(object,null,workingMemory);
    RightTuple rightTuple=new RightTuple(handle,null);
    boolean isAllowed=true;
    if (this.alphaConstraints != null) {
      for (int i=0, length=this.alphaConstraints.length; i < length; i++) {
        if (!this.alphaConstraints[i].isAllowed(handle,workingMemory,memory.alphaContexts[i])) {
          isAllowed=false;
          break;
        }
      }
    }
    if (isAllowed && this.betaConstraints.isAllowedCachedLeft(memory.betaMemory.getContext(),handle)) {
      this.sink.propagateAssertLeftTuple(leftTuple,rightTuple,context,workingMemory,this.tupleMemoryEnabled);
    }
 else {
      workingMemory.getFactHandleFactory().destroyFactHandle(handle);
    }
  }
  this.betaConstraints.resetTuple(memory.betaMemory.getContext());
}
