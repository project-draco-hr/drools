{
  if (!node.isInUse()) {
    removeTupleSink((LeftTupleSink)node);
  }
  if (!this.isInUse()) {
    for (    InternalWorkingMemory workingMemory : workingMemories) {
      FromMemory memory=(FromMemory)workingMemory.getNodeMemory(this);
      Iterator it=memory.betaMemory.getLeftTupleMemory().iterator();
      for (LeftTuple leftTuple=(LeftTuple)it.next(); leftTuple != null; leftTuple=(LeftTuple)it.next()) {
        unlinkCreatedHandles(workingMemory,memory,leftTuple);
        leftTuple.unlinkFromLeftParent();
        leftTuple.unlinkFromRightParent();
      }
      workingMemory.clearNodeMemory(this);
    }
  }
  this.tupleSource.remove(context,builder,this,workingMemories);
}
