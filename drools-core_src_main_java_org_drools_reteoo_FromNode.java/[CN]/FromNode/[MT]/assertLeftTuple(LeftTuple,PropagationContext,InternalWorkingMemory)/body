{
  final FromMemory memory=(FromMemory)workingMemory.getNodeMemory(this);
  Map<Object,RightTuple> matches=null;
  boolean useLeftMemory=true;
  if (!this.tupleMemoryEnabled) {
    Object object=((InternalFactHandle)leftTuple.get(0)).getObject();
    if (!(object instanceof DroolsQuery) || !((DroolsQuery)object).isOpen()) {
      useLeftMemory=false;
    }
  }
  if (useLeftMemory) {
    memory.betaMemory.getLeftTupleMemory().add(leftTuple);
    matches=new HashMap<Object,RightTuple>();
    leftTuple.setObject(matches);
  }
  this.betaConstraints.updateFromTuple(memory.betaMemory.getContext(),workingMemory,leftTuple);
  for (final java.util.Iterator<?> it=this.dataProvider.getResults(leftTuple,workingMemory,context,memory.providerContext); it.hasNext(); ) {
    final Object object=it.next();
    if (!resultClass.isAssignableFrom(object.getClass())) {
      continue;
    }
    final InternalFactHandle handle=workingMemory.getFactHandleFactory().newFactHandle(object,null,workingMemory,null);
    RightTuple rightTuple=new RightTuple(handle,null);
    checkConstraintsAndPropagate(leftTuple,rightTuple,context,workingMemory,memory,useLeftMemory);
    if (useLeftMemory) {
      addToCreatedHandlesMap(matches,rightTuple);
    }
  }
  this.betaConstraints.resetTuple(memory.betaMemory.getContext());
}
