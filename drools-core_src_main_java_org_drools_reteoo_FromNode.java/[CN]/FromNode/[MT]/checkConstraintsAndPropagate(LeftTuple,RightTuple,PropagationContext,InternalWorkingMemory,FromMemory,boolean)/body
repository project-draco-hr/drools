{
  boolean isAllowed=true;
  if (this.alphaConstraints != null) {
    for (int i=0, length=this.alphaConstraints.length; i < length; i++) {
      if (!this.alphaConstraints[i].isAllowed(rightTuple.getFactHandle(),workingMemory,memory.alphaContexts[i])) {
        isAllowed=false;
        break;
      }
    }
  }
  if (isAllowed && this.betaConstraints.isAllowedCachedLeft(memory.betaMemory.getContext(),rightTuple.getFactHandle())) {
    if (rightTuple.firstChild == null) {
      this.sink.propagateAssertLeftTuple(leftTuple,rightTuple,null,null,context,workingMemory,useLeftMemory);
    }
 else {
      this.sink.propagateModifyChildLeftTuple(rightTuple.firstChild,leftTuple,context,workingMemory,useLeftMemory);
    }
  }
 else {
    retractMatchAndDestroyHandle(leftTuple,rightTuple,context,workingMemory);
  }
}
