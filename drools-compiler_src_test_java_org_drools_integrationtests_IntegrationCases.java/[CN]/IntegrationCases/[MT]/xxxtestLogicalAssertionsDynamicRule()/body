{
  PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_LogicalAssertionsDynamicRule.drl")));
  Package pkg=builder.getPackage();
  org.drools.reteoo.RuleBaseImpl reteooRuleBase=null;
  org.drools.leaps.RuleBaseImpl leapsRuleBase=null;
  RuleBase ruleBase=getRuleBase();
  if (ruleBase instanceof org.drools.reteoo.RuleBaseImpl) {
    reteooRuleBase=(org.drools.reteoo.RuleBaseImpl)ruleBase;
  }
 else   if (ruleBase instanceof org.drools.leaps.RuleBaseImpl) {
    leapsRuleBase=(org.drools.leaps.RuleBaseImpl)ruleBase;
  }
  ruleBase.addPackage(pkg);
  WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  Cheese c1=new Cheese("a",1);
  Cheese c2=new Cheese("b",2);
  Cheese c3=new Cheese("c",3);
  List list;
  workingMemory.assertObject(c1);
  FactHandle h=workingMemory.assertObject(c2);
  workingMemory.assertObject(c3);
  workingMemory.fireAllRules();
  list=workingMemory.getObjects(c1.getType().getClass());
  assertEquals(2,list.size());
  assertFalse(list.contains(c1.getType()));
  assertTrue(list.contains(c2.getType()));
  assertTrue(list.contains(c3.getType()));
  Reader reader=new InputStreamReader(getClass().getResourceAsStream("test_LogicalAssertionsDynamicRule2.drl"));
  builder=new PackageBuilder();
  builder.addPackageFromDrl(reader);
  Package pkg2=builder.getPackage();
  ruleBase.addPackage(pkg2);
  workingMemory.fireAllRules();
  list=workingMemory.getObjects(c1.getType().getClass());
  assertEquals(3,list.size());
  assertTrue(list.contains(c1.getType()));
  assertTrue(list.contains(c2.getType()));
  assertTrue(list.contains(c3.getType()));
  assertEquals("org.drools.test",ruleBase.getPackages()[0].getName());
  assertEquals("org.drools.test2",ruleBase.getPackages()[1].getName());
  assertEquals("rule1",ruleBase.getPackages()[0].getRules()[0].getName());
  assertEquals("rule2",ruleBase.getPackages()[1].getRules()[0].getName());
  if (reteooRuleBase != null) {
    reteooRuleBase.removeRule(ruleBase.getPackages()[0].getName(),ruleBase.getPackages()[0].getRules()[0].getName());
  }
 else   if (leapsRuleBase != null) {
    leapsRuleBase.removeRule(ruleBase.getPackages()[0].getName(),ruleBase.getPackages()[0].getRules()[0].getName());
  }
  assertEquals(0,ruleBase.getPackages()[0].getRules().length);
  assertEquals(1,ruleBase.getPackages()[1].getRules().length);
  assertEquals("org.drools.test2",ruleBase.getPackages()[1].getName());
  assertEquals("rule2",ruleBase.getPackages()[1].getRules()[0].getName());
  list=workingMemory.getObjects(c1.getType().getClass());
  assertEquals("remove of rule should retract objects logically asserted based on the rule",2,list.size());
  assertTrue("remove of rule should retract objects logically asserted based on the rule",list.contains(c1.getType()));
  assertTrue("remove of rule should retract objects logically asserted based on the rule",list.contains(c2.getType()));
  assertFalse("remove of rule should retract objects logically asserted based on the rule",list.contains(c3.getType()));
  c2.setPrice(1);
  workingMemory.modifyObject(h,c2);
  list=workingMemory.getObjects(c1.getType().getClass());
  assertEquals("remove of rule should remove one justification for c2 -> type",1,list.size());
  assertFalse("remove of rule should remove one justification for c2 -> type",list.contains(c2.getType()));
  assertTrue("remove of rule should remove one justification for c2 -> type",list.contains(c1.getType()));
  if (reteooRuleBase != null) {
    reteooRuleBase.removeRule(ruleBase.getPackages()[1].getName(),ruleBase.getPackages()[1].getRules()[0].getName());
  }
 else   if (leapsRuleBase != null) {
    leapsRuleBase.removeRule(ruleBase.getPackages()[1].getName(),ruleBase.getPackages()[1].getRules()[0].getName());
  }
  assertEquals(0,ruleBase.getPackages()[0].getRules().length);
  assertEquals(0,ruleBase.getPackages()[1].getRules().length);
  list=workingMemory.getObjects(c1.getType().getClass());
  assertEquals(0,list.size());
}
