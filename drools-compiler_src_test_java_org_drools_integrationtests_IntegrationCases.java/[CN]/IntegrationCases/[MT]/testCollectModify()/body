{
  final Reader reader=new InputStreamReader(getClass().getResourceAsStream("test_Collect.drl"));
  final DrlParser parser=new DrlParser();
  final PackageDescr packageDescr=parser.parse(reader);
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackage(packageDescr);
  final Package pkg=builder.getPackage();
  final RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  final WorkingMemory wm=ruleBase.newWorkingMemory();
  List results=new ArrayList();
  wm.setGlobal("results",results);
  Cheese[] cheese=new Cheese[]{new Cheese("stilton",10),new Cheese("stilton",2),new Cheese("stilton",5),new Cheese("brie",15),new Cheese("brie",16),new Cheese("provolone",8)};
  Person bob=new Person("Bob","stilton");
  FactHandle[] cheeseHandles=new FactHandle[cheese.length];
  for (int i=0; i < cheese.length; i++) {
    cheeseHandles[i]=wm.assertObject(cheese[i]);
  }
  FactHandle bobHandle=wm.assertObject(bob);
  int fireCount=0;
  wm.fireAllRules();
  Assert.assertEquals(++fireCount,results.size());
  Assert.assertEquals(3,((Collection)results.get(fireCount - 1)).size());
  Assert.assertEquals(ArrayList.class.getName(),results.get(fireCount - 1).getClass().getName());
  int index=1;
  cheese[index].setPrice(9);
  wm.modifyObject(cheeseHandles[index],cheese[index]);
  wm.fireAllRules();
  Assert.assertEquals(++fireCount,results.size());
  Assert.assertEquals(3,((Collection)results.get(fireCount - 1)).size());
  Assert.assertEquals(ArrayList.class.getName(),results.get(fireCount - 1).getClass().getName());
  bob.setLikes("brie");
  wm.modifyObject(bobHandle,bob);
  wm.fireAllRules();
  Assert.assertEquals(fireCount,results.size());
  wm.retractObject(cheeseHandles[3]);
  wm.fireAllRules();
  Assert.assertEquals(fireCount,results.size());
}
