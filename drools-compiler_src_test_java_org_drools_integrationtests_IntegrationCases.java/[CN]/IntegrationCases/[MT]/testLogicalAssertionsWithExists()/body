{
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(new InputStreamReader(getClass().getResourceAsStream("test_LogicalAssertionWithExists.drl")));
  final Package pkg=builder.getPackage();
  final RuleBase ruleBase=getRuleBase();
  ruleBase.addPackage(pkg);
  final WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  Person p1=new Person("p1","stilton",20);
  p1.setStatus("europe");
  FactHandle c1FactHandle=workingMemory.assertObject(p1);
  Person p2=new Person("p2","stilton",30);
  p2.setStatus("europe");
  FactHandle c2FactHandle=workingMemory.assertObject(p2);
  Person p3=new Person("p3","stilton",40);
  p3.setStatus("europe");
  FactHandle c3FactHandle=workingMemory.assertObject(p3);
  workingMemory.fireAllRules();
  List cheeseList=workingMemory.getObjects(Cheese.class);
  assertEquals(2,cheeseList.size());
  p3.setStatus("america");
  workingMemory.modifyObject(c3FactHandle,p3);
  workingMemory.fireAllRules();
  cheeseList=workingMemory.getObjects(Cheese.class);
  assertEquals(1,cheeseList.size());
  p2.setStatus("america");
  workingMemory.modifyObject(c2FactHandle,p2);
  workingMemory.fireAllRules();
  cheeseList=workingMemory.getObjects(Cheese.class);
  assertEquals(1,cheeseList.size());
  p1.setStatus("america");
  workingMemory.modifyObject(c1FactHandle,p1);
  workingMemory.fireAllRules();
  cheeseList=workingMemory.getObjects(Cheese.class);
  assertEquals(2,cheeseList.size());
  p2.setStatus("europe");
  workingMemory.modifyObject(c2FactHandle,p2);
  workingMemory.fireAllRules();
  cheeseList=workingMemory.getObjects(Cheese.class);
  assertEquals(1,cheeseList.size());
  p1.setStatus("europe");
  workingMemory.modifyObject(c1FactHandle,p1);
  workingMemory.fireAllRules();
  cheeseList=workingMemory.getObjects(Cheese.class);
  assertEquals(1,cheeseList.size());
  p3.setStatus("europe");
  workingMemory.modifyObject(c3FactHandle,p3);
  workingMemory.fireAllRules();
  cheeseList=workingMemory.getObjects(Cheese.class);
  assertEquals(2,cheeseList.size());
}
