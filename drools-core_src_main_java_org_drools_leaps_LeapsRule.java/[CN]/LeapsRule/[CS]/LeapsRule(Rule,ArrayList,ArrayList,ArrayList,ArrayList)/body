{
  this.rule=rule;
  this.columnConstraints=(ColumnConstraints[])columns.toArray(new ColumnConstraints[0]);
  this.notColumnConstraints=(ColumnConstraints[])notColumns.toArray(new ColumnConstraints[0]);
  this.existsColumnConstraints=(ColumnConstraints[])existsColumns.toArray(new ColumnConstraints[0]);
  this.evalConditions=(EvalCondition[])evalConditions.toArray(new EvalCondition[0]);
  this.notColumnsPresent=(this.notColumnConstraints.length != 0);
  this.existsColumnsPresent=(this.existsColumnConstraints.length != 0);
  this.evalCoditionsPresent=(this.evalConditions.length != 0);
  ArrayList classes=new ArrayList();
  for (int i=0; i < this.notColumnConstraints.length; i++) {
    if (classes.contains(this.notColumnConstraints[i].getClassType())) {
      classes.add(this.notColumnConstraints[i].getClassType());
    }
  }
  for (int i=0; i < this.existsColumnConstraints.length; i++) {
    if (!classes.contains(this.existsColumnConstraints[i].getClassType())) {
      classes.add(this.existsColumnConstraints[i].getClassType());
    }
  }
  this.existsNotsClasses=(Class[])classes.toArray(new Class[0]);
}
