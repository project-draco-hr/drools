{
  if (command instanceof UnpersistableCommand) {
    throw new UnsupportedOperationException("Command " + command + " cannot be issued on a persisted session");
  }
  if (command instanceof DisposeCommand) {
    T result=executeNext(command);
    jpm.dispose();
    return result;
  }
  PersistenceContext persistenceContext=jpm.getApplicationScopedPersistenceContext();
  boolean transactionOwner=false;
  try {
    transactionOwner=txm.begin();
    persistenceContext.joinTransaction();
    initExistingKnowledgeSession(sessionInfo.getId(),marshallingHelper.getKbase(),marshallingHelper.getConf(),persistenceContext);
    jpm.beginCommandScopedEntityManager();
    registerRollbackSync();
    if (txm != null) {
      ObjectMarshallingStrategy[] strategies=(ObjectMarshallingStrategy[])env.get(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES);
      for (      ObjectMarshallingStrategy strategy : strategies) {
        if (strategy instanceof TransactionAware) {
          ((TransactionAware)strategy).onStart(txm);
        }
      }
    }
    T result=null;
    if (command instanceof BatchExecutionCommand) {
      result=ksession.execute(command);
    }
 else {
      logger.trace("Executing " + command.getClass().getSimpleName());
      result=executeNext(command);
    }
    registerUpdateSync();
    txm.commit(transactionOwner);
    return result;
  }
 catch (  RuntimeException re) {
    rollbackTransaction(re,transactionOwner);
    throw re;
  }
catch (  Exception t1) {
    rollbackTransaction(t1,transactionOwner);
    throw new RuntimeException("Wrapped exception see cause",t1);
  }
}
