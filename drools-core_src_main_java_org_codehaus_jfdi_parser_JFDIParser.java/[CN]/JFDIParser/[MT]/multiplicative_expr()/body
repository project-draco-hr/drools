{
  Expr e=null;
  Expr lhs=null;
  Expr rhs=null;
  e=null;
  MultiplicativeExpr.Operator op=null;
  try {
{
      pushFollow(FOLLOW_atom_in_multiplicative_expr383);
      lhs=atom();
      _fsp--;
      if (failed)       return e;
      if (backtracking == 0) {
        e=lhs;
      }
      loop8:       do {
        int alt8=2;
        int LA8_0=input.LA(1);
        if (((LA8_0 >= 18 && LA8_0 <= 19))) {
          alt8=1;
        }
switch (alt8) {
case 1:
{
            int alt7=2;
            int LA7_0=input.LA(1);
            if ((LA7_0 == 18)) {
              alt7=1;
            }
 else             if ((LA7_0 == 19)) {
              alt7=2;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return e;
              }
              NoViableAltException nvae=new NoViableAltException("133:4: ( '*' | '/' )",7,0,input);
              throw nvae;
            }
switch (alt7) {
case 1:
{
                match(input,18,FOLLOW_18_in_multiplicative_expr396);
                if (failed)                 return e;
                if (backtracking == 0) {
                  op=MultiplicativeExpr.MULT;
                }
              }
            break;
case 2:
{
            match(input,19,FOLLOW_19_in_multiplicative_expr406);
            if (failed)             return e;
            if (backtracking == 0) {
              op=MultiplicativeExpr.DIV;
            }
          }
        break;
    }
    pushFollow(FOLLOW_atom_in_multiplicative_expr421);
    rhs=atom();
    _fsp--;
    if (failed)     return e;
    if (backtracking == 0) {
      e=new MultiplicativeExpr(e,rhs,op);
    }
  }
break;
default :
break loop8;
}
}
 while (true);
if (backtracking == 0) {
System.err.println("mult_expr returns " + e);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return e;
}
