{
  Expr e=null;
  Token i=null;
  Token s=null;
  Token f=null;
  Expr ex=null;
  AnonListValue l=null;
  AnonMapValue m=null;
  e=null;
  try {
{
      int alt9=9;
switch (input.LA(1)) {
case INTEGER:
        alt9=1;
      break;
case STRING:
    alt9=2;
  break;
case FLOAT:
alt9=3;
break;
case 20:
alt9=4;
break;
case 21:
alt9=5;
break;
case 22:
alt9=6;
break;
case 25:
alt9=7;
break;
case 9:
alt9=8;
break;
case IDENT:
alt9=9;
break;
default :
if (backtracking > 0) {
failed=true;
return e;
}
NoViableAltException nvae=new NoViableAltException("147:3: (i= INTEGER | s= STRING | f= FLOAT | 'true' | 'false' | '(' ex= expr ')' | l= list | m= map | ex= object_expr )",9,0,input);
throw nvae;
}
switch (alt9) {
case 1:
{
i=(Token)input.LT(1);
match(input,INTEGER,FOLLOW_INTEGER_in_atom463);
if (failed) return e;
if (backtracking == 0) {
e=factory.createLiteral(java.lang.Integer.class,i.getText());
}
}
break;
case 2:
{
s=(Token)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_atom473);
if (failed) return e;
if (backtracking == 0) {
e=factory.createLiteral(java.lang.String.class,s.getText().substring(1,s.getText().length() - 1));
}
}
break;
case 3:
{
f=(Token)input.LT(1);
match(input,FLOAT,FOLLOW_FLOAT_in_atom484);
if (failed) return e;
if (backtracking == 0) {
e=factory.createLiteral(java.lang.Double.class,f.getText());
}
}
break;
case 4:
{
match(input,20,FOLLOW_20_in_atom494);
if (failed) return e;
if (backtracking == 0) {
e=factory.createLiteral(java.lang.Boolean.class,"true");
}
}
break;
case 5:
{
match(input,21,FOLLOW_21_in_atom505);
if (failed) return e;
if (backtracking == 0) {
e=factory.createLiteral(java.lang.Boolean.class,"false");
}
}
break;
case 6:
{
match(input,22,FOLLOW_22_in_atom515);
if (failed) return e;
pushFollow(FOLLOW_expr_in_atom519);
ex=expr();
_fsp--;
if (failed) return e;
match(input,23,FOLLOW_23_in_atom521);
if (failed) return e;
if (backtracking == 0) {
e=ex;
}
}
break;
case 7:
{
pushFollow(FOLLOW_list_in_atom531);
l=list();
_fsp--;
if (failed) return e;
if (backtracking == 0) {
e=l;
}
}
break;
case 8:
{
pushFollow(FOLLOW_map_in_atom541);
m=map();
_fsp--;
if (failed) return e;
if (backtracking == 0) {
e=m;
}
}
break;
case 9:
{
pushFollow(FOLLOW_object_expr_in_atom551);
ex=object_expr();
_fsp--;
if (failed) return e;
if (backtracking == 0) {
e=ex;
}
}
break;
}
if (backtracking == 0) {
System.err.println("atom returns " + e);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return e;
}
