{
  locator.addService(TransporterFactory.class,FileTransporterFactory.class);
  locator.addService(TransporterFactory.class,HttpTransporterFactory.class);
  locator.addService(TransporterFactory.class,WagonTransporterFactory.class);
  locator.setServices(SettingsBuilder.class,new DefaultSettingsBuilderFactory().newInstance());
  locator.addService(RepositorySystem.class,LegacyRepositorySystem.class);
  locator.addService(MavenRepositorySystem.class,MavenRepositorySystem.class);
  locator.addService(org.eclipse.aether.RepositorySystem.class,DefaultRepositorySystem.class);
  locator.addService(PlexusCipher.class,DefaultPlexusCipher.class);
  locator.addService(SecDispatcher.class,DefaultSecDispatcher.class);
  locator.addService(SettingsDecrypter.class,DefaultSettingsDecrypter.class);
  locator.addService(MavenExecutionRequestPopulator.class,DefaultMavenExecutionRequestPopulator.class);
  locator.addService(ArtifactRepositoryFactory.class,DefaultArtifactRepositoryFactory.class);
  locator.addService(MirrorSelector.class,DefaultMirrorSelector.class);
  locator.addService(Logger.class,ConsoleLogger.class);
  locator.addService(Maven.class,DefaultMaven.class);
  locator.addService(LegacySupport.class,DefaultLegacySupport.class);
  locator.addService(ProjectBuilder.class,DefaultProjectBuilder.class);
  locator.addService(ProjectBuildingHelper.class,DefaultProjectBuildingHelper.class);
  locator.addService(ProfileSelector.class,DefaultProfileSelector.class);
  locator.addService(ModelProcessor.class,DefaultModelProcessor.class);
  locator.addService(ModelReader.class,DefaultModelReader.class);
  locator.addService(ModelValidator.class,DefaultModelValidator.class);
  locator.addService(SuperPomProvider.class,DefaultSuperPomProvider.class);
  locator.addService(ModelNormalizer.class,DefaultModelNormalizer.class);
  locator.addService(ProfileInjector.class,DefaultProfileInjector.class);
  locator.addService(RemoteRepositoryManager.class,DefaultRemoteRepositoryManager.class);
  locator.addService(InheritanceAssembler.class,DefaultInheritanceAssembler.class);
  locator.addService(ModelInterpolator.class,StringSearchModelInterpolator.class);
  locator.addService(ModelUrlNormalizer.class,DefaultModelUrlNormalizer.class);
  locator.addService(UrlNormalizer.class,DefaultUrlNormalizer.class);
  locator.addService(ModelPathTranslator.class,DefaultModelPathTranslator.class);
  locator.addService(PluginManagementInjector.class,DefaultPluginManagementInjector.class);
  locator.addService(DependencyManagementInjector.class,DefaultDependencyManagementInjector.class);
  locator.addService(DependencyManagementImporter.class,DefaultDependencyManagementImporter.class);
  locator.addService(ArtifactFactory.class,DefaultArtifactFactory.class);
  locator.addService(ArtifactHandlerManager.class,DefaultArtifactHandlerManager.class);
  locator.addService(ProjectDependenciesResolver.class,DefaultProjectDependenciesResolver.class);
  locator.addService(PathTranslator.class,DefaultPathTranslator.class);
  locator.addService(TransporterProvider.class,DefaultTransporterProvider.class);
  locator.addService(RepositoryConnectorFactory.class,BasicRepositoryConnectorFactory.class);
  locator.addService(ModelBuilder.class,DefaultModelBuilder.class);
  inject(MavenExecutionRequestPopulator.class,RepositorySystem.class,"repositorySystem");
  Map<String,ArtifactRepositoryLayout> layouts=new HashMap<String,ArtifactRepositoryLayout>();
  layouts.put("default",new DefaultRepositoryLayout());
  layouts.put("flat",new FlatRepositoryLayout());
  inject(RepositorySystem.class,layouts,"layouts");
  inject(RepositorySystem.class,ArtifactRepositoryFactory.class,"artifactRepositoryFactory");
  inject(RepositorySystem.class,MirrorSelector.class,"mirrorSelector");
  inject(RepositorySystem.class,ArtifactFactory.class,"artifactFactory");
  inject(ArtifactRepositoryFactory.class,layouts,"repositoryLayouts");
  inject(ArtifactHandlerManager.class,buildArtifactHandlers(),"artifactHandlers");
  inject(ArtifactFactory.class,ArtifactHandlerManager.class,"artifactHandlerManager");
  inject(SecDispatcher.class,PlexusCipher.class,"_cipher");
  inject(SettingsDecrypter.class,SecDispatcher.class,"securityDispatcher");
  EventSpyDispatcher eventSpyDispatcher=new EventSpyDispatcher();
  eventSpyDispatcher.setEventSpies(new ArrayList<EventSpy>());
  inject(Maven.class,eventSpyDispatcher,"eventSpyDispatcher");
  inject(Maven.class,org.eclipse.aether.RepositorySystem.class,"repoSystem");
  inject(Maven.class,SettingsDecrypter.class,"settingsDecrypter");
  inject(Maven.class,Logger.class,"logger");
  inject(ProjectBuilder.class,ProjectBuildingHelper.class,"projectBuildingHelper");
  inject(ProjectBuildingHelper.class,RepositorySystem.class,"repositorySystem");
  inject(MavenRepositorySystem.class,Logger.class,"logger");
  inject(MavenRepositorySystem.class,ArtifactHandlerManager.class,"artifactHandlerManager");
  inject(MavenRepositorySystem.class,ArtifactResolver.class,"artifactResolver");
  inject(MavenRepositorySystem.class,layouts,"layouts");
  inject(MavenRepositorySystem.class,PlexusContainer.class,"plexus");
  inject(MavenRepositorySystem.class,SettingsDecrypter.class,"settingsDecrypter");
  inject(ProjectBuilder.class,MavenRepositorySystem.class,"repositorySystem");
  inject(ProjectBuilder.class,ProjectBuildingHelper.class,"projectBuildingHelper");
  inject(ProjectBuilder.class,ModelBuilder.class,"modelBuilder");
  inject(ProjectBuilder.class,org.eclipse.aether.RepositorySystem.class,"repoSystem");
  inject(ProjectBuilder.class,RemoteRepositoryManager.class,"repositoryManager");
  inject(ProjectBuilder.class,ProjectDependenciesResolver.class,"dependencyResolver");
  inject(ProjectDependenciesResolver.class,Logger.class,"logger");
  inject(ProjectDependenciesResolver.class,org.eclipse.aether.RepositorySystem.class,"repoSystem");
  List<RepositorySessionDecorator> decorators=new ArrayList<RepositorySessionDecorator>();
  inject(ProjectDependenciesResolver.class,decorators,"decorators");
  inject(SuperPomProvider.class,ModelProcessor.class,"modelProcessor");
  inject(ModelUrlNormalizer.class,UrlNormalizer.class,"urlNormalizer");
  inject(ModelProcessor.class,ModelReader.class,"reader");
  inject(ModelInterpolator.class,UrlNormalizer.class,"urlNormalizer");
  inject(ModelInterpolator.class,PathTranslator.class,"pathTranslator");
  inject(ModelPathTranslator.class,PathTranslator.class,"pathTranslator");
  inject(ModelBuilder.class,ProfileSelector.class,"profileSelector");
  inject(ModelBuilder.class,ModelProcessor.class,"modelProcessor");
  inject(ModelBuilder.class,ModelValidator.class,"modelValidator");
  inject(ModelBuilder.class,SuperPomProvider.class,"superPomProvider");
  inject(ModelBuilder.class,ModelNormalizer.class,"modelNormalizer");
  inject(ModelBuilder.class,ProfileInjector.class,"profileInjector");
  inject(ModelBuilder.class,InheritanceAssembler.class,"inheritanceAssembler");
  inject(ModelBuilder.class,ModelInterpolator.class,"modelInterpolator");
  inject(ModelBuilder.class,ModelUrlNormalizer.class,"modelUrlNormalizer");
  inject(ModelBuilder.class,ModelPathTranslator.class,"modelPathTranslator");
  inject(ModelBuilder.class,PluginManagementInjector.class,"pluginManagementInjector");
  inject(ModelBuilder.class,DependencyManagementInjector.class,"dependencyManagementInjector");
  inject(ModelBuilder.class,DependencyManagementImporter.class,"dependencyManagementImporter");
}
