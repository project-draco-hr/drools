{
  final Reader reader=new InputStreamReader(getClass().getResourceAsStream("../test_Serializable.drl"));
  final PackageBuilder builder=new PackageBuilder();
  builder.addPackageFromDrl(reader);
  if (builder.hasErrors()) {
    fail(builder.getErrors().toString());
  }
  final Package pkg=SerializationHelper.serializeObject(builder.getPackage());
  assertEquals(0,builder.getErrors().getErrors().length);
  RuleBase ruleBase=getRuleBase(pkg);
  Map map=new HashMap();
  map.put("x",ruleBase);
  map=SerializationHelper.serializeObject(map);
  ruleBase=(RuleBase)map.get("x");
  final Rule[] rules=ruleBase.getPackages()[0].getRules();
  assertEquals(4,rules.length);
  assertEquals("match Person 1",rules[0].getName());
  assertEquals("match Person 2",rules[1].getName());
  assertEquals("match Person 3",rules[2].getName());
  assertEquals("match Integer",rules[3].getName());
  StatefulSession session=ruleBase.newStatefulSession();
  session.setGlobal("list",new ArrayList());
  final Person bob=new Person("bob");
  session.insert(bob);
  session=SerializationHelper.getSerialisedStatefulSession(session);
  assertEquals(1,IteratorToList.convert(session.iterateObjects()).size());
  assertEquals(bob,IteratorToList.convert(session.iterateObjects()).get(0));
  assertEquals(2,session.getAgenda().agendaSize());
  session.fireAllRules();
  List list=(List)session.getGlobal("list");
  assertEquals(3,list.size());
  assertEquals(new Integer(4),list.get(0));
  list=IteratorToList.convert(session.iterateObjects());
  assertEquals(2,list.size());
  assertTrue(list.contains(bob));
  assertTrue(list.contains(new Person("help")));
}
