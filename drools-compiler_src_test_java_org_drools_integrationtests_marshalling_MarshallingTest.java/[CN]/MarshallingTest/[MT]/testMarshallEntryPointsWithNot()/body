{
  String str="package org.domain.test \n" + "import " + getClass().getCanonicalName() + ".*\n"+ "global java.util.List list\n"+ "declare A\n"+ " @role( event )\n"+ " @expires( 10m )\n"+ "end\n"+ "declare B\n"+ ""+ " @role( event )\n"+ " @expires( 10m )\n"+ "end\n"+ ""+ "rule a1\n"+ "when\n"+ "   $a : A() from entry-point 'a-ep'\n"+ "   not B( this after[0s, 10s] $a) from entry-point 'a-ep'\n"+ "then\n"+ "list.add( $a );"+ "end\n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newReaderResource(new StringReader(str)),ResourceType.DRL);
  if (kbuilder.hasErrors()) {
    throw new RuntimeException(kbuilder.getErrors().toString());
  }
  KieBaseConfiguration config=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  config.setOption(EventProcessingOption.STREAM);
  KnowledgeBase knowledgeBase=KnowledgeBaseFactory.newKnowledgeBase(config);
  knowledgeBase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  KieSessionConfiguration ksconf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  ksconf.setOption(ClockTypeOption.get("pseudo"));
  ksconf.setOption(TimerJobFactoryOption.get("trackable"));
  KieSession ksession=knowledgeBase.newStatefulKnowledgeSession(ksconf,null);
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  SessionEntryPoint aep=ksession.getWorkingMemoryEntryPoint("a-ep");
  aep.insert(new A());
  ksession=marsallStatefulKnowledgeSession(ksession);
  PseudoClockScheduler timeService=(PseudoClockScheduler)ksession.<SessionClock>getSessionClock();
  timeService.advanceTime(3,TimeUnit.SECONDS);
  ksession=marsallStatefulKnowledgeSession(ksession);
  ksession.fireAllRules();
  ksession=marsallStatefulKnowledgeSession(ksession);
  assertEquals(0,list.size());
}
