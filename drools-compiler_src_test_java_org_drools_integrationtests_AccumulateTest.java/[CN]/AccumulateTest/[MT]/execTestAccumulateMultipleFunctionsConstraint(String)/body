{
  KnowledgeBase kbase=loadKnowledgeBase(fileName);
  StatefulKnowledgeSession ksession=createKnowledgeSession(kbase);
  AgendaEventListener ael=mock(AgendaEventListener.class);
  ksession.addEventListener(ael);
  final Cheese[] cheese=new Cheese[]{new Cheese("stilton",10),new Cheese("stilton",3),new Cheese("stilton",5),new Cheese("brie",3),new Cheese("brie",17),new Cheese("provolone",8)};
  final Person bob=new Person("Bob","stilton");
  final FactHandle[] cheeseHandles=new FactHandle[cheese.length];
  for (int i=0; i < cheese.length; i++) {
    cheeseHandles[i]=(FactHandle)ksession.insert(cheese[i]);
  }
  final FactHandle bobHandle=(FactHandle)ksession.insert(bob);
  ksession.fireAllRules();
  ArgumentCaptor<AfterMatchFiredEvent> cap=ArgumentCaptor.forClass(AfterMatchFiredEvent.class);
  Mockito.verify(ael).afterMatchFired(cap.capture());
  Match activation=cap.getValue().getMatch();
  assertThat(((Number)activation.getDeclarationValue("$sum")).intValue(),is(18));
  assertThat(((Number)activation.getDeclarationValue("$min")).intValue(),is(3));
  assertThat(((Number)activation.getDeclarationValue("$avg")).intValue(),is(6));
  Mockito.reset(ael);
  final int index=1;
  cheese[index].setPrice(9);
  ksession.update(cheeseHandles[index],cheese[index]);
  ksession.fireAllRules();
  Mockito.verify(ael,Mockito.never()).afterMatchFired(Mockito.any(AfterMatchFiredEvent.class));
  Mockito.reset(ael);
  bob.setLikes("brie");
  ksession.update(bobHandle,bob);
  ksession.fireAllRules();
  Mockito.verify(ael).afterMatchFired(cap.capture());
  activation=cap.getValue().getMatch();
  assertThat(((Number)activation.getDeclarationValue("$sum")).intValue(),is(20));
  assertThat(((Number)activation.getDeclarationValue("$min")).intValue(),is(3));
  assertThat(((Number)activation.getDeclarationValue("$avg")).intValue(),is(10));
  ksession.dispose();
}
