{
  this.cls=(Activation.class.isAssignableFrom(clazz)) ? ClassObjectType.Match_ObjectType.getClassType() : clazz;
  this.ruleBase=ruleBase;
  this.entryPoint=entryPoint;
  this.typeDecl=ruleBase.getTypeDeclaration(clazz);
  isEvent=typeDecl != null && typeDecl.getRole() == TypeDeclaration.Role.EVENT;
  ObjectType objectType=((ReteooRuleBase)ruleBase).getClassFieldAccessorCache().getClassObjectType(new ClassObjectType(clazz,isEvent));
  this.concreteObjectTypeNode=ruleBase.getRete().getObjectTypeNodes(entryPoint).get(objectType);
  if (this.concreteObjectTypeNode == null) {
    BuildContext context=new BuildContext(ruleBase,ruleBase.getRete().getRuleBase().getReteooBuilder().getIdGenerator());
    context.setCurrentEntryPoint(entryPoint);
    if (DroolsQuery.class == clazz) {
      context.setTupleMemoryEnabled(false);
      context.setObjectTypeNodeMemoryEnabled(false);
    }
 else     if (context.getRuleBase().getConfiguration().isSequential()) {
      context.setTupleMemoryEnabled(true);
      context.setObjectTypeNodeMemoryEnabled(true);
    }
 else {
      context.setTupleMemoryEnabled(true);
      context.setObjectTypeNodeMemoryEnabled(true);
    }
    this.concreteObjectTypeNode=PatternBuilder.attachObjectTypeNode(context,objectType);
  }
  defineShadowProxyData(clazz);
  this.supportsPropertyListeners=checkPropertyListenerSupport(clazz);
}
