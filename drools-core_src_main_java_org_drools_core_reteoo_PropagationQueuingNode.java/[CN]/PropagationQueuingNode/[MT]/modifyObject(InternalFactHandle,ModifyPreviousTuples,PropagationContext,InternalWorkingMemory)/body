{
  final PropagationQueueingNodeMemory memory=workingMemory.getNodeMemory(this);
  for (  ObjectSink s : this.sink.getSinks()) {
    BetaNode betaNode=(BetaNode)s;
    RightTuple rightTuple=modifyPreviousTuples.peekRightTuple();
    while (rightTuple != null && rightTuple.getInputOtnId().before(betaNode.getRightInputOtnId())) {
      modifyPreviousTuples.removeRightTuple();
      rightTuple.retractTuple(context,workingMemory);
      rightTuple=modifyPreviousTuples.peekRightTuple();
    }
    if (rightTuple != null && rightTuple.getInputOtnId().equals(betaNode.getRightInputOtnId())) {
      modifyPreviousTuples.removeRightTuple();
      rightTuple.reAdd();
      if (context.getModificationMask().intersects(betaNode.getRightInferredMask())) {
        memory.addAction(new ModifyToSinkAction(rightTuple,context,betaNode));
      }
    }
 else {
      if (context.getModificationMask().intersects(betaNode.getRightInferredMask())) {
        memory.addAction(new AssertToSinkAction(factHandle,context,betaNode));
      }
    }
  }
  if (memory.isQueued().compareAndSet(false,true)) {
    workingMemory.queueWorkingMemoryAction(this.action);
  }
}
