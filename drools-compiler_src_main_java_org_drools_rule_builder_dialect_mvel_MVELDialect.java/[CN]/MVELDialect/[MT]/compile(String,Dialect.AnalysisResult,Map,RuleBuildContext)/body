{
  Map imports=getClassImportResolverFactory().getImportedClasses();
  imports.putAll(getStaticMethodImportResolverFactory().getImportedMethods());
  final ParserContext parserContext=new ParserContext(imports,null,null);
  parserContext.setStrictTypeEnforcement(true);
  if (interceptors != null) {
    parserContext.setInterceptors(interceptors);
  }
  List list[]=analysis.getBoundIdentifiers();
  DeclarationScopeResolver resolver=context.getDeclarationResolver();
  for (Iterator it=list[0].iterator(); it.hasNext(); ) {
    String identifier=(String)it.next();
    Class cls=resolver.getDeclaration(identifier).getExtractor().getExtractToClass();
    parserContext.addInput(identifier,cls);
  }
  Map globalTypes=context.getPkg().getGlobals();
  for (Iterator it=list[1].iterator(); it.hasNext(); ) {
    String identifier=(String)it.next();
    parserContext.addInput(identifier,(Class)globalTypes.get(identifier));
  }
  Map localVars=((MVELAnalysisResult)analysis).getMvelVariables();
  for (Iterator it=localVars.entrySet().iterator(); it.hasNext(); ) {
    Entry entry=(Entry)it.next();
    parserContext.addInput((String)entry.getKey(),(Class)entry.getValue());
  }
  parserContext.addInput("drools",KnowledgeHelper.class);
  ExpressionCompiler compiler=new ExpressionCompiler(text);
  Serializable expr=compiler.compile(parserContext);
  return expr;
}
