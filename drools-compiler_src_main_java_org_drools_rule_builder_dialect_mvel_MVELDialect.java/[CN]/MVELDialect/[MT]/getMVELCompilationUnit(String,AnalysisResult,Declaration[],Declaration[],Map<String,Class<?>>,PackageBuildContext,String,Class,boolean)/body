{
  Map<String,Class> resolvedInputs=new LinkedHashMap<String,Class>();
  List<String> ids=new ArrayList<String>();
  if (analysis.getBoundIdentifiers().getThisClass() != null || (localDeclarations != null && localDeclarations.length > 0)) {
    Class cls=analysis.getBoundIdentifiers().getThisClass();
    ids.add("this");
    resolvedInputs.put("this",(cls != null) ? cls : Object.class);
  }
  ids.add(contextIndeifier);
  resolvedInputs.put(contextIndeifier,kcontextClass);
  ids.add("kcontext");
  resolvedInputs.put("kcontext",kcontextClass);
  ids.add("rule");
  resolvedInputs.put("rule",Rule.class);
  List<String> strList=new ArrayList<String>();
  for (  Entry<String,Class<?>> e : analysis.getBoundIdentifiers().getGlobals().entrySet()) {
    strList.add(e.getKey());
    ids.add(e.getKey());
    resolvedInputs.put(e.getKey(),e.getValue());
  }
  String[] globalIdentifiers=strList.toArray(new String[strList.size()]);
  strList.clear();
  for (  String op : analysis.getBoundIdentifiers().getOperators().keySet()) {
    strList.add(op);
    ids.add(op);
    resolvedInputs.put(op,EvaluatorWrapper.class);
  }
  EvaluatorWrapper[] operators=new EvaluatorWrapper[strList.size()];
  for (int i=0; i < operators.length; i++) {
    operators[i]=analysis.getBoundIdentifiers().getOperators().get(strList.get(i));
  }
  if (previousDeclarations != null) {
    for (    Declaration decl : previousDeclarations) {
      if (analysis.getBoundIdentifiers().getDeclrClasses().containsKey(decl.getIdentifier())) {
        ids.add(decl.getIdentifier());
        resolvedInputs.put(decl.getIdentifier(),decl.getExtractor().getExtractToClass());
      }
    }
  }
  if (localDeclarations != null) {
    for (    Declaration decl : localDeclarations) {
      if (analysis.getBoundIdentifiers().getDeclrClasses().containsKey(decl.getIdentifier())) {
        ids.add(decl.getIdentifier());
        resolvedInputs.put(decl.getIdentifier(),decl.getExtractor().getExtractToClass());
      }
    }
  }
  strList=new ArrayList<String>();
  if (otherInputVariables != null) {
    MVELAnalysisResult mvelAnalysis=(MVELAnalysisResult)analysis;
    for (    Entry<String,Class<?>> stringClassEntry : otherInputVariables.entrySet()) {
      if ((!analysis.getNotBoundedIdentifiers().contains(stringClassEntry.getKey()) && !mvelAnalysis.getMvelVariables().keySet().contains(stringClassEntry.getKey())) || "rule".equals(stringClassEntry.getKey())) {
        continue;
      }
      ids.add(stringClassEntry.getKey());
      strList.add(stringClassEntry.getKey());
      resolvedInputs.put(stringClassEntry.getKey(),stringClassEntry.getValue());
    }
  }
  String[] otherIdentifiers=strList.toArray(new String[strList.size()]);
  String[] inputIdentifiers=new String[resolvedInputs.size()];
  String[] inputTypes=new String[resolvedInputs.size()];
  int i=0;
  for (  String id : ids) {
    inputIdentifiers[i]=id;
    inputTypes[i++]=resolvedInputs.get(id).getName();
  }
  String name;
  if (context != null && context.getPkg() != null && context.getPkg().getName() != null) {
    if (context instanceof RuleBuildContext) {
      name=context.getPkg().getName() + "." + ((RuleBuildContext)context).getRuleDescr().getClassName();
    }
 else {
      name=context.getPkg().getName() + ".Unknown";
    }
  }
 else {
    name="Unknown";
  }
  return new MVELCompilationUnit(name,expression,globalIdentifiers,operators,previousDeclarations,localDeclarations,otherIdentifiers,inputIdentifiers,inputTypes,languageLevel,((MVELAnalysisResult)analysis).isTypesafe(),readLocalsFromTuple);
}
