{
  final Rule rule=new Rule("label_L");
  final Column stageColumn=new Column(0,this.stageType,"stage");
  stageColumn.addConstraint(getLiteralConstraint(stageColumn,"value",new Integer(Stage.LABELING),this.integerEqualEvaluator));
  rule.addPattern(stageColumn);
  final Column junctionColumn=new Column(1,this.junctionType);
  junctionColumn.addConstraint(getLiteralConstraint(junctionColumn,"type",Junction.L,this.objectEqualEvaluator));
  setFieldDeclaration(junctionColumn,"basePoint","junctionBasePoint");
  rule.addPattern(junctionColumn);
  final Declaration junctionBasePointDeclaration=rule.getDeclaration("junctionBasePoint");
  final Column edgeColumn1plus=new Column(2,this.edgeType,"edge1");
  edgeColumn1plus.addConstraint(getLiteralConstraint(edgeColumn1plus,"label",Edge.PLUS,this.objectEqualEvaluator));
  edgeColumn1plus.addConstraint(getBoundVariableConstraint(edgeColumn1plus,"p1",junctionBasePointDeclaration,this.integerEqualEvaluator));
  setFieldDeclaration(edgeColumn1plus,"p2","edge1p2");
  final Column edgeColumn1minus=new Column(2,this.edgeType,"edge1");
  edgeColumn1minus.addConstraint(getLiteralConstraint(edgeColumn1minus,"label",Edge.MINUS,this.objectEqualEvaluator));
  edgeColumn1minus.addConstraint(getBoundVariableConstraint(edgeColumn1minus,"p1",junctionBasePointDeclaration,this.integerEqualEvaluator));
  setFieldDeclaration(edgeColumn1minus,"p2","edge1p2");
  final Or or=new Or();
  or.addChild(edgeColumn1plus);
  or.addChild(edgeColumn1minus);
  rule.addPattern(or);
  final Declaration edge1P2Declaration=rule.getDeclaration("edge1p2");
  final Column edgeColumn2=new Column(3,this.edgeType,"edge2");
  edgeColumn2.addConstraint(getLiteralConstraint(edgeColumn2,"label",Edge.NIL,this.objectEqualEvaluator));
  rule.addPattern(edgeColumn2);
  final Declaration edge2Declaration=rule.getDeclaration("edge2");
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn2,"p1",junctionBasePointDeclaration,this.integerEqualEvaluator));
  edgeColumn2.addConstraint(getBoundVariableConstraint(edgeColumn2,"p2",edge1P2Declaration,this.integerNotEqualEvaluator));
  final Consequence consequence=new Consequence(){
    public void evaluate(    KnowledgeHelper drools,    WorkingMemory workingMemory) throws ConsequenceException {
      try {
        Rule rule=drools.getRule();
        Tuple tuple=drools.getTuple();
        Edge edge2=(Edge)drools.get(edge2Declaration);
        edge2.setLabel(Edge.B);
        drools.modifyObject(tuple.get(edge2Declaration),edge2);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ConsequenceException(e);
      }
    }
  }
;
  rule.setConsequence(consequence);
  return rule;
}
