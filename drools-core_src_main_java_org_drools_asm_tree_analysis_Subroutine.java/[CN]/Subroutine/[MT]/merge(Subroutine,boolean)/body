{
  if (checkOverlap && subroutine.start != this.start) {
    throw new AnalyzerException("Overlapping sub routines");
  }
  boolean changes=false;
  for (int i=0; i < this.access.length; ++i) {
    if (subroutine.access[i] && !this.access[i]) {
      this.access[i]=true;
      changes=true;
    }
  }
  for (int i=0; i < subroutine.callers.size(); ++i) {
    final Object caller=subroutine.callers.get(i);
    if (!this.callers.contains(caller)) {
      this.callers.add(caller);
      changes=true;
    }
  }
  return changes;
}
