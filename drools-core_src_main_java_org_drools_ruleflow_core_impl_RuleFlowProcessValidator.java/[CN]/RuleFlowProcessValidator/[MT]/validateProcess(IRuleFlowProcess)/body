{
  List errors=new ArrayList();
  if (process.getName() == null) {
    errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.NO_PROCESS_NAME));
  }
  if (process.getId() == null || "".equals(process.getId())) {
    errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.NO_PROCESS_ID));
  }
  if (process.getStart() == null) {
    errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.NO_START_NODE));
  }
  boolean startNodeFound=false;
  boolean endNodeFound=false;
  INode[] nodes=process.getNodes();
  for (int i=0; i < nodes.length; i++) {
    INode node=nodes[i];
    if (node instanceof IStartNode) {
      IStartNode startNode=(IStartNode)node;
      startNodeFound=true;
      if (startNode.getTo() == null) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.START_NODE_WITHOUT_OUTGOING_NODES));
      }
    }
 else     if (node instanceof IEndNode) {
      IEndNode endNode=(IEndNode)node;
      endNodeFound=true;
      if (endNode.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.END_NODE_HAS_NO_INCOMING_CONNECTIONS));
      }
    }
 else     if (node instanceof IRuleSetNode) {
      IRuleSetNode ruleSetNode=(IRuleSetNode)node;
      if (ruleSetNode.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_INCOMING_CONNECTIONS));
      }
      if (ruleSetNode.getTo() == null) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_OUTGOING_CONNECTIONS));
      }
      String ruleFlowGroup=ruleSetNode.getRuleFlowGroup();
      if (ruleFlowGroup == null || "".equals(ruleFlowGroup)) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.RULE_SET_NODE_WITHOUT_RULE_SET_GROUP));
      }
    }
 else     if (node instanceof ISplit) {
      ISplit split=(ISplit)node;
      if (split.getType() == ISplit.TYPE_UNDEFINED) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.SPLIT_WITHOUT_TYPE));
      }
      if (split.getFrom() == null) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.SPLIT_WITHOUT_INCOMING_CONNECTION));
      }
      if (split.getOutgoingConnections().size() < 2) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.SPLIT_NOT_ENOUGH_OUTGOING_CONNECTIONS));
      }
      if (split.getType() == ISplit.TYPE_XOR || split.getType() == ISplit.TYPE_OR) {
        for (Iterator it=split.getOutgoingConnections().iterator(); it.hasNext(); ) {
          IConnection connection=(IConnection)it.next();
          if (split.getConstraint(connection) == null) {
            errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.SPLIT_OUTGOING_CONNECTION_WITHOUT_CONSTRAINT));
          }
        }
      }
    }
 else     if (node instanceof IJoin) {
      IJoin join=(IJoin)node;
      if (join.getType() == IJoin.TYPE_UNDEFINED) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.JOIN_WITHOUT_TYPE));
      }
      if (join.getIncomingConnections().size() < 2) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.JOIN_NOT_ENOUGH_INCOMING_CONNECTIONS));
      }
      if (join.getTo() == null) {
        errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.JOIN_WITHOUT_OUTGOING_CONNECTION));
      }
    }
  }
  if (!startNodeFound) {
    errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.NO_START_NODE));
  }
  if (!endNodeFound) {
    errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.NO_END_NODE));
  }
  for (Iterator it=process.getVariables().iterator(); it.hasNext(); ) {
    IVariable variable=(IVariable)it.next();
    if (variable.getType() == null) {
      errors.add(new RuleFlowProcessValidationError(IRuleFlowProcessValidationError.VARIABLE_WITHOUT_TYPE));
    }
  }
  checkAllNodesConnectedToStart(process,errors);
  return (IRuleFlowProcessValidationError[])errors.toArray(new IRuleFlowProcessValidationError[errors.size()]);
}
