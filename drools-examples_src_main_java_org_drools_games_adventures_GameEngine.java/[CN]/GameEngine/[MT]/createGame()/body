{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.batch().add(newClassPathResource("Model.drl",getClass()),DRL).add(newClassPathResource("Queries.drl",getClass()),DRL).add(newClassPathResource("General.drl",getClass()),DRL).add(newClassPathResource("Response.drl",getClass()),DRL).add(newClassPathResource("Events.drl",getClass()),DRL).add(newClassPathResource("UiView.drl",getClass()),DRL).add(newClassPathResource("Commands.drl",getClass()),DRL).build();
  if (kbuilder.hasErrors()) {
    System.out.println(kbuilder.getErrors().toString());
    System.exit(1);
  }
  KieBaseConfiguration kbaseConf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kbaseConf.setOption(EqualityBehaviorOption.EQUALITY);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kbaseConf);
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  Counter c=new Counter();
  ksession=kbase.newStatefulKnowledgeSession();
  ksession.setGlobal("counter",c);
  classLoader=(((InternalRuleBase)((KnowledgeBaseImpl)kbase).ruleBase).getRootClassLoader());
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    Map vars=new HashMap();
    vars.put("c",c);
    Map<String,Map> map;
    try {
      map=(Map<String,Map>)MVEL.executeExpression(MVEL.compileExpression(new String(IOUtils.toByteArray(getClass().getResource("data.mvel").openStream()))),vars);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    for (    Object o : map.get("rooms").values()) {
      ksession.insert(o);
    }
    for (    Object o : map.get("doors").values()) {
      ksession.insert(o);
    }
    for (    Object o : map.get("characters").values()) {
      ksession.insert(o);
    }
    for (    Object o : map.get("items").values()) {
      ksession.insert(o);
    }
    for (    Object o : map.get("locations").values()) {
      ksession.insert(o);
    }
    MapVariableResolverFactory f=new MapVariableResolverFactory(map);
    String baseStr="import  org.drools.games.adventures.*;  import org.drools.games.adventures.commands.*;\n";
    FactHandle fh=ksession.insert(MVEL.eval(baseStr + "new EnterEvent( characters['hero'], rooms['first floor hallway'] )",f));
    ksession.fireAllRules();
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
  }
}
