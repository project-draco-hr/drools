{
  final PackageBuilder builder=new PackageBuilder();
  final PackageDescr packageDescr=new PackageDescr("p1");
  final RuleDescr ruleDescr=new RuleDescr("rule-1");
  packageDescr.addRule(ruleDescr);
  final AndDescr lhs=new AndDescr();
  ruleDescr.setLhs(lhs);
  packageDescr.addGlobal("map","java.util.Map");
  ruleDescr.setConsequence("map.put(\"value\", new Integer(1) );");
  builder.addPackage(packageDescr);
  final Package pkg=builder.getPackage();
  Rule rule=pkg.getRule("rule-1");
  assertLength(0,builder.getErrors());
  final ReteooRuleBase ruleBase=new ReteooRuleBase();
  ruleBase.getGlobals().put("map",Map.class);
  final WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  final HashMap map=new HashMap();
  workingMemory.setGlobal("map",map);
  final Tuple tuple=new MockTuple(new HashMap());
  final Activation activation=new MockActivation(rule,tuple);
  KnowledgeHelper knowledgeHelper=new org.drools.base.DefaultKnowledgeHelper(activation,workingMemory);
  rule.getConsequence().evaluate(knowledgeHelper,workingMemory);
  assertEquals(new Integer(1),map.get("value"));
  ruleDescr.setConsequence("map.put(\"value\", new Integer(2) );");
  pkg.removeRule(rule);
  assertEquals(0,pkg.getPackageCompilationData().list().length);
  builder.addPackage(packageDescr);
  rule=pkg.getRule("rule-1");
  knowledgeHelper=new org.drools.base.DefaultKnowledgeHelper(activation,workingMemory);
  rule.getConsequence().evaluate(knowledgeHelper,workingMemory);
  assertEquals(new Integer(2),map.get("value"));
}
