{
  final PackageBuilder builder=new PackageBuilder();
  final PackageDescr packageDescr=new PackageDescr("p1");
  final RuleDescr ruleDescr=new RuleDescr("rule-1");
  packageDescr.addRule(ruleDescr);
  final AndDescr lhs=new AndDescr();
  ruleDescr.setLhs(lhs);
  FactTemplateDescr cheese=new FactTemplateDescr("Cheese");
  cheese.addFieldTemplate(new FieldTemplateDescr("name","String"));
  cheese.addFieldTemplate(new FieldTemplateDescr("price","Integer"));
  packageDescr.addFactTemplate(cheese);
  final ColumnDescr column=new ColumnDescr("Cheese","stilton");
  lhs.addDescr(column);
  FieldConstraintDescr literalDescr=new FieldConstraintDescr("name");
  literalDescr.addRestriction(new LiteralRestrictionDescr("==","stilton"));
  column.addDescr(literalDescr);
  ruleDescr.setConsequence("System.out.println( stilton.getFieldValue( \"name\" ) + \" \" + stilton.getFieldValue( \"price\" ) );");
  builder.addPackage(packageDescr);
  assertLength(0,builder.getErrors());
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  Package pkg=builder.getPackage();
  try {
    ruleBase.addPackage(pkg);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  WorkingMemory workingMemory=ruleBase.newWorkingMemory();
  Fact stilton=pkg.getFactTemplate("Cheese").createFact(1);
  stilton.setFieldValue("name","stilton");
  stilton.setFieldValue("price",new Integer(200));
  workingMemory.assertObject(stilton);
  workingMemory.fireAllRules();
}
