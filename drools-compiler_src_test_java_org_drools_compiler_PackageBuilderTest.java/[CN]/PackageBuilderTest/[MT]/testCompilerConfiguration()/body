{
  PackageBuilder builder=new PackageBuilder();
  ;
  Field compilerField=builder.getClass().getDeclaredField("compiler");
  compilerField.setAccessible(true);
  JavaCompiler compiler=(JavaCompiler)compilerField.get(builder);
  assertSame(EclipseJavaCompiler.class,compiler.getClass());
  PackageBuilderConfiguration conf=new PackageBuilderConfiguration();
  conf.setCompiler(PackageBuilderConfiguration.JANINO);
  builder=new PackageBuilder(conf);
  ;
  compiler=(JavaCompiler)compilerField.get(builder);
  assertSame(JaninoJavaCompiler.class,compiler.getClass());
  conf=new PackageBuilderConfiguration();
  conf.setCompiler(PackageBuilderConfiguration.ECLIPSE);
  builder=new PackageBuilder(conf);
  ;
  compiler=(JavaCompiler)compilerField.get(builder);
  assertSame(EclipseJavaCompiler.class,compiler.getClass());
  EclipseJavaCompiler eclipseCompiler=(EclipseJavaCompiler)compiler;
  Field settingsField=eclipseCompiler.getClass().getDeclaredField("settings");
  settingsField.setAccessible(true);
  EclipseJavaCompilerSettings settings=(EclipseJavaCompilerSettings)settingsField.get(eclipseCompiler);
  assertEquals("1.4",settings.getMap().get("org.eclipse.jdt.core.compiler.codegen.targetPlatform"));
  assertEquals("1.4",settings.getMap().get("org.eclipse.jdt.core.compiler.source"));
  conf=new PackageBuilderConfiguration();
  conf.setCompiler(PackageBuilderConfiguration.ECLIPSE);
  conf.setJavaLanguageLevel("1.5");
  builder=new PackageBuilder(conf);
  ;
  compiler=(JavaCompiler)compilerField.get(builder);
  assertSame(EclipseJavaCompiler.class,compiler.getClass());
  eclipseCompiler=(EclipseJavaCompiler)compiler;
  settings=(EclipseJavaCompilerSettings)settingsField.get(eclipseCompiler);
  assertEquals("1.5",settings.getMap().get("org.eclipse.jdt.core.compiler.codegen.targetPlatform"));
  assertEquals("1.5",settings.getMap().get("org.eclipse.jdt.core.compiler.source"));
}
