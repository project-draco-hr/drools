{
  final PackageBuilder builder=new PackageBuilder();
  final PackageDescr packageDescr=new PackageDescr("p1");
  final RuleDescr ruleDescr=new RuleDescr("rule-1");
  packageDescr.addRule(ruleDescr);
  final AndDescr lhs=new AndDescr();
  ruleDescr.setLhs(lhs);
  packageDescr.addGlobal(new GlobalDescr("map","java.util.Map"));
  ruleDescr.setConsequence("map.put(\"value\", new Integer(1) );");
  final byte[] ast=serializeOut(packageDescr);
  final PackageDescr back=(PackageDescr)serializeIn(ast);
  assertNotNull(back);
  assertEquals("p1",back.getName());
  builder.addPackage(packageDescr);
  final Package pkg=builder.getPackage();
  final Rule rule=pkg.getRule("rule-1");
  assertLength(0,builder.getErrors().getErrors());
  final byte[] bytes=serializeOut(pkg);
  final Package newPkg=(Package)serializeIn(bytes);
  final Rule newRule=newPkg.getRule("rule-1");
  final ReteooRuleBase ruleBase=(ReteooRuleBase)RuleBaseFactory.newRuleBase();
  ruleBase.getGlobals().put("map",Map.class);
  final WorkingMemory workingMemory=ruleBase.newStatefulSession();
  final HashMap map=new HashMap();
  workingMemory.setGlobal("map",map);
  final Tuple tuple=new MockTuple(new HashMap());
  final Activation activation=new MockActivation(newRule,0,newRule.getLhs(),tuple);
  final DefaultKnowledgeHelper knowledgeHelper=new org.drools.base.DefaultKnowledgeHelper(workingMemory);
  knowledgeHelper.setActivation(activation);
  newRule.getConsequence().evaluate(knowledgeHelper,workingMemory);
  assertEquals(new Integer(1),map.get("value"));
}
