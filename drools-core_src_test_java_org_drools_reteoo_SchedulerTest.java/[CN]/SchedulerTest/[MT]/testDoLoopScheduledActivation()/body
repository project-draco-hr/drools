{
  IdGenerator idGenerator=ruleBase.getReteooBuilder().getIdGenerator();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newStatefulSession();
  final Agenda agenda=workingMemory.getAgenda();
  final Rule rule=new Rule("test-rule");
  final RuleTerminalNode node=new RuleTerminalNode(idGenerator.getNextId(),new MockTupleSource(idGenerator.getNextId()),rule,rule.getLhs(),buildContext);
  final List data=new ArrayList();
  final Duration duration=new Duration(){
    /** 
 */
    private static final long serialVersionUID=400L;
    public long getDuration(    Tuple tuple){
      return 100;
    }
  }
;
  rule.setDuration(duration);
  rule.setConsequence(new org.drools.spi.Consequence(){
    /** 
 */
    private static final long serialVersionUID=400L;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
      if (data.size() < 3) {
        final PropagationContext context2=new PropagationContextImpl(0,0,rule,(LeftTuple)knowledgeHelper.getTuple(),null);
        final LeftTuple tuple2=new LeftTuple(new DefaultFactHandle(2,"cheese"),null,true);
        node.assertLeftTuple(tuple2,context2,(ReteooWorkingMemory)workingMemory);
      }
      data.add("tested");
    }
    public void readExternal(    ObjectInput in) throws IOException, ClassNotFoundException {
    }
    public void writeExternal(    ObjectOutput out) throws IOException {
    }
  }
);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null,null);
  final LeftTuple tuple1=new LeftTuple(new DefaultFactHandle(1,"cheese"),null,true);
  node.assertLeftTuple(tuple1,context1,workingMemory);
  assertEquals(0,data.size());
  Thread.sleep(500);
  assertEquals(4,data.size());
}
