{
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  final ReteooWorkingMemory workingMemory=(ReteooWorkingMemory)ruleBase.newWorkingMemory();
  final Agenda agenda=workingMemory.getAgenda();
  final Rule rule=new Rule("test-rule");
  final List data=new ArrayList();
  final RuleTerminalNode node=new RuleTerminalNode(1,new MockTupleSource(2),rule);
  final Duration duration=new Duration(){
    /** 
 */
    private static final long serialVersionUID=-2288407417074884302L;
    public long getDuration(    Tuple tuple){
      return 100;
    }
  }
;
  rule.setDuration(duration);
  rule.setNoLoop(true);
  rule.setConsequence(new org.drools.spi.Consequence(){
    /** 
 */
    private static final long serialVersionUID=-4822730789394039868L;
    public void evaluate(    final KnowledgeHelper knowledgeHelper,    final WorkingMemory workingMemory){
      if (data.size() < 5) {
        final PropagationContext context2=new PropagationContextImpl(0,0,rule,knowledgeHelper.getActivation());
        final ReteTuple tuple2=new ReteTuple(new DefaultFactHandle(2,"cheese"));
        node.assertTuple(tuple2,context2,(ReteooWorkingMemory)workingMemory);
      }
      data.add("tested");
    }
  }
);
  final PropagationContext context1=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  final ReteTuple tuple1=new ReteTuple(new DefaultFactHandle(1,"cheese"));
  node.assertTuple(tuple1,context1,workingMemory);
  assertEquals(0,data.size());
  Thread.sleep(500);
  assertEquals(1,data.size());
}
