{
  Class<T> proxyClass=buildProxyClass(key,core,trait);
  if (proxyClass == null) {
    return null;
  }
  try {
    Constructor konst;
switch (mode) {
case MAP:
      konst=proxyClass.getConstructor(core.getClass(),Map.class,BitSet.class,BitSet.class,boolean.class);
    break;
case TRIPLES:
  konst=proxyClass.getConstructor(core.getClass(),TripleStore.class,TripleFactory.class,BitSet.class,BitSet.class,boolean.class);
break;
default :
throw new RuntimeException(" This should not happen : unexpected property wrapping method " + mode);
}
factoryCache.put(key,konst);
return konst;
}
 catch (NoSuchMethodException e) {
e.printStackTrace();
return null;
}
}
