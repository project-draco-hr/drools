{
  final String dataType=getDataType(className,fieldName,model,dmo);
  if (dataType == null) {
    messages.add(new DataTypeNotFoundParserMessage(className,fieldName));
    return null;
  }
  if (DataType.TYPE_STRING.equals(dataType)) {
    String _value=value;
    if (_value.startsWith("\"") && _value.endsWith("\"")) {
      _value=value.substring(1,_value.length() - 1);
    }
    return new StringValue(new String(_value));
  }
 else   if (DataType.TYPE_NUMERIC.equals(dataType)) {
    try {
      String _value=value;
      if (_value.endsWith("B")) {
        _value=_value.substring(0,_value.length() - 1);
      }
      return new BigDecimalValue(new BigDecimal(_value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,BigDecimal.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_NUMERIC_BIGDECIMAL.equals(dataType)) {
    try {
      String _value=value;
      if (_value.endsWith("B")) {
        _value=_value.substring(0,_value.length() - 1);
      }
      return new BigDecimalValue(new BigDecimal(_value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,BigDecimal.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_NUMERIC_BIGINTEGER.equals(dataType)) {
    try {
      String _value=value;
      if (_value.endsWith("I")) {
        _value=_value.substring(0,_value.length() - 1);
      }
      return new BigIntegerValue(new BigInteger(_value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,BigInteger.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_NUMERIC_BYTE.equals(dataType)) {
    try {
      return new ByteValue(new Byte(value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,Byte.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_NUMERIC_DOUBLE.equals(dataType)) {
    try {
      return new DoubleValue(new Double(value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,Double.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_NUMERIC_FLOAT.equals(dataType)) {
    try {
      return new FloatValue(new Float(value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,Float.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_NUMERIC_INTEGER.equals(dataType)) {
    try {
      return new IntegerValue(new Integer(value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,Integer.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_NUMERIC_LONG.equals(dataType)) {
    try {
      return new LongValue(new Long(value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,Long.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_NUMERIC_SHORT.equals(dataType)) {
    try {
      return new ShortValue(new Short(value));
    }
 catch (    NumberFormatException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,Short.class.getName()));
      return null;
    }
  }
 else   if (DataType.TYPE_BOOLEAN.equals(dataType)) {
    if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
      return new BooleanValue(Boolean.parseBoolean(value));
    }
 else {
      messages.add(new DataTypeConversionErrorParserMessage(value,Boolean.class.getName()));
    }
    return null;
  }
 else   if (DataType.TYPE_DATE.equals(dataType)) {
    try {
      String _value=value;
      if (_value.startsWith("\"") && _value.endsWith("\"")) {
        _value=value.substring(1,_value.length() - 1);
      }
      return new DateValue(DateUtils.parseDate(_value));
    }
 catch (    IllegalArgumentException e) {
      messages.add(new DataTypeConversionErrorParserMessage(value,Date.class.getName()));
      return null;
    }
  }
  return null;
}
