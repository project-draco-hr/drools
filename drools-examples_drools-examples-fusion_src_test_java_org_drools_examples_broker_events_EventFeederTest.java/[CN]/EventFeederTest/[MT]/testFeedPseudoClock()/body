{
  final Event<String> event1=new EventImpl<String>(1000,"one");
  final Event<String> event2=new EventImpl<String>(1100,"two");
  final Event<String> event3=new EventImpl<String>(1120,"three");
  final Event<String> event4=new EventImpl<String>(1300,"four");
  final Event<String> event5=new EventImpl<String>(1550,"five");
  final Event<String> event6=new EventImpl<String>(1700,"six");
  final Sequence seq=context.sequence("call sequence");
  final States ts=context.states("timestamp").startsAs(String.valueOf(event1.getTimestamp()));
  final EventSource source=context.mock(EventSource.class);
  final EventReceiver receiver=context.mock(EventReceiver.class);
  PseudoClockScheduler clock=new PseudoClockScheduler();
  EventFeeder feeder=new EventFeeder(clock,source,receiver);
  context.checking(new Expectations(){
{
      oneOf(source).hasNext();
      inSequence(seq);
      will(returnValue(true));
      oneOf(source).getNext();
      inSequence(seq);
      will(returnValue(event1));
      oneOf(receiver).receive(event1);
      inSequence(seq);
      when(ts.is(String.valueOf(event1.getTimestamp())));
      then(ts.is(String.valueOf(event2.getTimestamp())));
      oneOf(source).hasNext();
      inSequence(seq);
      will(returnValue(true));
      oneOf(source).getNext();
      inSequence(seq);
      will(returnValue(event2));
      oneOf(receiver).receive(event2);
      inSequence(seq);
      when(ts.is(String.valueOf(event2.getTimestamp())));
      then(ts.is(String.valueOf(event3.getTimestamp())));
      oneOf(source).hasNext();
      inSequence(seq);
      will(returnValue(true));
      oneOf(source).getNext();
      inSequence(seq);
      will(returnValue(event3));
      oneOf(receiver).receive(event3);
      inSequence(seq);
      when(ts.is(String.valueOf(event3.getTimestamp())));
      then(ts.is(String.valueOf(event4.getTimestamp())));
      oneOf(source).hasNext();
      inSequence(seq);
      will(returnValue(true));
      oneOf(source).getNext();
      inSequence(seq);
      will(returnValue(event4));
      oneOf(receiver).receive(event4);
      inSequence(seq);
      when(ts.is(String.valueOf(event4.getTimestamp())));
      then(ts.is(String.valueOf(event5.getTimestamp())));
      oneOf(source).hasNext();
      inSequence(seq);
      will(returnValue(true));
      oneOf(source).getNext();
      inSequence(seq);
      will(returnValue(event5));
      oneOf(receiver).receive(event5);
      inSequence(seq);
      when(ts.is(String.valueOf(event5.getTimestamp())));
      then(ts.is(String.valueOf(event6.getTimestamp())));
      oneOf(source).hasNext();
      inSequence(seq);
      will(returnValue(true));
      oneOf(source).getNext();
      inSequence(seq);
      will(returnValue(event6));
      oneOf(receiver).receive(event6);
      inSequence(seq);
      when(ts.is(String.valueOf(event6.getTimestamp())));
      oneOf(source).hasNext();
      inSequence(seq);
      will(returnValue(false));
    }
  }
);
  feeder.feed();
  clock.advanceTime(event1.getTimestamp() - clock.getCurrentTime(),TimeUnit.MILLISECONDS);
  clock.advanceTime(event2.getTimestamp() - clock.getCurrentTime(),TimeUnit.MILLISECONDS);
  clock.advanceTime(event3.getTimestamp() - clock.getCurrentTime(),TimeUnit.MILLISECONDS);
  clock.advanceTime(event4.getTimestamp() - clock.getCurrentTime(),TimeUnit.MILLISECONDS);
  clock.advanceTime(event5.getTimestamp() - clock.getCurrentTime(),TimeUnit.MILLISECONDS);
  clock.advanceTime(event6.getTimestamp() - clock.getCurrentTime(),TimeUnit.MILLISECONDS);
  context.assertIsSatisfied();
}
