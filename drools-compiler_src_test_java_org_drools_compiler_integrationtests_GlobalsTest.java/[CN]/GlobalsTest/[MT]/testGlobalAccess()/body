{
  String drl="import org.drools.core.base.MapGlobalResolver;\n" + "global java.lang.String myGlobal;\n" + "global String unused; \n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newByteArrayResource(drl.getBytes()),ResourceType.DRL);
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession session1=kbase.newStatefulKnowledgeSession();
  String sample="default string";
  System.out.println("Start testing 1.");
  session1.setGlobal("myGlobal","Testing 1");
  session1.insert(sample);
  session1.fireAllRules();
  Map.Entry[] entries1=((MapGlobalResolver)session1.getGlobals()).getGlobals();
  assertEquals(1,entries1.length);
  assertEquals(entries1[0].getValue(),"Testing 1");
  assertEquals(1,session1.getGlobals().getGlobalKeys().size());
  assertTrue(session1.getGlobals().getGlobalKeys().contains("myGlobal"));
  session1.dispose();
  System.out.println("Start testing 2.");
  StatelessKnowledgeSession session2=session1.getKieBase().newStatelessKnowledgeSession();
  session2.setGlobal("myGlobal","Testing 2");
  session2.execute(sample);
  Map.Entry[] entries2=((MapGlobalResolver)session2.getGlobals()).getGlobals();
  assertEquals(1,entries2.length);
  assertEquals(entries2[0].getValue(),"Testing 2");
  assertEquals(1,session2.getGlobals().getGlobalKeys().size());
  assertTrue(session2.getGlobals().getGlobalKeys().contains("myGlobal"));
  System.out.println("Start testing 3.");
  StatefulKnowledgeSession session3=((StatelessKnowledgeSessionImpl)session2).newWorkingMemory();
  session3.insert(sample);
  session3.fireAllRules();
  Map.Entry[] entries3=((MapGlobalResolver)session3.getGlobals()).getGlobals();
  assertEquals(1,entries3.length);
  assertEquals(entries3[0].getValue(),"Testing 2");
  assertEquals(1,session3.getGlobals().getGlobalKeys().size());
  assertTrue(session3.getGlobals().getGlobalKeys().contains("myGlobal"));
  session3.setGlobal("myGlobal","Testing 3 Over");
  entries3=((MapGlobalResolver)session3.getGlobals()).getGlobals();
  assertEquals(1,entries3.length);
  assertEquals(entries3[0].getValue(),"Testing 3 Over");
  assertEquals(1,session3.getGlobals().getGlobalKeys().size());
  assertTrue(session3.getGlobals().getGlobalKeys().contains("myGlobal"));
  session3.dispose();
  System.out.println("Start testing 4.");
  StatefulKnowledgeSession session4=((StatelessKnowledgeSessionImpl)session2).newWorkingMemory();
  session4.setGlobal("myGlobal","Testing 4");
  session4.insert(sample);
  session4.fireAllRules();
  Map.Entry[] entries4=((MapGlobalResolver)session4.getGlobals()).getGlobals();
  assertEquals(1,entries4.length);
  assertEquals(entries4[0].getValue(),"Testing 4");
  assertEquals(1,session4.getGlobals().getGlobalKeys().size());
  assertTrue(session4.getGlobals().getGlobalKeys().contains("myGlobal"));
  session4.dispose();
}
