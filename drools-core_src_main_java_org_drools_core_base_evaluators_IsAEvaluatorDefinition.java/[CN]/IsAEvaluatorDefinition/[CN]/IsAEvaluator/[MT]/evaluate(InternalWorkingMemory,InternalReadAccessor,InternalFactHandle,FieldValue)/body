{
  final Object objectValue=extractor.getValue(workingMemory,handle.getObject());
  final Object literal=value.getValue();
  if (cachedValue != literal) {
    cachedValue=literal;
    cacheLiteral(literal,workingMemory);
  }
  TraitableBean core;
  if (objectValue == null) {
    return this.getOperator().isNegated();
  }
  if (objectValue instanceof Thing) {
    Thing thing=(Thing)objectValue;
    core=(TraitableBean)thing.getCore();
    BitSet code=core.getCurrentTypeCode();
    if (code != null) {
      return this.getOperator().isNegated() ^ isA(code,cachedLiteral);
    }
 else {
      boolean hasTrait=this.getOperator().isNegated() ^ hasTrait(core,literal);
      if (hasTrait) {
        return true;
      }
 else       if (literal instanceof Class) {
        return this.getOperator().isNegated() ^ ((Class)literal).isInstance(objectValue);
      }
 else {
        return false;
      }
    }
  }
 else   if (objectValue instanceof TraitableBean) {
    core=(TraitableBean)objectValue;
    BitSet code=core.getCurrentTypeCode();
    if (code != null) {
      return this.getOperator().isNegated() ^ isA(code,cachedLiteral);
    }
 else {
      return this.getOperator().isNegated() ^ hasTrait(core,literal);
    }
  }
 else {
    core=lookForWrapper(objectValue,workingMemory);
    if (core == null) {
      return this.getOperator().isNegated();
    }
    BitSet code=core.getCurrentTypeCode();
    if (code != null) {
      return this.getOperator().isNegated() ^ isA(code,cachedLiteral);
    }
 else {
      return this.getOperator().isNegated() ^ hasTrait(core,literal);
    }
  }
}
