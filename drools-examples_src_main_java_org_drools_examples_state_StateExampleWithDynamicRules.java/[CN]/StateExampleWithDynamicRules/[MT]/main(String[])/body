{
  PackageBuilder builder=new PackageBuilder();
  try {
    builder.addPackageFromDrl(new InputStreamReader(StateExampleWithDynamicRules.class.getResourceAsStream("StateExampleUsingSalience.drl")));
  }
 catch (  DroolsParserException e) {
    throw new IllegalArgumentException("Invalid drl",e);
  }
catch (  IOException e) {
    throw new IllegalArgumentException("Could not read drl",e);
  }
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(builder.getPackage());
  final StatefulSession session=ruleBase.newStatefulSession();
  final State a=new State("A");
  final State b=new State("B");
  final State c=new State("C");
  final State d=new State("D");
  final State e=new State("E");
  final boolean dynamic=true;
  session.insert(a,dynamic);
  session.insert(b,dynamic);
  session.insert(c,dynamic);
  session.insert(d,dynamic);
  session.insert(e,dynamic);
  session.fireAllRules();
  builder=new PackageBuilder();
  try {
    builder.addPackageFromDrl(new InputStreamReader(StateExampleWithDynamicRules.class.getResourceAsStream("StateExampleDynamicRule.drl")));
  }
 catch (  DroolsParserException ex) {
    throw new IllegalArgumentException("Invalid drl",ex);
  }
catch (  IOException ex) {
    throw new IllegalArgumentException("Could not read drl",ex);
  }
  ruleBase.addPackage(builder.getPackage());
  session.fireAllRules();
  session.dispose();
}
