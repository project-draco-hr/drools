{
  this.fileManager.write("myExpander.dsl",this.createCommonDSL(null));
  this.fileManager.write("rules.dslr",this.createCommonDSLRRule("Rule1"));
  String xml="";
  xml+="<change-set xmlns='http://drools.org/drools-5.0/change-set'";
  xml+="    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'";
  xml+="    xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' >";
  xml+="    <add> ";
  xml+="        <resource source='http://localhost:" + this.getPort() + "/rules.dslr' type='DSLR' />";
  xml+="        <resource source='http://localhost:" + this.getPort() + "/myExpander.dsl' type='DSL' />";
  xml+="    </add> ";
  xml+="</change-set>";
  File fxml=fileManager.write("changeset.xml",xml);
  List<String> list=new ArrayList<String>();
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  KnowledgeAgent kagent=this.createKAgent(kbase,true);
  this.applyChangeSet(kagent,ResourceFactory.newUrlResource(fxml.toURI().toURL()));
  StatefulKnowledgeSession ksession=kagent.getKnowledgeBase().newStatefulKnowledgeSession();
  ksession.setGlobal("list",list);
  ksession.insert(new Person());
  ksession.fireAllRules();
  assertEquals(1,list.size());
  assertTrue(list.contains("Rule1"));
  list.clear();
  ksession.dispose();
  File expander=this.fileManager.write("myExpander.dsl",this.createCommonDSL("name == \"John\""));
  this.fileManager.write("rules.dslr",this.createCommonDSLRRule("Rule1"));
  this.scan(kagent);
  ksession=kagent.getKnowledgeBase().newStatefulKnowledgeSession();
  ksession.setGlobal("list",list);
  ksession.insert(new Person());
  ksession.fireAllRules();
  assertEquals(0,list.size());
  Person p=new Person();
  p.setName("John");
  ksession.insert(p);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  assertTrue(list.contains("Rule1"));
  ksession.dispose();
  this.fileManager.write("rules.dslr",this.createCommonDSLRRule(new String[]{"Rule1","Rule2"}));
  this.scan(kagent);
  ksession=kagent.getKnowledgeBase().newStatefulKnowledgeSession();
  list.clear();
  ksession.setGlobal("list",list);
  ksession.insert(p);
  ksession.fireAllRules();
  assertEquals(2,list.size());
  assertTrue(list.contains("Rule1"));
  assertTrue(list.contains("Rule2"));
  ksession.dispose();
  this.fileManager.write("rules.dslr",this.createCommonDSLRRule("Rule3"));
  this.scan(kagent);
  ksession=kagent.getKnowledgeBase().newStatefulKnowledgeSession();
  list.clear();
  ksession.setGlobal("list",list);
  ksession.insert(p);
  ksession.fireAllRules();
  assertEquals(1,list.size());
  assertTrue(list.contains("Rule3"));
  ksession.dispose();
  fileManager.deleteFile(expander);
  this.fileManager.write("rules.dslr",this.createCommonDSLRRule("Rule1"));
  try {
    this.scan(kagent);
    fail("Knowledge should fail to compile");
  }
 catch (  Exception e) {
  }
  kagent.dispose();
}
