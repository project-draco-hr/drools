{
  if (!scorecard.isUseReasonCodes()) {
    return;
  }
  String externalClassName=null;
  String reasonCodesField=null;
  String fieldName=null;
  for (  Object obj : scorecard.getExtensionsAndCharacteristicsAndMiningSchemas()) {
    if (obj instanceof Output) {
      Output output=(Output)obj;
      final List<OutputField> outputFields=output.getOutputFields();
      final OutputField outputField=outputFields.get(0);
      externalClassName=ScorecardPMMLUtils.getExtension(outputField.getExtensions(),PMMLExtensionNames.SCORECARD_RESULTANT_SCORE_CLASS).getValue();
      fieldName=outputField.getName();
      Extension e=ScorecardPMMLUtils.getExtension(outputField.getExtensions(),PMMLExtensionNames.SCORECARD_RESULTANT_REASONCODES_FIELD);
      if (e != null) {
        reasonCodesField=e.getValue();
      }
      break;
    }
  }
  if (!(reasonCodesField == null || reasonCodesField.isEmpty()) && !(externalClassName == null || externalClassName.isEmpty()) && !(fieldName == null || fieldName.isEmpty())) {
    Consequence consequence=new Consequence();
    StringBuilder stringBuilder=new StringBuilder("$");
    stringBuilder.append(fieldName).append("Var").append(".set").append(Character.toUpperCase(reasonCodesField.charAt(0))).append(reasonCodesField.substring(1));
    stringBuilder.append("($reasons);");
    consequence.setSnippet(stringBuilder.toString());
    rule.addConsequence(consequence);
  }
}
