{
  DRL5Expressions.expression_return retval=new DRL5Expressions.expression_return();
  retval.start=input.LT(1);
  BaseDescr left=null;
  DRL5Expressions.expression_return right=null;
  try {
{
      pushFollow(FOLLOW_conditionalExpression_in_expression768);
      left=conditionalExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        if (buildDescr) {
          retval.result=left;
        }
      }
      int alt16=2;
      alt16=dfa16.predict(input);
switch (alt16) {
case 1:
{
          pushFollow(FOLLOW_assignmentOperator_in_expression789);
          assignmentOperator();
          state._fsp--;
          if (state.failed)           return retval;
          pushFollow(FOLLOW_expression_in_expression793);
          right=expression();
          state._fsp--;
          if (state.failed)           return retval;
        }
      break;
  }
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
