{
  Package p1=new Package("p1");
  Package p2=new Package("p2");
  File dir=RuleBaseAssemblerTest.getTempDirectory();
  File p1f=new File(dir,"p1.pkg");
  File p2f=new File(dir,"p2.pkg");
  RuleBaseAssemblerTest.writePackage(p1,p1f);
  RuleBaseAssemblerTest.writePackage(p2,p2f);
  FileScanner scan=new FileScanner();
  Properties props=new Properties();
  props.setProperty(RuleAgent.FILES,p1f.getPath() + " " + p2f.getPath());
  scan.configure(props);
  RuleBase rb=RuleBaseFactory.newRuleBase();
  PackageProvider.applyChanges(rb,true,scan.loadPackageChanges(),new MockListener());
  assertEquals(2,rb.getPackages().length);
  assertEquals("p1",rb.getPackages()[0].getName());
  assertEquals("p2",rb.getPackages()[1].getName());
  PackageProvider.applyChanges(rb,true,scan.loadPackageChanges(),new MockListener());
  assertEquals(2,rb.getPackages().length);
  assertEquals("p1",rb.getPackages()[0].getName());
  assertEquals("p2",rb.getPackages()[1].getName());
  RuleBaseAssemblerTest.writePackage(p2,p2f);
  PackageProvider.applyChanges(rb,true,scan.loadPackageChanges(),new MockListener());
  assertEquals(2,rb.getPackages().length);
  assertEquals("p1",rb.getPackages()[0].getName());
  assertEquals("p2",rb.getPackages()[1].getName());
}
