{
  final AbstractWorkingMemory workingMemory=(AbstractWorkingMemory)this.ruleBase.newStatefulSession();
  final Rete rete=ruleBase.getRete();
  final ObjectTypeNode objectTypeNode=new ObjectTypeNode(1,this.entryPoint,new ClassObjectType(List.class),buildContext);
  objectTypeNode.attach(buildContext);
  final MockObjectSink sink1=new MockObjectSink();
  objectTypeNode.addObjectSink(sink1);
  final String string="String";
  final DefaultFactHandle h1=new DefaultFactHandle(1,string);
  rete.assertObject(h1,pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null),workingMemory);
  assertLength(0,sink1.getAsserted());
  assertLength(0,sink1.getRetracted());
  final List list=new ArrayList();
  final DefaultFactHandle h2=new DefaultFactHandle(1,list);
  rete.assertObject(h2,pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null),workingMemory);
  rete.retractObject(h2,pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null),workingMemory);
  final List retracted=sink1.getRetracted();
  assertLength(1,retracted);
  final Object[] results=(Object[])retracted.get(0);
  assertSame(list,((DefaultFactHandle)results[0]).getObject());
}
