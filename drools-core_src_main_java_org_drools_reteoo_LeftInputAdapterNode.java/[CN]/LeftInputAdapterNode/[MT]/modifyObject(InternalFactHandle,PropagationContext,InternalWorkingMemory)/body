{
  final Map memory=(Map)workingMemory.getNodeMemory(this);
  if ((this.binder == null) || (this.binder.isAllowed(handle,null,workingMemory))) {
    final LinkedList list=(LinkedList)memory.get(handle);
    if (list != null) {
      for (LinkedListNode node=list.getFirst(); node != null; node=node.getNext()) {
        ReteTuple tuple=(ReteTuple)((LinkedListEntry)node).getObject();
        tuple.modifyTuple(context,workingMemory);
      }
    }
 else {
      memory.put(handle,this.sink.createAndAssertTuple(handle,context,workingMemory));
    }
  }
 else {
    final LinkedList list=(LinkedList)memory.remove(handle);
    if (list != null) {
      for (LinkedListNode node=list.getFirst(); node != null; node=node.getNext()) {
        ReteTuple tuple=(ReteTuple)((LinkedListEntry)node).getObject();
        tuple.retractTuple(context,workingMemory);
      }
    }
  }
}
