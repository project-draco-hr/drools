{
  if (unlinkingEnabled) {
    LiaNodeMemory lm=(LiaNodeMemory)workingMemory.getNodeMemory(this);
    if (lm.getSegmentMemory() == null) {
      SegmentUtilities.createSegmentMemory(this,workingMemory);
    }
    SegmentMemory smem=lm.getSegmentMemory();
    LeftTuple leftTuple=modifyPreviousTuples.peekLeftTuple();
    int otnId=this.sink.getFirstLeftTupleSink().getLeftInputOtnId();
    while (leftTuple != null && leftTuple.getLeftTupleSink().getLeftInputOtnId() < otnId) {
      modifyPreviousTuples.removeLeftTuple();
      doDeleteObject(leftTuple,context,smem,workingMemory,(LeftInputAdapterNode)leftTuple.getLeftTupleSink().getLeftTupleSource(),lm);
      leftTuple=modifyPreviousTuples.peekLeftTuple();
    }
    if (leftTuple != null && leftTuple.getLeftTupleSink().getLeftInputOtnId() == otnId) {
      modifyPreviousTuples.removeLeftTuple();
      doUpdateObject(leftTuple,context,workingMemory,(LeftInputAdapterNode)leftTuple.getLeftTupleSink().getLeftTupleSource(),smem);
    }
 else {
      doInsertObject(factHandle,context,this,leftTupleMemoryEnabled,workingMemory,lm);
    }
  }
 else {
    this.sink.propagateModifyObject(factHandle,modifyPreviousTuples,context,workingMemory);
  }
}
