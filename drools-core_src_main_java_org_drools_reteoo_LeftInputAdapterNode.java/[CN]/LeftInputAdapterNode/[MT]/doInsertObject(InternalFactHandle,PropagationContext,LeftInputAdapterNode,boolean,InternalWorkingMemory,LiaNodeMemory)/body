{
  SegmentMemory sm=lm.getSegmentMemory();
  if (sm.getTipNode() == liaNode) {
    if (sm.isEmpty()) {
      SegmentUtilities.createChildSegments(wm,sm,liaNode.getSinkPropagator());
    }
    sm=sm.getFirst();
  }
  LeftTupleSink sink=liaNode.getSinkPropagator().getFirstLeftTupleSink();
  LeftTuple leftTuple=sink.createLeftTuple(factHandle,sink,leftTupleMemoryEnabled);
  leftTuple.setPropagationContext(context);
  long mask=sink.getLeftInferredMask();
  if (mask == Long.MAX_VALUE || intersect(context.getModificationMask(),mask)) {
    if (sm.getStagedLeftTuples().insertSize() == 0) {
      sm.notifyRuleLinkSegment(wm);
    }
    sm.getStagedLeftTuples().addInsert(leftTuple);
  }
  if (sm.getRootNode() != liaNode) {
    for (sm=sm.getNext(); sm != null; sm=sm.getNext()) {
      sink=sm.getSinkFactory();
      leftTuple=sink.createPeer(leftTuple);
      leftTuple.setPropagationContext(context);
      mask=((LeftTupleSink)sm.getRootNode()).getLeftInferredMask();
      if (mask == Long.MAX_VALUE || intersect(context.getModificationMask(),mask)) {
        if (sm.getStagedLeftTuples().insertSize() == 0) {
          sm.notifyRuleLinkSegment(wm);
        }
        sm.getStagedLeftTuples().addInsert(leftTuple);
      }
    }
  }
  if (lm.getAndIncreaseCounter() == 0) {
    lm.linkNode(wm);
  }
  ;
}
