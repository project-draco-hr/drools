{
  boolean useLeftMemory=true;
  if (unlinkingEnabled) {
    LiaNodeMemory lm=(LiaNodeMemory)workingMemory.getNodeMemory(this);
    if (lm.getSegmentMemory() == null) {
      SegmentUtilities.createSegmentMemory(this,workingMemory);
    }
    doInsertObject(factHandle,context,this,workingMemory,lm,true,useLeftMemory);
    return;
  }
  if (!workingMemory.isSequential()) {
    if (!this.leftTupleMemoryEnabled) {
      Object object=factHandle.getObject();
      if (object instanceof DroolsQuery) {
        if (!((DroolsQuery)object).isOpen()) {
          useLeftMemory=false;
        }
      }
    }
    this.sink.createAndPropagateAssertLeftTuple(factHandle,context,workingMemory,useLeftMemory,this);
  }
 else {
    workingMemory.addLIANodePropagation(new LIANodePropagation(this,factHandle,context));
  }
}
