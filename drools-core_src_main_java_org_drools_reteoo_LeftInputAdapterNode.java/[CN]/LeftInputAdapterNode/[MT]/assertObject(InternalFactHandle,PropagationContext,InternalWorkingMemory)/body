{
  boolean useLeftMemory=true;
  if (!this.leftTupleMemoryEnabled) {
    Object object=((InternalFactHandle)context.getFactHandle()).getObject();
    if (object instanceof DroolsQuery && !((DroolsQuery)object).isOpen()) {
      useLeftMemory=false;
    }
  }
  if (!workingMemory.isSequential()) {
    this.sink.createAndPropagateAssertLeftTuple(factHandle,context,workingMemory,useLeftMemory,this);
  }
 else {
    workingMemory.addLIANodePropagation(new LIANodePropagation(this,factHandle,context));
  }
}
