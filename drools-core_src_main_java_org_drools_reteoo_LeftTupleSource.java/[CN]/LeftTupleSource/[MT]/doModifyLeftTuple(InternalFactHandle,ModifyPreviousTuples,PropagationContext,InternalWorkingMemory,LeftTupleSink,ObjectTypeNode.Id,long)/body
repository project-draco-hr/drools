{
  LeftTuple leftTuple=modifyPreviousTuples.peekLeftTuple();
  while (leftTuple != null && leftTuple.getLeftTupleSink().getLeftInputOtnId() != null && leftTuple.getLeftTupleSink().getLeftInputOtnId().before(leftInputOtnId)) {
    modifyPreviousTuples.removeLeftTuple();
    leftTuple.setPropagationContext(context);
    ((LeftInputAdapterNode)leftTuple.getLeftTupleSink().getLeftTupleSource()).retractLeftTuple(leftTuple,context,workingMemory);
    leftTuple=modifyPreviousTuples.peekLeftTuple();
  }
  if (leftTuple != null && leftTuple.getLeftTupleSink().getLeftInputOtnId() != null && leftTuple.getLeftTupleSink().getLeftInputOtnId().equals(leftInputOtnId)) {
    modifyPreviousTuples.removeLeftTuple();
    leftTuple.reAdd();
    leftTuple.setPropagationContext(context);
    if (intersect(context.getModificationMask(),leftInferredMask)) {
      sink.modifyLeftTuple(leftTuple,context,workingMemory);
    }
  }
 else {
    if (intersect(context.getModificationMask(),leftInferredMask)) {
      LeftTuple newLeftTuple=sink.createLeftTuple(factHandle,sink,true);
      newLeftTuple.setPropagationContext(context);
      sink.assertLeftTuple(newLeftTuple,context,workingMemory);
    }
  }
}
