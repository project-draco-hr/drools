{
  try {
    ClassLoader loader1=new SubvertedClassLoader(new URL[]{getClass().getResource("/testEnum.jar")},this.getClass().getClassLoader());
    KnowledgeBuilderConfiguration conf=KnowledgeBuilderFactory.newKnowledgeBuilderConfiguration(null,loader1);
    Collection<KnowledgePackage> kpkgs=loadKnowledgePackages(conf,"test_EnumSerialization.drl");
    byte[] out=DroolsStreamUtils.streamOut(kpkgs);
    KieBaseConfiguration kbaseConf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration(null,loader1);
    KnowledgeBase kbase=getKnowledgeBase(kbaseConf);
    kbase.addKnowledgePackages(kpkgs);
    StatefulKnowledgeSession ksession=createKnowledgeSession(kbase);
    List list=new ArrayList();
    ksession.setGlobal("list",list);
    assertEquals(1,ksession.fireAllRules());
    assertEquals(1,list.size());
    ClassLoader loader2=new SubvertedClassLoader(new URL[]{getClass().getResource("/testEnum.jar")},this.getClass().getClassLoader());
    KnowledgeBuilderConfiguration conf2=KnowledgeBuilderFactory.newKnowledgeBuilderConfiguration(null,loader2);
    ClassLoader ccl=Thread.currentThread().getContextClassLoader();
    Collection<KnowledgePackage> kpkgs2=null;
    try {
      Thread.currentThread().setContextClassLoader(loader2);
      kpkgs2=(Collection<KnowledgePackage>)DroolsStreamUtils.streamIn(out);
    }
  finally {
      Thread.currentThread().setContextClassLoader(ccl);
    }
    KieBaseConfiguration kbaseConf2=KnowledgeBaseFactory.newKnowledgeBaseConfiguration(null,loader2);
    KnowledgeBase kbase2=getKnowledgeBase(kbaseConf2);
    kbase2.addKnowledgePackages(kpkgs2);
    ksession=createKnowledgeSession(kbase2);
    list=new ArrayList();
    ksession.setGlobal("list",list);
    assertEquals(1,ksession.fireAllRules());
    assertEquals(1,list.size());
  }
 catch (  ClassCastException cce) {
    cce.printStackTrace();
    fail("No ClassCastException should be raised.");
  }
}
