{
  Rule rule=new Rule("test-rule");
  PropagationContext context=new PropagationContextImpl(0,PropagationContext.RETRACTION,null,null);
  WorkingMemoryImpl workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  MockTupleSource source=new MockTupleSource(15);
  MockTupleSink sink1=new MockTupleSink();
  source.addTupleSink(sink1);
  assertLength(0,sink1.getAsserted());
  ReteTuple tuple1=new ReteTuple(new FactHandleImpl(1));
  source.propagateAssertTuple(tuple1,context,workingMemory);
  assertLength(1,sink1.getAsserted());
  Object[] list=(Object[])sink1.getAsserted().get(0);
  assertEquals(tuple1,list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  ReteTuple tuple2=new ReteTuple(new FactHandleImpl(1));
  MockTupleSink sink2=new MockTupleSink();
  source.addTupleSink(sink2);
  source.propagateAssertTuple(tuple2,context,workingMemory);
  assertLength(2,sink1.getAsserted());
  assertLength(1,sink2.getAsserted());
  list=(Object[])sink1.getAsserted().get(0);
  assertEquals(tuple1,list[0]);
  assertTrue(tuple2.equals(list[0]));
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink1.getAsserted().get(1);
  assertEquals(tuple2,list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink2.getAsserted().get(0);
  assertEquals(tuple2,list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
}
