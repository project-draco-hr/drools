{
  Rule rule=new Rule("test-rule");
  PropagationContext context=new PropagationContextImpl(PropagationContext.RETRACTION,null,null);
  WorkingMemoryImpl workingMemory=new WorkingMemoryImpl(new RuleBaseImpl());
  MockTupleSource source=new MockTupleSource(15);
  MockTupleSink sink1=new MockTupleSink();
  source.addTupleSink(sink1);
  assertLength(0,sink1.getRetracted());
  TupleKey key1=new TupleKey(1,new FactHandleImpl(1));
  source.propagateRetractTuples(key1,context,workingMemory);
  assertLength(1,sink1.getRetracted());
  Object[] list=(Object[])sink1.getRetracted().get(0);
  assertSame(key1,list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  MockTupleSink sink2=new MockTupleSink();
  source.addTupleSink(sink2);
  TupleKey key2=new TupleKey(2,new FactHandleImpl(2));
  source.propagateRetractTuples(key2,context,workingMemory);
  assertLength(2,sink1.getRetracted());
  assertLength(1,sink2.getRetracted());
  list=(Object[])sink1.getRetracted().get(0);
  assertSame(key1,list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink1.getRetracted().get(1);
  assertSame(key2,list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  list=(Object[])sink2.getRetracted().get(0);
  assertSame(key2,list[0]);
  assertSame(context,list[1]);
  assertSame(workingMemory,list[2]);
  try {
    sink1.setRetractionException(new RetractionException("test"));
    source.propagateRetractTuples(key2,context,workingMemory);
    fail("Should have thrown 'RetractionException'");
  }
 catch (  RetractionException e) {
  }
catch (  Exception e) {
    fail("Should have thrown 'RetractionException' and not '" + e.getClass() + "'");
  }
}
