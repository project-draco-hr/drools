{
  String internalWrapper=BuildUtils.getInternalType(wrapperName);
  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,"remove","(Ljava/lang/Object;)Ljava/lang/Object;",null,null);
  mv.visitCode();
  for (  FieldDefinition field : core.getFieldsDefinitions()) {
    mv.visitLdcInsn(field.getName());
    mv.visitVarInsn(ALOAD,1);
    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","equals","(Ljava/lang/Object;)Z");
    Label l1=new Label();
    mv.visitJumpInsn(IFEQ,l1);
    TraitFactory.invokeExtractor(mv,wrapperName,trait,core,field);
    if (BuildUtils.isPrimitive(field.getTypeName())) {
      TraitFactory.valueOf(mv,field.getTypeName());
    }
    mv.visitVarInsn(ASTORE,2);
    TraitFactory.invokeInjector(mv,wrapperName,trait,core,field,true,1);
    mv.visitVarInsn(ALOAD,2);
    mv.visitInsn(ARETURN);
    mv.visitLabel(l1);
  }
  int j=0;
  int stack=0;
  for (  FieldDefinition field : trait.getFieldsDefinitions()) {
    boolean isSoftField=TraitRegistry.isSoftField(field,j++,mask);
    if (isSoftField) {
      stack=Math.max(stack,BuildUtils.sizeOf(field.getTypeName()));
      mv.visitLdcInsn(field.getName());
      mv.visitVarInsn(ALOAD,1);
      mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","equals","(Ljava/lang/Object;)Z");
      Label l2=new Label();
      mv.visitJumpInsn(IFEQ,l2);
      mv.visitVarInsn(ALOAD,0);
      mv.visitFieldInsn(GETFIELD,internalWrapper,"map","Ljava/util/Map;");
      mv.visitLdcInsn(field.getName());
      mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","get","(Ljava/lang/Object;)Ljava/lang/Object;");
      mv.visitVarInsn(ASTORE,2);
      mv.visitVarInsn(ALOAD,0);
      mv.visitFieldInsn(GETFIELD,internalWrapper,"map","Ljava/util/Map;");
      mv.visitLdcInsn(field.getName());
      mv.visitInsn(BuildUtils.zero(field.getTypeName()));
      if (BuildUtils.isPrimitive(field.getTypeName())) {
        TraitFactory.valueOf(mv,field.getTypeName());
      }
      mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
      mv.visitInsn(POP);
      mv.visitVarInsn(ALOAD,2);
      mv.visitInsn(ARETURN);
      mv.visitLabel(l2);
    }
  }
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,internalWrapper,"map","Ljava/util/Map;");
  mv.visitVarInsn(ALOAD,1);
  mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","remove","(Ljava/lang/Object;)Ljava/lang/Object;");
  mv.visitVarInsn(ASTORE,2);
  mv.visitVarInsn(ALOAD,2);
  mv.visitInsn(ARETURN);
  mv.visitMaxs(4 + stack,3);
  mv.visitEnd();
}
