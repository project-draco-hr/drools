{
  String internalWrapper=BuildUtils.getInternalType(wrapperName);
  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,"remove","(" + Type.getDescriptor(Object.class) + ")"+ Type.getDescriptor(Object.class),null,null);
  mv.visitCode();
  for (  FieldDefinition field : core.getFieldsDefinitions()) {
    invokeRemove(mv,wrapperName,core,field.getName(),field);
  }
  for (  String alias : aliases.keySet()) {
    invokeRemove(mv,wrapperName,core,alias,aliases.get(alias));
  }
  int j=0;
  int stack=0;
  for (  FieldDefinition field : trait.getFieldsDefinitions()) {
    boolean isSoftField=TraitRegistry.isSoftField(field,j++,mask);
    if (isSoftField) {
      stack=Math.max(stack,BuildUtils.sizeOf(field.getTypeName()));
      mv.visitLdcInsn(field.getName());
      mv.visitVarInsn(ALOAD,1);
      mv.visitMethodInsn(INVOKEVIRTUAL,Type.getInternalName(String.class),"equals","(" + Type.getDescriptor(Object.class) + ")Z");
      Label l2=new Label();
      mv.visitJumpInsn(IFEQ,l2);
      mv.visitVarInsn(ALOAD,0);
      mv.visitFieldInsn(GETFIELD,internalWrapper,"map",Type.getDescriptor(Map.class));
      mv.visitLdcInsn(field.getName());
      mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Map.class),"get","(" + Type.getDescriptor(Object.class) + ")"+ Type.getDescriptor(Object.class));
      mv.visitVarInsn(ASTORE,2);
      mv.visitVarInsn(ALOAD,0);
      mv.visitFieldInsn(GETFIELD,internalWrapper,"map",Type.getDescriptor(Map.class));
      mv.visitLdcInsn(field.getName());
      mv.visitInsn(BuildUtils.zero(field.getTypeName()));
      if (BuildUtils.isPrimitive(field.getTypeName())) {
        TraitFactory.valueOf(mv,field.getTypeName());
      }
      mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Map.class),"put","(" + Type.getDescriptor(Object.class) + Type.getDescriptor(Object.class)+ ")"+ Type.getDescriptor(Object.class));
      mv.visitInsn(POP);
      mv.visitVarInsn(ALOAD,2);
      mv.visitInsn(ARETURN);
      mv.visitLabel(l2);
    }
  }
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,internalWrapper,"map",Type.getDescriptor(Map.class));
  mv.visitVarInsn(ALOAD,1);
  mv.visitMethodInsn(INVOKEINTERFACE,Type.getInternalName(Map.class),"remove","(" + Type.getDescriptor(Object.class) + ")"+ Type.getDescriptor(Object.class));
  mv.visitVarInsn(ASTORE,2);
  mv.visitVarInsn(ALOAD,2);
  mv.visitInsn(ARETURN);
  mv.visitMaxs(4 + stack,3);
  mv.visitEnd();
}
