{
  KProject kproj=new KProjectImpl();
  KProjectChangeLog klog=new KProjectChangeLog();
  kproj.setListener(klog);
  kproj.setKProjectPath("src/main/resources/");
  kproj.setKBasesPath("src/kbases");
  List<String> files=asList(new String[]{});
  KBase kbase1=kproj.newKBase("org.test1","KBase1");
  kbase1.setFiles(files);
  kbase1.setAnnotations(asList("@ApplicationScoped; @Inject"));
  kbase1.setEqualsBehavior(AssertBehaviorOption.EQUALITY);
  kbase1.setEventProcessingMode(EventProcessingOption.STREAM);
  MemoryFileSystem mfs=new MemoryFileSystem();
  KProjectChangeLogCommiter.commit(kproj,klog,mfs);
  MemoryFile mf=(MemoryFile)mfs.getFile("src/kbases/org.test1.KBase1/org/test1/KBase1Producer.java");
  String s=new String(mfs.getBytes(mf.getPath().toPortableString()));
  assertTrue(s.contains("EventProcessingOption.STREAM"));
  kbase1.setEventProcessingMode(EventProcessingOption.CLOUD);
  KProjectChangeLogCommiter.commit(kproj,klog,mfs);
  mf=(MemoryFile)mfs.getFile("src/kbases/org.test1.KBase1/org/test1/KBase1Producer.java");
  s=new String(mfs.getBytes(mf.getPath().toPortableString()));
  assertTrue(s.contains("EventProcessingOption.CLOUD"));
  kproj.removeKBase(kbase1.getQName());
  KProjectChangeLogCommiter.commit(kproj,klog,mfs);
  mf=(MemoryFile)mfs.getFile("src/kbases/org.test1.KBase1/org/test1/KBase1Producer.java");
  assertFalse(mf.exists());
}
