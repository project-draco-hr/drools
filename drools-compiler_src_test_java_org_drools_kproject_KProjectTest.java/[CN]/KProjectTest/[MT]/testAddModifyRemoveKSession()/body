{
  KProject kproj=new KProjectImpl();
  KProjectChangeLog klog=new KProjectChangeLog();
  kproj.setListener(klog);
  kproj.setKProjectPath("src/main/resources/");
  kproj.setKBasesPath("src/kbases");
  List<String> files=asList(new String[]{});
  KBase kBase1=kproj.newKBase("org.test1","KBase1");
  kBase1.setFiles(files);
  kBase1.setEqualsBehavior(AssertBehaviorOption.EQUALITY);
  kBase1.setEventProcessingMode(EventProcessingOption.STREAM);
  MemoryFileSystem mfs=new MemoryFileSystem();
  KProjectChangeLogCommiter.commit(kproj,klog,mfs);
  Folder fld=mfs.getFolder("src/kbases/org.test1.KBase1");
  assertTrue(fld.exists());
  KSession kSession1=kBase1.newKSession("org.test1","KSession1");
  kSession1.setType("stateful");
  kSession1.setClockType(ClockTypeOption.get("realtime"));
  KProjectChangeLogCommiter.commit(kproj,klog,mfs);
  MemoryFile mf=(MemoryFile)mfs.getFile("src/kbases/org.test1.KBase1/org/test1/KSession1Producer.java");
  String s=new String(mfs.getBytes(mf.getPath().toPortableString()));
  assertTrue(s.contains("newStatefulKnowledgeSession"));
  assertTrue(s.contains("realtime"));
  kSession1.setType("stateless");
  kSession1.setClockType(ClockTypeOption.get("pseudo"));
  KProjectChangeLogCommiter.commit(kproj,klog,mfs);
  mf=(MemoryFile)mfs.getFile("src/kbases/org.test1.KBase1/org/test1/KSession1Producer.java");
  s=new String(mfs.getBytes(mf.getPath().toPortableString()));
  assertTrue(s.contains("newStatelessKnowledgeSession"));
  assertTrue(s.contains("pseudo"));
  kBase1.removeKSession("org.test1.KSession1");
  KProjectChangeLogCommiter.commit(kproj,klog,mfs);
  mf=(MemoryFile)mfs.getFile("src/kbases/org.test1.KBase1/org/test1/KSession1Producer.java");
  assertFalse(mf.exists());
}
