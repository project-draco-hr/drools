{
  KProject kproj=new KProjectImpl();
  kproj.setKProjectPath("src/main/resources/");
  kproj.setKBasesPath("src/kbases");
  List<String> files=asList(new String[]{"org/test1/rule1.drl","org/test1/rule2.drl"});
  KBase kBase1=kproj.newKBase("org.test1","KBase1").setFiles(files).setAnnotations(asList("@ApplicationScoped; @Inject")).setEqualsBehavior(AssertBehaviorOption.EQUALITY).setEventProcessingMode(EventProcessingOption.STREAM);
  KSession ksession1=kBase1.newKSession("org.test1","KSession1").setType("stateless").setAnnotations(asList("@ApplicationScoped; @Inject")).setClockType(ClockTypeOption.get("realtime"));
  KSession ksession2=kBase1.newKSession("org.test1","KSession2").setType("stateful").setAnnotations(asList("@ApplicationScoped; @Inject")).setClockType(ClockTypeOption.get("pseudo"));
  files=asList(new String[]{"org/test2/rule1.drl","org/test2/rule2.drl"});
  KBase kBase2=kproj.newKBase("org.test2","KBase2").setFiles(files).setAnnotations(asList("@ApplicationScoped")).setEqualsBehavior(AssertBehaviorOption.IDENTITY).setEventProcessingMode(EventProcessingOption.CLOUD);
  KSession ksession3=kBase2.newKSession("org.test2","KSession3").setType("stateful").setAnnotations(asList("@ApplicationScoped")).setClockType(ClockTypeOption.get("pseudo"));
  KBase kBase3=kproj.newKBase("org.test3","KBase3").setFiles(asList(new String[]{})).addInclude(kBase1.getQName()).addInclude(kBase2.getQName()).setAnnotations(asList("@ApplicationScoped")).setEqualsBehavior(AssertBehaviorOption.IDENTITY).setEventProcessingMode(EventProcessingOption.CLOUD);
  KSession ksession4=kBase3.newKSession("org.test3","KSession4").setType("stateless").setAnnotations(asList("@ApplicationScoped")).setClockType(ClockTypeOption.get("pseudo"));
  MemoryFileSystem mfs=new MemoryFileSystem();
  KProjectChangeLogCommiter.commit(kproj,mfs);
  printFs(mfs,mfs.getProjectFolder());
  String kBase1R1=getRule("org.test1","rule1");
  String kBase1R2=getRule("org.test1","rule2");
  String kbase2R1=getRule("org.test2","rule1");
  String kbase2R2=getRule("org.test2","rule2");
  String fldKB1=kproj.getKBasesPath() + "/" + kBase1.getQName()+ "/"+ kBase1.getNamespace().replace('.','/');
  String fldKB2=kproj.getKBasesPath() + "/" + kBase2.getQName()+ "/"+ kBase2.getNamespace().replace('.','/');
  mfs.getFolder(fldKB1).create();
  mfs.getFolder(fldKB2).create();
  mfs.getFile(fldKB1 + "/rule1.drl").create(new ByteArrayInputStream(kBase1R1.getBytes()));
  mfs.getFile(fldKB1 + "/rule2.drl").create(new ByteArrayInputStream(kBase1R2.getBytes()));
  mfs.getFile(fldKB2 + "/rule1.drl").create(new ByteArrayInputStream(kbase2R1.getBytes()));
  mfs.getFile(fldKB2 + "/rule2.drl").create(new ByteArrayInputStream(kbase2R2.getBytes()));
  MemoryFileSystem trgMfs=new MemoryFileSystem();
  MemoryFileSystem srcMfs=mfs;
  Folder fld1=trgMfs.getFolder("org/drools/cdi/test");
  fld1.create();
  File fle1=fld1.getFile("KProjectTestClassImpl.java");
  fle1.create(new ByteArrayInputStream(generateKProjectTestClassImpl(kproj).getBytes()));
  Folder fld2=trgMfs.getFolder("META-INF");
  fld2.create();
  File fle2=fld2.getFile("beans.xml");
  fle2.create(new ByteArrayInputStream(generateBeansXML(kproj).getBytes()));
  List<String> inputClasses=new ArrayList<String>();
  inputClasses.add("org/drools/cdi/test/KProjectTestClassImpl.java");
  final List<String> classes=compile(kproj,srcMfs,trgMfs,inputClasses);
  MemoryFileSystemClassLoader classLoader=new MemoryFileSystemClassLoader(trgMfs);
  ClassLoader origCl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    Weld weldContainer=new Weld(){
      @Override protected Deployment createDeployment(      ResourceLoader resourceLoader,      Bootstrap bootstrap){
        return new TestWeldSEDeployment(resourceLoader,bootstrap,classes);
      }
    }
;
    WeldContainer weld=weldContainer.initialize();
    KProjectTestClass bean=weld.instance().select(KProjectTestClass.class).get();
    assertNotNull(bean.getKBase1());
    assertNotNull(bean.getKBase2());
    List<String> list=new ArrayList<String>();
    StatelessKnowledgeSession stlsKsession=bean.getKBase1KSession1();
    stlsKsession.setGlobal("list",list);
    stlsKsession.execute("dummy");
    assertEquals(2,list.size());
    assertTrue(list.contains("org.test1:rule1"));
    assertTrue(list.contains("org.test1:rule2"));
    list.clear();
    StatefulKnowledgeSession stflKsession=bean.getKBase1KSession2();
    stflKsession.setGlobal("list",list);
    stflKsession.fireAllRules();
    assertEquals(2,list.size());
    assertTrue(list.contains("org.test1:rule1"));
    assertTrue(list.contains("org.test1:rule2"));
    list.clear();
    stflKsession=bean.getKBase2KSession3();
    stflKsession.setGlobal("list",list);
    stflKsession.fireAllRules();
    assertEquals(2,list.size());
    assertTrue(list.contains("org.test2:rule1"));
    assertTrue(list.contains("org.test2:rule2"));
    list.clear();
    stlsKsession=bean.getKBase3KSession4();
    stlsKsession.setGlobal("list",list);
    stlsKsession.execute("dummy");
    assertEquals(4,list.size());
    assertTrue(list.contains("org.test1:rule1"));
    assertTrue(list.contains("org.test1:rule2"));
    assertTrue(list.contains("org.test2:rule1"));
    assertTrue(list.contains("org.test2:rule2"));
    weldContainer.shutdown();
  }
  finally {
    Thread.currentThread().setContextClassLoader(origCl);
  }
}
