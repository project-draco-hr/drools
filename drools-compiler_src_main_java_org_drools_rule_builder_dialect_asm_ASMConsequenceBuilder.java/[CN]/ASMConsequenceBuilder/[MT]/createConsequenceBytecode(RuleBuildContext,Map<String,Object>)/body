{
  final InvokerDataProvider data=new InvokerContext(consequenceContext);
  final String name=(String)consequenceContext.get("consequenceName");
  final Declaration[] declarations=(Declaration[])consequenceContext.get("declarations");
  final ClassGenerator generator=createInvokerClassGenerator(data,ruleContext).setInterfaces(Consequence.class,CompiledInvoker.class);
  generator.addMethod(ACC_PUBLIC,"getName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
    public void body(    MethodVisitor mv){
      push(name);
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"evaluate",generator.methodDescr(null,KnowledgeHelper.class,WorkingMemory.class),new String[]{"java/lang/Exception"},new EvaluateMethod(){
    public void body(    MethodVisitor mv){
      mv.visitVarInsn(ALOAD,1);
      invokeInterface(KnowledgeHelper.class,"getTuple",Tuple.class);
      invokeInterface(Tuple.class,"toFactHandles",InternalFactHandle[].class);
      mv.visitVarInsn(ASTORE,3);
      mv.visitVarInsn(ALOAD,1);
      invokeInterface(KnowledgeHelper.class,"getActivation",Activation.class);
      invokeInterface(Activation.class,"getTuple",LeftTuple.class);
      invokeInterface(LeftTuple.class,"getLeftTupleSink",LeftTupleSink.class);
      cast(RuleTerminalNode.class);
      invokeVirtual(RuleTerminalNode.class,"getDeclarations",Declaration[].class);
      mv.visitVarInsn(ASTORE,4);
      Boolean[] notPatterns=(Boolean[])consequenceContext.get("notPatterns");
      String[] declarationTypes=data.getDeclarationTypes();
      int[] paramsPos=new int[declarations.length];
      int offset=5;
      for (int i=0; i < declarations.length; i++) {
        int factPos=offset;
        int objPos=++offset;
        paramsPos[i]=factPos;
        mv.visitVarInsn(ALOAD,3);
        mv.visitVarInsn(ALOAD,4);
        push(i);
        mv.visitInsn(AALOAD);
        invokeVirtual(Declaration.class,"getPattern",Pattern.class);
        invokeVirtual(Pattern.class,"getOffset",Integer.TYPE);
        mv.visitInsn(AALOAD);
        mv.visitVarInsn(ASTORE,factPos);
        if (notPatterns[i]) {
          mv.visitVarInsn(ALOAD,4);
          push(i);
          mv.visitInsn(AALOAD);
          mv.visitVarInsn(ALOAD,2);
          cast(InternalWorkingMemory.class);
          mv.visitVarInsn(ALOAD,factPos);
          invokeInterface(InternalFactHandle.class,"getObject",Object.class);
          String readMethod=declarations[i].getNativeReadMethod().getName();
          boolean isObject=readMethod.equals("getValue");
          String returnedType=isObject ? "Ljava/lang/Object;" : typeDescr(declarationTypes[i]);
          mv.visitMethodInsn(INVOKEVIRTUAL,"org/drools/rule/Declaration",readMethod,"(Lorg/drools/common/InternalWorkingMemory;Ljava/lang/Object;)" + returnedType);
          if (isObject)           mv.visitTypeInsn(CHECKCAST,internalName(declarationTypes[i]));
          offset+=store(objPos,declarationTypes[i]);
          mv.visitVarInsn(ALOAD,1);
          invokeInterface(KnowledgeHelper.class,"getWorkingMemory",WorkingMemory.class);
          loadAsObject(objPos);
          invokeInterface(WorkingMemory.class,"getFactHandle",FactHandle.class,Object.class);
          cast(InternalFactHandle.class);
          mv.visitVarInsn(ASTORE,factPos);
        }
 else {
          mv.visitVarInsn(ALOAD,factPos);
          invokeInterface(InternalFactHandle.class,"getObject",Object.class);
          mv.visitTypeInsn(CHECKCAST,internalName(declarationTypes[i]));
          offset+=store(objPos,declarationTypes[i]);
        }
      }
      StringBuilder consequenceMethodDescr=new StringBuilder("(Lorg/drools/spi/KnowledgeHelper;");
      mv.visitVarInsn(ALOAD,1);
      for (int i=0; i < declarations.length; i++) {
        load(paramsPos[i] + 1);
        mv.visitVarInsn(ALOAD,paramsPos[i]);
        consequenceMethodDescr.append(typeDescr(declarationTypes[i]) + "Lorg/drools/FactHandle;");
      }
      parseGlobals(data.getGlobals(),data.getGlobalTypes(),2,consequenceMethodDescr);
      consequenceMethodDescr.append(")V");
      mv.visitMethodInsn(INVOKESTATIC,data.getInternalRuleClassName(),data.getMethodName(),consequenceMethodDescr.toString());
      mv.visitInsn(RETURN);
    }
  }
);
  return generator.generateBytecode();
}
