{
  final String packageName=(String)consequenceContext.get("package");
  final String invokerClassName=(String)consequenceContext.get("invokerClassName");
  final String ruleClassName=(String)consequenceContext.get("ruleClassName");
  final String internalRuleClassName=(packageName + "." + ruleClassName).replace(".","/");
  final String methodName=(String)consequenceContext.get("methodName");
  final String name=(String)consequenceContext.get("consequenceName");
  final Integer hashCode=(Integer)consequenceContext.get("hashCode");
  final Declaration[] declarations=(Declaration[])consequenceContext.get("declarations");
  final String[] declarationTypes=(String[])consequenceContext.get("declarationTypes");
  final ClassGenerator generator=new ClassGenerator(packageName + "." + invokerClassName).setInterfaces("org/drools/spi/Consequence","org/drools/spi/CompiledInvoker");
  generator.addStaticField(ACC_PRIVATE + ACC_FINAL,"serialVersionUID",LONG_TYPE.getDescriptor(),CONSEQUENCE_SERIAL_UID).addField(ACC_PRIVATE + ACC_FINAL,"consequenceName",getDescriptor(String.class));
  generator.addDefaultConstructor(new ClassGenerator.MethodBody(){
    public void body(    ClassGenerator cg,    MethodVisitor mv){
      mv.visitVarInsn(ALOAD,0);
      mv.visitLdcInsn(name);
      mv.visitFieldInsn(PUTFIELD,cg.getClassDescriptor(),"consequenceName",getDescriptor(String.class));
    }
  }
).addMethod(ACC_PUBLIC,"getName",mDescr(String.class),new ClassGenerator.MethodBody(){
    public void body(    ClassGenerator cg,    MethodVisitor mv){
      mv.visitVarInsn(ALOAD,0);
      mv.visitFieldInsn(GETFIELD,cg.getClassDescriptor(),"consequenceName",getDescriptor(String.class));
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"hashCode",mDescr(Integer.TYPE),new ClassGenerator.MethodBody(){
    public void body(    ClassGenerator cg,    MethodVisitor mv){
      mv.visitLdcInsn(hashCode);
      mv.visitInsn(IRETURN);
    }
  }
).addMethod(ACC_PUBLIC,"getMethodBytecode",mDescr(List.class),new ClassGenerator.MethodBody(){
    public void body(    ClassGenerator cg,    MethodVisitor mv){
      mv.visitVarInsn(ALOAD,0);
      mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Object","getClass","()Ljava/lang/Class;");
      mv.visitLdcInsn(ruleClassName);
      mv.visitLdcInsn(packageName);
      mv.visitLdcInsn(methodName);
      mv.visitLdcInsn(internalRuleClassName + ".class");
      mv.visitMethodInsn(INVOKESTATIC,"org/drools/rule/Rule","getMethodBytecode","(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;");
      mv.visitInsn(ARETURN);
    }
  }
).addMethod(ACC_PUBLIC,"equals",mDescr(Boolean.TYPE,Object.class),new ClassGenerator.MethodBody(){
    public void body(    ClassGenerator cg,    MethodVisitor mv){
      Label l1=new Label();
      Label l2=new Label();
      mv.visitVarInsn(ALOAD,1);
      mv.visitJumpInsn(IFNULL,l1);
      mv.visitVarInsn(ALOAD,1);
      mv.visitTypeInsn(INSTANCEOF,"org/drools/spi/CompiledInvoker");
      mv.visitJumpInsn(IFNE,l2);
      mv.visitLabel(l1);
      mv.visitInsn(ICONST_0);
      mv.visitInsn(IRETURN);
      mv.visitLabel(l2);
      mv.visitVarInsn(ALOAD,0);
      mv.visitMethodInsn(INVOKEVIRTUAL,cg.getClassDescriptor(),"getMethodBytecode","()Ljava/util/List;");
      mv.visitVarInsn(ALOAD,1);
      mv.visitTypeInsn(CHECKCAST,"org/drools/spi/CompiledInvoker");
      mv.visitMethodInsn(INVOKEINTERFACE,"org/drools/spi/CompiledInvoker","getMethodBytecode","()Ljava/util/List;");
      mv.visitMethodInsn(INVOKESTATIC,"org/drools/core/util/asm/MethodComparator","compareBytecode","(Ljava/util/List;Ljava/util/List;)Z");
      mv.visitInsn(IRETURN);
    }
  }
).addMethod(ACC_PUBLIC,"evaluate",mDescr(null,KnowledgeHelper.class,WorkingMemory.class),new String[]{"java/lang/Exception"},new ClassGenerator.MethodBody(){
    public void body(    ClassGenerator cg,    MethodVisitor mv){
      mv.visitVarInsn(ALOAD,1);
      mv.visitMethodInsn(INVOKEINTERFACE,"org/drools/spi/KnowledgeHelper","getTuple","()Lorg/drools/spi/Tuple;");
      mv.visitVarInsn(ASTORE,3);
      mv.visitVarInsn(ALOAD,1);
      mv.visitMethodInsn(INVOKEINTERFACE,"org/drools/spi/KnowledgeHelper","getActivation","()Lorg/drools/spi/Activation;");
      mv.visitMethodInsn(INVOKEINTERFACE,"org/drools/spi/Activation","getTuple","()Lorg/drools/reteoo/LeftTuple;");
      mv.visitMethodInsn(INVOKEINTERFACE,"org/drools/reteoo/LeftTuple","getLeftTupleSink","()Lorg/drools/reteoo/LeftTupleSink;");
      mv.visitTypeInsn(CHECKCAST,"org/drools/reteoo/RuleTerminalNode");
      mv.visitMethodInsn(INVOKEVIRTUAL,"org/drools/reteoo/RuleTerminalNode","getDeclarations","()[Lorg/drools/rule/Declaration;");
      mv.visitVarInsn(ASTORE,4);
      for (int i=0; i < declarations.length; i++) {
        mv.visitVarInsn(ALOAD,3);
        mv.visitVarInsn(ALOAD,4);
        mv.visitLdcInsn(i);
        mv.visitInsn(AALOAD);
        mv.visitMethodInsn(INVOKEINTERFACE,"org/drools/spi/Tuple","get","(Lorg/drools/rule/Declaration;)Lorg/drools/common/InternalFactHandle;");
        mv.visitVarInsn(ASTORE,i + 5);
        mv.visitVarInsn(ALOAD,4);
        mv.visitLdcInsn(i);
        mv.visitInsn(AALOAD);
        mv.visitVarInsn(ALOAD,2);
        mv.visitTypeInsn(CHECKCAST,"org/drools/common/InternalWorkingMemory");
        mv.visitVarInsn(ALOAD,i + 5);
        mv.visitMethodInsn(INVOKEINTERFACE,"org/drools/common/InternalFactHandle","getObject","()Ljava/lang/Object;");
        mv.visitMethodInsn(INVOKEVIRTUAL,"org/drools/rule/Declaration","getValue","(Lorg/drools/common/InternalWorkingMemory;Ljava/lang/Object;)Ljava/lang/Object;");
        mv.visitTypeInsn(CHECKCAST,declarationTypes[i].replace('.','/'));
        mv.visitVarInsn(ASTORE,i + 6);
      }
      StringBuilder consequenceMethodDescr=new StringBuilder("(Lorg/drools/spi/KnowledgeHelper;");
      mv.visitVarInsn(ALOAD,1);
      for (int i=0; i < declarations.length; i++) {
        mv.visitVarInsn(ALOAD,i + 6);
        mv.visitVarInsn(ALOAD,i + 5);
        consequenceMethodDescr.append("L" + declarationTypes[i].replace('.','/') + ";Lorg/drools/FactHandle;");
      }
      consequenceMethodDescr.append(")V");
      mv.visitMethodInsn(INVOKESTATIC,internalRuleClassName,methodName,consequenceMethodDescr.toString());
      mv.visitInsn(RETURN);
    }
  }
);
  return generator.newInstance();
}
