{
  ObjectType objectType=new ClassObjectType(DroolsQuery.class);
  final Pattern pattern=new Pattern(context.getNextPatternId(),0,objectType,null);
  ClassLoader classloader=context.getPkg().getPackageCompilationData().getClassLoader();
  final FieldExtractor extractor=context.getDialect().getClassFieldExtractorCache().getExtractor(DroolsQuery.class,"name",classloader);
  final FieldValue field=FieldFactory.getFieldValue(queryDescr.getName(),ValueType.STRING_TYPE);
  final LiteralConstraint constraint=new LiteralConstraint(extractor,ValueType.STRING_TYPE.getEvaluator(Operator.EQUAL),field);
  pattern.addConstraint(constraint);
  Extractor arrayExtractor=null;
  try {
    arrayExtractor=context.getDialect().getClassFieldExtractorCache().getExtractor(((ClassObjectType)objectType).getClassType(),"arguments",classloader);
  }
 catch (  final RuntimeDroolsException e) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),queryDescr,e,"Unable to create Field Extractor for 'getArguments'"));
  }
  String[] params=queryDescr.getParameters();
  String[] types=queryDescr.getParameterTypes();
  int i=0;
  try {
    for (i=0; i < params.length; i++) {
      pattern.addDeclaration(params[i],new ArrayExtractor(arrayExtractor,i,context.getDialect().getTypeResolver().resolveType(types[i])));
    }
  }
 catch (  ClassNotFoundException e) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),queryDescr,e,"Unable to resolve type '" + types[i] + " for parameter"+ params[i]));
  }
  return pattern;
}
