{
  if (accessorNode instanceof GetterAccessor) {
    return new MethodInvocation(((GetterAccessor)accessorNode).getMethod());
  }
  if (accessorNode instanceof MethodAccessor) {
    MethodAccessor methodAccessor=(MethodAccessor)accessorNode;
    Method method=methodAccessor.getMethod();
    MethodInvocation invocation=new MethodInvocation(method);
    boolean isVarArgs=method.isVarArgs();
    readInvocationParams(invocation,methodAccessor.getParms(),methodAccessor.getParameterTypes(),isVarArgs);
    return invocation;
  }
  if (accessorNode instanceof ConstructorAccessor) {
    ConstructorAccessor constructorAccessor=(ConstructorAccessor)accessorNode;
    Constructor constructor=constructorAccessor.getConstructor();
    ConstructorInvocation invocation=new ConstructorInvocation(constructor);
    readInvocationParams(invocation,constructorAccessor.getParameters(),constructorAccessor.getParameterTypes(),constructor.isVarArgs());
    return invocation;
  }
  if (accessorNode instanceof ArrayAccessor) {
    ArrayAccessor arrayAccessor=(ArrayAccessor)accessorNode;
    return new ArrayAccessInvocation(formerInvocation != null ? formerInvocation.getReturnType() : Object[].class,new FixedExpression(int.class,arrayAccessor.getIndex()));
  }
  if (accessorNode instanceof ArrayAccessorNest) {
    ArrayAccessorNest arrayAccessorNest=(ArrayAccessorNest)accessorNode;
    ExecutableAccessor index=(ExecutableAccessor)arrayAccessorNest.getIndex();
    return new ArrayAccessInvocation(formerInvocation != null ? formerInvocation.getReturnType() : Object[].class,analyzeNode(index.getNode()));
  }
  if (accessorNode instanceof ArrayLength) {
    return new ArrayLengthInvocation();
  }
  if (accessorNode instanceof ListAccessor) {
    Class<?> listType=getListType(formerInvocation);
    ListAccessor listAccessor=(ListAccessor)accessorNode;
    return new ListAccessInvocation(listType,new FixedExpression(int.class,listAccessor.getIndex()));
  }
  if (accessorNode instanceof ListAccessorNest) {
    Class<?> listType=getListType(formerInvocation);
    ListAccessorNest listAccessorNest=(ListAccessorNest)accessorNode;
    ExecutableAccessor index=(ExecutableAccessor)listAccessorNest.getIndex();
    return new ListAccessInvocation(listType,analyzeNode(index.getNode()));
  }
  if (accessorNode instanceof MapAccessor) {
    MapAccessor mapAccessor=(MapAccessor)accessorNode;
    return new MapAccessInvocation(Object.class,Object.class,new FixedExpression(Object.class,mapAccessor.getProperty()));
  }
  if (accessorNode instanceof MapAccessorNest) {
    Class<?> keyType=Object.class;
    Class<?> valueType=Object.class;
    Type[] generics=getGenerics(formerInvocation);
    if (generics != null && generics.length == 2 && generics[0] instanceof Class) {
      if (generics[0] instanceof Class)       keyType=(Class<?>)generics[0];
      if (generics[1] instanceof Class)       valueType=(Class<?>)generics[1];
    }
    MapAccessorNest mapAccessor=(MapAccessorNest)accessorNode;
    ExecutableStatement statement=mapAccessor.getProperty();
    if (statement instanceof ExecutableLiteral) {
      return new MapAccessInvocation(keyType,valueType,new FixedExpression(keyType,((ExecutableLiteral)statement).getLiteral()));
    }
 else {
      return new MapAccessInvocation(keyType,valueType,analyzeNode(((ExecutableAccessor)statement).getNode()));
    }
  }
  if (accessorNode instanceof FieldAccessor) {
    return new FieldAccessInvocation(((FieldAccessor)accessorNode).getField());
  }
  if (accessorNode instanceof StaticVarAccessor) {
    Field field=((StaticVarAccessor)accessorNode).getField();
    return new FieldAccessInvocation(field);
  }
  if (accessorNode instanceof ThisValueAccessor) {
    return new MethodInvocation(null);
  }
  throw new RuntimeException("Unknown AccessorNode type: " + accessorNode.getClass().getName());
}
