{
  node=analyzeRegEx(analyzeSubstatement(node));
  if (node instanceof LiteralNode) {
    LiteralNode literalNode=(LiteralNode)node;
    return new FixedExpression(literalNode.getEgressType(),literalNode.getLiteralValue());
  }
  if (node instanceof BinaryOperation) {
    BinaryOperation op=(BinaryOperation)node;
    if (node.getClass() == BinaryOperation.class) {
      return new AritmeticExpression(analyzeNode(op.getLeft()),AritmeticOperator.fromMvelOpCode(op.getOperation()),analyzeNode(op.getRight()));
    }
 else {
      return new FixedExpression(op.getEgressType(),op.getReducedValue(parserContext,null,new ImmutableDefaultFactory()));
    }
  }
  Accessor accessor=node.getAccessor();
  if (accessor == null && node instanceof NewObjectNode) {
    accessor=((NewObjectNode)node).getNewObjectOptimizer();
  }
  return analyzeAccessor(accessor);
}
