{
  node=analyzeRegEx(analyzeSubstatement(node));
  if (node instanceof LiteralNode) {
    LiteralNode literalNode=(LiteralNode)node;
    return new FixedExpression(literalNode.getEgressType(),literalNode.getLiteralValue());
  }
  if (node instanceof BinaryOperation) {
    BinaryOperation op=(BinaryOperation)node;
    return new AritmeticExpression(analyzeNode(op.getLeft()),AritmeticOperator.fromMvelOpCode(op.getOperation()),analyzeNode(op.getRight()));
  }
  if (node instanceof Union) {
    ASTNode main=((Union)node).getMain();
    Accessor accessor=node.getAccessor();
    EvaluatedExpression expression=new EvaluatedExpression();
    expression.firstExpression=analyzeNode(main);
    if (accessor instanceof DynamicGetAccessor) {
      AccessorNode accessorNode=(AccessorNode)((DynamicGetAccessor)accessor).getAccessor();
      expression.addInvocation(analyzeAccessor(accessorNode,null));
    }
 else     if (accessor instanceof AccessorNode) {
      expression.addInvocation(analyzeAccessor((AccessorNode)accessor,null));
    }
 else {
      throw new RuntimeException("Unexpected accessor: " + accessor);
    }
    return expression;
  }
  Accessor accessor=node.getAccessor();
  if (accessor instanceof IndexedVariableAccessor) {
    String variableName=node.getName();
    int dot=variableName.indexOf('.');
    if (dot > 0) {
      variableName=variableName.substring(0,dot);
    }
    Class<?> variableType=getVariableType(variableName);
    return new VariableExpression(variableName,analyzeExpressionNode(((IndexedVariableAccessor)accessor).getNextNode()),variableType != null ? variableType : node.getEgressType());
  }
  if (accessor == null && node instanceof NewObjectNode) {
    accessor=((NewObjectNode)node).getNewObjectOptimizer();
  }
  if (accessor instanceof VariableAccessor) {
    VariableAccessor variableAccessor=(VariableAccessor)accessor;
    AccessorNode accessorNode=variableAccessor.getNextNode();
    if (accessorNode == null || !isStaticAccessor(accessorNode)) {
      String variableName=(String)(variableAccessor.getProperty());
      Class<?> variableType=getVariableType(variableName);
      if (variableType != null) {
        return new VariableExpression(variableName,analyzeExpressionNode(accessorNode),variableType);
      }
 else {
        Class<?> thisClass=parserContext.getInputs().get("this");
        try {
          return new EvaluatedExpression(new MethodInvocation(thisClass.getMethod(variableName)));
        }
 catch (        NoSuchMethodException e) {
          if (node.getEgressType() == Class.class) {
            ParserConfiguration conf=parserContext.getParserConfiguration();
            Class<?> classLiteral=conf.getImport(variableName);
            if (classLiteral != null) {
              return new FixedExpression(Class.class,classLiteral);
            }
          }
          throw new RuntimeException(e);
        }
      }
    }
  }
  if (accessor == null) {
    throw new RuntimeException("Null accessor on node: " + node);
  }
  return analyzeAccessor(accessor);
}
