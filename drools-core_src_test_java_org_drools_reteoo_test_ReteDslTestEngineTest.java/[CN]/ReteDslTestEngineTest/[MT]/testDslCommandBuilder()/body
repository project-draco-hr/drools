{
  InputStream stream=getClass().getResourceAsStream("JoinNode.data");
  assertNotNull(stream);
  DslStep[] steps=(DslStep[])ReteDslTestEngine.buildDslCommands(new InputStreamReader(stream)).toArray(new DslStep[0]);
  assertEquals(14,steps.length);
  assertEquals(2,steps[0].getLine());
  assertEquals("ObjectTypeNode",steps[0].getName());
  assertEquals("otn1, java.lang.Integer",steps[0].getCommands().get(0));
  assertEquals(4,steps[1].getLine());
  assertEquals("LeftInputAdapterNode",steps[1].getName());
  assertEquals("lian0, otn1",steps[1].getCommands().get(0));
  assertEquals(6,steps[2].getLine());
  assertEquals("ObjectTypeNode",steps[2].getName());
  assertEquals("otn2, java.lang.Integer",steps[2].getCommands().get(0));
  assertEquals(8,steps[3].getLine());
  assertEquals("ObjectTypeNode",steps[3].getName());
  assertEquals("otn3, java.lang.Integer",steps[3].getCommands().get(0));
  assertEquals(12,steps[4].getLine());
  assertEquals("Binding",steps[4].getName());
  assertEquals("p1, 0, java.lang.Integer, intValue",steps[4].getCommands().get(0));
  assertEquals(15,steps[5].getLine());
  assertEquals("JoinNode",steps[5].getName());
  assertEquals("join1, lian0, otn2",steps[5].getCommands().get(0));
  assertEquals("intValue, !=, p1",steps[5].getCommands().get(1));
  assertEquals(18,steps[6].getLine());
  assertEquals("JoinNode",steps[6].getName());
  assertEquals("join2, join1, otn3",steps[6].getCommands().get(0));
  assertEquals("intValue, !=, p1",steps[6].getCommands().get(1));
  assertEquals(23,steps[7].getLine());
  assertEquals("Facts",steps[7].getName());
  assertEquals("0, 1, 2, 3, 4",steps[7].getCommands().get(0));
  assertEquals(28,steps[8].getLine());
  assertEquals("assert",steps[8].getName());
  assertEquals("otn1 [h1, h3]",steps[8].getCommands().get(0));
  assertEquals("otn2 [h0, h2]",steps[8].getCommands().get(1));
  assertEquals("otn3 [h4]",steps[8].getCommands().get(2));
  assertEquals(34,steps[9].getLine());
  assertEquals("join1",steps[9].getName());
  assertEquals("leftMemory [[h1], [h3]]",steps[9].getCommands().get(0));
  assertEquals("rightMemory [h0, h2]",steps[9].getCommands().get(1));
  assertEquals(37,steps[10].getLine());
  assertEquals("join2",steps[10].getName());
  assertEquals("leftMemory [[h1, h0], [h3, h0],[h1, h2], [h3, h2]]",steps[10].getCommands().get(0));
  assertEquals("rightMemory [h4]",steps[10].getCommands().get(1));
  assertEquals(41,steps[11].getLine());
  assertEquals("retract",steps[11].getName());
  assertEquals("otn1 [h1]",steps[11].getCommands().get(0));
  assertEquals("otn2 [h2]",steps[11].getCommands().get(1));
  assertEquals(44,steps[12].getLine());
  assertEquals("join1",steps[12].getName());
  assertEquals("leftMemory [ [h3] ]",steps[12].getCommands().get(0));
  assertEquals("rightMemory [h0]",steps[12].getCommands().get(1));
  assertEquals(47,steps[13].getLine());
  assertEquals("join2",steps[13].getName());
  assertEquals("leftMemory  [[h3, h0]]",steps[13].getCommands().get(0));
  assertEquals("rightMemory [h4]",steps[13].getCommands().get(1));
}
