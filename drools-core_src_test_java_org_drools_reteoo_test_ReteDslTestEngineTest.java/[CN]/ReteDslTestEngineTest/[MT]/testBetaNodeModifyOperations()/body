{
  String str="TestCase 'testOTN'\nTest 'dummy'\n";
  str+="ObjectTypeNode:\n";
  str+="    otn1, org.drools.Person;\n";
  str+="LeftInputAdapterNode:\n";
  str+="    lian0, otn1;\n";
  str+="ObjectTypeNode:\n";
  str+="    otn2, org.drools.Person;\n";
  str+="ObjectTypeNode:\n";
  str+="    otn3, org.drools.Person;\n";
  str+="Binding:\n";
  str+="     p1, 0, org.drools.Person, age;\n";
  str+="JoinNode:\n";
  str+="    join1, lian0, otn2;\n";
  str+="    age, ==, p1;\n";
  str+="JoinNode:\n";
  str+="    join2, join1, otn3;\n";
  str+="    age, ==, p1;\n";
  str+="Facts:\n";
  str+="    new org.drools.Person('darth', 35), new org.drools.Person('bobba', 35),\n";
  str+="    new org.drools.Person('yoda', 35), new org.drools.Person('luke', 35),\n";
  str+="    new org.drools.Person('dave', 36);\n";
  str+="assert:\n";
  str+="    otn1, [h1, h3, h4];\n";
  str+="    otn2, [h0, h2];\n";
  str+="join1:\n";
  str+="    leftMemory, [[h1], [h3]];\n";
  str+="    leftMemory, [[h4]];\n";
  str+="    rightMemory, [h0, h2];\n";
  str+="join2:\n";
  str+="    leftMemory, [[h1, h0], [h3, h0],\n";
  str+="                [h1, h2], [h3, h2]];\n";
  str+="    rightMemory, [];\n";
  str+="With:\n";
  str+="    h1, age = 36;\n";
  str+="modify:\n";
  str+="    otn1, [h1];\n";
  str+="join1:\n";
  str+="    leftMemory, [[h3]];\n";
  str+="    leftMemory, [[h4], [h1]];\n";
  str+="    rightMemory, [h0, h2];\n";
  str+="join2:\n";
  str+="    leftMemory, [[h3, h0],\n";
  str+="                [h3, h2]];\n";
  str+="    rightMemory, [];\n";
  NodeTestResult result=executeTest(str);
  Map<String,Object> map=result.context;
  InternalWorkingMemory wm=(InternalWorkingMemory)map.get("WorkingMemory");
  List<InternalFactHandle> handles=(List<InternalFactHandle>)map.get("Handles");
  JoinNode join1=(JoinNode)map.get("join1");
  BetaMemory memory=(BetaMemory)wm.getNodeMemory(join1);
  assertEquals(2,memory.getRightTupleMemory().size());
  assertEquals(3,memory.getLeftTupleMemory().size());
  JoinNode join2=(JoinNode)map.get("join2");
  memory=(BetaMemory)wm.getNodeMemory(join2);
  assertEquals(0,memory.getRightTupleMemory().size());
  assertEquals(2,memory.getLeftTupleMemory().size());
}
