{
  if (workItemManager == null) {
    workItemManager=new WorkItemManager(){
      public void completeWorkItem(      long id,      Map<String,Object> results){
        CompleteWorkItemCommand command=new CompleteWorkItemCommand();
        command.setWorkItemId(id);
        command.setResults(results);
        commandService.execute(command);
      }
      public void abortWorkItem(      long id){
        AbortWorkItemCommand command=new AbortWorkItemCommand();
        command.setWorkItemId(id);
        commandService.execute(command);
      }
      public void registerWorkItemHandler(      String workItemName,      WorkItemHandler handler){
        RegisterWorkItemHandlerCommand command=new RegisterWorkItemHandlerCommand();
        command.setWorkItemName(workItemName);
        command.setHandler(handler);
        commandService.execute(command);
      }
      public WorkItem getWorkItem(      long id){
        GetWorkItemCommand command=new GetWorkItemCommand();
        command.setWorkItemId(id);
        return commandService.execute(command);
      }
      public void clear(){
        throw new UnsupportedOperationException();
      }
      public Set<WorkItem> getWorkItems(){
        throw new UnsupportedOperationException();
      }
      public void internalAbortWorkItem(      long id){
        throw new UnsupportedOperationException();
      }
      public void internalAddWorkItem(      WorkItem workItem){
        throw new UnsupportedOperationException();
      }
      public void internalExecuteWorkItem(      WorkItem workItem){
        throw new UnsupportedOperationException();
      }
      @Override public void signalEvent(      String type,      Object event){
        SignalEventCommand command=new SignalEventCommand(type,event);
        commandService.execute(command);
      }
      @Override public void signalEvent(      String type,      Object event,      long processInstanceId){
        SignalEventCommand command=new SignalEventCommand(processInstanceId,type,event);
        commandService.execute(command);
      }
      @Override public void dispose(){
      }
      @Override public void retryWorkItem(      Long workItemID,      Map<String,Object> params){
        ReTryWorkItemCommand command=new ReTryWorkItemCommand(workItemID,params);
        commandService.execute(command);
      }
    }
;
  }
  return workItemManager;
}
