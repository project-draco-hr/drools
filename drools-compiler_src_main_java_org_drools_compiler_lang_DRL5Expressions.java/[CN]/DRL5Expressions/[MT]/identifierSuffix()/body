{
  Token LEFT_SQUARE16=null;
  Token RIGHT_SQUARE17=null;
  Token DOT18=null;
  Token LEFT_SQUARE19=null;
  Token RIGHT_SQUARE20=null;
  try {
    int alt65=3;
    int LA65_0=input.LA(1);
    if ((LA65_0 == LEFT_SQUARE)) {
      int LA65_1=input.LA(2);
      if ((LA65_1 == RIGHT_SQUARE) && (synpred33_DRL5Expressions())) {
        alt65=1;
      }
 else       if ((LA65_1 == BOOL || (LA65_1 >= DECIMAL && LA65_1 <= DECR) || LA65_1 == FLOAT || LA65_1 == HEX || (LA65_1 >= ID && LA65_1 <= INCR) || (LA65_1 >= LEFT_PAREN && LA65_1 <= LESS) || LA65_1 == MINUS || LA65_1 == NEGATION || LA65_1 == NULL || LA65_1 == PLUS || (LA65_1 >= STAR && LA65_1 <= TIME_INTERVAL))) {
        alt65=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",65,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else     if ((LA65_0 == LEFT_PAREN)) {
      alt65=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",65,0,input);
      throw nvae;
    }
switch (alt65) {
case 1:
{
        int cnt63=0;
        loop63:         while (true) {
          int alt63=2;
          int LA63_0=input.LA(1);
          if ((LA63_0 == LEFT_SQUARE)) {
            alt63=1;
          }
switch (alt63) {
case 1:
{
              LEFT_SQUARE16=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix3240);
              if (state.failed)               return;
              if (state.backtracking == 0) {
                helper.emit(LEFT_SQUARE16,DroolsEditorType.SYMBOL);
              }
              RIGHT_SQUARE17=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix3281);
              if (state.failed)               return;
              if (state.backtracking == 0) {
                helper.emit(RIGHT_SQUARE17,DroolsEditorType.SYMBOL);
              }
            }
          break;
default :
        if (cnt63 >= 1)         break loop63;
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
    EarlyExitException eee=new EarlyExitException(63,input);
  throw eee;
}
cnt63++;
}
DOT18=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix3325);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(DOT18,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix3329);
class_key();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
int cnt64=0;
loop64: while (true) {
int alt64=2;
int LA64_0=input.LA(1);
if ((LA64_0 == LEFT_SQUARE)) {
int LA64_36=input.LA(2);
if ((synpred34_DRL5Expressions())) {
alt64=1;
}
}
switch (alt64) {
case 1:
{
LEFT_SQUARE19=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix3344);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(LEFT_SQUARE19,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_in_identifierSuffix3374);
expression();
state._fsp--;
if (state.failed) return;
RIGHT_SQUARE20=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix3402);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(RIGHT_SQUARE20,DroolsEditorType.SYMBOL);
}
}
break;
default :
if (cnt64 >= 1) break loop64;
if (state.backtracking > 0) {
state.failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(64,input);
throw eee;
}
cnt64++;
}
}
break;
case 3:
{
pushFollow(FOLLOW_arguments_in_identifierSuffix3418);
arguments();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
