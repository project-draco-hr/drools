{
  BaseDescr result=null;
  BaseDescr ue=null;
  ParserRuleReturnScope left=null;
  try {
    int alt47=5;
switch (input.LA(1)) {
case PLUS:
{
        alt47=1;
      }
    break;
case MINUS:
{
    alt47=2;
  }
break;
case INCR:
{
alt47=3;
}
break;
case DECR:
{
alt47=4;
}
break;
case BOOL:
case DECIMAL:
case FLOAT:
case HEX:
case ID:
case LEFT_PAREN:
case LEFT_SQUARE:
case LESS:
case NEGATION:
case NULL:
case STAR:
case STRING:
case TILDE:
case TIME_INTERVAL:
{
alt47=5;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return result;
}
NoViableAltException nvae=new NoViableAltException("",47,0,input);
throw nvae;
}
switch (alt47) {
case 1:
{
match(input,PLUS,FOLLOW_PLUS_in_unaryExpression2237);
if (state.failed) return result;
pushFollow(FOLLOW_unaryExpression_in_unaryExpression2241);
ue=unaryExpression();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
if (buildDescr) {
result=ue;
if (result instanceof AtomicExprDescr) {
((AtomicExprDescr)result).setExpression("+" + ((AtomicExprDescr)result).getExpression());
}
}
}
}
break;
case 2:
{
match(input,MINUS,FOLLOW_MINUS_in_unaryExpression2259);
if (state.failed) return result;
pushFollow(FOLLOW_unaryExpression_in_unaryExpression2263);
ue=unaryExpression();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
if (buildDescr) {
result=ue;
if (result instanceof AtomicExprDescr) {
((AtomicExprDescr)result).setExpression("-" + ((AtomicExprDescr)result).getExpression());
}
}
}
}
break;
case 3:
{
match(input,INCR,FOLLOW_INCR_in_unaryExpression2283);
if (state.failed) return result;
pushFollow(FOLLOW_primary_in_unaryExpression2285);
primary();
state._fsp--;
if (state.failed) return result;
}
break;
case 4:
{
match(input,DECR,FOLLOW_DECR_in_unaryExpression2295);
if (state.failed) return result;
pushFollow(FOLLOW_primary_in_unaryExpression2297);
primary();
state._fsp--;
if (state.failed) return result;
}
break;
case 5:
{
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression2309);
left=unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
if (buildDescr) {
result=(left != null ? ((DRL5Expressions.unaryExpressionNotPlusMinus_return)left).result : null);
}
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
