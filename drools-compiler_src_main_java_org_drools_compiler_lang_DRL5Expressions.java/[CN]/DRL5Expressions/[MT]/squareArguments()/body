{
  java.util.List<String> args=null;
  java.util.List<String> el=null;
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_squareArguments4041);
      if (state.failed)       return args;
      int alt86=2;
      int LA86_0=input.LA(1);
      if ((LA86_0 == BOOL || (LA86_0 >= DECIMAL && LA86_0 <= DECR) || LA86_0 == FLOAT || LA86_0 == HEX || (LA86_0 >= ID && LA86_0 <= INCR) || (LA86_0 >= LEFT_PAREN && LA86_0 <= LESS) || LA86_0 == MINUS || LA86_0 == NEGATION || LA86_0 == NULL || LA86_0 == PLUS || (LA86_0 >= STAR && LA86_0 <= TIME_INTERVAL))) {
        alt86=1;
      }
switch (alt86) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_squareArguments4046);
          el=expressionList();
          state._fsp--;
          if (state.failed)           return args;
          if (state.backtracking == 0) {
            args=el;
          }
        }
      break;
  }
  match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_squareArguments4052);
  if (state.failed)   return args;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return args;
}
