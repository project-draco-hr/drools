{
  try {
    int alt87=12;
switch (input.LA(1)) {
case EQUALS_ASSIGN:
{
        alt87=1;
      }
    break;
case PLUS_ASSIGN:
{
    alt87=2;
  }
break;
case MINUS_ASSIGN:
{
alt87=3;
}
break;
case MULT_ASSIGN:
{
alt87=4;
}
break;
case DIV_ASSIGN:
{
alt87=5;
}
break;
case AND_ASSIGN:
{
alt87=6;
}
break;
case OR_ASSIGN:
{
alt87=7;
}
break;
case XOR_ASSIGN:
{
alt87=8;
}
break;
case MOD_ASSIGN:
{
alt87=9;
}
break;
case LESS:
{
alt87=10;
}
break;
case GREATER:
{
int LA87_11=input.LA(2);
if ((LA87_11 == GREATER)) {
int LA87_12=input.LA(3);
if ((LA87_12 == GREATER) && (synpred42_DRL5Expressions())) {
alt87=11;
}
 else if ((LA87_12 == EQUALS_ASSIGN) && (synpred43_DRL5Expressions())) {
alt87=12;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException("",87,11,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",87,0,input);
throw nvae;
}
switch (alt87) {
case 1:
{
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4126);
if (state.failed) return;
}
break;
case 2:
{
match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator4134);
if (state.failed) return;
}
break;
case 3:
{
match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator4142);
if (state.failed) return;
}
break;
case 4:
{
match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator4150);
if (state.failed) return;
}
break;
case 5:
{
match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator4158);
if (state.failed) return;
}
break;
case 6:
{
match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator4166);
if (state.failed) return;
}
break;
case 7:
{
match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator4174);
if (state.failed) return;
}
break;
case 8:
{
match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator4182);
if (state.failed) return;
}
break;
case 9:
{
match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator4190);
if (state.failed) return;
}
break;
case 10:
{
match(input,LESS,FOLLOW_LESS_in_assignmentOperator4198);
if (state.failed) return;
match(input,LESS,FOLLOW_LESS_in_assignmentOperator4200);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4202);
if (state.failed) return;
}
break;
case 11:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4219);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4221);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4223);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4225);
if (state.failed) return;
}
break;
case 12:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4240);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4242);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4244);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
