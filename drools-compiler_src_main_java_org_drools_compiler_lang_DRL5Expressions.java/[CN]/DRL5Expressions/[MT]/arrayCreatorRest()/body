{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest3519);
      if (state.failed)       return;
      int alt73=2;
      int LA73_0=input.LA(1);
      if ((LA73_0 == RIGHT_SQUARE)) {
        alt73=1;
      }
 else       if ((LA73_0 == FLOAT || (LA73_0 >= HEX && LA73_0 <= DECIMAL) || (LA73_0 >= STRING && LA73_0 <= TIME_INTERVAL) || (LA73_0 >= BOOL && LA73_0 <= NULL) || (LA73_0 >= DECR && LA73_0 <= INCR) || LA73_0 == LESS || LA73_0 == LEFT_PAREN || LA73_0 == LEFT_SQUARE || (LA73_0 >= NEGATION && LA73_0 <= TILDE) || (LA73_0 >= STAR && LA73_0 <= PLUS) || LA73_0 == ID)) {
        alt73=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",73,0,input);
        throw nvae;
      }
switch (alt73) {
case 1:
{
          match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest3529);
          if (state.failed)           return;
          loop70:           do {
            int alt70=2;
            int LA70_0=input.LA(1);
            if ((LA70_0 == LEFT_SQUARE)) {
              alt70=1;
            }
switch (alt70) {
case 1:
{
                match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest3532);
                if (state.failed)                 return;
                match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest3534);
                if (state.failed)                 return;
              }
            break;
default :
          break loop70;
      }
    }
 while (true);
    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest3538);
    arrayInitializer();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 2:
{
pushFollow(FOLLOW_expression_in_arrayCreatorRest3552);
expression();
state._fsp--;
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest3554);
if (state.failed) return;
loop71: do {
  int alt71=2;
  alt71=dfa71.predict(input);
switch (alt71) {
case 1:
{
      if (!((!helper.validateLT(2,"]")))) {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        throw new FailedPredicateException(input,"arrayCreatorRest","!helper.validateLT(2,\"]\")");
      }
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest3559);
      if (state.failed)       return;
      pushFollow(FOLLOW_expression_in_arrayCreatorRest3561);
      expression();
      state._fsp--;
      if (state.failed)       return;
      match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest3563);
      if (state.failed)       return;
    }
  break;
default :
break loop71;
}
}
 while (true);
loop72: do {
int alt72=2;
int LA72_0=input.LA(1);
if ((LA72_0 == LEFT_SQUARE)) {
int LA72_2=input.LA(2);
if ((LA72_2 == RIGHT_SQUARE) && (synpred35_DRL5Expressions())) {
alt72=1;
}
}
switch (alt72) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest3575);
if (state.failed) return;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest3577);
if (state.failed) return;
}
break;
default :
break loop72;
}
}
 while (true);
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
