{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer3637);
      if (state.failed)       return;
      int alt77=2;
      int LA77_0=input.LA(1);
      if ((LA77_0 == BOOL || (LA77_0 >= DECIMAL && LA77_0 <= DECR) || LA77_0 == FLOAT || LA77_0 == HEX || (LA77_0 >= ID && LA77_0 <= INCR) || (LA77_0 >= LEFT_CURLY && LA77_0 <= LESS) || LA77_0 == MINUS || LA77_0 == NEGATION || LA77_0 == NULL || LA77_0 == PLUS || (LA77_0 >= STAR && LA77_0 <= TIME_INTERVAL))) {
        alt77=1;
      }
switch (alt77) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3640);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop75:           while (true) {
            int alt75=2;
            int LA75_0=input.LA(1);
            if ((LA75_0 == COMMA)) {
              int LA75_1=input.LA(2);
              if ((LA75_1 == BOOL || (LA75_1 >= DECIMAL && LA75_1 <= DECR) || LA75_1 == FLOAT || LA75_1 == HEX || (LA75_1 >= ID && LA75_1 <= INCR) || (LA75_1 >= LEFT_CURLY && LA75_1 <= LESS) || LA75_1 == MINUS || LA75_1 == NEGATION || LA75_1 == NULL || LA75_1 == PLUS || (LA75_1 >= STAR && LA75_1 <= TIME_INTERVAL))) {
                alt75=1;
              }
            }
switch (alt75) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3643);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3645);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop75;
      }
    }
    int alt76=2;
    int LA76_0=input.LA(1);
    if ((LA76_0 == COMMA)) {
      alt76=1;
    }
switch (alt76) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3650);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer3657);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
