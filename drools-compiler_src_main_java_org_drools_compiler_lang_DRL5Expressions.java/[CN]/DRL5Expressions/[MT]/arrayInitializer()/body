{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer3669);
      if (state.failed)       return;
      int alt79=2;
      int LA79_0=input.LA(1);
      if ((LA79_0 == BOOL || (LA79_0 >= DECIMAL && LA79_0 <= DECR) || LA79_0 == FLOAT || LA79_0 == HEX || (LA79_0 >= ID && LA79_0 <= INCR) || (LA79_0 >= LEFT_CURLY && LA79_0 <= LESS) || LA79_0 == MINUS || LA79_0 == NEGATION || LA79_0 == NULL || LA79_0 == PLUS || (LA79_0 >= STAR && LA79_0 <= TIME_INTERVAL))) {
        alt79=1;
      }
switch (alt79) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3672);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop77:           while (true) {
            int alt77=2;
            int LA77_0=input.LA(1);
            if ((LA77_0 == COMMA)) {
              int LA77_1=input.LA(2);
              if ((LA77_1 == BOOL || (LA77_1 >= DECIMAL && LA77_1 <= DECR) || LA77_1 == FLOAT || LA77_1 == HEX || (LA77_1 >= ID && LA77_1 <= INCR) || (LA77_1 >= LEFT_CURLY && LA77_1 <= LESS) || LA77_1 == MINUS || LA77_1 == NEGATION || LA77_1 == NULL || LA77_1 == PLUS || (LA77_1 >= STAR && LA77_1 <= TIME_INTERVAL))) {
                alt77=1;
              }
            }
switch (alt77) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3675);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3677);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop77;
      }
    }
    int alt78=2;
    int LA78_0=input.LA(1);
    if ((LA78_0 == COMMA)) {
      alt78=1;
    }
switch (alt78) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3682);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer3689);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
