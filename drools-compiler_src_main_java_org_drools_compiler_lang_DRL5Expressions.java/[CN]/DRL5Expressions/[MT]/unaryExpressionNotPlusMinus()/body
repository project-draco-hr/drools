{
  DRL5Expressions.unaryExpressionNotPlusMinus_return retval=new DRL5Expressions.unaryExpressionNotPlusMinus_return();
  retval.start=input.LT(1);
  Token var=null;
  Token COLON9=null;
  Token UNIFY10=null;
  BaseDescr left=null;
  boolean isLeft=false;
  BindingDescr bind=null;
  try {
    int alt53=4;
switch (input.LA(1)) {
case TILDE:
{
        alt53=1;
      }
    break;
case NEGATION:
{
    alt53=2;
  }
break;
case LEFT_PAREN:
{
int LA53_3=input.LA(2);
if ((synpred14_DRL5Expressions())) {
  alt53=3;
}
 else if ((true)) {
  alt53=4;
}
}
break;
case BOOL:
case DECIMAL:
case FLOAT:
case HEX:
case ID:
case LEFT_SQUARE:
case LESS:
case NULL:
case STAR:
case STRING:
case TIME_INTERVAL:
{
alt53=4;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",53,0,input);
throw nvae;
}
switch (alt53) {
case 1:
{
match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus2371);
if (state.failed) return retval;
pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2373);
unaryExpression();
state._fsp--;
if (state.failed) return retval;
}
break;
case 2:
{
match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus2382);
if (state.failed) return retval;
pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2384);
unaryExpression();
state._fsp--;
if (state.failed) return retval;
}
break;
case 3:
{
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus2398);
castExpression();
state._fsp--;
if (state.failed) return retval;
}
break;
case 4:
{
if (state.backtracking == 0) {
isLeft=helper.getLeftMostExpr() == null;
}
int alt50=3;
int LA50_0=input.LA(1);
if ((LA50_0 == ID)) {
int LA50_1=input.LA(2);
if ((LA50_1 == COLON)) {
int LA50_3=input.LA(3);
if (((inMap == 0 && ternOp == 0 && input.LA(2) == DRL5Lexer.COLON))) {
alt50=1;
}
}
 else if ((LA50_1 == UNIFY)) {
alt50=2;
}
}
switch (alt50) {
case 1:
{
{
if (!((inMap == 0 && ternOp == 0 && input.LA(2) == DRL5Lexer.COLON))) {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
throw new FailedPredicateException(input,"unaryExpressionNotPlusMinus","inMap == 0 && ternOp == 0 && input.LA(2) == DRL5Lexer.COLON");
}
{
var=(Token)match(input,ID,FOLLOW_ID_in_unaryExpressionNotPlusMinus2426);
if (state.failed) return retval;
COLON9=(Token)match(input,COLON,FOLLOW_COLON_in_unaryExpressionNotPlusMinus2428);
if (state.failed) return retval;
if (state.backtracking == 0) {
hasBindings=true;
helper.emit(var,DroolsEditorType.IDENTIFIER_VARIABLE);
helper.emit(COLON9,DroolsEditorType.SYMBOL);
if (buildDescr) {
bind=new BindingDescr((var != null ? var.getText() : null),null,false);
helper.setStart(bind,var);
}
}
}
}
}
break;
case 2:
{
{
if (!((inMap == 0 && ternOp == 0 && input.LA(2) == DRL5Lexer.UNIFY))) {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
throw new FailedPredicateException(input,"unaryExpressionNotPlusMinus","inMap == 0 && ternOp == 0 && input.LA(2) == DRL5Lexer.UNIFY");
}
{
var=(Token)match(input,ID,FOLLOW_ID_in_unaryExpressionNotPlusMinus2467);
if (state.failed) return retval;
UNIFY10=(Token)match(input,UNIFY,FOLLOW_UNIFY_in_unaryExpressionNotPlusMinus2469);
if (state.failed) return retval;
if (state.backtracking == 0) {
hasBindings=true;
helper.emit(var,DroolsEditorType.IDENTIFIER_VARIABLE);
helper.emit(UNIFY10,DroolsEditorType.SYMBOL);
if (buildDescr) {
bind=new BindingDescr((var != null ? var.getText() : null),null,true);
helper.setStart(bind,var);
}
}
}
}
}
break;
}
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus2514);
left=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) {
if (buildDescr) {
retval.result=left;
}
}
loop51: while (true) {
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == DOT) && (synpred15_DRL5Expressions())) {
alt51=1;
}
 else if ((LA51_0 == LEFT_SQUARE) && (synpred15_DRL5Expressions())) {
alt51=1;
}
switch (alt51) {
case 1:
{
pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus2531);
selector();
state._fsp--;
if (state.failed) return retval;
}
break;
default :
break loop51;
}
}
if (state.backtracking == 0) {
if (buildDescr) {
String expr=input.toString(retval.start,input.LT(-1));
if (isLeft) {
helper.setLeftMostExpr(expr);
}
if (bind != null) {
if (bind.isUnification()) {
expr=expr.substring(expr.indexOf(":=") + 2).trim();
}
 else {
expr=expr.substring(expr.indexOf(":") + 1).trim();
}
bind.setExpression(expr);
helper.setEnd(bind);
retval.result=bind;
}
}
}
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == DECR || LA52_0 == INCR) && (synpred16_DRL5Expressions())) {
alt52=1;
}
switch (alt52) {
case 1:
{
if (input.LA(1) == DECR || input.LA(1) == INCR) {
input.consume();
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
