{
  List<Rule> rulesToBeRemoved=new ArrayList<Rule>();
  for (  Rule rule : rules.values()) {
    if (resource.equals(rule.getResource())) {
      rulesToBeRemoved.add(rule);
    }
  }
  for (  Rule rule : rulesToBeRemoved) {
    removeRule(rule);
  }
  List<TypeDeclaration> typesToBeRemoved=new ArrayList<TypeDeclaration>();
  for (  TypeDeclaration type : typeDeclarations.values()) {
    if (resource.equals(type.getResource())) {
      typesToBeRemoved.add(type);
    }
  }
  if (!typesToBeRemoved.isEmpty()) {
    JavaDialectRuntimeData dialect=(JavaDialectRuntimeData)getDialectRuntimeRegistry().getDialectData("java");
    for (    TypeDeclaration type : typesToBeRemoved) {
      classFieldAccessorStore.removeType(type);
      dialect.remove(type.getTypeClassName());
      removeTypeDeclaration(type.getTypeName());
    }
    dialect.reload();
  }
  List<Function> functionsToBeRemoved=new ArrayList<Function>();
  for (  Function function : functions.values()) {
    if (resource.equals(function.getResource())) {
      functionsToBeRemoved.add(function);
    }
  }
  for (  Function function : functionsToBeRemoved) {
    removeFunction(function.getName());
  }
  return !rulesToBeRemoved.isEmpty() || !typesToBeRemoved.isEmpty() || !functionsToBeRemoved.isEmpty();
}
