{
  Reader source=new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<process xmlns=\"http://drools.org/drools-5.0/process\"\n" + "         xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\"\n"+ "         xs:schemaLocation=\"http://drools.org/drools-5.0/process drools-processes-5.0.xsd\"\n"+ "         type=\"RuleFlow\" name=\"ruleflow\" id=\"org.drools.dynamic\" package-name=\"org.drools\" >\n"+ "\n"+ "  <header>\n"+ "  </header>\n"+ "\n"+ "  <nodes>\n"+ "    <start id=\"1\" name=\"Start\" />\n"+ "    <dynamic id=\"2\" name=\"DynamicNode\" >\n"+ "      <nodes>\n"+ "        <actionNode id=\"1\" name=\"Action\" >\n"+ "          <action type=\"expression\" dialect=\"mvel\" >System.out.println(\"Action\");</action>\n"+ "        </actionNode>\n"+ "      </nodes>\n"+ "      <connections>\n"+ "      </connections>\n"+ "      <in-ports/>\n"+ "      <out-ports/>\n"+ "    </dynamic>\n"+ "    <end id=\"3\" name=\"End\" />\n"+ "  </nodes>\n"+ "\n"+ "  <connections>\n"+ "    <connection from=\"1\" to=\"2\" />\n"+ "    <connection from=\"2\" to=\"3\" />\n"+ "  </connections>\n"+ "</process>");
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newReaderResource(source),ResourceType.DRF);
  KnowledgeBase kbase=kbuilder.newKnowledgeBase();
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  KnowledgeRuntimeLogger logger=KnowledgeRuntimeLoggerFactory.newFileLogger(ksession,"test");
  TestWorkItemHandler handler=new TestWorkItemHandler();
  ksession.getWorkItemManager().registerWorkItemHandler("Human Task",handler);
  ProcessInstance processInstance=(ProcessInstance)ksession.startProcess("org.drools.dynamic");
  DynamicNodeInstance dynamicContext=(DynamicNodeInstance)((WorkflowProcessInstance)processInstance).getNodeInstances().iterator().next();
  Map<String,Object> parameters=new HashMap<String,Object>();
  parameters.put("TaskName","Dynamic Task");
  assertNull(handler.getWorkItem());
  assertEquals(0,dynamicContext.getNodeInstances().size());
  DynamicUtils.addDynamicWorkItem(dynamicContext,ksession,"Human Task",parameters);
  assertNotNull(handler.getWorkItem());
  assertEquals(1,dynamicContext.getNodeInstances().size());
  logger.close();
}
