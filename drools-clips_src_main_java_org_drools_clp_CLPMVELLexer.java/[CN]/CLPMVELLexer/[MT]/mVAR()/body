{
  try {
    int _type=VAR;
{
      match('?');
      if (failed)       return;
      int cnt14=0;
      loop14:       do {
        int alt14=2;
        int LA14_0=input.LA(1);
        if (((LA14_0 >= '\u0000' && LA14_0 <= '\b') || (LA14_0 >= '\u000B' && LA14_0 <= '\f') || (LA14_0 >= '\u000E' && LA14_0 <= '\u001F')|| LA14_0 == '!' || (LA14_0 >= '#' && LA14_0 <= '%') || LA14_0 == '\'' || (LA14_0 >= '*' && LA14_0 <= ':') || (LA14_0 >= '=' && LA14_0 <= '{') || LA14_0 == '}' || (LA14_0 >= '\u007F' && LA14_0 <= '\uFFFE'))) {
          alt14=1;
        }
switch (alt14) {
case 1:
{
            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '#') || (input.LA(1) >= '%' && input.LA(1) <= '\uFFFE')) {
              input.consume();
              failed=false;
            }
 else {
              if (backtracking > 0) {
                failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        break;
default :
      if (cnt14 >= 1)       break loop14;
    if (backtracking > 0) {
      failed=true;
      return;
    }
  EarlyExitException eee=new EarlyExitException(14,input);
throw eee;
}
cnt14++;
}
 while (true);
}
this.type=_type;
}
  finally {
}
}
