{
  org.drools.definition.rule.Rule newRule=newPkg.getRule(oldRule.getName());
  if (newRule == null) {
    listener.debug("BinaryResourceDiffProducerImpl: " + oldRule + " is not present anymore. Adding to removed list.");
    this.removedDefinitions.add(oldRule);
    return;
  }
  if (currentPkg.getRule(oldRule.getName()) == null) {
    listener.debug("BinaryResourceDiffProducerImpl: " + oldRule + " is not present on current PKG. Removing from new package.");
    newPkg.removeRule(oldRule);
    return;
  }
  if (!(newRule instanceof org.drools.rule.Rule)) {
    listener.warning("BinaryResourceDiffProducerImpl: Rules must be subclasses of org.drools.rule.Rule.");
    return;
  }
  if (newRule instanceof Query) {
    listener.debug("BinaryResourceDiffProducerImpl: Query diff is not supported yet.");
    return;
  }
  if (this.compareRules((Rule)newRule,oldRule)) {
    listener.debug("BinaryResourceDiffProducerImpl: " + oldRule + " didn't change. Removing from diff package and adding it to unmodified list.");
    newPkg.removeRule((org.drools.rule.Rule)newRule);
    this.unmodifiedDefinitions.add(oldRule);
  }
}
