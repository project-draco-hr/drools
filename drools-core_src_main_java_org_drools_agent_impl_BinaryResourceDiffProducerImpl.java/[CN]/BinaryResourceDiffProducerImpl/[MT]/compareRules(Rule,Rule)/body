{
  listener.debug("BinaryResourceDiffProducerImpl: Comparing " + r1 + " against "+ r2);
  String v1=r1.getSalience() == null ? "" : r1.getSalience().toString();
  String v2=r2.getSalience() == null ? "" : r2.getSalience().toString();
  if (!v1.equals(v2)) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different saliences: r1= " + v1 + ", r2= "+ v2);
    return false;
  }
  v1=r1.getActivationGroup() == null ? "" : r1.getActivationGroup();
  v2=r2.getActivationGroup() == null ? "" : r2.getActivationGroup();
  if (!v1.equals(v2)) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different activation groups: r1= " + v1 + ", r2= "+ v2);
    return false;
  }
  if (r1.isNoLoop() != r2.isNoLoop()) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different values for no-loop attribure: r1= " + r1.isNoLoop() + ", r2= "+ r2.isNoLoop());
    return false;
  }
  if (r1.isLockOnActive() != r2.isLockOnActive()) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different values for lock-on-active attribure: r1= " + r1.isLockOnActive() + ", r2= "+ r2.isLockOnActive());
    return false;
  }
  v1=r1.getAgendaGroup() == null ? "" : r1.getAgendaGroup();
  v2=r2.getAgendaGroup() == null ? "" : r2.getAgendaGroup();
  if (!v1.equals(v2)) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different agenda groups: r1= " + v1 + ", r2= "+ v2);
    return false;
  }
  if (r1.getAutoFocus() != r2.getAutoFocus()) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different values for auto-focus attribure: r1= " + r1.getAutoFocus() + ", r2= "+ r2.getAutoFocus());
    return false;
  }
  v1=r1.getRuleFlowGroup() == null ? "" : r1.getRuleFlowGroup();
  v2=r2.getRuleFlowGroup() == null ? "" : r2.getRuleFlowGroup();
  if (!v1.equals(v2)) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different ruleflow-group attribute: r1= " + v1 + ", r2= "+ v2);
    return false;
  }
  v1=r1.getDialect() == null ? "" : r1.getDialect();
  v2=r2.getDialect() == null ? "" : r2.getDialect();
  if (!v1.equals(v2)) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different dialect attribute: r1= " + v1 + ", r2= "+ v2);
    return false;
  }
  Calendar c1=r1.getDateEffective() == null ? now : r1.getDateEffective();
  Calendar c2=r2.getDateEffective() == null ? now : r2.getDateEffective();
  if (!c1.equals(c2)) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different date-effective attribute: r1= " + c1 + ", r2= "+ c2);
    return false;
  }
  c1=r1.getDateExpires() == null ? now : r1.getDateExpires();
  c2=r2.getDateExpires() == null ? now : r2.getDateExpires();
  if (!c1.equals(c2)) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different date-expires attribute: r1= " + c1 + ", r2= "+ c2);
    return false;
  }
  if (!r1.getLhs().equals(r2.getLhs())) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different LHS");
    return false;
  }
  Consequence consequence1=r1.getConsequence() == null ? dummyConsequence : r1.getConsequence();
  Consequence consequence2=r2.getConsequence() == null ? dummyConsequence : r2.getConsequence();
  if (!consequence1.equals(consequence2)) {
    listener.debug("BinaryResourceDiffProducerImpl: The rules have different Consequences: r1= " + consequence1 + ", r2= "+ consequence2);
    return false;
  }
  return true;
}
