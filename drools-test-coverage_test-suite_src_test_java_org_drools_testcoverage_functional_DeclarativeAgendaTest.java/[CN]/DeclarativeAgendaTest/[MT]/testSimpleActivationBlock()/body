{
  final KieBase kbase=buildKieBase("declarative-agenda-simple-block.drl");
  final KieSession ksession=kbase.newKieSession();
  OrderListener listener=new OrderListener();
  ksession.addEventListener(listener);
  final FactHandle fireRules=ksession.insert("fireRules");
  final FactHandle fireBlockerRule=ksession.insert("fireBlockerRule");
  ksession.fireAllRules();
  Assertions.assertThat(listener.size()).isEqualTo(2);
  final String[] expected={"blocker","sales2"};
  for (int i=0; i < listener.size(); i++) {
    Assertions.assertThat(listener.get(i)).isEqualTo(expected[i]);
  }
  ksession.removeEventListener(listener);
  listener=new OrderListener();
  ksession.addEventListener(listener);
  ksession.fireAllRules();
  Assertions.assertThat(listener.size()).isEqualTo(0);
  ksession.removeEventListener(listener);
  listener=new OrderListener();
  ksession.addEventListener(listener);
  ksession.delete(fireBlockerRule);
  ksession.fireAllRules();
  Assertions.assertThat(listener.size()).isEqualTo(1);
  final String[] expected3={"sales1"};
  for (int i=0; i < listener.size(); i++) {
    Assertions.assertThat(listener.get(i)).isEqualTo(expected3[i]);
  }
  ksession.removeEventListener(listener);
  listener=new OrderListener();
  ksession.addEventListener(listener);
  ksession.fireAllRules();
  Assertions.assertThat(listener.size()).isEqualTo(0);
  ksession.removeEventListener(listener);
  listener=new OrderListener();
  ksession.addEventListener(listener);
  ksession.update(fireRules,"fireRules");
  ksession.fireAllRules();
  Assertions.assertThat(listener.size()).isEqualTo(2);
  final String[] expected5={"sales1","sales2"};
  for (int i=0; i < listener.size(); i++) {
    Assertions.assertThat(listener.get(i)).isEqualTo(expected5[i]);
  }
  ksession.dispose();
}
