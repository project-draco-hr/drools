{
  if (rulesRepositoryConfigurator == null) {
    log.info("Creating an instance of the RulesRepositoryConfigurator.");
    rulesRepositoryConfigurator=new RulesRepositoryConfigurator();
    if (properties == null)     properties=new Properties();
    Properties fileProperties=new Properties();
    InputStream propStream=ClassUtil.getResourceAsStream(PROPERTIES_FILE,rulesRepositoryConfigurator.getClass());
    if (propStream != null) {
      try {
        fileProperties.load(propStream);
        for (        Object key : fileProperties.keySet()) {
          if (!properties.containsKey(key)) {
            properties.put(key,fileProperties.get(key));
          }
        }
      }
 catch (      IOException ioe) {
        throw new RepositoryException(ioe);
      }
 finally {
        try {
          propStream.close();
        }
 catch (        IOException ioe) {
          throw new RepositoryException(ioe);
        }
      }
    }
 else {
      throw new RepositoryException("Cannot load properties from " + PROPERTIES_FILE);
    }
    try {
      String configuratorClazz=properties.getProperty(CONFIGURATOR_CLASS);
      if (configuratorClazz == null)       throw new RepositoryException("User must define a '" + CONFIGURATOR_CLASS + "' property.");
      Class clazz=ClassUtil.forName(configuratorClazz,rulesRepositoryConfigurator.getClass());
      jcrRepositoryConfigurator=(JCRRepositoryConfigurator)clazz.newInstance();
      jcrRepository=jcrRepositoryConfigurator.getJCRRepository(properties);
    }
 catch (    Exception ex) {
      throw new RepositoryException(ex);
    }
  }
  return rulesRepositoryConfigurator;
}
