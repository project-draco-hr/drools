{
  for (LeftTuple leftTuple=srcLeftTuples.getUpdateFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    InternalFactHandle fh=(InternalFactHandle)leftTuple.getContextObject();
    DroolsQuery dquery=(DroolsQuery)fh.getObject();
    dquery.setParameters(queryNode.getActualArguments(leftTuple,wm));
    SegmentMemory qsmem=qmem.getQuerySegmentMemory();
    LeftInputAdapterNode lian=(LeftInputAdapterNode)qsmem.getRootNode();
    LiaNodeMemory lmem=(LiaNodeMemory)qsmem.getNodeMemories().getFirst();
    if (dquery.isOpen()) {
      LeftTuple childLeftTuple=fh.getFirstLeftTuple();
      LeftInputAdapterNode.doUpdateObject(childLeftTuple,childLeftTuple.getPropagationContext(),wm,lian,false,lmem,qmem.getQuerySegmentMemory());
    }
 else {
      if (fh.getFirstLeftTuple() != null) {
        throw new RuntimeException("defensive programming while testing");
      }
      LiaNodeMemory lm=(LiaNodeMemory)qmem.getQuerySegmentMemory().getNodeMemories().get(0);
      LeftInputAdapterNode.doInsertObject(fh,leftTuple.getPropagationContext(),lian,wm,lm,false,dquery.isOpen());
    }
    leftTuple.clearStaged();
    leftTuple=next;
  }
}
