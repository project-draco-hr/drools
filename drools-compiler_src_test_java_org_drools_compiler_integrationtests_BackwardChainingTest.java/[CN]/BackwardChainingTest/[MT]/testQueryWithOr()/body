{
  String str="" + "package org.drools.compiler.test  \n" + "import java.util.List\n"+ "import java.util.ArrayList\n"+ "global List list\n"+ "dialect \"mvel\"\n"+ "\n"+ "import " + BackwardChainingTest.class.getName() + ".Q\n"+ "import "+ BackwardChainingTest.class.getName()+ ".R\n"+ "import "+ BackwardChainingTest.class.getName()+ ".S\n"+ "\n"+ "query q(int x)\n"+ "    Q( x := value )\n"+ "end\n"+ "\n"+ "query r(int x)\n"+ "    R( x := value )\n"+ "end\n"+ "\n"+ "query s(int x)\n"+ "    S( x := value )    \n"+ "end\n"+ "\n"+ "query p(int x)\n"+ "    (?q(x;) and ?r(x;) ) \n"+ "    or\n"+ "    ?s(x;)\n"+ "end\n"+ "rule init when\n"+ "then\n"+ " insert( new Q(1) );\n "+ " insert( new Q(5) );\n "+ " insert( new Q(6) );\n "+ " insert( new R(1) );\n "+ " insert( new R(4) );\n "+ " insert( new R(6) );\n "+ " insert( new R(2) );\n "+ " insert( new S(2) );\n "+ " insert( new S(3) );\n "+ " insert( new S(6) );\n "+ "end\n"+ "";
  KnowledgeBase kbase=SerializationHelper.serializeObject(loadKnowledgeBaseFromString(str));
  StatefulKnowledgeSession ksession=createKnowledgeSession(kbase);
  List<Integer> list=new ArrayList<Integer>();
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  QueryResults results=null;
  list.clear();
  results=ksession.getQueryResults("p",new Integer[]{0});
  for (  QueryResultsRow result : results) {
    list.add((Integer)result.get("x"));
  }
  assertEquals(0,list.size());
  list.clear();
  results=ksession.getQueryResults("p",new Integer[]{1});
  for (  QueryResultsRow result : results) {
    list.add((Integer)result.get("x"));
  }
  assertEquals(1,list.size());
  assertEquals(1,list.get(0).intValue());
  list.clear();
  results=ksession.getQueryResults("p",new Integer[]{2});
  for (  QueryResultsRow result : results) {
    list.add((Integer)result.get("x"));
  }
  assertEquals(1,list.size());
  assertEquals(2,list.get(0).intValue());
  list.clear();
  results=ksession.getQueryResults("p",new Integer[]{3});
  for (  QueryResultsRow result : results) {
    list.add((Integer)result.get("x"));
  }
  assertEquals(1,list.size());
  assertEquals(3,list.get(0).intValue());
  list.clear();
  results=ksession.getQueryResults("p",new Integer[]{4});
  for (  QueryResultsRow result : results) {
    list.add((Integer)result.get("x"));
  }
  assertEquals(0,list.size());
  list.clear();
  results=ksession.getQueryResults("p",new Integer[]{5});
  for (  QueryResultsRow result : results) {
    list.add((Integer)result.get("x"));
  }
  assertEquals(0,list.size());
  list.clear();
  results=ksession.getQueryResults("p",new Integer[]{6});
  for (  QueryResultsRow result : results) {
    list.add((Integer)result.get("x"));
  }
  assertEquals(2,list.size());
  assertEquals(6,list.get(0).intValue());
  assertEquals(6,list.get(1).intValue());
}
