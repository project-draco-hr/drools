{
  if (this.active == active) {
    return;
  }
  this.active=active;
synchronized (list) {
    if (active) {
      setActivatedForRecency(this.workingMemory.getFactHandleFactory().getRecency());
      ((EventSupport)this.workingMemory).getAgendaEventSupport().fireBeforeRuleFlowGroupActivated(this,this.workingMemory);
      if (this.list.isEmpty()) {
        if (this.autoDeactivate) {
          WorkingMemoryAction action=new DeactivateCallback(this);
          this.workingMemory.queueWorkingMemoryAction(action);
        }
      }
 else {
        triggerActivations();
      }
      ((EventSupport)this.workingMemory).getAgendaEventSupport().fireAfterRuleFlowGroupActivated(this,this.workingMemory);
    }
 else {
      ((EventSupport)this.workingMemory).getAgendaEventSupport().fireBeforeRuleFlowGroupDeactivated(this,this.workingMemory);
      FastIterator it=list.fastIterator();
      for (ActivationNode entry=list.getFirst(); entry != null; entry=(ActivationNode)it.next(entry)) {
        final Activation activation=entry.getActivation();
        activation.remove();
        if (activation.getActivationGroupNode() != null) {
          activation.getActivationGroupNode().getActivationGroup().removeActivation(activation);
        }
      }
      nodeInstances.clear();
      notifyRuleFlowGroupListeners();
      ((EventSupport)this.workingMemory).getAgendaEventSupport().fireAfterRuleFlowGroupDeactivated(this,this.workingMemory);
    }
  }
}
