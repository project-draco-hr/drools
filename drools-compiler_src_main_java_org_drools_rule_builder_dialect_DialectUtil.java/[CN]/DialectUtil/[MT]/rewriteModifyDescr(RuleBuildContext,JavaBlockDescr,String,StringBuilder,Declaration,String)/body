{
  List<String> settableProperties=null;
  Class<?> typeClass=findModifiedClass(context,d,declr);
  TypeDeclaration typeDeclaration=typeClass == null ? null : context.getPackageBuilder().getTypeDeclaration(typeClass);
  boolean isPropertyReactive=typeDeclaration != null && typeDeclaration.isPropertyReactive();
  if (isPropertyReactive) {
    typeDeclaration.setTypeClass(typeClass);
    settableProperties=typeDeclaration.getSettableProperties();
  }
  ConsequenceMetaData.Statement statement=null;
  if (typeDeclaration != null) {
    statement=new ConsequenceMetaData.Statement(ConsequenceMetaData.Statement.Type.MODIFY,typeClass);
    context.getRule().getConsequenceMetaData().addStatement(statement);
  }
  long modificationMask=isPropertyReactive ? 0 : Long.MAX_VALUE;
  int end=originalBlock.indexOf("{");
  if (end == -1) {
    context.addError(new DescrBuildError(context.getParentDescr(),context.getRuleDescr(),null,"Block missing after modify" + d.getTargetExpression() + " ?\n"));
    return;
  }
  addLineBreaks(consequence,originalBlock.substring(0,end));
  int start=end + 1;
  for (  String exprStr : ((JavaModifyBlockDescr)d).getExpressions()) {
    end=originalBlock.indexOf(exprStr,start);
    addLineBreaks(consequence,originalBlock.substring(start,end));
    consequence.append(obj + ".");
    consequence.append(exprStr);
    consequence.append("; ");
    start=end + exprStr.length();
    if (typeDeclaration != null) {
      modificationMask=parseModifiedProperties(statement,settableProperties,typeDeclaration,isPropertyReactive,modificationMask,exprStr);
    }
  }
  addLineBreaks(consequence,originalBlock.substring(end));
  boolean isInternalFact=declr != null && !declr.isInternalFact();
  consequence.append("drools.update( ").append(obj).append(isInternalFact ? "__Handle__, " : "__Handle2__, ").append(modificationMask).append("L ); }");
}
