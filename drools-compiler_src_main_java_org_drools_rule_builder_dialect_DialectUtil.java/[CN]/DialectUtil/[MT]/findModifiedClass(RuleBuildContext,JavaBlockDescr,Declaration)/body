{
  if (declr != null) {
    return ((ClassObjectType)declr.getPattern().getObjectType()).getClassType();
  }
  String targetId=d.getTargetExpression();
  if (targetId.charAt(0) == '(') {
    targetId=targetId.substring(1,targetId.length() - 1).trim();
  }
  List<JavaLocalDeclarationDescr> localDeclarationDescrs=d.getInScopeLocalVars();
  if (localDeclarationDescrs == null) {
    return null;
  }
  String className=null;
  for (  JavaLocalDeclarationDescr localDeclr : localDeclarationDescrs) {
    for (    IdentifierDescr idDescr : localDeclr.getIdentifiers()) {
      if (targetId.equals(idDescr.getIdentifier())) {
        className=localDeclr.getType();
        break;
      }
    }
    if (className != null) {
      break;
    }
  }
  if (className == null) {
    return null;
  }
  String namespace=context.getRuleDescr().getNamespace();
  PackageBuilder packageBuilder=context.getPackageBuilder();
  Class<?> clazz=null;
  try {
    clazz=Class.forName(namespace + "." + className,false,packageBuilder.getRootClassLoader());
  }
 catch (  ClassNotFoundException e) {
  }
  if (clazz != null) {
    return clazz;
  }
  Set<String> imports=new HashSet<String>();
  List<PackageDescr> pkgDescrs=packageBuilder.getPackageDescrs(namespace);
  if (pkgDescrs == null) {
    return null;
  }
  for (  PackageDescr pkgDescr : pkgDescrs) {
    for (    ImportDescr importDescr : pkgDescr.getImports()) {
      imports.add(importDescr.getTarget());
    }
  }
  return findClass(className,imports,packageBuilder.getRootClassLoader());
}
