{
  this.sinks=null;
  if (sink.getType() == NodeTypeEnums.AlphaNode) {
    final AlphaNode alphaNode=(AlphaNode)sink;
    final AlphaNodeFieldConstraint fieldConstraint=alphaNode.getConstraint();
    if (fieldConstraint instanceof IndexableConstraint) {
      final IndexableConstraint indexableConstraint=(IndexableConstraint)fieldConstraint;
      if (indexableConstraint.isIndexable(NodeTypeEnums.AlphaNode) && indexableConstraint.getField() != null && indexableConstraint.getFieldExtractor().getValueType() != ValueType.OBJECT_TYPE && !(indexableConstraint.getFieldExtractor() instanceof MVELObjectClassFieldReader)) {
        final InternalReadAccessor readAccessor=indexableConstraint.getFieldExtractor();
        final int index=readAccessor.getIndex();
        final FieldIndex fieldIndex=registerFieldIndex(index,readAccessor);
        if (fieldIndex.getCount() >= this.alphaNodeHashingThreshold && this.alphaNodeHashingThreshold != 0) {
          if (!fieldIndex.isHashed()) {
            hashSinks(fieldIndex);
          }
          final FieldValue value=indexableConstraint.getField();
          this.hashedSinkMap.put(new HashKey(index,value,fieldIndex.getFieldExtractor()),alphaNode,false);
        }
 else {
          if (this.hashableSinks == null) {
            this.hashableSinks=new ObjectSinkNodeList();
          }
          this.hashableSinks.add(alphaNode);
        }
        return;
      }
    }
  }
  if (this.otherSinks == null) {
    this.otherSinks=new ObjectSinkNodeList();
  }
  this.otherSinks.add((ObjectSinkNode)sink);
}
