{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Rules.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Rule that is always false"));
  VerifierReport result=VerifierReportFactory.newVerifierReport();
  Collection<Object> data=new ArrayList<Object>();
  session.setGlobal("result",result);
  VerifierRule rule1=new VerifierRule();
  SubPattern pp1=new SubPattern();
  SubPattern pp2=new SubPattern();
  Incompatibility i1=new Incompatibility(pp1,pp2);
  SubRule rp1=new SubRule();
  rp1.setRuleGuid(rule1.getGuid());
  rp1.add(pp1);
  rp1.add(pp2);
  SubPattern pp3=new SubPattern();
  SubPattern pp4=new SubPattern();
  Incompatibility i2=new Incompatibility(pp1,pp2);
  SubRule rp2=new SubRule();
  rp2.setRuleGuid(rule1.getGuid());
  rp2.add(pp1);
  rp2.add(pp2);
  VerifierRule rule2=new VerifierRule();
  SubPattern pp5=new SubPattern();
  SubPattern pp6=new SubPattern();
  SubRule rp3=new SubRule();
  rp3.setRuleGuid(rule2.getGuid());
  rp3.add(pp5);
  rp3.add(pp6);
  SubPattern pp7=new SubPattern();
  SubPattern pp8=new SubPattern();
  Incompatibility i4=new Incompatibility(pp7,pp8);
  SubRule rp4=new SubRule();
  rp4.setRuleGuid(rule2.getGuid());
  rp4.add(pp7);
  rp4.add(pp8);
  data.add(rule1);
  data.add(pp1);
  data.add(pp2);
  data.add(pp3);
  data.add(pp4);
  data.add(i1);
  data.add(i2);
  data.add(rp1);
  data.add(rp2);
  data.add(rule2);
  data.add(pp5);
  data.add(pp6);
  data.add(pp7);
  data.add(pp8);
  data.add(i4);
  data.add(rp3);
  data.add(rp4);
  session.executeWithResults(data);
  Iterator<VerifierMessageBase> iter=result.getBySeverity(Severity.ERROR).iterator();
  boolean works=false;
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof VerifierMessage) {
      VerifierMessage message=(VerifierMessage)o;
      if (message.getFaulty().equals(rule1)) {
        works=true;
      }
 else {
        fail("There can be only one. (And this is not the one)");
      }
    }
  }
  assertEquals(1,result.getBySeverity(Severity.ERROR).size());
  assertEquals(0,result.getBySeverity(Severity.WARNING).size());
  assertEquals(0,result.getBySeverity(Severity.NOTE).size());
  assertTrue(works);
}
