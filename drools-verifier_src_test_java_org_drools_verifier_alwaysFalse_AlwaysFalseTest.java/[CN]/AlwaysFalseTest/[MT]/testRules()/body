{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Rules.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Rule that is always false"));
  VerifierResult result=VerifierResultFactory.createVerifierResult();
  Collection<Object> data=new ArrayList<Object>();
  session.setGlobal("result",result);
  VerifierRule rule1=new VerifierRule();
  PatternPossibility pp1=new PatternPossibility();
  PatternPossibility pp2=new PatternPossibility();
  Incompatibility i1=new Incompatibility(pp1,pp2);
  RulePossibility rp1=new RulePossibility();
  rp1.setRuleId(rule1.getId());
  rp1.add(pp1);
  rp1.add(pp2);
  PatternPossibility pp3=new PatternPossibility();
  PatternPossibility pp4=new PatternPossibility();
  Incompatibility i2=new Incompatibility(pp1,pp2);
  RulePossibility rp2=new RulePossibility();
  rp2.setRuleId(rule1.getId());
  rp2.add(pp1);
  rp2.add(pp2);
  VerifierRule rule2=new VerifierRule();
  PatternPossibility pp5=new PatternPossibility();
  PatternPossibility pp6=new PatternPossibility();
  RulePossibility rp3=new RulePossibility();
  rp3.setRuleId(rule2.getId());
  rp3.add(pp5);
  rp3.add(pp6);
  PatternPossibility pp7=new PatternPossibility();
  PatternPossibility pp8=new PatternPossibility();
  Incompatibility i4=new Incompatibility(pp7,pp8);
  RulePossibility rp4=new RulePossibility();
  rp4.setRuleId(rule2.getId());
  rp4.add(pp7);
  rp4.add(pp8);
  data.add(rule1);
  data.add(pp1);
  data.add(pp2);
  data.add(pp3);
  data.add(pp4);
  data.add(i1);
  data.add(i2);
  data.add(rp1);
  data.add(rp2);
  data.add(rule2);
  data.add(pp5);
  data.add(pp6);
  data.add(pp7);
  data.add(pp8);
  data.add(i4);
  data.add(rp3);
  data.add(rp4);
  session.executeWithResults(data);
  Iterator<VerifierMessageBase> iter=result.getBySeverity(Severity.ERROR).iterator();
  boolean works=false;
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof VerifierMessage) {
      VerifierMessage message=(VerifierMessage)o;
      if (message.getFaulty().equals(rule1)) {
        works=true;
      }
 else {
        fail("There can be only one. (And this is not the one)");
      }
    }
  }
  assertEquals(1,result.getBySeverity(Severity.ERROR).size());
  assertEquals(0,result.getBySeverity(Severity.WARNING).size());
  assertEquals(0,result.getBySeverity(Severity.NOTE).size());
  assertTrue(works);
}
