{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Patterns.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Pattern that is always false"));
  VerifierReport result=VerifierReportFactory.newVerifierReport();
  Collection<Object> data=new ArrayList<Object>();
  session.setGlobal("result",result);
  VerifierRule rule1=new VerifierRule();
  Pattern pattern1=new Pattern();
  pattern1.setRuleGuid(rule1.getGuid());
  Restriction r1=new LiteralRestriction();
  Restriction r2=new LiteralRestriction();
  Incompatibility i1=new Incompatibility(r1,r2);
  SubPattern pp1=new SubPattern();
  pp1.setPatternGuid(pattern1.getGuid());
  pp1.add(r1);
  pp1.add(r2);
  Restriction r3=new VariableRestriction();
  Restriction r4=new VariableRestriction();
  Incompatibility i2=new Incompatibility(r1,r2);
  SubPattern pp2=new SubPattern();
  pp2.setPatternGuid(pattern1.getGuid());
  pp2.add(r1);
  pp2.add(r2);
  Pattern pattern2=new Pattern();
  pattern2.setRuleGuid(rule1.getGuid());
  Restriction r5=new LiteralRestriction();
  Restriction r6=new LiteralRestriction();
  SubPattern pp3=new SubPattern();
  pp3.setPatternGuid(pattern2.getGuid());
  pp3.add(r5);
  pp3.add(r6);
  Restriction r7=new VariableRestriction();
  Restriction r8=new VariableRestriction();
  Incompatibility i4=new Incompatibility(r7,r8);
  SubPattern pp4=new SubPattern();
  pp4.setPatternGuid(pattern2.getGuid());
  pp4.add(r7);
  pp4.add(r8);
  data.add(rule1);
  data.add(pattern1);
  data.add(r1);
  data.add(r2);
  data.add(r3);
  data.add(r4);
  data.add(i1);
  data.add(i2);
  data.add(pp1);
  data.add(pp2);
  data.add(pattern2);
  data.add(r5);
  data.add(r6);
  data.add(r7);
  data.add(r8);
  data.add(i4);
  data.add(pp3);
  data.add(pp4);
  session.executeWithResults(data);
  Iterator<VerifierMessageBase> iter=result.getBySeverity(Severity.ERROR).iterator();
  boolean works=false;
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof VerifierMessage) {
      VerifierMessage message=(VerifierMessage)o;
      if (message.getFaulty().equals(pattern1)) {
        works=true;
      }
 else {
        fail("There can be only one. (And this is not the one)");
      }
    }
  }
  assertEquals(1,result.getBySeverity(Severity.ERROR).size());
  assertEquals(0,result.getBySeverity(Severity.WARNING).size());
  assertEquals(0,result.getBySeverity(Severity.NOTE).size());
  assertTrue(works);
}
