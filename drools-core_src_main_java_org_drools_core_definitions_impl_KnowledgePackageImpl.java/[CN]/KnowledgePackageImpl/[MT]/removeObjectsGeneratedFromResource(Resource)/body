{
  List<RuleImpl> rulesToBeRemoved=removeRulesGeneratedFromResource(resource);
  List<TypeDeclaration> typesToBeRemoved=getTypesGeneratedFromResource(resource);
  if (!typesToBeRemoved.isEmpty()) {
    JavaDialectRuntimeData dialect=(JavaDialectRuntimeData)getDialectRuntimeRegistry().getDialectData("java");
    for (    TypeDeclaration type : typesToBeRemoved) {
      if (type.getTypeClassName() != null) {
        classFieldAccessorStore.removeType(type);
        dialect.remove(type.getTypeClassName());
      }
      removeTypeDeclaration(type.getTypeName());
    }
    dialect.reload();
  }
  List<Function> functionsToBeRemoved=removeFunctionsGeneratedFromResource(resource);
  return !rulesToBeRemoved.isEmpty() || !typesToBeRemoved.isEmpty() || !functionsToBeRemoved.isEmpty();
}
