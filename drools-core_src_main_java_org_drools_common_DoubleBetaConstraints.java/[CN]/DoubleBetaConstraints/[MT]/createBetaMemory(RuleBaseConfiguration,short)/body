{
  BetaMemory memory;
  final List<FieldIndex> list=new ArrayList<FieldIndex>(2);
  if (this.indexed0) {
    final IndexableConstraint indexableConstraint=(IndexableConstraint)this.constraint0;
    final FieldIndex index=indexableConstraint.getFieldIndex();
    list.add(index);
  }
  if (this.indexed1) {
    final IndexableConstraint indexableConstraint=(IndexableConstraint)this.constraint1;
    final FieldIndex index=indexableConstraint.getFieldIndex();
    list.add(index);
  }
  if (!list.isEmpty()) {
    final FieldIndex[] indexes=list.toArray(new FieldIndex[list.size()]);
    LeftTupleMemory tupleMemory;
    if (config.isIndexLeftBetaMemory()) {
      tupleMemory=new LeftTupleIndexHashTable(indexes);
    }
 else {
      tupleMemory=new LeftTupleList();
    }
    RightTupleMemory factHandleMemory;
    if (config.isIndexRightBetaMemory()) {
      factHandleMemory=new RightTupleIndexHashTable(indexes);
    }
 else {
      factHandleMemory=new RightTupleList();
    }
    memory=new BetaMemory(config.isSequential() ? null : tupleMemory,factHandleMemory,this.createContext(),nodeType);
  }
 else {
    memory=new BetaMemory(config.isSequential() ? null : new LeftTupleList(),new RightTupleList(),this.createContext(),nodeType);
  }
  return memory;
}
