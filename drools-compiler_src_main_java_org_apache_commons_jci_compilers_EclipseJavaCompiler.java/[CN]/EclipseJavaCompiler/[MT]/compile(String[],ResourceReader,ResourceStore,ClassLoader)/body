{
  final Map settingsMap=settings;
  final Set clazzIndex=new HashSet();
  ICompilationUnit[] compilationUnits=new ICompilationUnit[pClazzNames.length];
  for (int i=0; i < compilationUnits.length; i++) {
    final String clazzName=pClazzNames[i];
    compilationUnits[i]=new CompilationUnit(pReader,clazzName);
    clazzIndex.add(clazzName);
  }
  final IErrorHandlingPolicy policy=DefaultErrorHandlingPolicies.proceedWithAllProblems();
  final IProblemFactory problemFactory=new DefaultProblemFactory(Locale.getDefault());
  final INameEnvironment nameEnvironment=new INameEnvironment(){
    public NameEnvironmentAnswer findType(    final char[][] compoundTypeName){
      final StringBuffer result=new StringBuffer();
      for (int i=0; i < compoundTypeName.length; i++) {
        if (i != 0) {
          result.append('.');
        }
        result.append(compoundTypeName[i]);
      }
      return findType(result.toString());
    }
    public NameEnvironmentAnswer findType(    final char[] typeName,    final char[][] packageName){
      final StringBuffer result=new StringBuffer();
      for (int i=0; i < packageName.length; i++) {
        result.append(packageName[i]);
        result.append('.');
      }
      result.append(typeName);
      return findType(result.toString());
    }
    private NameEnvironmentAnswer findType(    final String clazzName){
      byte[] clazzBytes=pStore.read(clazzName);
      if (clazzBytes != null) {
        final char[] fileName=clazzName.toCharArray();
        try {
          final ClassFileReader classFileReader=new ClassFileReader(clazzBytes,fileName,true);
          return new NameEnvironmentAnswer(classFileReader,null);
        }
 catch (        final ClassFormatException e) {
          e.printStackTrace();
        }
      }
 else {
        if (pReader.isAvailable(clazzName.replace('.','/') + ".java")) {
          ICompilationUnit compilationUnit=new CompilationUnit(pReader,clazzName);
          return new NameEnvironmentAnswer(compilationUnit,null);
        }
        final String resourceName=clazzName.replace('.','/') + ".class";
        final InputStream is=classLoader.getResourceAsStream(resourceName);
        if (is != null) {
          final byte[] buffer=new byte[8192];
          final ByteArrayOutputStream baos=new ByteArrayOutputStream(buffer.length);
          int count;
          try {
            while ((count=is.read(buffer,0,buffer.length)) > 0) {
              baos.write(buffer,0,count);
            }
            baos.flush();
            clazzBytes=baos.toByteArray();
            final char[] fileName=clazzName.toCharArray();
            ClassFileReader classFileReader=new ClassFileReader(clazzBytes,fileName,true);
            return new NameEnvironmentAnswer(classFileReader,null);
          }
 catch (          final IOException e) {
            e.printStackTrace();
          }
catch (          final ClassFormatException e) {
            e.printStackTrace();
          }
 finally {
            try {
              baos.close();
            }
 catch (            final IOException oe) {
              oe.printStackTrace();
            }
            try {
              is.close();
            }
 catch (            final IOException ie) {
              ie.printStackTrace();
            }
          }
        }
      }
      return null;
    }
    private boolean isPackage(    final String clazzName){
      final String resourceName=clazzName.replace('.','/') + ".class";
      final URL resource=classLoader.getResource(resourceName);
      return resource == null;
    }
    public boolean isPackage(    char[][] parentPackageName,    char[] packageName){
      final StringBuffer result=new StringBuffer();
      if (parentPackageName != null) {
        for (int i=0; i < parentPackageName.length; i++) {
          if (i != 0) {
            result.append('.');
          }
          result.append(parentPackageName[i]);
        }
      }
      if (Character.isUpperCase(packageName[0])) {
        return false;
      }
      if (parentPackageName != null && parentPackageName.length > 0) {
        result.append('.');
      }
      result.append(packageName);
      return isPackage(result.toString());
    }
    public void cleanup(){
    }
  }
;
  final Collection problems=new ArrayList();
  final ICompilerRequestor compilerRequestor=new ICompilerRequestor(){
    public void acceptResult(    CompilationResult result){
      if (result.hasProblems()) {
        final IProblem[] iproblems=result.getProblems();
        for (int i=0; i < iproblems.length; i++) {
          final IProblem iproblem=iproblems[i];
          final CompilationProblem problem=new EclipseCompilationProblem(iproblem);
          if (problemHandler != null) {
            problemHandler.handle(problem);
          }
          problems.add(problem);
        }
      }
      if (!result.hasErrors()) {
        final ClassFile[] clazzFiles=result.getClassFiles();
        for (int i=0; i < clazzFiles.length; i++) {
          final ClassFile clazzFile=clazzFiles[i];
          final char[][] compoundName=clazzFile.getCompoundName();
          final StringBuffer clazzName=new StringBuffer();
          for (int j=0; j < compoundName.length; j++) {
            if (j != 0) {
              clazzName.append('.');
            }
            clazzName.append(compoundName[j]);
          }
          pStore.write(clazzName.toString(),clazzFile.getBytes());
        }
      }
    }
  }
;
  final Compiler compiler=new Compiler(nameEnvironment,policy,settingsMap,compilerRequestor,problemFactory,false);
  compiler.compile(compilationUnits);
  final CompilationProblem[] result=new CompilationProblem[problems.size()];
  problems.toArray(result);
  return new org.apache.commons.jci.compilers.CompilationResult(result);
}
