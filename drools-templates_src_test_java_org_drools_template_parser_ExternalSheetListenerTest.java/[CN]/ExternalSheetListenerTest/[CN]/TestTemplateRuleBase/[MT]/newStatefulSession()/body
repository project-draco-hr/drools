{
  return new StatefulSession(){
    private static final long serialVersionUID=510l;
    public void addEventListener(    WorkingMemoryEventListener arg0){
    }
    public void addEventListener(    AgendaEventListener arg0){
    }
    public FactHandle insert(    Object fact) throws FactException {
      if (fact instanceof Row) {
        assertedRows.put((Row)fact,currentRow);
        currentRow=new ArrayList<StringCell>();
      }
 else       if (fact instanceof StringCell) {
        currentRow.add((StringCell)fact);
      }
      return null;
    }
    public FactHandle insert(    Object arg0,    boolean arg1) throws FactException {
      return null;
    }
    public void clearAgenda(){
    }
    public void clearAgendaGroup(    String arg0){
    }
    public void dispose(){
    }
    public int fireAllRules() throws FactException {
      return 0;
    }
    public int fireAllRules(    AgendaFilter arg0) throws FactException {
      return 0;
    }
    public Agenda getAgenda(){
      return null;
    }
    @SuppressWarnings("unchecked") public List getAgendaEventListeners(){
      return null;
    }
    public FactHandle getFactHandle(    Object arg0){
      return null;
    }
    public AgendaGroup getFocus(){
      return null;
    }
    public Object getGlobal(    String arg0){
      return null;
    }
    public Object getObject(    FactHandle arg0){
      return null;
    }
    public QueryResults getQueryResults(    String arg0){
      return null;
    }
    public RuleBase getRuleBase(){
      return null;
    }
    @SuppressWarnings("unchecked") public List getWorkingMemoryEventListeners(){
      return null;
    }
    public void update(    org.drools.runtime.rule.FactHandle arg0,    Object arg1) throws FactException {
    }
    public void removeEventListener(    WorkingMemoryEventListener arg0){
    }
    public void removeEventListener(    AgendaEventListener arg0){
    }
    public void retract(    org.drools.runtime.rule.FactHandle arg0) throws FactException {
    }
    public void setAsyncExceptionHandler(    AsyncExceptionHandler arg0){
    }
    public void setFocus(    String arg0){
    }
    public void setFocus(    AgendaGroup arg0){
    }
    public void setGlobal(    String arg0,    Object arg1){
    }
    public void setGlobalResolver(    GlobalResolver globalResolver){
    }
    public ProcessInstance startProcess(    String processId){
      return null;
    }
    @SuppressWarnings("unchecked") public Iterator iterateFactHandles(){
      return null;
    }
    @SuppressWarnings("unchecked") public Iterator iterateFactHandles(    ObjectFilter filter){
      return null;
    }
    @SuppressWarnings("unchecked") public Iterator iterateObjects(){
      return null;
    }
    @SuppressWarnings("unchecked") public Iterator iterateObjects(    ObjectFilter filter){
      return null;
    }
    public Future asyncInsert(    Object object){
      return null;
    }
    public Future asyncInsert(    Object[] list){
      return null;
    }
    @SuppressWarnings("unchecked") public Future asyncInsert(    Collection collection){
      return null;
    }
    public Future asyncFireAllRules(){
      return null;
    }
    public Future asyncFireAllRules(    AgendaFilter agendaFilter){
      return null;
    }
    public Future asyncUpdate(    FactHandle factHandle,    Object object){
      return null;
    }
    public Future asyncRetract(    FactHandle factHandle){
      return null;
    }
    public QueryResults getQueryResults(    String query,    Object[] arguments){
      return null;
    }
    public void modifyInsert(    FactHandle factHandle,    Object object){
    }
    public void modifyRetract(    FactHandle factHandle){
    }
    public void halt(){
    }
    public int fireAllRules(    int fireLimit) throws FactException {
      return 0;
    }
    public int fireAllRules(    AgendaFilter agendaFilter,    int fireLimit) throws FactException {
      return 0;
    }
    public GlobalResolver getGlobalResolver(){
      return null;
    }
    @SuppressWarnings("unchecked") public List getRuleFlowEventListeners(){
      return null;
    }
    public void clearActivationGroup(    String group){
    }
    public void clearRuleFlowGroup(    String group){
    }
    public void addEventListener(    RuleBaseEventListener listener){
    }
    @SuppressWarnings("unchecked") public List getRuleBaseEventListeners(){
      return null;
    }
    public void removeEventListener(    RuleBaseEventListener listener){
    }
    @SuppressWarnings("unchecked") public List getRuleBaseUpdateListeners(){
      return null;
    }
    public ProcessInstance getProcessInstance(    long id){
      return null;
    }
    public WorkItemManager getWorkItemManager(){
      return null;
    }
    @SuppressWarnings("unchecked") public Collection getProcessInstances(){
      return null;
    }
    public ProcessInstance startProcess(    String processId,    Map<String,Object> parameters){
      return null;
    }
    public FactHandle getFactHandleByIdentity(    Object object){
      return null;
    }
    public WorkingMemoryEntryPoint getWorkingMemoryEntryPoint(    String id){
      return null;
    }
    public SessionClock getSessionClock(){
      return null;
    }
    public void fireUntilHalt(){
    }
    public void fireUntilHalt(    AgendaFilter agendaFilter){
    }
    public Object getObject(    org.drools.runtime.rule.FactHandle handle){
      return null;
    }
    public Environment getEnvironment(){
      return null;
    }
    public Collection<? extends org.drools.runtime.rule.FactHandle> getFactHandles(){
      return null;
    }
    public Collection<? extends org.drools.runtime.rule.FactHandle> getFactHandles(    ObjectFilter filter){
      return null;
    }
    public Collection<Object> getObjects(){
      return null;
    }
    public Collection<Object> getObjects(    ObjectFilter filter){
      return null;
    }
    public String getEntryPointId(){
      return null;
    }
    public long getFactCount(){
      return 0;
    }
  }
;
}
