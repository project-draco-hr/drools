{
  boolean useLeftMemory=true;
  if (!workingMemory.isSequential()) {
    if (!isLeftTupleMemoryEnabled()) {
      Object object=factHandle.getObject();
      if (object instanceof DroolsQuery) {
        if (!((DroolsQuery)object).isOpen()) {
          useLeftMemory=false;
        }
      }
    }
    this.sink.createAndPropagateAssertLeftTuple(factHandle,context,workingMemory,useLeftMemory,this);
  }
 else {
    ((ReteWorkingMemory)workingMemory).addLIANodePropagation(new LIANodePropagation(this,factHandle,context));
  }
}
