{
  DSLMapParser.variable_reference_expr_return retval=new DSLMapParser.variable_reference_expr_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token set35=null;
  Object set35_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      int cnt17=0;
      loop17:       while (true) {
        int alt17=2;
        int LA17_0=input.LA(1);
        if ((LA17_0 == EQUALS || LA17_0 == LITERAL)) {
          alt17=1;
        }
switch (alt17) {
case 1:
{
            set35=input.LT(1);
            if (input.LA(1) == EQUALS || input.LA(1) == LITERAL) {
              input.consume();
              if (state.backtracking == 0)               adaptor.addChild(root_0,(Object)adaptor.create(set35));
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return retval;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
          }
        break;
default :
      if (cnt17 >= 1)       break loop17;
    if (state.backtracking > 0) {
      state.failed=true;
      return retval;
    }
  EarlyExitException eee=new EarlyExitException(17,input);
throw eee;
}
cnt17++;
}
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
