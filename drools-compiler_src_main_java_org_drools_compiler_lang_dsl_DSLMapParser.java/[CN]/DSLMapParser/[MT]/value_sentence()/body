{
  DSLMapParser.value_sentence_return retval=new DSLMapParser.value_sentence_return();
  retval.start=input.LT(1);
  Object root_0=null;
  DSLMapParser.value_chunk_return vc=null;
  DSLMapParser.variable_reference_return variable_reference19=null;
  RewriteRuleSubtreeStream stream_value_chunk=new RewriteRuleSubtreeStream(adaptor,"rule value_chunk");
  String text="";
  try {
    int alt12=2;
    int LA12_0=input.LA(1);
    if ((LA12_0 == LEFT_CURLY)) {
      alt12=1;
    }
 else     if (((LA12_0 >= EQUALS && LA12_0 <= COLON))) {
      alt12=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",12,0,input);
      throw nvae;
    }
switch (alt12) {
case 1:
{
        root_0=(Object)adaptor.nil();
        pushFollow(FOLLOW_variable_reference_in_value_sentence703);
        variable_reference19=variable_reference();
        state._fsp--;
        if (state.failed)         return retval;
        if (state.backtracking == 0)         adaptor.addChild(root_0,variable_reference19.getTree());
      }
    break;
case 2:
{
    pushFollow(FOLLOW_value_chunk_in_value_sentence713);
    vc=value_chunk();
    state._fsp--;
    if (state.failed)     return retval;
    if (state.backtracking == 0)     stream_value_chunk.add(vc.getTree());
    if (state.backtracking == 0) {
      text=(vc != null ? input.toString(vc.start,vc.stop) : null);
    }
    if (state.backtracking == 0) {
      retval.tree=root_0;
      RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
      root_0=(Object)adaptor.nil();
{
        adaptor.addChild(root_0,(Object)adaptor.create(VT_LITERAL,(vc != null ? ((Token)vc.start) : null),text));
      }
      retval.tree=root_0;
    }
  }
break;
}
retval.stop=input.LT(-1);
if (state.backtracking == 0) {
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
