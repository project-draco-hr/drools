{
  final boolean[][] gridData=pattern.getPattern();
  int gridWidth=gridData[0].length;
  int gridHeight=gridData.length;
  int columnOffset=0;
  int rowOffset=0;
  if (gridWidth > getNumberOfColumns()) {
    gridWidth=getNumberOfColumns();
  }
 else {
    columnOffset=(getNumberOfColumns() - gridWidth) / 2;
  }
  if (gridHeight > getNumberOfRows()) {
    gridHeight=getNumberOfRows();
  }
 else {
    rowOffset=(getNumberOfRows() - gridHeight) / 2;
  }
  killAll();
  for (int column=0; column < gridWidth; column++) {
    for (int row=0; row < gridHeight; row++) {
      if (gridData[row][column]) {
        final Cell cell=getCellAt(row + rowOffset,column + columnOffset);
        cell.setCellState(CellState.LIVE);
        this.workingMemory.modifyObject(this.workingMemory.getFactHandle(cell),cell);
      }
    }
  }
  workingMemory.setFocus("calculate");
  workingMemory.fireAllRules();
  System.out.println("");
}
