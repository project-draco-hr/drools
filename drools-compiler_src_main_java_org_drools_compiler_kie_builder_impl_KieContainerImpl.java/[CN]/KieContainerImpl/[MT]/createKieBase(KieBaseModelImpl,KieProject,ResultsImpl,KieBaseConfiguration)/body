{
  ClassLoader cl=kieProject.getClassLoader();
  InternalKieModule kModule=kieProject.getKieModuleForKBase(kBaseModel.getName());
  Collection<KnowledgePackage> pkgs=kModule.getKnowledgePackagesForKieBase(kBaseModel.getName());
  if (pkgs == null) {
    KnowledgeBuilder kbuilder=buildKnowledgePackages(kBaseModel,kieProject,messages);
    if (kbuilder.hasErrors()) {
      return null;
    }
  }
  pkgs=kModule.getKnowledgePackagesForKieBase(kBaseModel.getName());
  if (kBaseModel.getEventProcessingMode() == EventProcessingOption.CLOUD && (conf == null || conf.getOption(EventProcessingOption.class) == EventProcessingOption.CLOUD)) {
    for (    KnowledgePackage kpkg : pkgs) {
      if (((KnowledgePackageImpl)kpkg).needsStreamMode()) {
        throw new RuntimeException("The requested KieBase \"" + kBaseModel.getName() + "\" has been set to run in CLOUD mode but requires features only available in STREAM mode");
      }
    }
  }
  if (conf == null) {
    conf=getKnowledgeBaseConfiguration(kBaseModel,cl);
  }
 else   if (conf instanceof RuleBaseConfiguration) {
    ((RuleBaseConfiguration)conf).setClassLoader(cl);
  }
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase(kBaseModel.getName(),conf);
  kBase.setResolvedReleaseId(containerReleaseId);
  kBase.setContainerId(containerId);
  kBase.initMBeans();
  kBase.addKnowledgePackages(pkgs);
  return kBase;
}
