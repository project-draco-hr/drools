{
  final InternalKieModule newKM=(InternalKieModule)kr.getKieModule(newReleaseId);
  ChangeSetBuilder csb=new ChangeSetBuilder();
  final KieJarChangeSet cs=csb.build(currentKM,newKM);
  final List<String> modifiedClasses=getModifiedClasses(cs);
  final boolean modifyingUsedClass=isModifyingUsedClass(modifiedClasses,getClassLoader());
  reinitModifiedClasses(newKM,modifiedClasses,getClassLoader());
  final List<String> unchangedResources=getUnchangedResources(newKM,cs);
  Map<String,KieBaseModel> currentKieBaseModels=((KieModuleKieProject)kProject).updateToModule(newKM);
  final ResultsImpl results=new ResultsImpl();
  List<String> kbasesToRemove=new ArrayList<String>();
  for (  Entry<String,KieBase> kBaseEntry : kBases.entrySet()) {
    String kbaseName=kBaseEntry.getKey();
    final KieBaseModel newKieBaseModel=kProject.getKieBaseModel(kbaseName);
    final KieBaseModel currentKieBaseModel=currentKieBaseModels.get(kbaseName);
    if (newKieBaseModel == null) {
      kbasesToRemove.add(kbaseName);
    }
 else {
      final InternalKnowledgeBase kBase=(InternalKnowledgeBase)kBaseEntry.getValue();
      kBase.enqueueModification(new Runnable(){
        @Override public void run(){
          updateKBase(kBase,currentKM,newReleaseId,newKM,cs,modifiedClasses,modifyingUsedClass,unchangedResources,results,newKieBaseModel,currentKieBaseModel);
        }
      }
);
    }
  }
  for (  String kbaseToRemove : kbasesToRemove) {
    kBases.remove(kbaseToRemove);
  }
  for (Iterator<Entry<String,KieSession>> it=this.kSessions.entrySet().iterator(); it.hasNext(); ) {
    Entry<String,KieSession> ksession=it.next();
    if (kProject.getKieSessionModel(ksession.getKey()) == null) {
      it.remove();
    }
  }
  for (Iterator<Entry<String,StatelessKieSession>> it=this.statelessKSessions.entrySet().iterator(); it.hasNext(); ) {
    Entry<String,StatelessKieSession> ksession=it.next();
    if (kProject.getKieSessionModel(ksession.getKey()) == null) {
      it.remove();
    }
  }
  return results;
}
