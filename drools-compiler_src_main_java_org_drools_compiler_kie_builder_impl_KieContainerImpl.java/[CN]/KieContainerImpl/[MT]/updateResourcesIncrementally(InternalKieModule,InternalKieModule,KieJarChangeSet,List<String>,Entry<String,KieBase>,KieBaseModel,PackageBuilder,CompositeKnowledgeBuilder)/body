{
  int fileCount=modifiedClasses.size();
  for (  ResourceChangeSet rcs : cs.getChanges().values()) {
    if (rcs.getChangeType() != ChangeType.REMOVED) {
      String resourceName=rcs.getResourceName();
      if (!resourceName.endsWith(".properties") && filterFileInKBase(newKM,kieBaseModel,resourceName)) {
        List<ResourceChange> changes=rcs.getChanges();
        if (!changes.isEmpty()) {
          fileCount+=AbstractKieModule.updateResource(ckbuilder,newKM,resourceName,rcs) ? 1 : 0;
        }
 else {
          if (rcs.getChangeType() == ChangeType.UPDATED) {
            Resource resource=currentKM.getResource(resourceName);
            pkgbuilder.removeObjectsGeneratedFromResource(resource);
          }
          fileCount+=newKM.addResourceToCompiler(ckbuilder,resourceName) ? 1 : 0;
        }
      }
    }
    KieBase kBase=kBaseEntry.getValue();
    for (    ResourceChangeSet.RuleLoadOrder loadOrder : rcs.getLoadOrder()) {
      Rule rule=(Rule)((KnowledgePackageImp)kBase.getKiePackage(loadOrder.getPkgName())).getRule(loadOrder.getRuleName());
      if (rule != null) {
        rule.setLoadOrder(loadOrder.getLoadOrder());
      }
    }
  }
  return fileCount;
}
