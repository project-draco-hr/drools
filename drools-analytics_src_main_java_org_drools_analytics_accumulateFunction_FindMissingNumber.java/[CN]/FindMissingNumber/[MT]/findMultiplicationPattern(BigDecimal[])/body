{
  if (numbers == null || numbers.length < MIN_NUMBER_OF_RESTRICTIONS) {
    return null;
  }
  try {
    BigDecimal gap=null;
    Number missingNumber=null;
    BigDecimal a=numbers[0];
    BigDecimal b=numbers[1];
    BigDecimal c=numbers[2];
    BigDecimal d=numbers[3];
    if (b.divide(a).equals(c.divide(b))) {
      gap=b.divide(a);
    }
 else     if (c.divide(b).equals(d.divide(c))) {
      gap=c.divide(b);
    }
 else     if (b.divide(a).equals(d.divide(c))) {
      gap=b.divide(a);
    }
 else {
      return null;
    }
    BigDecimal first=null;
    BigDecimal second=null;
    for (int i=0; i < (numbers.length - 1); i++) {
      first=numbers[i];
      second=numbers[i + 1];
      if (missingNumber == null && !second.divide(first).equals(gap)) {
        missingNumber=first.multiply(gap);
      }
 else       if (!second.divide(first).equals(gap) && missingNumber != null) {
        return null;
      }
    }
    return missingNumber;
  }
 catch (  Exception e) {
    return null;
  }
}
