{
  this.indexed=-1;
  this.constraints=new LinkedList();
  ContextEntry current=null;
  final int depth=conf.getCompositeKeyDepth();
  for (int i=0, length=constraints.length; i < length; i++) {
    if ((!disableIndexing) && conf.isIndexLeftBetaMemory() && conf.isIndexRightBetaMemory()&& isIndexable(constraints[i])) {
      if (depth >= 1 && this.indexed == -1) {
        this.constraints.insertAfter(null,new LinkedListEntry(constraints[i]));
        this.indexed++;
      }
 else       if (depth >= this.indexed + 1) {
        this.constraints.insertAfter(findNode(this.indexed++),new LinkedListEntry(constraints[i]));
      }
    }
 else {
      this.constraints.add(new LinkedListEntry(constraints[i]));
    }
  }
  for (LinkedListEntry entry=(LinkedListEntry)this.constraints.getFirst(); entry != null; entry=(LinkedListEntry)entry.getNext()) {
    final BetaNodeFieldConstraint constraint=(BetaNodeFieldConstraint)entry.getObject();
    final ContextEntry context=constraint.getContextEntry();
    if (current == null) {
      current=context;
      this.contexts=context;
    }
 else {
      current.setNext(context);
    }
    current=context;
  }
}
