{
  BetaMemory memory;
  if (this.indexed > 0) {
    LinkedListEntry entry=(LinkedListEntry)this.constraints.getFirst();
    List list=new ArrayList();
    for (int pos=0; pos < this.indexed; pos++) {
      final Constraint constraint=(Constraint)entry.getObject();
      final VariableConstraint variableConstraint=(VariableConstraint)constraint;
      final FieldIndex index=new FieldIndex(variableConstraint.getFieldExtractor(),variableConstraint.getRequiredDeclarations()[0]);
      list.add(index);
      entry=(LinkedListEntry)entry.getNext();
    }
    FieldIndex[] indexes=(FieldIndex[])list.toArray(new FieldIndex[list.size()]);
    memory=new BetaMemory(new TupleIndexHashTable(indexes),new FactHandleIndexHashTable(indexes));
  }
 else {
    memory=new BetaMemory(new TupleHashTable(),new FactHashTable());
  }
  return memory;
}
