{
  final From from=(From)rce;
  context.pushRuleComponent(from);
  @SuppressWarnings("unchecked") BetaConstraints betaConstraints=utils.createBetaNodeConstraint(context,(List<BetaNodeFieldConstraint>)context.getBetaconstraints(),true);
  AlphaNodeFieldConstraint[] alphaNodeFieldConstraints=context.getAlphaConstraints() != null ? context.getAlphaConstraints().toArray(new AlphaNodeFieldConstraint[context.getAlphaConstraints().size()]) : new AlphaNodeFieldConstraint[0];
  BaseNode node=context.getComponentFactory().getNodeFactoryService().buildReactiveFromNode(context.getNextId(),from.getDataProvider(),context.getTupleSource(),alphaNodeFieldConstraints,betaConstraints,context.isTupleMemoryEnabled(),context,from);
  context.setTupleSource((LeftTupleSource)utils.attachNode(context,node));
  context.setAlphaConstraints(null);
  context.setBetaconstraints(null);
}
