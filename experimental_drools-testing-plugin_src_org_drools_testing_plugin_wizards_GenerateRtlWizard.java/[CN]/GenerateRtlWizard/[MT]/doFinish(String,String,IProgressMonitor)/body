{
  monitor.beginTask("Creating " + fileName,2);
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IResource resource=root.findMember(new Path(containerName));
  if (!resource.exists() || !(resource instanceof IContainer)) {
    throwCoreException("Container \"" + containerName + "\" does not exist.");
  }
  IContainer container=(IContainer)resource;
  final IFile file=container.getFile(new Path(fileName));
  ClassLoader oldLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader newLoader=GenerateRtlWizard.class.getClassLoader();
  if (resource.getProject().getNature("org.eclipse.jdt.core.javanature") != null) {
    IJavaProject project=JavaCore.create(resource.getProject());
    newLoader=ProjectClassLoader.getProjectClassLoader(project);
  }
  try {
    Thread.currentThread().setContextClassLoader(newLoader);
    Testing testing=new Testing("The Test Test Suite",rtlModel.getPackageDescr(),newLoader);
    Scenario scenario=testing.generateScenario("Scenario One",rtlModel.getPackageDescr().getRules());
    testing.addScenarioToSuite(scenario);
    TestSuite testSuite=testing.getTestSuite();
    FileWriter out=new FileWriter(fileName);
    Marshaller marshaller=new Marshaller(out);
    marshaller.setSuppressXSIType(true);
    marshaller.setSupressXMLDeclaration(true);
    marshaller.marshal(testSuite);
    out.close();
    InputStream stream=openContentStream(fileName);
    if (file.exists()) {
      file.setContents(stream,true,true,monitor);
    }
 else {
      file.create(stream,true,monitor);
    }
    stream.close();
  }
 catch (  RuleTestLanguageException e) {
    throwCoreException(e.getMessage());
  }
catch (  IOException e) {
    throwCoreException(e.toString());
  }
catch (  MarshalException e) {
    throwCoreException(e.toString());
  }
catch (  ValidationException e) {
    throwCoreException(e.toString());
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldLoader);
  }
  monitor.worked(1);
  monitor.setTaskName("Opening file for editing...");
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      try {
        IDE.openEditor(page,file,true);
      }
 catch (      PartInitException e) {
      }
    }
  }
);
  monitor.worked(1);
}
