{
  int offset=-1;
  Reader reader=new InputStreamReader(ConsequenceOffsetTest.class.getResourceAsStream("test_consequenceOffset.drl"));
  DRLParser parser=new DRLParser(new CommonTokenStream(new DRLLexer(new ANTLRReaderStream(reader))));
  parser.compilation_unit();
  PackageDescr packageDescr=parser.getPackageDescr();
  PackageBuilder packageBuilder=new PackageBuilder();
  packageBuilder.addPackage(packageDescr);
  assertEquals(false,packageBuilder.hasErrors());
  for (  Object o : packageDescr.getRules()) {
    RuleDescr rule=(RuleDescr)o;
    if (rule.getName().equals("test")) {
      offset=rule.getConsequenceOffset();
    }
  }
  reader=new InputStreamReader(ConsequenceOffsetTest.class.getResourceAsStream("test_consequenceOffset2.drl"));
  parser=new DRLParser(new CommonTokenStream(new DRLLexer(new ANTLRReaderStream(reader))));
  parser.compilation_unit();
  packageDescr=parser.getPackageDescr();
  packageBuilder=new PackageBuilder();
  packageBuilder.addPackage(packageDescr);
  reader=new InputStreamReader(ConsequenceOffsetTest.class.getResourceAsStream("test_consequenceOffset.drl"));
  parser=new DRLParser(new CommonTokenStream(new DRLLexer(new ANTLRReaderStream(reader))));
  parser.compilation_unit();
  packageDescr=parser.getPackageDescr();
  packageBuilder.addPackage(packageDescr);
  assertEquals(false,packageBuilder.hasErrors());
  for (  Object o : packageDescr.getRules()) {
    RuleDescr rule=(RuleDescr)o;
    if (rule.getName().equals("test")) {
      assertEquals(offset,rule.getConsequenceOffset());
      return;
    }
  }
  fail();
}
