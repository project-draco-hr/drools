{
  if (!(src instanceof String)) {
    throw new IllegalStateException("The object to transform is not of the correct type String, " + src);
  }
  String ruleBase=(String)src;
  KnowledgeBase kbase=readKnowledgeBase(ruleBase);
  PackageDescr pkgDescr=getPkgDescription(ruleBase);
  List<JAXBElement<?>> content=new ArrayList<JAXBElement<?>>();
  Collection<KnowledgePackage> knowledgePackages=kbase.getKnowledgePackages();
  for (  KnowledgePackage knowledgePackage : knowledgePackages) {
    Collection<org.drools.definition.rule.Rule> rules=knowledgePackage.getRules();
    int i=0;
    for (    org.drools.definition.rule.Rule rule : rules) {
      Rule rule_=(Rule)kbase.getRule(rule.getPackageName(),rule.getName());
      GroupElement[] transformedLhs=rule_.getTransformedLhs();
      WhenPartAnalyzer whenPartAnalyzer=new WhenPartAnalyzer();
      JAXBElement<?> whenPart=whenPartAnalyzer.processGroupElement(transformedLhs[0]);
      ThenPartAnalyzer thenPartAnalyzer=new ThenPartAnalyzer(whenPartAnalyzer);
      JAXBElement<?>[] thenPart=thenPartAnalyzer.processThenPart(pkgDescr.getRules().get(i).getConsequence().toString());
      JAXBElement<?>[] ruleType=wrapRule(whenPart,thenPart);
      content.addAll(Arrays.asList(ruleType));
      i++;
    }
  }
  JAXBElement<RuleMLType> ruleML=builder.createRuleML(content.toArray(new JAXBElement<?>[content.size()]));
  return builder.marshal(ruleML,true);
}
