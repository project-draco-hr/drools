{
  if (DroolsMVELKnowledgeHelper.DROOLS.equals(name)) {
    addResolver(DroolsMVELKnowledgeHelper.DROOLS,new DroolsMVELKnowledgeHelper(this));
    return true;
  }
 else   if (this.variableResolvers != null && this.variableResolvers.containsKey(name)) {
    return true;
  }
 else   if (this.previousDeclarations != null && this.previousDeclarations.containsKey(name)) {
    addResolver(name,new DroolsMVELPreviousDeclarationVariable((Declaration)this.previousDeclarations.get(name),this));
    return true;
  }
 else   if (this.localDeclarations != null && this.localDeclarations.containsKey(name)) {
    addResolver(name,new DroolsMVELLocalDeclarationVariable((Declaration)this.localDeclarations.get(name),this));
    return true;
  }
 else   if (this.workingMemory.getGlobal(name) != null) {
    addResolver(name,new DroolsMVELGlobalVariable(name,(Class)this.globals.get(name),this));
    return true;
  }
 else   if (nextFactory != null) {
    return nextFactory.isResolveable(name);
  }
  return false;
}
