{
  context.getBuildStack().push(context.getRule().getLhs());
  try {
    MVELDialect dialect=(MVELDialect)context.getDialect(context.getDialect().getId());
    final RuleDescr ruleDescr=context.getRuleDescr();
    String text=("default".equals(consequenceName)) ? (String)ruleDescr.getConsequence() : (String)ruleDescr.getNamedConsequences().get(consequenceName);
    text=processMacros(text);
    Map<String,Declaration> decls=context.getDeclarationResolver().getDeclarations(context.getRule());
    AnalysisResult analysis=dialect.analyzeBlock(context,context.getRuleDescr(),dialect.getInterceptors(),text,new BoundIdentifiers(context.getDeclarationResolver().getDeclarationClasses(decls),context.getPackageBuilder().getGlobals(),KnowledgeHelper.class),null);
    if (analysis == null) {
      return;
    }
    final BoundIdentifiers usedIdentifiers=analysis.getBoundIdentifiers();
    final Declaration[] declarations=new Declaration[usedIdentifiers.getDeclarations().size()];
    String[] declrStr=new String[declarations.length];
    int j=0;
    for (    String str : usedIdentifiers.getDeclarations().keySet()) {
      declrStr[j]=str;
      declarations[j++]=decls.get(str);
    }
    Arrays.sort(declarations,SortDeclarations.instance);
    context.getRule().setRequiredDeclarations(declrStr);
    MVELCompilationUnit unit=dialect.getMVELCompilationUnit(text,analysis,declarations,null,null,context);
    MVELConsequence expr=new MVELConsequence(unit,dialect.getId());
    if ("default".equals(consequenceName)) {
      context.getRule().setConsequence(expr);
    }
 else {
      context.getRule().getNamedConsequences().put(consequenceName,expr);
    }
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData(context.getDialect().getId());
    data.addCompileable(context.getRule(),expr);
    expr.compile(context.getPackageBuilder().getRootClassLoader());
  }
 catch (  final Exception e) {
    context.getErrors().add(new DescrBuildError(context.getParentDescr(),context.getRuleDescr(),null,"Unable to build expression for 'consequence': " + e.getMessage() + " '"+ context.getRuleDescr().getConsequence()+ "'"));
  }
}
