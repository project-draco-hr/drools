{
  if (object == null) {
    return null;
  }
  ObjectTypeConf typeConf=this.typeConfReg.getObjectTypeConf(this.entryPoint,object);
  InternalFactHandle handle=null;
  if (isSequential()) {
    handle=this.handleFactory.newFactHandle(object,typeConf.isEvent(),this);
    this.objectStore.addHandle(handle,object);
    insert(handle,object,rule,activation,typeConf);
    return handle;
  }
  try {
    this.lock.lock();
    handle=(InternalFactHandle)this.objectStore.getHandleForObject(object);
    if (this.maintainTms) {
      EqualityKey key=null;
      if (handle == null) {
        key=this.tms.get(object);
      }
 else {
        key=handle.getEqualityKey();
        if (key.getStatus() == EqualityKey.STATED) {
          return handle;
        }
        if (!logical) {
          key.setStatus(EqualityKey.STATED);
          this.tms.removeLogicalDependencies(handle);
        }
 else {
          this.tms.addLogicalDependency(handle,activation,activation.getPropagationContext(),rule);
        }
        return handle;
      }
      if (key == null) {
        handle=this.handleFactory.newFactHandle(object,typeConf.isEvent(),this);
        this.objectStore.addHandle(handle,object);
        key=new EqualityKey(handle);
        handle.setEqualityKey(key);
        this.tms.put(key);
        if (!logical) {
          key.setStatus(EqualityKey.STATED);
        }
 else {
          key.setStatus(EqualityKey.JUSTIFIED);
          this.tms.addLogicalDependency(handle,activation,activation.getPropagationContext(),rule);
        }
      }
 else       if (!logical) {
        if (key.getStatus() == EqualityKey.JUSTIFIED) {
          final InternalFactHandle justifiedHandle=key.getFactHandle();
          this.tms.removeLogicalDependencies(justifiedHandle);
          if (this.discardOnLogicalOverride) {
            key.setStatus(EqualityKey.STATED);
            handle=key.getFactHandle();
            if (AssertBehaviour.IDENTITY.equals(this.ruleBase.getConfiguration().getAssertBehaviour())) {
              this.objectStore.updateHandle(handle,object);
            }
 else {
              Object oldObject=handle.getObject();
              if (oldObject instanceof ShadowProxy) {
                ((ShadowProxy)oldObject).setShadowedObject(object);
              }
 else {
                handle.setObject(object);
              }
            }
            return handle;
          }
 else {
            key.setStatus(EqualityKey.STATED);
            handle=this.handleFactory.newFactHandle(object,typeConf.isEvent(),this);
            handle.setEqualityKey(key);
            key.addFactHandle(handle);
            this.objectStore.addHandle(handle,object);
          }
        }
 else {
          handle=this.handleFactory.newFactHandle(object,typeConf.isEvent(),this);
          this.objectStore.addHandle(handle,object);
          key.addFactHandle(handle);
          handle.setEqualityKey(key);
        }
      }
 else {
        if (key.getStatus() == EqualityKey.JUSTIFIED) {
          this.tms.addLogicalDependency(key.getFactHandle(),activation,activation.getPropagationContext(),rule);
          return key.getFactHandle();
        }
 else {
          return null;
        }
      }
    }
 else {
      if (handle != null) {
        return handle;
      }
      handle=this.handleFactory.newFactHandle(object,typeConf.isEvent(),this);
      this.objectStore.addHandle(handle,object);
    }
    if (dynamic) {
      addPropertyChangeListener(object);
    }
    insert(handle,object,rule,activation,typeConf);
  }
  finally {
    this.lock.unlock();
  }
  return handle;
}
