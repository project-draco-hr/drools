{
  try {
    this.ruleBase.readLock();
    this.lock.lock();
    startOperation();
    this.ruleBase.executeQueuedActions();
    InternalFactHandle handle=(InternalFactHandle)factHandle;
    if (handle.getId() == -1 || (handle.isEvent() && ((EventFactHandle)handle).isExpired())) {
      return;
    }
    if (factHandle instanceof DisconnectedFactHandle) {
      handle=this.objectStore.reconnect(handle);
    }
    final Object originalObject=handle.getObject();
    if (this.maintainTms) {
      if (handle.getEqualityKey() != null) {
        int status=handle.getEqualityKey().getStatus();
        EqualityKey key=this.tms.get(object);
        if (key == null) {
          key=new EqualityKey(handle,status);
          this.tms.put(key);
        }
 else {
          key.addFactHandle(handle);
        }
        handle.setEqualityKey(key);
      }
    }
    this.handleFactory.increaseFactHandleRecency(handle);
    if (activation != null) {
      activation.getPropagationContext().releaseResources();
    }
    final PropagationContext propagationContext=this.modifyContexts.remove(handle);
    this.entryPointNode.assertObject(handle,propagationContext,this.typeConfReg.getObjectTypeConf(this.entryPoint,object),this);
    this.workingMemoryEventSupport.fireObjectUpdated(propagationContext,factHandle,originalObject,object,this);
    propagationContext.clearRetractedTuples();
    executeQueuedActions();
  }
  finally {
    endOperation();
    this.lock.unlock();
    this.ruleBase.readUnlock();
  }
}
