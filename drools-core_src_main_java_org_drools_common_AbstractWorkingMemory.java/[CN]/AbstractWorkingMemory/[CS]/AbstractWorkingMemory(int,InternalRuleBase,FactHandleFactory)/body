{
  this.id=id;
  this.ruleBase=ruleBase;
  this.handleFactory=handleFactory;
  this.globalResolver=new MapGlobalResolver();
  this.maintainTms=this.ruleBase.getConfiguration().isMaintainTms();
  this.sequential=this.ruleBase.getConfiguration().isSequential();
  if (this.maintainTms) {
    this.tms=new TruthMaintenanceSystem(this);
  }
 else {
    this.tms=null;
  }
  this.assertMap=new ObjectHashMap();
  final RuleBaseConfiguration conf=this.ruleBase.getConfiguration();
  if (conf.getAssertBehaviour() == AssertBehaviour.IDENTITY) {
    this.assertMap.setComparator(new IdentityAssertMapComparator());
    this.identityMap=assertMap;
  }
 else {
    this.assertMap.setComparator(new EqualityAssertMapComparator());
    this.identityMap=new ObjectHashMap();
    this.identityMap.setComparator(new IdentityAssertMapComparator());
  }
  if (conf.getLogicalOverride() == LogicalOverride.DISCARD) {
    this.discardOnLogicalOverride=true;
  }
 else {
    this.discardOnLogicalOverride=false;
  }
  this.taskInstanceManager=new WorkItemManager(this);
  this.typeConfMap=new HashMap<EntryPoint,Map<Object,ObjectTypeConf>>();
}
