{
  this.id=id;
  this.ruleBase=ruleBase;
  this.handleFactory=handleFactory;
  this.globalResolver=new MapGlobalResolver();
  this.maintainTms=this.ruleBase.getConfiguration().isMaintainTms();
  this.sequential=this.ruleBase.getConfiguration().isSequential();
  this.nodeMemories=new ConcurrentNodeMemories(this.ruleBase);
  if (this.maintainTms) {
    this.tms=new TruthMaintenanceSystem(this);
  }
 else {
    this.tms=null;
  }
  final RuleBaseConfiguration conf=this.ruleBase.getConfiguration();
  this.propagationIdCounter=new AtomicLong();
  this.objectStore=new SingleThreadedObjectStore(conf,this.lock);
  if (conf.getLogicalOverride() == LogicalOverride.DISCARD) {
    this.discardOnLogicalOverride=true;
  }
 else {
    this.discardOnLogicalOverride=false;
  }
  this.workItemManager=new WorkItemManager(this);
  this.processInstanceFactories.put(RuleFlowProcess.RULEFLOW_TYPE,new RuleFlowProcessInstanceFactory());
  this.typeConfReg=new ObjectTypeConfigurationRegistry(this.ruleBase);
  this.entryPoint=EntryPoint.DEFAULT;
  this.entryPointNode=this.ruleBase.getRete().getEntryPointNode(this.entryPoint);
  this.entryPoints=new ConcurrentHashMap();
  this.entryPoints.put("DEFAULT",this);
}
