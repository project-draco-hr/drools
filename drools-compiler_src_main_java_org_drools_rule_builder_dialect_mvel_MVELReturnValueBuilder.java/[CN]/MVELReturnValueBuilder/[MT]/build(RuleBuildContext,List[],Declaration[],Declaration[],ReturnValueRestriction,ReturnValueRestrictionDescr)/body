{
  Map previousMap=new HashMap();
  for (int i=0, length=previousDeclarations.length; i < length; i++) {
    previousMap.put(previousDeclarations[i].getIdentifier(),previousDeclarations[i]);
  }
  Map localMap=new HashMap();
  for (int i=0, length=localDeclarations.length; i < length; i++) {
    localMap.put(localDeclarations[i].getIdentifier(),localDeclarations[i]);
  }
  final DroolsMVELFactory factory=new DroolsMVELFactory(previousMap,localMap,context.getPkg().getGlobals());
  factory.setNextFactory(((MVELDialect)context.getDialect()).getClassImportResolverFactory());
  final ParserContext parserContext=new ParserContext(((MVELDialect)context.getDialect()).getClassImportResolverFactory().getImportedClasses(),null,null);
  parserContext.setStrictTypeEnforcement(true);
  Dialect.AnalysisResult analysis=context.getDialect().analyzeExpression(context,returnValueRestrictionDescr,returnValueRestrictionDescr.getContent());
  final Serializable expr=((MVELDialect)context.getDialect()).compile((String)returnValueRestrictionDescr.getContent(),analysis,null,null,context);
  returnValueRestriction.setReturnValueExpression(new MVELReturnValueExpression(expr,factory));
}
