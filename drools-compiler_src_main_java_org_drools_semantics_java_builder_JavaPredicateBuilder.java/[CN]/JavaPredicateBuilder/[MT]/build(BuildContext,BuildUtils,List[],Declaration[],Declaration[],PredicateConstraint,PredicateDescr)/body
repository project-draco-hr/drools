{
  final String className="predicate" + context.getNextId();
  predicateDescr.setClassMethodName(className);
  StringTemplate st=utils.getRuleGroup().getInstanceOf("predicateMethod");
  utils.setStringTemplateAttributes(context,st,previousDeclarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]));
  final String[] localDeclarationTypes=new String[localDeclarations.length];
  for (int i=0, size=localDeclarations.length; i < size; i++) {
    localDeclarationTypes[i]=utils.getTypeFixer().fix(localDeclarations[i]);
  }
  st.setAttribute("localDeclarations",localDeclarations);
  st.setAttribute("localDeclarationTypes",localDeclarationTypes);
  st.setAttribute("methodName",className);
  final String predicateText=predicateDescr.getText();
  st.setAttribute("text",predicateText);
  context.getMethods().add(st.toString());
  st=utils.getInvokerGroup().getInstanceOf("predicateInvoker");
  st.setAttribute("package",context.getPkg().getName());
  st.setAttribute("ruleClassName",utils.ucFirst(context.getRuleDescr().getClassName()));
  st.setAttribute("invokerClassName",context.getRuleDescr().getClassName() + utils.ucFirst(className) + "Invoker");
  st.setAttribute("methodName",className);
  utils.setStringTemplateAttributes(context,st,previousDeclarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]));
  st.setAttribute("localDeclarations",localDeclarations);
  st.setAttribute("localDeclarationTypes",localDeclarationTypes);
  st.setAttribute("hashCode",predicateText.hashCode());
  final String invokerClassName=context.getPkg().getName() + "." + context.getRuleDescr().getClassName()+ utils.ucFirst(className)+ "Invoker";
  context.getInvokers().put(invokerClassName,st.toString());
  context.getInvokerLookups().put(invokerClassName,predicateConstraint);
  context.getDescrLookups().put(invokerClassName,predicateDescr);
}
