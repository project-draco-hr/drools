{
  Map map=new HashMap();
  Map files=new HashMap();
  Map invokers=new HashMap();
  files.put("invokers",invokers);
  List conditions=rule.getConditions();
  Iterator it=conditions.iterator();
  SemanticRule condition=null;
  SemanticRuleCompiler compiler=null;
  Object object=null;
  while (it.hasNext()) {
    object=it.next();
    if (!(object instanceof SemanticRule)) {
      continue;
    }
    condition=(SemanticRule)object;
    compiler=condition.getSemanticRuleCompiler();
    List list=(List)map.get(compiler);
    if (list == null) {
      list=new ArrayList();
    }
    list.add(condition);
    map.put(compiler,list);
  }
  List list=null;
  Consequence consequence=rule.getConsequence();
  if (consequence instanceof SemanticRule) {
    compiler=((SemanticRule)consequence).getSemanticRuleCompiler();
    list=(List)map.get(compiler);
    if (list == null) {
      list=new ArrayList();
    }
    list.add(consequence);
    map.put(compiler,list);
  }
  it=map.keySet().iterator();
  RuleComponent[] components=null;
  String semanticPackageName=null;
  String name=null;
  String className=null;
  List declarations=null;
  while (it.hasNext()) {
    Set imports=new HashSet();
    imports.addAll(rule.getImporter().getImports());
    compiler=(SemanticRuleCompiler)it.next();
    list=(List)map.get(compiler);
    components=(RuleComponent[])list.toArray(new RuleComponent[list.size()]);
    name=rule.getName();
    className=(String)ruleNameMap.get(rule.getName());
    if (className == null) {
      semanticPackageName=packageName + "." + compiler.getSemanticType();
      className=generateUniqueLegalName(semanticPackageName,src,name.toUpperCase().charAt(0) + name.substring(1),"." + compiler.getSemanticType());
      ruleNameMap.put(rule,className);
    }
    declarations=rule.getParameterDeclarations();
    compiler.generate(components,(Declaration[])declarations.toArray(new Declaration[declarations.size()]),imports,rule.getApplicationData(),semanticPackageName,className,(String)parents.get(compiler.getSemanticType()),knowledgeHelper,src,files);
  }
  compile(files,src,dst,classLoader);
  compile(invokers,src,dst,classLoader);
}
