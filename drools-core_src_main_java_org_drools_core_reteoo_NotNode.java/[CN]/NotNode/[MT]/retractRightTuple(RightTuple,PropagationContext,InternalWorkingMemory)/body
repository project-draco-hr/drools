{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  if (isUnlinkingEnabled()) {
    RightTupleSets stagedRightTuples=memory.getStagedRightTuples();
    boolean stagedDeleteWasEmpty=false;
    if (streamMode) {
      stagedDeleteWasEmpty=memory.getSegmentMemory().getTupleQueue().isEmpty();
      memory.getSegmentMemory().getTupleQueue().add(new RightTupleEntry(rightTuple,rightTuple.getPropagationContext(),memory));
    }
 else {
      stagedDeleteWasEmpty=stagedRightTuples.addDelete(rightTuple);
    }
    if (memory.getAndDecCounter() == 1 && isEmptyBetaConstraints()) {
      memory.linkNode(workingMemory);
    }
 else     if (stagedDeleteWasEmpty) {
      memory.getSegmentMemory().notifyRuleLinkSegment(workingMemory);
    }
    return;
  }
  RightTupleMemory rtm=memory.getRightTupleMemory();
  if (rightTuple.getBlocked() != null) {
    updateLeftTupleToNewBlocker(rightTuple,context,workingMemory,memory,memory.getLeftTupleMemory(),rightTuple.getBlocked(),rtm,false);
    rightTuple.nullBlocked();
  }
 else {
    rtm.remove(rightTuple);
  }
  this.constraints.resetTuple(memory.getContext());
}
