{
  SegmentMemory[] smems=pmem.getSegmentMemories();
  LeftTupleNode node;
  Memory mem;
  long bit=1;
  if (sm.getRootNode().getType() == NodeTypeEnums.LeftInputAdapterNode && sm.getTipNode().getType() != NodeTypeEnums.LeftInputAdapterNode) {
    node=sm.getRootNode().getSinkPropagator().getFirstLeftTupleSink();
    mem=sm.getNodeMemories().get(1);
    bit=2;
  }
 else {
    node=sm.getRootNode();
    mem=sm.getNodeMemories().get(0);
  }
  PathMemory rtnPmem;
  if (NodeTypeEnums.isTerminalNode(pmem.getPathEndNode())) {
    rtnPmem=pmem;
  }
 else {
    rtnPmem=wm.getNodeMemory((AbstractTerminalNode)pmem.getPathEndNode().getPathEndNodes()[0]);
  }
  new RuleNetworkEvaluator().outerEval(pmem,node,bit,mem,smems,sm.getPos(),leftTupleSets,wm,new LinkedList<StackEntry>(),true,rtnPmem.getOrCreateRuleAgendaItem(wm).getRuleExecutor());
}
