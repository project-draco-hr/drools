{
  for (LeftTupleSinkNode sink=lt.getSinkPropagator().getLastLeftTupleSink(); sink != null; sink=sink.getPreviousLeftTupleSinkNode()) {
    if (sink == tn) {
      continue;
    }
    if (hasProtos) {
      if (isBelowNewSplit) {
        if (isRootNode(sink,null)) {
          kBase.invalidateSegmentPrototype(sink);
        }
      }
 else {
        isBelowNewSplit=isSplit(sink);
        if (isBelowNewSplit) {
          invalidateRootNode(kBase,sink);
        }
      }
    }
    if (NodeTypeEnums.isLeftTupleSource(sink)) {
      if (hasWms && SegmentUtilities.isTipNode(sink,null)) {
        if (isUnsharedSinkForRule(tn.getRule(),sink)) {
          endNodes.subjectSplits.add(sink);
        }
 else {
          endNodes.otherSplits.add(sink);
        }
      }
      collectPathEndNodes(kBase,sink,endNodes,tn,processedRule,hasProtos,hasWms,isBelowNewSplit);
    }
 else     if (NodeTypeEnums.isTerminalNode(sink)) {
      endNodes.otherEndNodes.add((PathEndNode)sink);
    }
 else     if (NodeTypeEnums.RightInputAdaterNode == sink.getType()) {
      if (isUnsharedSinkForRule(tn.getRule(),sink)) {
        endNodes.subjectEndNodes.add((PathEndNode)sink);
      }
 else {
        endNodes.otherEndNodes.add((PathEndNode)sink);
      }
    }
 else {
      throw new RuntimeException("Error: Unknown Node. Defensive programming test..");
    }
  }
}
