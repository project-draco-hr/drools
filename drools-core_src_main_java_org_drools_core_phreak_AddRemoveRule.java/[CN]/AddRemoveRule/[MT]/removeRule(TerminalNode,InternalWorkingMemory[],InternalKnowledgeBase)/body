{
  if (log.isTraceEnabled()) {
    log.trace("Removing Rule {}",tn.getRule().getName());
  }
  LeftTupleSource splitStartNode=getNetworkSplitPoint(tn);
  kBase.invalidateSegmentPrototype(splitStartNode,true);
  for (  InternalWorkingMemory wm : wms) {
    PathMemory removedPmem=wm.getNodeMemory(tn);
    int s=getSegmentPos(splitStartNode,null);
    flushSegmentIfMerge(wm,tn,splitStartNode,s);
    flushStagedTuples(splitStartNode,removedPmem,wm,true);
    wm.flushPropagations();
    if (NodeTypeEnums.LeftInputAdapterNode == splitStartNode.getType() && splitStartNode.getAssociations().size() == 1) {
      deleteLiaFacts(splitStartNode,wm);
    }
    LeftTupleSink sink;
    if (splitStartNode.getAssociations().size() == 1) {
      SegmentMemory sm=removedPmem.getSegmentMemories()[s];
      if (sm == null) {
        continue;
      }
      sink=((LeftInputAdapterNode)sm.getRootNode()).getSinkPropagator().getFirstLeftTupleSink();
    }
 else {
      SegmentMemory sm=removedPmem.getSegmentMemories()[s + 1];
      if (sm == null) {
        continue;
      }
      sink=(LeftTupleSink)removedPmem.getSegmentMemories()[s + 1].getRootNode();
    }
    deleteFacts(sink,wm);
    if (splitStartNode.getAssociations().size() > 1) {
      List<PathMemory> pathMems=new ArrayList<PathMemory>();
      collectRtnPathMemories(splitStartNode,wm,pathMems,tn);
      List<SegmentMemory[]> previousSmems=reInitPathMemories(wm,pathMems,tn.getRule());
      if (splitStartNode.getSinkPropagator().size() == 2) {
        int p=0;
        for (        PathMemory pmem : pathMems) {
          SegmentMemory[] smems=previousSmems.get(p);
          for (int i=0; i < smems.length; i++) {
            SegmentMemory sm=smems[i];
            if (sm == null) {
              continue;
            }
            if (i < s) {
              correctSegmentBeforeSplitOnRemove(wm,removedPmem,pmem,sm,p);
            }
 else             if (i == s) {
              if (smems[i + 1] != null) {
                correctSegmentOnSplitOnRemove(wm,sm,smems[i + 1],pmem,removedPmem,p);
                i++;
              }
            }
 else             if (i > s) {
              correctSegmentAfterSplitOnRemove(wm,pmem,i,sm);
            }
          }
          p++;
        }
      }
 else {
        int p=0;
        for (        PathMemory pmem : pathMems) {
          SegmentMemory[] smems=previousSmems.get(p++);
          for (int i=0; i < pmem.getSegmentMemories().length; i++) {
            if (smems[i] == null) {
              continue;
            }
            smems[i].removePathMemory(removedPmem);
            pmem.setSegmentMemory(i,smems[i]);
          }
        }
      }
    }
    if (removedPmem.getRuleAgendaItem() != null && removedPmem.getRuleAgendaItem().isQueued()) {
      removedPmem.getRuleAgendaItem().dequeue();
    }
  }
}
