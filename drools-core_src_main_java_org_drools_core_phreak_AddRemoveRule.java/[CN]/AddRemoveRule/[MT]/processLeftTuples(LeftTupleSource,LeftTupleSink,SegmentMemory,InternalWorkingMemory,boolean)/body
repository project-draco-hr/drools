{
  List<LeftTupleSink> sinks=new ArrayList<LeftTupleSink>();
  sinks.add(peerNode);
  while (NodeTypeEnums.LeftInputAdapterNode != node.getType()) {
    Memory memory=wm.getNodeMemory((MemoryFactory)node);
    if (memory.getSegmentMemory() == null) {
      return;
    }
    if (NodeTypeEnums.isBetaNode(node)) {
      BetaMemory bm;
      if (NodeTypeEnums.AccumulateNode == node.getType()) {
        AccumulateMemory am=(AccumulateMemory)memory;
        bm=am.getBetaMemory();
        FastIterator it=bm.getLeftTupleMemory().fullFastIterator();
        LeftTuple lt=BetaNode.getFirstLeftTuple(bm.getLeftTupleMemory(),it);
        for (; lt != null; lt=(LeftTuple)it.next(lt)) {
          AccumulateContext accctx=(AccumulateContext)lt.getObject();
          followPeer(accctx.getResultLeftTuple(),smem,sinks,sinks.size() - 1,insert);
        }
      }
 else       if (NodeTypeEnums.ExistsNode == node.getType()) {
        bm=(BetaMemory)wm.getNodeMemory((MemoryFactory)node);
        FastIterator it=bm.getRightTupleMemory().fullFastIterator();
        RightTuple rt=BetaNode.getFirstRightTuple(bm.getRightTupleMemory(),it);
        for (; rt != null; rt=(RightTuple)it.next(rt)) {
          for (LeftTuple lt=rt.getBlocked(); lt != null; lt=lt.getBlockedNext()) {
            if (lt.getFirstChild() != null) {
              followPeer(lt.getFirstChild(),smem,sinks,sinks.size() - 1,insert);
            }
          }
        }
      }
 else {
        bm=(BetaMemory)wm.getNodeMemory((MemoryFactory)node);
        FastIterator it=bm.getLeftTupleMemory().fullFastIterator();
        LeftTuple lt=BetaNode.getFirstLeftTuple(bm.getLeftTupleMemory(),it);
        for (; lt != null; lt=(LeftTuple)it.next(lt)) {
          if (lt.getFirstChild() != null) {
            followPeerFromLeftInput(lt.getFirstChild(),smem,sinks,insert);
          }
        }
      }
      return;
    }
 else     if (NodeTypeEnums.FromNode == node.getType()) {
      FromMemory fm=(FromMemory)wm.getNodeMemory((MemoryFactory)node);
      LeftTupleMemory ltm=fm.getBetaMemory().getLeftTupleMemory();
      FastIterator it=ltm.fullFastIterator();
      for (LeftTuple lt=ltm.getFirst(null); lt != null; lt=(LeftTuple)it.next(lt)) {
        if (lt.getFirstChild() != null) {
          followPeerFromLeftInput(lt.getFirstChild(),smem,sinks,insert);
        }
      }
      return;
    }
    sinks.add((LeftTupleSink)node);
    node=node.getLeftTupleSource();
  }
  LeftInputAdapterNode lian=(LeftInputAdapterNode)node;
  Memory memory=wm.getNodeMemory((MemoryFactory)node);
  if (memory.getSegmentMemory() == null) {
    return;
  }
  ObjectSource os=lian.getObjectSource();
  while (os.getType() != NodeTypeEnums.ObjectTypeNode) {
    os=os.getParentObjectSource();
  }
  ObjectTypeNode otn=(ObjectTypeNode)os;
  final ObjectTypeNodeMemory omem=wm.getNodeMemory(otn);
  LeftTupleSink firstLiaSink=lian.getSinkPropagator().getFirstLeftTupleSink();
  Iterator<InternalFactHandle> it=omem.iterator();
  while (it.hasNext()) {
    InternalFactHandle fh=it.next();
    if (fh.getFirstLeftTuple() != null) {
      for (LeftTuple childLt=fh.getFirstLeftTuple(); childLt != null; childLt=childLt.getLeftParentNext()) {
        if (childLt.getSink() == firstLiaSink) {
          followPeer(childLt,smem,sinks,sinks.size() - 1,insert);
        }
      }
    }
  }
}
