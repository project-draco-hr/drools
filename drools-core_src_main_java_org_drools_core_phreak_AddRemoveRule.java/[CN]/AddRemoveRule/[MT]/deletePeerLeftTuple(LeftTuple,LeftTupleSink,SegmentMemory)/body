{
  LeftTuple peer=lt;
  LeftTuple previousPeer=null;
  while (peer.getTupleSink() != newNode) {
    previousPeer=peer;
    peer=peer.getPeer();
  }
switch (peer.getStagedType()) {
case LeftTuple.INSERT:
{
      smem.getStagedLeftTuples().removeInsert(peer);
      break;
    }
case LeftTuple.UPDATE:
{
    smem.getStagedLeftTuples().removeUpdate(peer);
  }
case LeftTuple.NONE:
{
  smem.getStagedLeftTuples().addDelete(peer);
}
case LeftTuple.DELETE:
{
}
}
if (previousPeer == null) {
LeftTuple leftPrevious=peer.getHandlePrevious();
LeftTuple leftNext=peer.getHandleNext();
LeftTuple rightPrevious=peer.getRightParentPrevious();
LeftTuple rightNext=peer.getRightParentNext();
LeftTuple newPeer=peer.getPeer();
if (newPeer != null) {
replaceChildLeftTuple(peer,leftPrevious,leftNext,rightPrevious,rightNext,newPeer);
}
 else {
lt.unlinkFromLeftParent();
lt.unlinkFromRightParent();
}
}
 else {
previousPeer.setPeer(peer.getPeer());
}
}
