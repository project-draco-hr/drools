{
  PathMemory pmem=streamMode ? sm.getPathMemories().get(0) : sm.getFirstDataDrivenPathMemory();
  if (pmem == null) {
    return false;
  }
  if (!streamMode && leftTuple == null && !pmem.isRuleLinked()) {
    pmem=null;
    List<PathMemory> dataDrivenPmems=sm.getDataDrivenPathMemories();
    for (int i=1; i < dataDrivenPmems.size(); i++) {
      if (dataDrivenPmems.get(i).isRuleLinked()) {
        pmem=dataDrivenPmems.get(i);
        break;
      }
    }
    if (pmem == null) {
      return false;
    }
  }
  TupleSets<LeftTuple> leftTupleSets=new TupleSetsImpl<LeftTuple>();
  if (leftTuple != null) {
    leftTupleSets.addInsert(leftTuple);
  }
  forceFlushLeftTuple(pmem,sm,wm,leftTupleSets);
  if (pmem.isDataDriven() && pmem.getNodeType() == NodeTypeEnums.RightInputAdaterNode) {
    for (    PathEndNode pnode : pmem.getPathEndNode().getPathEndNodes()) {
      if (pnode instanceof TerminalNode) {
        PathMemory outPmem=wm.getNodeMemory((TerminalNode)pnode);
        if (outPmem.isDataDriven()) {
          SegmentMemory outSmem=outPmem.getSegmentMemories()[0];
          if (outSmem != null) {
            forceFlushLeftTuple(outPmem,outSmem,wm,new TupleSetsImpl<LeftTuple>());
          }
        }
      }
    }
  }
  return true;
}
