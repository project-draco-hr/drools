{
  Set<Integer> visitedNodes=new HashSet<Integer>();
  for (  PathMemory pmem : pmems) {
    LeftTupleSink tipNode=(LeftTupleSink)pmem.getPathEndNode();
    LeftTupleNode child=tipNode;
    LeftTupleNode parent=tipNode.getLeftTupleSource();
    while (true) {
      if (child.getAssociationsSize() == 1 && NodeTypeEnums.isBetaNode(child)) {
        deleteRightInputData((LeftTupleSink)child,wm);
      }
      if (parent != null && parent.getAssociationsSize() != 1 && child.getAssociationsSize() == 1) {
        if (!visitedNodes.contains(child.getId())) {
          Memory mem=wm.getNodeMemories().peekNodeMemory(parent.getId());
          if (mem != null && mem.getSegmentMemory() != null) {
            SegmentMemory sm=mem.getSegmentMemory();
            if (sm.getFirst() != null) {
              SegmentMemory childSm=wm.getNodeMemories().peekNodeMemory(child.getId()).getSegmentMemory();
              sm.remove(childSm);
            }
          }
        }
      }
 else {
        Memory mem=wm.getNodeMemories().peekNodeMemory(child.getId());
        if (mem != null) {
          SegmentMemory sm=mem.getSegmentMemory();
          if (sm != null && sm.getPathMemories().contains(pmem)) {
            mem.getSegmentMemory().removePathMemory(pmem);
          }
        }
      }
      if (parent == null) {
        break;
      }
      visitedNodes.add(child.getId());
      child=parent;
      parent=parent.getLeftTupleSource();
    }
  }
}
