{
  LeftTupleSink lts=startNode;
  while (!NodeTypeEnums.isTerminalNode(lts) && lts.getLeftTupleSource().getType() != NodeTypeEnums.RightInputAdaterNode) {
    if (NodeTypeEnums.isBetaNode(lts)) {
      BetaNode bn=(BetaNode)lts;
      if (!bn.isRightInputIsRiaNode()) {
        BetaMemory bm;
        if (bn.getType() == NodeTypeEnums.AccumulateNode) {
          bm=((AccumulateMemory)wm.getNodeMemory(bn)).getBetaMemory();
        }
 else {
          bm=(BetaMemory)wm.getNodeMemory(bn);
        }
        RightTupleMemory rtm=bm.getRightTupleMemory();
        FastIterator it=rtm.fullFastIterator();
        for (RightTuple rightTuple=BetaNode.getFirstRightTuple(rtm,it); rightTuple != null; ) {
          RightTuple next=(RightTuple)it.next(rightTuple);
          rtm.remove(rightTuple);
          rightTuple.unlinkFromRightParent();
          rightTuple=next;
        }
        ObjectSource os=bn.getRightInput();
        while (os.getType() != NodeTypeEnums.ObjectTypeNode) {
          os=os.getParentObjectSource();
        }
        ObjectTypeNode otn=(ObjectTypeNode)os;
        final ObjectTypeNodeMemory omem=(ObjectTypeNodeMemory)wm.getNodeMemory(otn);
        Iterator otnIt=omem.getObjectHashSet().iterator();
        for (ObjectEntry entry=(ObjectEntry)otnIt.next(); entry != null; entry=(ObjectEntry)otnIt.next()) {
          InternalFactHandle fh=(InternalFactHandle)entry.getValue();
          for (RightTuple childRt=fh.getFirstRightTuple(); childRt != null; ) {
            RightTuple next=childRt.getHandleNext();
            if (childRt.getRightTupleSink() == bn) {
              fh.removeRightTuple(childRt);
            }
            childRt=next;
          }
        }
      }
 else {
        deleteSubnetworkFacts(bn,wm);
      }
    }
 else     if (lts.getType() == NodeTypeEnums.RightInputAdaterNode) {
      return;
    }
    lts=((LeftTupleSource)lts).getSinkPropagator().getFirstLeftTupleSink();
  }
}
