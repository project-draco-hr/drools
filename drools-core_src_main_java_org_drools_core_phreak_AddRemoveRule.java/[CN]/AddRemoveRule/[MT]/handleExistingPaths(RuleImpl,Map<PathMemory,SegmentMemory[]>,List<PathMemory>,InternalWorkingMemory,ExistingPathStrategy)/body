{
  Set<SegmentMemory> smemsToNotify=new HashSet<SegmentMemory>();
  Set<SegmentMemory> visitedSegments=new HashSet<SegmentMemory>();
  Set<LeftTupleNode> visitedNodes=new HashSet<LeftTupleNode>();
  Map<LeftTupleNode,SegmentMemory> nodeToSegmentMap=new HashMap<LeftTupleNode,SegmentMemory>();
  for (  PathMemory pmem : pmems) {
    LeftTupleNode[] nodes=pmem.getPathEndNode().getPathNodes();
    SegmentMemory[] prevSmems=prevSmemsLookup.get(pmem);
    SegmentMemory[] smems=strategy.getSegmenMemories(pmem);
    LeftTupleNode node;
    int prevSmemIndex=0;
    int smemIndex=0;
    int smemSplitAdjustAmount=0;
    int nodeIndex=0;
    int nodeTypesInSegment=0;
    smems[smemIndex]=prevSmems[prevSmemIndex];
    do {
      node=nodes[nodeIndex++];
      LeftTupleNode parentNode=node.getLeftTupleSource();
      nodeTypesInSegment=SegmentUtilities.updateNodeTypesMask(parentNode,nodeTypesInSegment);
      if (isSplit(parentNode)) {
        smemIndex=strategy.incSmemIndex1(smemIndex);
        prevSmemIndex=strategy.incPrevSmemIndex1(prevSmemIndex);
        if (isSplit(parentNode,rule)) {
          smemIndex=strategy.incSmemIndex2(smemIndex);
          prevSmemIndex=strategy.incPrevSmemIndex2(prevSmemIndex);
          smems[smemIndex]=prevSmems[prevSmemIndex];
          if (smems[smemIndex] != null && smemSplitAdjustAmount > 0 && visitedSegments.add(smems[smemIndex])) {
            strategy.adjustSegment(wm,smemsToNotify,smems[smemIndex],smemSplitAdjustAmount);
          }
        }
 else {
          strategy.handleSplit(pmem,prevSmems,smems,smemIndex,prevSmemIndex,parentNode,node,rule,visitedNodes,smemsToNotify,nodeToSegmentMap,wm);
          smemSplitAdjustAmount++;
        }
        SegmentUtilities.checkEagerSegmentCreation((LeftTupleSource)parentNode,wm,nodeTypesInSegment);
        nodeTypesInSegment=0;
      }
    }
 while (!NodeTypeEnums.isEndNode(node));
    strategy.processSegmentMemories(smems,pmem);
  }
  return smemsToNotify;
}
