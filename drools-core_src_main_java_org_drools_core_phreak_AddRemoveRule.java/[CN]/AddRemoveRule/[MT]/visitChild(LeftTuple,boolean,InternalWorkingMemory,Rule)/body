{
  LeftTuple prevLt=null;
  LeftTupleSinkNode sink=lt.getTupleSink();
  for (; sink != null; sink=sink.getNextLeftTupleSinkNode()) {
    if (lt != null) {
      if (lt.getTupleSink().isAssociatedWith(rule)) {
        if (lt.getTupleSink().getAssociationsSize() > 1) {
          if (lt.getFirstChild() != null) {
            for (LeftTuple child=lt.getFirstChild(); child != null; child=child.getHandleNext()) {
              visitChild(child,insert,wm,rule);
            }
          }
 else           if (lt.getTupleSink().getType() == NodeTypeEnums.RightInputAdaterNode) {
            insertPeerRightTuple(lt,wm,rule,insert);
          }
        }
 else         if (!insert) {
          iterateLeftTuple(lt,wm);
          LeftTuple lt2=null;
          for (LeftTuple peerLt=lt.getPeer(); peerLt != null && peerLt.getTupleSink().isAssociatedWith(rule) && peerLt.getTupleSink().getAssociationsSize() == 1; peerLt=peerLt.getPeer()) {
            iterateLeftTuple(peerLt,wm);
            lt2=peerLt;
          }
          deleteLeftTuple(lt,lt2,prevLt);
          break;
        }
      }
      prevLt=lt;
      lt=lt.getPeer();
    }
 else {
      prevLt=insertPeerLeftTuple(prevLt,sink,wm);
    }
  }
}
