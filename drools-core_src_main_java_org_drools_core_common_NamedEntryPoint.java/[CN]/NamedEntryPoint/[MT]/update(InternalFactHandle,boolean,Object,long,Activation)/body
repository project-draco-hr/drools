{
  try {
    this.lock.lock();
    this.ruleBase.readLock();
    this.wm.startOperation();
    this.ruleBase.executeQueuedActions();
    if (handle.isDisconnected()) {
      handle=this.objectStore.reconnect(handle);
    }
    final Object originalObject=handle.getObject();
    if (handle.getEntryPoint() != this) {
      throw new IllegalArgumentException("Invalid Entry Point. You updated the FactHandle on entry point '" + handle.getEntryPoint().getEntryPointId() + "' instead of '"+ getEntryPointId()+ "'");
    }
    final ObjectTypeConf typeConf=this.typeConfReg.getObjectTypeConf(this.entryPoint,object);
    int status=-1;
    if (typeConf.isTMSEnabled()) {
      status=handle.getEqualityKey().getStatus();
    }
    if (handle.getId() == -1 || object == null || (handle.isEvent() && ((EventFactHandle)handle).isExpired())) {
      return handle;
    }
    if (activation != null) {
      activation.getPropagationContext().releaseResources();
    }
    if (originalObject != object || !AssertBehaviour.IDENTITY.equals(this.ruleBase.getConfiguration().getAssertBehaviour())) {
      this.objectStore.removeHandle(handle);
      handle.setObject(object);
      this.objectStore.addHandle(handle,object);
    }
    this.handleFactory.increaseFactHandleRecency(handle);
    Rule rule=activation == null ? null : activation.getRule();
    final PropagationContext propagationContext=new PropagationContextImpl(this.wm.getNextPropagationIdCounter(),PropagationContext.MODIFICATION,rule,(activation == null) ? null : activation.getTuple(),handle,this.wm.agenda.getActiveActivations(),this.wm.agenda.getDormantActivations(),entryPoint,mask);
    if (typeConf.isTMSEnabled()) {
      EqualityKey newKey=tms.get(object);
      EqualityKey oldKey=handle.getEqualityKey();
      if (newKey == null) {
        if (oldKey.getStatus() == EqualityKey.JUSTIFIED) {
          TruthMaintenanceSystemHelper.removeLogicalDependencies(oldKey.getFactHandle(),propagationContext);
        }
        oldKey.removeFactHandle(handle);
        if (oldKey.isEmpty()) {
          getTruthMaintenanceSystem().remove(oldKey);
        }
        newKey=new EqualityKey(handle,EqualityKey.STATED);
        handle.setEqualityKey(newKey);
        getTruthMaintenanceSystem().put(newKey);
      }
 else       if (newKey != oldKey) {
        oldKey.removeFactHandle(handle);
        if (oldKey.isEmpty()) {
          getTruthMaintenanceSystem().remove(oldKey);
        }
        if (newKey.getStatus() == EqualityKey.JUSTIFIED) {
          TruthMaintenanceSystemHelper.removeLogicalDependencies(newKey.getFactHandle(),propagationContext);
          newKey.setStatus(EqualityKey.STATED);
        }
        handle=newKey.getFactHandle();
      }
 else       if (!updateLogical && oldKey.getStatus() == EqualityKey.JUSTIFIED) {
        TruthMaintenanceSystemHelper.removeLogicalDependencies(oldKey.getFactHandle(),propagationContext);
      }
    }
    this.entryPointNode.modifyObject(handle,propagationContext,typeConf,this.wm);
    propagationContext.evaluateActionQueue(this.wm);
    this.wm.workingMemoryEventSupport.fireObjectUpdated(propagationContext,handle,originalObject,object,this.wm);
    this.wm.executeQueuedActions();
    if (rule == null) {
      this.wm.getAgenda().unstageActivations();
    }
  }
  finally {
    this.wm.endOperation();
    this.ruleBase.readUnlock();
    this.lock.unlock();
  }
  return handle;
}
