{
  Object object=null;
  try {
    object=((InternalFactHandle)handle).getObject();
    if (dynamicFacts != null && removeFromSet) {
      dynamicFacts.remove(object);
    }
    if (object != null) {
      final Method mehod=object.getClass().getMethod("removePropertyChangeListener",NamedEntryPoint.ADD_REMOVE_PROPERTY_CHANGE_LISTENER_ARG_TYPES);
      mehod.invoke(object,this.addRemovePropertyChangeListenerArgs);
    }
  }
 catch (  final NoSuchMethodException e) {
  }
catch (  final IllegalArgumentException e) {
    throw new RuntimeException("Warning: The removePropertyChangeListener method on the class " + object.getClass() + " does not take a simple PropertyChangeListener argument so Drools will be unable to stop processing JavaBean"+ " PropertyChangeEvents on the retracted Object");
  }
catch (  final IllegalAccessException e) {
    throw new RuntimeException("Warning: The removePropertyChangeListener method on the class " + object.getClass() + " is not public so Drools will be unable to stop processing JavaBean PropertyChangeEvents on the retracted Object");
  }
catch (  final InvocationTargetException e) {
    throw new RuntimeException("Warning: The removePropertyChangeL istener method on the class " + object.getClass() + " threw an InvocationTargetException so Drools will be unable to stop processing JavaBean"+ " PropertyChangeEvents on the retracted Object: "+ e.getMessage());
  }
catch (  final SecurityException e) {
    throw new RuntimeException("Warning: The SecurityManager controlling the class " + object.getClass() + " did not allow the lookup of a removePropertyChangeListener method so Drools will be unable to stop processing JavaBean"+ " PropertyChangeEvents on the retracted Object: "+ e.getMessage());
  }
}
