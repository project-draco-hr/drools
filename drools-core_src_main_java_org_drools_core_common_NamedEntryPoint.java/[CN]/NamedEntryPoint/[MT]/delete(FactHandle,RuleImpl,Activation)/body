{
  if (factHandle == null) {
    throw new IllegalArgumentException("FactHandle cannot be null ");
  }
  try {
    this.kBase.readLock();
    this.lock.lock();
    this.wm.startOperation();
    this.kBase.executeQueuedActions();
    InternalFactHandle handle=(InternalFactHandle)factHandle;
    if (handle.getId() == -1) {
      return;
    }
    if (handle.isDisconnected()) {
      handle=this.objectStore.reconnect(handle);
    }
    final EqualityKey key=handle.getEqualityKey();
    if (key != null && key.getLogicalFactHandle() == handle) {
      throw new IllegalArgumentException("The FactHandle did not originate from WM : " + handle);
    }
    if (handle.isTraitable()) {
      traitHelper.deleteWMAssertedTraitProxies(handle,rule,activation);
    }
    if (handle.getEntryPoint() != this) {
      throw new IllegalArgumentException("Invalid Entry Point. You updated the FactHandle on entry point '" + handle.getEntryPoint().getEntryPointId() + "' instead of '"+ getEntryPointId()+ "'");
    }
    final Object object=handle.getObject();
    final ObjectTypeConf typeConf=this.typeConfReg.getObjectTypeConf(this.entryPoint,object);
    if (typeConf.isSupportsPropertyChangeListeners()) {
      removePropertyChangeListener(handle,true);
    }
    if (activation != null) {
      activation.getPropagationContext().releaseResources();
    }
    PropagationContext propagationContext=delete(handle,object,typeConf,rule,activation);
    if (typeConf.isTMSEnabled()) {
      TruthMaintenanceSystem tms=getTruthMaintenanceSystem();
      key.removeFactHandle(handle);
      handle.setEqualityKey(null);
      if (key.isEmpty() && key.getLogicalFactHandle() == null) {
        tms.remove(key);
      }
 else       if (key.getLogicalFactHandle() != null) {
        final InternalFactHandle justifiedHandle=key.getLogicalFactHandle();
        BeliefSet bs=justifiedHandle.getEqualityKey().getBeliefSet();
        bs.getBeliefSystem().unstage(propagationContext,bs);
      }
    }
    this.handleFactory.destroyFactHandle(handle);
  }
  finally {
    this.wm.endOperation();
    this.lock.unlock();
    this.kBase.readUnlock();
  }
}
