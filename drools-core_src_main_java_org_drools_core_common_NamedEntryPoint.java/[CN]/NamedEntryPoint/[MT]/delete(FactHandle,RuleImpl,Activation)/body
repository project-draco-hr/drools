{
  if (factHandle == null) {
    throw new IllegalArgumentException("FactHandle cannot be null ");
  }
  try {
    this.lock.lock();
    this.kBase.readLock();
    this.wm.startOperation();
    this.kBase.executeQueuedActions();
    InternalFactHandle handle=(InternalFactHandle)factHandle;
    if (handle.getId() == -1) {
      return;
    }
    if (handle.isDisconnected()) {
      handle=this.objectStore.reconnect(handle);
    }
    if (handle.isTraitable()) {
      TraitableBean traitableBean=(TraitableBean)handle.getObject();
      if (traitableBean.hasTraits()) {
        PriorityQueue<TraitProxy> removedTypes=new PriorityQueue<TraitProxy>(traitableBean._getTraitMap().values().size());
        removedTypes.addAll(traitableBean._getTraitMap().values());
        while (!removedTypes.isEmpty()) {
          TraitProxy proxy=removedTypes.poll();
          if (!proxy.isVirtual()) {
            delete(getFactHandle(proxy),rule,activation);
          }
        }
      }
    }
    if (handle.getEntryPoint() != this) {
      throw new IllegalArgumentException("Invalid Entry Point. You updated the FactHandle on entry point '" + handle.getEntryPoint().getEntryPointId() + "' instead of '"+ getEntryPointId()+ "'");
    }
    final Object object=handle.getObject();
    final ObjectTypeConf typeConf=this.typeConfReg.getObjectTypeConf(this.entryPoint,object);
    if (typeConf.isSupportsPropertyChangeListeners()) {
      removePropertyChangeListener(handle,true);
    }
    if (activation != null) {
      activation.getPropagationContext().releaseResources();
    }
    final PropagationContext propagationContext=pctxFactory.createPropagationContext(this.wm.getNextPropagationIdCounter(),PropagationContext.DELETION,rule,(activation == null) ? null : activation.getTuple(),handle,this.entryPoint);
    this.entryPointNode.retractObject(handle,propagationContext,typeConf,this.wm);
    if (typeConf.isTMSEnabled()) {
      TruthMaintenanceSystem tms=getTruthMaintenanceSystem();
      final EqualityKey key=handle.getEqualityKey();
      if (key.getStatus() == EqualityKey.JUSTIFIED) {
        TruthMaintenanceSystemHelper.removeLogicalDependencies(handle,propagationContext);
      }
      key.removeFactHandle(handle);
      handle.setEqualityKey(null);
      if (key.isEmpty()) {
        tms.remove(key);
      }
    }
    if (handle.isTraiting() && handle.getObject() instanceof TraitProxy) {
      (((TraitProxy)handle.getObject()).getObject()).removeTrait(((TraitProxy)handle.getObject()).getTypeCode());
    }
    propagationContext.evaluateActionQueue(this.wm);
    this.wm.getRuleRuntimeEventSupport().fireObjectRetracted(propagationContext,handle,object,this.wm);
    this.wm.executeQueuedActions();
    this.objectStore.removeHandle(handle);
    this.handleFactory.destroyFactHandle(handle);
    if (rule == null) {
      ((InternalAgenda)this.wm.getAgenda()).unstageActivations();
    }
  }
  finally {
    this.wm.endOperation();
    this.kBase.readUnlock();
    this.lock.unlock();
  }
}
