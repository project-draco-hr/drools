{
  SuggestionCompletionEngine sce=new SuggestionCompletionEngine();
  sce.setFieldsForTypes(new HashMap<String,ModelField[]>(){
{
      put("Driver",new ModelField[]{new ModelField("age",Integer.class.getName(),FIELD_CLASS_TYPE.REGULAR_CLASS,SuggestionCompletionEngine.TYPE_NUMERIC),new ModelField("name",String.class.getName(),FIELD_CLASS_TYPE.REGULAR_CLASS,SuggestionCompletionEngine.TYPE_STRING)});
    }
  }
);
  GuidedDecisionTable dt=new GuidedDecisionTable();
  AttributeCol at=new AttributeCol();
  at.attr="salience";
  AttributeCol at_=new AttributeCol();
  at_.attr="enabled";
  dt.attributeCols.add(at);
  dt.attributeCols.add(at_);
  ConditionCol c1=new ConditionCol();
  c1.boundName="c1";
  c1.factType="Driver";
  c1.factField="name";
  c1.operator="==";
  c1.constraintValueType=ISingleFieldConstraint.TYPE_LITERAL;
  dt.conditionCols.add(c1);
  ConditionCol c1_=new ConditionCol();
  c1_.boundName="c1";
  c1_.factType="Driver";
  c1_.factField="age";
  c1_.operator="==";
  c1_.constraintValueType=ISingleFieldConstraint.TYPE_LITERAL;
  dt.conditionCols.add(c1_);
  ConditionCol c2=new ConditionCol();
  c2.boundName="c1";
  c2.factType="Driver";
  c2.factField="age";
  c2.constraintValueType=ISingleFieldConstraint.TYPE_LITERAL;
  dt.conditionCols.add(c2);
  ActionSetFieldCol a=new ActionSetFieldCol();
  a.boundName="c1";
  a.factField="name";
  dt.actionCols.add(a);
  ActionSetFieldCol a2=new ActionSetFieldCol();
  a2.boundName="c1";
  a2.factField="age";
  dt.actionCols.add(a2);
  ActionInsertFactCol ins=new ActionInsertFactCol();
  ins.boundName="x";
  ins.factType="Driver";
  ins.factField="name";
  dt.actionCols.add(ins);
  ActionInsertFactCol ins_=new ActionInsertFactCol();
  ins_.boundName="x";
  ins_.factType="Driver";
  ins_.factField="age";
  dt.actionCols.add(ins_);
  assertTrue(dt.isNumeric(at,sce));
  assertFalse(dt.isNumeric(at_,sce));
  assertFalse(dt.isNumeric(c1,sce));
  assertTrue(dt.isNumeric(c1_,sce));
  assertFalse(dt.isNumeric(a,sce));
  assertTrue(dt.isNumeric(a2,sce));
  assertFalse(dt.isNumeric(ins,sce));
  assertTrue(dt.isNumeric(ins_,sce));
  assertFalse(dt.isNumeric(c2,sce));
}
