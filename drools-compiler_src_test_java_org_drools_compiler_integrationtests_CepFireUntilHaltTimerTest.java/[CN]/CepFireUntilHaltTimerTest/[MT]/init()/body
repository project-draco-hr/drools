{
  String drl="package org.drools.compiler.integrationtests\n" + "\n" + "import org.drools.compiler.integrationtests.CepFireUntilHaltTimerTest.MetadataEvent;\n"+ "import java.util.List;\n"+ "\n"+ "global List countResult;\n"+ "\n"+ "declare MetadataEvent\n"+ "    @role( event )\n"+ "    @timestamp( metadataTimestamp )\n"+ "    @duration( metadataDuration )\n"+ "    @expires (24h)\n"+ "end\n"+ "\n"+ "rule \"Number of metadata events in the last 10 seconds\"\n"+ "timer (int: 1s 10s)\n"+ "//timer (int: 0s 10s) // this works\n"+ "when\n"+ "    String( this == \"events_inserted\" )\n"+ "    $count: Number() from accumulate( $event: MetadataEvent() over window:time(10s),  count( $event ) )\n"+ "then\n"+ "    System.out.println(\"Events count: \" + $count);\n"+ "    countResult.add($count);\n"+ "end\n";
  KieServices ks=KieServices.Factory.get();
  KieModuleModel module=ks.newKieModuleModel();
  KieBaseModel defaultBase=module.newKieBaseModel("defaultKBase").setDefault(true).addPackage("*").setEventProcessingMode(EventProcessingOption.STREAM);
  defaultBase.newKieSessionModel("defaultKSession").setDefault(true).setClockType(ClockTypeOption.get("pseudo"));
  KieFileSystem kfs=ks.newKieFileSystem().write("src/main/resources/r1.drl",drl);
  kfs.writeKModuleXML(module.toXML());
  ks.newKieBuilder(kfs).buildAll();
  ksession=ks.newKieContainer(ks.getRepository().getDefaultReleaseId()).newKieSession();
  result=new ArrayList<Long>();
  ksession.setGlobal("countResult",result);
  clock=ksession.getSessionClock();
  ksession.insert(clock);
}
