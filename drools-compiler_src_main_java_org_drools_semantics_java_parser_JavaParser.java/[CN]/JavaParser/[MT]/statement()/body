{
  try {
    int alt41=17;
    alt41=dfa41.predict(input);
switch (alt41) {
case 1:
{
        following.push(FOLLOW_compoundStatement_in_statement1216);
        compoundStatement();
        following.pop();
      }
    break;
case 2:
{
    following.push(FOLLOW_declaration_in_statement1232);
    declaration();
    following.pop();
    match(input,SEMI,FOLLOW_SEMI_in_statement1234);
  }
break;
case 3:
{
following.push(FOLLOW_expression_in_statement1246);
expression();
following.pop();
match(input,SEMI,FOLLOW_SEMI_in_statement1248);
}
break;
case 4:
{
following.push(FOLLOW_modifiers_in_statement1256);
modifiers();
following.pop();
following.push(FOLLOW_classDefinition_in_statement1258);
classDefinition();
following.pop();
}
break;
case 5:
{
match(input,IDENT,FOLLOW_IDENT_in_statement1266);
match(input,COLON,FOLLOW_COLON_in_statement1268);
following.push(FOLLOW_statement_in_statement1271);
statement();
following.pop();
}
break;
case 6:
{
match(input,96,FOLLOW_96_in_statement1279);
match(input,LPAREN,FOLLOW_LPAREN_in_statement1281);
following.push(FOLLOW_expression_in_statement1283);
expression();
following.pop();
match(input,RPAREN,FOLLOW_RPAREN_in_statement1285);
following.push(FOLLOW_statement_in_statement1287);
statement();
following.pop();
int alt36=2;
int LA36_0=input.LA(1);
if (LA36_0 == 97) {
alt36=1;
}
 else if (LA36_0 == IDENT || (LA36_0 >= LCURLY && LA36_0 <= RCURLY) || LA36_0 == LPAREN || (LA36_0 >= PLUS && LA36_0 <= MINUS) || (LA36_0 >= INC && LA36_0 <= NUM_FLOAT) || (LA36_0 >= 68 && LA36_0 <= 89) || (LA36_0 >= 93 && LA36_0 <= 94) || LA36_0 == 96 || (LA36_0 >= 98 && LA36_0 <= 108) || (LA36_0 >= 112 && LA36_0 <= 115)) {
alt36=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("458:17: ( \'else\' statement )?",36,0,input);
throw nvae;
}
switch (alt36) {
case 1:
{
match(input,97,FOLLOW_97_in_statement1308);
following.push(FOLLOW_statement_in_statement1310);
statement();
following.pop();
}
break;
}
}
break;
case 7:
{
match(input,98,FOLLOW_98_in_statement1323);
match(input,LPAREN,FOLLOW_LPAREN_in_statement1328);
following.push(FOLLOW_forInit_in_statement1334);
forInit();
following.pop();
match(input,SEMI,FOLLOW_SEMI_in_statement1336);
following.push(FOLLOW_forCond_in_statement1345);
forCond();
following.pop();
match(input,SEMI,FOLLOW_SEMI_in_statement1347);
following.push(FOLLOW_forIter_in_statement1356);
forIter();
following.pop();
match(input,RPAREN,FOLLOW_RPAREN_in_statement1370);
following.push(FOLLOW_statement_in_statement1375);
statement();
following.pop();
}
break;
case 8:
{
match(input,99,FOLLOW_99_in_statement1404);
match(input,LPAREN,FOLLOW_LPAREN_in_statement1406);
following.push(FOLLOW_expression_in_statement1408);
expression();
following.pop();
match(input,RPAREN,FOLLOW_RPAREN_in_statement1410);
following.push(FOLLOW_statement_in_statement1412);
statement();
following.pop();
}
break;
case 9:
{
match(input,100,FOLLOW_100_in_statement1420);
following.push(FOLLOW_statement_in_statement1422);
statement();
following.pop();
match(input,99,FOLLOW_99_in_statement1424);
match(input,LPAREN,FOLLOW_LPAREN_in_statement1426);
following.push(FOLLOW_expression_in_statement1428);
expression();
following.pop();
match(input,RPAREN,FOLLOW_RPAREN_in_statement1430);
match(input,SEMI,FOLLOW_SEMI_in_statement1432);
}
break;
case 10:
{
match(input,101,FOLLOW_101_in_statement1440);
int alt37=2;
int LA37_0=input.LA(1);
if (LA37_0 == IDENT) {
alt37=1;
}
 else if (LA37_0 == SEMI) {
alt37=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("481:25: ( IDENT )?",37,0,input);
throw nvae;
}
switch (alt37) {
case 1:
{
match(input,IDENT,FOLLOW_IDENT_in_statement1443);
}
break;
}
match(input,SEMI,FOLLOW_SEMI_in_statement1447);
}
break;
case 11:
{
match(input,102,FOLLOW_102_in_statement1455);
int alt38=2;
int LA38_0=input.LA(1);
if (LA38_0 == IDENT) {
alt38=1;
}
 else if (LA38_0 == SEMI) {
alt38=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("484:28: ( IDENT )?",38,0,input);
throw nvae;
}
switch (alt38) {
case 1:
{
match(input,IDENT,FOLLOW_IDENT_in_statement1458);
}
break;
}
match(input,SEMI,FOLLOW_SEMI_in_statement1462);
}
break;
case 12:
{
match(input,103,FOLLOW_103_in_statement1470);
int alt39=2;
int LA39_0=input.LA(1);
if (LA39_0 == IDENT || LA39_0 == LPAREN || (LA39_0 >= PLUS && LA39_0 <= MINUS) || (LA39_0 >= INC && LA39_0 <= NUM_FLOAT) || (LA39_0 >= 68 && LA39_0 <= 76) || (LA39_0 >= 93 && LA39_0 <= 94) || (LA39_0 >= 112 && LA39_0 <= 115)) {
alt39=1;
}
 else if (LA39_0 == SEMI) {
alt39=2;
}
 else {
NoViableAltException nvae=new NoViableAltException("487:26: ( expression )?",39,0,input);
throw nvae;
}
switch (alt39) {
case 1:
{
following.push(FOLLOW_expression_in_statement1473);
expression();
following.pop();
}
break;
}
match(input,SEMI,FOLLOW_SEMI_in_statement1477);
}
break;
case 13:
{
match(input,104,FOLLOW_104_in_statement1485);
match(input,LPAREN,FOLLOW_LPAREN_in_statement1487);
following.push(FOLLOW_expression_in_statement1489);
expression();
following.pop();
match(input,RPAREN,FOLLOW_RPAREN_in_statement1491);
match(input,LCURLY,FOLLOW_LCURLY_in_statement1493);
loop40: do {
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 >= 106 && LA40_0 <= 107)) {
alt40=1;
}
switch (alt40) {
case 1:
{
following.push(FOLLOW_casesGroup_in_statement1500);
casesGroup();
following.pop();
}
break;
default :
break loop40;
}
}
 while (true);
match(input,RCURLY,FOLLOW_RCURLY_in_statement1507);
}
break;
case 14:
{
following.push(FOLLOW_tryBlock_in_statement1515);
tryBlock();
following.pop();
}
break;
case 15:
{
match(input,105,FOLLOW_105_in_statement1523);
following.push(FOLLOW_expression_in_statement1525);
expression();
following.pop();
match(input,SEMI,FOLLOW_SEMI_in_statement1527);
}
break;
case 16:
{
match(input,86,FOLLOW_86_in_statement1535);
match(input,LPAREN,FOLLOW_LPAREN_in_statement1537);
following.push(FOLLOW_expression_in_statement1539);
expression();
following.pop();
match(input,RPAREN,FOLLOW_RPAREN_in_statement1541);
following.push(FOLLOW_compoundStatement_in_statement1543);
compoundStatement();
following.pop();
}
break;
case 17:
{
match(input,SEMI,FOLLOW_SEMI_in_statement1556);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
