{
  try {
{
      match(this.input,JavaParser.LCURLY,JavaParser.FOLLOW_LCURLY_in_constructorBody739);
      int alt20=2;
switch (this.input.LA(1)) {
case 93:
        final int LA20_1=this.input.LA(2);
      if (LA20_1 == JavaParser.LPAREN) {
        alt20=1;
      }
 else       if (LA20_1 == JavaParser.LBRACK || (LA20_1 >= JavaParser.DOT && LA20_1 <= JavaParser.STAR) || LA20_1 == JavaParser.SEMI || LA20_1 == JavaParser.ASSIGN || (LA20_1 >= JavaParser.PLUS_ASSIGN && LA20_1 <= JavaParser.DEC) || LA20_1 == 111) {
        alt20=2;
      }
 else {
        final NoViableAltException nvae=new NoViableAltException("320:13: ( options {greedy=true; } : explicitConstructorInvocation )?",20,1,this.input);
        throw nvae;
      }
    break;
case 94:
  final int LA20_2=this.input.LA(2);
if (LA20_2 == JavaParser.LPAREN) {
  alt20=1;
}
 else if (LA20_2 == JavaParser.LBRACK || (LA20_2 >= JavaParser.DOT && LA20_2 <= JavaParser.STAR) || LA20_2 == JavaParser.SEMI || LA20_2 == JavaParser.ASSIGN || (LA20_2 >= JavaParser.PLUS_ASSIGN && LA20_2 <= JavaParser.DEC) || LA20_2 == 111) {
  alt20=2;
}
 else {
  final NoViableAltException nvae=new NoViableAltException("320:13: ( options {greedy=true; } : explicitConstructorInvocation )?",20,2,this.input);
  throw nvae;
}
break;
case IDENT:
case LCURLY:
case SEMI:
case RCURLY:
case LPAREN:
case PLUS:
case MINUS:
case INC:
case DEC:
case BNOT:
case LNOT:
case NUM_INT:
case CHAR_LITERAL:
case STRING_LITERAL:
case NUM_FLOAT:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
case 81:
case 82:
case 83:
case 84:
case 85:
case 86:
case 87:
case 88:
case 89:
case 96:
case 98:
case 99:
case 100:
case 101:
case 102:
case 103:
case 104:
case 105:
case 108:
case 112:
case 113:
case 114:
case 115:
alt20=2;
break;
default :
final NoViableAltException nvae=new NoViableAltException("320:13: ( options {greedy=true; } : explicitConstructorInvocation )?",20,0,this.input);
throw nvae;
}
switch (alt20) {
case 1:
{
this.following.push(JavaParser.FOLLOW_explicitConstructorInvocation_in_constructorBody765);
explicitConstructorInvocation();
this.following.pop();
}
break;
}
loop21: do {
int alt21=2;
final int LA21_0=this.input.LA(1);
if (LA21_0 == JavaParser.IDENT || (LA21_0 >= JavaParser.LCURLY && LA21_0 <= JavaParser.SEMI) || LA21_0 == JavaParser.LPAREN || (LA21_0 >= JavaParser.PLUS && LA21_0 <= JavaParser.MINUS) || (LA21_0 >= JavaParser.INC && LA21_0 <= JavaParser.NUM_FLOAT) || (LA21_0 >= 68 && LA21_0 <= 89) || (LA21_0 >= 93 && LA21_0 <= 94) || LA21_0 == 96 || (LA21_0 >= 98 && LA21_0 <= 105) || LA21_0 == 108 || (LA21_0 >= 112 && LA21_0 <= 115)) {
alt21=1;
}
switch (alt21) {
case 1:
{
this.following.push(JavaParser.FOLLOW_statement_in_constructorBody782);
statement();
this.following.pop();
}
break;
default :
break loop21;
}
}
 while (true);
match(this.input,JavaParser.RCURLY,JavaParser.FOLLOW_RCURLY_in_constructorBody794);
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return;
}
