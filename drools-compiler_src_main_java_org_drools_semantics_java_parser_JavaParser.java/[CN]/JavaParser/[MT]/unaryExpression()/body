{
  try {
    int alt64=5;
switch (this.input.LA(1)) {
case INC:
      alt64=1;
    break;
case DEC:
  alt64=2;
break;
case MINUS:
alt64=3;
break;
case PLUS:
alt64=4;
break;
case IDENT:
case LPAREN:
case BNOT:
case LNOT:
case NUM_INT:
case CHAR_LITERAL:
case STRING_LITERAL:
case NUM_FLOAT:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 93:
case 94:
case 112:
case 113:
case 114:
case 115:
alt64=5;
break;
default :
final NoViableAltException nvae=new NoViableAltException("714:1: unaryExpression : ( INC unaryExpression | DEC unaryExpression | MINUS unaryExpression | PLUS unaryExpression | unaryExpressionNotPlusMinus );",64,0,this.input);
throw nvae;
}
switch (alt64) {
case 1:
{
match(this.input,JavaParser.INC,JavaParser.FOLLOW_INC_in_unaryExpression2437);
this.following.push(JavaParser.FOLLOW_unaryExpression_in_unaryExpression2439);
unaryExpression();
this.following.pop();
}
break;
case 2:
{
match(this.input,JavaParser.DEC,JavaParser.FOLLOW_DEC_in_unaryExpression2444);
this.following.push(JavaParser.FOLLOW_unaryExpression_in_unaryExpression2446);
unaryExpression();
this.following.pop();
}
break;
case 3:
{
match(this.input,JavaParser.MINUS,JavaParser.FOLLOW_MINUS_in_unaryExpression2451);
this.following.push(JavaParser.FOLLOW_unaryExpression_in_unaryExpression2454);
unaryExpression();
this.following.pop();
}
break;
case 4:
{
match(this.input,JavaParser.PLUS,JavaParser.FOLLOW_PLUS_in_unaryExpression2459);
this.following.push(JavaParser.FOLLOW_unaryExpression_in_unaryExpression2463);
unaryExpression();
this.following.pop();
}
break;
case 5:
{
this.following.push(JavaParser.FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression2468);
unaryExpressionNotPlusMinus();
this.following.pop();
}
break;
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return;
}
