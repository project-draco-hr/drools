{
  try {
{
      this.following.push(JavaParser.FOLLOW_multiplicativeExpression_in_additiveExpression2382);
      multiplicativeExpression();
      this.following.pop();
      loop62:       do {
        int alt62=2;
        final int LA62_0=this.input.LA(1);
        if ((LA62_0 >= JavaParser.PLUS && LA62_0 <= JavaParser.MINUS)) {
          alt62=1;
        }
switch (alt62) {
case 1:
{
            if ((this.input.LA(1) >= JavaParser.PLUS && this.input.LA(1) <= JavaParser.MINUS)) {
              this.input.consume();
              this.errorRecovery=false;
            }
 else {
              final MismatchedSetException mse=new MismatchedSetException(null,this.input);
              recoverFromMismatchedSet(this.input,mse,JavaParser.FOLLOW_set_in_additiveExpression2386);
              throw mse;
            }
            this.following.push(JavaParser.FOLLOW_multiplicativeExpression_in_additiveExpression2393);
            multiplicativeExpression();
            this.following.pop();
          }
        break;
default :
      break loop62;
  }
}
 while (true);
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return;
}
