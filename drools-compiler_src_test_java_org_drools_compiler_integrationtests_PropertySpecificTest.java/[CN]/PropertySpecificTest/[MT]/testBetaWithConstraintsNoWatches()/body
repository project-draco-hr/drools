{
  String rule1="$b : B(a == 15) A( a == 10, b == $b.b )";
  KnowledgeBase kbase=getKnowledgeBase(rule1);
  InternalWorkingMemory wm=((InternalWorkingMemory)kbase.newStatefulKnowledgeSession());
  ObjectTypeNode otn=getObjectTypeNode(kbase,"A");
  assertNotNull(otn);
  List<String> sp=getSettableProperties(wm,otn);
  AlphaNode alphaNode=(AlphaNode)otn.getObjectSinkPropagator().getSinks()[0];
  assertEquals(calculatePositiveMask(list("a"),sp),alphaNode.getDeclaredMask());
  assertEquals(calculatePositiveMask(list("a","b"),sp),alphaNode.getInferredMask());
  BetaNode betaNode=(BetaNode)alphaNode.getObjectSinkPropagator().getSinks()[0];
  assertEquals(calculatePositiveMask(list("b"),sp),betaNode.getRightDeclaredMask());
  assertEquals(calculatePositiveMask(list("a","b"),sp),betaNode.getRightInferredMask());
  otn=getObjectTypeNode(kbase,"B");
  alphaNode=(AlphaNode)otn.getObjectSinkPropagator().getSinks()[0];
  assertEquals(calculatePositiveMask(list("a"),sp),alphaNode.getDeclaredMask());
  assertEquals(calculatePositiveMask(list("a"),sp),alphaNode.getInferredMask());
  assertEquals(EmptyBitMask.get(),betaNode.getLeftDeclaredMask());
  assertEquals(calculatePositiveMask(list("a"),sp),betaNode.getLeftInferredMask());
}
