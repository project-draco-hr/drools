{
  String rule="package org.drools.compiler.integrationtests\n" + "dialect \"mvel\"\n" + "declare A\n"+ "    s : String\n"+ "end\n"+ "declare B\n"+ "    @propertyReactive\n"+ "    on : boolean\n"+ "    s : String\n"+ "end\n"+ "rule R1\n"+ "when\n"+ "    A($s : s)\n"+ "    $b : B(s != $s) @watch( ! s, on )\n"+ "then\n"+ "    modify($b) { setS($s) }\n"+ "end\n"+ "rule R2\n"+ "when\n"+ "    $b : B(on == false)\n"+ "then\n"+ "    modify($b) { setOn(true) }\n"+ "end\n";
  KnowledgeBase kbase=loadKnowledgeBaseFromString(rule);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  FactType factTypeA=kbase.getFactType("org.drools.compiler.integrationtests","A");
  Object factA=factTypeA.newInstance();
  factTypeA.set(factA,"s","y");
  ksession.insert(factA);
  FactType factTypeB=kbase.getFactType("org.drools.compiler.integrationtests","B");
  Object factB=factTypeB.newInstance();
  factTypeB.set(factB,"on",false);
  factTypeB.set(factB,"s","x");
  ksession.insert(factB);
  int rules=ksession.fireAllRules();
  assertEquals(2,rules);
  assertEquals(true,factTypeB.get(factB,"on"));
  assertEquals("y",factTypeB.get(factB,"s"));
  ksession.dispose();
}
