{
  String rule1="$b : B( b == 15) @watch(i) A( a == 10, b == 15 ) @watch(c)";
  String rule2="$b : B( b == 15) @watch(j) A( a == 10, i == 20 ) @watch(s)";
  String rule3="$b : B( c == 15) @watch(k) A( a == 10, i == 20, b == 10 ) @watch(j)";
  KnowledgeBase kbase=getKnowledgeBase(rule1,rule2,rule3);
  InternalWorkingMemory wm=((InternalWorkingMemory)kbase.newStatefulKnowledgeSession());
  kbase.removeRule("org.drools.compiler.integrationtests","r0");
  ObjectTypeNode otn=getObjectTypeNode(kbase,"A");
  assertNotNull(otn);
  List<String> sp=getSettableProperties(wm,otn);
  AlphaNode alphaNode1=(AlphaNode)otn.getSinkPropagator().getSinks()[0];
  assertEquals(calculatePositiveMask(list("a"),sp),alphaNode1.getDeclaredMask());
  assertEquals(calculatePositiveMask(list("a","i","b","s","j"),sp),alphaNode1.getInferredMask());
  AlphaNode alphaNode1_1=(AlphaNode)alphaNode1.getSinkPropagator().getSinks()[0];
  assertEquals(calculatePositiveMask(list("i"),sp),alphaNode1_1.getDeclaredMask());
  assertEquals(calculatePositiveMask(list("a","i","b","s","j"),sp),alphaNode1_1.getInferredMask());
  BetaNode betaNode1=(BetaNode)alphaNode1_1.getSinkPropagator().getSinks()[1];
  assertEquals(calculatePositiveMask(list("s"),sp),betaNode1.getRightDeclaredMask());
  assertEquals(calculatePositiveMask(list("a","i","s"),sp),betaNode1.getRightInferredMask());
  assertEquals(calculatePositiveMask(list("j"),sp),betaNode1.getLeftDeclaredMask());
  assertEquals(calculatePositiveMask(list("b","j"),sp),betaNode1.getLeftInferredMask());
  AlphaNode alphaNode1_2=(AlphaNode)alphaNode1_1.getSinkPropagator().getSinks()[0];
  assertEquals(calculatePositiveMask(list("b"),sp),alphaNode1_2.getDeclaredMask());
  assertEquals(calculatePositiveMask(list("a","b","i","j"),sp),alphaNode1_2.getInferredMask());
  BetaNode betaNode3=(BetaNode)alphaNode1_2.getSinkPropagator().getSinks()[0];
  assertEquals(calculatePositiveMask(list("j"),sp),betaNode3.getRightDeclaredMask());
  assertEquals(calculatePositiveMask(list("a","i","b","j"),sp),betaNode3.getRightInferredMask());
  assertEquals(calculatePositiveMask(list("k"),sp),betaNode3.getLeftDeclaredMask());
  assertEquals(calculatePositiveMask(list("c","k"),sp),betaNode3.getLeftInferredMask());
}
