{
  String rule1="B(a == 15) C() A()";
  String rule2="B(a == 15) C() A() @watch(b, c)";
  KnowledgeBase kbase=getKnowledgeBase(rule1,rule2);
  ReteooWorkingMemoryInterface wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession()).session;
  ObjectTypeNode otnA=getObjectTypeNode(kbase,"A");
  ObjectTypeNode otnC=getObjectTypeNode(kbase,"C");
  List<String> sp=getSettableProperties(wm,otnA);
  BetaNode betaNodeC=(BetaNode)otnC.getSinkPropagator().getSinks()[0];
  BetaNode betaNodeA1=(BetaNode)otnA.getSinkPropagator().getSinks()[0];
  BetaNode betaNodeA2=(BetaNode)otnA.getSinkPropagator().getSinks()[1];
  assertSame(betaNodeC.getSinkPropagator().getSinks()[0],betaNodeA1);
  assertSame(betaNodeC.getSinkPropagator().getSinks()[1],betaNodeA2);
  assertSame(betaNodeA1.getLeftTupleSource(),betaNodeC);
  assertSame(betaNodeA2.getLeftTupleSource(),betaNodeC);
  assertEquals(0L,betaNodeC.getRightDeclaredMask());
  assertEquals(0L,betaNodeC.getRightInferredMask());
  assertEquals(0L,betaNodeC.getLeftDeclaredMask());
  assertEquals(calculatePositiveMask(list("a"),sp),betaNodeC.getLeftInferredMask());
  assertEquals(0L,betaNodeA1.getRightDeclaredMask());
  assertEquals(0L,betaNodeA1.getRightInferredMask());
  assertEquals(Long.MAX_VALUE,betaNodeA1.getLeftDeclaredMask());
  assertEquals(Long.MAX_VALUE,betaNodeA1.getLeftInferredMask());
  assertEquals(calculatePositiveMask(list("b","c"),sp),betaNodeA2.getRightDeclaredMask());
  assertEquals(calculatePositiveMask(list("b","c"),sp),betaNodeA2.getRightInferredMask());
  assertEquals(Long.MAX_VALUE,betaNodeA2.getLeftDeclaredMask());
  assertEquals(Long.MAX_VALUE,betaNodeA2.getLeftInferredMask());
  kbase.removeRule("org.drools","r0");
  assertEquals(1,betaNodeC.getSinkPropagator().getSinks().length);
}
