{
  if (!betaNode.isInUse() || context.getCleanupAdapter() != null) {
    for (    InternalWorkingMemory workingMemory : workingMemories) {
      BetaMemory memory;
      Object object=workingMemory.getNodeMemory(betaNode);
      if (object instanceof AccumulateMemory) {
        memory=((AccumulateMemory)object).getBetaMemory();
      }
 else {
        memory=(BetaMemory)object;
      }
      if (betaNode.isRightInputIsRiaNode()) {
        ReteRightInputAdapterNode rian=(ReteRightInputAdapterNode)betaNode.getRightInput();
        if (rian.getSinkPropagator().size() == 1) {
          rian.removeMemory(workingMemory);
        }
      }
      FastIterator it=memory.getLeftTupleMemory().fullFastIterator();
      for (Tuple leftTuple=BetaNode.getFirstTuple(memory.getLeftTupleMemory(),it); leftTuple != null; ) {
        Tuple tmp=(LeftTuple)it.next(leftTuple);
        if (context.getCleanupAdapter() != null) {
          LeftTuple child;
          while ((child=leftTuple.getFirstChild()) != null) {
            if (child.getTupleSink() == betaNode) {
              child.unlinkFromLeftParent();
              child.unlinkFromRightParent();
            }
 else {
              context.getCleanupAdapter().cleanUp(child,workingMemory);
            }
          }
        }
        memory.getLeftTupleMemory().remove(leftTuple);
        leftTuple.unlinkFromLeftParent();
        leftTuple.unlinkFromRightParent();
        leftTuple=tmp;
      }
      if (object instanceof AccumulateMemory) {
        ((ReteAccumulateNode)betaNode).doRemove(workingMemory,(AccumulateMemory)object);
      }
      if (!betaNode.isInUse()) {
        it=memory.getRightTupleMemory().fullFastIterator();
        for (RightTuple rightTuple=(RightTuple)BetaNode.getFirstTuple(memory.getRightTupleMemory(),it); rightTuple != null; ) {
          RightTuple tmp=(RightTuple)it.next(rightTuple);
          if (rightTuple.getBlocked() != null) {
            for (LeftTuple leftTuple=rightTuple.getBlocked(); leftTuple != null; ) {
              LeftTuple temp=leftTuple.getBlockedNext();
              leftTuple.setBlocker(null);
              leftTuple.setBlockedPrevious(null);
              leftTuple.setBlockedNext(null);
              leftTuple.unlinkFromLeftParent();
              leftTuple=temp;
            }
          }
          memory.getRightTupleMemory().remove(rightTuple);
          rightTuple.unlinkFromRightParent();
          rightTuple=tmp;
        }
        workingMemory.clearNodeMemory(betaNode);
      }
    }
    context.setCleanupAdapter(null);
  }
  if (!betaNode.isInUse()) {
    betaNode.getLeftTupleSource().removeTupleSink(betaNode);
    betaNode.getRightInput().removeObjectSink(betaNode);
    return true;
  }
  return false;
}
