{
  try {
    int alt55=8;
    int LA55_0=input.LA(1);
    if ((LA55_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))))) {
      int LA55_1=input.LA(2);
      if ((((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))) {
        alt55=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) {
        alt55=2;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))) {
        alt55=3;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))) {
        alt55=4;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) {
        alt55=5;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))) {
        alt55=6;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))) {
        alt55=7;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {
        alt55=8;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",55,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
switch (alt55) {
case 1:
{
        pushFollow(FOLLOW_boolean_key_in_primitiveType2725);
        boolean_key();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_char_key_in_primitiveType2733);
    char_key();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 3:
{
pushFollow(FOLLOW_byte_key_in_primitiveType2741);
byte_key();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_short_key_in_primitiveType2749);
short_key();
state._fsp--;
if (state.failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_int_key_in_primitiveType2757);
int_key();
state._fsp--;
if (state.failed) return;
}
break;
case 6:
{
pushFollow(FOLLOW_long_key_in_primitiveType2765);
long_key();
state._fsp--;
if (state.failed) return;
}
break;
case 7:
{
pushFollow(FOLLOW_float_key_in_primitiveType2773);
float_key();
state._fsp--;
if (state.failed) return;
}
break;
case 8:
{
pushFollow(FOLLOW_double_key_in_primitiveType2781);
double_key();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
