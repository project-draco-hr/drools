{
  BaseDescr result=null;
  ParserRuleReturnScope op=null;
  java.util.List<String> sa=null;
  ParserRuleReturnScope value=null;
  BaseDescr or=null;
  try {
    int alt42=2;
    int LA42_0=input.LA(1);
    if ((LA42_0 == EQUALS || (LA42_0 >= GREATER && LA42_0 <= GREATER_EQUALS) || (LA42_0 >= LESS && LA42_0 <= LESS_EQUALS) || LA42_0 == NOT_EQUALS || LA42_0 == TILDE)) {
      alt42=1;
    }
 else     if ((LA42_0 == ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))) || ((helper.isPluggableEvaluator(false)))))) {
      alt42=1;
    }
 else     if ((LA42_0 == LEFT_PAREN)) {
      alt42=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return result;
      }
      NoViableAltException nvae=new NoViableAltException("",42,0,input);
      throw nvae;
    }
switch (alt42) {
case 1:
{
        pushFollow(FOLLOW_operator_in_singleRestriction1931);
        op=operator();
        state._fsp--;
        if (state.failed)         return result;
        if (state.backtracking == 0) {
          helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
        }
        int alt41=2;
        int LA41_0=input.LA(1);
        if ((LA41_0 == LEFT_SQUARE)) {
          int LA41_1=input.LA(2);
          if ((synpred11_DRL6Expressions())) {
            alt41=1;
          }
 else           if ((true)) {
            alt41=2;
          }
        }
 else         if ((LA41_0 == BOOL || (LA41_0 >= DECIMAL && LA41_0 <= DECR) || LA41_0 == FLOAT || LA41_0 == HEX || (LA41_0 >= ID && LA41_0 <= INCR) || LA41_0 == LEFT_PAREN || LA41_0 == LESS || LA41_0 == MINUS || LA41_0 == NEGATION || LA41_0 == NULL || LA41_0 == PLUS || (LA41_0 >= STAR && LA41_0 <= TIME_INTERVAL))) {
          alt41=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return result;
          }
          NoViableAltException nvae=new NoViableAltException("",41,0,input);
          throw nvae;
        }
switch (alt41) {
case 1:
{
            pushFollow(FOLLOW_squareArguments_in_singleRestriction1960);
            sa=squareArguments();
            state._fsp--;
            if (state.failed)             return result;
            pushFollow(FOLLOW_shiftExpression_in_singleRestriction1964);
            value=shiftExpression();
            state._fsp--;
            if (state.failed)             return result;
          }
        break;
case 2:
{
        pushFollow(FOLLOW_shiftExpression_in_singleRestriction1977);
        value=shiftExpression();
        state._fsp--;
        if (state.failed)         return result;
      }
    break;
}
if (state.backtracking == 0) {
  if (buildDescr) {
    BaseDescr descr=((value != null ? ((DRL6Expressions.shiftExpression_return)value).result : null) != null && ((!((value != null ? ((DRL6Expressions.shiftExpression_return)value).result : null) instanceof AtomicExprDescr)) || ((value != null ? input.toString(value.start,value.stop) : null).equals(((AtomicExprDescr)(value != null ? ((DRL6Expressions.shiftExpression_return)value).result : null)).getExpression())))) ? (value != null ? ((DRL6Expressions.shiftExpression_return)value).result : null) : new AtomicExprDescr((value != null ? input.toString(value.start,value.stop) : null));
    result=new RelationalExprDescr((op != null ? ((DRL6Expressions.operator_return)op).opr : null),(op != null ? ((DRL6Expressions.operator_return)op).negated : false),sa,relationalExpression_stack.peek().lsd,descr);
    if (relationalExpression_stack.peek().lsd instanceof BindingDescr) {
      relationalExpression_stack.peek().lsd=new AtomicExprDescr(((BindingDescr)relationalExpression_stack.peek().lsd).getExpression());
    }
  }
  helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);
}
}
break;
case 2:
{
match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_singleRestriction2002);
if (state.failed) return result;
pushFollow(FOLLOW_orRestriction_in_singleRestriction2006);
or=orRestriction();
state._fsp--;
if (state.failed) return result;
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_singleRestriction2008);
if (state.failed) return result;
if (state.backtracking == 0) {
result=or;
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
