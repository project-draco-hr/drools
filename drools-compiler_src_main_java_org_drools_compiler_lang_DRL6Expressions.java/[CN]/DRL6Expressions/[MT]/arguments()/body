{
  Token LEFT_PAREN30=null;
  Token RIGHT_PAREN31=null;
  try {
{
      LEFT_PAREN30=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments4178);
      if (state.failed)       return;
      if (state.backtracking == 0) {
        helper.emit(LEFT_PAREN30,DroolsEditorType.SYMBOL);
      }
      int alt86=2;
      int LA86_0=input.LA(1);
      if ((LA86_0 == FLOAT || (LA86_0 >= HEX && LA86_0 <= DECIMAL) || (LA86_0 >= STRING && LA86_0 <= TIME_INTERVAL) || (LA86_0 >= BOOL && LA86_0 <= NULL) || (LA86_0 >= DECR && LA86_0 <= INCR) || LA86_0 == LESS || LA86_0 == LEFT_PAREN || LA86_0 == LEFT_SQUARE || (LA86_0 >= NEGATION && LA86_0 <= TILDE) || (LA86_0 >= STAR && LA86_0 <= PLUS) || LA86_0 == ID)) {
        alt86=1;
      }
switch (alt86) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_arguments4190);
          expressionList();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  RIGHT_PAREN31=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments4201);
  if (state.failed)   return;
  if (state.backtracking == 0) {
    helper.emit(RIGHT_PAREN31,DroolsEditorType.SYMBOL);
  }
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
