{
  try {
    int alt90=12;
switch (input.LA(1)) {
case EQUALS_ASSIGN:
{
        alt90=1;
      }
    break;
case PLUS_ASSIGN:
{
    alt90=2;
  }
break;
case MINUS_ASSIGN:
{
alt90=3;
}
break;
case MULT_ASSIGN:
{
alt90=4;
}
break;
case DIV_ASSIGN:
{
alt90=5;
}
break;
case AND_ASSIGN:
{
alt90=6;
}
break;
case OR_ASSIGN:
{
alt90=7;
}
break;
case XOR_ASSIGN:
{
alt90=8;
}
break;
case MOD_ASSIGN:
{
alt90=9;
}
break;
case LESS:
{
alt90=10;
}
break;
case GREATER:
{
int LA90_11=input.LA(2);
if ((LA90_11 == GREATER)) {
int LA90_12=input.LA(3);
if ((LA90_12 == GREATER) && (synpred43_DRL6Expressions())) {
alt90=11;
}
 else if ((LA90_12 == EQUALS_ASSIGN) && (synpred44_DRL6Expressions())) {
alt90=12;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException("",90,11,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",90,0,input);
throw nvae;
}
switch (alt90) {
case 1:
{
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4345);
if (state.failed) return;
}
break;
case 2:
{
match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator4353);
if (state.failed) return;
}
break;
case 3:
{
match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator4361);
if (state.failed) return;
}
break;
case 4:
{
match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator4369);
if (state.failed) return;
}
break;
case 5:
{
match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator4377);
if (state.failed) return;
}
break;
case 6:
{
match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator4385);
if (state.failed) return;
}
break;
case 7:
{
match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator4393);
if (state.failed) return;
}
break;
case 8:
{
match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator4401);
if (state.failed) return;
}
break;
case 9:
{
match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator4409);
if (state.failed) return;
}
break;
case 10:
{
match(input,LESS,FOLLOW_LESS_in_assignmentOperator4417);
if (state.failed) return;
match(input,LESS,FOLLOW_LESS_in_assignmentOperator4419);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4421);
if (state.failed) return;
}
break;
case 11:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4438);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4440);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4442);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4444);
if (state.failed) return;
}
break;
case 12:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4459);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4461);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4463);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
