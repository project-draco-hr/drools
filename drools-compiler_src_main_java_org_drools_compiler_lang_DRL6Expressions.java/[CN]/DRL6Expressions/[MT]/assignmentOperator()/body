{
  try {
    int alt96=12;
switch (input.LA(1)) {
case EQUALS_ASSIGN:
{
        alt96=1;
      }
    break;
case PLUS_ASSIGN:
{
    alt96=2;
  }
break;
case MINUS_ASSIGN:
{
alt96=3;
}
break;
case MULT_ASSIGN:
{
alt96=4;
}
break;
case DIV_ASSIGN:
{
alt96=5;
}
break;
case AND_ASSIGN:
{
alt96=6;
}
break;
case OR_ASSIGN:
{
alt96=7;
}
break;
case XOR_ASSIGN:
{
alt96=8;
}
break;
case MOD_ASSIGN:
{
alt96=9;
}
break;
case LESS:
{
alt96=10;
}
break;
case GREATER:
{
int LA96_11=input.LA(2);
if ((LA96_11 == GREATER)) {
int LA96_12=input.LA(3);
if ((LA96_12 == GREATER) && (synpred46_DRL6Expressions())) {
alt96=11;
}
 else if ((LA96_12 == EQUALS_ASSIGN) && (synpred47_DRL6Expressions())) {
alt96=12;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException("",96,11,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",96,0,input);
throw nvae;
}
switch (alt96) {
case 1:
{
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4513);
if (state.failed) return;
}
break;
case 2:
{
match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator4521);
if (state.failed) return;
}
break;
case 3:
{
match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator4529);
if (state.failed) return;
}
break;
case 4:
{
match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator4537);
if (state.failed) return;
}
break;
case 5:
{
match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator4545);
if (state.failed) return;
}
break;
case 6:
{
match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator4553);
if (state.failed) return;
}
break;
case 7:
{
match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator4561);
if (state.failed) return;
}
break;
case 8:
{
match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator4569);
if (state.failed) return;
}
break;
case 9:
{
match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator4577);
if (state.failed) return;
}
break;
case 10:
{
match(input,LESS,FOLLOW_LESS_in_assignmentOperator4585);
if (state.failed) return;
match(input,LESS,FOLLOW_LESS_in_assignmentOperator4587);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4589);
if (state.failed) return;
}
break;
case 11:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4606);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4608);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4610);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4612);
if (state.failed) return;
}
break;
case 12:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4627);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4629);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4631);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
