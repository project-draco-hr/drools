{
  try {
    int alt98=12;
switch (input.LA(1)) {
case EQUALS_ASSIGN:
{
        alt98=1;
      }
    break;
case PLUS_ASSIGN:
{
    alt98=2;
  }
break;
case MINUS_ASSIGN:
{
alt98=3;
}
break;
case MULT_ASSIGN:
{
alt98=4;
}
break;
case DIV_ASSIGN:
{
alt98=5;
}
break;
case AND_ASSIGN:
{
alt98=6;
}
break;
case OR_ASSIGN:
{
alt98=7;
}
break;
case XOR_ASSIGN:
{
alt98=8;
}
break;
case MOD_ASSIGN:
{
alt98=9;
}
break;
case LESS:
{
alt98=10;
}
break;
case GREATER:
{
int LA98_11=input.LA(2);
if ((LA98_11 == GREATER)) {
int LA98_12=input.LA(3);
if ((LA98_12 == GREATER) && (synpred48_DRL6Expressions())) {
alt98=11;
}
 else if ((LA98_12 == EQUALS_ASSIGN) && (synpred49_DRL6Expressions())) {
alt98=12;
}
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException("",98,11,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",98,0,input);
throw nvae;
}
switch (alt98) {
case 1:
{
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4606);
if (state.failed) return;
}
break;
case 2:
{
match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator4614);
if (state.failed) return;
}
break;
case 3:
{
match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator4622);
if (state.failed) return;
}
break;
case 4:
{
match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator4630);
if (state.failed) return;
}
break;
case 5:
{
match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator4638);
if (state.failed) return;
}
break;
case 6:
{
match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator4646);
if (state.failed) return;
}
break;
case 7:
{
match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator4654);
if (state.failed) return;
}
break;
case 8:
{
match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator4662);
if (state.failed) return;
}
break;
case 9:
{
match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator4670);
if (state.failed) return;
}
break;
case 10:
{
match(input,LESS,FOLLOW_LESS_in_assignmentOperator4678);
if (state.failed) return;
match(input,LESS,FOLLOW_LESS_in_assignmentOperator4680);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4682);
if (state.failed) return;
}
break;
case 11:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4699);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4701);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4703);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4705);
if (state.failed) return;
}
break;
case 12:
{
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4720);
if (state.failed) return;
match(input,GREATER,FOLLOW_GREATER_in_assignmentOperator4722);
if (state.failed) return;
match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator4724);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
