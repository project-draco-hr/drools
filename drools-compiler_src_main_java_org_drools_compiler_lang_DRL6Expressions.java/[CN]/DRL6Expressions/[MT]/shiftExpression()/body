{
  DRL6Expressions.shiftExpression_return retval=new DRL6Expressions.shiftExpression_return();
  retval.start=input.LT(1);
  BaseDescr left=null;
  try {
{
      pushFollow(FOLLOW_additiveExpression_in_shiftExpression2064);
      left=additiveExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        if (buildDescr) {
          retval.result=left;
        }
      }
      loop45:       while (true) {
        int alt45=2;
        int LA45_0=input.LA(1);
        if ((LA45_0 == LESS)) {
          int LA45_6=input.LA(2);
          if ((synpred12_DRL6Expressions())) {
            alt45=1;
          }
        }
 else         if ((LA45_0 == GREATER)) {
          int LA45_7=input.LA(2);
          if ((synpred12_DRL6Expressions())) {
            alt45=1;
          }
        }
switch (alt45) {
case 1:
{
            pushFollow(FOLLOW_shiftOp_in_shiftExpression2078);
            shiftOp();
            state._fsp--;
            if (state.failed)             return retval;
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression2080);
            additiveExpression();
            state._fsp--;
            if (state.failed)             return retval;
          }
        break;
default :
      break loop45;
  }
}
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
