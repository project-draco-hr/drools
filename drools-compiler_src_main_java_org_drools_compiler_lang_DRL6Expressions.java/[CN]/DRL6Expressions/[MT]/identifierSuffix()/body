{
  Token LEFT_SQUARE15=null;
  Token RIGHT_SQUARE16=null;
  Token DOT17=null;
  Token LEFT_SQUARE18=null;
  Token RIGHT_SQUARE19=null;
  try {
    int alt66=3;
    int LA66_0=input.LA(1);
    if ((LA66_0 == LEFT_SQUARE)) {
      int LA66_1=input.LA(2);
      if ((LA66_1 == RIGHT_SQUARE) && (synpred34_DRL6Expressions())) {
        alt66=1;
      }
 else       if ((LA66_1 == BOOL || (LA66_1 >= DECIMAL && LA66_1 <= DECR) || LA66_1 == FLOAT || LA66_1 == HEX || (LA66_1 >= ID && LA66_1 <= INCR) || (LA66_1 >= LEFT_PAREN && LA66_1 <= LESS) || LA66_1 == MINUS || LA66_1 == NEGATION || LA66_1 == NULL || LA66_1 == PLUS || (LA66_1 >= STAR && LA66_1 <= TIME_INTERVAL))) {
        alt66=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",66,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else     if ((LA66_0 == LEFT_PAREN)) {
      alt66=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",66,0,input);
      throw nvae;
    }
switch (alt66) {
case 1:
{
        int cnt64=0;
        loop64:         while (true) {
          int alt64=2;
          int LA64_0=input.LA(1);
          if ((LA64_0 == LEFT_SQUARE)) {
            alt64=1;
          }
switch (alt64) {
case 1:
{
              LEFT_SQUARE15=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix3391);
              if (state.failed)               return;
              if (state.backtracking == 0) {
                helper.emit(LEFT_SQUARE15,DroolsEditorType.SYMBOL);
              }
              RIGHT_SQUARE16=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix3432);
              if (state.failed)               return;
              if (state.backtracking == 0) {
                helper.emit(RIGHT_SQUARE16,DroolsEditorType.SYMBOL);
              }
            }
          break;
default :
        if (cnt64 >= 1)         break loop64;
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
    EarlyExitException eee=new EarlyExitException(64,input);
  throw eee;
}
cnt64++;
}
DOT17=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix3476);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(DOT17,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix3480);
class_key();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
int cnt65=0;
loop65: while (true) {
int alt65=2;
int LA65_0=input.LA(1);
if ((LA65_0 == LEFT_SQUARE)) {
int LA65_36=input.LA(2);
if ((synpred35_DRL6Expressions())) {
alt65=1;
}
}
switch (alt65) {
case 1:
{
LEFT_SQUARE18=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix3495);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(LEFT_SQUARE18,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_in_identifierSuffix3525);
expression();
state._fsp--;
if (state.failed) return;
RIGHT_SQUARE19=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix3553);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(RIGHT_SQUARE19,DroolsEditorType.SYMBOL);
}
}
break;
default :
if (cnt65 >= 1) break loop65;
if (state.backtracking > 0) {
state.failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(65,input);
throw eee;
}
cnt65++;
}
}
break;
case 3:
{
pushFollow(FOLLOW_arguments_in_identifierSuffix3569);
arguments();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
