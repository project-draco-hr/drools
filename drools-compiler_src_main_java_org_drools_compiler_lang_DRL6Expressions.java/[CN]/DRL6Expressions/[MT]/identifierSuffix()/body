{
  Token LEFT_SQUARE19=null;
  Token RIGHT_SQUARE20=null;
  Token DOT21=null;
  Token LEFT_SQUARE22=null;
  Token RIGHT_SQUARE23=null;
  try {
    int alt64=3;
    int LA64_0=input.LA(1);
    if ((LA64_0 == LEFT_SQUARE)) {
      int LA64_1=input.LA(2);
      if ((LA64_1 == RIGHT_SQUARE) && (synpred34_DRL6Expressions())) {
        alt64=1;
      }
 else       if ((LA64_1 == FLOAT || (LA64_1 >= HEX && LA64_1 <= DECIMAL) || (LA64_1 >= STRING && LA64_1 <= TIME_INTERVAL) || (LA64_1 >= BOOL && LA64_1 <= NULL) || (LA64_1 >= DECR && LA64_1 <= INCR) || LA64_1 == LESS || LA64_1 == LEFT_PAREN || LA64_1 == LEFT_SQUARE || (LA64_1 >= NEGATION && LA64_1 <= TILDE) || (LA64_1 >= STAR && LA64_1 <= PLUS) || LA64_1 == ID)) {
        alt64=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",64,1,input);
        throw nvae;
      }
    }
 else     if ((LA64_0 == LEFT_PAREN)) {
      alt64=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",64,0,input);
      throw nvae;
    }
switch (alt64) {
case 1:
{
        int cnt62=0;
        loop62:         do {
          int alt62=2;
          int LA62_0=input.LA(1);
          if ((LA62_0 == LEFT_SQUARE)) {
            alt62=1;
          }
switch (alt62) {
case 1:
{
              LEFT_SQUARE19=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix3349);
              if (state.failed)               return;
              if (state.backtracking == 0) {
                helper.emit(LEFT_SQUARE19,DroolsEditorType.SYMBOL);
              }
              RIGHT_SQUARE20=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix3390);
              if (state.failed)               return;
              if (state.backtracking == 0) {
                helper.emit(RIGHT_SQUARE20,DroolsEditorType.SYMBOL);
              }
            }
          break;
default :
        if (cnt62 >= 1)         break loop62;
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
    EarlyExitException eee=new EarlyExitException(62,input);
  throw eee;
}
cnt62++;
}
 while (true);
DOT21=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix3434);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(DOT21,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_class_key_in_identifierSuffix3438);
class_key();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
int cnt63=0;
loop63: do {
int alt63=2;
alt63=dfa63.predict(input);
switch (alt63) {
case 1:
{
LEFT_SQUARE22=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix3453);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(LEFT_SQUARE22,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_in_identifierSuffix3483);
expression();
state._fsp--;
if (state.failed) return;
RIGHT_SQUARE23=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix3511);
if (state.failed) return;
if (state.backtracking == 0) {
helper.emit(RIGHT_SQUARE23,DroolsEditorType.SYMBOL);
}
}
break;
default :
if (cnt63 >= 1) break loop63;
if (state.backtracking > 0) {
state.failed=true;
return;
}
EarlyExitException eee=new EarlyExitException(63,input);
throw eee;
}
cnt63++;
}
 while (true);
}
break;
case 3:
{
pushFollow(FOLLOW_arguments_in_identifierSuffix3527);
arguments();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
