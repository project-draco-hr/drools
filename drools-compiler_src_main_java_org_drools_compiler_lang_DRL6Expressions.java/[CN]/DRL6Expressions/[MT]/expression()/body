{
  DRL6Expressions.expression_return retval=new DRL6Expressions.expression_return();
  retval.start=input.LT(1);
  BaseDescr left=null;
  ParserRuleReturnScope right=null;
  try {
{
      pushFollow(FOLLOW_conditionalExpression_in_expression768);
      left=conditionalExpression();
      state._fsp--;
      if (state.failed)       return retval;
      if (state.backtracking == 0) {
        if (buildDescr) {
          retval.result=left;
        }
      }
      int alt16=2;
switch (input.LA(1)) {
case EQUALS_ASSIGN:
{
          int LA16_1=input.LA(2);
          if ((synpred6_DRL6Expressions())) {
            alt16=1;
          }
        }
      break;
case PLUS_ASSIGN:
{
      int LA16_2=input.LA(2);
      if ((synpred6_DRL6Expressions())) {
        alt16=1;
      }
    }
  break;
case MINUS_ASSIGN:
{
  int LA16_3=input.LA(2);
  if ((synpred6_DRL6Expressions())) {
    alt16=1;
  }
}
break;
case MULT_ASSIGN:
{
int LA16_4=input.LA(2);
if ((synpred6_DRL6Expressions())) {
alt16=1;
}
}
break;
case DIV_ASSIGN:
{
int LA16_5=input.LA(2);
if ((synpred6_DRL6Expressions())) {
alt16=1;
}
}
break;
case AND_ASSIGN:
{
int LA16_6=input.LA(2);
if ((synpred6_DRL6Expressions())) {
alt16=1;
}
}
break;
case OR_ASSIGN:
{
int LA16_7=input.LA(2);
if ((synpred6_DRL6Expressions())) {
alt16=1;
}
}
break;
case XOR_ASSIGN:
{
int LA16_8=input.LA(2);
if ((synpred6_DRL6Expressions())) {
alt16=1;
}
}
break;
case MOD_ASSIGN:
{
int LA16_9=input.LA(2);
if ((synpred6_DRL6Expressions())) {
alt16=1;
}
}
break;
case LESS:
{
int LA16_10=input.LA(2);
if ((synpred6_DRL6Expressions())) {
alt16=1;
}
}
break;
case GREATER:
{
int LA16_11=input.LA(2);
if ((synpred6_DRL6Expressions())) {
alt16=1;
}
}
break;
}
switch (alt16) {
case 1:
{
pushFollow(FOLLOW_assignmentOperator_in_expression789);
assignmentOperator();
state._fsp--;
if (state.failed) return retval;
pushFollow(FOLLOW_expression_in_expression793);
right=expression();
state._fsp--;
if (state.failed) return retval;
}
break;
}
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
