{
  try {
{
      int alt46=3;
      int LA46_0=input.LA(1);
      if ((LA46_0 == LESS)) {
        alt46=1;
      }
 else       if ((LA46_0 == GREATER)) {
        int LA46_2=input.LA(2);
        if ((LA46_2 == GREATER)) {
          int LA46_3=input.LA(3);
          if ((LA46_3 == GREATER)) {
            alt46=2;
          }
 else           if ((LA46_3 == EOF || LA46_3 == BOOL || (LA46_3 >= DECIMAL && LA46_3 <= DIV) || LA46_3 == DOT || LA46_3 == FLOAT || LA46_3 == HEX || (LA46_3 >= ID && LA46_3 <= INCR) || (LA46_3 >= LEFT_PAREN && LA46_3 <= LESS) || LA46_3 == MINUS || LA46_3 == NEGATION || LA46_3 == NULL || LA46_3 == PLUS || (LA46_3 >= STAR && LA46_3 <= TIME_INTERVAL))) {
            alt46=3;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return;
            }
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException("",46,3,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return;
          }
          int nvaeMark=input.mark();
          try {
            input.consume();
            NoViableAltException nvae=new NoViableAltException("",46,2,input);
            throw nvae;
          }
  finally {
            input.rewind(nvaeMark);
          }
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",46,0,input);
        throw nvae;
      }
switch (alt46) {
case 1:
{
          match(input,LESS,FOLLOW_LESS_in_shiftOp2182);
          if (state.failed)           return;
          match(input,LESS,FOLLOW_LESS_in_shiftOp2184);
          if (state.failed)           return;
        }
      break;
case 2:
{
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp2196);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp2198);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp2200);
      if (state.failed)       return;
    }
  break;
case 3:
{
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp2212);
  if (state.failed)   return;
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp2214);
  if (state.failed)   return;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
