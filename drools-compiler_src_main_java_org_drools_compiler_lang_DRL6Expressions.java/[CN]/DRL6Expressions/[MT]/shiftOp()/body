{
  try {
{
      int alt44=3;
      int LA44_0=input.LA(1);
      if ((LA44_0 == LESS)) {
        alt44=1;
      }
 else       if ((LA44_0 == GREATER)) {
        int LA44_2=input.LA(2);
        if ((LA44_2 == GREATER)) {
          int LA44_3=input.LA(3);
          if ((LA44_3 == GREATER)) {
            alt44=2;
          }
 else           if ((LA44_3 == EOF || LA44_3 == BOOL || (LA44_3 >= DECIMAL && LA44_3 <= DECR) || LA44_3 == FLOAT || LA44_3 == HEX || (LA44_3 >= ID && LA44_3 <= INCR) || (LA44_3 >= LEFT_PAREN && LA44_3 <= LESS) || LA44_3 == MINUS || LA44_3 == NEGATION || LA44_3 == NULL || LA44_3 == PLUS || (LA44_3 >= STAR && LA44_3 <= TIME_INTERVAL))) {
            alt44=3;
          }
 else {
            if (state.backtracking > 0) {
              state.failed=true;
              return;
            }
            int nvaeMark=input.mark();
            try {
              for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
                input.consume();
              }
              NoViableAltException nvae=new NoViableAltException("",44,3,input);
              throw nvae;
            }
  finally {
              input.rewind(nvaeMark);
            }
          }
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return;
          }
          int nvaeMark=input.mark();
          try {
            input.consume();
            NoViableAltException nvae=new NoViableAltException("",44,2,input);
            throw nvae;
          }
  finally {
            input.rewind(nvaeMark);
          }
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        NoViableAltException nvae=new NoViableAltException("",44,0,input);
        throw nvae;
      }
switch (alt44) {
case 1:
{
          match(input,LESS,FOLLOW_LESS_in_shiftOp2068);
          if (state.failed)           return;
          match(input,LESS,FOLLOW_LESS_in_shiftOp2070);
          if (state.failed)           return;
        }
      break;
case 2:
{
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp2082);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp2084);
      if (state.failed)       return;
      match(input,GREATER,FOLLOW_GREATER_in_shiftOp2086);
      if (state.failed)       return;
    }
  break;
case 3:
{
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp2098);
  if (state.failed)   return;
  match(input,GREATER,FOLLOW_GREATER_in_shiftOp2100);
  if (state.failed)   return;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
