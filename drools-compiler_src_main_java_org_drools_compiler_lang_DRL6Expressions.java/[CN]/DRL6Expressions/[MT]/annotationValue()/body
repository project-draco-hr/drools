{
  DRL6Expressions.annotationValue_return retval=new DRL6Expressions.annotationValue_return();
  retval.start=input.LT(1);
  try {
    int alt21=2;
    int LA21_0=input.LA(1);
    if ((LA21_0 == BOOL || (LA21_0 >= DECIMAL && LA21_0 <= DECR) || LA21_0 == FLOAT || LA21_0 == HEX || (LA21_0 >= ID && LA21_0 <= INCR) || (LA21_0 >= LEFT_PAREN && LA21_0 <= LESS) || LA21_0 == MINUS || LA21_0 == NEGATION || LA21_0 == NULL || LA21_0 == PLUS || (LA21_0 >= STAR && LA21_0 <= TIME_INTERVAL))) {
      alt21=1;
    }
 else     if ((LA21_0 == LEFT_CURLY)) {
      alt21=2;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",21,0,input);
      throw nvae;
    }
switch (alt21) {
case 1:
{
        pushFollow(FOLLOW_expression_in_annotationValue1053);
        expression();
        state._fsp--;
        if (state.failed)         return retval;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_annotationArray_in_annotationValue1057);
    annotationArray();
    state._fsp--;
    if (state.failed)     return retval;
  }
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
