{
  BaseDescr expr=null;
  try {
    int alt55=2;
    int LA55_0=input.LA(1);
    if ((LA55_0 == LEFT_PAREN)) {
      int LA55_1=input.LA(2);
      if ((synpred20_DRL6Expressions())) {
        alt55=1;
      }
 else       if ((synpred21_DRL6Expressions())) {
        alt55=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",55,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",55,0,input);
      throw nvae;
    }
switch (alt55) {
case 1:
{
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression2727);
        if (state.failed)         return;
        pushFollow(FOLLOW_primitiveType_in_castExpression2729);
        primitiveType();
        state._fsp--;
        if (state.failed)         return;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression2731);
        if (state.failed)         return;
        pushFollow(FOLLOW_unaryExpression_in_castExpression2735);
        expr=unaryExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression2752);
    if (state.failed)     return;
    pushFollow(FOLLOW_type_in_castExpression2754);
    type();
    state._fsp--;
    if (state.failed)     return;
    match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression2756);
    if (state.failed)     return;
    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression2758);
    unaryExpressionNotPlusMinus();
    state._fsp--;
    if (state.failed)     return;
  }
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
