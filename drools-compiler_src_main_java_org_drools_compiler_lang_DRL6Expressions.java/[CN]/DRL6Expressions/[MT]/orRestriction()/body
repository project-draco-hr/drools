{
  BaseDescr result=null;
  Token lop=null;
  BaseDescr left=null;
  AnnotationDescr args=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_andRestriction_in_orRestriction1810);
      left=andRestriction();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
      }
      loop39:       while (true) {
        int alt39=2;
        int LA39_0=input.LA(1);
        if ((LA39_0 == DOUBLE_PIPE)) {
          int LA39_9=input.LA(2);
          if ((synpred9_DRL6Expressions())) {
            alt39=1;
          }
        }
switch (alt39) {
case 1:
{
            lop=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_orRestriction1832);
            if (state.failed)             return result;
            int alt38=2;
            int LA38_0=input.LA(1);
            if ((LA38_0 == AT)) {
              alt38=1;
            }
switch (alt38) {
case 1:
{
                pushFollow(FOLLOW_fullAnnotation_in_orRestriction1836);
                args=fullAnnotation(null);
                state._fsp--;
                if (state.failed)                 return result;
              }
            break;
        }
        pushFollow(FOLLOW_andRestriction_in_orRestriction1842);
        right=andRestriction();
        state._fsp--;
        if (state.failed)         return result;
        if (state.backtracking == 0) {
          if (buildDescr) {
            ConstraintConnectiveDescr descr=ConstraintConnectiveDescr.newOr();
            descr.addOrMerge(result);
            descr.addOrMerge(right);
            if (args != null) {
              descr.addAnnotation(args);
            }
            result=descr;
          }
        }
      }
    break;
default :
  break loop39;
}
}
int alt40=2;
int LA40_0=input.LA(1);
if ((LA40_0 == EOF)) {
int LA40_1=input.LA(2);
if ((LA40_1 == EOF)) {
int LA40_3=input.LA(3);
if ((LA40_3 == EOF)) {
  alt40=1;
}
}
 else if (((LA40_1 >= AMPER && LA40_1 <= AND_ASSIGN) || LA40_1 == AT || (LA40_1 >= COLON && LA40_1 <= COMMA) || LA40_1 == DIV_ASSIGN || (LA40_1 >= DOUBLE_AMPER && LA40_1 <= DOUBLE_PIPE) || (LA40_1 >= EQUALS && LA40_1 <= EQUALS_ASSIGN) || (LA40_1 >= GREATER && LA40_1 <= GREATER_EQUALS) || LA40_1 == ID || LA40_1 == LEFT_PAREN || (LA40_1 >= LESS && LA40_1 <= LESS_EQUALS) || LA40_1 == MINUS_ASSIGN || LA40_1 == MOD_ASSIGN || LA40_1 == MULT_ASSIGN || LA40_1 == NOT_EQUALS || LA40_1 == OR_ASSIGN || LA40_1 == PIPE || (LA40_1 >= PLUS_ASSIGN && LA40_1 <= SEMICOLON) || LA40_1 == TILDE || (LA40_1 >= XOR && LA40_1 <= XOR_ASSIGN))) {
alt40=1;
}
}
switch (alt40) {
case 1:
{
match(input,EOF,FOLLOW_EOF_in_orRestriction1861);
if (state.failed) return result;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
