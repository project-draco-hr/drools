{
  java.util.List result=null;
  Object anno=null;
  result=new java.util.ArrayList();
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_annotationArray1122);
      if (state.failed)       return result;
      int alt23=2;
      int LA23_0=input.LA(1);
      if (((LA23_0 >= AT && LA23_0 <= BOOL) || (LA23_0 >= DECIMAL && LA23_0 <= DIV) || LA23_0 == FLOAT || LA23_0 == HEX || (LA23_0 >= ID && LA23_0 <= INCR) || (LA23_0 >= LEFT_CURLY && LA23_0 <= LESS) || LA23_0 == MINUS || LA23_0 == NEGATION || LA23_0 == NULL || LA23_0 == PLUS || (LA23_0 >= STAR && LA23_0 <= TIME_INTERVAL))) {
        alt23=1;
      }
switch (alt23) {
case 1:
{
          pushFollow(FOLLOW_annotationValue_in_annotationArray1128);
          anno=annotationValue(inDescrBuilder);
          state._fsp--;
          if (state.failed)           return result;
          if (state.backtracking == 0) {
            result.add(anno);
          }
          loop22:           while (true) {
            int alt22=2;
            int LA22_0=input.LA(1);
            if ((LA22_0 == COMMA)) {
              alt22=1;
            }
switch (alt22) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_annotationArray1151);
                if (state.failed)                 return result;
                pushFollow(FOLLOW_annotationValue_in_annotationArray1155);
                anno=annotationValue(inDescrBuilder);
                state._fsp--;
                if (state.failed)                 return result;
                if (state.backtracking == 0) {
                  result.add(anno);
                }
              }
            break;
default :
          break loop22;
      }
    }
  }
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_annotationArray1171);
if (state.failed) return result;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
