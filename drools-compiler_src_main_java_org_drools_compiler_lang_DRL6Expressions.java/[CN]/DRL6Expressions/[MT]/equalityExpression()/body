{
  BaseDescr result=null;
  Token op=null;
  BaseDescr left=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1363);
      left=instanceOfExpression();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
      }
      loop30:       do {
        int alt30=2;
        int LA30_0=input.LA(1);
        if (((LA30_0 >= EQUALS && LA30_0 <= NOT_EQUALS))) {
          alt30=1;
        }
switch (alt30) {
case 1:
{
            int alt29=2;
            int LA29_0=input.LA(1);
            if ((LA29_0 == EQUALS)) {
              alt29=1;
            }
 else             if ((LA29_0 == NOT_EQUALS)) {
              alt29=2;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return result;
              }
              NoViableAltException nvae=new NoViableAltException("",29,0,input);
              throw nvae;
            }
switch (alt29) {
case 1:
{
                op=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_equalityExpression1375);
                if (state.failed)                 return result;
              }
            break;
case 2:
{
            op=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_equalityExpression1381);
            if (state.failed)             return result;
          }
        break;
    }
    if (state.backtracking == 0) {
      helper.setHasOperator(true);
      if (input.LA(1) != DRL6Lexer.EOF)       helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
    }
    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1397);
    right=instanceOfExpression();
    state._fsp--;
    if (state.failed)     return result;
    if (state.backtracking == 0) {
      if (buildDescr) {
        result=new RelationalExprDescr((op != null ? op.getText() : null),false,null,left,right);
      }
    }
  }
break;
default :
break loop30;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
