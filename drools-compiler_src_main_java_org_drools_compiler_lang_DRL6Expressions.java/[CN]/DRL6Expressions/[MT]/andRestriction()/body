{
  BaseDescr result=null;
  Token lop=null;
  BaseDescr left=null;
  AnnotationDescr args=null;
  BaseDescr right=null;
  try {
{
      pushFollow(FOLLOW_singleRestriction_in_andRestriction1849);
      left=singleRestriction();
      state._fsp--;
      if (state.failed)       return result;
      if (state.backtracking == 0) {
        if (buildDescr) {
          result=left;
        }
      }
      loop40:       while (true) {
        int alt40=2;
        int LA40_0=input.LA(1);
        if ((LA40_0 == DOUBLE_AMPER)) {
          int LA40_9=input.LA(2);
          if ((synpred10_DRL6Expressions())) {
            alt40=1;
          }
        }
switch (alt40) {
case 1:
{
            lop=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_andRestriction1869);
            if (state.failed)             return result;
            if (state.backtracking == 0) {
              if (isNotEOF())               helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            }
            int alt39=2;
            int LA39_0=input.LA(1);
            if ((LA39_0 == AT)) {
              alt39=1;
            }
switch (alt39) {
case 1:
{
                pushFollow(FOLLOW_fullAnnotation_in_andRestriction1890);
                args=fullAnnotation(null);
                state._fsp--;
                if (state.failed)                 return result;
              }
            break;
        }
        pushFollow(FOLLOW_singleRestriction_in_andRestriction1895);
        right=singleRestriction();
        state._fsp--;
        if (state.failed)         return result;
        if (state.backtracking == 0) {
          if (buildDescr) {
            ConstraintConnectiveDescr descr=ConstraintConnectiveDescr.newAnd();
            descr.addOrMerge(result);
            descr.addOrMerge(right);
            if (args != null) {
              descr.addAnnotation(args);
            }
            result=descr;
          }
        }
      }
    break;
default :
  break loop40;
}
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
