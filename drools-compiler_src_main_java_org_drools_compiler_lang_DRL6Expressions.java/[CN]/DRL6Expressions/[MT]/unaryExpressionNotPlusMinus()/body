{
  DRL6Expressions.unaryExpressionNotPlusMinus_return retval=new DRL6Expressions.unaryExpressionNotPlusMinus_return();
  retval.start=input.LT(1);
  Token var=null;
  Token COLON9=null;
  Token UNIFY10=null;
  BaseDescr left2=null;
  BaseDescr left1=null;
  boolean isLeft=false;
  BindingDescr bind=null;
  try {
    int alt54=5;
    int LA54_0=input.LA(1);
    if ((LA54_0 == TILDE)) {
      alt54=1;
    }
 else     if ((LA54_0 == NEGATION)) {
      alt54=2;
    }
 else     if ((LA54_0 == LEFT_PAREN)) {
      int LA54_3=input.LA(2);
      if ((synpred15_DRL6Expressions())) {
        alt54=3;
      }
 else       if ((true)) {
        alt54=5;
      }
    }
 else     if ((LA54_0 == DOT) && (synpred16_DRL6Expressions())) {
      alt54=4;
    }
 else     if ((LA54_0 == BOOL || LA54_0 == DECIMAL || LA54_0 == DIV || LA54_0 == FLOAT || LA54_0 == HEX || LA54_0 == ID || (LA54_0 >= LEFT_SQUARE && LA54_0 <= LESS) || LA54_0 == NULL || (LA54_0 >= STAR && LA54_0 <= STRING) || LA54_0 == TIME_INTERVAL)) {
      alt54=5;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return retval;
      }
      NoViableAltException nvae=new NoViableAltException("",54,0,input);
      throw nvae;
    }
switch (alt54) {
case 1:
{
        match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus2453);
        if (state.failed)         return retval;
        pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2455);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return retval;
      }
    break;
case 2:
{
    match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus2464);
    if (state.failed)     return retval;
    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2466);
    unaryExpression();
    state._fsp--;
    if (state.failed)     return retval;
  }
break;
case 3:
{
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus2480);
castExpression();
state._fsp--;
if (state.failed) return retval;
}
break;
case 4:
{
pushFollow(FOLLOW_backReferenceExpression_in_unaryExpressionNotPlusMinus2494);
backReferenceExpression();
state._fsp--;
if (state.failed) return retval;
}
break;
case 5:
{
if (state.backtracking == 0) {
isLeft=helper.getLeftMostExpr() == null;
}
int alt50=3;
int LA50_0=input.LA(1);
if ((LA50_0 == ID)) {
int LA50_1=input.LA(2);
if ((LA50_1 == COLON)) {
int LA50_3=input.LA(3);
if (((inMap == 0 && ternOp == 0 && input.LA(2) == DRL6Lexer.COLON))) {
alt50=1;
}
}
 else if ((LA50_1 == UNIFY)) {
alt50=2;
}
}
switch (alt50) {
case 1:
{
{
if (!((inMap == 0 && ternOp == 0 && input.LA(2) == DRL6Lexer.COLON))) {
if (state.backtracking > 0) {
  state.failed=true;
  return retval;
}
throw new FailedPredicateException(input,"unaryExpressionNotPlusMinus","inMap == 0 && ternOp == 0 && input.LA(2) == DRL6Lexer.COLON");
}
{
var=(Token)match(input,ID,FOLLOW_ID_in_unaryExpressionNotPlusMinus2522);
if (state.failed) return retval;
COLON9=(Token)match(input,COLON,FOLLOW_COLON_in_unaryExpressionNotPlusMinus2524);
if (state.failed) return retval;
if (state.backtracking == 0) {
  hasBindings=true;
  helper.emit(var,DroolsEditorType.IDENTIFIER_VARIABLE);
  helper.emit(COLON9,DroolsEditorType.SYMBOL);
  if (buildDescr) {
    bind=new BindingDescr((var != null ? var.getText() : null),null,false);
    helper.setStart(bind,var);
  }
}
}
}
}
break;
case 2:
{
{
if (!((inMap == 0 && ternOp == 0 && input.LA(2) == DRL6Lexer.UNIFY))) {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
throw new FailedPredicateException(input,"unaryExpressionNotPlusMinus","inMap == 0 && ternOp == 0 && input.LA(2) == DRL6Lexer.UNIFY");
}
{
var=(Token)match(input,ID,FOLLOW_ID_in_unaryExpressionNotPlusMinus2563);
if (state.failed) return retval;
UNIFY10=(Token)match(input,UNIFY,FOLLOW_UNIFY_in_unaryExpressionNotPlusMinus2565);
if (state.failed) return retval;
if (state.backtracking == 0) {
hasBindings=true;
helper.emit(var,DroolsEditorType.IDENTIFIER_VARIABLE);
helper.emit(UNIFY10,DroolsEditorType.SYMBOL);
if (buildDescr) {
bind=new BindingDescr((var != null ? var.getText() : null),null,true);
helper.setStart(bind,var);
}
}
}
}
}
break;
}
int alt51=2;
int LA51_0=input.LA(1);
if ((LA51_0 == DIV) && (synpred17_DRL6Expressions())) {
alt51=1;
}
 else if ((LA51_0 == BOOL || LA51_0 == DECIMAL || LA51_0 == FLOAT || LA51_0 == HEX || LA51_0 == ID || (LA51_0 >= LEFT_PAREN && LA51_0 <= LESS) || LA51_0 == NULL || (LA51_0 >= STAR && LA51_0 <= STRING) || LA51_0 == TIME_INTERVAL)) {
alt51=2;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
NoViableAltException nvae=new NoViableAltException("",51,0,input);
throw nvae;
}
switch (alt51) {
case 1:
{
pushFollow(FOLLOW_xpathPrimary_in_unaryExpressionNotPlusMinus2619);
left2=xpathPrimary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) {
if (buildDescr) {
retval.result=left2;
}
}
}
break;
case 2:
{
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus2637);
left1=primary();
state._fsp--;
if (state.failed) return retval;
if (state.backtracking == 0) {
if (buildDescr) {
retval.result=left1;
}
}
}
break;
}
loop52: while (true) {
int alt52=2;
int LA52_0=input.LA(1);
if ((LA52_0 == DOT) && (synpred18_DRL6Expressions())) {
alt52=1;
}
 else if ((LA52_0 == LEFT_SQUARE) && (synpred18_DRL6Expressions())) {
alt52=1;
}
switch (alt52) {
case 1:
{
pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus2665);
selector();
state._fsp--;
if (state.failed) return retval;
}
break;
default :
break loop52;
}
}
if (state.backtracking == 0) {
if (buildDescr) {
String expr=input.toString(retval.start,input.LT(-1));
if (isLeft) {
helper.setLeftMostExpr(expr);
}
if (bind != null) {
if (bind.isUnification()) {
expr=expr.substring(expr.indexOf(":=") + 2).trim();
}
 else {
expr=expr.substring(expr.indexOf(":") + 1).trim();
}
bind.setExpressionAndBindingField(expr);
helper.setEnd(bind);
retval.result=bind;
}
}
}
int alt53=2;
int LA53_0=input.LA(1);
if ((LA53_0 == DECR || LA53_0 == INCR) && (synpred19_DRL6Expressions())) {
alt53=1;
}
switch (alt53) {
case 1:
{
if (input.LA(1) == DECR || input.LA(1) == INCR) {
input.consume();
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return retval;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return retval;
}
