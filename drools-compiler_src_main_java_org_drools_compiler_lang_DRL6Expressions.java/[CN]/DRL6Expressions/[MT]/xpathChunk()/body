{
  BaseDescr result=null;
  try {
{
      match(input,DIV,FOLLOW_DIV_in_xpathChunk2920);
      if (state.failed)       return result;
      match(input,ID,FOLLOW_ID_in_xpathChunk2922);
      if (state.failed)       return result;
      loop59:       while (true) {
        int alt59=2;
        int LA59_0=input.LA(1);
        if ((LA59_0 == DOT)) {
          int LA59_2=input.LA(2);
          if ((LA59_2 == ID)) {
            alt59=1;
          }
        }
switch (alt59) {
case 1:
{
            match(input,DOT,FOLLOW_DOT_in_xpathChunk2925);
            if (state.failed)             return result;
            match(input,ID,FOLLOW_ID_in_xpathChunk2927);
            if (state.failed)             return result;
          }
        break;
default :
      break loop59;
  }
}
int alt60=2;
int LA60_0=input.LA(1);
if ((LA60_0 == LEFT_SQUARE)) {
  int LA60_1=input.LA(2);
  if ((LA60_1 == DECIMAL)) {
    int LA60_3=input.LA(3);
    if ((LA60_3 == RIGHT_SQUARE)) {
      alt60=1;
    }
  }
}
switch (alt60) {
case 1:
{
    match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_xpathChunk2932);
    if (state.failed)     return result;
    match(input,DECIMAL,FOLLOW_DECIMAL_in_xpathChunk2934);
    if (state.failed)     return result;
    match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_xpathChunk2936);
    if (state.failed)     return result;
  }
break;
}
int alt61=2;
int LA61_0=input.LA(1);
if ((LA61_0 == LEFT_CURLY)) {
alt61=1;
}
switch (alt61) {
case 1:
{
match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_xpathChunk2941);
if (state.failed) return result;
pushFollow(FOLLOW_xpathExpressionList_in_xpathChunk2943);
xpathExpressionList();
state._fsp--;
if (state.failed) return result;
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_xpathChunk2945);
if (state.failed) return result;
}
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
