{
  BaseDescr result=null;
  try {
{
      match(input,DIV,FOLLOW_DIV_in_xpathChunk2880);
      if (state.failed)       return result;
      match(input,ID,FOLLOW_ID_in_xpathChunk2882);
      if (state.failed)       return result;
      loop58:       while (true) {
        int alt58=2;
        int LA58_0=input.LA(1);
        if ((LA58_0 == DOT)) {
          int LA58_2=input.LA(2);
          if ((LA58_2 == ID)) {
            alt58=1;
          }
        }
switch (alt58) {
case 1:
{
            match(input,DOT,FOLLOW_DOT_in_xpathChunk2885);
            if (state.failed)             return result;
            match(input,ID,FOLLOW_ID_in_xpathChunk2887);
            if (state.failed)             return result;
          }
        break;
default :
      break loop58;
  }
}
int alt59=2;
int LA59_0=input.LA(1);
if ((LA59_0 == LEFT_SQUARE)) {
  alt59=1;
}
switch (alt59) {
case 1:
{
    match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_xpathChunk2892);
    if (state.failed)     return result;
    pushFollow(FOLLOW_expressionList_in_xpathChunk2894);
    expressionList();
    state._fsp--;
    if (state.failed)     return result;
    match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_xpathChunk2896);
    if (state.failed)     return result;
  }
break;
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
