{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer3778);
      if (state.failed)       return;
      int alt78=2;
      int LA78_0=input.LA(1);
      if ((LA78_0 == FLOAT || (LA78_0 >= HEX && LA78_0 <= DECIMAL) || (LA78_0 >= STRING && LA78_0 <= TIME_INTERVAL) || (LA78_0 >= BOOL && LA78_0 <= NULL) || (LA78_0 >= DECR && LA78_0 <= INCR) || LA78_0 == LESS || LA78_0 == LEFT_PAREN || LA78_0 == LEFT_SQUARE || LA78_0 == LEFT_CURLY || (LA78_0 >= NEGATION && LA78_0 <= TILDE) || (LA78_0 >= STAR && LA78_0 <= PLUS) || LA78_0 == ID)) {
        alt78=1;
      }
switch (alt78) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3781);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop76:           do {
            int alt76=2;
            int LA76_0=input.LA(1);
            if ((LA76_0 == COMMA)) {
              int LA76_1=input.LA(2);
              if ((LA76_1 == FLOAT || (LA76_1 >= HEX && LA76_1 <= DECIMAL) || (LA76_1 >= STRING && LA76_1 <= TIME_INTERVAL) || (LA76_1 >= BOOL && LA76_1 <= NULL) || (LA76_1 >= DECR && LA76_1 <= INCR) || LA76_1 == LESS || LA76_1 == LEFT_PAREN || LA76_1 == LEFT_SQUARE || LA76_1 == LEFT_CURLY || (LA76_1 >= NEGATION && LA76_1 <= TILDE) || (LA76_1 >= STAR && LA76_1 <= PLUS) || LA76_1 == ID)) {
                alt76=1;
              }
            }
switch (alt76) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3784);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3786);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop76;
      }
    }
 while (true);
    int alt77=2;
    int LA77_0=input.LA(1);
    if ((LA77_0 == COMMA)) {
      alt77=1;
    }
switch (alt77) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3791);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer3798);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return;
}
