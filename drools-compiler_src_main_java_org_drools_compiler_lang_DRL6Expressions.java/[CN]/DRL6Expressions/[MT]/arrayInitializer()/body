{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer3820);
      if (state.failed)       return;
      int alt80=2;
      int LA80_0=input.LA(1);
      if ((LA80_0 == BOOL || (LA80_0 >= DECIMAL && LA80_0 <= DECR) || LA80_0 == FLOAT || LA80_0 == HEX || (LA80_0 >= ID && LA80_0 <= INCR) || (LA80_0 >= LEFT_CURLY && LA80_0 <= LESS) || LA80_0 == MINUS || LA80_0 == NEGATION || LA80_0 == NULL || LA80_0 == PLUS || (LA80_0 >= STAR && LA80_0 <= TIME_INTERVAL))) {
        alt80=1;
      }
switch (alt80) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3823);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop78:           while (true) {
            int alt78=2;
            int LA78_0=input.LA(1);
            if ((LA78_0 == COMMA)) {
              int LA78_1=input.LA(2);
              if ((LA78_1 == BOOL || (LA78_1 >= DECIMAL && LA78_1 <= DECR) || LA78_1 == FLOAT || LA78_1 == HEX || (LA78_1 >= ID && LA78_1 <= INCR) || (LA78_1 >= LEFT_CURLY && LA78_1 <= LESS) || LA78_1 == MINUS || LA78_1 == NEGATION || LA78_1 == NULL || LA78_1 == PLUS || (LA78_1 >= STAR && LA78_1 <= TIME_INTERVAL))) {
                alt78=1;
              }
            }
switch (alt78) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3826);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3828);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop78;
      }
    }
    int alt79=2;
    int LA79_0=input.LA(1);
    if ((LA79_0 == COMMA)) {
      alt79=1;
    }
switch (alt79) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3833);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer3840);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
