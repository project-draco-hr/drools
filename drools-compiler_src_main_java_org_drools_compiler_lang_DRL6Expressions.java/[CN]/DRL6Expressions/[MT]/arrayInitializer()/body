{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer4082);
      if (state.failed)       return;
      int alt88=2;
      int LA88_0=input.LA(1);
      if ((LA88_0 == BOOL || (LA88_0 >= DECIMAL && LA88_0 <= DIV) || LA88_0 == DOT || LA88_0 == FLOAT || LA88_0 == HEX || (LA88_0 >= ID && LA88_0 <= INCR) || (LA88_0 >= LEFT_CURLY && LA88_0 <= LESS) || LA88_0 == MINUS || LA88_0 == NEGATION || LA88_0 == NULL || LA88_0 == PLUS || (LA88_0 >= STAR && LA88_0 <= TIME_INTERVAL))) {
        alt88=1;
      }
switch (alt88) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer4085);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop86:           while (true) {
            int alt86=2;
            int LA86_0=input.LA(1);
            if ((LA86_0 == COMMA)) {
              int LA86_1=input.LA(2);
              if ((LA86_1 == BOOL || (LA86_1 >= DECIMAL && LA86_1 <= DIV) || LA86_1 == DOT || LA86_1 == FLOAT || LA86_1 == HEX || (LA86_1 >= ID && LA86_1 <= INCR) || (LA86_1 >= LEFT_CURLY && LA86_1 <= LESS) || LA86_1 == MINUS || LA86_1 == NEGATION || LA86_1 == NULL || LA86_1 == PLUS || (LA86_1 >= STAR && LA86_1 <= TIME_INTERVAL))) {
                alt86=1;
              }
            }
switch (alt86) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer4088);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer4090);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop86;
      }
    }
    int alt87=2;
    int LA87_0=input.LA(1);
    if ((LA87_0 == COMMA)) {
      alt87=1;
    }
switch (alt87) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer4095);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer4102);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
