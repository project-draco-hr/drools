{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer4024);
      if (state.failed)       return;
      int alt86=2;
      int LA86_0=input.LA(1);
      if ((LA86_0 == BOOL || (LA86_0 >= DECIMAL && LA86_0 <= DIV) || LA86_0 == FLOAT || LA86_0 == HEX || (LA86_0 >= ID && LA86_0 <= INCR) || (LA86_0 >= LEFT_CURLY && LA86_0 <= LESS) || LA86_0 == MINUS || LA86_0 == NEGATION || LA86_0 == NULL || LA86_0 == PLUS || (LA86_0 >= STAR && LA86_0 <= TIME_INTERVAL))) {
        alt86=1;
      }
switch (alt86) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer4027);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop84:           while (true) {
            int alt84=2;
            int LA84_0=input.LA(1);
            if ((LA84_0 == COMMA)) {
              int LA84_1=input.LA(2);
              if ((LA84_1 == BOOL || (LA84_1 >= DECIMAL && LA84_1 <= DIV) || LA84_1 == FLOAT || LA84_1 == HEX || (LA84_1 >= ID && LA84_1 <= INCR) || (LA84_1 >= LEFT_CURLY && LA84_1 <= LESS) || LA84_1 == MINUS || LA84_1 == NEGATION || LA84_1 == NULL || LA84_1 == PLUS || (LA84_1 >= STAR && LA84_1 <= TIME_INTERVAL))) {
                alt84=1;
              }
            }
switch (alt84) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer4030);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer4032);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop84;
      }
    }
    int alt85=2;
    int LA85_0=input.LA(1);
    if ((LA85_0 == COMMA)) {
      alt85=1;
    }
switch (alt85) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer4037);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer4044);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
