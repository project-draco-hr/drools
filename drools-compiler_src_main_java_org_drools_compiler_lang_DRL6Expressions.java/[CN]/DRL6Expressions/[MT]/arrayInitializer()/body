{
  try {
{
      match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer3973);
      if (state.failed)       return;
      int alt84=2;
      int LA84_0=input.LA(1);
      if ((LA84_0 == BOOL || (LA84_0 >= DECIMAL && LA84_0 <= DIV) || LA84_0 == FLOAT || LA84_0 == HEX || (LA84_0 >= ID && LA84_0 <= INCR) || (LA84_0 >= LEFT_CURLY && LA84_0 <= LESS) || LA84_0 == MINUS || LA84_0 == NEGATION || LA84_0 == NULL || LA84_0 == PLUS || (LA84_0 >= STAR && LA84_0 <= TIME_INTERVAL))) {
        alt84=1;
      }
switch (alt84) {
case 1:
{
          pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3976);
          variableInitializer();
          state._fsp--;
          if (state.failed)           return;
          loop82:           while (true) {
            int alt82=2;
            int LA82_0=input.LA(1);
            if ((LA82_0 == COMMA)) {
              int LA82_1=input.LA(2);
              if ((LA82_1 == BOOL || (LA82_1 >= DECIMAL && LA82_1 <= DIV) || LA82_1 == FLOAT || LA82_1 == HEX || (LA82_1 >= ID && LA82_1 <= INCR) || (LA82_1 >= LEFT_CURLY && LA82_1 <= LESS) || LA82_1 == MINUS || LA82_1 == NEGATION || LA82_1 == NULL || LA82_1 == PLUS || (LA82_1 >= STAR && LA82_1 <= TIME_INTERVAL))) {
                alt82=1;
              }
            }
switch (alt82) {
case 1:
{
                match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3979);
                if (state.failed)                 return;
                pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3981);
                variableInitializer();
                state._fsp--;
                if (state.failed)                 return;
              }
            break;
default :
          break loop82;
      }
    }
    int alt83=2;
    int LA83_0=input.LA(1);
    if ((LA83_0 == COMMA)) {
      alt83=1;
    }
switch (alt83) {
case 1:
{
        match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer3986);
        if (state.failed)         return;
      }
    break;
}
}
break;
}
match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer3993);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
