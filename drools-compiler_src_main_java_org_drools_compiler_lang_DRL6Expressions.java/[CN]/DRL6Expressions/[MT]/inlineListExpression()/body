{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression3205);
      if (state.failed)       return;
      int alt62=2;
      int LA62_0=input.LA(1);
      if ((LA62_0 == BOOL || (LA62_0 >= DECIMAL && LA62_0 <= DECR) || LA62_0 == FLOAT || LA62_0 == HEX || (LA62_0 >= ID && LA62_0 <= INCR) || (LA62_0 >= LEFT_PAREN && LA62_0 <= LESS) || LA62_0 == MINUS || LA62_0 == NEGATION || LA62_0 == NULL || LA62_0 == PLUS || (LA62_0 >= STAR && LA62_0 <= TIME_INTERVAL))) {
        alt62=1;
      }
switch (alt62) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_inlineListExpression3207);
          expressionList();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression3210);
  if (state.failed)   return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
