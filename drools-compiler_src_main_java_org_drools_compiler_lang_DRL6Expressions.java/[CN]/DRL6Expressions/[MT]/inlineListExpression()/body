{
  try {
{
      match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression3219);
      if (state.failed)       return;
      int alt60=2;
      int LA60_0=input.LA(1);
      if ((LA60_0 == BOOL || (LA60_0 >= DECIMAL && LA60_0 <= DECR) || LA60_0 == FLOAT || LA60_0 == HEX || (LA60_0 >= ID && LA60_0 <= INCR) || (LA60_0 >= LEFT_PAREN && LA60_0 <= LESS) || LA60_0 == MINUS || LA60_0 == NEGATION || LA60_0 == NULL || LA60_0 == PLUS || (LA60_0 >= STAR && LA60_0 <= TIME_INTERVAL))) {
        alt60=1;
      }
switch (alt60) {
case 1:
{
          pushFollow(FOLLOW_expressionList_in_inlineListExpression3221);
          expressionList();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression3224);
  if (state.failed)   return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
