{
  Object value=null;
  try {
{
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotationArgs945);
      if (state.failed)       return;
      int alt19=3;
      int LA19_0=input.LA(1);
      if ((LA19_0 == ID)) {
        int LA19_1=input.LA(2);
        if ((synpred7_DRL6Expressions())) {
          alt19=1;
        }
 else         if ((true)) {
          alt19=2;
        }
      }
 else       if (((LA19_0 >= AT && LA19_0 <= BOOL) || (LA19_0 >= DECIMAL && LA19_0 <= DIV) || LA19_0 == FLOAT || LA19_0 == HEX || LA19_0 == INCR || (LA19_0 >= LEFT_CURLY && LA19_0 <= LESS) || LA19_0 == MINUS || LA19_0 == NEGATION || LA19_0 == NULL || LA19_0 == PLUS || (LA19_0 >= STAR && LA19_0 <= TIME_INTERVAL))) {
        alt19=2;
      }
switch (alt19) {
case 1:
{
          pushFollow(FOLLOW_annotationElementValuePairs_in_annotationArgs968);
          annotationElementValuePairs(descr,inDescrBuilder);
          state._fsp--;
          if (state.failed)           return;
        }
      break;
case 2:
{
      pushFollow(FOLLOW_annotationValue_in_annotationArgs982);
      value=annotationValue(inDescrBuilder);
      state._fsp--;
      if (state.failed)       return;
      if (state.backtracking == 0) {
        if (buildDescr) {
          descr.setValue(value);
        }
      }
    }
  break;
}
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotationArgs998);
if (state.failed) return;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
}
