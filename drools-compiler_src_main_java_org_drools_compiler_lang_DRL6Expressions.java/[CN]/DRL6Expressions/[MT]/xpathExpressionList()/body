{
  java.util.List<String> exprs=null;
  ParserRuleReturnScope f=null;
  ParserRuleReturnScope s=null;
  exprs=new java.util.ArrayList<String>();
  try {
{
      int alt60=2;
      int LA60_0=input.LA(1);
      if ((LA60_0 == HASH) && (synpred22_DRL6Expressions())) {
        alt60=1;
      }
 else       if ((LA60_0 == BOOL || (LA60_0 >= DECIMAL && LA60_0 <= DIV) || LA60_0 == FLOAT || LA60_0 == HEX || (LA60_0 >= ID && LA60_0 <= INCR) || (LA60_0 >= LEFT_PAREN && LA60_0 <= LESS) || LA60_0 == MINUS || LA60_0 == NEGATION || LA60_0 == NULL || LA60_0 == PLUS || (LA60_0 >= STAR && LA60_0 <= TIME_INTERVAL))) {
        alt60=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return exprs;
        }
        NoViableAltException nvae=new NoViableAltException("",60,0,input);
        throw nvae;
      }
switch (alt60) {
case 1:
{
          match(input,HASH,FOLLOW_HASH_in_xpathExpressionList2921);
          if (state.failed)           return exprs;
          match(input,ID,FOLLOW_ID_in_xpathExpressionList2923);
          if (state.failed)           return exprs;
        }
      break;
case 2:
{
      pushFollow(FOLLOW_expression_in_xpathExpressionList2929);
      f=expression();
      state._fsp--;
      if (state.failed)       return exprs;
      if (state.backtracking == 0) {
        exprs.add((f != null ? input.toString(f.start,f.stop) : null));
      }
    }
  break;
}
loop61: while (true) {
int alt61=2;
int LA61_0=input.LA(1);
if ((LA61_0 == COMMA)) {
  alt61=1;
}
switch (alt61) {
case 1:
{
    match(input,COMMA,FOLLOW_COMMA_in_xpathExpressionList2941);
    if (state.failed)     return exprs;
    pushFollow(FOLLOW_expression_in_xpathExpressionList2945);
    s=expression();
    state._fsp--;
    if (state.failed)     return exprs;
    if (state.backtracking == 0) {
      exprs.add((s != null ? input.toString(s.start,s.stop) : null));
    }
  }
break;
default :
break loop61;
}
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return exprs;
}
