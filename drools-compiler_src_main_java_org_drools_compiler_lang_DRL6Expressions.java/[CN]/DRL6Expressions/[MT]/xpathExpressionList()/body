{
  java.util.List<String> exprs=null;
  ParserRuleReturnScope f=null;
  ParserRuleReturnScope s=null;
  exprs=new java.util.ArrayList<String>();
  try {
{
      int alt62=2;
      int LA62_0=input.LA(1);
      if ((LA62_0 == HASH) && (synpred24_DRL6Expressions())) {
        alt62=1;
      }
 else       if ((LA62_0 == BOOL || (LA62_0 >= DECIMAL && LA62_0 <= DIV) || LA62_0 == DOT || LA62_0 == FLOAT || LA62_0 == HEX || (LA62_0 >= ID && LA62_0 <= INCR) || (LA62_0 >= LEFT_PAREN && LA62_0 <= LESS) || LA62_0 == MINUS || LA62_0 == NEGATION || LA62_0 == NULL || LA62_0 == PLUS || LA62_0 == QUESTION_DIV || (LA62_0 >= STAR && LA62_0 <= TIME_INTERVAL))) {
        alt62=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return exprs;
        }
        NoViableAltException nvae=new NoViableAltException("",62,0,input);
        throw nvae;
      }
switch (alt62) {
case 1:
{
          match(input,HASH,FOLLOW_HASH_in_xpathExpressionList3008);
          if (state.failed)           return exprs;
          match(input,ID,FOLLOW_ID_in_xpathExpressionList3010);
          if (state.failed)           return exprs;
        }
      break;
case 2:
{
      pushFollow(FOLLOW_expression_in_xpathExpressionList3016);
      f=expression();
      state._fsp--;
      if (state.failed)       return exprs;
      if (state.backtracking == 0) {
        exprs.add((f != null ? input.toString(f.start,f.stop) : null));
      }
    }
  break;
}
loop63: while (true) {
int alt63=2;
int LA63_0=input.LA(1);
if ((LA63_0 == COMMA)) {
  alt63=1;
}
switch (alt63) {
case 1:
{
    match(input,COMMA,FOLLOW_COMMA_in_xpathExpressionList3028);
    if (state.failed)     return exprs;
    pushFollow(FOLLOW_expression_in_xpathExpressionList3032);
    s=expression();
    state._fsp--;
    if (state.failed)     return exprs;
    if (state.backtracking == 0) {
      exprs.add((s != null ? input.toString(s.start,s.stop) : null));
    }
  }
break;
default :
break loop63;
}
}
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return exprs;
}
