{
  BaseDescr result=null;
  Token i1=null;
  Token d=null;
  Token i2=null;
  Token h=null;
  Token n=null;
  Token LEFT_PAREN12=null;
  Token COMMA13=null;
  Token RIGHT_PAREN14=null;
  BaseDescr expr=null;
  ParserRuleReturnScope literal11=null;
  try {
    int alt65=9;
    int LA65_0=input.LA(1);
    if ((LA65_0 == LEFT_PAREN) && (synpred22_DRL6Expressions())) {
      alt65=1;
    }
 else     if ((LA65_0 == LESS) && (synpred23_DRL6Expressions())) {
      alt65=2;
    }
 else     if ((LA65_0 == STRING) && (synpred24_DRL6Expressions())) {
      alt65=3;
    }
 else     if ((LA65_0 == DECIMAL) && (synpred24_DRL6Expressions())) {
      alt65=3;
    }
 else     if ((LA65_0 == HEX) && (synpred24_DRL6Expressions())) {
      alt65=3;
    }
 else     if ((LA65_0 == FLOAT) && (synpred24_DRL6Expressions())) {
      alt65=3;
    }
 else     if ((LA65_0 == BOOL) && (synpred24_DRL6Expressions())) {
      alt65=3;
    }
 else     if ((LA65_0 == NULL) && (synpred24_DRL6Expressions())) {
      alt65=3;
    }
 else     if ((LA65_0 == TIME_INTERVAL) && (synpred24_DRL6Expressions())) {
      alt65=3;
    }
 else     if ((LA65_0 == STAR) && (synpred24_DRL6Expressions())) {
      alt65=3;
    }
 else     if ((LA65_0 == ID)) {
      int LA65_11=input.LA(2);
      if (((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))) && synpred25_DRL6Expressions()))) {
        alt65=4;
      }
 else       if (((synpred26_DRL6Expressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NEW)))))) {
        alt65=5;
      }
 else       if ((((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) && synpred27_DRL6Expressions()))) {
        alt65=6;
      }
 else       if ((synpred30_DRL6Expressions())) {
        alt65=9;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return result;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",65,11,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else     if ((LA65_0 == LEFT_SQUARE)) {
      int LA65_12=input.LA(2);
      if ((synpred28_DRL6Expressions())) {
        alt65=7;
      }
 else       if ((synpred29_DRL6Expressions())) {
        alt65=8;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return result;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",65,12,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return result;
      }
      NoViableAltException nvae=new NoViableAltException("",65,0,input);
      throw nvae;
    }
switch (alt65) {
case 1:
{
        pushFollow(FOLLOW_parExpression_in_primary2926);
        expr=parExpression();
        state._fsp--;
        if (state.failed)         return result;
        if (state.backtracking == 0) {
          if (buildDescr) {
            result=expr;
          }
        }
      }
    break;
case 2:
{
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary2943);
    nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return result;
    int alt60=2;
    int LA60_0=input.LA(1);
    if ((LA60_0 == ID)) {
      int LA60_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt60=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt60=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return result;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",60,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return result;
      }
      NoViableAltException nvae=new NoViableAltException("",60,0,input);
      throw nvae;
    }
switch (alt60) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary2946);
        explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return result;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary2950);
    this_key();
    state._fsp--;
    if (state.failed)     return result;
    pushFollow(FOLLOW_arguments_in_primary2952);
    arguments();
    state._fsp--;
    if (state.failed)     return result;
  }
break;
}
}
break;
case 3:
{
pushFollow(FOLLOW_literal_in_primary2968);
literal11=literal();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
if (buildDescr) {
result=new AtomicExprDescr((literal11 != null ? input.toString(literal11.start,literal11.stop) : null),true);
}
}
}
break;
case 4:
{
pushFollow(FOLLOW_super_key_in_primary2990);
super_key();
state._fsp--;
if (state.failed) return result;
pushFollow(FOLLOW_superSuffix_in_primary2992);
superSuffix();
state._fsp--;
if (state.failed) return result;
}
break;
case 5:
{
pushFollow(FOLLOW_new_key_in_primary3007);
new_key();
state._fsp--;
if (state.failed) return result;
pushFollow(FOLLOW_creator_in_primary3009);
creator();
state._fsp--;
if (state.failed) return result;
}
break;
case 6:
{
pushFollow(FOLLOW_primitiveType_in_primary3024);
primitiveType();
state._fsp--;
if (state.failed) return result;
loop61: while (true) {
int alt61=2;
int LA61_0=input.LA(1);
if ((LA61_0 == LEFT_SQUARE)) {
alt61=1;
}
switch (alt61) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary3027);
if (state.failed) return result;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary3029);
if (state.failed) return result;
}
break;
default :
break loop61;
}
}
match(input,DOT,FOLLOW_DOT_in_primary3033);
if (state.failed) return result;
pushFollow(FOLLOW_class_key_in_primary3035);
class_key();
state._fsp--;
if (state.failed) return result;
}
break;
case 7:
{
pushFollow(FOLLOW_inlineMapExpression_in_primary3055);
inlineMapExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 8:
{
pushFollow(FOLLOW_inlineListExpression_in_primary3070);
inlineListExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 9:
{
i1=(Token)match(input,ID,FOLLOW_ID_in_primary3086);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(i1,DroolsEditorType.IDENTIFIER);
}
loop63: while (true) {
int alt63=5;
int LA63_0=input.LA(1);
if ((LA63_0 == DOT)) {
int LA63_2=input.LA(2);
if ((LA63_2 == ID)) {
int LA63_5=input.LA(3);
if ((synpred31_DRL6Expressions())) {
alt63=1;
}
}
 else if ((LA63_2 == LEFT_PAREN) && (synpred32_DRL6Expressions())) {
alt63=2;
}
}
 else if ((LA63_0 == HASH) && (synpred33_DRL6Expressions())) {
alt63=3;
}
 else if ((LA63_0 == NULL_SAFE_DOT) && (synpred34_DRL6Expressions())) {
alt63=4;
}
switch (alt63) {
case 1:
{
{
d=(Token)match(input,DOT,FOLLOW_DOT_in_primary3122);
if (state.failed) return result;
i2=(Token)match(input,ID,FOLLOW_ID_in_primary3126);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(d,DroolsEditorType.SYMBOL);
helper.emit(i2,DroolsEditorType.IDENTIFIER);
}
}
}
break;
case 2:
{
{
d=(Token)match(input,DOT,FOLLOW_DOT_in_primary3168);
if (state.failed) return result;
LEFT_PAREN12=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_primary3170);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(d,DroolsEditorType.SYMBOL);
helper.emit(LEFT_PAREN12,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_in_primary3210);
expression();
state._fsp--;
if (state.failed) return result;
loop62: while (true) {
int alt62=2;
int LA62_0=input.LA(1);
if ((LA62_0 == COMMA)) {
alt62=1;
}
switch (alt62) {
case 1:
{
COMMA13=(Token)match(input,COMMA,FOLLOW_COMMA_in_primary3213);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(COMMA13,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_in_primary3217);
expression();
state._fsp--;
if (state.failed) return result;
}
break;
default :
break loop62;
}
}
RIGHT_PAREN14=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_primary3257);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(RIGHT_PAREN14,DroolsEditorType.SYMBOL);
}
}
}
break;
case 3:
{
{
h=(Token)match(input,HASH,FOLLOW_HASH_in_primary3311);
if (state.failed) return result;
i2=(Token)match(input,ID,FOLLOW_ID_in_primary3315);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(h,DroolsEditorType.SYMBOL);
helper.emit(i2,DroolsEditorType.IDENTIFIER);
}
}
}
break;
case 4:
{
{
n=(Token)match(input,NULL_SAFE_DOT,FOLLOW_NULL_SAFE_DOT_in_primary3357);
if (state.failed) return result;
i2=(Token)match(input,ID,FOLLOW_ID_in_primary3361);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(n,DroolsEditorType.SYMBOL);
helper.emit(i2,DroolsEditorType.IDENTIFIER);
}
}
}
break;
default :
break loop63;
}
}
int alt64=2;
int LA64_0=input.LA(1);
if ((LA64_0 == LEFT_SQUARE)) {
int LA64_1=input.LA(2);
if ((synpred35_DRL6Expressions())) {
alt64=1;
}
}
 else if ((LA64_0 == LEFT_PAREN)) {
int LA64_2=input.LA(2);
if ((synpred35_DRL6Expressions())) {
alt64=1;
}
}
switch (alt64) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary3383);
identifierSuffix();
state._fsp--;
if (state.failed) return result;
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
