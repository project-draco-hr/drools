{
  BaseDescr result=null;
  Token i1=null;
  Token d=null;
  Token i2=null;
  Token h=null;
  Token n=null;
  Token LEFT_PAREN12=null;
  Token COMMA13=null;
  Token RIGHT_PAREN14=null;
  BaseDescr expr=null;
  ParserRuleReturnScope literal11=null;
  try {
    int alt68=9;
    int LA68_0=input.LA(1);
    if ((LA68_0 == LEFT_PAREN) && (synpred23_DRL6Expressions())) {
      alt68=1;
    }
 else     if ((LA68_0 == LESS) && (synpred24_DRL6Expressions())) {
      alt68=2;
    }
 else     if ((LA68_0 == STRING) && (synpred25_DRL6Expressions())) {
      alt68=3;
    }
 else     if ((LA68_0 == DECIMAL) && (synpred25_DRL6Expressions())) {
      alt68=3;
    }
 else     if ((LA68_0 == HEX) && (synpred25_DRL6Expressions())) {
      alt68=3;
    }
 else     if ((LA68_0 == FLOAT) && (synpred25_DRL6Expressions())) {
      alt68=3;
    }
 else     if ((LA68_0 == BOOL) && (synpred25_DRL6Expressions())) {
      alt68=3;
    }
 else     if ((LA68_0 == NULL) && (synpred25_DRL6Expressions())) {
      alt68=3;
    }
 else     if ((LA68_0 == TIME_INTERVAL) && (synpred25_DRL6Expressions())) {
      alt68=3;
    }
 else     if ((LA68_0 == STAR) && (synpred25_DRL6Expressions())) {
      alt68=3;
    }
 else     if ((LA68_0 == ID)) {
      int LA68_11=input.LA(2);
      if (((synpred26_DRL6Expressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))))) {
        alt68=4;
      }
 else       if (((synpred27_DRL6Expressions() && ((helper.validateIdentifierKey(DroolsSoftKeywords.NEW)))))) {
        alt68=5;
      }
 else       if ((((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))) || ((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))|| ((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) && synpred28_DRL6Expressions()))) {
        alt68=6;
      }
 else       if ((synpred31_DRL6Expressions())) {
        alt68=9;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return result;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",68,11,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else     if ((LA68_0 == LEFT_SQUARE)) {
      int LA68_12=input.LA(2);
      if ((synpred29_DRL6Expressions())) {
        alt68=7;
      }
 else       if ((synpred30_DRL6Expressions())) {
        alt68=8;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return result;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",68,12,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return result;
      }
      NoViableAltException nvae=new NoViableAltException("",68,0,input);
      throw nvae;
    }
switch (alt68) {
case 1:
{
        pushFollow(FOLLOW_parExpression_in_primary2984);
        expr=parExpression();
        state._fsp--;
        if (state.failed)         return result;
        if (state.backtracking == 0) {
          if (buildDescr) {
            result=expr;
          }
        }
      }
    break;
case 2:
{
    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary3001);
    nonWildcardTypeArguments();
    state._fsp--;
    if (state.failed)     return result;
    int alt63=2;
    int LA63_0=input.LA(1);
    if ((LA63_0 == ID)) {
      int LA63_1=input.LA(2);
      if ((!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))))) {
        alt63=1;
      }
 else       if ((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS))))) {
        alt63=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return result;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",63,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return result;
      }
      NoViableAltException nvae=new NoViableAltException("",63,0,input);
      throw nvae;
    }
switch (alt63) {
case 1:
{
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary3004);
        explicitGenericInvocationSuffix();
        state._fsp--;
        if (state.failed)         return result;
      }
    break;
case 2:
{
    pushFollow(FOLLOW_this_key_in_primary3008);
    this_key();
    state._fsp--;
    if (state.failed)     return result;
    pushFollow(FOLLOW_arguments_in_primary3010);
    arguments();
    state._fsp--;
    if (state.failed)     return result;
  }
break;
}
}
break;
case 3:
{
pushFollow(FOLLOW_literal_in_primary3026);
literal11=literal();
state._fsp--;
if (state.failed) return result;
if (state.backtracking == 0) {
if (buildDescr) {
result=new AtomicExprDescr((literal11 != null ? input.toString(literal11.start,literal11.stop) : null),true);
}
}
}
break;
case 4:
{
pushFollow(FOLLOW_super_key_in_primary3048);
super_key();
state._fsp--;
if (state.failed) return result;
pushFollow(FOLLOW_superSuffix_in_primary3050);
superSuffix();
state._fsp--;
if (state.failed) return result;
}
break;
case 5:
{
pushFollow(FOLLOW_new_key_in_primary3065);
new_key();
state._fsp--;
if (state.failed) return result;
pushFollow(FOLLOW_creator_in_primary3067);
creator();
state._fsp--;
if (state.failed) return result;
}
break;
case 6:
{
pushFollow(FOLLOW_primitiveType_in_primary3082);
primitiveType();
state._fsp--;
if (state.failed) return result;
loop64: while (true) {
int alt64=2;
int LA64_0=input.LA(1);
if ((LA64_0 == LEFT_SQUARE)) {
alt64=1;
}
switch (alt64) {
case 1:
{
match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary3085);
if (state.failed) return result;
match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary3087);
if (state.failed) return result;
}
break;
default :
break loop64;
}
}
match(input,DOT,FOLLOW_DOT_in_primary3091);
if (state.failed) return result;
pushFollow(FOLLOW_class_key_in_primary3093);
class_key();
state._fsp--;
if (state.failed) return result;
}
break;
case 7:
{
pushFollow(FOLLOW_inlineMapExpression_in_primary3113);
inlineMapExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 8:
{
pushFollow(FOLLOW_inlineListExpression_in_primary3128);
inlineListExpression();
state._fsp--;
if (state.failed) return result;
}
break;
case 9:
{
i1=(Token)match(input,ID,FOLLOW_ID_in_primary3144);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(i1,DroolsEditorType.IDENTIFIER);
}
loop66: while (true) {
int alt66=5;
int LA66_0=input.LA(1);
if ((LA66_0 == DOT)) {
int LA66_2=input.LA(2);
if ((LA66_2 == ID)) {
int LA66_5=input.LA(3);
if ((synpred32_DRL6Expressions())) {
alt66=1;
}
}
 else if ((LA66_2 == LEFT_PAREN) && (synpred33_DRL6Expressions())) {
alt66=2;
}
}
 else if ((LA66_0 == HASH) && (synpred34_DRL6Expressions())) {
alt66=3;
}
 else if ((LA66_0 == NULL_SAFE_DOT) && (synpred35_DRL6Expressions())) {
alt66=4;
}
switch (alt66) {
case 1:
{
{
d=(Token)match(input,DOT,FOLLOW_DOT_in_primary3180);
if (state.failed) return result;
i2=(Token)match(input,ID,FOLLOW_ID_in_primary3184);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(d,DroolsEditorType.SYMBOL);
helper.emit(i2,DroolsEditorType.IDENTIFIER);
}
}
}
break;
case 2:
{
{
d=(Token)match(input,DOT,FOLLOW_DOT_in_primary3226);
if (state.failed) return result;
LEFT_PAREN12=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_primary3228);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(d,DroolsEditorType.SYMBOL);
helper.emit(LEFT_PAREN12,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_in_primary3268);
expression();
state._fsp--;
if (state.failed) return result;
loop65: while (true) {
int alt65=2;
int LA65_0=input.LA(1);
if ((LA65_0 == COMMA)) {
alt65=1;
}
switch (alt65) {
case 1:
{
COMMA13=(Token)match(input,COMMA,FOLLOW_COMMA_in_primary3271);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(COMMA13,DroolsEditorType.SYMBOL);
}
pushFollow(FOLLOW_expression_in_primary3275);
expression();
state._fsp--;
if (state.failed) return result;
}
break;
default :
break loop65;
}
}
RIGHT_PAREN14=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_primary3315);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(RIGHT_PAREN14,DroolsEditorType.SYMBOL);
}
}
}
break;
case 3:
{
{
h=(Token)match(input,HASH,FOLLOW_HASH_in_primary3369);
if (state.failed) return result;
i2=(Token)match(input,ID,FOLLOW_ID_in_primary3373);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(h,DroolsEditorType.SYMBOL);
helper.emit(i2,DroolsEditorType.IDENTIFIER);
}
}
}
break;
case 4:
{
{
n=(Token)match(input,NULL_SAFE_DOT,FOLLOW_NULL_SAFE_DOT_in_primary3415);
if (state.failed) return result;
i2=(Token)match(input,ID,FOLLOW_ID_in_primary3419);
if (state.failed) return result;
if (state.backtracking == 0) {
helper.emit(n,DroolsEditorType.SYMBOL);
helper.emit(i2,DroolsEditorType.IDENTIFIER);
}
}
}
break;
default :
break loop66;
}
}
int alt67=2;
int LA67_0=input.LA(1);
if ((LA67_0 == LEFT_SQUARE)) {
int LA67_1=input.LA(2);
if ((synpred36_DRL6Expressions())) {
alt67=1;
}
}
 else if ((LA67_0 == LEFT_PAREN)) {
int LA67_2=input.LA(2);
if ((synpred36_DRL6Expressions())) {
alt67=1;
}
}
switch (alt67) {
case 1:
{
pushFollow(FOLLOW_identifierSuffix_in_primary3441);
identifierSuffix();
state._fsp--;
if (state.failed) return result;
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
throw re;
}
 finally {
}
return result;
}
