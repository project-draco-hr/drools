{
  Pattern pattern=new Pattern();
  LiteralRestriction literalRestriction=new LiteralRestriction();
  LiteralRestriction literalRestriction2=new LiteralRestriction();
  LiteralRestriction literalRestriction3=new LiteralRestriction();
  LiteralRestriction literalRestriction4=new LiteralRestriction();
  OperatorDescr andDescr=new OperatorDescr(OperatorDescr.Type.AND);
  OperatorDescr orDescr=new OperatorDescr(OperatorDescr.Type.OR);
  OperatorDescr orDescr2=new OperatorDescr(OperatorDescr.Type.OR);
  PatternSolver solver=new PatternSolver(pattern);
  solver.add(andDescr);
  solver.add(orDescr);
  solver.add(literalRestriction);
  solver.add(literalRestriction2);
  solver.end();
  solver.add(orDescr2);
  solver.add(literalRestriction3);
  solver.add(literalRestriction4);
  solver.end();
  solver.end();
  List<Set<AnalyticsComponent>> list=solver.getPossibilityLists();
  assertEquals(4,list.size());
  assertEquals(2,list.get(0).size());
  assertTrue(list.get(0).contains(literalRestriction));
  assertTrue(list.get(0).contains(literalRestriction3));
  assertEquals(2,list.get(1).size());
  assertTrue(list.get(1).contains(literalRestriction));
  assertTrue(list.get(1).contains(literalRestriction4));
  assertEquals(2,list.get(2).size());
  assertTrue(list.get(2).contains(literalRestriction2));
  assertTrue(list.get(2).contains(literalRestriction3));
  assertEquals(2,list.get(3).size());
  assertTrue(list.get(3).contains(literalRestriction2));
  assertTrue(list.get(3).contains(literalRestriction4));
}
