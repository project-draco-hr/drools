{
  Map<String,TypeMetaInfo> typeInfos=new HashMap<String,TypeMetaInfo>();
  Map<String,List<String>> rulesPerPackage=new HashMap<String,List<String>>();
  KieModuleModel kieModuleModel=kModule.getKieModuleModel();
  for (  String kieBaseName : kieModuleModel.getKieBaseModels().keySet()) {
    KnowledgeBuilderImpl kBuilder=(KnowledgeBuilderImpl)kModule.getKnowledgeBuilderForKieBase(kieBaseName);
    Map<String,PackageRegistry> pkgRegistryMap=kBuilder.getPackageBuilder().getPackageRegistry();
    KModuleCache.Builder _kmoduleCacheBuilder=createCacheBuilder();
    CompilationData.Builder _compData=createCompilationData();
    for (    KiePackage kPkg : kBuilder.getKnowledgePackages()) {
      PackageRegistry pkgRegistry=pkgRegistryMap.get(kPkg.getName());
      JavaDialectRuntimeData runtimeData=(JavaDialectRuntimeData)pkgRegistry.getDialectRuntimeRegistry().getDialectData("java");
      List<String> types=new ArrayList<String>();
      for (      FactType factType : kPkg.getFactTypes()) {
        Class<?> typeClass=((ClassDefinition)factType).getDefinedClass();
        TypeDeclaration typeDeclaration=pkgRegistry.getPackage().getTypeDeclaration(typeClass);
        if (typeDeclaration != null) {
          typeInfos.put(typeClass.getName(),new TypeMetaInfo(typeDeclaration));
        }
        String className=factType.getName();
        String internalName=className.replace('.','/') + ".class";
        byte[] bytes=runtimeData.getBytecode(internalName);
        trgMfs.write(internalName,bytes,true);
        types.add(internalName);
      }
      List<String> rules=rulesPerPackage.get(kPkg.getName());
      if (rules == null) {
        rules=new ArrayList<String>();
      }
      for (      Rule rule : kPkg.getRules()) {
        if (!rules.contains(rule.getName())) {
          rules.add(rule.getName());
        }
      }
      if (!rules.isEmpty()) {
        rulesPerPackage.put(kPkg.getName(),rules);
      }
      addToCompilationData(_compData,runtimeData,types);
    }
    _kmoduleCacheBuilder.addCompilationData(_compData.build());
    writeCompilationDataToTrg(_kmoduleCacheBuilder.build(),kieBaseName);
  }
  return new KieModuleMetaInfo(typeInfos,rulesPerPackage);
}
