{
  if (option instanceof org.drools.conf.AlphaThresholdOption) {
    org.drools.conf.AlphaThresholdOption legacyOption=(org.drools.conf.AlphaThresholdOption)option;
    return AlphaThresholdOption.get(legacyOption.getThreshold());
  }
  if (option instanceof org.drools.conf.CompositeKeyDepthOption) {
    org.drools.conf.CompositeKeyDepthOption legacyOption=(org.drools.conf.CompositeKeyDepthOption)option;
    return CompositeKeyDepthOption.get(legacyOption.getDepth());
  }
  if (option instanceof org.drools.builder.conf.DeclarativeAgendaOption) {
    org.drools.builder.conf.DeclarativeAgendaOption legacyOption=(org.drools.builder.conf.DeclarativeAgendaOption)option;
switch (legacyOption) {
case ENABLED:
      return DeclarativeAgendaOption.ENABLED;
case DISABLED:
    return DeclarativeAgendaOption.DISABLED;
}
}
if (option instanceof AssertBehaviorOption) {
AssertBehaviorOption legacyOption=(AssertBehaviorOption)option;
switch (legacyOption) {
case IDENTITY:
  return EqualityBehaviorOption.IDENTITY;
case EQUALITY:
return EqualityBehaviorOption.EQUALITY;
}
}
if (option instanceof org.drools.conf.EventProcessingOption) {
org.drools.conf.EventProcessingOption legacyOption=(org.drools.conf.EventProcessingOption)option;
switch (legacyOption) {
case CLOUD:
return EventProcessingOption.CLOUD;
case STREAM:
return EventProcessingOption.STREAM;
}
}
if (option instanceof org.drools.conf.IndexLeftBetaMemoryOption) {
org.drools.conf.IndexLeftBetaMemoryOption legacyOption=(org.drools.conf.IndexLeftBetaMemoryOption)option;
switch (legacyOption) {
case YES:
return IndexLeftBetaMemoryOption.YES;
case NO:
return IndexLeftBetaMemoryOption.NO;
}
}
if (option instanceof org.drools.conf.IndexPrecedenceOption) {
org.drools.conf.IndexPrecedenceOption legacyOption=(org.drools.conf.IndexPrecedenceOption)option;
switch (legacyOption) {
case PATTERN_ORDER:
return IndexPrecedenceOption.PATTERN_ORDER;
case EQUALITY_PRIORITY:
return IndexPrecedenceOption.EQUALITY_PRIORITY;
}
}
if (option instanceof org.drools.conf.IndexRightBetaMemoryOption) {
org.drools.conf.IndexRightBetaMemoryOption legacyOption=(org.drools.conf.IndexRightBetaMemoryOption)option;
switch (legacyOption) {
case YES:
return IndexRightBetaMemoryOption.YES;
case NO:
return IndexRightBetaMemoryOption.NO;
}
}
if (option instanceof org.drools.conf.MBeansOption) {
org.drools.conf.MBeansOption legacyOption=(org.drools.conf.MBeansOption)option;
switch (legacyOption) {
case ENABLED:
return MBeansOption.ENABLED;
case DISABLED:
return MBeansOption.DISABLED;
}
}
if (option instanceof org.drools.conf.MaxThreadsOption) {
org.drools.conf.MaxThreadsOption legacyOption=(org.drools.conf.MaxThreadsOption)option;
return MaxThreadsOption.get(legacyOption.getMaxThreads());
}
if (option instanceof org.drools.conf.PermGenThresholdOption) {
org.drools.conf.PermGenThresholdOption legacyOption=(org.drools.conf.PermGenThresholdOption)option;
return PermGenThresholdOption.get(legacyOption.getThreshold());
}
if (option instanceof org.drools.conf.RemoveIdentitiesOption) {
org.drools.conf.RemoveIdentitiesOption legacyOption=(org.drools.conf.RemoveIdentitiesOption)option;
switch (legacyOption) {
case YES:
return RemoveIdentitiesOption.YES;
case NO:
return RemoveIdentitiesOption.NO;
}
}
if (option instanceof org.drools.conf.SequentialAgendaOption) {
org.drools.conf.SequentialAgendaOption legacyOption=(org.drools.conf.SequentialAgendaOption)option;
switch (legacyOption) {
case SEQUENTIAL:
return SequentialAgendaOption.SEQUENTIAL;
case DYNAMIC:
return SequentialAgendaOption.DYNAMIC;
}
}
if (option instanceof org.drools.conf.SequentialOption) {
org.drools.conf.SequentialOption legacyOption=(org.drools.conf.SequentialOption)option;
switch (legacyOption) {
case YES:
return SequentialOption.YES;
case NO:
return SequentialOption.NO;
}
}
if (option instanceof org.drools.conf.ShareAlphaNodesOption) {
org.drools.conf.ShareAlphaNodesOption legacyOption=(org.drools.conf.ShareAlphaNodesOption)option;
switch (legacyOption) {
case YES:
return ShareAlphaNodesOption.YES;
case NO:
return ShareAlphaNodesOption.NO;
}
}
if (option instanceof org.drools.conf.ShareBetaNodesOption) {
org.drools.conf.ShareBetaNodesOption legacyOption=(org.drools.conf.ShareBetaNodesOption)option;
switch (legacyOption) {
case YES:
return ShareBetaNodesOption.YES;
case NO:
return ShareBetaNodesOption.NO;
}
}
throw new UnsupportedOperationException("Unknown option " + option);
}
