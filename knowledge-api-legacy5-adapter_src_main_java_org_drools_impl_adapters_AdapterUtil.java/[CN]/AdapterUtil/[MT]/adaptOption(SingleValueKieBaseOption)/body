{
  if (option instanceof AlphaThresholdOption) {
    AlphaThresholdOption kieOption=(AlphaThresholdOption)option;
    return org.drools.conf.AlphaThresholdOption.get(kieOption.getThreshold());
  }
  if (option instanceof CompositeKeyDepthOption) {
    CompositeKeyDepthOption kieOption=(CompositeKeyDepthOption)option;
    return org.drools.conf.CompositeKeyDepthOption.get(kieOption.getDepth());
  }
  if (option instanceof DeclarativeAgendaOption) {
    DeclarativeAgendaOption kieOption=(DeclarativeAgendaOption)option;
switch (kieOption) {
case ENABLED:
      return org.drools.builder.conf.DeclarativeAgendaOption.ENABLED;
case DISABLED:
    return org.drools.builder.conf.DeclarativeAgendaOption.DISABLED;
}
}
if (option instanceof EqualityBehaviorOption) {
EqualityBehaviorOption kieOption=(EqualityBehaviorOption)option;
switch (kieOption) {
case IDENTITY:
  return AssertBehaviorOption.IDENTITY;
case EQUALITY:
return AssertBehaviorOption.EQUALITY;
}
}
if (option instanceof EventProcessingOption) {
EventProcessingOption kieOption=(EventProcessingOption)option;
switch (kieOption) {
case CLOUD:
return org.drools.conf.EventProcessingOption.CLOUD;
case STREAM:
return org.drools.conf.EventProcessingOption.STREAM;
}
}
if (option instanceof IndexLeftBetaMemoryOption) {
IndexLeftBetaMemoryOption kieOption=(IndexLeftBetaMemoryOption)option;
switch (kieOption) {
case YES:
return org.drools.conf.IndexLeftBetaMemoryOption.YES;
case NO:
return org.drools.conf.IndexLeftBetaMemoryOption.NO;
}
}
if (option instanceof IndexPrecedenceOption) {
IndexPrecedenceOption kieOption=(IndexPrecedenceOption)option;
switch (kieOption) {
case PATTERN_ORDER:
return org.drools.conf.IndexPrecedenceOption.PATTERN_ORDER;
case EQUALITY_PRIORITY:
return org.drools.conf.IndexPrecedenceOption.EQUALITY_PRIORITY;
}
}
if (option instanceof IndexRightBetaMemoryOption) {
IndexRightBetaMemoryOption kieOption=(IndexRightBetaMemoryOption)option;
switch (kieOption) {
case YES:
return org.drools.conf.IndexRightBetaMemoryOption.YES;
case NO:
return org.drools.conf.IndexRightBetaMemoryOption.NO;
}
}
if (option instanceof MBeansOption) {
MBeansOption kieOption=(MBeansOption)option;
switch (kieOption) {
case ENABLED:
return org.drools.conf.MBeansOption.ENABLED;
case DISABLED:
return org.drools.conf.MBeansOption.DISABLED;
}
}
if (option instanceof MaxThreadsOption) {
MaxThreadsOption kieOption=(MaxThreadsOption)option;
return org.drools.conf.MaxThreadsOption.get(kieOption.getMaxThreads());
}
if (option instanceof PermGenThresholdOption) {
PermGenThresholdOption kieOption=(PermGenThresholdOption)option;
return org.drools.conf.PermGenThresholdOption.get(kieOption.getThreshold());
}
if (option instanceof RemoveIdentitiesOption) {
RemoveIdentitiesOption kieOption=(RemoveIdentitiesOption)option;
switch (kieOption) {
case YES:
return org.drools.conf.RemoveIdentitiesOption.YES;
case NO:
return org.drools.conf.RemoveIdentitiesOption.NO;
}
}
if (option instanceof SequentialAgendaOption) {
SequentialAgendaOption kieOption=(SequentialAgendaOption)option;
switch (kieOption) {
case SEQUENTIAL:
return org.drools.conf.SequentialAgendaOption.SEQUENTIAL;
case DYNAMIC:
return org.drools.conf.SequentialAgendaOption.DYNAMIC;
}
}
if (option instanceof SequentialOption) {
SequentialOption kieOption=(SequentialOption)option;
switch (kieOption) {
case YES:
return org.drools.conf.SequentialOption.YES;
case NO:
return org.drools.conf.SequentialOption.NO;
}
}
if (option instanceof ShareAlphaNodesOption) {
ShareAlphaNodesOption kieOption=(ShareAlphaNodesOption)option;
switch (kieOption) {
case YES:
return org.drools.conf.ShareAlphaNodesOption.YES;
case NO:
return org.drools.conf.ShareAlphaNodesOption.NO;
}
}
if (option instanceof ShareBetaNodesOption) {
ShareBetaNodesOption kieOption=(ShareBetaNodesOption)option;
switch (kieOption) {
case YES:
return org.drools.conf.ShareBetaNodesOption.YES;
case NO:
return org.drools.conf.ShareBetaNodesOption.NO;
}
}
throw new UnsupportedOperationException("Unknown option " + option);
}
