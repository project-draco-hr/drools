{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newInputStreamResource(getClass().getResourceAsStream("test_DynamicRulesWithNotSubnetwork.drl")),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  final KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  final StatefulKnowledgeSession ksession=createKnowledgeSession(kbase);
  final AgendaEventListener alistener=mock(AgendaEventListener.class);
  ksession.addEventListener(alistener);
  ksession.insert(new Person("toni"));
  verify(alistener,never()).matchCreated(any(org.kie.event.rule.MatchCreatedEvent.class));
  ksession.insert(new Person("bob"));
  verify(alistener,times(1)).matchCreated(any(org.kie.event.rule.MatchCreatedEvent.class));
  ksession.insert(new Person("mark"));
  verify(alistener,times(1)).matchCreated(any(org.kie.event.rule.MatchCreatedEvent.class));
  kbase.removeKnowledgePackage("org.drools.compiler");
  assertEquals(0,kbase.getKnowledgePackages().size());
  kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newInputStreamResource(getClass().getResourceAsStream("test_DynamicRulesWithNotSubnetwork.drl")),ResourceType.DRL);
  assertFalse(kbuilder.getErrors().toString(),kbuilder.hasErrors());
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  verify(alistener,times(2)).matchCreated(any(org.kie.event.rule.MatchCreatedEvent.class));
}
