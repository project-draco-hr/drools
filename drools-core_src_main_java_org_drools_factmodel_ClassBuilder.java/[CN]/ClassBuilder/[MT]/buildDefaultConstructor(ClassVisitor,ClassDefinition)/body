{
  MethodVisitor mv;
{
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{}),null,null);
    mv.visitCode();
    Label l0=null;
    if (this.debug) {
      l0=new Label();
      mv.visitLabel(l0);
    }
    mv.visitVarInsn(Opcodes.ALOAD,0);
    String sup="";
    try {
      sup=Type.getInternalName(Class.forName(classDef.getSuperClass()));
    }
 catch (    ClassNotFoundException e) {
      sup=getInternalType(classDef.getSuperClass());
    }
    mv.visitMethodInsn(Opcodes.INVOKESPECIAL,sup,"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{}));
    for (    FieldDefinition field : classDef.getFieldsDefinitions()) {
      if (!field.isInherited()) {
        Object val=getDefaultValue(field);
        if (val != null) {
          mv.visitVarInsn(Opcodes.ALOAD,0);
          mv.visitLdcInsn(val);
          if (isBoxed(field.getTypeName())) {
            mv.visitMethodInsn(Opcodes.INVOKESTATIC,getInternalType(field.getTypeName()),"valueOf","(" + unBox(field.getTypeName()) + ")"+ getTypeDescriptor(field.getTypeName()));
          }
          mv.visitFieldInsn(Opcodes.PUTFIELD,getInternalType(classDef.getClassName()),field.getName(),getTypeDescriptor(field.getTypeName()));
        }
      }
    }
    mv.visitInsn(Opcodes.RETURN);
    Label l1=null;
    if (this.debug) {
      l1=new Label();
      mv.visitLabel(l1);
      mv.visitLocalVariable("this",getTypeDescriptor(classDef.getClassName()),null,l0,l1,0);
    }
    mv.visitMaxs(0,0);
    mv.visitEnd();
  }
}
