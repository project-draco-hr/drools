{
  MethodVisitor mv;
{
    Type[] params=new Type[fieldDefs.size()];
    int index=0;
    for (    FieldDefinition field : fieldDefs) {
      params[index++]=Type.getType(BuildUtils.getTypeDescriptor(field.getTypeName()));
    }
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,params),null,null);
    mv.visitCode();
    Label l0=null;
    if (this.debug) {
      l0=new Label();
      mv.visitLabel(l0);
    }
    mv.visitVarInsn(Opcodes.ALOAD,0);
    String sup="";
    try {
      sup=Type.getInternalName(Class.forName(classDef.getSuperClass()));
    }
 catch (    ClassNotFoundException e) {
      sup=BuildUtils.getInternalType(classDef.getSuperClass());
    }
    mv.visitMethodInsn(Opcodes.INVOKESPECIAL,sup,"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{}));
    index=1;
    for (    FieldDefinition field : fieldDefs) {
      if (this.debug) {
        Label l11=new Label();
        mv.visitLabel(l11);
      }
      mv.visitVarInsn(Opcodes.ALOAD,0);
      mv.visitVarInsn(Type.getType(BuildUtils.getTypeDescriptor(field.getTypeName())).getOpcode(Opcodes.ILOAD),index++);
      if (field.getTypeName().equals("long") || field.getTypeName().equals("double")) {
        index++;
      }
      if (!field.isInherited()) {
        mv.visitFieldInsn(Opcodes.PUTFIELD,BuildUtils.getInternalType(classDef.getClassName()),field.getName(),BuildUtils.getTypeDescriptor(field.getTypeName()));
      }
 else {
        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,BuildUtils.getInternalType(classDef.getClassName()),field.getWriteMethod(),Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.getType(BuildUtils.getTypeDescriptor(field.getTypeName()))}));
      }
    }
    if (classDef.isTraitable()) {
      initializeDynamicTypeStructures(mv,classDef);
    }
    mv.visitInsn(Opcodes.RETURN);
    Label l1=null;
    if (this.debug) {
      l1=new Label();
      mv.visitLabel(l1);
      mv.visitLocalVariable("this",BuildUtils.getTypeDescriptor(classDef.getClassName()),null,l0,l1,0);
      for (      FieldDefinition field : classDef.getFieldsDefinitions()) {
        Label l11=new Label();
        mv.visitLabel(l11);
        mv.visitLocalVariable(field.getName(),BuildUtils.getTypeDescriptor(field.getTypeName()),null,l0,l1,0);
      }
    }
    mv.visitMaxs(0,0);
    mv.visitEnd();
  }
}
