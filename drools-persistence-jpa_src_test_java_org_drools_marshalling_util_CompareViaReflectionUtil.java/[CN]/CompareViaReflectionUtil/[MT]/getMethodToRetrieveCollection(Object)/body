{
  Method[] methods=new Method[2];
  Class<?> objClass=objA.getClass();
  Method[] objMethods=objClass.getDeclaredMethods();
  for (int m=0; m < objMethods.length; ++m) {
    if (objMethods[m].getName().equals("toArray") && objMethods[m].getParameterTypes().length == 0 && objMethods[m].getReturnType().equals(OBJECT_ARRAY_CLASS)) {
      methods[TO_ARRAY]=objMethods[m];
      methods[TO_ARRAY].setAccessible(true);
      break;
    }
 else     if (objMethods[m].getName().equals("entrySet") && objMethods[m].getParameterTypes().length == 0 && objMethods[m].getReturnType().equals(Set.class)) {
      methods[ENTRY_SET]=objMethods[m];
      methods[ENTRY_SET].setAccessible(true);
      break;
    }
  }
  return methods;
}
