{
  String drl="package org.foo.bar\n" + "rule testRule dialect \"mvel\" \n" + "    when\n"+ "        Number() from accumulate(Object(), "+ "               init(System.exit(-1);), "+ "               action(System.exit(-1);), "+ "               reverse(System.exit(-1);), "+ "               result(0))\n"+ "    then\n"+ "end";
  try {
    KieServices ks=KieServices.Factory.get();
    KieFileSystem kfs=ks.newKieFileSystem().write(ResourceFactory.newByteArrayResource(drl.getBytes()).setSourcePath("org/foo/bar/r1.drl"));
    ks.newKieBuilder(kfs).buildAll();
    ReleaseId releaseId=ks.getRepository().getDefaultReleaseId();
    KieContainer kc=ks.newKieContainer(releaseId);
    KieSession ksession=kc.newKieSession();
    ksession.fireAllRules();
    Assert.fail("The security policy for the rule should have prevented this from executing...");
  }
 catch (  PropertyAccessException e) {
    if (e.toString().contains("The security policy should have prevented")) {
      Assert.fail("The security policy for the rule should have prevented this from executing...");
    }
 else {
    }
  }
catch (  Exception e) {
    if (e.toString().contains("access denied (\"java.lang.RuntimePermission\" \"exitVM.-1\")")) {
    }
 else {
      throw e;
    }
  }
}
