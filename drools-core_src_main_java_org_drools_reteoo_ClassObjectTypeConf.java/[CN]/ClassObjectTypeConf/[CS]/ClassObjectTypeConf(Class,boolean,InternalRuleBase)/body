{
  this.cls=clazz;
  this.ruleBase=ruleBase;
  ObjectType objectType=new ClassObjectType(clazz,isEvent);
  this.concreteObjectTypeNode=(ObjectTypeNode)ruleBase.getRete().getObjectTypeNodes().get(objectType);
  if (this.concreteObjectTypeNode == null) {
    BuildContext context=new BuildContext(ruleBase,((ReteooRuleBase)ruleBase.getRete().getRuleBase()).getReteooBuilder().getIdGenerator());
    if (DroolsQuery.class == clazz) {
      context.setTupleMemoryEnabled(false);
      context.setObjectTypeNodeMemoryEnabled(false);
      context.setTerminalNodeMemoryEnabled(false);
    }
 else     if (context.getRuleBase().getConfiguration().isSequential()) {
      context.setTupleMemoryEnabled(false);
      context.setObjectTypeNodeMemoryEnabled(false);
      context.setTerminalNodeMemoryEnabled(false);
    }
 else {
      context.setTupleMemoryEnabled(true);
      context.setObjectTypeNodeMemoryEnabled(true);
      context.setTerminalNodeMemoryEnabled(true);
    }
    this.concreteObjectTypeNode=PatternBuilder.attachObjectTypeNode(context,objectType);
  }
  defineShadowProxyData(clazz);
}
