{
  int i, j, n;
  if (this.annotationDefault != null) {
    final AnnotationVisitor av=mv.visitAnnotationDefault();
    AnnotationNode.accept(av,null,this.annotationDefault);
    av.visitEnd();
  }
  n=this.visibleAnnotations == null ? 0 : this.visibleAnnotations.size();
  for (i=0; i < n; ++i) {
    final AnnotationNode an=(AnnotationNode)this.visibleAnnotations.get(i);
    an.accept(mv.visitAnnotation(an.desc,true));
  }
  n=this.invisibleAnnotations == null ? 0 : this.invisibleAnnotations.size();
  for (i=0; i < n; ++i) {
    final AnnotationNode an=(AnnotationNode)this.invisibleAnnotations.get(i);
    an.accept(mv.visitAnnotation(an.desc,false));
  }
  n=this.visibleParameterAnnotations == null ? 0 : this.visibleParameterAnnotations.length;
  for (i=0; i < n; ++i) {
    final List l=this.visibleParameterAnnotations[i];
    if (l == null) {
      continue;
    }
    for (j=0; j < l.size(); ++j) {
      final AnnotationNode an=(AnnotationNode)l.get(j);
      an.accept(mv.visitParameterAnnotation(i,an.desc,true));
    }
  }
  n=this.invisibleParameterAnnotations == null ? 0 : this.invisibleParameterAnnotations.length;
  for (i=0; i < n; ++i) {
    final List l=this.invisibleParameterAnnotations[i];
    if (l == null) {
      continue;
    }
    for (j=0; j < l.size(); ++j) {
      final AnnotationNode an=(AnnotationNode)l.get(j);
      an.accept(mv.visitParameterAnnotation(i,an.desc,false));
    }
  }
  n=this.attrs == null ? 0 : this.attrs.size();
  for (i=0; i < n; ++i) {
    mv.visitAttribute((Attribute)this.attrs.get(i));
  }
  if (this.instructions.size() > 0) {
    mv.visitCode();
    for (i=0; i < this.tryCatchBlocks.size(); ++i) {
      ((TryCatchBlockNode)this.tryCatchBlocks.get(i)).accept(mv);
    }
    for (i=0; i < this.instructions.size(); ++i) {
      ((AbstractInsnNode)this.instructions.get(i)).accept(mv);
    }
    n=this.localVariables == null ? 0 : this.localVariables.size();
    for (i=0; i < n; ++i) {
      ((LocalVariableNode)this.localVariables.get(i)).accept(mv);
    }
    n=this.lineNumbers == null ? 0 : this.lineNumbers.size();
    for (i=0; i < n; ++i) {
      ((LineNumberNode)this.lineNumbers.get(i)).accept(mv);
    }
    mv.visitMaxs(this.maxStack,this.maxLocals);
  }
  mv.visitEnd();
}
