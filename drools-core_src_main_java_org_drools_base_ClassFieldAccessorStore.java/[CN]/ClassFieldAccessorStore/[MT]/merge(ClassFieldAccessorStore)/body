{
  for (  Entry<AccessorKey,BaseLookupEntry> entry : other.lookup.entrySet()) {
switch (entry.getValue().getAccessorType()) {
case FieldAccessor:
{
        FieldLookupEntry lookupEntry=(FieldLookupEntry)this.lookup.get(entry.getKey());
        if (lookupEntry == null) {
          lookupEntry=(FieldLookupEntry)entry.getValue();
          this.lookup.put(entry.getKey(),lookupEntry);
        }
 else {
          for (          Acceptor target : entry.getValue().getAccessorTargets()) {
            if (target instanceof AcceptsReadAccessor) {
              ((AcceptsReadAccessor)target).setReadAccessor(lookupEntry.getClassFieldReader());
            }
 else             if (target instanceof AcceptsWriteAccessor) {
              ((AcceptsWriteAccessor)target).setWriteAccessor(lookupEntry.getClassFieldWriter());
            }
            lookupEntry.addAccessorTarget(target);
          }
        }
        if (lookupEntry.getClassFieldReader() != null) {
          wire(((FieldLookupEntry)entry.getValue()).getClassFieldReader());
        }
        if (lookupEntry.getClassFieldWriter() != null) {
          wire(((FieldLookupEntry)entry.getValue()).getClassFieldWriter());
        }
        break;
      }
case ClassObjectType:
{
      ClassObjectTypeLookupEntry lookupEntry=(ClassObjectTypeLookupEntry)this.lookup.get(entry.getKey());
      if (lookupEntry == null) {
        lookupEntry=new ClassObjectTypeLookupEntry(cache.getClassObjectType(((ClassObjectTypeLookupEntry)entry.getValue()).getClassObjectType()));
        this.lookup.put(entry.getKey(),lookupEntry);
      }
      for (      Acceptor target : entry.getValue().getAccessorTargets()) {
        ((AcceptsClassObjectType)target).setClassObjectType(lookupEntry.getClassObjectType());
        lookupEntry.addAccessorTarget(target);
      }
    }
}
}
}
