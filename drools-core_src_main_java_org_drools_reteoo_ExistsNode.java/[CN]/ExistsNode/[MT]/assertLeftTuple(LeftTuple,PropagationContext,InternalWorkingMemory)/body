{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  this.constraints.updateFromTuple(memory.getContext(),workingMemory,leftTuple);
  boolean useLeftMemory=true;
  if (!this.tupleMemoryEnabled) {
    Object object=((InternalFactHandle)context.getFactHandle()).getObject();
    if (memory.getLeftTupleMemory() == null || object instanceof DroolsQuery && !((DroolsQuery)object).isOpen()) {
      useLeftMemory=false;
    }
  }
  for (RightTuple rightTuple=memory.getRightTupleMemory().getFirst(leftTuple,(InternalFactHandle)context.getFactHandle()); rightTuple != null; rightTuple=(RightTuple)rightTuple.getNext()) {
    if (this.constraints.isAllowedCachedLeft(memory.getContext(),rightTuple.getFactHandle())) {
      leftTuple.setBlocker(rightTuple);
      if (useLeftMemory) {
        rightTuple.addBlocked(leftTuple);
      }
      break;
    }
  }
  this.constraints.resetTuple(memory.getContext());
  if (leftTuple.getBlocker() != null) {
    this.sink.propagateAssertLeftTuple(leftTuple,context,workingMemory,useLeftMemory);
  }
 else   if (useLeftMemory) {
    memory.getLeftTupleMemory().add(leftTuple);
  }
}
