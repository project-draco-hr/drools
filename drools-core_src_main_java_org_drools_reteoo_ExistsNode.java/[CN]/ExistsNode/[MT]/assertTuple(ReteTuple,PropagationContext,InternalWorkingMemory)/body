{
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  if (this.tupleMemoryEnabled) {
    memory.getTupleMemory().add(leftTuple);
  }
  final Iterator it=memory.getFactHandleMemory().iterator(leftTuple);
  this.constraints.updateFromTuple(workingMemory,leftTuple);
  for (FactEntry entry=(FactEntry)it.next(); entry != null; entry=(FactEntry)it.next()) {
    final InternalFactHandle handle=entry.getFactHandle();
    if (this.constraints.isAllowedCachedLeft(handle.getObject())) {
      leftTuple.setMatch(handle);
      break;
    }
  }
  if (leftTuple.getMatch() != null) {
    this.sink.propagateAssertTuple(leftTuple,context,workingMemory);
  }
}
