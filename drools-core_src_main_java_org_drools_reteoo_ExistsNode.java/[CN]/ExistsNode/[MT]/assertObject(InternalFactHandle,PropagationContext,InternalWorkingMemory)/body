{
  final RightTuple rightTuple=new RightTuple(factHandle,this);
  final BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(this);
  if (!behavior.assertRightTuple(memory.getBehaviorContext(),rightTuple,workingMemory)) {
    rightTuple.unlinkFromRightParent();
    return;
  }
  memory.getRightTupleMemory().add(rightTuple);
  if (memory.getLeftTupleMemory() == null || memory.getLeftTupleMemory().size() == 0) {
    return;
  }
  this.constraints.updateFromFactHandle(memory.getContext(),workingMemory,factHandle);
  FastIterator it=memory.getLeftTupleMemory().fastIterator();
  for (LeftTuple leftTuple=memory.getLeftTupleMemory().getFirst(rightTuple); leftTuple != null; ) {
    LeftTuple temp=(LeftTuple)it.next(leftTuple);
    if (this.constraints.isAllowedCachedRight(memory.getContext(),leftTuple)) {
      leftTuple.setBlocker(rightTuple);
      rightTuple.addBlocked(leftTuple);
      memory.getLeftTupleMemory().remove(leftTuple);
      this.sink.propagateAssertLeftTuple(leftTuple,context,workingMemory,true);
    }
    leftTuple=temp;
  }
  this.constraints.resetFactHandle(memory.getContext());
}
