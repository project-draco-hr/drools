{
  LispForm lispForm=null;
  Token t=null;
  SExpression a=null;
  LispForm l=null;
  List list=new ArrayList();
  lispForm=null;
  try {
{
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lisp_form1314);
      if (failed)       return lispForm;
      int alt16=2;
      int LA16_0=input.LA(1);
      if ((LA16_0 == NAME)) {
        alt16=1;
      }
 else       if ((LA16_0 == VAR)) {
        alt16=2;
      }
 else {
        if (backtracking > 0) {
          failed=true;
          return lispForm;
        }
        NoViableAltException nvae=new NoViableAltException("711:3: (t= NAME | t= VAR )",16,0,input);
        throw nvae;
      }
switch (alt16) {
case 1:
{
          t=(Token)input.LT(1);
          match(input,NAME,FOLLOW_NAME_in_lisp_form1331);
          if (failed)           return lispForm;
          if (backtracking == 0) {
            list.add(new SymbolLispAtom(t.getText()));
          }
        }
      break;
case 2:
{
      t=(Token)input.LT(1);
      match(input,VAR,FOLLOW_VAR_in_lisp_form1351);
      if (failed)       return lispForm;
      if (backtracking == 0) {
        list.add(new VariableLispAtom(t.getText()));
      }
    }
  break;
}
loop17: do {
int alt17=3;
int LA17_0=input.LA(1);
if ((LA17_0 == NAME || LA17_0 == STRING || LA17_0 == INT || LA17_0 == VAR || (LA17_0 >= FLOAT && LA17_0 <= NULL))) {
  alt17=1;
}
 else if ((LA17_0 == LEFT_PAREN)) {
  alt17=2;
}
switch (alt17) {
case 1:
{
    pushFollow(FOLLOW_lisp_atom_in_lisp_form1374);
    a=lisp_atom();
    _fsp--;
    if (failed)     return lispForm;
    if (backtracking == 0) {
      list.add(a);
    }
  }
break;
case 2:
{
pushFollow(FOLLOW_lisp_form_in_lisp_form1385);
l=lisp_form();
_fsp--;
if (failed) return lispForm;
if (backtracking == 0) {
  list.add(l);
}
}
break;
default :
break loop17;
}
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lisp_form1412);
if (failed) return lispForm;
if (backtracking == 0) {
lispForm=new LispForm((SExpression[])list.toArray(new SExpression[list.size()]));
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return lispForm;
}
