{
  String lc=null;
  String op="==";
  try {
{
      int alt14=2;
      int LA14_0=input.LA(1);
      if ((LA14_0 == TILDE)) {
        alt14=1;
      }
switch (alt14) {
case 1:
{
          match(input,TILDE,FOLLOW_TILDE_in_restriction1091);
          if (failed)           return;
          if (backtracking == 0) {
            op="!=";
          }
        }
      break;
  }
  int alt15=4;
switch (input.LA(1)) {
case COLON:
{
      alt15=1;
    }
  break;
case EQUALS:
{
  alt15=2;
}
break;
case VAR:
{
alt15=3;
}
break;
case NAME:
case STRING:
case INT:
case FLOAT:
case BOOL:
case NULL:
{
alt15=4;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("594:3: ( predicate_constraint[rc, op, base] | return_value_restriction[op, rc] | variable_restriction[op, rc, base, fcBase, declarations] | lc= literal_restriction )",15,0,input);
throw nvae;
}
switch (alt15) {
case 1:
{
pushFollow(FOLLOW_predicate_constraint_in_restriction1107);
predicate_constraint(rc,op,base);
_fsp--;
if (failed) return;
}
break;
case 2:
{
pushFollow(FOLLOW_return_value_restriction_in_restriction1123);
return_value_restriction(op,rc);
_fsp--;
if (failed) return;
}
break;
case 3:
{
pushFollow(FOLLOW_variable_restriction_in_restriction1132);
variable_restriction(op,rc,base,fcBase,declarations);
_fsp--;
if (failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_literal_restriction_in_restriction1144);
lc=literal_restriction();
_fsp--;
if (failed) return;
if (backtracking == 0) {
rc.addRestriction(new LiteralRestrictionDescr(op,lc));
op="==";
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
