{
  FunctionDescr functionDescr=null;
  Token t=null;
  SExpression name=null;
  LispForm params=null;
  LispForm form=null;
  List content=null;
  functionDescr=null;
  try {
{
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deffunction185);
      if (state.failed)       return functionDescr;
      t=(Token)match(input,DEFFUNCTION,FOLLOW_DEFFUNCTION_in_deffunction195);
      if (state.failed)       return functionDescr;
      pushFollow(FOLLOW_lisp_atom_in_deffunction205);
      name=lisp_atom();
      state._fsp--;
      if (state.failed)       return functionDescr;
      pushFollow(FOLLOW_lisp_form_in_deffunction215);
      params=lisp_form();
      state._fsp--;
      if (state.failed)       return functionDescr;
      int cnt2=0;
      loop2:       do {
        int alt2=2;
        int LA2_0=input.LA(1);
        if ((LA2_0 == LEFT_PAREN)) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            pushFollow(FOLLOW_lisp_form_in_deffunction224);
            form=lisp_form();
            state._fsp--;
            if (state.failed)             return functionDescr;
            if (state.backtracking == 0) {
              if (content == null)               content=new ArrayList();
              content.add(form);
            }
          }
        break;
default :
      if (cnt2 >= 1)       break loop2;
    if (state.backtracking > 0) {
      state.failed=true;
      return functionDescr;
    }
  EarlyExitException eee=new EarlyExitException(2,input);
throw eee;
}
cnt2++;
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deffunction246);
if (state.failed) return functionDescr;
if (state.backtracking == 0) {
functionDescr=FunctionHandlers.createFunctionDescr(name,params,content);
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return functionDescr;
}
