{
  SExpression sExpression=null;
  Token t=null;
  sExpression=null;
  try {
{
      int alt19=7;
switch (input.LA(1)) {
case VAR:
{
          alt19=1;
        }
      break;
case STRING:
{
      alt19=2;
    }
  break;
case FLOAT:
{
  alt19=3;
}
break;
case INT:
{
alt19=4;
}
break;
case BOOL:
{
alt19=5;
}
break;
case NULL:
{
alt19=6;
}
break;
case NAME:
{
alt19=7;
}
break;
default :
if (backtracking > 0) {
failed=true;
return sExpression;
}
NoViableAltException nvae=new NoViableAltException("730:3: (t= VAR | t= STRING | t= FLOAT | t= INT | t= BOOL | t= NULL | t= NAME )",19,0,input);
throw nvae;
}
switch (alt19) {
case 1:
{
t=(Token)input.LT(1);
match(input,VAR,FOLLOW_VAR_in_lisp_atom1646);
if (failed) return sExpression;
if (backtracking == 0) {
sExpression=new VariableLispAtom(t.getText());
}
}
break;
case 2:
{
t=(Token)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_lisp_atom1658);
if (failed) return sExpression;
if (backtracking == 0) {
sExpression=new StringLispAtom(getString(t));
}
}
break;
case 3:
{
t=(Token)input.LT(1);
match(input,FLOAT,FOLLOW_FLOAT_in_lisp_atom1680);
if (failed) return sExpression;
if (backtracking == 0) {
sExpression=new FloatLispAtom(t.getText());
}
}
break;
case 4:
{
t=(Token)input.LT(1);
match(input,INT,FOLLOW_INT_in_lisp_atom1692);
if (failed) return sExpression;
if (backtracking == 0) {
sExpression=new IntLispAtom(t.getText());
}
}
break;
case 5:
{
t=(Token)input.LT(1);
match(input,BOOL,FOLLOW_BOOL_in_lisp_atom1705);
if (failed) return sExpression;
if (backtracking == 0) {
sExpression=new BoolLispAtom(t.getText());
}
}
break;
case 6:
{
t=(Token)input.LT(1);
match(input,NULL,FOLLOW_NULL_in_lisp_atom1721);
if (failed) return sExpression;
if (backtracking == 0) {
sExpression=new NullLispAtom(null);
}
}
break;
case 7:
{
t=(Token)input.LT(1);
match(input,NAME,FOLLOW_NAME_in_lisp_atom1747);
if (failed) return sExpression;
if (backtracking == 0) {
sExpression=new SymbolLispAtom("\"" + t.getText() + "\"");
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return sExpression;
}
