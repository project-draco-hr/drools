{
  ImportDescr i=null;
  FunctionDescr f=null;
  RuleDescr r=null;
  LispForm form=null;
  try {
{
      loop1:       do {
        int alt1=5;
        int LA1_0=input.LA(1);
        if ((LA1_0 == LEFT_PAREN)) {
switch (input.LA(2)) {
case DEFFUNCTION:
{
              alt1=2;
            }
          break;
case DEFRULE:
{
          alt1=3;
        }
      break;
case 44:
{
      alt1=1;
    }
  break;
case NAME:
case VAR:
{
  alt1=4;
}
break;
}
}
switch (alt1) {
case 1:
{
pushFollow(FOLLOW_importDescr_in_eval60);
i=importDescr();
_fsp--;
if (failed) return;
if (backtracking == 0) {
handler.importHandler(i);
}
}
break;
case 2:
{
pushFollow(FOLLOW_deffunction_in_eval71);
f=deffunction();
_fsp--;
if (failed) return;
if (backtracking == 0) {
handler.functionHandler(f);
}
}
break;
case 3:
{
pushFollow(FOLLOW_defrule_in_eval84);
r=defrule();
_fsp--;
if (failed) return;
if (backtracking == 0) {
handler.ruleHandler(r);
}
}
break;
case 4:
{
pushFollow(FOLLOW_lisp_form_in_eval96);
form=lisp_form();
_fsp--;
if (failed) return;
if (backtracking == 0) {
handler.lispFormHandler(form);
}
}
break;
default :
break loop1;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
