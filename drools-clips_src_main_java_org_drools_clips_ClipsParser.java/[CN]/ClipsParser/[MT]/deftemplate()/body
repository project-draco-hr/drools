{
  TypeDeclarationDescr typeDescr=null;
  Token loc=null;
  Token deftemplateName=null;
  Token documentation=null;
  try {
{
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_deftemplate185);
      if (failed)       return typeDescr;
      match(input,DEFTEMPLATE,FOLLOW_DEFTEMPLATE_in_deftemplate192);
      if (failed)       return typeDescr;
      deftemplateName=(Token)input.LT(1);
      match(input,NAME,FOLLOW_NAME_in_deftemplate196);
      if (failed)       return typeDescr;
      if (backtracking == 0) {
        debug("start rule: " + deftemplateName.getText());
        String templateStr=deftemplateName.getText();
        String mod=null;
        if (templateStr.indexOf("::") >= 0) {
          mod=templateStr.substring(0,templateStr.indexOf("::"));
          templateStr=templateStr.substring(templateStr.indexOf("::") + 2);
        }
        typeDescr=new TypeDeclarationDescr(templateStr);
        if (mod != null) {
          typeDescr.setNamespace(mod);
        }
        typeDescr.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        typeDescr.setStartCharacter(((CommonToken)loc).getStartIndex());
      }
      documentation=(Token)input.LT(1);
      match(input,STRING,FOLLOW_STRING_in_deftemplate207);
      if (failed)       return typeDescr;
      if (backtracking == 0) {
      }
      loop2:       do {
        int alt2=2;
        int LA2_0=input.LA(1);
        if ((LA2_0 == LEFT_PAREN)) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            pushFollow(FOLLOW_deftemplate_slot_in_deftemplate220);
            deftemplate_slot(typeDescr);
            _fsp--;
            if (failed)             return typeDescr;
          }
        break;
default :
      break loop2;
  }
}
 while (true);
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_deftemplate228);
if (failed) return typeDescr;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return typeDescr;
}
