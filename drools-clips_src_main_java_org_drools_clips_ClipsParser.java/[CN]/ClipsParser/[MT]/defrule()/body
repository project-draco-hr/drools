{
  RuleDescr rule=null;
  Token loc=null;
  Token ruleName=null;
  Token documentation=null;
  List list=null;
  rule=null;
  AndDescr lhs=null;
  PatternDescr colum=null;
  Set declarations=null;
  try {
{
      loc=(Token)input.LT(1);
      match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_defrule473);
      if (failed)       return rule;
      match(input,DEFRULE,FOLLOW_DEFRULE_in_defrule481);
      if (failed)       return rule;
      ruleName=(Token)input.LT(1);
      match(input,NAME,FOLLOW_NAME_in_defrule485);
      if (failed)       return rule;
      if (backtracking == 0) {
        debug("start rule: " + ruleName.getText());
        String ruleStr=ruleName.getText();
        AttributeDescr module=null;
        if (ruleStr.indexOf("::") >= 0) {
          String mod=ruleStr.substring(0,ruleStr.indexOf("::"));
          ruleStr=ruleStr.substring(ruleStr.indexOf("::") + 2);
          module=new AttributeDescr("agenda-group",mod);
          module.setLocation(offset(ruleName.getLine()),ruleName.getCharPositionInLine());
          module.setStartCharacter(((CommonToken)ruleName).getStartIndex());
          module.setEndCharacter(((CommonToken)ruleName).getStopIndex());
        }
        rule=new RuleDescr(ruleStr,null);
        if (module != null) {
          rule.setNamespace(module.getValue());
          rule.addAttribute(module);
        }
        rule.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        rule.setStartCharacter(((CommonToken)loc).getStartIndex());
        lhs=new AndDescr();
        rule.setLhs(lhs);
        lhs.setLocation(offset(loc.getLine()),loc.getCharPositionInLine());
        lhs.setStartCharacter(((CommonToken)loc).getStartIndex());
        rule.addAttribute(new AttributeDescr("dialect","clips"));
        declarations=new HashSet();
      }
      documentation=(Token)input.LT(1);
      match(input,STRING,FOLLOW_STRING_in_defrule497);
      if (failed)       return rule;
      if (backtracking == 0) {
      }
      pushFollow(FOLLOW_ruleAttribute_in_defrule503);
      ruleAttribute(rule);
      _fsp--;
      if (failed)       return rule;
      loop4:       do {
        int alt4=2;
        int LA4_0=input.LA(1);
        if ((LA4_0 == LEFT_PAREN || LA4_0 == VAR)) {
          alt4=1;
        }
switch (alt4) {
case 1:
{
            pushFollow(FOLLOW_ce_in_defrule511);
            ce(lhs,declarations);
            _fsp--;
            if (failed)             return rule;
          }
        break;
default :
      break loop4;
  }
}
 while (true);
match(input,48,FOLLOW_48_in_defrule520);
if (failed) return rule;
pushFollow(FOLLOW_rule_consequence_in_defrule529);
list=rule_consequence();
_fsp--;
if (failed) return rule;
if (backtracking == 0) {
  rule.setConsequence(list);
}
match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_defrule537);
if (failed) return rule;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return rule;
}
