{
  String text=null;
  Token t=null;
  text=null;
  try {
{
      int alt20=6;
switch (input.LA(1)) {
case STRING:
{
          alt20=1;
        }
      break;
case NAME:
{
      alt20=2;
    }
  break;
case INT:
{
  alt20=3;
}
break;
case FLOAT:
{
alt20=4;
}
break;
case BOOL:
{
alt20=5;
}
break;
case NULL:
{
alt20=6;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return text;
}
NoViableAltException nvae=new NoViableAltException("",20,0,input);
throw nvae;
}
switch (alt20) {
case 1:
{
t=(Token)match(input,STRING,FOLLOW_STRING_in_literal1692);
if (state.failed) return text;
if (state.backtracking == 0) {
text=getString(t);
}
}
break;
case 2:
{
t=(Token)match(input,NAME,FOLLOW_NAME_in_literal1705);
if (state.failed) return text;
if (state.backtracking == 0) {
text=t.getText();
}
}
break;
case 3:
{
t=(Token)match(input,INT,FOLLOW_INT_in_literal1721);
if (state.failed) return text;
if (state.backtracking == 0) {
text=t.getText();
}
}
break;
case 4:
{
t=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal1736);
if (state.failed) return text;
if (state.backtracking == 0) {
text=t.getText();
}
}
break;
case 5:
{
t=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal1749);
if (state.failed) return text;
if (state.backtracking == 0) {
text=t.getText();
}
}
break;
case 6:
{
t=(Token)match(input,NULL,FOLLOW_NULL_in_literal1763);
if (state.failed) return text;
if (state.backtracking == 0) {
text=null;
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return text;
}
