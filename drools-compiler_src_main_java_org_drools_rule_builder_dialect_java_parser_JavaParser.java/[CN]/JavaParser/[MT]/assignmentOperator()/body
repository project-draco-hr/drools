{
  int assignmentOperator_StartIndex=input.index();
  try {
    if (backtracking > 0 && alreadyParsedRule(input,101)) {
      return;
    }
    int alt131=12;
switch (input.LA(1)) {
case 44:
{
        alt131=1;
      }
    break;
case 90:
{
    alt131=2;
  }
break;
case 91:
{
alt131=3;
}
break;
case 92:
{
alt131=4;
}
break;
case 93:
{
alt131=5;
}
break;
case 94:
{
alt131=6;
}
break;
case 95:
{
alt131=7;
}
break;
case 96:
{
alt131=8;
}
break;
case 97:
{
alt131=9;
}
break;
case 33:
{
alt131=10;
}
break;
case 35:
{
int LA131_11=input.LA(2);
if ((LA131_11 == 35)) {
int LA131_12=input.LA(3);
if ((synpred198())) {
alt131=11;
}
 else if ((true)) {
alt131=12;
}
 else {
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("785:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '=' | '>' '>' '>' '=' );",131,12,input);
throw nvae;
}
}
 else {
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("785:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '=' | '>' '>' '>' '=' );",131,11,input);
throw nvae;
}
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("785:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '=' | '>' '>' '>' '=' );",131,0,input);
throw nvae;
}
switch (alt131) {
case 1:
{
match(input,44,FOLLOW_44_in_assignmentOperator3089);
if (failed) return;
}
break;
case 2:
{
match(input,90,FOLLOW_90_in_assignmentOperator3099);
if (failed) return;
}
break;
case 3:
{
match(input,91,FOLLOW_91_in_assignmentOperator3109);
if (failed) return;
}
break;
case 4:
{
match(input,92,FOLLOW_92_in_assignmentOperator3119);
if (failed) return;
}
break;
case 5:
{
match(input,93,FOLLOW_93_in_assignmentOperator3129);
if (failed) return;
}
break;
case 6:
{
match(input,94,FOLLOW_94_in_assignmentOperator3139);
if (failed) return;
}
break;
case 7:
{
match(input,95,FOLLOW_95_in_assignmentOperator3149);
if (failed) return;
}
break;
case 8:
{
match(input,96,FOLLOW_96_in_assignmentOperator3159);
if (failed) return;
}
break;
case 9:
{
match(input,97,FOLLOW_97_in_assignmentOperator3169);
if (failed) return;
}
break;
case 10:
{
match(input,33,FOLLOW_33_in_assignmentOperator3179);
if (failed) return;
match(input,33,FOLLOW_33_in_assignmentOperator3181);
if (failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator3183);
if (failed) return;
}
break;
case 11:
{
match(input,35,FOLLOW_35_in_assignmentOperator3193);
if (failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator3195);
if (failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator3197);
if (failed) return;
}
break;
case 12:
{
match(input,35,FOLLOW_35_in_assignmentOperator3207);
if (failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator3209);
if (failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator3211);
if (failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator3213);
if (failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (backtracking > 0) {
memoize(input,101,assignmentOperator_StartIndex);
}
}
return;
}
