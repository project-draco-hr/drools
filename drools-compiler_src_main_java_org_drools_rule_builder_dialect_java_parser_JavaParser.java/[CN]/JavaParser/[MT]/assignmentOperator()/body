{
  int assignmentOperator_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,105)) {
      return;
    }
    int alt135=12;
    alt135=dfa135.predict(input);
switch (alt135) {
case 1:
{
        match(input,44,FOLLOW_44_in_assignmentOperator4231);
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,95,FOLLOW_95_in_assignmentOperator4241);
    if (state.failed)     return;
  }
break;
case 3:
{
match(input,96,FOLLOW_96_in_assignmentOperator4251);
if (state.failed) return;
}
break;
case 4:
{
match(input,97,FOLLOW_97_in_assignmentOperator4261);
if (state.failed) return;
}
break;
case 5:
{
match(input,98,FOLLOW_98_in_assignmentOperator4271);
if (state.failed) return;
}
break;
case 6:
{
match(input,99,FOLLOW_99_in_assignmentOperator4281);
if (state.failed) return;
}
break;
case 7:
{
match(input,100,FOLLOW_100_in_assignmentOperator4291);
if (state.failed) return;
}
break;
case 8:
{
match(input,101,FOLLOW_101_in_assignmentOperator4301);
if (state.failed) return;
}
break;
case 9:
{
match(input,102,FOLLOW_102_in_assignmentOperator4311);
if (state.failed) return;
}
break;
case 10:
{
match(input,33,FOLLOW_33_in_assignmentOperator4321);
if (state.failed) return;
match(input,33,FOLLOW_33_in_assignmentOperator4323);
if (state.failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator4325);
if (state.failed) return;
}
break;
case 11:
{
match(input,35,FOLLOW_35_in_assignmentOperator4335);
if (state.failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator4337);
if (state.failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator4339);
if (state.failed) return;
}
break;
case 12:
{
match(input,35,FOLLOW_35_in_assignmentOperator4349);
if (state.failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator4351);
if (state.failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator4353);
if (state.failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator4355);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,105,assignmentOperator_StartIndex);
}
}
return;
}
