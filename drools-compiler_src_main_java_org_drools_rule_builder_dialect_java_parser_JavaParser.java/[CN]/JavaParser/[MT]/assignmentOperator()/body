{
  int assignmentOperator_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,101)) {
      return;
    }
    int alt131=12;
    alt131=dfa131.predict(input);
switch (alt131) {
case 1:
{
        match(input,44,FOLLOW_44_in_assignmentOperator3089);
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,90,FOLLOW_90_in_assignmentOperator3099);
    if (state.failed)     return;
  }
break;
case 3:
{
match(input,91,FOLLOW_91_in_assignmentOperator3109);
if (state.failed) return;
}
break;
case 4:
{
match(input,92,FOLLOW_92_in_assignmentOperator3119);
if (state.failed) return;
}
break;
case 5:
{
match(input,93,FOLLOW_93_in_assignmentOperator3129);
if (state.failed) return;
}
break;
case 6:
{
match(input,94,FOLLOW_94_in_assignmentOperator3139);
if (state.failed) return;
}
break;
case 7:
{
match(input,95,FOLLOW_95_in_assignmentOperator3149);
if (state.failed) return;
}
break;
case 8:
{
match(input,96,FOLLOW_96_in_assignmentOperator3159);
if (state.failed) return;
}
break;
case 9:
{
match(input,97,FOLLOW_97_in_assignmentOperator3169);
if (state.failed) return;
}
break;
case 10:
{
match(input,33,FOLLOW_33_in_assignmentOperator3179);
if (state.failed) return;
match(input,33,FOLLOW_33_in_assignmentOperator3181);
if (state.failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator3183);
if (state.failed) return;
}
break;
case 11:
{
match(input,35,FOLLOW_35_in_assignmentOperator3193);
if (state.failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator3195);
if (state.failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator3197);
if (state.failed) return;
}
break;
case 12:
{
match(input,35,FOLLOW_35_in_assignmentOperator3207);
if (state.failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator3209);
if (state.failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator3211);
if (state.failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator3213);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,101,assignmentOperator_StartIndex);
}
}
return;
}
