{
  int assignmentOperator_StartIndex=input.index();
  try {
    if (backtracking > 0 && alreadyParsedRule(input,100)) {
      return;
    }
    int alt129=12;
switch (input.LA(1)) {
case 44:
{
        alt129=1;
      }
    break;
case 89:
{
    alt129=2;
  }
break;
case 90:
{
alt129=3;
}
break;
case 91:
{
alt129=4;
}
break;
case 92:
{
alt129=5;
}
break;
case 93:
{
alt129=6;
}
break;
case 94:
{
alt129=7;
}
break;
case 95:
{
alt129=8;
}
break;
case 96:
{
alt129=9;
}
break;
case 33:
{
alt129=10;
}
break;
case 35:
{
int LA129_11=input.LA(2);
if ((LA129_11 == 35)) {
int LA129_12=input.LA(3);
if ((synpred195())) {
alt129=11;
}
 else if ((true)) {
alt129=12;
}
 else {
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("702:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '=' | '>' '>' '>' '=' );",129,12,input);
throw nvae;
}
}
 else {
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("702:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '=' | '>' '>' '>' '=' );",129,11,input);
throw nvae;
}
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("702:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '=' | '>' '>' '>' '=' );",129,0,input);
throw nvae;
}
switch (alt129) {
case 1:
{
match(input,44,FOLLOW_44_in_assignmentOperator2854);
if (failed) return;
}
break;
case 2:
{
match(input,89,FOLLOW_89_in_assignmentOperator2864);
if (failed) return;
}
break;
case 3:
{
match(input,90,FOLLOW_90_in_assignmentOperator2874);
if (failed) return;
}
break;
case 4:
{
match(input,91,FOLLOW_91_in_assignmentOperator2884);
if (failed) return;
}
break;
case 5:
{
match(input,92,FOLLOW_92_in_assignmentOperator2894);
if (failed) return;
}
break;
case 6:
{
match(input,93,FOLLOW_93_in_assignmentOperator2904);
if (failed) return;
}
break;
case 7:
{
match(input,94,FOLLOW_94_in_assignmentOperator2914);
if (failed) return;
}
break;
case 8:
{
match(input,95,FOLLOW_95_in_assignmentOperator2924);
if (failed) return;
}
break;
case 9:
{
match(input,96,FOLLOW_96_in_assignmentOperator2934);
if (failed) return;
}
break;
case 10:
{
match(input,33,FOLLOW_33_in_assignmentOperator2944);
if (failed) return;
match(input,33,FOLLOW_33_in_assignmentOperator2946);
if (failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator2948);
if (failed) return;
}
break;
case 11:
{
match(input,35,FOLLOW_35_in_assignmentOperator2958);
if (failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator2960);
if (failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator2962);
if (failed) return;
}
break;
case 12:
{
match(input,35,FOLLOW_35_in_assignmentOperator2972);
if (failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator2974);
if (failed) return;
match(input,35,FOLLOW_35_in_assignmentOperator2976);
if (failed) return;
match(input,44,FOLLOW_44_in_assignmentOperator2978);
if (failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (backtracking > 0) {
memoize(input,100,assignmentOperator_StartIndex);
}
}
return;
}
