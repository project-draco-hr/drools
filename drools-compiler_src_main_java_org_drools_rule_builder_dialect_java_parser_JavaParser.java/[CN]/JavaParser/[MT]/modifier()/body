{
  int modifier_StartIndex=input.index();
  try {
    if (backtracking > 0 && alreadyParsedRule(input,46)) {
      return;
    }
    int alt64=12;
switch (input.LA(1)) {
case 71:
{
        alt64=1;
      }
    break;
case 45:
{
    alt64=2;
  }
break;
case 46:
{
alt64=3;
}
break;
case 47:
{
alt64=4;
}
break;
case 27:
{
alt64=5;
}
break;
case 48:
{
alt64=6;
}
break;
case 49:
{
alt64=7;
}
break;
case 50:
{
alt64=8;
}
break;
case 51:
{
alt64=9;
}
break;
case 52:
{
alt64=10;
}
break;
case 53:
{
alt64=11;
}
break;
case 54:
{
alt64=12;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("432:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );",64,0,input);
throw nvae;
}
switch (alt64) {
case 1:
{
pushFollow(FOLLOW_annotation_in_modifier1258);
annotation();
_fsp--;
if (failed) return;
}
break;
case 2:
{
match(input,45,FOLLOW_45_in_modifier1268);
if (failed) return;
}
break;
case 3:
{
match(input,46,FOLLOW_46_in_modifier1278);
if (failed) return;
}
break;
case 4:
{
match(input,47,FOLLOW_47_in_modifier1288);
if (failed) return;
}
break;
case 5:
{
match(input,27,FOLLOW_27_in_modifier1298);
if (failed) return;
}
break;
case 6:
{
match(input,48,FOLLOW_48_in_modifier1308);
if (failed) return;
}
break;
case 7:
{
match(input,49,FOLLOW_49_in_modifier1318);
if (failed) return;
}
break;
case 8:
{
match(input,50,FOLLOW_50_in_modifier1328);
if (failed) return;
}
break;
case 9:
{
match(input,51,FOLLOW_51_in_modifier1338);
if (failed) return;
}
break;
case 10:
{
match(input,52,FOLLOW_52_in_modifier1348);
if (failed) return;
}
break;
case 11:
{
match(input,53,FOLLOW_53_in_modifier1358);
if (failed) return;
}
break;
case 12:
{
match(input,54,FOLLOW_54_in_modifier1368);
if (failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (backtracking > 0) {
memoize(input,46,modifier_StartIndex);
}
}
return;
}
