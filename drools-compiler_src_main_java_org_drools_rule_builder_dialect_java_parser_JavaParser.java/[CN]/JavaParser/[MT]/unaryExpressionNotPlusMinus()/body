{
  int unaryExpressionNotPlusMinus_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,118)) {
      return;
    }
    int alt150=4;
    alt150=dfa150.predict(input);
switch (alt150) {
case 1:
{
        match(input,114,FOLLOW_114_in_unaryExpressionNotPlusMinus3840);
        if (state.failed)         return;
        pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3842);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,115,FOLLOW_115_in_unaryExpressionNotPlusMinus3851);
    if (state.failed)     return;
    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3853);
    unaryExpression();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 3:
{
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus3863);
castExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus3873);
primary();
state._fsp--;
if (state.failed) return;
loop148: do {
int alt148=2;
alt148=dfa148.predict(input);
switch (alt148) {
case 1:
{
  pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus3875);
  selector();
  state._fsp--;
  if (state.failed)   return;
}
break;
default :
break loop148;
}
}
 while (true);
int alt149=2;
alt149=dfa149.predict(input);
switch (alt149) {
case 1:
{
if ((input.LA(1) >= 112 && input.LA(1) <= 113)) {
input.consume();
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,118,unaryExpressionNotPlusMinus_StartIndex);
}
}
return;
}
