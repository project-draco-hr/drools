{
  int unaryExpressionNotPlusMinus_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,121)) {
      return;
    }
    int alt154=4;
    alt154=dfa154.predict(input);
switch (alt154) {
case 1:
{
        match(input,116,FOLLOW_116_in_unaryExpressionNotPlusMinus4779);
        if (state.failed)         return;
        pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4781);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,117,FOLLOW_117_in_unaryExpressionNotPlusMinus4790);
    if (state.failed)     return;
    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4792);
    unaryExpression();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 3:
{
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus4802);
castExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus4812);
primary();
state._fsp--;
if (state.failed) return;
loop152: do {
int alt152=2;
alt152=dfa152.predict(input);
switch (alt152) {
case 1:
{
  pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus4814);
  selector();
  state._fsp--;
  if (state.failed)   return;
}
break;
default :
break loop152;
}
}
 while (true);
int alt153=2;
alt153=dfa153.predict(input);
switch (alt153) {
case 1:
{
if ((input.LA(1) >= 114 && input.LA(1) <= 115)) {
input.consume();
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,121,unaryExpressionNotPlusMinus_StartIndex);
}
}
return;
}
