{
  int tryStatement_StartIndex=input.index();
  Token s=null;
  Token bs=null;
  Token c=null;
  JavaParser.formalParameter_return formalParameter3=null;
  JavaTryBlockDescr td=null;
  JavaCatchBlockDescr cd=null;
  JavaFinalBlockDescr fd=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,84)) {
      return;
    }
{
      s=(Token)match(input,85,FOLLOW_85_in_tryStatement3192);
      if (state.failed)       return;
      if (state.backtracking == 0) {
        this.localVariableLevel++;
      }
      bs=(Token)match(input,37,FOLLOW_37_in_tryStatement3198);
      if (state.failed)       return;
      loop113:       do {
        int alt113=2;
        alt113=dfa113.predict(input);
switch (alt113) {
case 1:
{
            pushFollow(FOLLOW_blockStatement_in_tryStatement3200);
            blockStatement();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      break loop113;
  }
}
 while (true);
if (state.backtracking == 0) {
  td=new JavaTryBlockDescr();
  td.setStart(((CommonToken)s).getStartIndex());
  td.setTextStart(((CommonToken)bs).getStartIndex());
  this.blocks.add(td);
}
c=(Token)match(input,38,FOLLOW_38_in_tryStatement3219);
if (state.failed) return;
if (state.backtracking == 0) {
  td.setEnd(((CommonToken)c).getStopIndex());
  this.localVariableLevel--;
}
loop115: do {
  int alt115=2;
  alt115=dfa115.predict(input);
switch (alt115) {
case 1:
{
      s=(Token)match(input,86,FOLLOW_86_in_tryStatement3232);
      if (state.failed)       return;
      match(input,65,FOLLOW_65_in_tryStatement3234);
      if (state.failed)       return;
      pushFollow(FOLLOW_formalParameter_in_tryStatement3236);
      formalParameter3=formalParameter();
      state._fsp--;
      if (state.failed)       return;
      match(input,66,FOLLOW_66_in_tryStatement3238);
      if (state.failed)       return;
      if (state.backtracking == 0) {
        this.localVariableLevel++;
      }
      bs=(Token)match(input,37,FOLLOW_37_in_tryStatement3244);
      if (state.failed)       return;
      loop114:       do {
        int alt114=2;
        alt114=dfa114.predict(input);
switch (alt114) {
case 1:
{
            pushFollow(FOLLOW_blockStatement_in_tryStatement3246);
            blockStatement();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      break loop114;
  }
}
 while (true);
if (state.backtracking == 0) {
  cd=new JavaCatchBlockDescr((formalParameter3 != null ? input.toString(formalParameter3.start,formalParameter3.stop) : null));
  cd.setClauseStart(((CommonToken)(formalParameter3 != null ? ((Token)formalParameter3.start) : null)).getStartIndex());
  cd.setStart(((CommonToken)s).getStartIndex());
  cd.setTextStart(((CommonToken)bs).getStartIndex());
  td.addCatch(cd);
}
c=(Token)match(input,38,FOLLOW_38_in_tryStatement3259);
if (state.failed) return;
if (state.backtracking == 0) {
  cd.setEnd(((CommonToken)c).getStopIndex());
  this.localVariableLevel--;
}
}
break;
default :
break loop115;
}
}
 while (true);
int alt117=2;
alt117=dfa117.predict(input);
switch (alt117) {
case 1:
{
s=(Token)match(input,87,FOLLOW_87_in_tryStatement3281);
if (state.failed) return;
if (state.backtracking == 0) {
this.localVariableLevel++;
}
bs=(Token)match(input,37,FOLLOW_37_in_tryStatement3287);
if (state.failed) return;
loop116: do {
int alt116=2;
alt116=dfa116.predict(input);
switch (alt116) {
case 1:
{
pushFollow(FOLLOW_blockStatement_in_tryStatement3289);
blockStatement();
state._fsp--;
if (state.failed) return;
}
break;
default :
break loop116;
}
}
 while (true);
if (state.backtracking == 0) {
fd=new JavaFinalBlockDescr();
fd.setStart(((CommonToken)s).getStartIndex());
fd.setTextStart(((CommonToken)bs).getStartIndex());
td.setFinally(fd);
}
c=(Token)match(input,38,FOLLOW_38_in_tryStatement3303);
if (state.failed) return;
if (state.backtracking == 0) {
fd.setEnd(((CommonToken)c).getStopIndex());
this.localVariableLevel--;
}
}
break;
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,84,tryStatement_StartIndex);
}
}
return;
}
