{
  int compilationUnit_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,1)) {
      return;
    }
{
      int alt1=2;
      alt1=dfa1.predict(input);
switch (alt1) {
case 1:
{
          pushFollow(FOLLOW_annotations_in_compilationUnit81);
          annotations();
          state._fsp--;
          if (state.failed)           return;
        }
      break;
  }
  int alt2=2;
  alt2=dfa2.predict(input);
switch (alt2) {
case 1:
{
      pushFollow(FOLLOW_packageDeclaration_in_compilationUnit92);
      packageDeclaration();
      state._fsp--;
      if (state.failed)       return;
    }
  break;
}
loop3: do {
int alt3=2;
alt3=dfa3.predict(input);
switch (alt3) {
case 1:
{
    pushFollow(FOLLOW_importDeclaration_in_compilationUnit103);
    importDeclaration();
    state._fsp--;
    if (state.failed)     return;
  }
break;
default :
break loop3;
}
}
 while (true);
loop4: do {
int alt4=2;
alt4=dfa4.predict(input);
switch (alt4) {
case 1:
{
pushFollow(FOLLOW_typeDeclaration_in_compilationUnit114);
typeDeclaration();
state._fsp--;
if (state.failed) return;
}
break;
default :
break loop4;
}
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,1,compilationUnit_StartIndex);
}
}
return;
}
