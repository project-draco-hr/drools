{
  JavaParser.statement_return retval=new JavaParser.statement_return();
  retval.start=input.LT(1);
  int statement_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,83)) {
      return retval;
    }
    int alt111=19;
    alt111=dfa111.predict(input);
switch (alt111) {
case 1:
{
        pushFollow(FOLLOW_block_in_statement2906);
        block();
        state._fsp--;
        if (state.failed)         return retval;
      }
    break;
case 2:
{
    match(input,73,FOLLOW_73_in_statement2914);
    if (state.failed)     return retval;
    pushFollow(FOLLOW_expression_in_statement2916);
    expression();
    state._fsp--;
    if (state.failed)     return retval;
    int alt107=2;
    int LA107_0=input.LA(1);
    if ((LA107_0 == 74)) {
      alt107=1;
    }
switch (alt107) {
case 1:
{
        match(input,74,FOLLOW_74_in_statement2919);
        if (state.failed)         return retval;
        pushFollow(FOLLOW_expression_in_statement2921);
        expression();
        state._fsp--;
        if (state.failed)         return retval;
      }
    break;
}
match(input,25,FOLLOW_25_in_statement2925);
if (state.failed) return retval;
}
break;
case 3:
{
pushFollow(FOLLOW_ifStatement_in_statement2933);
ifStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 4:
{
pushFollow(FOLLOW_forStatement_in_statement2941);
forStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 5:
{
pushFollow(FOLLOW_whileStatement_in_statement2950);
whileStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 6:
{
match(input,75,FOLLOW_75_in_statement2958);
if (state.failed) return retval;
pushFollow(FOLLOW_statement_in_statement2960);
statement();
state._fsp--;
if (state.failed) return retval;
match(input,76,FOLLOW_76_in_statement2962);
if (state.failed) return retval;
pushFollow(FOLLOW_parExpression_in_statement2964);
parExpression();
state._fsp--;
if (state.failed) return retval;
match(input,25,FOLLOW_25_in_statement2966);
if (state.failed) return retval;
}
break;
case 7:
{
pushFollow(FOLLOW_tryStatement_in_statement2979);
tryStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 8:
{
match(input,77,FOLLOW_77_in_statement2994);
if (state.failed) return retval;
pushFollow(FOLLOW_parExpression_in_statement2996);
parExpression();
state._fsp--;
if (state.failed) return retval;
match(input,37,FOLLOW_37_in_statement2998);
if (state.failed) return retval;
pushFollow(FOLLOW_switchBlockStatementGroups_in_statement3000);
switchBlockStatementGroups();
state._fsp--;
if (state.failed) return retval;
match(input,38,FOLLOW_38_in_statement3002);
if (state.failed) return retval;
}
break;
case 9:
{
match(input,51,FOLLOW_51_in_statement3010);
if (state.failed) return retval;
pushFollow(FOLLOW_parExpression_in_statement3012);
parExpression();
state._fsp--;
if (state.failed) return retval;
pushFollow(FOLLOW_block_in_statement3014);
block();
state._fsp--;
if (state.failed) return retval;
}
break;
case 10:
{
match(input,78,FOLLOW_78_in_statement3022);
if (state.failed) return retval;
int alt108=2;
alt108=dfa108.predict(input);
switch (alt108) {
case 1:
{
pushFollow(FOLLOW_expression_in_statement3024);
expression();
state._fsp--;
if (state.failed) return retval;
}
break;
}
match(input,25,FOLLOW_25_in_statement3027);
if (state.failed) return retval;
}
break;
case 11:
{
pushFollow(FOLLOW_throwStatement_in_statement3036);
throwStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 12:
{
match(input,79,FOLLOW_79_in_statement3044);
if (state.failed) return retval;
int alt109=2;
int LA109_0=input.LA(1);
if ((LA109_0 == Identifier)) {
alt109=1;
}
switch (alt109) {
case 1:
{
match(input,Identifier,FOLLOW_Identifier_in_statement3046);
if (state.failed) return retval;
}
break;
}
match(input,25,FOLLOW_25_in_statement3049);
if (state.failed) return retval;
}
break;
case 13:
{
match(input,80,FOLLOW_80_in_statement3057);
if (state.failed) return retval;
int alt110=2;
int LA110_0=input.LA(1);
if ((LA110_0 == Identifier)) {
alt110=1;
}
switch (alt110) {
case 1:
{
match(input,Identifier,FOLLOW_Identifier_in_statement3059);
if (state.failed) return retval;
}
break;
}
match(input,25,FOLLOW_25_in_statement3062);
if (state.failed) return retval;
}
break;
case 14:
{
pushFollow(FOLLOW_modifyStatement_in_statement3075);
modifyStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 15:
{
pushFollow(FOLLOW_updateStatement_in_statement3082);
updateStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 16:
{
pushFollow(FOLLOW_retractStatement_in_statement3089);
retractStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 17:
{
match(input,25,FOLLOW_25_in_statement3097);
if (state.failed) return retval;
}
break;
case 18:
{
pushFollow(FOLLOW_statementExpression_in_statement3105);
statementExpression();
state._fsp--;
if (state.failed) return retval;
match(input,25,FOLLOW_25_in_statement3107);
if (state.failed) return retval;
}
break;
case 19:
{
match(input,Identifier,FOLLOW_Identifier_in_statement3115);
if (state.failed) return retval;
match(input,74,FOLLOW_74_in_statement3117);
if (state.failed) return retval;
pushFollow(FOLLOW_statement_in_statement3119);
statement();
state._fsp--;
if (state.failed) return retval;
}
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,83,statement_StartIndex);
}
}
return retval;
}
