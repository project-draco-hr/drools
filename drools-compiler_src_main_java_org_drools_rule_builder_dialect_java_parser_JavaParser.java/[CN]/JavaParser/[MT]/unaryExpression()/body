{
  int unaryExpression_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,117)) {
      return;
    }
    int alt147=5;
    alt147=dfa147.predict(input);
switch (alt147) {
case 1:
{
        match(input,107,FOLLOW_107_in_unaryExpression3739);
        if (state.failed)         return;
        pushFollow(FOLLOW_unaryExpression_in_unaryExpression3741);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,108,FOLLOW_108_in_unaryExpression3749);
    if (state.failed)     return;
    pushFollow(FOLLOW_unaryExpression_in_unaryExpression3751);
    unaryExpression();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 3:
{
match(input,111,FOLLOW_111_in_unaryExpression3761);
if (state.failed) return;
pushFollow(FOLLOW_primary_in_unaryExpression3763);
primary();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
match(input,112,FOLLOW_112_in_unaryExpression3773);
if (state.failed) return;
pushFollow(FOLLOW_primary_in_unaryExpression3775);
primary();
state._fsp--;
if (state.failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression3785);
unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,117,unaryExpression_StartIndex);
}
}
return;
}
