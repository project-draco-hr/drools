{
  int unaryExpression_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,116)) {
      return;
    }
    int alt146=5;
    alt146=dfa146.predict(input);
switch (alt146) {
case 1:
{
        match(input,105,FOLLOW_105_in_unaryExpression3625);
        if (state.failed)         return;
        pushFollow(FOLLOW_unaryExpression_in_unaryExpression3627);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,106,FOLLOW_106_in_unaryExpression3635);
    if (state.failed)     return;
    pushFollow(FOLLOW_unaryExpression_in_unaryExpression3637);
    unaryExpression();
    state._fsp--;
    if (state.failed)     return;
  }
break;
case 3:
{
match(input,109,FOLLOW_109_in_unaryExpression3647);
if (state.failed) return;
pushFollow(FOLLOW_primary_in_unaryExpression3649);
primary();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
match(input,110,FOLLOW_110_in_unaryExpression3659);
if (state.failed) return;
pushFollow(FOLLOW_primary_in_unaryExpression3661);
primary();
state._fsp--;
if (state.failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression3671);
unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,116,unaryExpression_StartIndex);
}
}
return;
}
