{
  int additiveExpression_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,115)) {
      return;
    }
{
      pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression3677);
      multiplicativeExpression();
      state._fsp--;
      if (state.failed)       return;
      loop145:       do {
        int alt145=2;
        alt145=dfa145.predict(input);
switch (alt145) {
case 1:
{
            if ((input.LA(1) >= 107 && input.LA(1) <= 108)) {
              input.consume();
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression3689);
            multiplicativeExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      break loop145;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,115,additiveExpression_StartIndex);
}
}
return;
}
