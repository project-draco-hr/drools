{
  int shiftExpression_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,118)) {
      return;
    }
{
      pushFollow(FOLLOW_additiveExpression_in_shiftExpression5259);
      additiveExpression();
      state._fsp--;
      if (state.failed)       return;
      loop152:       do {
        int alt152=2;
        alt152=dfa152.predict(input);
switch (alt152) {
case 1:
{
            pushFollow(FOLLOW_shiftOp_in_shiftExpression5263);
            shiftOp();
            state._fsp--;
            if (state.failed)             return;
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5265);
            additiveExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      break loop152;
  }
}
 while (true);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,118,shiftExpression_StartIndex);
}
}
return;
}
