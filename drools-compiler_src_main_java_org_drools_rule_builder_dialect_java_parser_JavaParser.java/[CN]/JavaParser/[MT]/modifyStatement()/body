{
  int modifyStatement_StartIndex=input.index();
  Token s=null;
  Token c=null;
  JavaParser.expression_return e=null;
  JavaParser.parExpression_return parExpression5=null;
  JavaModifyBlockDescr d=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,88)) {
      return;
    }
{
      s=(Token)match(input,88,FOLLOW_88_in_modifyStatement3645);
      if (state.failed)       return;
      pushFollow(FOLLOW_parExpression_in_modifyStatement3647);
      parExpression5=parExpression();
      state._fsp--;
      if (state.failed)       return;
      if (state.backtracking == 0) {
        d=new JavaModifyBlockDescr((parExpression5 != null ? input.toString(parExpression5.start,parExpression5.stop) : null));
        d.setStart(((CommonToken)s).getStartIndex());
        this.addBlockDescr(d);
      }
      match(input,37,FOLLOW_37_in_modifyStatement3659);
      if (state.failed)       return;
      int alt120=2;
      alt120=dfa120.predict(input);
switch (alt120) {
case 1:
{
          pushFollow(FOLLOW_expression_in_modifyStatement3667);
          e=expression();
          state._fsp--;
          if (state.failed)           return;
          if (state.backtracking == 0) {
            d.getExpressions().add((e != null ? input.toString(e.start,e.stop) : null));
          }
          loop119:           do {
            int alt119=2;
            int LA119_0=input.LA(1);
            if ((LA119_0 == 34)) {
              alt119=1;
            }
switch (alt119) {
case 1:
{
                match(input,34,FOLLOW_34_in_modifyStatement3683);
                if (state.failed)                 return;
                pushFollow(FOLLOW_expression_in_modifyStatement3687);
                e=expression();
                state._fsp--;
                if (state.failed)                 return;
                if (state.backtracking == 0) {
                  d.getExpressions().add((e != null ? input.toString(e.start,e.stop) : null));
                }
              }
            break;
default :
          break loop119;
      }
    }
 while (true);
  }
break;
}
c=(Token)match(input,38,FOLLOW_38_in_modifyStatement3711);
if (state.failed) return;
if (state.backtracking == 0) {
d.setEnd(((CommonToken)c).getStopIndex());
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,88,modifyStatement_StartIndex);
}
}
return;
}
