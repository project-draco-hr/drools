{
  int literal_StartIndex=input.index();
  try {
    if (backtracking > 0 && alreadyParsedRule(input,61)) {
      return;
    }
    int alt84=6;
switch (input.LA(1)) {
case HexLiteral:
case OctalLiteral:
case DecimalLiteral:
{
        alt84=1;
      }
    break;
case FloatingPointLiteral:
{
    alt84=2;
  }
break;
case CharacterLiteral:
{
alt84=3;
}
break;
case StringLiteral:
{
alt84=4;
}
break;
case 69:
case 70:
{
alt84=5;
}
break;
case 68:
{
alt84=6;
}
break;
default :
if (backtracking > 0) {
failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("515:1: literal : ( integerLiteral | FloatingPointLiteral | CharacterLiteral | StringLiteral | booleanLiteral | 'null' );",84,0,input);
throw nvae;
}
switch (alt84) {
case 1:
{
pushFollow(FOLLOW_integerLiteral_in_literal1758);
integerLiteral();
_fsp--;
if (failed) return;
}
break;
case 2:
{
match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal1768);
if (failed) return;
}
break;
case 3:
{
match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal1778);
if (failed) return;
}
break;
case 4:
{
match(input,StringLiteral,FOLLOW_StringLiteral_in_literal1788);
if (failed) return;
}
break;
case 5:
{
pushFollow(FOLLOW_booleanLiteral_in_literal1798);
booleanLiteral();
_fsp--;
if (failed) return;
}
break;
case 6:
{
match(input,68,FOLLOW_68_in_literal1808);
if (failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (backtracking > 0) {
memoize(input,61,literal_StartIndex);
}
}
return;
}
