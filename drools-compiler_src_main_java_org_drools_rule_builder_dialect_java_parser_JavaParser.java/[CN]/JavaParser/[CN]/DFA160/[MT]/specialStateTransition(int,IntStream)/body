{
  TokenStream input=(TokenStream)_input;
  int _s=s;
switch (s) {
case 0:
    int LA160_32=input.LA(1);
  int index160_32=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_32);
if (s >= 0) return s;
break;
case 1:
int LA160_33=input.LA(1);
int index160_33=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_33);
if (s >= 0) return s;
break;
case 2:
int LA160_34=input.LA(1);
int index160_34=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_34);
if (s >= 0) return s;
break;
case 3:
int LA160_35=input.LA(1);
int index160_35=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_35);
if (s >= 0) return s;
break;
case 4:
int LA160_36=input.LA(1);
int index160_36=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_36);
if (s >= 0) return s;
break;
case 5:
int LA160_37=input.LA(1);
int index160_37=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_37);
if (s >= 0) return s;
break;
case 6:
int LA160_38=input.LA(1);
int index160_38=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_38);
if (s >= 0) return s;
break;
case 7:
int LA160_39=input.LA(1);
int index160_39=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_39);
if (s >= 0) return s;
break;
case 8:
int LA160_40=input.LA(1);
int index160_40=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_40);
if (s >= 0) return s;
break;
case 9:
int LA160_41=input.LA(1);
int index160_41=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_41);
if (s >= 0) return s;
break;
case 10:
int LA160_42=input.LA(1);
int index160_42=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_42);
if (s >= 0) return s;
break;
case 11:
int LA160_43=input.LA(1);
int index160_43=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_43);
if (s >= 0) return s;
break;
case 12:
int LA160_44=input.LA(1);
int index160_44=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_44);
if (s >= 0) return s;
break;
case 13:
int LA160_45=input.LA(1);
int index160_45=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_45);
if (s >= 0) return s;
break;
case 14:
int LA160_46=input.LA(1);
int index160_46=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_46);
if (s >= 0) return s;
break;
case 15:
int LA160_47=input.LA(1);
int index160_47=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_47);
if (s >= 0) return s;
break;
case 16:
int LA160_48=input.LA(1);
int index160_48=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_48);
if (s >= 0) return s;
break;
case 17:
int LA160_49=input.LA(1);
int index160_49=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_49);
if (s >= 0) return s;
break;
case 18:
int LA160_50=input.LA(1);
int index160_50=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_50);
if (s >= 0) return s;
break;
case 19:
int LA160_51=input.LA(1);
int index160_51=input.index();
input.rewind();
s=-1;
if ((synpred248_Java())) {
s=52;
}
 else if ((true)) {
s=1;
}
input.seek(index160_51);
if (s >= 0) return s;
break;
}
if (state.backtracking > 0) {
state.failed=true;
return -1;
}
NoViableAltException nvae=new NoViableAltException(getDescription(),160,_s,input);
error(nvae);
throw nvae;
}
