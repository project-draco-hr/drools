{
  setKSession(getModelSession(source3,VERBOSE));
  setKbase(getKSession().getKieBase());
  getKSession().fireAllRules();
  getKSession().getEntryPoint("in_Feat1").insert(2.2);
  getKSession().fireAllRules();
  getKSession().getEntryPoint("in_Feat2").insert(5);
  getKSession().fireAllRules();
  System.err.println(reportWMObjects(getKSession()));
  FactType out1=getKbase().getFactType("org.drools.pmml.pmml_4_1.test","Out1");
  FactType out2=getKbase().getFactType("org.drools.pmml.pmml_4_1.test","Out2");
  FactType nump=getKbase().getFactType("org.drools.pmml.pmml_4_1.test","Feat2");
  assertEquals(1,getKSession().getObjects(new ClassObjectFilter(out1.getFactClass())).size());
  assertEquals(1,getKSession().getObjects(new ClassObjectFilter(out2.getFactClass())).size());
  assertEquals(2,getKSession().getObjects(new ClassObjectFilter(nump.getFactClass())).size());
  getKSession().getEntryPoint("in_Feat1").insert(2.5);
  getKSession().getEntryPoint("in_Feat2").insert(6);
  getKSession().fireAllRules();
  System.err.println(reportWMObjects(getKSession()));
  assertEquals(1,getKSession().getObjects(new ClassObjectFilter(out1.getFactClass())).size());
  assertEquals(1,getKSession().getObjects(new ClassObjectFilter(out2.getFactClass())).size());
  assertEquals(2,getKSession().getObjects(new ClassObjectFilter(nump.getFactClass())).size());
}
