{
  LeftTupleMemory ltm=bm.getLeftTupleMemory();
  ContextEntry[] contextEntry=bm.getContext();
  BetaConstraints constraints=joinNode.getRawConstraints();
  for (RightTuple rightTuple=srcRightTuples.getUpdateFirst(); rightTuple != null; ) {
    RightTuple next=rightTuple.getStagedNext();
    PropagationContext context=rightTuple.getPropagationContext();
    LeftTuple childLeftTuple=rightTuple.getFirstChild();
    FastIterator it=joinNode.getLeftIterator(ltm);
    LeftTuple leftTuple=joinNode.getFirstLeftTuple(rightTuple,ltm,context,it);
    constraints.updateFromFactHandle(contextEntry,wm,rightTuple.getFactHandle());
    if (childLeftTuple != null && ltm.isIndexed() && !it.isFullIterator() && (leftTuple == null || (leftTuple.getMemory() != childLeftTuple.getLeftParent().getMemory()))) {
      while (childLeftTuple != null) {
        childLeftTuple=deleteRightChild(childLeftTuple,trgLeftTuples,stagedLeftTuples);
      }
    }
    if (leftTuple != null) {
      doRightUpdatesProcessChildren(childLeftTuple,leftTuple,rightTuple,stagedLeftTuples,contextEntry,constraints,sink,it,trgLeftTuples);
    }
    rightTuple.clearStaged();
    rightTuple=next;
  }
  constraints.resetFactHandle(contextEntry);
}
