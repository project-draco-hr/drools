{
  while (true) {
    eval2(liaNode,rmem,node,nodeMem,smems,smemIndex,trgTuples,wm,stack,visitedRules,processRian);
    if (!stack.isEmpty()) {
      StackEntry entry=stack.removeLast();
      node=entry.getNode();
      nodeMem=entry.getNodeMem();
      trgTuples=entry.getTrgTuples();
      if (node.getType() == NodeTypeEnums.QueryElementNode) {
        trgTuples.addAll(((QueryElementNodeMemory)nodeMem).getResultLeftTuples());
      }
      LeftTupleSinkNode sink=entry.getSink();
      rmem=entry.getRmem();
      smems=entry.getSmems();
      smemIndex=entry.getSmemIndex();
      visitedRules=entry.getVisitedRules();
      if (NodeTypeEnums.isBetaNode(node)) {
        processRian=false;
      }
 else {
        processRian=true;
      }
      if (entry.isResumeFromNextNode()) {
        SegmentMemory smem=smems[smemIndex];
        if (node != smem.getTipNode()) {
          LeftTupleSink nextSink=sink.getNextLeftTupleSinkNode();
          if (nextSink == null) {
            node=sink;
          }
 else {
            node=nextSink;
          }
          nodeMem=nodeMem.getNext();
        }
 else {
          SegmentPropagator.propagate(smem,trgTuples,wm);
          smem=smems[++smemIndex];
          trgTuples=smem.getStagedLeftTuples();
          node=(LeftTupleSink)smem.getRootNode();
          nodeMem=smem.getNodeMemories().getFirst();
        }
      }
      if (log.isTraceEnabled()) {
        int offset=getOffset(node);
        log.trace("{} Resume {} {}",indent(offset),node.toString(),trgTuples.toStringSizes());
      }
    }
 else {
      return;
    }
  }
}
