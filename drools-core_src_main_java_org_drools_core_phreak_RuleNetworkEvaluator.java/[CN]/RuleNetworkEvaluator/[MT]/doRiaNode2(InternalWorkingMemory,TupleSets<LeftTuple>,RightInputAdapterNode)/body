{
  ObjectSink[] sinks=riaNode.getObjectSinkPropagator().getSinks();
  BetaNode betaNode=(BetaNode)sinks[0];
  BetaMemory bm;
  Memory nodeMem=wm.getNodeMemory(betaNode);
  if (NodeTypeEnums.AccumulateNode == betaNode.getType()) {
    bm=((AccumulateMemory)nodeMem).getBetaMemory();
  }
 else {
    bm=(BetaMemory)nodeMem;
  }
  TupleSets<RightTuple> rightTuples=bm.getStagedRightTuples();
  BetaNode[] bns=null;
  BetaMemory[] bms=null;
  int length=sinks.length;
  if (length > 1) {
    bns=new BetaNode[sinks.length - 1];
    bms=new BetaMemory[sinks.length - 1];
    for (int i=1; i < length; i++) {
      bns[i - 1]=(BetaNode)sinks[i];
      Memory nodeMem2=wm.getNodeMemory(bns[i - 1]);
      if (NodeTypeEnums.AccumulateNode == betaNode.getType()) {
        bms[i - 1]=((AccumulateMemory)nodeMem2).getBetaMemory();
      }
 else {
        bms[i - 1]=(BetaMemory)nodeMem2;
      }
    }
  }
  length--;
  for (LeftTuple leftTuple=srcTuples.getInsertFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    if (bm.getStagedRightTuples().isEmpty()) {
      bm.setNodeDirtyWithoutNotify();
    }
    leftTuple.clearStaged();
    rightTuples.addInsert((RightTuple)leftTuple);
    ((SubnetworkTuple)leftTuple).setStagedOnRight(true);
    if (bns != null) {
      for (int i=0; i < length; i++) {
        if (bms[i].getStagedRightTuples().isEmpty()) {
          bms[i].setNodeDirtyWithoutNotify();
        }
        leftTuple=riaNode.createPeer(leftTuple);
        bms[i].getStagedRightTuples().addInsert((RightTuple)leftTuple);
      }
    }
    leftTuple=next;
  }
  for (LeftTuple leftTuple=srcTuples.getDeleteFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    if (rightTuples.isEmpty()) {
      bm.setNodeDirtyWithoutNotify();
    }
    leftTuple.clearStaged();
    rightTuples.addDelete((RightTuple)leftTuple);
    ((SubnetworkTuple)leftTuple).setStagedOnRight(true);
    if (bns != null) {
      for (int i=0; i < length; i++) {
        leftTuple=leftTuple.getPeer();
        if (bms[i].getStagedRightTuples().isEmpty()) {
          bms[i].setNodeDirtyWithoutNotify();
        }
        leftTuple.clearStaged();
        bms[i].getStagedRightTuples().addDelete((RightTuple)leftTuple);
      }
    }
    leftTuple=next;
  }
  for (LeftTuple leftTuple=srcTuples.getUpdateFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    if (rightTuples.isEmpty()) {
      bm.setNodeDirtyWithoutNotify();
    }
    leftTuple.clearStaged();
    rightTuples.addUpdate((RightTuple)leftTuple);
    ((SubnetworkTuple)leftTuple).setStagedOnRight(true);
    if (bns != null) {
      for (int i=0; i < length; i++) {
        leftTuple=leftTuple.getPeer();
        if (bms[i].getStagedRightTuples().isEmpty()) {
          bms[i].setNodeDirtyWithoutNotify();
        }
        leftTuple.clearStaged();
        bms[i].getStagedRightTuples().addUpdate((RightTuple)leftTuple);
      }
    }
    leftTuple=next;
  }
  srcTuples.resetAll();
}
