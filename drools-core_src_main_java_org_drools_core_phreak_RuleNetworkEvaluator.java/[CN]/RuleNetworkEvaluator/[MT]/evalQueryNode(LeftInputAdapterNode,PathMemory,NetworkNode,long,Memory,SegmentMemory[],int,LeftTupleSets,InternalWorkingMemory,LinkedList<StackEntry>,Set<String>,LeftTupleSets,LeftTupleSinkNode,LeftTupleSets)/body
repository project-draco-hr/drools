{
  QueryElementNodeMemory qmem=(QueryElementNodeMemory)nodeMem;
  if (srcTuples.isEmpty() && qmem.getResultLeftTuples().isEmpty()) {
    return false;
  }
  QueryElementNode qnode=(QueryElementNode)node;
  if (visitedRules == Collections.<String>emptySet()) {
    visitedRules=new HashSet<String>();
  }
  if (log.isTraceEnabled()) {
    int offset=getOffset(node);
    log.trace("{} query result tuples {}",indent(offset),qmem.getResultLeftTuples().toStringSizes());
  }
  visitedRules.add(qnode.getQueryElement().getQueryName());
  trgTuples.addAll(qmem.getResultLeftTuples());
  qmem.setNodeCleanWithoutNotify();
  if (!srcTuples.isEmpty()) {
    StackEntry stackEntry=new StackEntry(liaNode,node,bit,sink,pmem,nodeMem,smems,smemIndex,trgTuples,visitedRules,true,true);
    stack.add(stackEntry);
    pQueryNode.doNode(qnode,(QueryElementNodeMemory)nodeMem,stackEntry,sink,wm,srcTuples,trgTuples,stagedLeftTuples);
    SegmentMemory qsmem=((QueryElementNodeMemory)nodeMem).getQuerySegmentMemory();
    List<PathMemory> qpmems=qsmem.getPathMemories();
    for (int i=0; i < qpmems.size(); i++) {
      PathMemory qpmem=qpmems.get(i);
      pmem=qpmem;
      smems=qpmem.getSegmentMemories();
      smemIndex=0;
      SegmentMemory smem=smems[smemIndex];
      liaNode=(LeftInputAdapterNode)smem.getRootNode();
      if (liaNode == smem.getTipNode()) {
        smem=smems[++smemIndex];
        node=smem.getRootNode();
        nodeMem=smem.getNodeMemories().getFirst();
        bit=1;
      }
 else {
        node=liaNode.getSinkPropagator().getFirstLeftTupleSink();
        nodeMem=smem.getNodeMemories().getFirst().getNext();
        bit=2;
      }
      trgTuples=smem.getStagedLeftTuples().takeAll();
      stackEntry=new StackEntry(liaNode,node,bit,null,pmem,nodeMem,smems,smemIndex,trgTuples,visitedRules,false,true);
      if (log.isTraceEnabled()) {
        int offset=getOffset(stackEntry.getNode());
        log.trace("{} ORQueue branch={} {} {}",indent(offset),i,stackEntry.getNode().toString(),trgTuples.toStringSizes());
      }
      stack.add(stackEntry);
    }
    return true;
  }
 else {
    return false;
  }
}
