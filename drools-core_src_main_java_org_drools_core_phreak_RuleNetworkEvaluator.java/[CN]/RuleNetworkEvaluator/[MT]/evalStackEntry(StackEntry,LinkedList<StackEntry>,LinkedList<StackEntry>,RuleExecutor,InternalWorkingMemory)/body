{
  NetworkNode node=entry.getNode();
  Memory nodeMem=entry.getNodeMem();
  LeftTupleSets trgTuples=entry.getTrgTuples();
  if (node.getType() == NodeTypeEnums.QueryElementNode) {
    QueryElementNodeMemory qmem=(QueryElementNodeMemory)nodeMem;
    qmem.setNodeCleanWithoutNotify();
    trgTuples.addAll(qmem.getResultLeftTuples());
  }
  LeftTupleSinkNode sink=entry.getSink();
  PathMemory pmem=entry.getRmem();
  SegmentMemory[] smems=entry.getSmems();
  int smemIndex=entry.getSmemIndex();
  Set<String> visitedRules=entry.getVisitedRules();
  boolean processRian;
  if (NodeTypeEnums.isBetaNode(node)) {
    processRian=false;
  }
 else {
    processRian=true;
  }
  long bit=entry.getBit();
  if (entry.isResumeFromNextNode()) {
    SegmentMemory smem=smems[smemIndex];
    if (node != smem.getTipNode()) {
      LeftTupleSink nextSink=sink.getNextLeftTupleSinkNode();
      if (nextSink == null) {
        node=sink;
      }
 else {
        node=nextSink;
      }
      nodeMem=nodeMem.getNext();
      bit=bit << 1;
    }
 else {
      SegmentPropagator.propagate(smem,trgTuples,wm);
      smem=smems[++smemIndex];
      trgTuples=smem.getStagedLeftTuples().takeAll();
      node=smem.getRootNode();
      nodeMem=smem.getNodeMemories().getFirst();
      bit=1;
    }
  }
  if (log.isTraceEnabled()) {
    int offset=getOffset(node);
    log.trace("{} Resume {} {}",indent(offset),node.toString(),trgTuples.toStringSizes());
  }
  innerEval(entry.getLiaNode(),pmem,node,bit,nodeMem,smems,smemIndex,trgTuples,wm,stack,outerStack,visitedRules,processRian,executor);
}
