{
  LeftTupleSets srcTuples;
  SegmentMemory smem=smems[smemIndex];
  while (true) {
    srcTuples=trgTuples;
    if (log.isTraceEnabled()) {
      int offset=getOffset(node);
      log.trace("{} {} {} {}",indent(offset),++cycle,node.toString(),srcTuples.toStringSizes());
    }
    if (NodeTypeEnums.isTerminalNode(node)) {
      TerminalNode rtn=(TerminalNode)node;
      if (node.getType() == NodeTypeEnums.QueryTerminalNode) {
        pQtNode.doNode((QueryTerminalNode)rtn,wm,srcTuples,stack);
      }
 else {
        pRtNode.doNode(rtn,wm,srcTuples,executor);
      }
      return;
    }
 else     if (NodeTypeEnums.RightInputAdaterNode == node.getType()) {
      doRiaNode2(wm,srcTuples,(RightInputAdapterNode)node,stack);
      return;
    }
    LeftTupleSets stagedLeftTuples=getStagedLeftTuples(node,wm,smem);
    LeftTupleSinkNode sink=((LeftTupleSource)node).getSinkPropagator().getFirstLeftTupleSink();
    trgTuples=new LeftTupleSetsImpl();
    if (NodeTypeEnums.isBetaNode(node)) {
      boolean exitInnerEval=evalBetaNode(liaNode,pmem,node,nodeMem,smems,smemIndex,trgTuples,wm,stack,outerStack,visitedRules,processRian,executor,srcTuples,stagedLeftTuples,sink);
      if (exitInnerEval) {
        return;
      }
    }
 else {
switch (node.getType()) {
case NodeTypeEnums.EvalConditionNode:
{
          if (stagedLeftTuples != null) {
synchronized (stagedLeftTuples) {
              pEvalNode.doNode((EvalConditionNode)node,(EvalMemory)nodeMem,sink,wm,srcTuples,trgTuples,stagedLeftTuples);
            }
          }
 else {
            pEvalNode.doNode((EvalConditionNode)node,(EvalMemory)nodeMem,sink,wm,srcTuples,trgTuples,stagedLeftTuples);
          }
          break;
        }
case NodeTypeEnums.FromNode:
{
        if (stagedLeftTuples != null) {
synchronized (stagedLeftTuples) {
            pFromNode.doNode((FromNode)node,(FromMemory)nodeMem,sink,wm,srcTuples,trgTuples,stagedLeftTuples);
          }
        }
 else {
          pFromNode.doNode((FromNode)node,(FromMemory)nodeMem,sink,wm,srcTuples,trgTuples,stagedLeftTuples);
        }
        break;
      }
case NodeTypeEnums.QueryElementNode:
{
      boolean exitInnerEval=evalQueryNode(liaNode,pmem,node,nodeMem,smems,smemIndex,trgTuples,wm,stack,visitedRules,srcTuples,sink);
      if (exitInnerEval) {
        return;
      }
      break;
    }
case NodeTypeEnums.TimerConditionNode:
{
    if (stagedLeftTuples != null) {
synchronized (stagedLeftTuples) {
        pTimerNode.doNode((TimerNode)node,(TimerNodeMemory)nodeMem,pmem,sink,wm,srcTuples,trgTuples,stagedLeftTuples);
      }
    }
 else {
      pTimerNode.doNode((TimerNode)node,(TimerNodeMemory)nodeMem,pmem,sink,wm,srcTuples,trgTuples,stagedLeftTuples);
    }
    break;
  }
case NodeTypeEnums.ConditionalBranchNode:
{
  if (stagedLeftTuples != null) {
synchronized (stagedLeftTuples) {
      pBranchNode.doNode((ConditionalBranchNode)node,(ConditionalBranchMemory)nodeMem,sink,wm,srcTuples,trgTuples,stagedLeftTuples,executor);
    }
  }
 else {
    pBranchNode.doNode((ConditionalBranchNode)node,(ConditionalBranchMemory)nodeMem,sink,wm,srcTuples,trgTuples,stagedLeftTuples,executor);
  }
  break;
}
}
}
if (node != smem.getTipNode()) {
node=sink;
nodeMem=nodeMem.getNext();
}
 else {
synchronized (stagedLeftTuples) {
SegmentPropagator.propagate(smem,trgTuples,wm);
smem=smems[++smemIndex];
trgTuples=smem.getStagedLeftTuples().takeAll();
}
if (log.isTraceEnabled()) {
int offset=getOffset(node);
log.trace("{} Segment {}",indent(offset),smemIndex);
}
node=(LeftTupleSink)smem.getRootNode();
nodeMem=smem.getNodeMemories().getFirst();
}
processRian=true;
}
}
