{
  SegmentMemory[] smems=pmem.getSegmentMemories();
  int smemIndex=0;
  SegmentMemory smem=smems[smemIndex];
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)smem.getRootNode();
  Set<String> visitedRules;
  if (pmem.getNetworkNode().getType() == NodeTypeEnums.QueryTerminalNode) {
    visitedRules=new HashSet<String>();
  }
 else {
    visitedRules=Collections.emptySet();
  }
  LinkedList<StackEntry> stack=new LinkedList<StackEntry>();
  NetworkNode node;
  Memory nodeMem;
  long bit=1;
  if (liaNode == smem.getTipNode()) {
    smem=smems[++smemIndex];
    node=smem.getRootNode();
    nodeMem=smem.getNodeMemories().getFirst();
  }
 else {
    bit=2;
    node=liaNode.getSinkPropagator().getFirstLeftTupleSink();
    nodeMem=smem.getNodeMemories().getFirst().getNext();
  }
  LeftTupleSets srcTuples=smem.getStagedLeftTuples();
  if (log.isTraceEnabled()) {
    log.trace("Rule[name={}] segments={} {}",((TerminalNode)pmem.getNetworkNode()).getRule().getName(),smems.length,srcTuples.toStringSizes());
  }
  outerEval(liaNode,pmem,node,bit,nodeMem,smems,smemIndex,srcTuples,wm,stack,outerStack,visitedRules,true,executor);
}
