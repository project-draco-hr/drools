{
  RightTupleMemory rtm=bm.getRightTupleMemory();
  boolean resumeFromCurrent=!(betaNode.isIndexedUnificationJoin() || rtm.getIndexType().isComparison());
  for (RightTuple rightTuple=srcRightTuples.getUpdateFirst(); rightTuple != null; ) {
    RightTuple next=rightTuple.getStagedNext();
    if (rightTuple.getMemory() != null) {
      if (resumeFromCurrent) {
        RightTupleMemory currentRtm=rightTuple.getMemory();
        RightTuple tempRightTuple=(RightTuple)rightTuple.getPrevious();
        while (tempRightTuple != null && tempRightTuple.getStagedType() != LeftTuple.NONE) {
          tempRightTuple=(RightTuple)tempRightTuple.getPrevious();
        }
        ;
        rtm.removeAdd(rightTuple);
        if (tempRightTuple == null && rightTuple.getMemory() == currentRtm) {
          tempRightTuple=rightTuple;
        }
        if (tempRightTuple != null && tempRightTuple.getPrevious() != null) {
          RightTuple existingTempRightTuple=((RightTuple)tempRightTuple.getPrevious()).getTempNextRightTuple();
          if (existingTempRightTuple != null) {
            tempRightTuple=existingTempRightTuple;
          }
        }
        rightTuple.setTempNextRightTuple(tempRightTuple);
      }
 else {
        rtm.removeAdd(rightTuple);
      }
      for (LeftTuple childLeftTuple=rightTuple.getFirstChild(); childLeftTuple != null; ) {
        LeftTuple childNext=childLeftTuple.getRightParentNext();
        childLeftTuple.reAddLeft();
        childLeftTuple=childNext;
      }
    }
    rightTuple=next;
  }
}
