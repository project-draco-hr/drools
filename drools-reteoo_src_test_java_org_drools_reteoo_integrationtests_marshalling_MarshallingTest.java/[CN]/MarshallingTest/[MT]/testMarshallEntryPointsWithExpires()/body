{
  String str="package org.domain.test \n" + "import " + getClass().getCanonicalName() + ".*\n"+ "global java.util.List list\n"+ "declare A\n"+ " @role( event )\n"+ " @expires( 10s )\n"+ "end\n"+ "declare B\n"+ ""+ " @role( event )\n"+ " @expires( 10s )\n"+ "end\n"+ ""+ "declare C\n"+ " @role( event )\n"+ " @expires( 15s )\n"+ "end\n"+ ""+ "rule a1\n"+ "when\n"+ "   $a : A() from entry-point 'a-ep'\n"+ "then\n"+ "list.add( $a );"+ "end\n"+ ""+ "rule b1\n"+ "when\n"+ "   $b : B() from entry-point 'b-ep'\n"+ "then\n"+ "list.add( $b );"+ "end\n"+ ""+ "rule c1\n"+ "when\n"+ "   $c : C() from entry-point 'c-ep'\n"+ "then\n"+ "list.add( $c );"+ "end\n";
  KieBaseConfiguration config=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  config.setOption(EventProcessingOption.STREAM);
  KnowledgeBase kBase=loadKnowledgeBaseFromString(config,str);
  KieSessionConfiguration ksconf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  ksconf.setOption(ClockTypeOption.get("pseudo"));
  ksconf.setOption(TimerJobFactoryOption.get("trackable"));
  KieSession ksession=kBase.newStatefulKnowledgeSession(ksconf,null);
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  EntryPoint aep=ksession.getEntryPoint("a-ep");
  aep.insert(new A());
  ksession=marsallStatefulKnowledgeSession(ksession);
  EntryPoint bep=ksession.getEntryPoint("b-ep");
  bep.insert(new B());
  ksession=marsallStatefulKnowledgeSession(ksession);
  EntryPoint cep=ksession.getEntryPoint("c-ep");
  cep.insert(new C());
  ksession=marsallStatefulKnowledgeSession(ksession);
  ksession.fireAllRules();
  ksession=marsallStatefulKnowledgeSession(ksession);
  assertEquals(3,list.size());
  aep=ksession.getEntryPoint("a-ep");
  assertEquals(1,aep.getFactHandles().size());
  bep=ksession.getEntryPoint("b-ep");
  assertEquals(1,bep.getFactHandles().size());
  cep=ksession.getEntryPoint("c-ep");
  assertEquals(1,cep.getFactHandles().size());
  PseudoClockScheduler timeService=(PseudoClockScheduler)ksession.<SessionClock>getSessionClock();
  timeService.advanceTime(11,TimeUnit.SECONDS);
  ksession=marsallStatefulKnowledgeSession(ksession);
  ksession.fireAllRules();
  ksession=marsallStatefulKnowledgeSession(ksession);
  aep=ksession.getEntryPoint("a-ep");
  assertEquals(0,aep.getFactHandles().size());
  bep=ksession.getEntryPoint("b-ep");
  assertEquals(0,bep.getFactHandles().size());
  cep=ksession.getEntryPoint("c-ep");
  assertEquals(1,cep.getFactHandles().size());
}
