{
  Collection<KnowledgePackage> kpkgs=loadKnowledgePackages("../test_Dynamic1_0.drl");
  kpkgs=SerializationHelper.serializeObject(kpkgs);
  KnowledgeBase kBase=getKnowledgeBase();
  kBase.addKnowledgePackages(kpkgs);
  kBase=SerializationHelper.serializeObject(kBase);
  List results=new ArrayList();
  StatefulKnowledgeSession session=kBase.newStatefulKnowledgeSession();
  session.setGlobal("results",results);
  InternalFactHandle stilton1=(InternalFactHandle)session.insert(new Cheese("stilton",10));
  InternalFactHandle brie1=(InternalFactHandle)session.insert(new Cheese("brie",10));
  session.fireAllRules();
  assertEquals(1,results.size());
  assertEquals(stilton1.getObject(),results.get(0));
  kBase=(KnowledgeBase)SerializationHelper.serializeObject(kBase);
  session=SerializationHelper.getSerialisedStatefulKnowledgeSession(session,kBase,true);
  kpkgs=loadKnowledgePackages("../test_Dynamic3_0.drl");
  kBase.addKnowledgePackages(SerializationHelper.serializeObject(kpkgs));
  kBase=(KnowledgeBase)SerializationHelper.serializeObject(kBase);
  session=SerializationHelper.getSerialisedStatefulKnowledgeSession(session,kBase,true);
  results.clear();
  InternalFactHandle stilton2=(InternalFactHandle)session.insert(new Cheese("stilton",20));
  InternalFactHandle brie2=(InternalFactHandle)session.insert(new Cheese("brie",20));
  InternalFactHandle bob1=(InternalFactHandle)session.insert(new Person("bob",20));
  InternalFactHandle bob2=(InternalFactHandle)session.insert(new Person("bob",30));
  session.fireAllRules();
  assertEquals(3,results.size());
  assertEquals(stilton2.getObject(),results.get(0));
  assertEquals(bob2.getObject(),results.get(1));
  assertEquals(bob1.getObject(),results.get(2));
  kBase=(KnowledgeBase)SerializationHelper.serializeObject(kBase);
  session=SerializationHelper.getSerialisedStatefulKnowledgeSession(session,kBase,true);
  results.clear();
  kBase.removeRule("org.drools.compiler.test","like stilton");
  InternalFactHandle stilton3=(InternalFactHandle)session.insert(new Cheese("stilton",20));
  InternalFactHandle brie3=(InternalFactHandle)session.insert(new Cheese("brie",20));
  InternalFactHandle bob3=(InternalFactHandle)session.insert(new Person("bob",20));
  InternalFactHandle bob4=(InternalFactHandle)session.insert(new Person("bob",30));
  session.fireAllRules();
  assertEquals(2,results.size());
  assertEquals(bob4.getObject(),results.get(0));
  assertEquals(bob3.getObject(),results.get(1));
  kBase=(KnowledgeBase)SerializationHelper.serializeObject(kBase);
  session=SerializationHelper.getSerialisedStatefulKnowledgeSession(session,kBase,true);
  results.clear();
  kBase.removeKnowledgePackage("org.drools.compiler.test");
  InternalFactHandle stilton4=(InternalFactHandle)session.insert(new Cheese("stilton",20));
  InternalFactHandle brie4=(InternalFactHandle)session.insert(new Cheese("brie",20));
  InternalFactHandle bob5=(InternalFactHandle)session.insert(new Person("bob",20));
  InternalFactHandle bob6=(InternalFactHandle)session.insert(new Person("bob",30));
  session.fireAllRules();
  assertEquals(2,results.size());
  assertEquals(bob6.getObject(),results.get(0));
  assertEquals(bob5.getObject(),results.get(1));
  kBase=(KnowledgeBase)SerializationHelper.serializeObject(kBase);
  session=SerializationHelper.getSerialisedStatefulKnowledgeSession(session,kBase,true);
  results.clear();
  session.setGlobal("results",results);
  InternalFactHandle stilton5=(InternalFactHandle)session.insert(new Cheese("stilton",30));
  InternalFactHandle brie5=(InternalFactHandle)session.insert(new Cheese("brie",30));
  InternalFactHandle bob7=(InternalFactHandle)session.insert(new Person("bob",30));
  InternalFactHandle bob8=(InternalFactHandle)session.insert(new Person("bob",40));
  session.fireAllRules();
  assertEquals(2,results.size());
  assertEquals(bob8.getObject(),results.get(0));
  assertEquals(bob7.getObject(),results.get(1));
  kBase=(KnowledgeBase)SerializationHelper.serializeObject(kBase);
  session=SerializationHelper.getSerialisedStatefulKnowledgeSession(session,kBase,true);
  session.dispose();
}
