{
  super.internalTrigger(from,type);
  if (!org.drools.workflow.core.Node.CONNECTION_DEFAULT_TYPE.equals(type)) {
    throw new IllegalArgumentException("A SubProcess node only accepts default incoming connections!");
  }
  Map<String,Object> parameters=new HashMap<String,Object>();
  for (  Map.Entry<String,String> mapping : getSubProcessNode().getInMappings().entrySet()) {
    Object parameterValue=null;
    VariableScopeInstance variableScopeInstance=(VariableScopeInstance)resolveContextInstance(VariableScope.VARIABLE_SCOPE,mapping.getValue());
    if (variableScopeInstance != null) {
      parameterValue=variableScopeInstance.getVariable(mapping.getValue());
    }
 else {
      try {
        parameterValue=MVEL.eval(mapping.getValue(),new NodeInstanceResolverFactory(this));
      }
 catch (      Throwable t) {
        System.err.println("Could not find variable scope for variable " + mapping.getValue());
        System.err.println("when trying to execute SubProcess node " + getSubProcessNode().getName());
        System.err.println("Continuing without setting parameter.");
      }
    }
    if (parameterValue != null) {
      parameters.put(mapping.getKey(),parameterValue);
    }
  }
  String processId=getSubProcessNode().getProcessId();
  Map<String,String> replacements=new HashMap<String,String>();
  Matcher matcher=PARAMETER_MATCHER.matcher(processId);
  while (matcher.find()) {
    String paramName=matcher.group(1);
    if (replacements.get(paramName) == null) {
      VariableScopeInstance variableScopeInstance=(VariableScopeInstance)resolveContextInstance(VariableScope.VARIABLE_SCOPE,paramName);
      if (variableScopeInstance != null) {
        Object variableValue=variableScopeInstance.getVariable(paramName);
        String variableValueString=variableValue == null ? "" : variableValue.toString();
        replacements.put(paramName,variableValueString);
      }
 else {
        try {
          Object variableValue=MVEL.eval(paramName,new NodeInstanceResolverFactory(this));
          String variableValueString=variableValue == null ? "" : variableValue.toString();
          replacements.put(paramName,variableValueString);
        }
 catch (        Throwable t) {
          System.err.println("Could not find variable scope for variable " + paramName);
          System.err.println("when trying to replace variable in processId for sub process " + getNodeName());
          System.err.println("Continuing without setting process id.");
        }
      }
    }
  }
  for (  Map.Entry<String,String> replacement : replacements.entrySet()) {
    processId=processId.replace("#{" + replacement.getKey() + "}",replacement.getValue());
  }
  Process process=((InternalRuleBase)((ProcessInstance)getProcessInstance()).getWorkingMemory().getRuleBase()).getProcess(processId);
  if (process == null) {
    System.err.println("Could not find process " + processId);
    System.err.println("Aborting process");
    ((ProcessInstance)getProcessInstance()).setState(ProcessInstance.STATE_ABORTED);
  }
 else {
    ProcessInstance processInstance=(ProcessInstance)((ProcessInstance)getProcessInstance()).getWorkingMemory().startProcess(processId,parameters);
    if (!getSubProcessNode().isWaitForCompletion() || processInstance.getState() == ProcessInstance.STATE_COMPLETED) {
      triggerCompleted();
    }
 else {
      this.processInstanceId=processInstance.getId();
      addProcessListener();
    }
  }
}
