{
  KieSession session=getStatelessKieSession(this.getClass().getResourceAsStream("Patterns.drl"));
  VerifierReport result=VerifierReportFactory.newVerifierReport();
  Collection<? extends Object> testData=getTestData(this.getClass().getResourceAsStream("PatternsTest.drl"),result.getVerifierData());
  session.setGlobal("result",result);
  for (  Object o : testData) {
    session.insert(o);
  }
  session.fireAllRules(new RuleNameMatchesAgendaFilter("Incoherent Patterns in rule possibility, ranges when not conflicts with equal variable"));
  Iterator<VerifierMessageBase> iter=result.getBySeverity(Severity.WARNING).iterator();
  Set<String> rulesThatHadErrors=new HashSet<String>();
  while (iter.hasNext()) {
    Object o=iter.next();
    if (o instanceof VerifierMessage) {
      VerifierRule rule=(VerifierRule)((VerifierMessage)o).getFaulty();
      rulesThatHadErrors.add(rule.getName());
    }
  }
  assertTrue(rulesThatHadErrors.remove("Incoherent patterns 13"));
  if (!rulesThatHadErrors.isEmpty()) {
    for (    String string : rulesThatHadErrors) {
      fail("Rule " + string + " caused an error.");
    }
  }
}
