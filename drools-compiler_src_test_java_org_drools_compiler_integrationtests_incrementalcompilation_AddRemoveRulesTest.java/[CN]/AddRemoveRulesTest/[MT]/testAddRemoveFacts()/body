{
  final String rule1=" package " + PKG_NAME_TEST + ";\n"+ " global java.util.List list\n"+ " rule "+ RULE1_NAME+ " \n"+ " when \n"+ "   Integer() \n"+ "   not(not(Integer() and Integer())) \n"+ " then\n"+ "   list.add('"+ RULE1_NAME+ "'); \n"+ " end";
  final String rule2=" package " + PKG_NAME_TEST + ";\n"+ " global java.util.List list\n"+ " rule "+ RULE2_NAME+ " \n"+ " when \n"+ "   Integer() \n"+ "   exists(Integer() and Integer()) \n"+ " then\n"+ "   list.add('"+ RULE2_NAME+ "'); \n"+ " end";
  final List resultsList=new ArrayList();
  final Map<String,Object> globals=new HashMap<String,Object>();
  globals.put("list",resultsList);
  final TestContext context=new TestContext(PKG_NAME_TEST,globals,resultsList);
  final AddRemoveTestBuilder builder=new AddRemoveTestBuilder();
  builder.addOperation(TestOperationType.CREATE_SESSION,new String[]{rule1,rule2}).addOperation(TestOperationType.INSERT_FACTS,new Object[]{1});
  context.executeTestOperations(builder.build());
  builder.clear();
  final Set<FactHandle> sessionFacts=context.getActualSessionFactHandles();
  builder.addOperation(TestOperationType.REMOVE_RULES,new String[]{RULE2_NAME,RULE1_NAME}).addOperation(TestOperationType.FIRE_RULES).addOperation(TestOperationType.CHECK_RESULTS,new String[]{}).addOperation(TestOperationType.REMOVE_FACTS,sessionFacts.toArray(new FactHandle[]{})).addOperation(TestOperationType.FIRE_RULES).addOperation(TestOperationType.CHECK_RESULTS,new String[]{});
  context.executeTestOperations(builder.build());
}
