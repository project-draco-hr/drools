{
  RulesRepository repo=getRepo();
  PackageItem pkg=repo.createPackage("testPackageSnapshot","this is something");
  assertFalse(pkg.isSnapshot());
  AssetItem it1=pkg.addAsset("testPackageCopy1","la");
  AssetItem it2=pkg.addAsset("testPackageCopy2","la");
  it1.updateContent("new content");
  it1.updateFormat("drl");
  it2.updateContent("more content");
  it2.updateFormat("drl");
  it1.checkin("c");
  it2.checkin("c");
  long ver1=it1.getVersionNumber();
  long ver2=it2.getVersionNumber();
  assertFalse(ver1 == 0);
  assertEquals(2,iteratorToList(pkg.listAssetsByFormat(new String[]{"drl"})).size());
  repo.createPackageSnapshot("testPackageSnapshot","PROD 2.0");
  PackageItem pkgLoaded=repo.loadPackageSnapshot("testPackageSnapshot","PROD 2.0");
  assertTrue(pkgLoaded.isSnapshot());
  assertEquals("PROD 2.0",pkgLoaded.getSnapshotName());
  assertEquals("testPackageSnapshot",pkgLoaded.getName());
  PackageItem _pkgLoaded=repo.loadPackageByUUID(pkgLoaded.getUUID());
  assertNotNull(_pkgLoaded);
  assertEquals(pkgLoaded.getCreatedDate(),_pkgLoaded.getCreatedDate());
  assertEquals(pkgLoaded.getName(),_pkgLoaded.getName());
  List loadedAssets=iteratorToList(pkgLoaded.getAssets());
  List _loadedAssets=iteratorToList(_pkgLoaded.getAssets());
  assertEquals(loadedAssets.size(),_loadedAssets.size());
  it1.updateContent("XXX");
  it1.checkin("X");
  assertFalse(it1.getVersionNumber() == ver1);
  AssetItem it3=pkg.addAsset("testPackageCopy3","x");
  it3.updateFormat("drl");
  it3.checkin("a");
  assertEquals(3,iteratorToList(pkg.listAssetsByFormat(new String[]{"drl"})).size());
  PackageItem pkg2=repo.loadPackageSnapshot("testPackageSnapshot","PROD 2.0");
  assertNotNull(pkg2);
  List snapAssets=iteratorToList(pkg2.getAssets());
  assertEquals(2,snapAssets.size());
  assertFalse(pkg2.getUUID().equals(pkg.getUUID()));
  assertTrue(snapAssets.get(0) instanceof AssetItem);
  assertTrue(snapAssets.get(1) instanceof AssetItem);
  AssetItem sn1=(AssetItem)snapAssets.get(0);
  AssetItem sn2=(AssetItem)snapAssets.get(1);
  assertEquals("la",sn1.getDescription());
  assertEquals("la",sn2.getDescription());
  assertEquals(ver1,sn1.getVersionNumber());
  assertEquals(ver2,sn2.getVersionNumber());
  assertEquals(2,iteratorToList(pkg2.listAssetsByFormat(new String[]{"drl"})).size());
  String[] res=repo.listPackageSnapshots("testPackageSnapshot");
  assertEquals(1,res.length);
  assertEquals("PROD 2.0",res[0]);
  res=repo.listPackageSnapshots("does not exist");
  assertEquals(0,res.length);
  repo.removePackageSnapshot("testPackageSnapshot","XX");
  try {
    repo.removePackageSnapshot("NOTHING SENSIBLE","XX");
    fail("should not be able to remove this.");
  }
 catch (  RulesRepositoryException e) {
    assertNotNull(e.getMessage());
  }
  repo.removePackageSnapshot("testPackageSnapshot","PROD 2.0");
  repo.save();
  res=repo.listPackageSnapshots("testPackageSnapshot");
  assertEquals(0,res.length);
  repo.createPackageSnapshot("testPackageSnapshot","BOO");
  res=repo.listPackageSnapshots("testPackageSnapshot");
  assertEquals(1,res.length);
  repo.copyPackageSnapshot("testPackageSnapshot","BOO","BOO2");
  res=repo.listPackageSnapshots("testPackageSnapshot");
  assertEquals(2,res.length);
  repo.copyPackageSnapshot("testPackageSnapshot","BOO","BOO2");
  res=repo.listPackageSnapshots("testPackageSnapshot");
  assertEquals(2,res.length);
  assertEquals("BOO",res[0]);
  assertEquals("BOO2",res[1]);
}
