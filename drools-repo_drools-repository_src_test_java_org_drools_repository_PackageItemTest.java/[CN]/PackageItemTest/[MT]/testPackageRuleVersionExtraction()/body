{
  PackageItem pack=getRepo().createPackage("package extractor","foo");
  AssetItem rule1=pack.addAsset("rule number 1","yeah man");
  rule1.checkin("version0");
  AssetItem rule2=pack.addAsset("rule number 2","no way");
  rule2.checkin("version0");
  AssetItem rule3=pack.addAsset("rule number 3","yes way");
  rule3.checkin("version0");
  getRepo().save();
  pack=getRepo().loadPackage("package extractor");
  List rules=iteratorToList(pack.getAssets());
  assertEquals(3,rules.size());
  getRepo().createState("foobar");
  StateItem state=getRepo().getState("foobar");
  rule1.updateState("foobar");
  rule1.checkin("yeah");
  pack=getRepo().loadPackage("package extractor");
  rules=iteratorToList(pack.getAssetsWithStatus(state));
  assertEquals(1,rules.size());
  getRepo().createState("whee");
  rules=iteratorToList(pack.getAssetsWithStatus(getRepo().getState("whee")));
  assertEquals(0,rules.size());
  rules=iteratorToList(pack.getAssetsWithStatus(getRepo().getState(StateItem.DRAFT_STATE_NAME)));
  assertEquals(3,rules.size());
  rule1.updateContent("new content");
  getRepo().createState("extractorState");
  rule1.updateState("extractorState");
  rule1.checkin("latest");
  rules=iteratorToList(pack.getAssetsWithStatus(getRepo().getState("extractorState")));
  assertEquals(1,rules.size());
  AssetItem rule=(AssetItem)rules.get(0);
  assertEquals("new content",rule.getContent());
  getRepo().createState("foobar");
  rules=iteratorToList(pack.getAssetsWithStatus(getRepo().getState("foobar")));
  assertEquals(1,rules.size());
  AssetItem prior=(AssetItem)rules.get(0);
  assertFalse("new content".equals(prior.getContent()));
}
