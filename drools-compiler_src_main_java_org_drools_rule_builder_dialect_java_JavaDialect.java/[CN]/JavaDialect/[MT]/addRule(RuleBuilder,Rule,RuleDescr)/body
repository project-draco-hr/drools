{
  if (this.ruleClass == null) {
    return;
  }
  addClassCompileTask(this.pkg.getName() + "." + ruleDescr.getClassName(),ruleDescr,this.ruleClass,this.src,new RuleErrorHandler(ruleDescr,rule,"Rule Compilation error"));
  for (final Iterator it=builder.getInvokers().keySet().iterator(); it.hasNext(); ) {
    final String className=(String)it.next();
    final Object invoker=builder.getInvokerLookups().get(className);
    if (invoker != null) {
      this.pkg.getPackageCompilationData().putInvoker(className,invoker);
    }
    final String text=(String)builder.getInvokers().get(className);
    final BaseDescr descr=(BaseDescr)builder.getDescrLookups().get(className);
    addClassCompileTask(className,descr,text,this.src,new RuleInvokerErrorHandler(descr,rule,"Unable to generate rule invoker."));
  }
  final String name=this.pkg.getName() + "." + ucFirst(ruleDescr.getClassName());
  final LineMappings mapping=new LineMappings(name);
  mapping.setStartLine(ruleDescr.getConsequenceLine());
  mapping.setOffset(ruleDescr.getConsequenceOffset());
  this.lineMappings.put(name,mapping);
}
