{
  boolean declarativeAgendaEnabled=executor.isDeclarativeAgendaEnabled();
  InternalAgenda agenda=(InternalAgenda)wm.getAgenda();
  LeftTupleList tupleList=executor.getLeftTupleList();
  for (LeftTuple leftTuple=srcLeftTuples.getUpdateFirst(); leftTuple != null; ) {
    LeftTuple next=leftTuple.getStagedNext();
    boolean reAdd=true;
    AgendaItem item=null;
    if (declarativeAgendaEnabled && leftTuple.getObject() != null) {
      item=(AgendaItem)leftTuple.getObject();
      if (item.getBlockers() != null && !item.getBlockers().isEmpty()) {
        reAdd=false;
      }
    }
    if (reAdd && leftTuple.getMemory() == null) {
      if (rtnNode.getRule().isLockOnActive() && leftTuple.getPropagationContext().getType() != org.kie.api.runtime.rule.PropagationContext.RULE_ADDITION) {
        PropagationContext pctx=leftTuple.getPropagationContext();
        pctx=RuleTerminalNode.findMostRecentPropagationContext(leftTuple,pctx);
        long handleRecency=((InternalFactHandle)pctx.getFactHandle()).getRecency();
        InternalAgendaGroup agendaGroup=executor.getRuleAgendaItem().getAgendaGroup();
        if (blockedByLockOnActive(rtnNode.getRule(),agenda,pctx,handleRecency,agendaGroup)) {
          leftTuple.clearStaged();
          leftTuple=next;
          continue;
        }
      }
      tupleList.add(leftTuple);
    }
    if (!rtnNode.isFireDirect() && declarativeAgendaEnabled) {
      agenda.modifyActivation(item,item.isQueued());
    }
    leftTuple.clearStaged();
    leftTuple=next;
  }
}
