{
  if (leapsRule.containsEvalConditions() && !TokenEvaluator.evaluateEvalConditions(tuple,leapsRule,workingMemory)) {
    return false;
  }
  if (leapsRule.containsExistsColumns()) {
    TokenEvaluator.evaluateExistsConditions(tuple,leapsRule,workingMemory);
  }
  if (leapsRule.containsNotColumns()) {
    TokenEvaluator.evaluateNotConditions(tuple,leapsRule,workingMemory);
  }
  if (tuple.isReadyForActivation()) {
    workingMemory.assertTuple(tuple);
    return true;
  }
 else {
    final Class[] classes=leapsRule.getExistsNotColumnsClasses();
    for (int i=0, length=classes.length; i < length; i++) {
      workingMemory.getFactTable(classes[i]).addTuple(tuple);
    }
    return false;
  }
}
