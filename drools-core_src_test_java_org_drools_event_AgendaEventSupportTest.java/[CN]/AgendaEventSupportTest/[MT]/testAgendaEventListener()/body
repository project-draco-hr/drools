{
  RuleBase rb=RuleBaseFactory.newRuleBase();
  Package pkg=new Package("org.drools.test");
  Rule rule=new Rule("test1");
  rule.setAgendaGroup("test group");
  ClassObjectType cheeseObjectType=new ClassObjectType(Cheese.class);
  Column column=new Column(0,cheeseObjectType);
  ClassFieldExtractor extractor=new ClassFieldExtractor(Cheese.class,"type");
  FieldValue field=FieldFactory.getFieldValue("cheddar");
  Evaluator evaluator=ValueType.STRING_TYPE.getEvaluator(Operator.EQUAL);
  LiteralConstraint constraint=new LiteralConstraint(extractor,evaluator,field);
  column.addConstraint(constraint);
  rule.addPattern(column);
  rule.setConsequence(new Consequence(){
    public void evaluate(    KnowledgeHelper knowledgeHelper,    WorkingMemory workingMemory) throws Exception {
    }
  }
);
  pkg.addRule(rule);
  rb.addPackage(pkg);
  WorkingMemory wm=rb.newWorkingMemory();
  final List agendaList=new ArrayList();
  AgendaEventListener agendaEventListener=new AgendaEventListener(){
    public void activationCancelled(    ActivationCancelledEvent event,    WorkingMemory workingMemory){
      agendaList.add(event);
    }
    public void activationCreated(    ActivationCreatedEvent event,    WorkingMemory workingMemory){
      agendaList.add(event);
    }
    public void afterActivationFired(    AfterActivationFiredEvent event,    WorkingMemory workingMemory){
      agendaList.add(event);
    }
    public void agendaGroupPopped(    AgendaGroupPoppedEvent event,    WorkingMemory workingMemory){
      agendaList.add(event);
    }
    public void agendaGroupPushed(    AgendaGroupPushedEvent event,    WorkingMemory workingMemory){
      agendaList.add(event);
    }
    public void beforeActivationFired(    BeforeActivationFiredEvent event,    WorkingMemory workingMemory){
      agendaList.add(event);
    }
  }
;
  wm.addEventListener(agendaEventListener);
  Cheese cheddar=new Cheese("cheddar",15);
  FactHandle cheddarHandle=wm.assertObject(cheddar);
  assertEquals(1,agendaList.size());
  ActivationCreatedEvent createdEvent=(ActivationCreatedEvent)agendaList.get(0);
  assertSame(cheddar,createdEvent.getActivation().getTuple().get(0).getObject());
  agendaList.clear();
  cheddar.setPrice(14);
  wm.modifyObject(cheddarHandle,cheddar);
  assertEquals(2,agendaList.size());
  ActivationCancelledEvent cancelledEvent=(ActivationCancelledEvent)agendaList.get(0);
  assertSame(cheddar,cancelledEvent.getActivation().getTuple().get(0).getObject());
  createdEvent=(ActivationCreatedEvent)agendaList.get(1);
  assertSame(cheddar,createdEvent.getActivation().getTuple().get(0).getObject());
  agendaList.clear();
  wm.retractObject(cheddarHandle);
  assertEquals(1,agendaList.size());
  cancelledEvent=(ActivationCancelledEvent)agendaList.get(0);
  assertNull(cancelledEvent.getActivation().getTuple().get(0).getObject());
  cheddarHandle=wm.assertObject(cheddar);
  agendaList.clear();
  wm.setFocus("test group");
  assertEquals(1,agendaList.size());
  AgendaGroupPushedEvent pushedEvent=(AgendaGroupPushedEvent)agendaList.get(0);
  assertEquals("test group",pushedEvent.getAgendaGroup().getName());
  agendaList.clear();
  wm.fireAllRules();
  assertEquals(3,agendaList.size());
  BeforeActivationFiredEvent beforeEvent=(BeforeActivationFiredEvent)agendaList.get(0);
  assertSame(cheddar,beforeEvent.getActivation().getTuple().get(0).getObject());
  AfterActivationFiredEvent afterEvent=(AfterActivationFiredEvent)agendaList.get(1);
  assertSame(cheddar,afterEvent.getActivation().getTuple().get(0).getObject());
  AgendaGroupPoppedEvent poppedEvent=(AgendaGroupPoppedEvent)agendaList.get(2);
  assertEquals("test group",poppedEvent.getAgendaGroup().getName());
}
