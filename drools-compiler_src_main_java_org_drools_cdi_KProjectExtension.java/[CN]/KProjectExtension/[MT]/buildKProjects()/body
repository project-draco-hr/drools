{
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  final Enumeration<URL> e;
  try {
    e=classLoader.getResources("META-INF/kproject.xml");
  }
 catch (  IOException exc) {
    log.error("Unable to find and build index of kproject.xml \n" + exc.getMessage());
    return;
  }
  Map<String,String> urls=new HashMap<String,String>();
  while (e.hasMoreElements()) {
    URL url=e.nextElement();
    ;
    try {
      KieProject kieProject=KieProjectImpl.fromXML(url);
      String kProjectId=kieProject.getGroupArtifactVersion().getGroupId() + ":" + kieProject.getGroupArtifactVersion().getArtifactId();
      urls.put(kProjectId,fixURL(url));
      kProjects.put(kProjectId,kieProject);
    }
 catch (    Exception exc) {
      log.error("Unable to build and build index of kproject.xml url=" + url.toExternalForm() + "\n"+ exc.getMessage());
    }
  }
  for (  KieProject kieProject : kProjects.values()) {
    for (    KieBaseModel kieBaseModel : kieProject.getKieBaseModels().values()) {
      kBases.put(kieBaseModel.getName(),kieBaseModel);
      ((KieBaseModelImpl)kieBaseModel).setKProject(kieProject);
      String kProjectId=kieProject.getGroupArtifactVersion().getGroupId() + ":" + kieProject.getGroupArtifactVersion().getArtifactId();
      kBaseURLs.put(kieBaseModel.getName(),urls.get(kProjectId));
      for (      KieSessionModel kieSessionModel : kieBaseModel.getKieSessionModels().values()) {
        ((KieSessionModelImpl)kieSessionModel).setKBase(kieBaseModel);
        kSessions.put(kieSessionModel.getName(),kieSessionModel);
      }
    }
  }
}
