{
  LinkedList<StackEntry> outerStack=new LinkedList<StackEntry>();
  this.networkEvaluator.evaluateNetwork(rmem,outerStack,this,wm);
  setDirty(false);
  wm.executeQueuedActions();
  int localFireCount=0;
  if (!tupleList.isEmpty()) {
    RuleTerminalNode rtn=(RuleTerminalNode)rmem.getNetworkNode();
    Rule rule=rtn.getRule();
    InternalAgenda agenda=(InternalAgenda)wm.getAgenda();
    int salience=rule.getSalience().getValue(null,null,null);
    if (isDeclarativeAgendaEnabled()) {
      RuleAgendaItem nextRule=agenda.peekNextRule();
      if (!isHighestSalience(nextRule,salience)) {
        return localFireCount;
      }
    }
    while (!tupleList.isEmpty()) {
      LeftTuple leftTuple=tupleList.removeFirst();
      rtn=(RuleTerminalNode)leftTuple.getSink();
      rule=rtn.getRule();
      PropagationContext pctx=leftTuple.getPropagationContext();
      pctx=RuleTerminalNode.findMostRecentPropagationContext(leftTuple,pctx);
      if (isNotEffective(wm,rtn,rule,leftTuple,pctx)) {
        continue;
      }
      AgendaItem item=(AgendaItem)leftTuple.getObject();
      if (item == null) {
        item=agenda.createAgendaItem(leftTuple,salience,pctx,rtn,ruleAgendaItem,ruleAgendaItem.getAgendaGroup(),ruleAgendaItem.getRuleFlowGroup());
        leftTuple.setObject(item);
      }
 else {
        item.setPropagationContext(pctx);
      }
      if (agenda.getActivationsFilter() != null && !agenda.getActivationsFilter().accept(item,pctx,wm,rtn)) {
        continue;
      }
      item.setQueued(true);
      if (filter == null || filter.accept(item)) {
        agenda.fireActivation(item);
        localFireCount++;
      }
      RuleAgendaItem nextRule=agenda.peekNextRule();
      if (haltRuleFiring(nextRule,fireCount,fireLimit,localFireCount,agenda,salience)) {
        break;
      }
      if (isDirty()) {
        ruleAgendaItem.dequeue();
        setDirty(false);
        this.networkEvaluator.evaluateNetwork(rmem,outerStack,this,wm);
      }
      wm.executeQueuedActions();
      if (tupleList.isEmpty() && !outerStack.isEmpty()) {
        StackEntry entry=outerStack.removeFirst();
        this.networkEvaluator.evalStackEntry(entry,outerStack,outerStack,this,wm);
      }
    }
  }
  if (!dirty && tupleList.isEmpty()) {
    ruleAgendaItem.remove();
  }
  return localFireCount;
}
