{
  int localFireCount=0;
  if (!tupleList.isEmpty()) {
    if (!fireExitedEarly && isDeclarativeAgendaEnabled()) {
      RuleAgendaItem nextRule=agenda.peekNextRule();
      if (!isHigherSalience(nextRule)) {
        fireExitedEarly=true;
        return localFireCount;
      }
    }
    RuleTerminalNode rtn=(RuleTerminalNode)pmem.getPathEndNode();
    RuleImpl rule=rtn.getRule();
    Tuple tuple=getNextTuple();
    if (rule.isAllMatches()) {
      agenda.fireConsequenceEvent((AgendaItem)tuple,DefaultAgenda.ON_BEFORE_ALL_FIRES_CONSEQUENCE_NAME);
    }
    Tuple lastTuple=null;
    for (; tuple != null; lastTuple=tuple, tuple=getNextTuple()) {
      if (cancelAndContinue(wm,rtn,rule,tuple,filter)) {
        continue;
      }
      AgendaItem item=(AgendaItem)tuple;
      if (agenda.getActivationsFilter() != null && !agenda.getActivationsFilter().accept(item,wm,rtn)) {
        continue;
      }
      agenda.fireActivation(item);
      localFireCount++;
      if (rtn.getLeftTupleSource() == null) {
        break;
      }
      wm.flushPropagations();
      int salience=ruleAgendaItem.getSalience();
      if (queue != null && !queue.isEmpty() && salience != queue.peek().getSalience()) {
        ruleAgendaItem.dequeue();
        ruleAgendaItem.setSalience(queue.peek().getSalience());
        ruleAgendaItem.getAgendaGroup().add(ruleAgendaItem);
      }
      if (!rule.isAllMatches()) {
        if (haltRuleFiring(fireCount,fireLimit,localFireCount,agenda)) {
          break;
        }
        if (!wm.isSequential()) {
          reEvaluateNetwork(wm);
        }
      }
    }
    if (rule.isAllMatches()) {
      agenda.fireConsequenceEvent((AgendaItem)lastTuple,DefaultAgenda.ON_AFTER_ALL_FIRES_CONSEQUENCE_NAME);
    }
  }
  removeRuleAgendaItemWhenEmpty(wm);
  fireExitedEarly=false;
  return localFireCount;
}
