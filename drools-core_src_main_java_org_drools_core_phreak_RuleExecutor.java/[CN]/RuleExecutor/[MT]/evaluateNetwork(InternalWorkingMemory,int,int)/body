{
  this.networkEvaluator.evaluateNetwork(rmem,wm,this);
  setDirty(false);
  wm.executeQueuedActions();
  int localFireCount=0;
  if (!tupleList.isEmpty()) {
    RuleTerminalNode rtn=(RuleTerminalNode)rmem.getNetworkNode();
    Rule rule=rtn.getRule();
    InternalAgenda agenda=(InternalAgenda)wm.getAgenda();
    int salience=rule.getSalience().getValue(null,null,null);
    if (isDeclarativeAgendaEnabled()) {
      RuleInstanceAgendaItem nextRule=agenda.peekNextRule();
      if (!isHighestSalience(nextRule,salience)) {
        ((InternalAgenda)wm.getAgenda()).addActivation(ruleAgendaItem);
        return localFireCount;
      }
    }
    while (!tupleList.isEmpty()) {
      LeftTuple leftTuple=tupleList.removeFirst();
      rtn=(RuleTerminalNode)leftTuple.getSink();
      rule=rtn.getRule();
      PropagationContext pctx=leftTuple.getPropagationContext();
      pctx=RuleTerminalNode.findMostRecentPropagationContext(leftTuple,pctx);
      if (isNotEffective(wm,rtn,rule,leftTuple,pctx)) {
        continue;
      }
      if (pctx.getType() != org.kie.api.runtime.rule.PropagationContext.RULE_ADDITION) {
        long handleRecency=((InternalFactHandle)pctx.getFactHandle()).getRecency();
        InternalAgendaGroup agendaGroup=(InternalAgendaGroup)agenda.getAgendaGroup(rule.getAgendaGroup());
        if (blockedByLockOnActive(rule,agenda,pctx,handleRecency,agendaGroup)) {
          continue;
        }
      }
      AgendaItem item=(AgendaItem)leftTuple.getObject();
      if (item == null) {
        item=agenda.createAgendaItem(leftTuple,salience,pctx,rtn,ruleAgendaItem);
        leftTuple.setObject(item);
      }
 else {
        item.setPropagationContext(pctx);
      }
      if (agenda.getActivationsFilter() != null && !agenda.getActivationsFilter().accept(item,pctx,wm,rtn)) {
        continue;
      }
      item.setActivated(true);
      agenda.fireActivation(item);
      localFireCount++;
      RuleInstanceAgendaItem nextRule=agenda.peekNextRule();
      if (haltRuleFiring(nextRule,fireCount,fireLimit,localFireCount,agenda,salience)) {
        break;
      }
      if (isDirty()) {
        ruleAgendaItem.dequeue();
        setDirty(false);
        this.networkEvaluator.evaluateNetwork(rmem,wm,this);
      }
      wm.executeQueuedActions();
    }
  }
  return localFireCount;
}
