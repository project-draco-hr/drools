{
  PackageBuilder builder=new PackageBuilder();
  Reader source=new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<process xmlns=\"http://drools.org/drools-5.0/process\"\n" + "         xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\"\n"+ "         xs:schemaLocation=\"http://drools.org/drools-5.0/process drools-processes-5.0.xsd\"\n"+ "         type=\"RuleFlow\" name=\"flow\" id=\"org.drools.state\" package-name=\"org.drools\" version=\"1\" >\n"+ "\n"+ "  <header>\n"+ "    <globals>\n"+ "      <global identifier=\"list\" type=\"java.util.List\" />\n"+ "    </globals>\n"+ "    <variables>\n"+ "      <variable name=\"s\" >\n"+ "        <type name=\"org.drools.process.core.datatype.impl.type.StringDataType\" />\n"+ "        <value>a</value>\n"+ "      </variable>\n"+ "    </variables>\n"+ "  </header>\n"+ "\n"+ "  <nodes>\n"+ "    <start id=\"1\" name=\"Start\" />\n"+ "    <state id=\"2\" name=\"State\" >\n"+ "      <onEntry>"+ "        <action type=\"expression\" dialect=\"mvel\" >list.add(\"Action1\" + s);</action>\n"+ "        <action type=\"expression\" dialect=\"java\" >list.add(\"Action2\" + s);</action>\n"+ "      </onEntry>\n"+ "      <onExit>\n"+ "        <action type=\"expression\" dialect=\"mvel\" >list.add(\"Action3\" + s);</action>\n"+ "        <action type=\"expression\" dialect=\"java\" >list.add(\"Action4\" + s);</action>\n"+ "      </onExit>\n"+ "    </state>\n"+ "    <end id=\"3\" name=\"End\" />\n"+ "  </nodes>\n"+ "\n"+ "  <connections>\n"+ "    <connection from=\"1\" to=\"2\" />\n"+ "    <connection from=\"2\" to=\"3\" />\n"+ "  </connections>\n"+ "\n"+ "</process>");
  builder.addRuleFlow(source);
  Package pkg=builder.getPackage();
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(pkg);
  WorkingMemory workingMemory=ruleBase.newStatefulSession();
  List<String> list=new ArrayList<String>();
  workingMemory.setGlobal("list",list);
  RuleFlowProcessInstance processInstance=(RuleFlowProcessInstance)workingMemory.startProcess("org.drools.state");
  assertEquals(ProcessInstance.STATE_ACTIVE,processInstance.getState());
  Collection<NodeInstance> nodeInstances=processInstance.getNodeInstances();
  assertEquals(1,nodeInstances.size());
  StateNodeInstance stateInstance=(StateNodeInstance)nodeInstances.iterator().next();
  assertEquals("State",stateInstance.getNodeName());
  assertEquals(2,list.size());
  assertTrue(list.contains("Action1a"));
  assertTrue(list.contains("Action2a"));
  processInstance.signalEvent("signal","End");
  nodeInstances=processInstance.getNodeInstances();
  assertEquals(0,nodeInstances.size());
  assertEquals(ProcessInstance.STATE_COMPLETED,processInstance.getState());
  assertEquals(4,list.size());
  assertTrue(list.contains("Action3a"));
  assertTrue(list.contains("Action4a"));
}
