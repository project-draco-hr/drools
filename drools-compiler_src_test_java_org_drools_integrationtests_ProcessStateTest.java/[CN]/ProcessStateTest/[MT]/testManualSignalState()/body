{
  PackageBuilder builder=new PackageBuilder();
  Reader source=new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<process xmlns=\"http://drools.org/drools-5.0/process\"\n" + "         xmlns:xs=\"http://www.w3.org/2001/XMLSchema-instance\"\n"+ "         xs:schemaLocation=\"http://drools.org/drools-5.0/process drools-processes-5.0.xsd\"\n"+ "         type=\"RuleFlow\" name=\"flow\" id=\"org.drools.state\" package-name=\"org.drools\" version=\"1\" >\n"+ "\n"+ "  <header>\n"+ "  </header>\n"+ "\n"+ "  <nodes>\n"+ "    <start id=\"1\" name=\"Start\" />\n"+ "    <state id=\"2\" name=\"StateA\" >\n"+ "      <constraints>\n"+ "        <constraint toNodeId=\"3\" name=\"toB\" />\n"+ "       <constraint toNodeId=\"4\" name=\"toC\" />\n"+ "      </constraints>\n"+ "    </state>\n"+ "    <state id=\"3\" name=\"StateB\" />\n"+ "    <state id=\"4\" name=\"StateC\" />\n"+ "    <end id=\"5\" name=\"End\" />\n"+ "  </nodes>\n"+ "\n"+ "  <connections>\n"+ "    <connection from=\"1\" to=\"2\" />\n"+ "    <connection from=\"2\" to=\"3\" />\n"+ "    <connection from=\"2\" to=\"4\" />\n"+ "    <connection from=\"3\" to=\"2\" />\n"+ "    <connection from=\"4\" to=\"5\" />\n"+ "  </connections>\n"+ "\n"+ "</process>");
  builder.addRuleFlow(source);
  Package pkg=builder.getPackage();
  RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(pkg);
  WorkingMemory workingMemory=ruleBase.newStatefulSession();
  RuleFlowProcessInstance processInstance=(RuleFlowProcessInstance)workingMemory.startProcess("org.drools.state");
  assertEquals(ProcessInstance.STATE_ACTIVE,processInstance.getState());
  Collection<NodeInstance> nodeInstances=processInstance.getNodeInstances();
  assertEquals(1,nodeInstances.size());
  StateNodeInstance stateInstance=(StateNodeInstance)nodeInstances.iterator().next();
  assertEquals("StateA",stateInstance.getNodeName());
  processInstance.signalEvent("signal","toB");
  nodeInstances=processInstance.getNodeInstances();
  assertEquals(1,nodeInstances.size());
  stateInstance=(StateNodeInstance)nodeInstances.iterator().next();
  assertEquals("StateB",stateInstance.getNodeName());
  processInstance.signalEvent("signal","StateA");
  nodeInstances=processInstance.getNodeInstances();
  assertEquals(1,nodeInstances.size());
  stateInstance=(StateNodeInstance)nodeInstances.iterator().next();
  assertEquals("StateA",stateInstance.getNodeName());
  processInstance.signalEvent("signal","toC");
  nodeInstances=processInstance.getNodeInstances();
  assertEquals(1,nodeInstances.size());
  stateInstance=(StateNodeInstance)nodeInstances.iterator().next();
  assertEquals("StateC",stateInstance.getNodeName());
  processInstance.signalEvent("signal","Invalid");
  nodeInstances=processInstance.getNodeInstances();
  assertEquals(1,nodeInstances.size());
  stateInstance=(StateNodeInstance)nodeInstances.iterator().next();
  assertEquals("StateC",stateInstance.getNodeName());
  processInstance.signalEvent("signal","End");
  nodeInstances=processInstance.getNodeInstances();
  assertEquals(0,nodeInstances.size());
  assertEquals(ProcessInstance.STATE_COMPLETED,processInstance.getState());
}
