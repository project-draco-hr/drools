{
  PackageDescr descr=new PackageDescr("testPackage");
  RulePackage rulePackage=new RulePackage(descr);
  rulePackage.setName("testPackage");
  VerifierRule rule=new VerifierRule(descr,rulePackage);
  rule.setName("testRule");
  Pattern pattern=new Pattern(new PatternDescr(),rule);
  Restriction r=LiteralRestriction.createRestriction(pattern,"");
  Restriction r2=LiteralRestriction.createRestriction(pattern,"");
  Restriction r3=LiteralRestriction.createRestriction(pattern,"");
  Restriction r4=LiteralRestriction.createRestriction(pattern,"");
  Solvers solvers=new Solvers();
  solvers.startRuleSolver(rule);
  solvers.startOperator(OperatorDescrType.AND);
  solvers.startPatternSolver(pattern);
  solvers.startOperator(OperatorDescrType.AND);
  solvers.addPatternComponent(r);
  solvers.addPatternComponent(r2);
  solvers.endOperator();
  solvers.endPatternSolver();
  solvers.startNot();
  solvers.startPatternSolver(pattern);
  solvers.startOperator(OperatorDescrType.AND);
  solvers.addPatternComponent(r3);
  solvers.addPatternComponent(r4);
  solvers.endOperator();
  solvers.endPatternSolver();
  solvers.endNot();
  solvers.endOperator();
  solvers.endRuleSolver();
  List<SubRule> list=solvers.getRulePossibilities();
  assertEquals(1,list.size());
  assertEquals(2,list.get(0).getItems().size());
  List<Restriction> result=new ArrayList<Restriction>();
  result.add(r);
  result.add(r2);
  List<Restriction> result2=new ArrayList<Restriction>();
  result2.add(r3);
  result2.add(r4);
  Object[] possibilies=list.get(0).getItems().toArray();
  SubPattern p1=(SubPattern)possibilies[0];
  SubPattern p2=(SubPattern)possibilies[1];
  if (p1.getItems().containsAll(result)) {
    assertTrue(p2.getItems().containsAll(result2));
  }
 else   if (p1.getItems().containsAll(result2)) {
    assertTrue(p2.getItems().containsAll(result));
  }
 else {
    fail("No items found.");
  }
}
