{
  LeftTupleSource node1=node;
  while (NodeTypeEnums.LeftInputAdapterNode != node1.getType()) {
    node1=node1.getLeftTupleSource();
  }
  int maxShareCount=node1.getAssociations().size();
  while (NodeTypeEnums.LeftInputAdapterNode != node.getType()) {
    Memory memory=wm.getNodeMemory((MemoryFactory)node);
    if (memory.getSegmentMemory() == null) {
      return;
    }
    if (node.getAssociations().size() == maxShareCount) {
      if (NodeTypeEnums.isBetaNode(node)) {
        BetaMemory bm;
        if (NodeTypeEnums.AccumulateNode == node.getType()) {
          AccumulateMemory am=(AccumulateMemory)memory;
          bm=am.getBetaMemory();
          FastIterator it=bm.getLeftTupleMemory().fullFastIterator();
          LeftTuple lt=((BetaNode)node).getFirstLeftTuple(bm.getLeftTupleMemory(),it);
          for (; lt != null; lt=(LeftTuple)it.next(lt)) {
            AccumulateContext accctx=(AccumulateContext)lt.getObject();
            collectFromPeers(accctx.getResultLeftTuple(),agendaItems,nodeSet,wm);
          }
        }
 else         if (NodeTypeEnums.ExistsNode == node.getType()) {
          bm=(BetaMemory)wm.getNodeMemory((MemoryFactory)node);
          FastIterator it=bm.getRightTupleMemory().fullFastIterator();
          RightTuple rt=((BetaNode)node).getFirstRightTuple(bm.getRightTupleMemory(),it);
          for (; rt != null; rt=(RightTuple)it.next(rt)) {
            for (LeftTuple lt=rt.getBlocked(); lt != null; lt=lt.getBlockedNext()) {
              if (lt.getFirstChild() != null) {
                collectFromPeers(lt.getFirstChild(),agendaItems,nodeSet,wm);
              }
            }
          }
        }
 else {
          bm=(BetaMemory)wm.getNodeMemory((MemoryFactory)node);
          FastIterator it=bm.getLeftTupleMemory().fullFastIterator();
          LeftTuple lt=((BetaNode)node).getFirstLeftTuple(bm.getLeftTupleMemory(),it);
          for (; lt != null; lt=(LeftTuple)it.next(lt)) {
            if (lt.getFirstChild() != null) {
              collectFromLeftInput(lt.getFirstChild(),agendaItems,nodeSet,wm);
            }
          }
        }
        return;
      }
 else       if (NodeTypeEnums.FromNode == node.getType()) {
        FromMemory fm=(FromMemory)wm.getNodeMemory((MemoryFactory)node);
        LeftTupleMemory ltm=fm.getBetaMemory().getLeftTupleMemory();
        FastIterator it=ltm.fullFastIterator();
        for (LeftTuple lt=ltm.getFirst(null); lt != null; lt=(LeftTuple)it.next(lt)) {
          if (lt.getFirstChild() != null) {
            collectFromLeftInput(lt.getFirstChild(),agendaItems,nodeSet,wm);
          }
        }
        return;
      }
    }
    node=node.getLeftTupleSource();
  }
  LeftInputAdapterNode lian=(LeftInputAdapterNode)node;
  Memory memory=wm.getNodeMemory((MemoryFactory)node);
  if (memory.getSegmentMemory() == null) {
    return;
  }
  ObjectSource os=lian.getObjectSource();
  while (os.getType() != NodeTypeEnums.ObjectTypeNode) {
    os=os.getParentObjectSource();
  }
  ObjectTypeNode otn=(ObjectTypeNode)os;
  final ObjectTypeNodeMemory omem=(ObjectTypeNodeMemory)wm.getNodeMemory(otn);
  Iterator it=omem.getObjectHashSet().iterator();
  LeftTupleSink firstLiaSink=lian.getSinkPropagator().getFirstLeftTupleSink();
  for (ObjectEntry entry=(ObjectEntry)it.next(); entry != null; entry=(ObjectEntry)it.next()) {
    InternalFactHandle fh=(InternalFactHandle)entry.getValue();
    if (fh.getFirstLeftTuple() != null) {
      for (LeftTuple childLt=fh.getFirstLeftTuple(); childLt != null; childLt=childLt.getLeftParentNext()) {
        if (childLt.getSink() == firstLiaSink) {
          collectFromLeftInput(childLt,agendaItems,nodeSet,wm);
        }
      }
    }
  }
}
