{
  String str="";
  str+="package org.kie.test\n";
  str+="global java.util.List list\n";
  str+="rule rule1\n";
  str+="when\n";
  str+="  $i : Integer(intValue > 0)\n";
  str+="then\n";
  str+="  list.add( $i );\n";
  str+="end\n";
  str+="\n";
  KieServices ks=KieServices.Factory.get();
  KieFactory kf=KieFactory.Factory.get();
  KieFileSystem kfs=kf.newKieFileSystem().write("src/main/resources/r1.drl",str);
  ks.newKieBuilder(kfs).buildAll();
  KieBase kbase=ks.getKieContainer(ks.getKieRepository().getDefaultGAV()).getKieBase();
  UserTransaction ut=(UserTransaction)new InitialContext().lookup("java:comp/UserTransaction");
  ut.begin();
  KieSession ksession=JPAKnowledgeService.newStatefulKnowledgeSession(kbase,null,env);
  ut.commit();
  List<?> list=new ArrayList<Object>();
  ut=(UserTransaction)new InitialContext().lookup("java:comp/UserTransaction");
  ut.begin();
  ksession.setGlobal("list",list);
  ksession.insert(1);
  ksession.insert(2);
  ksession.fireAllRules();
  ut.commit();
  ut=(UserTransaction)new InitialContext().lookup("java:comp/UserTransaction");
  ut.begin();
  ksession.insert(3);
  ut.rollback();
  ut=(UserTransaction)new InitialContext().lookup("java:comp/UserTransaction");
  ut.begin();
  ksession.fireAllRules();
  ut.commit();
  assertEquals(2,list.size());
  ut=(UserTransaction)new InitialContext().lookup("java:comp/UserTransaction");
  ut.begin();
  ksession.insert(3);
  ksession.insert(4);
  ut.commit();
  ut=(UserTransaction)new InitialContext().lookup("java:comp/UserTransaction");
  ut.begin();
  ksession.insert(5);
  ksession.insert(6);
  ut.rollback();
  ksession.fireAllRules();
  assertEquals(4,list.size());
  ksession=JPAKnowledgeService.loadStatefulKnowledgeSession(ksession.getId(),kbase,null,env);
  ut=(UserTransaction)new InitialContext().lookup("java:comp/UserTransaction");
  ut.begin();
  ksession.insert(7);
  ksession.insert(8);
  ut.commit();
  ksession.fireAllRules();
  assertEquals(6,list.size());
}
