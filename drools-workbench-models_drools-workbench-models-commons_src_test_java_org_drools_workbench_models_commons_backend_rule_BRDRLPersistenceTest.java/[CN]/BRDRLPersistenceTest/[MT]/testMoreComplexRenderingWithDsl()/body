{
  final RuleModel m=getComplexModel(true);
  String expected="rule \"Complex Rule\"\n" + "\tno-loop true\n" + "\tsalience -10\n"+ "\tagenda-group \"aGroup\"\n"+ "\tdialect \"mvel\"\n"+ "\twhen\n"+ "\t\t>p1 : Person( f1 : age < 42 )\n"+ "\t\t>not (Cancel( )) \n"+ "\tthen\n"+ "\t\t>p1.setStatus( \"rejected\" );\n"+ "\t\t>update( p1 );\n"+ "\t\t>retract( p1 );\n"+ "\t\tSend an email to administrator\n"+ "end\n";
  checkMarshallUnmarshall(expected,m);
  String drl=brlPersistence.marshal(m);
  assertEqualsIgnoreWhitespace(expected,drl);
  String dslFile="[then]Send an email to {administrator}=sendMailTo({administrator});";
  RuleModel unmarshalledModel=brlPersistence.unmarshalUsingDSL(drl,null,null,dslFile);
  IAction[] actions=unmarshalledModel.rhs;
  DSLSentence dslSentence=(DSLSentence)actions[actions.length - 1];
  assertEquals("Send an email to {administrator}",dslSentence.getDefinition());
  assertEqualsIgnoreWhitespace(expected,brlPersistence.marshal(unmarshalledModel));
}
