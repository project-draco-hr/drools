{
  InstrumentedWorkingMemoryImpl workingMemory=new InstrumentedWorkingMemoryImpl();
  FieldExtractor priceExtractor=new ClassFieldExtractor(Cheese.class,Cheese.getIndex(Cheese.class,"price"));
  Declaration price1Declaration=new Declaration(0,"price1",priceExtractor,0);
  Declaration price2Declaration=new Declaration(1,"price2",priceExtractor,1);
  PredicateEvaluator evaluator=new PredicateEvaluator(){
    public boolean evaluate(    Tuple tuple,    Object object,    FactHandle handle,    Declaration declaration,    Declaration[] declarations){
      int price1=((Integer)tuple.get(declarations[0])).intValue();
      int price2=((Integer)declaration.getValue(object)).intValue();
      return (price2 == (price1 * 2));
    }
  }
;
  PredicateConstraint constraint1=new PredicateConstraint(evaluator,price2Declaration,new Declaration[]{price1Declaration});
  Cheese cheddar0=new Cheese("cheddar",5);
  FactHandle f0=workingMemory.createFactHandle(0);
  workingMemory.putObject(f0,cheddar0);
  InstrumentedReteTuple tuple=new InstrumentedReteTuple(0,f0,workingMemory);
  Cheese cheddar1=new Cheese("cheddar",10);
  FactHandle f1=workingMemory.createFactHandle(1);
  workingMemory.putObject(f1,cheddar1);
  tuple=new InstrumentedReteTuple(tuple,new InstrumentedReteTuple(1,f1,workingMemory));
  assertTrue(constraint1.isAllowed(cheddar1,f1,tuple));
}
