{
  InstrumentedWorkingMemoryImpl workingMemory=new InstrumentedWorkingMemoryImpl();
  ObjectType integerObjectType=new ClassObjectType(Integer.class);
  Extractor priceOfCheeseExtractor=new Extractor(){
    public Object getValue(    Object object){
      return new Integer(((Cheese)object).getPrice());
    }
  }
;
  Declaration priceDeclaration=new Declaration(0,"price",integerObjectType,priceOfCheeseExtractor,0);
  ReturnValueExpressionConstraint isDoubleThePrice=new ReturnValueExpressionConstraint(){
    public boolean isAllowed(    Object object,    FactHandle handle,    Declaration[] declarations,    Tuple tuple,    ConstraintComparator comparator){
      int price=((Integer)tuple.get(declarations[0])).intValue();
      return comparator.compare(new Integer(((Cheese)object).getPrice()),new Integer(2 * price));
    }
  }
;
  ReturnValueConstraint constraint1=new ReturnValueConstraint(isDoubleThePrice,new Declaration[]{priceDeclaration},new NumericConstraintComparator(ConstraintComparator.EQUAL));
  ReturnValueConstraint constraint2=new ReturnValueConstraint(isDoubleThePrice,new Declaration[]{priceDeclaration},new NumericConstraintComparator(ConstraintComparator.GREATER));
  Cheese cheddar0=new Cheese("cheddar",5);
  FactHandle f0=workingMemory.createFactHandle(0);
  workingMemory.putObject(f0,cheddar0);
  InstrumentedReteTuple tuple=new InstrumentedReteTuple(0,f0,workingMemory);
  Cheese cheddar1=new Cheese("cheddar",10);
  FactHandle f1=workingMemory.createFactHandle(1);
  workingMemory.putObject(f1,cheddar1);
  tuple=new InstrumentedReteTuple(tuple,new InstrumentedReteTuple(0,f1,workingMemory));
  assertTrue(constraint1.isAllowed(cheddar1,f1,tuple));
  assertFalse(constraint2.isAllowed(cheddar1,f1,tuple));
}
