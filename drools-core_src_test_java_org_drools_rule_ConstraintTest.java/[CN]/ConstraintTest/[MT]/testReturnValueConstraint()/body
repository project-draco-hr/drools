{
  InstrumentedWorkingMemoryImpl workingMemory=new InstrumentedWorkingMemoryImpl();
  FieldExtractor priceExtractor=new ClassFieldExtractor(Cheese.class,Cheese.getIndex(Cheese.class,"price"));
  Declaration priceDeclaration=new Declaration(0,"price1",priceExtractor,0);
  ReturnValueEvaluator isDoubleThePrice=new ReturnValueEvaluator(){
    public Object evaluate(    Tuple tuple,    Declaration[] declarations){
      return new Integer(2 * ((Integer)tuple.get(declarations[0])).intValue());
    }
  }
;
  ReturnValueConstraint constraint1=new ReturnValueConstraint(priceExtractor,isDoubleThePrice,new Declaration[]{priceDeclaration},EvaluatorFactory.getInstance().getEvaluator(Evaluator.INTEGER_TYPE,Evaluator.EQUAL));
  ReturnValueConstraint constraint2=new ReturnValueConstraint(priceExtractor,isDoubleThePrice,new Declaration[]{priceDeclaration},EvaluatorFactory.getInstance().getEvaluator(Evaluator.INTEGER_TYPE,Evaluator.GREATER));
  Cheese cheddar0=new Cheese("cheddar",5);
  FactHandle f0=workingMemory.createFactHandle(0);
  workingMemory.putObject(f0,cheddar0);
  InstrumentedReteTuple tuple=new InstrumentedReteTuple(0,f0,workingMemory);
  Cheese cheddar1=new Cheese("cheddar",10);
  FactHandle f1=workingMemory.createFactHandle(1);
  workingMemory.putObject(f1,cheddar1);
  tuple=new InstrumentedReteTuple(tuple,new InstrumentedReteTuple(0,f1,workingMemory));
  assertTrue(constraint1.isAllowed(cheddar1,f1,tuple));
  assertFalse(constraint2.isAllowed(cheddar1,f1,tuple));
  cheddar1=new Cheese("cheddar",11);
  workingMemory.putObject(f1,cheddar1);
  assertTrue(constraint2.isAllowed(cheddar1,f1,tuple));
}
