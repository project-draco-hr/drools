{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("rangeChecks/Clean.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Remove useless date gaps lesser or lesser and equal"));
  Collection<Object> testData=new ArrayList<Object>();
  Field f=new Field();
  testData.add(f);
  LiteralRestriction lower=new LiteralRestriction();
  lower.setRuleName("> 01-Oct-2007 covered");
  lower.setFieldId(f.getId());
  lower.setOperator(Operator.GREATER);
  lower.setValue("01-Oct-2007");
  testData.add(lower);
  LiteralRestriction r1=new LiteralRestriction();
  r1.setRuleName("== 10-Oct-2007 covered");
  r1.setFieldId(f.getId());
  r1.setOperator(Operator.EQUAL);
  r1.setValue("10-Oct-2007");
  testData.add(r1);
  Gap g1=new Gap(f,Operator.GREATER,r1);
  g1.setFiredRuleName("above");
  testData.add(g1);
  Gap g2=new Gap(f,Operator.LESS,r1);
  g2.setFiredRuleName("below");
  testData.add(g2);
  LiteralRestriction r2=new LiteralRestriction();
  r2.setRuleName("> 15-Oct-2007 covered");
  r2.setFieldId(f.getId());
  r2.setOperator(Operator.GREATER);
  r2.setValue("15-Oct-2007");
  testData.add(r2);
  Gap g3=new Gap(f,Operator.LESS_OR_EQUAL,r2);
  g3.setFiredRuleName("15-Oct-2007gap");
  testData.add(g3);
  LiteralRestriction higher=new LiteralRestriction();
  higher.setRuleName("< 20-Oct-2007 covered");
  higher.setFieldId(f.getId());
  higher.setOperator(Operator.LESS);
  higher.setValue("20-Oct-2007");
  testData.add(higher);
  AnalyticsResult result=AnalyticsResultFactory.createAnalyticsResult();
  session.setGlobal("result",result);
  StatelessSessionResult sessionResult=session.executeWithResults(testData);
  Iterator<Object> iter=sessionResult.iterateObjects();
  Set<String> rulesThatHadErrors=new HashSet<String>();
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof Field) {
    }
 else     if (o instanceof Gap) {
      rulesThatHadErrors.add(((Gap)o).getFiredRuleName());
    }
 else     if (o instanceof AnalyticsComponent) {
      rulesThatHadErrors.add(((AnalyticsComponent)o).getRuleName());
    }
  }
  assertTrue(rulesThatHadErrors.remove("> 01-Oct-2007 covered"));
  assertTrue(rulesThatHadErrors.remove("== 10-Oct-2007 covered"));
  assertTrue(rulesThatHadErrors.remove("> 15-Oct-2007 covered"));
  assertTrue(rulesThatHadErrors.remove("< 20-Oct-2007 covered"));
  assertFalse(rulesThatHadErrors.contains("below"));
  assertFalse(rulesThatHadErrors.contains("above"));
  assertFalse(rulesThatHadErrors.contains("15-Oct-2007gap"));
  if (!rulesThatHadErrors.isEmpty()) {
    for (    String string : rulesThatHadErrors) {
      fail("Rule " + string + " caused an error.");
    }
  }
}
