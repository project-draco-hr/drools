{
  RuleDescr rule=parse("(defrule xxx ?b <- (person (name \"yyy\"&?bf|~\"zzz\"|~=(+ 2 3)&:(< 1 2)) ) ?c <- (hobby (type ?bf2&~iii) (rating fivestar) ) => )").defrule();
  assertEquals("xxx",rule.getName());
  AndDescr lhs=rule.getLhs();
  List lhsList=lhs.getDescrs();
  assertEquals(2,lhsList.size());
  PatternDescr col=(PatternDescr)lhsList.get(0);
  assertEquals("?b",col.getIdentifier());
  assertEquals("person",col.getObjectType());
  List colList=col.getDescrs();
  assertEquals(2,colList.size());
  FieldConstraintDescr fieldConstraintDescr=(FieldConstraintDescr)colList.get(0);
  assertEquals("name",fieldConstraintDescr.getFieldName());
  assertEquals(RestrictionConnectiveDescr.OR,fieldConstraintDescr.getRestriction().getConnective());
  List restrictionList=fieldConstraintDescr.getRestrictions();
  assertEquals(3,restrictionList.size());
  RestrictionConnectiveDescr andRestr=(RestrictionConnectiveDescr)restrictionList.get(0);
  assertEquals(RestrictionConnectiveDescr.AND,andRestr.getConnective());
  assertEquals(2,andRestr.getRestrictions().size());
  LiteralRestrictionDescr litDescr=(LiteralRestrictionDescr)andRestr.getRestrictions().get(0);
  assertEquals("==",litDescr.getEvaluator());
  assertEquals("yyy",litDescr.getText());
  VariableRestrictionDescr varDescr=(VariableRestrictionDescr)restrictionList.get(1);
  assertEquals("==",varDescr.getEvaluator());
  assertEquals("?bf",varDescr.getIdentifier());
  litDescr=(LiteralRestrictionDescr)restrictionList.get(1);
  assertEquals("!=",litDescr.getEvaluator());
  assertEquals("zzz",litDescr.getText());
  ReturnValueRestrictionDescr retDescr=(ReturnValueRestrictionDescr)restrictionList.get(2);
  assertEquals("!=",retDescr.getEvaluator());
  CLPReturnValue clprv=(CLPReturnValue)retDescr.getContent();
  FunctionCaller fc=clprv.getFunctions()[0];
  assertEquals("+",fc.getName());
  assertEquals(new LongValueHandler(2),fc.getParameters()[0]);
  assertEquals(new LongValueHandler(3),fc.getParameters()[1]);
  PredicateDescr predicateDescr=(PredicateDescr)colList.get(1);
  CLPPredicate clpp=(CLPPredicate)predicateDescr.getContent();
  fc=clpp.getFunctions()[0];
  assertEquals("<",fc.getName());
  assertEquals(new LongValueHandler(1),fc.getParameters()[0]);
  assertEquals(new LongValueHandler(2),fc.getParameters()[1]);
  col=(PatternDescr)lhsList.get(1);
  assertEquals("?c",col.getIdentifier());
  assertEquals("hobby",col.getObjectType());
  colList=col.getDescrs();
  assertEquals(2,colList.size());
  fieldConstraintDescr=(FieldConstraintDescr)colList.get(0);
  restrictionList=fieldConstraintDescr.getRestrictions();
  assertEquals("type",fieldConstraintDescr.getFieldName());
  assertEquals(RestrictionConnectiveDescr.AND,fieldConstraintDescr.getRestriction().getConnective());
  varDescr=(VariableRestrictionDescr)restrictionList.get(0);
  assertEquals("==",varDescr.getEvaluator());
  assertEquals("?bf2",varDescr.getIdentifier());
  litDescr=(LiteralRestrictionDescr)restrictionList.get(1);
  assertEquals("!=",litDescr.getEvaluator());
  assertEquals("iii",litDescr.getText());
  fieldConstraintDescr=(FieldConstraintDescr)colList.get(1);
  restrictionList=fieldConstraintDescr.getRestrictions();
  assertEquals("rating",fieldConstraintDescr.getFieldName());
  litDescr=(LiteralRestrictionDescr)restrictionList.get(0);
  assertEquals("==",litDescr.getEvaluator());
  assertEquals("fivestar",litDescr.getText());
}
