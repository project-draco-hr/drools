{
  if (timerString.indexOf('(') >= 0) {
    timerString=timerString.substring(timerString.indexOf('(') + 1,timerString.lastIndexOf(')'));
  }
  int colonPos=timerString.indexOf(":");
  String protocol=null;
  if (colonPos == -1) {
    protocol="int";
  }
 else {
    protocol=timerString.substring(0,colonPos);
  }
  int startPos=timerString.indexOf("start");
  int endPos=timerString.indexOf("end");
  int optionsPos=timerString.length();
  Date startDate=null;
  Date endDate=null;
  if (startPos != -1 && endPos != -1) {
    if (startPos < endPos) {
      optionsPos=startPos;
      int equalsPos=timerString.indexOf('=',startPos);
      startDate=DateUtils.parseDate(timerString.substring(equalsPos + 2,endPos).trim());
    }
 else {
      optionsPos=endPos;
      int equalsPos=timerString.indexOf('=',endPos);
      startDate=DateUtils.parseDate(timerString.substring(equalsPos + 2,startPos).trim());
    }
  }
 else   if (startPos != -1) {
    optionsPos=startPos;
    int equalsPos=timerString.indexOf('=',startPos);
    startDate=DateUtils.parseDate(timerString.substring(equalsPos + 2).trim());
  }
 else   if (endPos != -1) {
    optionsPos=endPos;
    int equalsPos=timerString.indexOf('=',endPos);
    endDate=DateUtils.parseDate(timerString.substring(equalsPos + 2).trim());
  }
  String body=timerString.substring(colonPos + 1,optionsPos).trim();
  Timer timer=null;
  if ("cron".equals(protocol)) {
    try {
      timer=new CronTimer(startDate,endDate,new CronExpression(body));
    }
 catch (    ParseException e) {
      context.getErrors().add("Unable to build set timer '" + timerString + "'");
      return;
    }
  }
 else   if ("int".equals(protocol)) {
    String[] times=body.trim().split("\\s");
    long delay=0;
    long period=0;
    if (times.length == 1) {
      delay=TimeUtils.parseTimeString(times[0]);
    }
 else     if (times.length == 2) {
      delay=TimeUtils.parseTimeString(times[0]);
      period=TimeUtils.parseTimeString(times[1]);
    }
 else {
      context.getErrors().add("Incorrect number of arguments for interval timer '" + timerString + "'");
      return;
    }
    timer=new IntervalTimer(startDate,endDate,delay,period);
  }
 else {
    context.getErrors().add("Protocol for timer does not exist '" + timerString + "'");
    return;
  }
  rule.setTimer(timer);
}
