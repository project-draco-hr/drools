{
  final Rule rule=context.getRule();
  final RuleDescr ruleDescr=context.getRuleDescr();
  for (  final AttributeDescr attributeDescr : ruleDescr.getAttributes().values()) {
    final String name=attributeDescr.getName();
    if (name.equals("no-loop")) {
      rule.setNoLoop(getBooleanValue(attributeDescr,true));
    }
 else     if (name.equals("auto-focus")) {
      rule.setAutoFocus(getBooleanValue(attributeDescr,true));
    }
 else     if (name.equals("agenda-group")) {
      rule.setAgendaGroup(attributeDescr.getValue());
    }
 else     if (name.equals("activation-group")) {
      rule.setActivationGroup(attributeDescr.getValue());
    }
 else     if (name.equals("ruleflow-group")) {
      rule.setRuleFlowGroup(attributeDescr.getValue());
    }
 else     if (name.equals("lock-on-active")) {
      rule.setLockOnActive(getBooleanValue(attributeDescr,true));
    }
 else     if (name.equals(DroolsSoftKeywords.DURATION) || name.equals(DroolsSoftKeywords.TIMER)) {
      String duration=attributeDescr.getValue();
      buildTimer(rule,duration,context);
    }
 else     if (name.equals("calendars")) {
      Object val=null;
      try {
        val=MVEL.eval(attributeDescr.getValue());
        String[] calNames=null;
        if (val instanceof List) {
          calNames=(String[])((List)val).toArray(new String[((List)val).size()]);
        }
 else         if (val instanceof String) {
          calNames=new String[]{(String)val};
        }
 else {
          context.getErrors().add("Calendars attribute did not return a String or String[] '" + val + "'");
        }
        if (calNames != null) {
          rule.setCalendars(calNames);
        }
      }
 catch (      Exception e) {
        context.getErrors().add("Unable to build Calendars attribute '" + val + "'"+ e.getMessage());
      }
    }
 else     if (name.equals("date-effective")) {
      final Calendar cal=Calendar.getInstance();
      cal.setTime(DateUtils.parseDate(attributeDescr.getValue()));
      rule.setDateEffective(cal);
    }
 else     if (name.equals("date-expires")) {
      final Calendar cal=Calendar.getInstance();
      cal.setTime(DateUtils.parseDate(attributeDescr.getValue()));
      rule.setDateExpires(cal);
    }
  }
  buildSalience(context);
  buildEnabled(context);
}
