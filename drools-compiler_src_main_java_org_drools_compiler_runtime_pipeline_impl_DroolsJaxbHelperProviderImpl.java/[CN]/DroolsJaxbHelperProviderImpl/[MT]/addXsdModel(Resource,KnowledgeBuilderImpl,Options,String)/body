{
  InputSource source=new InputSource(new CachingRewindableReader(resource.getReader()));
  source.setSystemId(systemId.trim().startsWith(".") ? systemId : "." + systemId);
  xjcOpts.addGrammar(source);
  try {
    xjcOpts.parseArguments(new String[]{"-npa"});
  }
 catch (  BadCommandLineException e) {
    throw new IllegalArgumentException("Unable to parse arguments",e);
  }
  ErrorReceiver errorReceiver=new JaxbErrorReceiver4Drools();
  Model model=ModelLoader.load(xjcOpts,new JCodeModel(),errorReceiver);
  model.generateCode(xjcOpts,errorReceiver);
  MapVfsCodeWriter codeWriter=new MapVfsCodeWriter();
  model.codeModel.build(xjcOpts.createCodeWriter(codeWriter));
  MemoryResourceReader src=new MemoryResourceReader();
  boolean useProjectClassLoader=kBuilder.getRootClassLoader() instanceof ProjectClassLoader;
  List<String> classNames=new ArrayList<String>();
  List<String> srcNames=new ArrayList<String>();
  for (  Entry<String,byte[]> entry : codeWriter.getMap().entrySet()) {
    String name=entry.getKey();
    int dotPos=name.lastIndexOf('.');
    String pkgName=name.substring(0,dotPos);
    if (!name.endsWith("package-info.java")) {
      classNames.add(pkgName);
    }
    dotPos=pkgName.lastIndexOf('.');
    if (dotPos != -1) {
      pkgName=pkgName.substring(0,dotPos);
    }
    PackageRegistry pkgReg=kBuilder.getPackageRegistry(pkgName);
    if (pkgReg == null) {
      kBuilder.addPackage(new PackageDescr(pkgName));
      pkgReg=kBuilder.getPackageRegistry(pkgName);
    }
    if (useProjectClassLoader) {
      String srcName=convertToResource(entry.getKey());
      src.add(srcName,entry.getValue());
      srcNames.add(srcName);
    }
 else {
      JavaDialect dialect=(JavaDialect)pkgReg.getDialectCompiletimeRegistry().getDialect("java");
      dialect.addSrc(convertToResource(entry.getKey()),entry.getValue());
    }
  }
  if (useProjectClassLoader) {
    ProjectJavaCompiler compiler=new ProjectJavaCompiler(kBuilder.getBuilderConfiguration());
    List<KnowledgeBuilderResult> results=compiler.compileAll((ProjectClassLoader)kBuilder.getRootClassLoader(),srcNames,src);
    for (    String className : classNames) {
      Class<?> clazz=null;
      try {
        clazz=Class.forName(className,true,kBuilder.getRootClassLoader());
      }
 catch (      ClassNotFoundException e) {
        continue;
      }
      String pkgName=className.substring(0,className.lastIndexOf('.'));
      PackageRegistry pkgReg=kBuilder.getPackageRegistry(pkgName);
      pkgReg.getPackage().addTypeDeclaration(new TypeDeclaration(clazz));
    }
    kBuilder.updateResults(results);
  }
 else {
    kBuilder.compileAll();
    kBuilder.updateResults();
  }
  return classNames.toArray(new String[classNames.size()]);
}
