{
  InputSource source=new InputSource(new CachingRewindableReader(reader));
  source.setSystemId(systemId.trim().startsWith(".") ? systemId : "." + systemId);
  xjcOpts.addGrammar(source);
  ErrorReceiver errorReceiver=new JaxbErrorReceiver4Drools();
  Model model=ModelLoader.load(xjcOpts,new JCodeModel(),errorReceiver);
  final Outline outline=model.generateCode(xjcOpts,errorReceiver);
  MapVfsCodeWriter codeWriter=new MapVfsCodeWriter();
  model.codeModel.build(xjcOpts.createCodeWriter(codeWriter));
  Set<JavaDialect> dialects=new HashSet<JavaDialect>();
  List<String> classNames=new ArrayList<String>();
  for (  Entry<String,byte[]> entry : codeWriter.getMap().entrySet()) {
    String name=entry.getKey();
    if (name.endsWith("package-info.java")) {
      continue;
    }
    String pkgName=null;
    int dotPos=name.lastIndexOf('.');
    pkgName=name.substring(0,dotPos);
    classNames.add(pkgName);
    dotPos=pkgName.lastIndexOf('.');
    if (dotPos != -1) {
      pkgName=pkgName.substring(0,dotPos);
    }
    PackageRegistry pkgReg=pkgBuilder.getPackageRegistry(pkgName);
    if (pkgReg == null) {
      pkgBuilder.addPackage(new PackageDescr(pkgName));
      pkgReg=pkgBuilder.getPackageRegistry(pkgName);
    }
    JavaDialect dialect=(JavaDialect)pkgReg.getDialectCompiletimeRegistry().getDialect("java");
    dialects.add(dialect);
    dialect.addSrc(convertToResource(entry.getKey()),entry.getValue());
  }
  pkgBuilder.compileAll();
  pkgBuilder.updateResults();
  return (String[])classNames.toArray(new String[classNames.size()]);
}
