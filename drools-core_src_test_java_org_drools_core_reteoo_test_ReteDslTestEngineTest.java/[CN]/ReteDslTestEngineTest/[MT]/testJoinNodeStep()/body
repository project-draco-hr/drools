{
  String str="TestCase 'testOTN'\nTest 'dummy'\n";
  str+="ObjectTypeNode:\n";
  str+="    otn1, java.lang.Integer;\n";
  str+="LeftInputAdapterNode:\n";
  str+="    lian0, otn1;\n";
  str+="ObjectTypeNode:\n";
  str+="    otn2, java.lang.Integer;\n";
  str+="Binding:\n";
  str+="     p1, 0, java.lang.Integer, intValue;\n";
  str+="JoinNode:\n";
  str+="    join1, lian0, otn2;\n";
  str+="    intValue, !=, p1;\n";
  NodeTestResult result=executeTest(str);
  Map<String,Object> map=result.context;
  JoinNode join1=(JoinNode)map.get("join1");
  assertNotNull(join1);
  InternalKnowledgeBase kBase=(InternalKnowledgeBase)KnowledgeBaseFactory.newKnowledgeBase();
  PropagationContextFactory pctxFactory=kBase.getConfiguration().getComponentFactory().getPropagationContextFactory();
  PropagationContext context=pctxFactory.createPropagationContext(0,PropagationContext.INSERTION,null,null,null);
  StatefulKnowledgeSessionImpl workingMemory=new StatefulKnowledgeSessionImpl(1L,kBase);
  BetaMemory memory=(BetaMemory)workingMemory.getNodeMemory(join1);
  final DefaultFactHandle f0=new DefaultFactHandle(0,0);
  final LeftTupleImpl tuple0=new LeftTupleImpl(f0,join1,true);
  join1.assertLeftTuple(tuple0,context,workingMemory);
  assertEquals(1,memory.getLeftTupleMemory().size());
  assertEquals(0,memory.getRightTupleMemory().size());
  final DefaultFactHandle f1=new DefaultFactHandle(1,0);
  final LeftTupleImpl tuple1=new LeftTupleImpl(f1,join1,true);
  join1.assertLeftTuple(tuple1,context,workingMemory);
  assertEquals(2,memory.getLeftTupleMemory().size());
  Tuple leftTuple=((TupleList)memory.getLeftTupleMemory()).getFirst();
  assertEquals(tuple0,leftTuple);
  assertEquals(tuple1,leftTuple.getNext());
}
