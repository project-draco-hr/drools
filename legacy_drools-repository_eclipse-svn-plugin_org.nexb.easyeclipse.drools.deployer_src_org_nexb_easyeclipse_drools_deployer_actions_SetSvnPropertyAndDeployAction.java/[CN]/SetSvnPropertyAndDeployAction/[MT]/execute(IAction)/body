{
  final IResource[] resources=new IResource[]{getSelectedResources()[0]};
  final ISVNLocalResource svnResource=SVNWorkspaceRoot.getSVNResourceFor(resources[0]);
  final List resourcesToBeAdded=new ArrayList();
  final List resourcesToBeDeleted=new ArrayList();
  run(new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      try {
        svnResource.setSvnProperty(getPropertyName(),getPropertyValue(),true);
      }
 catch (      SVNException e) {
        throw new InvocationTargetException(e);
      }
      try {
        IResource[] modified=getModifiedResources(resources,monitor);
        if (modified.length == 0) {
          MessageDialog.openInformation(getShell(),Policy.bind("CommitDialog.title"),Policy.bind("CommitDialog.noChanges"));
          commit=false;
        }
 else {
          ProjectProperties projectProperties=ProjectProperties.getProjectProperties(modified[0]);
          commit=confirmCommit(modified,projectProperties);
        }
        if (commit) {
          for (int i=0; i < resourcesToCommit.length; i++) {
            IResource resource=resourcesToCommit[i];
            ISVNLocalResource svnResource=SVNWorkspaceRoot.getSVNResourceFor(resource);
            if (!svnResource.isManaged())             resourcesToBeAdded.add(resource);
            if (svnResource.getStatus().isMissing())             resourcesToBeDeleted.add(resource);
          }
        }
      }
 catch (      TeamException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
,true,PROGRESS_BUSYCURSOR);
  if (!commit) {
    return;
  }
  new CommitOperation(getTargetPart(),resources,(IResource[])resourcesToBeAdded.toArray(new IResource[resourcesToBeAdded.size()]),(IResource[])resourcesToBeDeleted.toArray(new IResource[resourcesToBeDeleted.size()]),resourcesToCommit,commitComment,keepLocks).run();
}
