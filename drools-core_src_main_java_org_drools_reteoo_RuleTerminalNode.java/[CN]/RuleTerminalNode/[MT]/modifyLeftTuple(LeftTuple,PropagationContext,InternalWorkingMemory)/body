{
  if (!this.rule.isEffective(leftTuple,workingMemory)) {
    return;
  }
  AgendaItem item=(AgendaItem)leftTuple.getObject();
  if (item != null && item.isActivated()) {
    return;
  }
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  if (this.rule.isNoLoop() && this.rule.equals(context.getRuleOrigin())) {
    agenda.increaseDormantActivations();
    return;
  }
  final Timer timer=this.rule.getTimer();
  if (timer != null) {
    if (item == null) {
      item=agenda.createScheduledAgendaItem(leftTuple,context,this.rule,this.subrule);
    }
    agenda.scheduleItem((ScheduledAgendaItem)item,workingMemory);
    item.setActivated(true);
    ((EventSupport)workingMemory).getAgendaEventSupport().fireActivationCreated(item,workingMemory);
  }
 else {
    if (this.rule.getCalendars() != null) {
      long timestamp=workingMemory.getSessionClock().getCurrentTime();
      for (      String cal : this.rule.getCalendars()) {
        if (!workingMemory.getCalendars().get(cal).isTimeIncluded(timestamp)) {
          return;
        }
      }
    }
    if (item == null) {
      item=agenda.createAgendaItem(leftTuple,rule.getSalience().getValue(leftTuple,this.rule,workingMemory),context,this.rule,this.subrule);
      item.setSequenence(this.sequence);
    }
 else {
      item.setSalience(rule.getSalience().getValue(leftTuple,this.rule,workingMemory));
      item.setPropagationContext(context);
    }
    boolean added=agenda.addActivation(item);
    item.setActivated(added);
    if (added) {
      ((EventSupport)workingMemory).getAgendaEventSupport().fireActivationCreated(item,workingMemory);
    }
  }
  agenda.increaseActiveActivations();
}
