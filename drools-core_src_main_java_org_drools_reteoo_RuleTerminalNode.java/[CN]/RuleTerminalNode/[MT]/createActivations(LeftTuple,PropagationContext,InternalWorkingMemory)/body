{
  tuple.setObject(null);
  if (!this.rule.isEffective(tuple,workingMemory)) {
    return;
  }
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  if (this.rule.isNoLoop() && this.rule.equals(context.getRuleOrigin())) {
    return;
  }
  if (rule.getSalience().getValue(tuple,rule,workingMemory) == 101) {
    final AgendaItem item=agenda.createAgendaItem(tuple,0,context,this);
    tuple.setObject(item);
    item.setActivated(true);
    tuple.increaseActivationCountForEvents();
    agenda.increaseActiveActivations();
    agenda.fireActivation(item);
    return;
  }
  AgendaItem item=null;
  final Timer timer=this.rule.getTimer();
  if (timer != null) {
    item=agenda.createScheduledAgendaItem(tuple,context,this);
  }
 else {
    if (rule.getCalendars() != null) {
      long timestamp=workingMemory.getSessionClock().getCurrentTime();
      for (      String cal : rule.getCalendars()) {
        if (!workingMemory.getCalendars().get(cal).isTimeIncluded(timestamp)) {
          return;
        }
      }
    }
    InternalAgendaGroup agendaGroup=(InternalAgendaGroup)agenda.getAgendaGroup(rule.getAgendaGroup());
    if (rule.getRuleFlowGroup() == null) {
      if (rule.isLockOnActive() && agendaGroup.isActive()) {
        return;
      }
    }
 else {
      InternalRuleFlowGroup rfg=(InternalRuleFlowGroup)agenda.getRuleFlowGroup(rule.getRuleFlowGroup());
      if (rule.isLockOnActive() && rfg.isActive()) {
        return;
      }
    }
    item=agenda.createAgendaItem(tuple,rule.getSalience().getValue(tuple,this.rule,workingMemory),context,this);
    item.setAgendaGroup(agendaGroup);
  }
  tuple.setObject(item);
  item.setActivated(true);
  tuple.increaseActivationCountForEvents();
  agenda.increaseActiveActivations();
  item.setSequenence(this.sequence);
  ((EventSupport)workingMemory).getAgendaEventSupport().fireActivationCreated(item,workingMemory);
}
