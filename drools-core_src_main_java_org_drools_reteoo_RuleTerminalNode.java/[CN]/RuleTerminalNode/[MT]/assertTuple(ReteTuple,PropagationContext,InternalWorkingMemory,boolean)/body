{
  if (!this.rule.isEffective()) {
    return;
  }
  if (context.getType() == PropagationContext.MODIFICATION) {
    if (this.rule.isNoLoop() && this.rule.equals(context.getRuleOrigin()) && context.getActivationOrigin().getTuple().equals(tuple)) {
      return;
    }
  }
 else   if (this.rule.isNoLoop() && this.rule.equals(context.getRuleOrigin())) {
    return;
  }
  final ReteTuple cloned=new ReteTuple(tuple);
  final InternalAgenda agenda=(InternalAgenda)workingMemory.getAgenda();
  final Duration dur=this.rule.getDuration();
  if (dur != null && dur.getDuration(tuple) > 0) {
    final ScheduledAgendaItem item=new ScheduledAgendaItem(context.getPropagationNumber(),cloned,agenda,context,this.rule,this.subrule);
    final TerminalNodeMemory memory=(TerminalNodeMemory)workingMemory.getNodeMemory(this);
    if (this.rule.getActivationGroup() != null) {
      if (memory.getActivationGroup() == null) {
        memory.setActivationGroup(workingMemory.getAgenda().getActivationGroup(this.rule.getActivationGroup()));
      }
      memory.getActivationGroup().addActivation(item);
    }
    agenda.scheduleItem(item);
    tuple.setActivation(item);
    memory.getTupleMemory().add(tuple);
    item.setActivated(true);
    ((EventSupport)workingMemory).getAgendaEventSupport().fireActivationCreated(item,workingMemory);
  }
 else {
    final TerminalNodeMemory memory=(TerminalNodeMemory)workingMemory.getNodeMemory(this);
    AgendaGroupImpl agendaGroup=memory.getAgendaGroup();
    if (agendaGroup == null) {
      if (this.rule.getAgendaGroup() == null || this.rule.getAgendaGroup().equals("") || this.rule.getAgendaGroup().equals(AgendaGroup.MAIN)) {
        agendaGroup=(AgendaGroupImpl)agenda.getAgendaGroup(AgendaGroup.MAIN);
      }
 else {
        agendaGroup=(AgendaGroupImpl)agenda.getAgendaGroup(this.rule.getAgendaGroup());
      }
      memory.setAgendaGroup(agendaGroup);
    }
    if (this.rule.getAutoFocus()) {
      agenda.setFocus(agendaGroup);
    }
    final AgendaItem item=new AgendaItem(context.getPropagationNumber(),cloned,rule.getSalience().getValue(tuple,workingMemory),context,this.rule,this.subrule);
    if (this.rule.getActivationGroup() != null) {
      if (memory.getActivationGroup() == null) {
        memory.setActivationGroup(workingMemory.getAgenda().getActivationGroup(this.rule.getActivationGroup()));
      }
      memory.getActivationGroup().addActivation(item);
    }
    item.setAgendaGroup(agendaGroup);
    if (this.rule.getRuleFlowGroup() == null) {
      if (context.getType() == PropagationContext.MODIFICATION) {
        if (this.rule.isLockOnActive() && agendaGroup.isActive()) {
          Activation justifier=context.removeRetractedTuple(this.rule,tuple);
          if (justifier == null) {
            return;
          }
 else           if (this.rule.hasLogicalDependency()) {
            copyLogicalDependencies(context,workingMemory,item,justifier);
          }
        }
 else         if (this.rule.hasLogicalDependency()) {
          Activation justifier=context.removeRetractedTuple(this.rule,tuple);
          copyLogicalDependencies(context,workingMemory,item,justifier);
        }
      }
 else       if (this.rule.isLockOnActive() && agendaGroup.isActive()) {
        return;
      }
      agendaGroup.add(item);
    }
 else {
      RuleFlowGroup rfg=memory.getRuleFlowGroup();
      if (rfg == null) {
        rfg=workingMemory.getAgenda().getRuleFlowGroup(this.rule.getRuleFlowGroup());
        memory.setRuleFlowGroup(rfg);
      }
      if (context.getType() == PropagationContext.MODIFICATION) {
        if (this.rule.isLockOnActive() && rfg.isActive()) {
          Activation justifier=context.removeRetractedTuple(this.rule,tuple);
          if (justifier == null) {
            return;
          }
 else           if (this.rule.hasLogicalDependency()) {
            copyLogicalDependencies(context,workingMemory,item,justifier);
          }
        }
 else         if (this.rule.hasLogicalDependency()) {
          Activation justifier=context.removeRetractedTuple(this.rule,tuple);
          copyLogicalDependencies(context,workingMemory,item,justifier);
        }
      }
 else       if (this.rule.isLockOnActive() && rfg.isActive()) {
        return;
      }
      ((InternalRuleFlowGroup)memory.getRuleFlowGroup()).addActivation(item);
    }
    tuple.setActivation(item);
    memory.getTupleMemory().add(tuple);
    item.setActivated(true);
    if (fireActivationCreated) {
      ((EventSupport)workingMemory).getAgendaEventSupport().fireActivationCreated(item,workingMemory);
    }
  }
  agenda.increaseActiveActivations();
}
