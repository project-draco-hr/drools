{
  final TerminalNodeMemory memory=(TerminalNodeMemory)workingMemory.getNodeMemory(this);
  memory.getTupleMemory().remove(leftTuple);
  final Activation activation=leftTuple.getActivation();
  if (activation == null) {
    return;
  }
  if (activation.getLogicalDependencies() != null && !activation.getLogicalDependencies().isEmpty()) {
    context.addRetractedTuple(this.rule,activation);
  }
  if (activation.isActivated()) {
    if (context.getType() == PropagationContext.MODIFICATION) {
      if (this.rule.isLockOnActive()) {
        context.addRetractedTuple(this.rule,activation);
      }
    }
    activation.remove();
    if (activation.getActivationGroupNode() != null) {
      activation.getActivationGroupNode().getActivationGroup().removeActivation(activation);
    }
    if (activation.getRuleFlowGroupNode() != null) {
      final InternalRuleFlowGroup ruleFlowGroup=activation.getRuleFlowGroupNode().getRuleFlowGroup();
      ruleFlowGroup.removeActivation(activation);
    }
    ((EventSupport)workingMemory).getAgendaEventSupport().fireActivationCancelled(activation,workingMemory);
    ((InternalAgenda)workingMemory.getAgenda()).decreaseActiveActivations();
  }
 else {
    ((InternalAgenda)workingMemory.getAgenda()).decreaseDormantActivations();
  }
  workingMemory.removeLogicalDependencies(activation,context,this.rule);
}
