{
  if (rules.length == 1) {
    if (partialPermutation != null && partialPermutation.length > 0) {
      foundPermutations.add(new StringPermutation(concatenateStringArrays(partialPermutation,rules)));
    }
 else {
      foundPermutations.add(new StringPermutation(rules));
    }
  }
 else {
    for (int i=0; i < rules.length; i++) {
      if (i == 0) {
        getStringPermutations(Arrays.copyOfRange(rules,1,rules.length),concatenateStringArrays(partialPermutation,new String[]{rules[i]}),foundPermutations);
      }
 else       if (i == rules.length - 1) {
        getStringPermutations(Arrays.copyOfRange(rules,0,rules.length - 1),concatenateStringArrays(partialPermutation,new String[]{rules[i]}),foundPermutations);
      }
 else {
        final String[] remainingRules=concatenateStringArrays(Arrays.copyOfRange(rules,0,i),Arrays.copyOfRange(rules,i + 1,rules.length));
        getStringPermutations(remainingRules,concatenateStringArrays(partialPermutation,new String[]{rules[i]}),foundPermutations);
      }
    }
  }
}
