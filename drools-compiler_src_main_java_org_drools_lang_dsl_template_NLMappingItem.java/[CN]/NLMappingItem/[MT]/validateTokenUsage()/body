{
  final NLMappingItem item=this;
  final List result=new ArrayList();
  final Matcher natural=NLMappingItem.tokenPattern.matcher(item.getNaturalTemplate());
  final Matcher target=NLMappingItem.tokenPattern.matcher(item.getTargetTemplate());
  final Set naturalSet=new HashSet();
  final Set targetSet=new HashSet();
  while (natural.find()) {
    naturalSet.add(natural.group());
  }
  while (target.find()) {
    targetSet.add(target.group());
  }
  if (!naturalSet.equals(targetSet)) {
    final Set aux=new HashSet(naturalSet);
    naturalSet.removeAll(targetSet);
    targetSet.removeAll(aux);
    for (final Iterator i=naturalSet.iterator(); i.hasNext(); ) {
      final String token=(String)i.next();
      result.add(new MappingError(MappingError.ERROR_UNUSED_TOKEN,MappingError.TEMPLATE_NATURAL,item.getNaturalTemplate().indexOf(token),token,this.naturalTemplate));
    }
    for (final Iterator i=targetSet.iterator(); i.hasNext(); ) {
      final String token=(String)i.next();
      result.add(new MappingError(MappingError.ERROR_UNDECLARED_TOKEN,MappingError.TEMPLATE_TARGET,item.getTargetTemplate().indexOf(token),token,this.naturalTemplate));
    }
  }
  return result;
}
