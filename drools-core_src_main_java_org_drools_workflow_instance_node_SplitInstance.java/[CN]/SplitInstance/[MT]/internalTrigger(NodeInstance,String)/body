{
  if (!Node.CONNECTION_DEFAULT_TYPE.equals(type)) {
    throw new IllegalArgumentException("A Split only accepts default incoming connections!");
  }
  final Split split=getSplit();
switch (split.getType()) {
case Split.TYPE_AND:
    triggerCompleted(Node.CONNECTION_DEFAULT_TYPE,true);
  break;
case Split.TYPE_XOR:
List<Connection> outgoing=split.getDefaultOutgoingConnections();
int priority=Integer.MAX_VALUE;
Connection selected=null;
for (final Iterator<Connection> iterator=outgoing.iterator(); iterator.hasNext(); ) {
final Connection connection=(Connection)iterator.next();
ConstraintEvaluator constraint=(ConstraintEvaluator)split.getConstraint(connection);
if (constraint != null && constraint.getPriority() < priority) {
if (constraint.evaluate(this,connection,constraint)) {
selected=connection;
priority=constraint.getPriority();
}
}
}
getNodeInstanceContainer().removeNodeInstance(this);
if (selected == null) {
throw new IllegalArgumentException("XOR split could not find at least one valid outgoing connection for split " + getSplit().getName());
}
triggerConnection(selected);
break;
case Split.TYPE_OR:
getNodeInstanceContainer().removeNodeInstance(this);
outgoing=split.getDefaultOutgoingConnections();
boolean found=false;
List<Connection> outgoingCopy=new ArrayList<Connection>(outgoing);
while (!outgoingCopy.isEmpty()) {
priority=Integer.MAX_VALUE;
Connection selectedConnection=null;
ConstraintEvaluator selectedConstraint=null;
for (final Iterator<Connection> iterator=outgoingCopy.iterator(); iterator.hasNext(); ) {
final Connection connection=(Connection)iterator.next();
ConstraintEvaluator constraint=(ConstraintEvaluator)split.getConstraint(connection);
if (constraint != null && constraint.getPriority() < priority) {
priority=constraint.getPriority();
selectedConnection=connection;
selectedConstraint=constraint;
}
}
if (selectedConstraint.evaluate(this,selectedConnection,selectedConstraint)) {
triggerConnection(selectedConnection);
found=true;
}
outgoingCopy.remove(selectedConnection);
}
if (!found) {
throw new IllegalArgumentException("OR split could not find at least one valid outgoing connection for split " + getSplit().getName());
}
break;
default :
throw new IllegalArgumentException("Illegal split type " + split.getType());
}
}
