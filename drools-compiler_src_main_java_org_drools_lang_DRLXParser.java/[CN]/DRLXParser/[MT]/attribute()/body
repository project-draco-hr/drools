{
  AttributeDescrBuilder attribute=null;
  try {
    attribute=helper.start(AttributeDescrBuilder.class,null);
    if (helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)) {
      salience(attribute);
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)) {
      enabled(attribute);
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.LOOP)) {
      booleanAttribute(attribute,new String[]{DroolsSoftKeywords.NO,"-",DroolsSoftKeywords.LOOP});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.FOCUS)) {
      booleanAttribute(attribute,new String[]{DroolsSoftKeywords.AUTO,"-",DroolsSoftKeywords.FOCUS});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.ON)&& helper.validateLT(4,"-")&& helper.validateLT(5,DroolsSoftKeywords.ACTIVE)) {
      booleanAttribute(attribute,new String[]{DroolsSoftKeywords.LOCK,"-",DroolsSoftKeywords.ON,"-",DroolsSoftKeywords.ACTIVE});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)) {
      stringAttribute(attribute,new String[]{DroolsSoftKeywords.AGENDA,"-",DroolsSoftKeywords.GROUP});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)) {
      stringAttribute(attribute,new String[]{DroolsSoftKeywords.ACTIVATION,"-",DroolsSoftKeywords.GROUP});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.GROUP)) {
      stringAttribute(attribute,new String[]{DroolsSoftKeywords.RULEFLOW,"-",DroolsSoftKeywords.GROUP});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EFFECTIVE)) {
      stringAttribute(attribute,new String[]{DroolsSoftKeywords.DATE,"-",DroolsSoftKeywords.EFFECTIVE});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2,"-") && helper.validateLT(3,DroolsSoftKeywords.EXPIRES)) {
      stringAttribute(attribute,new String[]{DroolsSoftKeywords.DATE,"-",DroolsSoftKeywords.EXPIRES});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)) {
      stringAttribute(attribute,new String[]{DroolsSoftKeywords.DIALECT});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)) {
      stringListAttribute(attribute,new String[]{DroolsSoftKeywords.CALENDARS});
    }
 else     if (helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)) {
      intOrChunkAttribute(attribute,new String[]{DroolsSoftKeywords.TIMER});
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
  }
 finally {
    helper.end(AttributeDescrBuilder.class);
  }
  return (attribute != null) ? attribute.getDescr() : null;
}
