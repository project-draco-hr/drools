{
  RuleDescrBuilder rule=null;
  try {
    rule=helper.start(RuleDescrBuilder.class,null);
    match(input,DRLLexer.ID,DroolsSoftKeywords.RULE,null,DroolsEditorType.KEYWORD);
    if (state.failed)     return null;
    String name=ruleId();
    if (state.backtracking == 0)     rule.name(name);
    if (state.failed)     return null;
    if (helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)) {
      match(input,DRLLexer.ID,DroolsSoftKeywords.EXTENDS,null,DroolsEditorType.KEYWORD);
      if (state.failed)       return null;
      String parent=ruleId();
      if (state.backtracking == 0)       rule.extendsRule(parent);
      if (state.failed)       return null;
    }
    while (input.LA(1) == DRLLexer.AT) {
      annotation(rule);
      if (state.failed)       return null;
    }
    attributes(rule);
    lhs();
    rhs();
    match(input,DRLLexer.ID,DroolsSoftKeywords.END,null,DroolsEditorType.KEYWORD);
    if (state.failed)     return null;
    if (input.LA(1) == DRLLexer.SEMICOLON) {
      match(input,DRLLexer.SEMICOLON,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return null;
    }
  }
 catch (  RecognitionException re) {
    reportError(re);
  }
 finally {
    helper.end(DeclareDescrBuilder.class);
  }
  return (rule != null) ? rule.getDescr() : null;
}
