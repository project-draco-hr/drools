{
  CEDescrBuilder<?,AndDescr> not=null;
  match(input,DRLLexer.ID,DroolsSoftKeywords.NOT,null,DroolsEditorType.KEYWORD);
  if (state.failed)   return null;
  if (state.backtracking == 0) {
    not=ce.and();
  }
  if (input.LA(1) == DRLLexer.LEFT_PAREN) {
    boolean prefixed=helper.validateLT(2,DroolsSoftKeywords.AND) || helper.validateLT(2,DroolsSoftKeywords.OR);
    if (!prefixed) {
      match(input,DRLLexer.LEFT_PAREN,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return null;
    }
    lhsOr(not);
    if (state.failed)     return null;
    if (!prefixed) {
      match(input,DRLLexer.RIGHT_PAREN,null,null,DroolsEditorType.SYMBOL);
      if (state.failed)       return null;
    }
  }
 else {
    lhsPattern(not);
    if (state.failed)     return null;
  }
  return not != null ? not.getDescr() : null;
}
