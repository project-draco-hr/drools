{
  lock();
  try {
    final InternalKnowledgePackage pkg=this.pkgs.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException("Package name '" + packageName + "' does not exist for this Rule Base.");
    }
    this.eventSupport.fireBeforePackageRemoved(pkg);
    for (    Rule rule : pkg.getRules()) {
      removeRule(pkg,(RuleImpl)rule);
    }
    final Set<String> referencedGlobals=new HashSet<String>();
    for (    InternalKnowledgePackage pkgref : this.pkgs.values()) {
      if (pkgref != pkg) {
        referencedGlobals.addAll(pkgref.getGlobals().keySet());
      }
    }
    for (    String globalName : pkg.getGlobals().keySet()) {
      if (!referencedGlobals.contains(globalName)) {
        this.globals.remove(globalName);
      }
    }
    for (    String processName : new ArrayList<String>(pkg.getRuleFlows().keySet())) {
      removeProcess(processName);
    }
    this.pkgs.remove(pkg.getName());
    pkg.getDialectRuntimeRegistry().onRemove();
    pkg.clear();
    this.eventSupport.fireAfterPackageRemoved(pkg);
  }
  finally {
    unlock();
  }
}
