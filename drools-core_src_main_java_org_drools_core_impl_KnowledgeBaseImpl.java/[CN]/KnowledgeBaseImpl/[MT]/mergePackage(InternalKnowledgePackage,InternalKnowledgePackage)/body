{
  final Map<String,ImportDeclaration> imports=pkg.getImports();
  imports.putAll(newPkg.getImports());
  for (  String staticImport : newPkg.getStaticImports()) {
    pkg.addStaticImport(staticImport);
  }
  String lastIdent=null;
  String lastType=null;
  try {
    if (newPkg.getGlobals() != null && newPkg.getGlobals() != Collections.EMPTY_MAP) {
      Map<String,String> globals=pkg.getGlobals();
      for (      final Map.Entry<String,String> entry : newPkg.getGlobals().entrySet()) {
        final String identifier=entry.getKey();
        final String type=entry.getValue();
        lastIdent=identifier;
        lastType=type;
        if (globals.containsKey(identifier) && !globals.get(identifier).equals(type)) {
          throw new RuntimeException(pkg.getName() + " cannot be integrated");
        }
 else {
          pkg.addGlobal(identifier,this.rootClassLoader.loadClass(type));
          addGlobal(identifier,this.rootClassLoader.loadClass(type));
        }
      }
    }
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Unable to resolve class '" + lastType + "' for global '"+ lastIdent+ "'");
  }
  if (newPkg.getEntryPointIds() != null) {
    for (    String ep : newPkg.getEntryPointIds()) {
      pkg.addEntryPointId(ep);
    }
  }
  if (newPkg.getTypeDeclarations() != null) {
    for (    TypeDeclaration type : newPkg.getTypeDeclarations().values()) {
      if (!pkg.getTypeDeclarations().containsKey(type.getTypeName())) {
        pkg.addTypeDeclaration(type);
      }
    }
  }
  if (newPkg.getWindowDeclarations() != null) {
    for (    WindowDeclaration window : newPkg.getWindowDeclarations().values()) {
      if (!pkg.getWindowDeclarations().containsKey(window.getName()) || pkg.getWindowDeclarations().get(window.getName()).equals(window)) {
        pkg.addWindowDeclaration(window);
      }
 else {
        throw new RuntimeException("Unable to merge two conflicting window declarations for window named: " + window.getName());
      }
    }
  }
  for (  Rule newRule : newPkg.getRules()) {
    if (pkg.getRule(newRule.getName()) != null) {
      removeRule(pkg,pkg.getRule(newRule.getName()));
    }
    pkg.addRule((RuleImpl)newRule);
  }
  if (newPkg.getRuleFlows() != null) {
    for (    Process flow : newPkg.getRuleFlows().values()) {
      pkg.addProcess(flow);
    }
  }
  if (!newPkg.getResourceTypePackages().isEmpty()) {
    for (    ResourceTypePackage rtkKpg : newPkg.getResourceTypePackages().values()) {
      ResourceType rt=rtkKpg.getResourceType();
      KieWeavers weavers=ServiceRegistryImpl.getInstance().get(KieWeavers.class);
      KieWeaverService weaver=weavers.getWeavers().get(rt);
      weaver.merge(this,pkg,rtkKpg);
    }
  }
}
