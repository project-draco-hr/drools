{
  DroolsObjectInput droolsStream;
  boolean isDrools=in instanceof DroolsObjectInputStream;
  boolean wasDrools=in.readBoolean();
  if (wasDrools && !isDrools) {
    throw new IllegalArgumentException("The knowledge base was serialized using a DroolsObjectOutputStream. A DroolsObjectInputStream is required for deserialization.");
  }
  if (isDrools) {
    droolsStream=(DroolsObjectInput)in;
  }
 else {
    ByteArrayInputStream bytes=new ByteArrayInputStream((byte[])in.readObject());
    droolsStream=new DroolsObjectInputStream(bytes);
  }
  boolean classLoaderCacheEnabled=droolsStream.readBoolean();
  Map<String,byte[]> store=(Map<String,byte[]>)droolsStream.readObject();
  this.rootClassLoader=createProjectClassLoader(droolsStream.getParentClassLoader(),store);
  droolsStream.setClassLoader(this.rootClassLoader);
  droolsStream.setKnowledgeBase(this);
  this.classFieldAccessorCache=new ClassFieldAccessorCache(this.rootClassLoader);
  this.config=(RuleBaseConfiguration)droolsStream.readObject();
  this.config.setClassLoader(droolsStream.getParentClassLoader());
  kieComponentFactory=getConfiguration().getComponentFactory();
  this.pkgs=(Map<String,InternalKnowledgePackage>)droolsStream.readObject();
  for (  InternalKnowledgePackage pkg : this.pkgs.values()) {
    pkg.getDialectRuntimeRegistry().onAdd(this.rootClassLoader);
  }
  this.id=(String)droolsStream.readObject();
  this.workingMemoryCounter.set(droolsStream.readInt());
  this.processes=(Map<String,Process>)droolsStream.readObject();
  Class cls=null;
  try {
    cls=droolsStream.getParentClassLoader().loadClass(droolsStream.readUTF());
    this.factHandleFactory=(FactHandleFactory)cls.newInstance();
  }
 catch (  InstantiationException e) {
    DroolsObjectInputStream.newInvalidClassException(cls,e);
  }
catch (  IllegalAccessException e) {
    DroolsObjectInputStream.newInvalidClassException(cls,e);
  }
  for (  InternalKnowledgePackage pkg : this.pkgs.values()) {
    pkg.getDialectRuntimeRegistry().onBeforeExecute();
    pkg.getClassFieldAccessorStore().setClassFieldAccessorCache(this.classFieldAccessorCache);
    pkg.getClassFieldAccessorStore().wire();
  }
  this.populateTypeDeclarationMaps();
  Map<String,String> globs=(Map<String,String>)droolsStream.readObject();
  populateGlobalsMap(globs);
  this.partitionIDs=(List<RuleBasePartitionId>)droolsStream.readObject();
  this.eventSupport=(KieBaseEventSupport)droolsStream.readObject();
  this.eventSupport.setKnowledgeBase(this);
  this.statefulSessions=new ObjectHashSet();
  this.reteooBuilder=(ReteooBuilder)droolsStream.readObject();
  this.reteooBuilder.setRuleBase(this);
  this.rete=(Rete)droolsStream.readObject();
  if (!isDrools) {
    droolsStream.close();
  }
  this.getConfiguration().getComponentFactory().getTraitFactory().setRuleBase(this);
}
