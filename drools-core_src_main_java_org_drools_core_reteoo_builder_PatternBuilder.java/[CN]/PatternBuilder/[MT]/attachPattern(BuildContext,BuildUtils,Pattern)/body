{
  pattern.setOffset(context.getCurrentPatternOffset());
  if (ClassObjectType.Match_ObjectType.isAssignableFrom(pattern.getObjectType())) {
    PropertyHandler handler=PropertyHandlerFactory.getPropertyHandler(AgendaItemImpl.class);
    if (handler == null) {
      PropertyHandlerFactoryFixer.getPropertyHandlerClass().put(AgendaItemImpl.class,new ActivationPropertyHandler());
    }
  }
  Constraints constraints=createConstraints(context,pattern);
  context.setBetaconstraints(constraints.betaConstraints);
  if (pattern.getSource() != null) {
    context.setAlphaConstraints(constraints.alphaConstraints);
    final int currentOffset=context.getCurrentPatternOffset();
    PatternSource source=pattern.getSource();
    ReteooComponentBuilder builder=utils.getBuilderFor(source);
    if (builder == null) {
      throw new RuntimeException("Unknown pattern source type: " + source.getClass() + " for source "+ source+ " on pattern "+ pattern);
    }
    builder.build(context,utils,source);
    context.setCurrentPatternOffset(currentOffset);
  }
 else {
    PatternSource source=EntryPointId.DEFAULT;
    ReteooComponentBuilder builder=utils.getBuilderFor(source);
    builder.build(context,utils,source);
  }
  buildBehaviors(context,utils,pattern,constraints);
  if (context.getObjectSource() != null) {
    attachAlphaNodes(context,utils,pattern,constraints.alphaConstraints);
  }
  buildXpathConstraints(context,utils,pattern,constraints);
  context.incrementCurrentPatternOffset();
}
