{
  if (!constraints.xpathConstraints.isEmpty()) {
    buildTupleSource(context,utils);
    List<BetaNodeFieldConstraint> xpathConstraints=context.getBetaconstraints();
    context.setBetaconstraints(Collections.<BetaNodeFieldConstraint>emptyList());
    buildJoinNode(context,utils);
    context.setBetaconstraints(xpathConstraints);
    context.setAlphaConstraints(null);
    ReteooComponentBuilder builder=utils.getBuilderFor(ReactiveFromNode.class);
    for (    XpathConstraint xpathConstraint : constraints.xpathConstraints) {
      for (      XpathConstraint.XpathChunk chunk : xpathConstraint.getChunks()) {
        builder.build(context,utils,chunk.asFrom());
        context.incrementCurrentPatternOffset();
      }
      Declaration declaration=xpathConstraint.getDeclaration();
      Pattern clonedPattern=new Pattern(pattern.getIndex(),context.getCurrentPatternOffset(),new ClassObjectType(xpathConstraint.getResultClass()),declaration.getIdentifier(),declaration.isInternalFact());
      declaration.setPattern(clonedPattern);
    }
    context.setAlphaConstraints(null);
    context.setBetaconstraints(null);
    context.popRuleComponent();
  }
}
