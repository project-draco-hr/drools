{
  if (!constraints.xpathConstraints.isEmpty()) {
    buildTupleSource(context,utils);
    if (constraints.xpathConstraints.size() == 1 && constraints.xpathConstraints.get(0).getXpathStartDeclaration() != null) {
      context.setObjectSource(null);
      context.decrementCurrentPatternOffset();
    }
 else {
      buildJoinNode(context,utils);
    }
    ReteooComponentBuilder builder=utils.getBuilderFor(XpathConstraint.class);
    for (    XpathConstraint xpathConstraint : constraints.xpathConstraints) {
      for (      XpathConstraint.XpathChunk chunk : xpathConstraint.getChunks()) {
        context.setAlphaConstraints(chunk.getAlphaConstraints());
        context.setBetaconstraints(chunk.getBetaConstraints());
        builder.build(context,utils,chunk.asFrom());
        context.incrementCurrentPatternOffset();
      }
      Declaration declaration=xpathConstraint.getDeclaration();
      Pattern clonedPattern=new Pattern(pattern.getIndex(),context.getCurrentPatternOffset(),new ClassObjectType(xpathConstraint.getResultClass()),declaration.getIdentifier(),declaration.isInternalFact());
      declaration.setPattern(clonedPattern);
    }
    context.popRuleComponent();
  }
}
