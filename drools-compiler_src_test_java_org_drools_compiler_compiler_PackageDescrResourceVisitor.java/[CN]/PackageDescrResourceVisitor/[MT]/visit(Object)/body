{
  StackTraceElement[] stack=Thread.currentThread().getStackTrace();
  String lastMethodName=null;
  for (int i=0; i < 5; ++i) {
    String thisMethodName=stack[i].getMethodName() + ":" + stack[i].getLineNumber();
    if (thisMethodName.equals(lastMethodName)) {
      fail("Infinite loop detected!");
    }
    lastMethodName=thisMethodName;
  }
  if (descr instanceof AccessorDescr) {
    visit((AccessorDescr)descr);
  }
 else   if (descr instanceof AccumulateDescr) {
    visit((AccumulateDescr)descr);
  }
 else   if (descr instanceof ActionDescr) {
    visit((ActionDescr)descr);
  }
 else   if (descr instanceof AndDescr) {
    visit((AndDescr)descr);
  }
 else   if (descr instanceof AnnotationDescr) {
    visit((AnnotationDescr)descr);
  }
 else   if (descr instanceof AtomicExprDescr) {
    visit((AtomicExprDescr)descr);
  }
 else   if (descr instanceof AttributeDescr) {
    visit((AttributeDescr)descr);
  }
 else   if (descr instanceof BindingDescr) {
    visit((BindingDescr)descr);
  }
 else   if (descr instanceof CollectDescr) {
    visit((CollectDescr)descr);
  }
 else   if (descr instanceof ConstraintConnectiveDescr) {
    visit((ConstraintConnectiveDescr)descr);
  }
 else   if (descr instanceof ExistsDescr) {
    visit((ExistsDescr)descr);
  }
 else   if (descr instanceof ExprConstraintDescr) {
    visit((ExprConstraintDescr)descr);
  }
 else   if (descr instanceof FactTemplateDescr) {
    visit((FactTemplateDescr)descr);
  }
 else   if (descr instanceof FieldConstraintDescr) {
    visit((FieldConstraintDescr)descr);
  }
 else   if (descr instanceof FieldTemplateDescr) {
    visit((FieldTemplateDescr)descr);
  }
 else   if (descr instanceof ForallDescr) {
    visit((ForallDescr)descr);
  }
 else   if (descr instanceof FromDescr) {
    visit((FromDescr)descr);
  }
 else   if (descr instanceof FunctionDescr) {
    visit((FunctionDescr)descr);
  }
 else   if (descr instanceof FunctionImportDescr) {
    visit((FunctionImportDescr)descr);
  }
 else   if (descr instanceof GlobalDescr) {
    visit((GlobalDescr)descr);
  }
 else   if (descr instanceof ImportDescr) {
    visit((ImportDescr)descr);
  }
 else   if (descr instanceof LiteralRestrictionDescr) {
    visit((LiteralRestrictionDescr)descr);
  }
 else   if (descr instanceof MVELExprDescr) {
    visit((MVELExprDescr)descr);
  }
 else   if (descr instanceof NotDescr) {
    visit((NotDescr)descr);
  }
 else   if (descr instanceof OrDescr) {
    visit((OrDescr)descr);
  }
 else   if (descr instanceof PackageDescr) {
    visit((PackageDescr)descr);
  }
 else   if (descr instanceof PatternDescr) {
    visit((PatternDescr)descr);
  }
 else   if (descr instanceof PredicateDescr) {
    visit((PredicateDescr)descr);
  }
 else   if (descr instanceof QueryDescr) {
    visit((QueryDescr)descr);
  }
 else   if (descr instanceof RelationalExprDescr) {
    visit((RelationalExprDescr)descr);
  }
 else   if (descr instanceof RuleDescr) {
    visit((RuleDescr)descr);
  }
 else   if (descr instanceof TypeDeclarationDescr) {
    visit((TypeDeclarationDescr)descr);
  }
 else   if (descr instanceof TypeFieldDescr) {
    visit((TypeFieldDescr)descr);
  }
 else   if (descr instanceof WindowDeclarationDescr) {
    visit((WindowDeclarationDescr)descr);
  }
 else   if (descr instanceof NamedConsequenceDescr) {
    visit((NamedConsequenceDescr)descr);
  }
 else   if (descr instanceof EvalDescr) {
    visit((EvalDescr)descr);
  }
 else   if (descr instanceof BehaviorDescr) {
    visit((BehaviorDescr)descr);
  }
 else {
    throw new RuntimeException("xx DID NOT VISIT: " + descr.getClass().getName());
  }
}
