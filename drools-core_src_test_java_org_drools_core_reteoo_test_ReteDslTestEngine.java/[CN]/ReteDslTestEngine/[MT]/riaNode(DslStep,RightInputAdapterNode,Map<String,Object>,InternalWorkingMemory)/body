{
  try {
    List<String[]> cmds=step.getCommands();
    List<InternalFactHandle> handles=(List<InternalFactHandle>)context.get("Handles");
    BetaMemory bm;
    Memory childMemory=wm.getNodeMemory(node);
    if (node.getType() == NodeTypeEnums.AccumulateNode) {
      bm=((AccumulateMemory)childMemory).getBetaMemory();
    }
 else {
      bm=(BetaMemory)childMemory;
    }
    int memorySize=bm.getRightTupleMemory().size();
    for (    String[] cmd : cmds) {
      if (cmd[0].equals("leftMemory")) {
        String args=cmd[1];
        String listString=args.replaceAll("h(\\d+)","h[$1]");
        Map<String,Object> vars=new HashMap<String,Object>();
        vars.put("h",handles);
        List<?> expectedLeftTuples=(List<?>)MVEL.eval(listString,vars);
        if (expectedLeftTuples.isEmpty() && memorySize != 0) {
          throw new AssertionError("line " + step.getLine() + ": left tuples expected "+ expectedLeftTuples.isEmpty()+ " actually "+ memorySize);
        }
 else         if (expectedLeftTuples.isEmpty() && memorySize == 0) {
          return;
        }
        List<LeftTuple> leftTuples=new ArrayList<LeftTuple>();
        for (        List<InternalFactHandle> tlist : (List<List<InternalFactHandle>>)expectedLeftTuples) {
          LeftTuple tuple=new LeftTupleImpl(tlist.get(0),null,false);
          for (int i=1; i < tlist.size(); i++) {
            tuple=new LeftTupleImpl(tuple,new RightTupleImpl(tlist.get(i)),null,false);
          }
          leftTuples.add(tuple);
        }
        final List<LeftTuple> actualTuples=new ArrayList<LeftTuple>();
        final Iterator it=bm.getRightTupleMemory().iterator();
        for (RightTuple entry=(RightTuple)it.next(); entry != null; entry=(RightTuple)it.next()) {
          LeftTuple leftTuple=(LeftTuple)entry.getFactHandle().getObject();
          actualTuples.add(leftTuple);
        }
        for (        LeftTuple tuple : leftTuples) {
          if (!actualTuples.remove(tuple)) {
            throw new AssertionError("line " + step.getLine() + ": left Memory expected "+ tuple+ " not found in memory.");
          }
        }
        if (!actualTuples.isEmpty()) {
          throw new AssertionError("line " + step.getLine() + ": left Memory unexpected tuples in the node memory "+ actualTuples);
        }
      }
 else {
        throw new IllegalArgumentException("line " + step.getLine() + ": command does not exist "+ Arrays.toString(cmd));
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("line " + step.getLine() + ": unable to execute step "+ step,e);
  }
}
