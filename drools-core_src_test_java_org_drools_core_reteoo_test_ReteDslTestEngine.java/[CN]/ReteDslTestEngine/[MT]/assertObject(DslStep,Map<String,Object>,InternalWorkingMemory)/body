{
  try {
    List<String[]> cmds=step.getCommands();
    List<InternalFactHandle> handles=(List<InternalFactHandle>)context.get("Handles");
    for (    String[] cmd : cmds) {
      try {
        String nodeName=cmd[0];
        Sink sink=(Sink)context.get(nodeName);
        if (sink == null) {
          throw new IllegalArgumentException("line " + step.getLine() + ": node "+ nodeName+ " does not exist");
        }
        Map<String,Object> vars=new HashMap<String,Object>();
        vars.put("h",handles);
        String args=cmd[1];
        String listString=args.replaceAll("h(\\d+)","h[$1]");
        List<?> list=(List<?>)MVEL.eval(listString,vars);
        if (list == null) {
          throw new IllegalArgumentException(cmd + " does not specify an existing fact handle");
        }
        for (        Object element : list) {
          if (element == null) {
            throw new IllegalArgumentException(cmd + " does not specify an existing fact handle");
          }
          if (element instanceof InternalFactHandle) {
            InternalFactHandle handle=(InternalFactHandle)element;
            PropagationContext pContext=new PropagationContextImpl(wm.getNextPropagationIdCounter(),PropagationContext.INSERTION,null,null,handle);
            ((ObjectSink)sink).assertObject(handle,pContext,wm);
            pContext.evaluateActionQueue(wm);
          }
 else {
            List<InternalFactHandle> tlist=(List<InternalFactHandle>)element;
            LeftTuple tuple=createTuple(context,tlist);
            PropagationContext pContext=new PropagationContextImpl(wm.getNextPropagationIdCounter(),PropagationContext.INSERTION,null,tuple,null);
            ((LeftTupleSink)sink).assertLeftTuple(tuple,pContext,wm);
            pContext.evaluateActionQueue(wm);
          }
        }
      }
 catch (      Exception e) {
        throw new IllegalArgumentException("line " + step.getLine() + ": unable to execute command "+ cmd,e);
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("line " + step.getLine() + ": unable to execute step "+ step,e);
  }
}
