{
  Class coreKlass=core.getClass();
  ClassDefinition tdef=TraitRegistry.getInstance().getTrait(trait.getName());
  ClassDefinition cdef=TraitRegistry.getInstance().getTraitable(coreKlass.getName());
  String proxyName=getProxyName(tdef,cdef);
  String wrapperName=getPropertyWrapperName(tdef,cdef);
  ReteooComponentFactory rcf=ruleBase.getConfiguration().getComponentFactory();
  TraitPropertyWrapperClassBuilder propWrapperBuilder=(TraitPropertyWrapperClassBuilder)rcf.getClassBuilderFactory().getPropertyWrapperBuilder();
  propWrapperBuilder.init(tdef);
  try {
    byte[] propWrapper=propWrapperBuilder.buildClass(cdef);
    ruleBase.registerAndLoadTypeDefinition(wrapperName,propWrapper);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  TraitProxyClassBuilder proxyBuilder=(TraitProxyClassBuilder)rcf.getClassBuilderFactory().getTraitProxyBuilder();
  proxyBuilder.init(tdef,rcf.getBaseTraitProxyClass());
  try {
    byte[] proxy=proxyBuilder.buildClass(cdef);
    ruleBase.registerAndLoadTypeDefinition(proxyName,proxy);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    long mask=TraitRegistry.getInstance().getFieldMask(trait.getName(),cdef.getDefinedClass().getName());
    Class<T> proxyClass=(Class<T>)ruleBase.getRootClassLoader().loadClass(proxyName,true);
    bindAccessors(proxyClass,tdef,cdef,mask);
    Class<T> wrapperClass=(Class<T>)ruleBase.getRootClassLoader().loadClass(wrapperName,true);
    bindCoreAccessors(wrapperClass,cdef);
    return proxyClass;
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return null;
  }
}
