{
  try {
{
      pushFollow(FOLLOW_relationalExpression_in_equalityExpression2249);
      relationalExpression();
      this._fsp--;
      loop58:       do {
        int alt58=2;
        final int LA58_0=this.input.LA(1);
        if (((LA58_0 >= NOT_EQUAL && LA58_0 <= EQUAL))) {
          alt58=1;
        }
switch (alt58) {
case 1:
{
            if ((this.input.LA(1) >= NOT_EQUAL && this.input.LA(1) <= EQUAL)) {
              this.input.consume();
              this.errorRecovery=false;
            }
 else {
              final MismatchedSetException mse=new MismatchedSetException(null,this.input);
              recoverFromMismatchedSet(this.input,mse,FOLLOW_set_in_equalityExpression2253);
              throw mse;
            }
            pushFollow(FOLLOW_relationalExpression_in_equalityExpression2260);
            relationalExpression();
            this._fsp--;
          }
        break;
default :
      break loop58;
  }
}
 while (true);
}
}
 catch (final RecognitionException re) {
reportError(re);
recover(this.input,re);
}
 finally {
}
return;
}
