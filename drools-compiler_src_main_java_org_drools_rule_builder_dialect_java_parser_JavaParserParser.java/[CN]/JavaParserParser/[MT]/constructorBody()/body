{
  try {
{
      match(input,LCURLY,FOLLOW_LCURLY_in_constructorBody739);
      int alt20=2;
      int LA20_0=input.LA(1);
      if ((LA20_0 == 93)) {
        int LA20_1=input.LA(2);
        if ((LA20_1 == LPAREN)) {
          alt20=1;
        }
      }
 else       if ((LA20_0 == 94)) {
        int LA20_2=input.LA(2);
        if ((LA20_2 == LPAREN)) {
          alt20=1;
        }
      }
switch (alt20) {
case 1:
{
          pushFollow(FOLLOW_explicitConstructorInvocation_in_constructorBody765);
          explicitConstructorInvocation();
          _fsp--;
        }
      break;
  }
  loop21:   do {
    int alt21=2;
    int LA21_0=input.LA(1);
    if ((LA21_0 == IDENT || (LA21_0 >= LCURLY && LA21_0 <= SEMI) || LA21_0 == LPAREN || (LA21_0 >= PLUS && LA21_0 <= MINUS) || (LA21_0 >= INC && LA21_0 <= NUM_FLOAT) || (LA21_0 >= 68 && LA21_0 <= 89) || (LA21_0 >= 93 && LA21_0 <= 94) || LA21_0 == 96 || (LA21_0 >= 98 && LA21_0 <= 105) || LA21_0 == 108 || (LA21_0 >= 112 && LA21_0 <= 115))) {
      alt21=1;
    }
switch (alt21) {
case 1:
{
        pushFollow(FOLLOW_statement_in_constructorBody782);
        statement();
        _fsp--;
      }
    break;
default :
  break loop21;
}
}
 while (true);
match(input,RCURLY,FOLLOW_RCURLY_in_constructorBody794);
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
}
return;
}
