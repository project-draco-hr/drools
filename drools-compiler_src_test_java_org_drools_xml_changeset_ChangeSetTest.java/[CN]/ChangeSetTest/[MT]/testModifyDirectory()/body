{
  File dir=File.createTempFile(UUID.randomUUID().toString(),"");
  dir=dir.getParentFile();
  dir.deleteOnExit();
  dir=new File(dir,UUID.randomUUID().toString());
  dir.mkdir();
  dir.deleteOnExit();
  String rule1="";
  rule1+="package org.drools.test\n";
  rule1+="global java.util.List list\n";
  rule1+="rule rule1\n";
  rule1+="when\n";
  rule1+="then\n";
  rule1+="list.add( drools.getRule().getName() );\n";
  rule1+="end\n";
  File f1=File.createTempFile("rule1",".drl",dir);
  f1.deleteOnExit();
  Writer output=new BufferedWriter(new FileWriter(f1));
  output.write(rule1);
  output.close();
  String rule2="";
  rule2+="package org.drools.test\n";
  rule2+="global java.util.List list\n";
  rule2+="rule rule2\n";
  rule2+="when\n";
  rule2+="then\n";
  rule2+="list.add( drools.getRule().getName() );\n";
  rule2+="end\n";
  File f2=File.createTempFile("rule2",".drl",dir);
  f2.deleteOnExit();
  output=new BufferedWriter(new FileWriter(f2));
  output.write(rule2);
  output.close();
  String xml="";
  xml+="<change-set xmlns='http://drools.org/drools-5.0/change-set'";
  xml+="    xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'";
  xml+="    xs:schemaLocation='http://drools.org/drools-5.0/change-set drools-change-set-5.0.xsd' >";
  xml+="    <add> ";
  xml+="        <resource source='" + f1.getParentFile().toURI().toURL() + "' type='DRL' />";
  xml+="    </add> ";
  xml+="</change-set>";
  File fxml=File.createTempFile("changeset",".xml");
  fxml.deleteOnExit();
  output=new BufferedWriter(new FileWriter(fxml));
  output.write(xml);
  output.close();
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newUrlResource(fxml.toURI().toURL()),KnowledgeType.ChangeSet);
  assertFalse(kbuilder.hasErrors());
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ResourceChangeScannerConfiguration sconf=ResourceFactory.getResourceChangeScannerService().newResourceChangeScannerConfiguration();
  sconf.setProperty("drools.resource.scanner.interval","2");
  ResourceFactory.getResourceChangeScannerService().configure(sconf);
  KnowledgeAgentConfiguration aconf=KnowledgeAgentFactory.newKnowledgeAgentConfiguration();
  aconf.setProperty("drools.agent.scanResources","true");
  aconf.setProperty("drools.agent.newInstance","true");
  KnowledgeAgent kagent=KnowledgeAgentFactory.newKnowledgeAgent("test agent",kbase,aconf);
  StatefulKnowledgeSession ksession=kagent.getKnowledgeBase().newStatefulKnowledgeSession();
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  ksession.dispose();
  assertEquals(2,list.size());
  assertTrue(list.contains("rule1"));
  assertTrue(list.contains("rule2"));
  list.clear();
  String rule3="";
  rule3+="package org.drools.test\n";
  rule3+="global java.util.List list\n";
  rule3+="rule rule3\n";
  rule3+="when\n";
  rule3+="then\n";
  rule3+="list.add( drools.getRule().getName() );\n";
  rule3+="end\n";
  File f3=File.createTempFile("rule3",".drl",dir);
  f3.deleteOnExit();
  output=new BufferedWriter(new FileWriter(f3));
  output.write(rule3);
  output.close();
  assertTrue(f1.delete());
  Thread.sleep(3000);
  ksession=kagent.getKnowledgeBase().newStatefulKnowledgeSession();
  list=new ArrayList();
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  ksession.dispose();
  assertEquals(2,list.size());
  assertTrue(list.contains("rule2"));
  assertTrue(list.contains("rule3"));
}
