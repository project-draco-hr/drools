{
  String internalWrapper=BuildUtils.getInternalType(wrapperName);
  String internalCore=BuildUtils.getInternalType(coreName);
  String descrCore=BuildUtils.getTypeDescriptor(coreName);
  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,"put","(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;",null,null);
  mv.visitCode();
  if (core.getFieldsDefinitions().size() > 0) {
    int j=0;
    for (    FieldDefinition field : core.getFieldsDefinitions()) {
      mv.visitLdcInsn(field.getName());
      mv.visitVarInsn(ALOAD,1);
      mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/String","equals","(Ljava/lang/Object;)Z");
      Label l1=new Label();
      mv.visitJumpInsn(IFEQ,l1);
      mv.visitVarInsn(ALOAD,2);
      if (BuildUtils.isPrimitive(field.getTypeName())) {
        promote(mv,field.getTypeName());
        mv.visitVarInsn(BuildUtils.storeType(field.getTypeName()),3);
        invokeInjector(mv,wrapperName,trait,core,field,false,3);
      }
 else {
        invokeInjector(mv,wrapperName,trait,core,field,false,2);
      }
      mv.visitVarInsn(ALOAD,2);
      mv.visitInsn(ARETURN);
      mv.visitLabel(l1);
    }
  }
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,internalWrapper,"map","Ljava/util/Map;");
  mv.visitVarInsn(ALOAD,1);
  mv.visitVarInsn(ALOAD,2);
  mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
  mv.visitInsn(ARETURN);
  mv.visitMaxs(4,5);
  mv.visitEnd();
}
