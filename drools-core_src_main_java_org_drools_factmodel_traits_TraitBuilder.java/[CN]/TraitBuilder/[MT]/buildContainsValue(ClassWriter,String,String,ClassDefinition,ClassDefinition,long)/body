{
  String internalWrapper=BuildUtils.getInternalType(wrapperName);
  String internalCore=BuildUtils.getInternalType(coreName);
  String descrCore=BuildUtils.getTypeDescriptor(coreName);
  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,"containsValue","(Ljava/lang/Object;)Z",null,null);
  mv.visitCode();
  mv.visitVarInsn(ALOAD,1);
  Label l99=new Label();
  mv.visitJumpInsn(IFNONNULL,l99);
  for (  FieldDefinition field : core.getFieldsDefinitions()) {
    if (!BuildUtils.isPrimitive(field.getTypeName())) {
      invokeExtractor(mv,wrapperName,trait,core,field);
      Label l1=new Label();
      mv.visitJumpInsn(IFNONNULL,l1);
      mv.visitInsn(ICONST_1);
      mv.visitInsn(IRETURN);
      mv.visitLabel(l1);
    }
  }
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,internalWrapper,"map","Ljava/util/Map;");
  mv.visitInsn(ACONST_NULL);
  mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","containsValue","(Ljava/lang/Object;)Z");
  mv.visitInsn(IRETURN);
  mv.visitLabel(l99);
  for (  FieldDefinition field : core.getFieldsDefinitions()) {
    mv.visitVarInsn(ALOAD,1);
    invokeExtractor(mv,wrapperName,trait,core,field);
    if (BuildUtils.isPrimitive(field.getTypeName())) {
      valueOf(mv,field.getTypeName());
    }
    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Object","equals","(Ljava/lang/Object;)Z");
    Label l0=new Label();
    mv.visitJumpInsn(IFEQ,l0);
    mv.visitInsn(ICONST_1);
    mv.visitInsn(IRETURN);
    mv.visitLabel(l0);
  }
  mv.visitVarInsn(ALOAD,0);
  mv.visitFieldInsn(GETFIELD,internalWrapper,"map","Ljava/util/Map;");
  mv.visitVarInsn(ALOAD,1);
  mv.visitMethodInsn(INVOKEINTERFACE,"java/util/Map","containsValue","(Ljava/lang/Object;)Z");
  mv.visitInsn(IRETURN);
  mv.visitMaxs(core.getFieldsDefinitions().size() > 0 ? 3 : 2,2);
  mv.visitEnd();
}
