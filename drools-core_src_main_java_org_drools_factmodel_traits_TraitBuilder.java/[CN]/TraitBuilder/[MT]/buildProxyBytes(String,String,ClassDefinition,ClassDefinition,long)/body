{
  ClassWriter cw=new ClassWriter(0);
  FieldVisitor fv;
  MethodVisitor mv;
  String internalWrapper=BuildUtils.getInternalType(name);
  String internalProxy=BuildUtils.getInternalType(masterName);
  String descrWrapper=BuildUtils.getTypeDescriptor(name);
  String descrProxy=BuildUtils.getTypeDescriptor(masterName);
  String internalCore=BuildUtils.getInternalType(core.getClassName());
  String descrCore=BuildUtils.getTypeDescriptor(core.getClassName());
  String internalTrait=BuildUtils.getInternalType(trait.getClassName());
  String descrTrait=BuildUtils.getTypeDescriptor(trait.getClassName());
  Class mixinClass=null;
  String mixin=null;
  Set<Method> mixinMethods=new HashSet<Method>();
  Map<String,Method> mixinGetSet=new HashMap<String,Method>();
  try {
    if (trait.getDefinedClass() != null) {
      Trait annTrait=trait.getDefinedClass().getAnnotation(Trait.class);
      if (annTrait != null && !annTrait.impl().equals(Trait.NullMixin.class)) {
        mixinClass=annTrait.impl();
        mixin=mixinClass.getSimpleName().substring(0,1).toLowerCase() + mixinClass.getSimpleName().substring(1);
        ClassFieldInspector cfi=new ClassFieldInspector(mixinClass);
        for (        Method m : mixinClass.getMethods()) {
          try {
            trait.getDefinedClass().getMethod(m.getName(),m.getParameterTypes());
            if (cfi.getGetterMethods().containsValue(m) || cfi.getSetterMethods().containsValue(m)) {
              mixinGetSet.put(m.getName(),m);
            }
 else {
              mixinMethods.add(m);
            }
          }
 catch (          NoSuchMethodException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,internalProxy,null,"org/drools/factmodel/traits/TraitProxy",new String[]{internalTrait});
{
    fv=cw.visitField(ACC_PUBLIC + ACC_FINAL,"object",descrCore,null,null);
    fv.visitEnd();
  }
{
    fv=cw.visitField(ACC_PUBLIC + ACC_FINAL,"map","Ljava/util/Map;","Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;",null);
    fv.visitEnd();
  }
  if (mixinClass != null) {
{
      fv=cw.visitField(ACC_PRIVATE,mixin,BuildUtils.getTypeDescriptor(mixinClass.getName()),null,null);
      fv.visitEnd();
    }
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"<init>","(" + descrCore + "Ljava/util/Map;)V","(" + descrCore + "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V",null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,"org/drools/factmodel/traits/TraitProxy","<init>","()V");
    if (mixinClass != null) {
      try {
        Constructor con=mixinClass.getConstructor(trait.getDefinedClass());
        mv.visitVarInsn(ALOAD,0);
        mv.visitTypeInsn(NEW,BuildUtils.getInternalType(mixinClass.getName()));
        mv.visitInsn(DUP);
        mv.visitVarInsn(ALOAD,0);
        mv.visitMethodInsn(INVOKESPECIAL,BuildUtils.getInternalType(mixinClass.getName()),"<init>","(" + BuildUtils.getTypeDescriptor(trait.getDefinedClass().getName()) + ")V");
        mv.visitFieldInsn(PUTFIELD,internalProxy,mixin,BuildUtils.getTypeDescriptor(mixinClass.getName()));
      }
 catch (      NoSuchMethodException nsme) {
        mv.visitVarInsn(ALOAD,0);
        mv.visitTypeInsn(NEW,BuildUtils.getInternalType(mixinClass.getName()));
        mv.visitInsn(DUP);
        mv.visitMethodInsn(INVOKESPECIAL,BuildUtils.getInternalType(mixinClass.getName()),"<init>","()V");
        mv.visitFieldInsn(PUTFIELD,internalProxy,mixin,BuildUtils.getTypeDescriptor(mixinClass.getName()));
      }
    }
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitFieldInsn(PUTFIELD,internalProxy,"object",descrCore);
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,2);
    mv.visitFieldInsn(PUTFIELD,internalProxy,"map","Ljava/util/Map;");
    mv.visitVarInsn(ALOAD,0);
    mv.visitTypeInsn(NEW,internalWrapper);
    mv.visitInsn(DUP);
    mv.visitVarInsn(ALOAD,1);
    mv.visitVarInsn(ALOAD,2);
    mv.visitMethodInsn(INVOKESPECIAL,internalWrapper,"<init>","(" + descrCore + "Ljava/util/Map;)V");
    mv.visitFieldInsn(PUTFIELD,internalProxy,"fields","Ljava/util/Map;");
    mv.visitInsn(RETURN);
    mv.visitMaxs(5,3);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"getCore","()" + descrCore + "",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,internalProxy,"object",descrCore);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"getObject","()Ljava/lang/Object;",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,internalProxy,"object",descrCore);
    mv.visitInsn(ARETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"getCore","()Ljava/lang/Object;",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKEVIRTUAL,internalProxy,"getCore","()" + descrCore + "");
    mv.visitInsn(ARETURN);
    mv.visitMaxs(1,1);
    mv.visitEnd();
  }
  int j=0;
  for (  FieldDefinition field : trait.getFieldsDefinitions()) {
    boolean isSoftField=(mask & (1 << j++)) == 0;
    if (isSoftField) {
      if (!mixinGetSet.containsKey(BuildUtils.getterName(field.getName(),field.getTypeName()))) {
        buildSoftGetter(cw,field.getName(),field.getTypeName(),masterName,core.getName());
        buildSoftSetter(cw,field.getName(),field.getTypeName(),masterName,core.getName());
      }
 else {
      }
    }
 else {
{
        fv=cw.visitField(ACC_PUBLIC + ACC_STATIC,field.getName() + "_reader","Lorg/drools/spi/InternalReadAccessor;",null,null);
        fv.visitEnd();
      }
{
        fv=cw.visitField(ACC_PUBLIC + ACC_STATIC,field.getName() + "_writer","Lorg/drools/spi/WriteAccessor;",null,null);
        fv.visitEnd();
      }
      buildHardGetter(cw,field,masterName,trait,core);
      buildHardSetter(cw,field,masterName,trait,core);
    }
  }
  buildEqualityMethods(cw,masterName,core.getClassName());
  if (mixinClass != null) {
    buildMixinMethods(cw,masterName,mixin,mixinClass,mixinMethods);
    buildMixinMethods(cw,masterName,mixin,mixinClass,mixinGetSet.values());
  }
  cw.visitEnd();
  return cw.toByteArray();
}
