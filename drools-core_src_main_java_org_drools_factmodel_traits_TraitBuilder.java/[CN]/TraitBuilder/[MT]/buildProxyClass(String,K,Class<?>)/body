{
  Class coreKlass=core.getClass();
  long mask=TraitRegistry.getInstance().getFieldMask(trait.getName(),coreKlass.getName());
  ClassDefinition tdef=TraitRegistry.getInstance().getTrait(trait.getName());
  ClassDefinition cdef=TraitRegistry.getInstance().getTraitable(coreKlass.getName());
  String wrapperName=pack + key + "ProxyWrapper";
  String proxyName=pack + key + "Proxy";
  byte[] wrapper=buildWrapperBytes(wrapperName,proxyName,cdef,tdef,mask);
  byte[] proxy=buildProxyBytes(wrapperName,proxyName,cdef,tdef,mask);
  JavaDialectRuntimeData data=((JavaDialectRuntimeData)getPackage(pack).getDialectRuntimeRegistry().getDialectData("java"));
  data.write(JavaDialectRuntimeData.convertClassToResourcePath(wrapperName),wrapper);
  data.write(JavaDialectRuntimeData.convertClassToResourcePath(proxyName),proxy);
  data.onBeforeExecute();
  try {
    Class<T> proxyClass=(Class<T>)ruleBase.getRootClassLoader().loadClass(proxyName,true);
    bindAccessors(proxyClass,tdef,cdef,mask);
    Class<T> wrapperClass=(Class<T>)ruleBase.getRootClassLoader().loadClass(wrapperName,true);
    bindCoreAccessors(wrapperClass,cdef);
    return proxyClass;
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return null;
  }
}
