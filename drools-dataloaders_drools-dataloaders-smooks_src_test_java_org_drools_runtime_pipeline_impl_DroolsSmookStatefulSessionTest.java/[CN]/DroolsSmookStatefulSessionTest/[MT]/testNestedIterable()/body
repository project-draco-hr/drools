{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("test_SmooksNestedIterable.drl",DroolsSmookStatefulSessionTest.class),ResourceType.DRL);
  assertFalse(kbuilder.hasErrors());
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List list=new ArrayList();
  ksession.setGlobal("list",list);
  Smooks smooks=new Smooks(getClass().getResourceAsStream("smooks-config.xml"));
  Transformer transformer=PipelineFactory.newSmooksTransformer(smooks,"root");
  Expression expression=PipelineFactory.newMvelExpression("children");
  transformer.addReceiver(expression);
  Splitter splitter=PipelineFactory.newIterateSplitter();
  expression.addReceiver(splitter);
  splitter.addReceiver(PipelineFactory.newStatefulKnowledgeSessionReceiverAdapter());
  StatefulKnowledgeSessionDataLoader dataLoader=DataLoaderFactory.newStatefulKnowledgeSessionDataLoader(ksession,transformer);
  Map<FactHandle,Object> handles=dataLoader.insert(new StreamSource(getClass().getResourceAsStream("SmooksNestedIterable.xml")));
  ksession.fireAllRules();
  assertEquals(2,handles.size());
  assertEquals(2,list.size());
  assertEquals("example.OrderItem",list.get(0).getClass().getName());
  assertEquals("example.OrderItem",list.get(1).getClass().getName());
  assertNotSame(list.get(0),list.get(1));
}
