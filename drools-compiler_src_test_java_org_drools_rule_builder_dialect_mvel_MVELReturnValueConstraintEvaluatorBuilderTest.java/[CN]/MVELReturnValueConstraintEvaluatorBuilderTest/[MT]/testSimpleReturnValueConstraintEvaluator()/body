{
  final Package pkg=new Package("pkg1");
  ReturnValueDescr descr=new ReturnValueDescr();
  descr.setText("return value");
  PackageBuilder pkgBuilder=new PackageBuilder(pkg);
  final PackageBuilderConfiguration conf=pkgBuilder.getPackageBuilderConfiguration();
  MVELDialect mvelDialect=(MVELDialect)pkgBuilder.getDialectRegistry().getDialect("mvel");
  PackageBuildContext context=new PackageBuildContext();
  context.init(conf,pkg,null,pkgBuilder.getDialectRegistry(),mvelDialect,null);
  pkgBuilder.addPackageFromDrl(new StringReader("package pkg1;\nglobal Boolean value;"));
  ReturnValueConstraintEvaluator node=new ReturnValueConstraintEvaluator();
  final MVELReturnValueEvaluatorBuilder builder=new MVELReturnValueEvaluatorBuilder();
  builder.build(context,node,descr);
  final RuleBase ruleBase=RuleBaseFactory.newRuleBase();
  ruleBase.addPackage(pkgBuilder.getPackage());
  final InternalWorkingMemory wm=(InternalWorkingMemory)ruleBase.newStatefulSession();
  wm.setGlobal("value",true);
  RuleFlowProcessInstanceImpl processInstance=new RuleFlowProcessInstanceImpl();
  processInstance.setWorkingMemory(wm);
  RuleFlowSplitInstanceImpl splitInstance=new RuleFlowSplitInstanceImpl();
  splitInstance.setProcessInstance(processInstance);
  assertTrue(node.evaluate(splitInstance,null,null));
  wm.setGlobal("value",false);
  assertFalse(node.evaluate(splitInstance,null,null));
}
