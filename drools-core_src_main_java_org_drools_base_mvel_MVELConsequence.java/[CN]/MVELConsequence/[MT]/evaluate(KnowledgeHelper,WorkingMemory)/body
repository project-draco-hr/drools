{
  VariableResolverFactory factory=unit.getFactory(knowledgeHelper,knowledgeHelper.getRule(),(LeftTuple)knowledgeHelper.getTuple(),null,knowledgeHelper,(InternalWorkingMemory)workingMemory);
  Package pkg=workingMemory.getRuleBase().getPackage("MAIN");
  if (pkg != null) {
    MVELDialectRuntimeData data=(MVELDialectRuntimeData)pkg.getDialectRuntimeRegistry().getDialectData(this.id);
    factory.setNextFactory(data.getFunctionFactory());
  }
  CompiledExpression compexpr=(CompiledExpression)this.expr;
  pkg=knowledgeHelper.getWorkingMemory().getRuleBase().getPackage(knowledgeHelper.getRule().getPackage());
  ClassLoader tempClassLoader=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(((InternalRuleBase)workingMemory.getRuleBase()).getRootClassLoader());
  try {
    if (MVELDebugHandler.isDebugMode()) {
      if (MVELDebugHandler.verbose) {
        System.out.println("Executing expression " + compexpr.getSourceName());
        System.out.println(DebugTools.decompile(compexpr));
      }
      MVEL.executeDebugger(compexpr,knowledgeHelper,factory);
    }
 else {
      MVEL.executeExpression(compexpr,knowledgeHelper,factory);
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(tempClassLoader);
  }
}
