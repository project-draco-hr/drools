{
  final Map<String,Object> map=new HashMap<String,Object>();
  map.put("methodName",className);
  map.put("package",context.getPkg().getName());
  map.put("ruleClassName",StringUtils.ucFirst(context.getRuleDescr().getClassName()));
  map.put("invokerClassName",context.getRuleDescr().getClassName() + StringUtils.ucFirst(className) + "Invoker");
  if (analysis != null) {
    map.put("methodExpr",analysis.isModifyExpr());
  }
  if (text != null) {
    map.put("text",text);
    map.put("hashCode",new Integer(text.hashCode()));
  }
  final String[] declarationTypes=new String[declarations.length];
  for (int i=0, size=declarations.length; i < size; i++) {
    declarationTypes[i]=((JavaDialect)context.getDialect()).getTypeFixer().fix(declarations[i]);
  }
  map.put("declarations",declarations);
  map.put("declarationTypes",declarationTypes);
  if (localDeclarations != null) {
    final String[] localDeclarationTypes=new String[localDeclarations.length];
    for (int i=0, size=localDeclarations.length; i < size; i++) {
      localDeclarationTypes[i]=((JavaDialect)context.getDialect()).getTypeFixer().fix(localDeclarations[i]);
    }
    map.put("localDeclarations",localDeclarations);
    map.put("localDeclarationTypes",localDeclarationTypes);
  }
  String[] globalStr=new String[globals.size()];
  String[] globalTypes=new String[globals.size()];
  int i=0;
  for (  Entry<String,Class> entry : globals.entrySet()) {
    globalStr[i]=entry.getKey();
    globalTypes[i]=entry.getValue().getName().replace('$','.');
    i++;
  }
  map.put("globals",globalStr);
  map.put("globalTypes",globalTypes);
  return map;
}
