{
  this.agendaGroups=new HashMap<String,InternalAgendaGroup>();
  this.activationGroups=new HashMap<String,InternalActivationGroup>();
  this.focusStack=new LinkedList<AgendaGroup>();
  this.agendaGroupFactory=kBase.getConfiguration().getAgendaGroupFactory();
  if (initMain) {
    this.main=agendaGroupFactory.createAgendaGroup(AgendaGroup.MAIN,kBase);
    this.agendaGroups.put(AgendaGroup.MAIN,this.main);
    this.focusStack.add(this.main);
  }
  Object object=ClassUtils.instantiateObject(kBase.getConfiguration().getConsequenceExceptionHandler(),kBase.getConfiguration().getClassLoader());
  if (object instanceof ConsequenceExceptionHandler) {
    this.legacyConsequenceExceptionHandler=(ConsequenceExceptionHandler)object;
  }
 else {
    this.consequenceExceptionHandler=(org.kie.api.runtime.rule.ConsequenceExceptionHandler)object;
  }
  this.declarativeAgenda=kBase.getConfiguration().isDeclarativeAgenda();
  this.streamMode=kBase.getConfiguration().getEventProcessingMode() == EventProcessingOption.STREAM;
  if (this.streamMode) {
    this.garbageCollector=new DefaultGarbageCollector();
  }
}
