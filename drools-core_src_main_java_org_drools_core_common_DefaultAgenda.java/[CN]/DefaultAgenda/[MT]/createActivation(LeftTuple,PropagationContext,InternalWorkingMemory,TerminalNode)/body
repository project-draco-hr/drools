{
  if (rtn.isFireDirect()) {
    AgendaItem item=createAgendaItem(tuple,0,context,rtn,null,null,null);
    tuple.setObject(item);
    if (activationsFilter != null && !activationsFilter.accept(item,context,workingMemory,rtn)) {
      return false;
    }
    item.setQueued(true);
    tuple.increaseActivationCountForEvents();
    fireActivation(item);
    return true;
  }
  final Rule rule=rtn.getRule();
  AgendaItem item;
  final Timer timer=rule.getTimer();
  InternalAgendaGroup agendaGroup=(InternalAgendaGroup)getAgendaGroup(rule.getAgendaGroup());
  InternalRuleFlowGroup rfg=(InternalRuleFlowGroup)getRuleFlowGroup(rule.getRuleFlowGroup());
  if (timer != null) {
    item=createScheduledAgendaItem(tuple,context,rtn,agendaGroup,rfg);
  }
 else {
    if (rule.getCalendars() != null) {
      long timestamp=workingMemory.getSessionClock().getCurrentTime();
      for (      String cal : rule.getCalendars()) {
        if (!workingMemory.getCalendars().get(cal).isTimeIncluded(timestamp)) {
          return false;
        }
      }
    }
    long handleRecency=this.unlinkingEnabled ? ((InternalFactHandle)context.getFactHandle()).getRecency() : 0;
    if (rfg == null) {
      if (rule.isLockOnActive() && agendaGroup.isActive() && (!this.unlinkingEnabled || agendaGroup.getActivatedForRecency() < handleRecency)&& agendaGroup.getAutoFocusActivator() != context) {
        if (tuple.getObject() == null) {
          tuple.setObject(Boolean.TRUE);
        }
        return false;
      }
 else       if (this.unlinkingEnabled && agendaGroup.getClearedForRecency() != -1 && agendaGroup.getClearedForRecency() >= handleRecency) {
        return false;
      }
    }
 else {
      if (rule.isLockOnActive() && rfg.isActive() && (!this.unlinkingEnabled || rfg.getActivatedForRecency() < handleRecency)&& agendaGroup.getAutoFocusActivator() != context) {
        if (tuple.getObject() == null) {
          tuple.setObject(Boolean.TRUE);
        }
        return false;
      }
 else       if (this.unlinkingEnabled && rfg.getClearedForRecency() != -1 && rfg.getClearedForRecency() >= handleRecency) {
        return false;
      }
    }
    item=createAgendaItem(tuple,0,context,rtn,null,agendaGroup,rfg);
    item.setSalience(rule.getSalience().getValue(new DefaultKnowledgeHelper(item,workingMemory),rule,workingMemory));
  }
  tuple.setObject(item);
  if (activationsFilter != null && !activationsFilter.accept(item,context,workingMemory,rtn)) {
    return false;
  }
  item.setQueued(true);
  tuple.increaseActivationCountForEvents();
  item.setSequenence(rtn.getSequence());
  ((EventSupport)workingMemory).getAgendaEventSupport().fireActivationCreated(item,workingMemory);
  return true;
}
