{
  KieSession session=getStatelessKieSession(this.getClass().getResourceAsStream("Rules.drl"));
  VerifierReport result=VerifierReportFactory.newVerifierReport();
  Collection<Object> data=new ArrayList<Object>();
  session.setGlobal("result",result);
  VerifierRule rule1=VerifierComponentMockFactory.createRule1();
  SubRule rp1=new SubRule(rule1,0);
  AlwaysTrue alwaysTrue1=new AlwaysTrue(rp1);
  SubRule rp2=new SubRule(rule1,1);
  AlwaysTrue alwaysTrue2=new AlwaysTrue(rp2);
  VerifierRule rule2=VerifierComponentMockFactory.createRule2();
  SubRule rp3=new SubRule(rule2,0);
  SubRule rp4=new SubRule(rule2,1);
  AlwaysTrue alwaysTrue4=new AlwaysTrue(rp4);
  data.add(rule1);
  data.add(rp1);
  data.add(rp2);
  data.add(alwaysTrue1);
  data.add(alwaysTrue2);
  data.add(rule2);
  data.add(rp3);
  data.add(rp4);
  data.add(alwaysTrue4);
  for (  Object o : data) {
    session.insert(o);
  }
  session.fireAllRules(new RuleNameMatchesAgendaFilter("Rule that is always true"));
  Iterator<VerifierMessageBase> iter=result.getBySeverity(Severity.WARNING).iterator();
  boolean works=false;
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof VerifierMessage) {
      VerifierMessage message=(VerifierMessage)o;
      if (message.getFaulty().equals(rule1)) {
        works=true;
      }
 else {
        fail("There can be only one. (And this is not the one)");
      }
    }
  }
  assertEquals(0,result.getBySeverity(Severity.ERROR).size());
  assertEquals(1,result.getBySeverity(Severity.WARNING).size());
  assertEquals(0,result.getBySeverity(Severity.NOTE).size());
  assertTrue(works);
}
