{
  KnowledgeBuilder builder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  builder.addResource(new InputStreamReader(WaltzDbBenchmark.class.getResourceAsStream("waltzdb.drl")),KnowledgeType.DRL);
  Collection<KnowledgePackage> pkgs=builder.getKnowledgePackages();
  KnowledgeBaseConfiguration conf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  conf.setProperty("drools.removeIdentities","true");
  final KnowledgeBase knowledgeBase=KnowledgeBaseFactory.newKnowledgeBase(conf);
  knowledgeBase.addKnowledgePackages(pkgs);
  StatefulKnowledgeSession session=knowledgeBase.newStatefulKnowledgeSession();
  java.util.List lines=WaltzDbBenchmark.loadLines("waltzdb16.dat");
  java.util.List labels=WaltzDbBenchmark.loadLabels("waltzdb16.dat");
  long now=System.currentTimeMillis();
  Iterator iter=lines.iterator();
  while (iter.hasNext()) {
    Line line=(Line)iter.next();
    session.insert(line);
    System.out.println(line.getP1() + " " + line.getP2());
  }
  iter=labels.iterator();
  while (iter.hasNext()) {
    Label label=(Label)iter.next();
    session.insert(label);
    System.out.println(label.getId() + " " + label.getType());
  }
  Stage stage=new Stage(Stage.DUPLICATE);
  session.insert(stage);
  session.fireAllRules();
  System.out.println("Time: " + (System.currentTimeMillis() - now));
  session.dispose();
}
