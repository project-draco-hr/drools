{
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newClassPathResource("waltzdb.drl",WaltzDbBenchmark.class),ResourceType.DRL);
  Collection<KnowledgePackage> pkgs=kbuilder.getKnowledgePackages();
  KnowledgeBaseConfiguration kbaseConfiguration=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
  kbaseConfiguration.setProperty("drools.removeIdentities","true");
  final KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase(kbaseConfiguration);
  kbase.addKnowledgePackages(pkgs);
  StatefulKnowledgeSession ksession=kbase.newStatefulKnowledgeSession();
  List<Line> lines=WaltzDbBenchmark.loadLines("waltzdb16.dat");
  List<Label> labels=WaltzDbBenchmark.loadLabels("waltzdb16.dat");
  long now=System.currentTimeMillis();
  for (  Line line : lines) {
    ksession.insert(line);
    System.out.println(line.getP1() + " " + line.getP2());
  }
  for (  Label label : labels) {
    ksession.insert(label);
    System.out.println(label.getId() + " " + label.getType());
  }
  Stage stage=new Stage(Stage.DUPLICATE);
  ksession.insert(stage);
  ksession.fireAllRules();
  System.out.println("Time: " + (System.currentTimeMillis() - now));
  ksession.dispose();
}
