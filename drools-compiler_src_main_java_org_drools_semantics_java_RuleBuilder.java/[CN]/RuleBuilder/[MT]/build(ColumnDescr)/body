{
  if (columnDescr.getObjectType() == null || columnDescr.getObjectType().equals("")) {
    this.errors.add(new RuleError(this.rule,columnDescr,null,"ObjectType not correctly defined"));
    return null;
  }
  Class clazz=null;
  try {
    clazz=this.typeResolver.resolveType(columnDescr.getObjectType());
  }
 catch (  final ClassNotFoundException e) {
    this.errors.add(new RuleError(this.rule,columnDescr,null,"Unable to resolve ObjectType '" + columnDescr.getObjectType() + "'"));
    return null;
  }
  Column column;
  if (columnDescr.getIdentifier() != null && !columnDescr.getIdentifier().equals("")) {
    column=new Column(this.columnCounter.getNext(),this.columnOffset,new ClassObjectType(clazz),columnDescr.getIdentifier());
    ;
    this.declarations.put(column.getDeclaration().getIdentifier(),column.getDeclaration());
    if (this.notDeclarations != null) {
      this.notDeclarations.put(column.getDeclaration().getIdentifier(),column.getDeclaration());
    }
  }
 else {
    column=new Column(this.columnCounter.getNext(),this.columnOffset,new ClassObjectType(clazz),null);
  }
  for (final Iterator it=columnDescr.getDescrs().iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof FieldBindingDescr) {
      build(column,(FieldBindingDescr)object);
    }
 else     if (object instanceof LiteralDescr) {
      build(column,(LiteralDescr)object);
    }
 else     if (object instanceof BoundVariableDescr) {
      build(column,(BoundVariableDescr)object);
    }
 else     if (object instanceof ReturnValueDescr) {
      build(column,(ReturnValueDescr)object);
    }
 else     if (object instanceof PredicateDescr) {
      build(column,(PredicateDescr)object);
    }
  }
  return column;
}
