{
  String classMethodName="predicate" + counter++;
  predicateDescr.setClassMethodName(classMethodName);
  Class clazz=((ClassObjectType)column.getObjectType()).getClassType();
  FieldExtractor extractor=getFieldExtractor(predicateDescr,clazz,predicateDescr.getFieldName());
  if (extractor == null) {
    return;
  }
  Declaration declaration=column.addDeclaration(predicateDescr.getDeclaration(),extractor);
  this.declarations.put(declaration.getIdentifier(),declaration);
  List usedDeclarations=getUsedDeclarations(predicateDescr,predicateDescr.getText());
  if (usedDeclarations == null) {
    return;
  }
  usedDeclarations.remove(predicateDescr.getDeclaration());
  Declaration[] declarations=new Declaration[usedDeclarations.size()];
  for (int i=0, size=usedDeclarations.size(); i < size; i++) {
    declarations[i]=(Declaration)this.declarations.get((String)usedDeclarations.get(i));
  }
  PredicateConstraint predicateConstraint=new PredicateConstraint(declaration,declarations);
  column.addConstraint(predicateConstraint);
  StringTemplate st=ruleGroup.getInstanceOf("predicateMethod");
  st.setAttribute("declaration",declaration);
  st.setAttribute("declarationType",((ClassObjectType)declaration.getObjectType()).getClassType().getName().replace('$','.'));
  setStringTemplateAttributes(st,declarations,predicateDescr.getText());
  st.setAttribute("methodName",classMethodName);
  st.setAttribute("text",functionFixer.fix(predicateDescr.getText()));
  this.methods.add(st.toString());
  st=invokerGroup.getInstanceOf("predicateInvoker");
  st.setAttribute("package",this.pkg.getName());
  st.setAttribute("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  st.setAttribute("invokerClassName",ruleDescr.getClassName() + ucFirst(classMethodName) + "Invoker");
  st.setAttribute("methodName",classMethodName);
  st.setAttribute("declaration",declaration);
  st.setAttribute("declarationType",((ClassObjectType)declaration.getObjectType()).getClassType().getName().replace('$','.'));
  setStringTemplateAttributes(st,declarations,predicateDescr.getText());
  st.setAttribute("text",predicateDescr.getText());
  String invokerClassName=pkg.getName() + "." + ruleDescr.getClassName()+ ucFirst(classMethodName)+ "Invoker";
  this.invokers.put(invokerClassName,st.toString());
  this.invokerLookups.put(invokerClassName,predicateConstraint);
  this.descrLookups.put(invokerClassName,predicateDescr);
}
