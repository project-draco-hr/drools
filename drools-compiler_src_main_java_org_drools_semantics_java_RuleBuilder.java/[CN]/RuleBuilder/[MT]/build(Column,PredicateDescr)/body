{
  final String className="predicate" + this.counter++;
  predicateDescr.setClassMethodName(className);
  final FieldExtractor extractor=getFieldExtractor(predicateDescr,column.getObjectType(),predicateDescr.getFieldName());
  if (extractor == null) {
    return;
  }
  final Declaration declaration=column.addDeclaration(predicateDescr.getDeclaration(),extractor);
  this.declarations.put(declaration.getIdentifier(),declaration);
  if (this.innerDeclarations != null) {
    this.innerDeclarations.put(declaration.getIdentifier(),declaration);
  }
  final List[] usedIdentifiers=getUsedIdentifiers(predicateDescr,predicateDescr.getText());
  usedIdentifiers[0].remove(predicateDescr.getDeclaration());
  final List tupleDeclarations=new ArrayList();
  final List factDeclarations=new ArrayList();
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    Declaration decl=(Declaration)this.declarations.get((String)usedIdentifiers[0].get(i));
    if (decl.getColumn() == column) {
      factDeclarations.add(decl);
    }
 else {
      tupleDeclarations.add(decl);
    }
  }
  Declaration[] previousDeclarations=(Declaration[])tupleDeclarations.toArray(new Declaration[tupleDeclarations.size()]);
  Declaration[] localDeclarations=(Declaration[])factDeclarations.toArray(new Declaration[factDeclarations.size()]);
  final PredicateConstraint predicateConstraint=new PredicateConstraint(declaration,previousDeclarations,localDeclarations);
  column.addConstraint(predicateConstraint);
  StringTemplate st=RuleBuilder.ruleGroup.getInstanceOf("predicateMethod");
  st.setAttribute("declaration",declaration);
  st.setAttribute("declarationType",declaration.getExtractor().getExtractToClass().getName().replace('$','.'));
  setStringTemplateAttributes(st,previousDeclarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]),predicateDescr.getText());
  final String[] localDeclarationTypes=new String[localDeclarations.length];
  for (int i=0, size=localDeclarations.length; i < size; i++) {
    localDeclarationTypes[i]=localDeclarations[i].getExtractor().getExtractToClass().getName().replace('$','.');
  }
  st.setAttribute("localDeclarations",localDeclarations);
  st.setAttribute("localDeclarationTypes",localDeclarationTypes);
  st.setAttribute("methodName",className);
  final String predicateText=this.functionFixer.fix(predicateDescr.getText(),variables);
  st.setAttribute("text",predicateText);
  this.methods.add(st.toString());
  st=RuleBuilder.invokerGroup.getInstanceOf("predicateInvoker");
  st.setAttribute("package",this.pkg.getName());
  st.setAttribute("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  st.setAttribute("invokerClassName",this.ruleDescr.getClassName() + ucFirst(className) + "Invoker");
  st.setAttribute("methodName",className);
  st.setAttribute("declaration",declaration);
  st.setAttribute("declarationType",declaration.getExtractor().getExtractToClass().getName().replace('$','.'));
  setStringTemplateAttributes(st,previousDeclarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]),predicateDescr.getText());
  st.setAttribute("localDeclarations",localDeclarations);
  st.setAttribute("localDeclarationTypes",localDeclarationTypes);
  st.setAttribute("hashCode",predicateText.hashCode());
  final String invokerClassName=this.pkg.getName() + "." + this.ruleDescr.getClassName()+ ucFirst(className)+ "Invoker";
  this.invokers.put(invokerClassName,st.toString());
  this.invokerLookups.put(invokerClassName,predicateConstraint);
  this.descrLookups.put(invokerClassName,predicateDescr);
}
