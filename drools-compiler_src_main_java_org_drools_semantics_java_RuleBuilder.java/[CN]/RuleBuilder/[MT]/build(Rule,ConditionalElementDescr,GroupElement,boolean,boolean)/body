{
  for (final Iterator it=descr.getDescrs().iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof ConditionalElementDescr) {
      if (object.getClass() == AndDescr.class) {
        final GroupElement and=GroupElementFactory.newAndInstance();
        build(rule,(ConditionalElementDescr)object,and,false,false);
        group.addChild(and);
      }
 else       if (object.getClass() == OrDescr.class) {
        final GroupElement or=GroupElementFactory.newOrInstance();
        build(rule,(ConditionalElementDescr)object,or,true,false);
        group.addChild(or);
      }
 else       if (object.getClass() == NotDescr.class) {
        final GroupElement not=GroupElementFactory.newNotInstance();
        build(rule,(ConditionalElementDescr)object,not,true,true);
        group.addChild(not);
      }
 else       if (object.getClass() == ExistsDescr.class) {
        final GroupElement exists=GroupElementFactory.newExistsInstance();
        build(rule,(ConditionalElementDescr)object,exists,true,true);
        group.addChild(exists);
      }
 else {
        ConditionalElementBuilder builder=(ConditionalElementBuilder)this.builders.get(object.getClass());
        ConditionalElement ce=builder.build(this.context,this.utils,this.columnBuilder,(BaseDescr)object);
        if (ce != null) {
          this.context.getRule().addPattern(ce);
        }
      }
    }
 else     if (object.getClass() == ColumnDescr.class) {
      if (decrementOffset && decrementFirst) {
        this.context.setColumnOffset(this.context.getColumnOffset() - 1);
      }
 else {
        decrementFirst=true;
      }
      final Column column=this.columnBuilder.build(this.context,this.utils,(ColumnDescr)object);
      if (column != null) {
        group.addChild(column);
      }
    }
  }
}
