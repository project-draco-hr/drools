{
  for (final Iterator it=descr.getDescrs().iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof ConditionalElementDescr) {
      if (object.getClass() == AndDescr.class) {
        final And and=new And();
        build(rule,(ConditionalElementDescr)object,and,false,false);
        ce.addChild(and);
      }
 else       if (object.getClass() == OrDescr.class) {
        final Or or=new Or();
        build(rule,(ConditionalElementDescr)object,or,true,false);
        ce.addChild(or);
      }
 else       if (object.getClass() == NotDescr.class) {
        final Not not=new Not();
        build(rule,(ConditionalElementDescr)object,not,true,true);
        ce.addChild(not);
      }
 else       if (object.getClass() == ExistsDescr.class) {
        final Exists exists=new Exists();
        build(rule,(ConditionalElementDescr)object,exists,true,true);
        ce.addChild(exists);
      }
 else       if (object.getClass() == EvalDescr.class) {
        final EvalCondition eval=build((EvalDescr)object);
        if (eval != null) {
          ce.addChild(eval);
        }
      }
 else       if (object.getClass() == FromDescr.class) {
        final From from=build((FromDescr)object);
        this.rule.addPattern(from);
      }
 else       if (object.getClass() == AccumulateDescr.class) {
        final Accumulate accumulate=build((AccumulateDescr)object);
        this.rule.addPattern(accumulate);
      }
    }
 else     if (object.getClass() == ColumnDescr.class) {
      if (decrementOffset && decrementFirst) {
        this.columnOffset--;
      }
 else {
        decrementFirst=true;
      }
      final Column column=build((ColumnDescr)object);
      if (column != null) {
        ce.addChild(column);
      }
    }
  }
}
