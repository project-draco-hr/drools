{
  Map root=new HashMap();
  String classMethodName="consequence";
  root.put("package",this.pkg.getName());
  root.put("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  root.put("invokerClassName",ruleDescr.getClassName() + ucFirst(classMethodName) + "Invoker");
  root.put("methodName",classMethodName);
  root.put("declarations",this.declarations.values());
  root.put("globals",getUsedGlobals(ruleDescr.getConsequence()));
  root.put("globalTypes",this.pkg.getGlobals());
  StringTemplate st=ruleGroup.getInstanceOf("consequenceMethod");
  st.setAttribute("methodName",classMethodName);
  Declaration[] declarations=(Declaration[])this.declarations.values().toArray(new Declaration[this.declarations.size()]);
  setStringTemplateAttributes(st,declarations,ruleDescr.getConsequence());
  st.setAttribute("text",fixer.fix(ruleDescr.getConsequence()));
  this.methods.add(st.toString());
  st=invokerGroup.getInstanceOf("consequenceInvoker");
  st.setAttribute("package",this.pkg.getName());
  st.setAttribute("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  st.setAttribute("invokerClassName",ruleDescr.getClassName() + ucFirst(classMethodName) + "Invoker");
  st.setAttribute("methodName",classMethodName);
  setStringTemplateAttributes(st,declarations,ruleDescr.getConsequence());
  st.setAttribute("text",ruleDescr.getConsequence());
  String invokerClassName=this.pkg.getName() + "." + ruleDescr.getClassName()+ ucFirst(classMethodName)+ "Invoker";
  this.invokers.put(invokerClassName,st.toString());
  this.invokerLookups.put(invokerClassName,this.rule);
  this.descrLookups.put(invokerClassName,ruleDescr);
  st=ruleGroup.getInstanceOf("ruleClass");
  st.setAttribute("package",this.pkg.getName());
  st.setAttribute("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  st.setAttribute("imports",this.pkg.getImports());
  st.setAttribute("methods",this.methods);
  this.ruleClass=st.toString();
}
