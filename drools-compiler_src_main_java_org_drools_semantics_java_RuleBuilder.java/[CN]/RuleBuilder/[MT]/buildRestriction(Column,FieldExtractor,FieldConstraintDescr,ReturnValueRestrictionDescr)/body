{
  final String className="returnValue" + this.counter++;
  returnValueRestrictionDescr.setClassMethodName(className);
  final List[] usedIdentifiers=getUsedIdentifiers(returnValueRestrictionDescr,returnValueRestrictionDescr.getText());
  final List tupleDeclarations=new ArrayList();
  final List factDeclarations=new ArrayList();
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    Declaration declaration=(Declaration)this.declarations.get((String)usedIdentifiers[0].get(i));
    if (declaration.getColumn() == column) {
      factDeclarations.add(declaration);
    }
 else {
      tupleDeclarations.add(declaration);
    }
  }
  final Evaluator evaluator=getEvaluator(returnValueRestrictionDescr,extractor.getValueType(),returnValueRestrictionDescr.getEvaluator());
  if (evaluator == null) {
    return null;
  }
  Declaration[] previousDeclarations=(Declaration[])tupleDeclarations.toArray(new Declaration[tupleDeclarations.size()]);
  Declaration[] localDeclarations=(Declaration[])factDeclarations.toArray(new Declaration[factDeclarations.size()]);
  final ReturnValueRestriction returnValueRestriction=new ReturnValueRestriction(extractor,previousDeclarations,localDeclarations,evaluator);
  StringTemplate st=RuleBuilder.ruleGroup.getInstanceOf("returnValueMethod");
  setStringTemplateAttributes(st,previousDeclarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]),returnValueRestrictionDescr.getText());
  final String[] localDeclarationTypes=new String[localDeclarations.length];
  for (int i=0, size=localDeclarations.length; i < size; i++) {
    localDeclarationTypes[i]=localDeclarations[i].getExtractor().getExtractToClass().getName().replace('$','.');
  }
  st.setAttribute("localDeclarations",localDeclarations);
  st.setAttribute("localDeclarationTypes",localDeclarationTypes);
  st.setAttribute("methodName",className);
  final String returnValueText=this.functionFixer.fix(returnValueRestrictionDescr.getText(),variables);
  st.setAttribute("text",returnValueText);
  this.methods.add(st.toString());
  st=RuleBuilder.invokerGroup.getInstanceOf("returnValueInvoker");
  st.setAttribute("package",this.pkg.getName());
  st.setAttribute("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  st.setAttribute("invokerClassName",this.ruleDescr.getClassName() + ucFirst(className) + "Invoker");
  st.setAttribute("methodName",className);
  setStringTemplateAttributes(st,previousDeclarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]),returnValueRestrictionDescr.getText());
  st.setAttribute("localDeclarations",localDeclarations);
  st.setAttribute("localDeclarationTypes",localDeclarationTypes);
  st.setAttribute("hashCode",returnValueText.hashCode());
  final String invokerClassName=this.pkg.getName() + "." + this.ruleDescr.getClassName()+ ucFirst(className)+ "Invoker";
  this.invokers.put(invokerClassName,st.toString());
  this.invokerLookups.put(invokerClassName,returnValueRestriction);
  this.descrLookups.put(invokerClassName,returnValueRestrictionDescr);
  return returnValueRestriction;
}
