{
  final String classMethodName="returnValue" + this.counter++;
  returnValueDescr.setClassMethodName(classMethodName);
  final List[] usedIdentifiers=getUsedIdentifiers(returnValueDescr,returnValueDescr.getText());
  final Declaration[] declarations=new Declaration[usedIdentifiers[0].size()];
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    declarations[i]=(Declaration)this.declarations.get((String)usedIdentifiers[0].get(i));
  }
  final Class clazz=((ClassObjectType)column.getObjectType()).getClassType();
  final FieldExtractor extractor=getFieldExtractor(returnValueDescr,clazz,returnValueDescr.getFieldName());
  if (extractor == null) {
    return;
  }
  final Evaluator evaluator=getEvaluator(returnValueDescr,extractor.getObjectType().getValueType(),returnValueDescr.getEvaluator());
  if (evaluator == null) {
    return;
  }
  final ReturnValueConstraint returnValueConstraint=new ReturnValueConstraint(extractor,declarations,evaluator);
  column.addConstraint(returnValueConstraint);
  StringTemplate st=RuleBuilder.ruleGroup.getInstanceOf("returnValueMethod");
  setStringTemplateAttributes(st,declarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]),returnValueDescr.getText());
  st.setAttribute("methodName",classMethodName);
  final String returnValueText=RuleBuilder.functionFixer.fix(returnValueDescr.getText());
  st.setAttribute("text",returnValueText);
  this.methods.add(st.toString());
  st=RuleBuilder.invokerGroup.getInstanceOf("returnValueInvoker");
  st.setAttribute("package",this.pkg.getName());
  st.setAttribute("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  st.setAttribute("invokerClassName",this.ruleDescr.getClassName() + ucFirst(classMethodName) + "Invoker");
  st.setAttribute("methodName",classMethodName);
  setStringTemplateAttributes(st,declarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]),returnValueDescr.getText());
  st.setAttribute("hashCode",returnValueText.hashCode());
  final String invokerClassName=this.pkg.getName() + "." + this.ruleDescr.getClassName()+ ucFirst(classMethodName)+ "Invoker";
  this.invokers.put(invokerClassName,st.toString());
  this.invokerLookups.put(invokerClassName,returnValueConstraint);
  this.descrLookups.put(invokerClassName,returnValueDescr);
}
