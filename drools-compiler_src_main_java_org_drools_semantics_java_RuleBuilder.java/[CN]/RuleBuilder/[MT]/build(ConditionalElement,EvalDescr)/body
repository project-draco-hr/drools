{
  Map root=new HashMap();
  String classMethodName="eval" + counter++;
  evalDescr.setClassMethodName(classMethodName);
  root.put("package",this.pkg.getName());
  root.put("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  root.put("invokerClassName",ruleDescr.getClassName() + ucFirst(classMethodName) + "Invoker");
  root.put("methodName",classMethodName);
  List usedDeclarations=this.analyzer.analyze(evalDescr.getText(),this.declarations.keySet());
  Declaration[] declarations=new Declaration[usedDeclarations.size()];
  for (int i=0, size=usedDeclarations.size(); i < size; i++) {
    declarations[i]=(Declaration)this.declarations.get((String)usedDeclarations.get(i));
  }
  root.put("declarations",declarations);
  root.put("globals",getUsedGlobals(evalDescr.getText()));
  root.put("globalTypes",this.pkg.getGlobals());
  root.put("text",evalDescr.getText());
  EvalCondition eval=new EvalCondition(declarations);
  ce.addChild(eval);
  Template template=this.cfg.getTemplate("evalMethod.ftl");
  StringWriter string=new StringWriter();
  template.process(root,string);
  string.flush();
  this.methods.add(string.toString());
  template=this.cfg.getTemplate("evalInvoker.ftl");
  string=new StringWriter();
  template.process(root,string);
  string.flush();
  String invokerClassName=ruleDescr.getClassName() + ucFirst(classMethodName) + "Invoker";
  this.invokeables.put(invokerClassName,string.toString());
  this.referenceLookups.put(this.pkg.getName() + "." + invokerClassName,eval);
}
