{
  Class clazz=((ClassObjectType)column.getObjectType()).getClassType();
  FieldExtractor extractor=getFieldExtractor(literalDescr,clazz,literalDescr.getFieldName());
  if (extractor == null) {
    return;
  }
  FieldValue field=null;
  if (literalDescr.isStaticFieldValue()) {
    int lastDot=literalDescr.getText().lastIndexOf('.');
    String className=literalDescr.getText().substring(0,lastDot);
    String fieldName=literalDescr.getText().substring(lastDot + 1);
    try {
      Class staticClass=this.typeResolver.resolveType(className);
      field=new FieldImpl(staticClass.getField(fieldName).get(null));
    }
 catch (    Exception e) {
      this.errors.add(new RuleError(this.rule,literalDescr,e,"Unable to create a Field value of type  '" + extractor.getObjectType().getValueType() + "' and value '"+ literalDescr.getText()+ "'"));
    }
  }
 else {
    try {
      field=FieldFactory.getFieldValue(literalDescr.getText(),extractor.getObjectType().getValueType());
    }
 catch (    Exception e) {
      this.errors.add(new RuleError(this.rule,literalDescr,e,"Unable to create a Field value of type  '" + extractor.getObjectType().getValueType() + "' and value '"+ literalDescr.getText()+ "'"));
    }
  }
  Evaluator evaluator=getEvaluator(literalDescr,extractor.getObjectType().getValueType(),literalDescr.getEvaluator());
  if (evaluator == null) {
    return;
  }
  column.addConstraint(new LiteralConstraint(field,extractor,evaluator));
}
