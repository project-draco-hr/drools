{
  final String classMethodName="eval" + this.counter++;
  evalDescr.setClassMethodName(classMethodName);
  final List[] usedIdentifiers=getUsedIdentifiers(evalDescr,evalDescr.getText());
  final Declaration[] declarations=new Declaration[usedIdentifiers[0].size()];
  for (int i=0, size=usedIdentifiers[0].size(); i < size; i++) {
    declarations[i]=(Declaration)this.declarations.get((String)usedIdentifiers[0].get(i));
  }
  final EvalCondition eval=new EvalCondition(declarations);
  StringTemplate st=RuleBuilder.ruleGroup.getInstanceOf("evalMethod");
  setStringTemplateAttributes(st,declarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]),evalDescr.getText());
  st.setAttribute("methodName",classMethodName);
  final String evalText=RuleBuilder.functionFixer.fix(evalDescr.getText());
  st.setAttribute("text",evalText);
  this.methods.add(st.toString());
  st=RuleBuilder.invokerGroup.getInstanceOf("evalInvoker");
  st.setAttribute("package",this.pkg.getName());
  st.setAttribute("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  st.setAttribute("invokerClassName",this.ruleDescr.getClassName() + ucFirst(classMethodName) + "Invoker");
  st.setAttribute("methodName",classMethodName);
  setStringTemplateAttributes(st,declarations,(String[])usedIdentifiers[1].toArray(new String[usedIdentifiers[1].size()]),evalDescr.getText());
  st.setAttribute("hashCode",evalText.hashCode());
  final String invokerClassName=this.pkg.getName() + "." + this.ruleDescr.getClassName()+ ucFirst(classMethodName)+ "Invoker";
  this.invokers.put(invokerClassName,st.toString());
  this.invokerLookups.put(invokerClassName,eval);
  this.descrLookups.put(invokerClassName,evalDescr);
  return eval;
}
