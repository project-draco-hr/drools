{
  String classMethodName="eval" + counter++;
  evalDescr.setClassMethodName(classMethodName);
  List usedDeclarations=getUsedDeclarations(evalDescr,evalDescr.getText());
  Declaration[] declarations=new Declaration[usedDeclarations.size()];
  for (int i=0, size=usedDeclarations.size(); i < size; i++) {
    declarations[i]=(Declaration)this.declarations.get((String)usedDeclarations.get(i));
  }
  EvalCondition eval=new EvalCondition(declarations);
  StringTemplate st=ruleGroup.getInstanceOf("evalMethod");
  setStringTemplateAttributes(st,declarations,evalDescr.getText());
  st.setAttribute("methodName",classMethodName);
  String evalText=functionFixer.fix(evalDescr.getText());
  st.setAttribute("text",evalText);
  this.methods.add(st.toString());
  st=invokerGroup.getInstanceOf("evalInvoker");
  st.setAttribute("package",this.pkg.getName());
  st.setAttribute("ruleClassName",ucFirst(this.ruleDescr.getClassName()));
  st.setAttribute("invokerClassName",ruleDescr.getClassName() + ucFirst(classMethodName) + "Invoker");
  st.setAttribute("methodName",classMethodName);
  setStringTemplateAttributes(st,declarations,evalDescr.getText());
  st.setAttribute("hashCode",evalText.hashCode());
  String invokerClassName=pkg.getName() + "." + ruleDescr.getClassName()+ ucFirst(classMethodName)+ "Invoker";
  this.invokers.put(invokerClassName,st.toString());
  this.invokerLookups.put(invokerClassName,eval);
  this.descrLookups.put(invokerClassName,evalDescr);
  return eval;
}
