{
  RBTree.Node<Comparable<Comparable>,RightTupleList> firstNode;
  while (true) {
switch (ascendingConstraintType) {
case GREATER_THAN:
      firstNode=tree.findNearestNode(lowerBound,false,RBTree.Boundary.LOWER);
    break;
case GREATER_OR_EQUAL:
  firstNode=tree.findNearestNode(lowerBound,first,RBTree.Boundary.LOWER);
break;
default :
throw new UnsupportedOperationException("Cannot call remove constraint of type: " + ascendingConstraintType);
}
if (firstNode != null && firstNode.value.size() == 0) {
tree.delete(firstNode.key);
}
 else {
break;
}
}
return firstNode == null ? null : firstNode.value.getFirst();
}
