{
  FastIterator it=tree.fastIterator();
  if (it == null) {
    return new Entry[0];
  }
  List<Comparable> toBeRemoved=new ArrayList<Comparable>();
  List<Tuple> result=new ArrayList<Tuple>();
  RBTree.Node<Comparable<Comparable>,TupleList> node;
  while ((node=(RBTree.Node<Comparable<Comparable>,TupleList>)it.next(null)) != null) {
    TupleList bucket=node.value;
    if (bucket.size() == 0) {
      toBeRemoved.add(node.key);
    }
 else {
      Tuple entry=bucket.getFirst();
      while (entry != null) {
        result.add(entry);
        entry=(Tuple)entry.getNext();
      }
    }
  }
  for (  Comparable key : toBeRemoved) {
    tree.delete(key);
  }
  return result.toArray(new Tuple[result.size()]);
}
