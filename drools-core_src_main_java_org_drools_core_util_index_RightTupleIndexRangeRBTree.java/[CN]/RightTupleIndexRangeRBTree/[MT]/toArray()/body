{
  FastIterator it=tree.fastIterator();
  if (it == null) {
    return new Entry[0];
  }
  List<Comparable> toBeRemoved=new ArrayList<Comparable>();
  List<RightTuple> result=new ArrayList<RightTuple>();
  RBTree.Node<Comparable<Comparable>,RightTupleList> node;
  while ((node=(RBTree.Node<Comparable<Comparable>,RightTupleList>)it.next(null)) != null) {
    RightTupleList bucket=node.value;
    if (bucket.size() == 0) {
      toBeRemoved.add(node.key);
    }
 else {
      RightTuple entry=bucket.getFirst();
      while (entry != null) {
        result.add(entry);
        entry=(RightTuple)entry.getNext();
      }
    }
  }
  for (  Comparable key : toBeRemoved) {
    tree.delete(key);
  }
  return result.toArray(new LeftTuple[result.size()]);
}
