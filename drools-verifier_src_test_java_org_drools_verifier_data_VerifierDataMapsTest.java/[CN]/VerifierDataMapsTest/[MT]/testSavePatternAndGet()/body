{
  VerifierData data=VerifierReportFactory.newVerifierData();
  VerifierRule rule=VerifierComponentMockFactory.createRule1();
  assertNotNull(rule.getName());
  assertEquals("testRule1",rule.getName());
  ObjectType objectType=new ObjectType(new PackageDescr("testPackage1"));
  Pattern pattern=VerifierComponentMockFactory.createPattern1();
  assertNotNull(pattern.getRulePath());
  assertEquals(rule.getPath(),pattern.getRulePath());
  assertNotNull(pattern.getName());
  assertEquals(rule.getName(),pattern.getRuleName());
  pattern.setObjectTypePath(objectType.getPath());
  assertNotNull(pattern.getObjectTypePath());
  assertEquals(objectType.getPath(),pattern.getObjectTypePath());
  data.add(rule);
  data.add(objectType);
  data.add(pattern);
  Collection<VerifierComponent> all=data.getAll();
  assertEquals(3,all.size());
  assertTrue(all.contains(pattern));
  assertTrue(all.contains(objectType));
  assertTrue(all.contains(rule));
  Collection<VerifierComponent> components=data.getAll(pattern.getVerifierComponentType());
  assertEquals(1,components.size());
  assertEquals(pattern,components.toArray()[0]);
  VerifierComponent objectType2=data.getVerifierObject(objectType.getVerifierComponentType(),objectType.getPath());
  assertNotNull(objectType2);
  assertEquals(objectType,objectType2);
  VerifierComponent rule2=data.getVerifierObject(rule.getVerifierComponentType(),rule.getPath());
  assertNotNull(rule2);
  assertEquals(rule,rule2);
}
