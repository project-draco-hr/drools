{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("Possibilities.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Find subsumptant rule possibilities"));
  Collection<Object> data=new ArrayList<Object>();
  VerifierReport result=VerifierReportFactory.newVerifierReport();
  session.setGlobal("result",result);
  String ruleName1="Rule 1";
  String ruleName2="Rule 2";
  VerifierRule r1=new VerifierRule();
  r1.setRuleName(ruleName1);
  VerifierRule r2=new VerifierRule();
  r2.setRuleName(ruleName2);
  SubPattern pp1=new SubPattern();
  pp1.setRuleName(ruleName1);
  SubPattern pp2=new SubPattern();
  pp2.setRuleName(ruleName1);
  SubPattern pp3=new SubPattern();
  pp3.setRuleName(ruleName2);
  SubPattern pp4=new SubPattern();
  pp4.setRuleName(ruleName2);
  SubRule rp1=new SubRule();
  rp1.setRuleGuid(r1.getGuid());
  rp1.setRuleName(ruleName1);
  rp1.add(pp1);
  rp1.add(pp2);
  SubRule rp2=new SubRule();
  rp2.setRuleGuid(r2.getGuid());
  rp2.setRuleName(ruleName2);
  rp2.add(pp3);
  rp2.add(pp4);
  Redundancy possibilityredundancy=new Redundancy(RedundancyType.STRONG,pp1,pp3);
  Subsumption possibilitysubsupmtion=new Subsumption(pp2,pp4);
  Redundancy ruleRedundancy=new Redundancy(r1,r2);
  data.add(r1);
  data.add(r2);
  data.add(pp1);
  data.add(pp2);
  data.add(pp3);
  data.add(possibilityredundancy);
  data.add(possibilitysubsupmtion);
  data.add(ruleRedundancy);
  data.add(rp1);
  data.add(rp2);
  StatelessSessionResult sessionResult=session.executeWithResults(data);
  Map<Cause,Set<Cause>> map=createSubsumptionMap(sessionResult.iterateObjects());
  assertTrue(TestBase.causeMapContains(map,rp1,rp2));
  assertTrue(TestBase.causeMapContains(map,pp2,pp4));
  if (!map.isEmpty()) {
    fail("More redundancies than was expected.");
  }
}
