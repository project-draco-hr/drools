{
  this.objectSource=null;
  this.tupleSource=null;
  this.declarations=new HashMap();
  this.objectType=new LinkedHashMap();
  if (rule instanceof Query) {
    attachQuery(rule.getName());
  }
  for (final Iterator it=and.getChildren().iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof EvalCondition) {
      final EvalCondition eval=(EvalCondition)object;
      checkUnboundDeclarations(eval.getRequiredDeclarations());
      this.tupleSource=attachNode(new EvalConditionNode(this.id++,this.tupleSource,eval));
      continue;
    }
    BetaConstraints binder=null;
    Column column=null;
    if (object instanceof Column) {
      column=(Column)object;
      if ((binder != null) && (binder != EmptyBetaConstraints.getInstance()))       throw new RuntimeDroolsException("This is a bug! Please report to Drools development team!");
      binder=attachColumn((Column)object,and,this.removeIdentities);
      if (this.tupleSource == null) {
        this.tupleSource=attachNode(new LeftInputAdapterNode(this.id++,this.objectSource));
        this.objectSource=null;
      }
    }
 else     if (object instanceof GroupElement) {
      GroupElement ce=(GroupElement)object;
      while (!(ce.getChildren().get(0) instanceof Column)) {
        ce=(GroupElement)ce.getChildren().get(0);
      }
      column=(Column)ce.getChildren().get(0);
      if (this.tupleSource == null) {
        this.currentOffsetAdjustment=1;
        final ObjectSource objectSource=attachNode(new ObjectTypeNode(this.id++,new ClassObjectType(InitialFact.class),this.rete,this.ruleBase.getConfiguration().getAlphaNodeHashingThreshold()));
        this.tupleSource=attachNode(new LeftInputAdapterNode(this.id++,objectSource));
      }
      if ((binder != null) && (binder != EmptyBetaConstraints.getInstance()))       throw new RuntimeDroolsException("This is a bug! Please report to Drools development team!");
      binder=attachColumn(column,and,this.removeIdentities);
    }
    if (object.getClass() == Not.class) {
      attachNot(this.tupleSource,(Not)object,this.objectSource,binder,column);
      binder=null;
    }
 else     if (object.getClass() == Exists.class) {
      attachExists(this.tupleSource,(Exists)object,this.objectSource,binder,column);
      binder=null;
    }
 else     if (object.getClass() == From.class) {
      attachFrom(this.tupleSource,(From)object);
    }
 else     if (object.getClass() == Accumulate.class) {
      attachAccumulate(this.tupleSource,and,(Accumulate)object);
    }
 else     if (object.getClass() == Collect.class) {
      attachCollect(this.tupleSource,and,(Collect)object);
    }
 else     if (this.objectSource != null) {
      this.tupleSource=attachNode(new JoinNode(this.id++,this.tupleSource,this.objectSource,binder));
      binder=null;
    }
  }
}
