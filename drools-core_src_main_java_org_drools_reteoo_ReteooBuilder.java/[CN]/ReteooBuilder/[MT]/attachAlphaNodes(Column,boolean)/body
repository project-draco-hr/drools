{
  List constraints=column.getConstraints();
  Class thisClass=((ClassObjectType)column.getObjectType()).getClassType();
  this.objectSource=attachNode(new ObjectTypeNode(this.id++,column.getObjectType(),this.rete));
  List predicateConstraints=new ArrayList();
  if (removeIdentities) {
    for (Iterator it=this.objectType.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry entry=(Map.Entry)it.next();
      Class previousClass=((ClassObjectType)entry.getKey()).getClassType();
      if (thisClass.isAssignableFrom(previousClass)) {
        predicateConstraints.add(new InstanceEqualsConstraint(((Integer)entry.getValue()).intValue()));
      }
    }
    this.objectType.put(column.getObjectType(),new Integer(column.getFactIndex()));
  }
  for (Iterator it=constraints.iterator(); it.hasNext(); ) {
    Object object=it.next();
    if (object instanceof Declaration) {
      Declaration declaration=(Declaration)object;
      this.declarations.put(declaration.getIdentifier(),declaration);
      continue;
    }
    FieldConstraint fieldConstraint=(FieldConstraint)object;
    if (fieldConstraint instanceof LiteralConstraint) {
      this.objectSource=attachNode(new AlphaNode(this.id++,fieldConstraint,objectSource));
    }
 else {
      checkUnboundDeclarations(fieldConstraint.getRequiredDeclarations());
      predicateConstraints.add(fieldConstraint);
    }
  }
  return predicateConstraints;
}
