{
  final List constraints=column.getConstraints();
  this.objectSource=attachNode(new ObjectTypeNode(this.id++,this.sinklistFactory.newObjectSinkList(ObjectTypeNode.class),column.getObjectType(),this.rete));
  final List predicateConstraints=new ArrayList();
  if (removeIdentities && column.getObjectType().getClass() != FactTemplateObjectType.class) {
    final Class thisClass=((ClassObjectType)column.getObjectType()).getClassType();
    for (final Iterator it=this.objectType.entrySet().iterator(); it.hasNext(); ) {
      final Map.Entry entry=(Map.Entry)it.next();
      final Class previousClass=((ClassObjectType)entry.getKey()).getClassType();
      if (thisClass.isAssignableFrom(previousClass)) {
        predicateConstraints.add(new InstanceNotEqualsConstraint(((Integer)entry.getValue()).intValue()));
      }
    }
    this.objectType.put(column.getObjectType(),new Integer(column.getFactIndex()));
  }
  for (final Iterator it=constraints.iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof Declaration) {
      final Declaration declaration=(Declaration)object;
      this.declarations.put(declaration.getIdentifier(),declaration);
      continue;
    }
    final FieldConstraint fieldConstraint=(FieldConstraint)object;
    if (fieldConstraint.getRequiredDeclarations().length == 0) {
      this.objectSource=attachNode(new AlphaNode(this.id++,this.sinklistFactory.newObjectSinkList(AlphaNode.class),fieldConstraint,this.objectSource));
    }
 else {
      checkUnboundDeclarations(fieldConstraint.getRequiredDeclarations());
      predicateConstraints.add(fieldConstraint);
    }
  }
  return predicateConstraints;
}
