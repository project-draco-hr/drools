{
  final Column column=from.getColumn();
  if (this.tupleSource == null) {
    this.currentOffsetAdjustment=1;
    final ObjectSource objectSource=attachNode(new ObjectTypeNode(this.id++,new ClassObjectType(InitialFact.class),this.rete,this.ruleBase.getConfiguration().getAlphaNodeHashingThreshold()));
    this.tupleSource=attachNode(new LeftInputAdapterNode(this.id++,objectSource));
  }
  column.adjustOffset(this.currentOffsetAdjustment);
  final List constraints=column.getConstraints();
  if (column.getDeclaration() != null) {
    final Declaration declaration=column.getDeclaration();
    this.declarations.put(declaration.getIdentifier(),declaration);
  }
  final List betaConstraints=new ArrayList();
  final List alphaConstraints=new ArrayList();
  for (final Iterator it=constraints.iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof Declaration) {
      final Declaration declaration=(Declaration)object;
      this.declarations.put(declaration.getIdentifier(),declaration);
      continue;
    }
    final AlphaNodeFieldConstraint fieldConstraint=(AlphaNodeFieldConstraint)object;
    if (fieldConstraint instanceof LiteralConstraint) {
      alphaConstraints.add(fieldConstraint);
    }
 else {
      checkUnboundDeclarations(fieldConstraint.getRequiredDeclarations());
      betaConstraints.add(fieldConstraint);
    }
  }
  final BetaConstraints binder=createBetaNodeConstraint(betaConstraints);
  this.tupleSource=attachNode(new FromNode(this.id++,from.getDataProvider(),this.tupleSource,(AlphaNodeFieldConstraint[])alphaConstraints.toArray(new AlphaNodeFieldConstraint[alphaConstraints.size()]),binder));
}
