{
  Column column=from.getColumn();
  column.adjustOffset(this.currentOffsetAdjustment);
  final List constraints=column.getConstraints();
  if (column.getDeclaration() != null) {
    final Declaration declaration=column.getDeclaration();
    this.declarations.put(declaration.getIdentifier(),declaration);
  }
  final List predicateConstraints=new ArrayList();
  final List alphaNodeConstraints=new ArrayList();
  for (final Iterator it=constraints.iterator(); it.hasNext(); ) {
    final Object object=it.next();
    if (object instanceof Declaration) {
      final Declaration declaration=(Declaration)object;
      this.declarations.put(declaration.getIdentifier(),declaration);
      continue;
    }
    final FieldConstraint fieldConstraint=(FieldConstraint)object;
    if (fieldConstraint instanceof LiteralConstraint) {
      alphaNodeConstraints.add(fieldConstraint);
    }
 else {
      checkUnboundDeclarations(fieldConstraint.getRequiredDeclarations());
      predicateConstraints.add(fieldConstraint);
    }
  }
  BetaNodeBinder binder;
  if (!predicateConstraints.isEmpty()) {
    binder=new BetaNodeBinder((FieldConstraint[])predicateConstraints.toArray(new FieldConstraint[predicateConstraints.size()]));
  }
 else {
    binder=new BetaNodeBinder();
  }
  FromNode node=new FromNode(id,from.getDataProvider(),this.tupleSource,(FieldConstraint[])alphaNodeConstraints.toArray(new FieldConstraint[alphaNodeConstraints.size()]),binder);
}
