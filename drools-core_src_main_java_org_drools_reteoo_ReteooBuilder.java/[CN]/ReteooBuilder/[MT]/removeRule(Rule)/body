{
  InternalWorkingMemory[] workingMemories=this.ruleBase.getWorkingMemories();
  final RuleRemovalContext context=new RuleRemovalContext(rule);
  if (ruleBase.getConfiguration().isUnlinkingEnabled() && !(ReteooRuleBuilder.unlinkingAllowedForRule(rule))) {
    context.setUnlinkEnabled(true);
  }
 else {
    context.setUnlinkEnabled(false);
  }
  final BaseNode[] nodes=this.rules.remove(rule);
  for (  BaseNode node : nodes) {
    NodeSet nodeSet=new NodeSet();
    node.collectAncestors(nodeSet);
    List<BaseNode> removingNodes=nodeSet.getNodes();
    Collections.sort(removingNodes,new Comparator<BaseNode>(){
      private Map<Integer,NodeSet> ancestorsMap=new HashMap<Integer,NodeSet>();
      public int compare(      BaseNode o1,      BaseNode o2){
        return o2.getId() > o1.getId() ? (getAncestors(o1).contains(o2) ? -1 : 1) : (getAncestors(o2).contains(o1) ? 1 : -1);
      }
      private NodeSet getAncestors(      BaseNode o2){
        NodeSet ancestors=ancestorsMap.get(o2.getId());
        if (ancestors == null) {
          ancestors=new NodeSet();
          o2.collectAncestors(ancestors);
          ancestorsMap.put(o2.getId(),ancestors);
        }
        return ancestors;
      }
    }
);
    RuleRemovalContext.CleanupAdapter adapter=null;
    if (node instanceof RuleTerminalNode) {
      adapter=context.getCleanupAdapter();
      context.setCleanupAdapter(new RuleTerminalNode.RTNCleanupAdapter((RuleTerminalNode)node));
    }
    for (    BaseNode removingNode : removingNodes) {
      removingNode.remove(context,this,workingMemories);
    }
    if (node instanceof RuleTerminalNode) {
      for (      InternalWorkingMemory workingMemory : workingMemories) {
        workingMemory.executeQueuedActions();
      }
      context.setCleanupAdapter(adapter);
    }
  }
  resetMasks(context);
}
