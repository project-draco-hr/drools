{
  this.scenario=scenario;
  this.workingMemory=wm;
  for (int i=0; i < scenario.facts.length; i++) {
    FactData fact=scenario.facts[i];
    Object f=eval("new " + resolver.getFullTypeName(fact.type) + "()");
    if (fact.isGlobal) {
      populateFields(fact,globalData,f);
      globalData.put(fact.name,f);
    }
 else {
      populateFields(fact,populatedData,f);
      populatedData.put(fact.name,f);
    }
  }
  HashSet<String> ruleList=new HashSet<String>();
  ruleList.addAll(Arrays.asList(scenario.ruleTrace.rules));
  TestingEventListener listener=new TestingEventListener(ruleList,wm.getRuleBase(),scenario.ruleTrace.inclusive);
  wm.addEventListener(listener);
  applyData(wm,this.populatedData,this.globalData);
  wm.fireAllRules(scenario.maxRuleFirings);
  scenario.ruleTrace.firingCounts=listener.firingCounts;
  for (int i=0; i < scenario.assertions.length; i++) {
    Assertion assertion=scenario.assertions[i];
    if (assertion instanceof VerifyFact) {
      verify((VerifyFact)assertion);
    }
 else     if (assertion instanceof VerifyRuleFired) {
      verify((VerifyRuleFired)assertion,listener.firingCounts);
    }
  }
}
