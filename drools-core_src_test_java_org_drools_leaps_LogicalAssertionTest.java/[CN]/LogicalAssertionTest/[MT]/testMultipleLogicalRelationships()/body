{
  final Rule rule1=new Rule("test-rule1");
  RuleBaseImpl ruleBase=new RuleBaseImpl();
  WorkingMemoryImpl workingMemory=(WorkingMemoryImpl)ruleBase.newWorkingMemory();
  Consequence consequence=new Consequence(){
    public void invoke(    Activation activation,    WorkingMemory workingMemory){
    }
  }
;
  rule1.setConsequence(consequence);
  FactHandleImpl tuple1Fact=(FactHandleImpl)workingMemory.assertObject("tuple1 object");
  FactHandleImpl tuple2Fact=(FactHandleImpl)workingMemory.assertObject("tuple2 object");
  FactHandleImpl[] tuple1Handles=new FactHandleImpl[1];
  FactHandleImpl[] tuple2Handles=new FactHandleImpl[1];
  tuple1Handles[0]=tuple1Fact;
  tuple2Handles[0]=tuple2Fact;
  LeapsTuple tuple1=new LeapsTuple(tuple1Handles);
  LeapsTuple tuple2=new LeapsTuple(tuple2Handles);
  PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,null,null);
  workingMemory.assertTuple(tuple1,new ArrayList(),new ArrayList(),context,rule1);
  Activation activation1=workingMemory.getAgenda().getActivations()[0];
  String logicalString1=new String("logical");
  FactHandle logicalHandle1=workingMemory.assertObject(logicalString1,false,true,rule1,activation1);
  final Rule rule2=new Rule("test-rule2");
  rule2.setConsequence(consequence);
  tuple2=new LeapsTuple(tuple2Handles);
  workingMemory.assertTuple(tuple2,new ArrayList(),new ArrayList(),context,rule1);
  Activation activation2=workingMemory.getAgenda().getActivations()[1];
  String logicalString2=new String("logical");
  FactHandle logicalHandle2=workingMemory.assertObject(logicalString2,false,true,rule2,activation2);
  assertLength(1,workingMemory.getJustified().values());
  workingMemory.retractObject(tuple1Fact);
  assertLength(1,workingMemory.getJustified().values());
  workingMemory.retractObject(tuple2Fact);
  assertLength(0,workingMemory.getJustified().values());
}
