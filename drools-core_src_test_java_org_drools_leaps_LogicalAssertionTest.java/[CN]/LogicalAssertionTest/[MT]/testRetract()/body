{
  final Rule rule1=new Rule("test-rule1");
  rule1.setConsequence(this.consequence);
  LeapsRule leapsRule1=new LeapsRule(rule1,new ArrayList(),new ArrayList(),new ArrayList(),new ArrayList());
  FactHandleImpl tuple1FactHandle=(FactHandleImpl)this.workingMemory.assertObject("tuple1 object");
  FactHandleImpl tuple2FactHandle=(FactHandleImpl)this.workingMemory.assertObject("tuple2 object");
  FactHandleImpl[] factHandlesTuple1=new FactHandleImpl[1];
  FactHandleImpl[] factHandlesTuple2=new FactHandleImpl[1];
  factHandlesTuple1[0]=tuple1FactHandle;
  factHandlesTuple2[0]=tuple2FactHandle;
  PropagationContext context=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule1,null);
  LeapsTuple tuple1=new LeapsTuple(factHandlesTuple1,leapsRule1,context);
  LeapsTuple tuple2=new LeapsTuple(factHandlesTuple2,leapsRule1,context);
  this.workingMemory.assertTuple(tuple1);
  Activation activation1=this.workingMemory.getAgenda().getActivations()[0];
  String logicalString1=new String("logical");
  FactHandle logicalHandle1=this.workingMemory.assertObject(logicalString1,false,true,rule1,activation1);
  assertEquals(3,this.workingMemory.getObjects().size());
  final Rule rule2=new Rule("test-rule2");
  rule2.setConsequence(this.consequence);
  PropagationContext context2=new PropagationContextImpl(0,PropagationContext.ASSERTION,rule2,null);
  tuple1=new LeapsTuple(factHandlesTuple2,leapsRule1,context2);
  this.workingMemory.assertTuple(tuple1);
  Activation activation2=this.workingMemory.getAgenda().getActivations()[1];
  String logicalString2=new String("logical");
  FactHandle logicalHandle2=this.workingMemory.assertObject(logicalString2,false,true,rule1,activation2);
  assertEquals(3,this.workingMemory.getObjects().size());
  this.workingMemory.retractObject(logicalHandle2);
  assertEquals(2,this.workingMemory.getObjects().size());
}
