{
  String field1=expr.substring(0,sharpPos).trim();
  int sharpPos2=expr.indexOf('#',sharpPos + 1);
  String part2=sharpPos2 < 0 ? expr.substring(sharpPos + 1).trim() : expr.substring(sharpPos + 1,sharpPos2).trim();
  String[] classAndField=splitInClassAndField(part2,context);
  BaseDescr desc=parentIdx >= 0 ? ccd.getDescrs().get(parentIdx) : null;
  if (classAndField == null) {
    return new String[]{"",expr};
  }
 else   if (desc instanceof AtomicExprDescr && classAndField.length == 1) {
    return new String[]{"",field1 + " instanceof " + classAndField[0]};
  }
  String className=classAndField[0];
  String castedExpression=classAndField.length == 1 ? "((" + className + ")"+ field1+ ")" : "((" + className + ")"+ field1+ ")."+ classAndField[1]+ (sharpPos2 > 0 ? expr.substring(sharpPos2) : "");
  RelationalExprDescr check=new RelationalExprDescr("instanceof",false,null,new AtomicExprDescr(field1),new AtomicExprDescr(className));
  if (ccd.getConnective() == ConnectiveType.AND || ccd.getConnective() == ConnectiveType.INC_AND) {
    ccd.getDescrs().add(childIdx,check);
  }
 else {
    if (desc instanceof ConstraintConnectiveDescr) {
      ((ConstraintConnectiveDescr)desc).getDescrs().add(childIdx,check);
    }
 else {
      ConstraintConnectiveDescr localAnd=new ConstraintConnectiveDescr(ConnectiveType.AND);
      BaseDescr original=ccd.getDescrs().remove(parentIdx);
      localAnd.getDescrs().add(check);
      localAnd.getDescrs().add(original);
      ccd.getDescrs().add(parentIdx,localAnd);
    }
  }
  atomicExpr.setRewrittenExpression(castedExpression);
  String innerCheck=check.toString() + " && ";
  return new String[]{innerCheck,castedExpression};
}
