{
  for (  LeftTupleSink sink : lt.getSinkPropagator().getSinks()) {
    if (NodeTypeEnums.isLeftTupleSource(sink)) {
      if (sink.getType() == NodeTypeEnums.NotNode) {
        BetaMemory bm=(BetaMemory)wm.getNodeMemory((MemoryFactory)sink);
        if (bm.getSegmentMemory() == null) {
          createSegmentMemory((NotNode)sink,wm);
        }
      }
      updateRiaAndTerminalMemory(++pos,(LeftTupleSource)sink,originalLt,smem,wm);
    }
 else     if (sink.getType() == NodeTypeEnums.RightInputAdaterNode) {
      if (inSubNetwork((RightInputAdapterNode)sink,originalLt)) {
        RiaNodeMemory riaMem=(RiaNodeMemory)wm.getNodeMemory((MemoryFactory)sink);
        PathMemory rmem=(PathMemory)riaMem.getRiaPathMemory();
        smem.getPathMemories().add(rmem);
        rmem.getSegmentMemories()[smem.getPos()]=smem;
        if (smem.getAllLinkedMaskTest() != 0 & smem.isSegmentLinked()) {
          rmem.linkSegment(smem.getSegmentPosMaskBit(),wm);
        }
      }
    }
 else     if (NodeTypeEnums.isTerminalNode(sink)) {
      PathMemory rmem=(PathMemory)wm.getNodeMemory((MemoryFactory)sink);
      smem.getPathMemories().add(rmem);
      rmem.getSegmentMemories()[smem.getPos()]=smem;
      if (smem.getAllLinkedMaskTest() != 0 & smem.isSegmentLinked()) {
        rmem.linkSegment(smem.getSegmentPosMaskBit(),wm);
      }
    }
  }
}
