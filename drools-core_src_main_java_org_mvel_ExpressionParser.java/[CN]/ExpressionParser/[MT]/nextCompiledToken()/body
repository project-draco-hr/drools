{
  Token tk;
  if ((tk=tokenMap.nextToken()) != null) {
    if (tk.isOperator() && tk.getOperator() == Operator.ASSIGN) {
      return tk;
    }
 else     if (tk.isCollectionCreation()) {
switch (tk.getCollectionCreationType()) {
case Token.LISTCREATE:
{
          List<Object> newList=new ArrayList<Object>();
          newList.add(handleSubNesting(tk.isNestBegin() ? tokenMap.nextToken() : tk));
          while (tokenMap.hasMoreTokens() && (tokenMap.peekToken().getFlags() & Token.ENDNEST) == 0) {
            newList.add(handleSubNesting(tokenMap.nextToken()));
          }
          tokenMap.nextToken();
          tk.setFlag(true,Token.DO_NOT_REDUCE);
          return tk.setFinalValue(newList);
        }
case Token.MAPCREATE:
{
        tk=tk.isNestBegin() ? tokenMap.nextToken() : tk;
        Map<Object,Object> newMap=new HashMap<Object,Object>();
        newMap.put(handleSubNesting(tk),handleSubNesting(tokenMap.nextToken()));
        while (tokenMap.hasMoreTokens() && (tokenMap.peekToken().getFlags() & Token.ENDNEST) == 0) {
          newMap.put(handleSubNesting(tokenMap.nextToken()),handleSubNesting(tokenMap.nextToken()));
        }
        tokenMap.nextToken();
        tk.setFlag(true,Token.DO_NOT_REDUCE);
        tk.setFinalValue(newMap);
      }
    break;
case Token.ARRAYCREATE:
{
    List<Object> newList=new ArrayList<Object>();
    newList.add(handleSubNesting(tk.isNestBegin() ? tokenMap.nextToken() : tk));
    while (tokenMap.hasMoreTokens() && (tokenMap.peekToken().getFlags() & Token.ENDNEST) == 0) {
      newList.add(handleSubNesting(tokenMap.nextToken()));
    }
    tokenMap.nextToken();
    tk.setFlag(true,Token.DO_NOT_REDUCE);
    return tk.setFinalValue(newList.toArray());
  }
}
if (tokenMap.hasMoreTokens() && (tokenMap.peekToken().getFlags() & Token.PUSH) != 0) {
stk.push(tk.getValue());
return (tk=tokenMap.nextToken()).setFinalValue(PropertyAccessor.get(tk.getName(),stk.pop()));
}
}
 else if ((tk.getFlags() & Token.IDENTIFIER) != 0) {
reduceToken(tk);
}
 else if ((tk.getFlags() & Token.THISREF) != 0) {
tk.setFinalValue(ctx);
}
fields|=(tk.getFlags() & Token.SUBEVAL);
if ((tk.getFlags() & Token.PUSH) != 0) {
stk.push(tk.getValue());
}
}
return tk;
}
