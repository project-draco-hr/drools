{
  String s;
  int tkflags=token.getFlags();
  if (((fields & Token.CAPTURE_ONLY) | (tkflags & Token.LITERAL)) != 0) {
    return token;
  }
  if (fastExecuteMode) {
    try {
      if (token.isOptimized()) {
        return token.getOptimizedValue((((tkflags | fields) & Token.PUSH) != 0) ? valueOnly(stk.pop()) : ctx,ctx,variableFactory);
      }
 else {
        try {
          Object cCtx;
          token.optimizeAccessor(cCtx=(((tkflags | fields) & Token.PUSH) != 0) ? valueOnly(stk.pop()) : ctx,variableFactory);
          return token.getOptimizedValue(cCtx,ctx,variableFactory);
        }
 catch (        Exception e) {
          if (!lookAhead())           throw e;
 else {
            token.createDeferralOptimization();
            return token;
          }
        }
      }
    }
 catch (    PropertyAccessException e) {
      throw e;
    }
catch (    Exception e) {
      try {
synchronized (token) {
          token.deOptimize();
          return reduceToken(token);
        }
      }
 catch (      Exception e2) {
        throw new CompileException("optimization failure for: " + new String(expr),e);
      }
    }
  }
  if (propertyAccessor == null)   propertyAccessor=new PropertyAccessor(variableFactory,ctx);
  if (((tkflags | fields) & Token.PUSH) != 0) {
    return token.setValue(propertyAccessor.setParameters(expr,token.getStart(),token.getEnd(),valueOnly(stk.pop())).get());
  }
 else   if ((tkflags & Token.DEEP_PROPERTY) != 0) {
    if (Token.LITERALS.containsKey(s=token.getAbsoluteRootElement())) {
      Object literal=Token.LITERALS.get(s);
      if (literal == ThisLiteral.class)       literal=ctx;
      return token.setValue(propertyAccessor.setParameters(expr,token.getStart() + token.getFirstUnion(),token.getEnd(),literal).get());
    }
 else     if (variableFactory != null && variableFactory.isResolveable(s)) {
      return token.setValue(propertyAccessor.setParameters(expr,token.getStart() + token.getAbsoluteFirstPart(),token.getEnd(),variableFactory.getVariableResolver(s).getValue()).get());
    }
 else     if (ctx != null) {
      try {
        return token.setValue(propertyAccessor.setParameters(expr,token.getStart(),token.getEnd(),ctx).get());
      }
 catch (      PropertyAccessException e) {
        Token tk=tryStaticAccess(token);
        if (tk == null)         throw e;
        return tk;
      }
    }
 else {
      Token tk=tryStaticAccess(token);
      if (tk == null)       throw new CompileException("unable to resolve token: " + s);
      return tk;
    }
  }
 else {
    if (Token.LITERALS.containsKey(s=token.getAbsoluteName())) {
      return token.setValue(Token.LITERALS.get(s));
    }
 else     if (variableFactory != null && variableFactory.isResolveable(s)) {
      if ((token.getFlags() & Token.COLLECTION) != 0) {
        return token.setValue(propertyAccessor.setParameters(expr,token.getStart() + token.getEndOfName(),token.getEnd(),variableFactory.getVariableResolver(s).getValue()).get());
      }
      return token.setValue(variableFactory.getVariableResolver(s).getValue());
    }
 else     if (ctx != null) {
      try {
        return token.setValue(propertyAccessor.setParameters(expr,token.getStart(),token.getEnd(),ctx).get());
      }
 catch (      RuntimeException e) {
        if (!lookAhead())         throw e;
      }
    }
 else {
      if (!lookAhead())       throw new CompileException("unable to resolve token: " + s);
    }
  }
  return token;
}
