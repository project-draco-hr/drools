{
switch (o) {
case AND:
    if (stk.peek() instanceof Boolean && !((Boolean)valueOnly(stk.peek()))) {
      nextToken();
      return -1;
    }
  break;
case OR:
if (stk.peek() instanceof Boolean && ((Boolean)valueOnly(stk.peek()))) {
  nextToken();
  return -1;
}
break;
case TERNARY:
Token tk;
if (!compileMode && (Boolean)valueOnly(stk.peek())) {
stk.discard();
return 1;
}
 else {
fields|=Token.CAPTURE_ONLY;
stk.clear();
while ((tk=nextToken()) != null && !(tk.isOperator() && tk.getOperator() == Operator.TERNARY_ELSE)) {
}
setFieldFalse(Token.CAPTURE_ONLY);
return 1;
}
case TERNARY_ELSE:
return -1;
case END_OF_STMT:
setFieldFalse(Token.LISTCREATE);
if (fastExecuteMode) {
if ((fields & Token.ASSIGN) != 0 || !tokenMap.hasMoreTokens()) {
return -1;
}
 else {
stk.clear();
return 1;
}
}
if ((fields & Token.ASSIGN) != 0 || cursor == length) {
return -1;
}
 else {
stk.clear();
return 1;
}
case ASSIGN:
if (!(tk=(Token)stk.pop()).isValidNameIdentifier()) throw new CompileException("invalid identifier: " + tk.getName());
fields|=Token.ASSIGN;
parseAndExecuteInterpreted();
fields^=Token.ASSIGN;
finalLocalVariableFactory().createVariable(tk.getName(),stk.pushAndPeek(valueOnly(stk.pop())));
if (fastExecuteMode) {
if (tokenMap.hasMoreTokens()) {
stk.clear();
}
}
 else if (cursor != length) {
stk.clear();
}
return 1;
case NEW:
stk.discard();
try {
fields|=Token.CAPTURE_ONLY;
String[] name=captureContructorAndResidual(fastExecuteMode ? nextCompiledToken().getName() : nextToken().getName());
stk.push(ParseTools.constructObject(name[0],ctx,variableFactory));
setFieldFalse(Token.CAPTURE_ONLY);
if (name.length == 2) {
stk.push(PropertyAccessor.get(name[1],stk.pop()));
}
}
 catch (InstantiationException e) {
throw new CompileException("unable to isntantiate class",e);
}
catch (IllegalAccessException e) {
throw new CompileException("unable to instantiate class",e);
}
catch (InvocationTargetException e) {
throw new CompileException("unable to instantiate class",e);
}
catch (ClassNotFoundException e) {
throw new CompileException("class not found: " + e.getMessage(),e);
}
return 1;
}
return 0;
}
