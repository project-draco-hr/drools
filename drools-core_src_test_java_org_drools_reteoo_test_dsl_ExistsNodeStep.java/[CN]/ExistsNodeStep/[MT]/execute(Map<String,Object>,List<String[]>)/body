{
  BuildContext buildContext=(BuildContext)context.get("BuildContext");
  if (args.size() != 0) {
    String[] a=args.get(0);
    String name=a[0];
    String leftInput=a[1];
    String rightInput=a[2];
    LeftTupleSource leftTupleSource;
    if ("mock".equals(leftInput)) {
      leftTupleSource=Mockito.mock(LeftTupleSource.class);
    }
 else {
      leftTupleSource=(LeftTupleSource)context.get(leftInput);
    }
    ObjectSource rightObjectSource;
    if ("mock".equals(rightInput)) {
      rightObjectSource=Mockito.mock(ObjectSource.class);
    }
 else {
      rightObjectSource=(ObjectSource)context.get(rightInput);
    }
    a=args.get(1);
    String type=a[0].trim();
    String fieldName=a[1].trim();
    String operator=a[2].trim();
    String var=a[3].trim();
    Pattern rightSidePattern=null;
    try {
      rightSidePattern=reteTesterHelper.getPattern(1,type);
    }
 catch (    Exception e) {
      throw new IllegalArgumentException("Not possible to process arguments: " + Arrays.toString(a));
    }
    Declaration declr=(Declaration)context.get(var);
    BetaNodeFieldConstraint betaConstraint;
    try {
      betaConstraint=this.reteTesterHelper.getBoundVariableConstraint(((ClassObjectType)rightSidePattern.getObjectType()).getClassType(),fieldName,declr,operator);
    }
 catch (    IntrospectionException e) {
      throw new IllegalArgumentException();
    }
    SingleBetaConstraints constraints=new SingleBetaConstraints(betaConstraint,buildContext.getRuleBase().getConfiguration());
    ExistsNode existsNode=new ExistsNode(buildContext.getNextId(),leftTupleSource,rightObjectSource,constraints,BehaviorManager.NO_BEHAVIORS,buildContext);
    existsNode.attach();
    context.put(name,existsNode);
  }
 else {
    throw new IllegalArgumentException("Cannot arguments " + args);
  }
}
