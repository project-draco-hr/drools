{
  String drl="" + "package org.drools.test; \n" + "import org.drools.reteoo.integrationtests.Misc2Test.TradeBooking;\n"+ "import org.drools.reteoo.integrationtests.Misc2Test.TradeHeader;\n"+ "rule \"Rule1\" \n"+ "salience 1 \n"+ "when\n"+ "  $booking: TradeBooking()\n"+ "  $trade: TradeHeader() from $booking.getTrade()\n"+ "  not String()\n"+ "then\n"+ "  System.out.println( \"Rule1\" ); \n"+ "  $trade.setAction(\"New\");\n"+ "  modify($booking) {}\n"+ "  insert (\"run\");\n"+ "end;\n"+ "\n"+ "rule \"Rule2\"\n"+ "lock-on-active true\n"+ "when\n"+ "  $booking: TradeBooking( )\n"+ "  $trade: Object( ) from $booking.getTrade()\n"+ "then\n"+ "  System.out.println( \"Rule2\" ); \n"+ "end";
  KnowledgeBase kb=loadKnowledgeBaseFromString(drl);
  StatefulKnowledgeSession ks=kb.newStatefulKnowledgeSession();
  ks.addEventListener(new AgendaEventListener(){
    int step=0;
    public void matchCreated(    MatchCreatedEvent event){
    }
    public void matchCancelled(    MatchCancelledEvent event){
switch (step) {
case 0:
        assertEquals("Rule2",event.getMatch().getRule().getName());
      step++;
    break;
case 1:
  assertEquals("Rule1",event.getMatch().getRule().getName());
step++;
break;
default :
fail("More cancelled activations than expected");
}
}
public void beforeMatchFired(BeforeMatchFiredEvent event){
}
public void afterMatchFired(AfterMatchFiredEvent event){
assertEquals("Rule1",event.getMatch().getRule().getName());
}
public void agendaGroupPopped(AgendaGroupPoppedEvent event){
}
public void agendaGroupPushed(AgendaGroupPushedEvent event){
}
public void beforeRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event){
}
public void afterRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event){
}
public void beforeRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event){
}
public void afterRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event){
}
}
);
ks.fireAllRules();
TradeBooking tb=new TradeBookingImpl(new TradeHeaderImpl());
ks.insert(tb);
assertEquals(1,ks.fireAllRules());
}
