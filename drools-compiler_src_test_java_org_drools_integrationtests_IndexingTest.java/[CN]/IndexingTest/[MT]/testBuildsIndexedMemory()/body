{
  String drl="";
  drl+="package org.test\n";
  drl+="import org.kie.Person\n";
  drl+="global java.util.List list\n";
  drl+="rule test1\n";
  drl+="when\n";
  drl+="   $p1  : Person($name : name )\n";
  drl+="   $p2 : Person(name == $name)\n";
  drl+="   $p3 : Person(name == $p1.name)\n";
  drl+="   $p4 : Person(address.street == $p1.address.street)\n";
  drl+="   $p5 : Person(address.street == $p1.name)\n";
  drl+="   $p7 : Person(addresses[\"key\"].street == $p1.name)\n";
  drl+="   $p8 : Person(addresses[0].street == $p1.name)\n";
  drl+="   $p9 : Person(name == $p1.address.street)\n";
  drl+="   $p10 : Person(addresses[0].street + 'xx' == $p1.name)\n";
  drl+="   $p11 : Person(addresses[$p1].street == $p1.name)\n";
  drl+="then\n";
  drl+="end\n";
  KnowledgeBuilder kbuilder=KnowledgeBuilderFactory.newKnowledgeBuilder();
  kbuilder.add(ResourceFactory.newReaderResource(new StringReader(drl)),ResourceType.DRL);
  KnowledgeBuilderErrors errors=kbuilder.getErrors();
  if (kbuilder.hasErrors()) {
    fail(kbuilder.getErrors().toString());
  }
  assertFalse(kbuilder.hasErrors());
  KnowledgeBase kbase=KnowledgeBaseFactory.newKnowledgeBase();
  kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
  ObjectTypeNode node=getObjectTypeNode(kbase,Person.class);
  ReteooWorkingMemoryInterface wm=((StatefulKnowledgeSessionImpl)kbase.newStatefulKnowledgeSession()).session;
  LeftInputAdapterNode liaNode=(LeftInputAdapterNode)node.getSinkPropagator().getSinks()[0];
  JoinNode j2=(JoinNode)liaNode.getSinkPropagator().getSinks()[0];
  JoinNode j3=(JoinNode)j2.getSinkPropagator().getSinks()[0];
  JoinNode j4=(JoinNode)j3.getSinkPropagator().getSinks()[0];
  JoinNode j5=(JoinNode)j4.getSinkPropagator().getSinks()[0];
  JoinNode j7=(JoinNode)j5.getSinkPropagator().getSinks()[0];
  JoinNode j8=(JoinNode)j7.getSinkPropagator().getSinks()[0];
  JoinNode j9=(JoinNode)j8.getSinkPropagator().getSinks()[0];
  JoinNode j10=(JoinNode)j9.getSinkPropagator().getSinks()[0];
  JoinNode j11=(JoinNode)j10.getSinkPropagator().getSinks()[0];
  SingleBetaConstraints c=(SingleBetaConstraints)j2.getRawConstraints();
  assertEquals("$name",((IndexableConstraint)c.getConstraint()).getFieldIndex().getDeclaration().getIdentifier());
  assertTrue(c.isIndexed());
  BetaMemory bm=(BetaMemory)wm.getNodeMemory(j2);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleIndexHashTable);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleIndexHashTable);
  c=(SingleBetaConstraints)j3.getRawConstraints();
  assertEquals("name",((IndexableConstraint)c.getConstraint()).getFieldIndex().getDeclaration().getIdentifier());
  assertTrue(c.isIndexed());
  bm=(BetaMemory)wm.getNodeMemory(j3);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleIndexHashTable);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleIndexHashTable);
  c=(SingleBetaConstraints)j4.getRawConstraints();
  assertEquals("$p1",c.getConstraint().getRequiredDeclarations()[0].getIdentifier());
  assertFalse(c.isIndexed());
  bm=(BetaMemory)wm.getNodeMemory(j4);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleList);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleList);
  c=(SingleBetaConstraints)j5.getRawConstraints();
  assertEquals("name",((IndexableConstraint)c.getConstraint()).getFieldIndex().getDeclaration().getIdentifier());
  assertTrue(c.isIndexed());
  bm=(BetaMemory)wm.getNodeMemory(j5);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleIndexHashTable);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleIndexHashTable);
  c=(SingleBetaConstraints)j7.getRawConstraints();
  assertEquals("name",((IndexableConstraint)c.getConstraint()).getFieldIndex().getDeclaration().getIdentifier());
  assertTrue(c.isIndexed());
  bm=(BetaMemory)wm.getNodeMemory(j7);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleIndexHashTable);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleIndexHashTable);
  c=(SingleBetaConstraints)j8.getRawConstraints();
  assertEquals("name",((IndexableConstraint)c.getConstraint()).getFieldIndex().getDeclaration().getIdentifier());
  assertTrue(c.isIndexed());
  bm=(BetaMemory)wm.getNodeMemory(j8);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleIndexHashTable);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleIndexHashTable);
  c=(SingleBetaConstraints)j9.getRawConstraints();
  assertEquals("$p1",c.getConstraint().getRequiredDeclarations()[0].getIdentifier());
  assertFalse(c.isIndexed());
  bm=(BetaMemory)wm.getNodeMemory(j9);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleList);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleList);
  c=(SingleBetaConstraints)j10.getRawConstraints();
  assertEquals("name",((IndexableConstraint)c.getConstraint()).getFieldIndex().getDeclaration().getIdentifier());
  assertTrue(c.isIndexed());
  bm=(BetaMemory)wm.getNodeMemory(j10);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleIndexHashTable);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleIndexHashTable);
  c=(SingleBetaConstraints)j11.getRawConstraints();
  assertEquals("$p1",c.getConstraint().getRequiredDeclarations()[0].getIdentifier());
  assertFalse(c.isIndexed());
  bm=(BetaMemory)wm.getNodeMemory(j11);
  assertTrue(bm.getLeftTupleMemory() instanceof LeftTupleList);
  assertTrue(bm.getRightTupleMemory() instanceof RightTupleList);
}
