{
  if (process instanceof RuleFlowProcess) {
    RuleFlowProcessValidator validator=RuleFlowProcessValidatorImpl.getInstance();
    RuleFlowProcessValidationError[] errors=validator.validateProcess((RuleFlowProcess)process);
    if (errors.length != 0) {
      for (int i=0; i < errors.length; i++) {
        this.errors.add(new ParserError(errors[i].toString(),-1,-1));
      }
    }
 else {
      String rules=generateRules(process);
      try {
        packageBuilder.addPackageFromDrl(new StringReader(rules));
      }
 catch (      IOException e) {
        e.printStackTrace(System.err);
      }
catch (      DroolsParserException e) {
        e.printStackTrace(System.err);
      }
      buildNodes(process);
      this.packageBuilder.getPackage().addRuleFlow(process);
      Package pkg=this.packageBuilder.getPackage();
      if (pkg != null) {
        this.packageBuilder.getDialectRegistry().compileAll();
        if (pkg.getPackageCompilationData().isDirty()) {
          pkg.getPackageCompilationData().reload();
        }
      }
    }
  }
}
