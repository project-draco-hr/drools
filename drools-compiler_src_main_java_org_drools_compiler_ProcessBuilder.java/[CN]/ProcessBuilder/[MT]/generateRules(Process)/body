{
  StringBuffer builder=new StringBuffer();
  if (process instanceof WorkflowProcessImpl) {
    WorkflowProcessImpl ruleFlow=(WorkflowProcessImpl)process;
    builder.append("package " + ruleFlow.getPackageName() + "\n");
    List<String> imports=ruleFlow.getImports();
    if (imports != null) {
      for (      String importString : imports) {
        builder.append("import " + importString + ";\n");
      }
    }
    List<String> functionImports=ruleFlow.getFunctionImports();
    if (functionImports != null) {
      for (      String importString : functionImports) {
        builder.append("import function " + importString + ";\n");
      }
    }
    Map<String,String> globals=ruleFlow.getGlobals();
    if (globals != null) {
      for (      Map.Entry<String,String> entry : globals.entrySet()) {
        builder.append("global " + entry.getValue() + " "+ entry.getKey()+ ";\n");
      }
    }
    Node[] nodes=ruleFlow.getNodes();
    generateRules(nodes,process,builder);
  }
  return builder.toString();
}
