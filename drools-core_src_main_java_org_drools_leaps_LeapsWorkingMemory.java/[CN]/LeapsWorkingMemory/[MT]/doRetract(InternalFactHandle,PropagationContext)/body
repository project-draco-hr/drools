{
  final Object objectClass=LeapsBuilder.getLeapsClassType(factHandle.getObject());
  for (final Iterator it=this.getFactTablesList(objectClass).iterator(); it.hasNext(); ) {
    ((FactTable)it.next()).remove(factHandle);
  }
  final Iterator tuples=((LeapsFactHandle)factHandle).getActivatedTuples();
  for (; tuples != null && tuples.hasNext(); ) {
    final LeapsTuple tuple=(LeapsTuple)tuples.next();
    if (tuple.getLeapsRule().getRule() instanceof Query) {
      removeFromQueryResults(tuple.getLeapsRule().getRule().getName(),tuple);
    }
 else {
      invalidateActivation(tuple);
    }
  }
  ((LeapsFactHandle)factHandle).clearActivatedTuples();
  Iterator it;
  final IteratorChain chain=new IteratorChain();
  it=((LeapsFactHandle)factHandle).getNotTupleAssemblies();
  if (it != null) {
    chain.addIterator(it);
  }
  it=((LeapsFactHandle)factHandle).getExistsTupleAssemblies();
  if (it != null) {
    chain.addIterator(it);
  }
  for (; chain.hasNext(); ) {
    final FactHandleTupleAssembly tupleAssembly=((FactHandleTupleAssembly)chain.next());
    final LeapsTuple tuple=tupleAssembly.getTuple();
    if (tupleAssembly.getType() == FactHandleTupleAssembly.NOT) {
      tuple.removeBlockingNotFactHandle(tupleAssembly.getIndex());
    }
 else {
      tuple.removeExistsFactHandle(tupleAssembly.getIndex());
    }
    if (!TokenEvaluator.processAfterAllPositiveConstraintOk(tuple,tuple.getLeapsRule(),this)) {
      invalidateActivation(tuple);
    }
 else {
      this.assertTuple(tuple);
    }
  }
  ((LeapsFactHandle)factHandle).clearExistsTuples();
  ((LeapsFactHandle)factHandle).clearNotTuples();
  this.removeTokenFromStack((LeapsFactHandle)factHandle);
}
