{
  for (final Iterator it=this.getFactTablesList(factHandle.getObject().getClass()).iterator(); it.hasNext(); ) {
    ((FactTable)it.next()).remove(factHandle);
  }
  final Iterator tuples=((LeapsFactHandle)factHandle).getActivatedTuples();
  for (; tuples != null && tuples.hasNext(); ) {
    final LeapsTuple tuple=(LeapsTuple)tuples.next();
    if (tuple.getLeapsRule().getRule() instanceof Query) {
      removeFromQueryResults(tuple.getLeapsRule().getRule().getName(),tuple);
    }
 else {
      invalidateActivation(tuple);
    }
  }
  final IdentityMap tuplesNotReadyForActivation=new IdentityMap();
  FactHandleTupleAssembly assembly;
  LeapsTuple tuple;
  Iterator it;
  it=((LeapsFactHandle)factHandle).getNotTupleAssemblies();
  if (it != null) {
    for (; it.hasNext(); ) {
      assembly=(FactHandleTupleAssembly)it.next();
      tuple=assembly.getTuple();
      if (!tuple.isReadyForActivation()) {
        tuplesNotReadyForActivation.put(tuple,tuple);
      }
      tuple.removeBlockingNotFactHandle(assembly.getIndex());
      TokenEvaluator.evaluateNotCondition((LeapsFactHandle)factHandle,assembly.getIndex(),tuple,this);
    }
  }
  it=((LeapsFactHandle)factHandle).getExistsTupleAssemblies();
  if (it != null) {
    for (; it.hasNext(); ) {
      assembly=(FactHandleTupleAssembly)it.next();
      tuple=assembly.getTuple();
      if (!tuple.isReadyForActivation()) {
        tuplesNotReadyForActivation.put(tuple,tuple);
      }
      tuple.removeExistsFactHandle(assembly.getIndex());
      TokenEvaluator.evaluateExistsCondition((LeapsFactHandle)factHandle,assembly.getIndex(),tuple,this);
    }
  }
  final IteratorChain chain=new IteratorChain();
  it=((LeapsFactHandle)factHandle).getNotTupleAssemblies();
  if (it != null) {
    chain.addIterator(it);
  }
  it=((LeapsFactHandle)factHandle).getExistsTupleAssemblies();
  if (it != null) {
    chain.addIterator(it);
  }
  for (; chain.hasNext(); ) {
    tuple=((FactHandleTupleAssembly)chain.next()).getTuple();
    if (tuple.isReadyForActivation() && tuple.isActivationNull() && tuplesNotReadyForActivation.containsKey(tuple)) {
      tuple.setContext(new PropagationContextImpl(nextPropagationIdCounter(),PropagationContext.ASSERTION,tuple.getLeapsRule().getRule(),null));
      this.assertTuple(tuple);
    }
 else {
      if (tuple.getLeapsRule().getRule() instanceof Query) {
        removeFromQueryResults(tuple.getLeapsRule().getRule().getName(),tuple);
      }
 else {
        invalidateActivation(tuple);
      }
    }
  }
  this.removeTokenFromStack((LeapsFactHandle)factHandle);
}
