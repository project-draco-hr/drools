{
  this.getLock().lock();
  try {
    ArrayList ruleHandlesList;
    LeapsRule rule;
    RuleHandle ruleHandle;
    for (final Iterator it=rules.iterator(); it.hasNext(); ) {
      rule=(LeapsRule)it.next();
      if (rule.getNumberOfColumns() > 0) {
        ruleHandlesList=new ArrayList();
        for (int i=0; i < rule.getNumberOfColumns(); i++) {
          ruleHandle=new RuleHandle(((LeapsFactHandleFactory)this.handleFactory).getNextId(),rule,i);
          this.getFactTable(rule.getColumnClassObjectTypeAtPosition(i)).addRule(this,ruleHandle);
          ruleHandlesList.add(ruleHandle);
        }
        this.leapsRulesToHandlesMap.put(rule,ruleHandlesList);
      }
 else {
        final PropagationContextImpl context=new PropagationContextImpl(nextPropagationIdCounter(),PropagationContext.ASSERTION,null,null);
        TokenEvaluator.processAfterAllPositiveConstraintOk(new LeapsTuple(new FactHandleImpl[0],rule,context),rule,this);
      }
    }
  }
  finally {
    this.getLock().unlock();
  }
}
