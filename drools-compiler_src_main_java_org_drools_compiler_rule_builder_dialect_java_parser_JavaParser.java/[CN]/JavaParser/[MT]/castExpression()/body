{
  int castExpression_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,126)) {
      return;
    }
    int alt161=2;
    int LA161_0=input.LA(1);
    if ((LA161_0 == 31)) {
      int LA161_1=input.LA(2);
      if ((LA161_1 == 60 || LA161_1 == 62 || LA161_1 == 66 || LA161_1 == 72 || LA161_1 == 80 || LA161_1 == 87 || LA161_1 == 89 || LA161_1 == 100)) {
        int LA161_2=input.LA(3);
        if ((synpred244_Java())) {
          alt161=1;
        }
 else         if ((true)) {
          alt161=2;
        }
      }
 else       if (((LA161_1 >= CharacterLiteral && LA161_1 <= DecimalLiteral) || LA161_1 == FloatingPointLiteral || (LA161_1 >= HexLiteral && LA161_1 <= Identifier) || (LA161_1 >= OctalLiteral && LA161_1 <= StringLiteral) || LA161_1 == 24 || LA161_1 == 31 || (LA161_1 >= 35 && LA161_1 <= 36) || (LA161_1 >= 39 && LA161_1 <= 40) || LA161_1 == 48 || LA161_1 == 65 || (LA161_1 >= 74 && LA161_1 <= 75) || LA161_1 == 77 || (LA161_1 >= 92 && LA161_1 <= 93) || LA161_1 == 103 || LA161_1 == 106 || LA161_1 == 110 || LA161_1 == 113 || LA161_1 == 121)) {
        alt161=2;
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",161,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",161,0,input);
      throw nvae;
    }
switch (alt161) {
case 1:
{
        match(input,31,FOLLOW_31_in_castExpression5610);
        if (state.failed)         return;
        pushFollow(FOLLOW_primitiveType_in_castExpression5612);
        primitiveType();
        state._fsp--;
        if (state.failed)         return;
        match(input,32,FOLLOW_32_in_castExpression5614);
        if (state.failed)         return;
        pushFollow(FOLLOW_unaryExpression_in_castExpression5616);
        unaryExpression();
        state._fsp--;
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,31,FOLLOW_31_in_castExpression5625);
    if (state.failed)     return;
    int alt160=2;
switch (input.LA(1)) {
case Identifier:
{
        int LA160_1=input.LA(2);
        if ((synpred245_Java())) {
          alt160=1;
        }
 else         if ((true)) {
          alt160=2;
        }
      }
    break;
case 60:
case 62:
case 66:
case 72:
case 80:
case 87:
case 89:
case 100:
{
switch (input.LA(2)) {
case 54:
{
        int LA160_51=input.LA(3);
        if ((synpred245_Java())) {
          alt160=1;
        }
 else         if ((true)) {
          alt160=2;
        }
      }
    break;
case 32:
{
    alt160=1;
  }
break;
case 42:
{
alt160=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException("",160,2,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
break;
case CharacterLiteral:
case DecimalLiteral:
case FloatingPointLiteral:
case HexLiteral:
case OctalLiteral:
case StringLiteral:
case 24:
case 31:
case 35:
case 36:
case 39:
case 40:
case 48:
case 65:
case 74:
case 75:
case 77:
case 92:
case 93:
case 103:
case 106:
case 110:
case 113:
case 121:
{
alt160=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",160,0,input);
throw nvae;
}
switch (alt160) {
case 1:
{
pushFollow(FOLLOW_type_in_castExpression5628);
type();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
pushFollow(FOLLOW_expression_in_castExpression5632);
expression();
state._fsp--;
if (state.failed) return;
}
break;
}
match(input,32,FOLLOW_32_in_castExpression5635);
if (state.failed) return;
pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression5637);
unaryExpressionNotPlusMinus();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,126,castExpression_StartIndex);
}
}
}
