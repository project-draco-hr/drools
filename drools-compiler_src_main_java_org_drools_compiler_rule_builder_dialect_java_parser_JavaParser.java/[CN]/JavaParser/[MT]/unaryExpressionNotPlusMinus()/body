{
  int unaryExpressionNotPlusMinus_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,124)) {
      return;
    }
    int alt159=4;
switch (input.LA(1)) {
case 120:
{
        alt159=1;
      }
    break;
case 24:
{
    alt159=2;
  }
break;
case 31:
{
switch (input.LA(2)) {
case 60:
case 62:
case 66:
case 71:
case 79:
case 86:
case 88:
case 99:
{
    int LA159_20=input.LA(3);
    if ((synpred239_Java())) {
      alt159=3;
    }
 else     if ((true)) {
      alt159=4;
    }
  }
break;
case Identifier:
{
int LA159_21=input.LA(3);
if ((synpred239_Java())) {
  alt159=3;
}
 else if ((true)) {
  alt159=4;
}
}
break;
case 35:
{
int LA159_22=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 39:
{
int LA159_23=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 36:
{
int LA159_24=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 40:
{
int LA159_25=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 120:
{
int LA159_26=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 24:
{
int LA159_27=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 31:
{
int LA159_28=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 48:
{
int LA159_29=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 105:
{
int LA159_30=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 102:
{
int LA159_31=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 74:
{
int LA159_32=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 73:
{
int LA159_33=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 65:
{
int LA159_34=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case DecimalLiteral:
case HexLiteral:
case OctalLiteral:
{
int LA159_35=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case FloatingPointLiteral:
{
int LA159_36=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case CharacterLiteral:
{
int LA159_37=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case StringLiteral:
{
int LA159_38=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 76:
case 109:
{
int LA159_39=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 92:
{
int LA159_40=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 91:
{
int LA159_41=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
case 112:
{
int LA159_42=input.LA(3);
if ((synpred239_Java())) {
alt159=3;
}
 else if ((true)) {
alt159=4;
}
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException("",159,3,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
break;
case CharacterLiteral:
case DecimalLiteral:
case FloatingPointLiteral:
case HexLiteral:
case Identifier:
case OctalLiteral:
case StringLiteral:
case 48:
case 60:
case 62:
case 65:
case 66:
case 71:
case 73:
case 74:
case 76:
case 79:
case 86:
case 88:
case 91:
case 92:
case 99:
case 102:
case 105:
case 109:
case 112:
{
alt159=4;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",159,0,input);
throw nvae;
}
switch (alt159) {
case 1:
{
match(input,120,FOLLOW_120_in_unaryExpressionNotPlusMinus5498);
if (state.failed) return;
pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5500);
unaryExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
match(input,24,FOLLOW_24_in_unaryExpressionNotPlusMinus5509);
if (state.failed) return;
pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5511);
unaryExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 3:
{
pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5521);
castExpression();
state._fsp--;
if (state.failed) return;
}
break;
case 4:
{
pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus5531);
primary();
state._fsp--;
if (state.failed) return;
loop157: while (true) {
int alt157=2;
int LA157_0=input.LA(1);
if ((LA157_0 == 42 || LA157_0 == 54)) {
alt157=1;
}
switch (alt157) {
case 1:
{
pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus5533);
selector();
state._fsp--;
if (state.failed) return;
}
break;
default :
break loop157;
}
}
int alt158=2;
int LA158_0=input.LA(1);
if ((LA158_0 == 36 || LA158_0 == 40)) {
alt158=1;
}
switch (alt158) {
case 1:
{
if (input.LA(1) == 36 || input.LA(1) == 40) {
input.consume();
state.errorRecovery=false;
state.failed=false;
}
 else {
if (state.backtracking > 0) {
state.failed=true;
return;
}
MismatchedSetException mse=new MismatchedSetException(null,input);
throw mse;
}
}
break;
}
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,124,unaryExpressionNotPlusMinus_StartIndex);
}
}
}
