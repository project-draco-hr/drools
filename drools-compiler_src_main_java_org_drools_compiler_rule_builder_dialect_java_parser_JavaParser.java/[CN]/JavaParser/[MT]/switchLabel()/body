{
  int switchLabel_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,98)) {
      return;
    }
    int alt130=3;
    int LA130_0=input.LA(1);
    if ((LA130_0 == 63)) {
      int LA130_1=input.LA(2);
      if (((LA130_1 >= CharacterLiteral && LA130_1 <= DecimalLiteral) || LA130_1 == FloatingPointLiteral || LA130_1 == HexLiteral || (LA130_1 >= OctalLiteral && LA130_1 <= StringLiteral) || LA130_1 == 24 || LA130_1 == 31 || (LA130_1 >= 35 && LA130_1 <= 36) || (LA130_1 >= 39 && LA130_1 <= 40) || LA130_1 == 48 || LA130_1 == 60 || LA130_1 == 62 || (LA130_1 >= 65 && LA130_1 <= 66) || LA130_1 == 72 || (LA130_1 >= 74 && LA130_1 <= 75) || LA130_1 == 77 || LA130_1 == 80 || LA130_1 == 87 || LA130_1 == 89 || (LA130_1 >= 92 && LA130_1 <= 93) || LA130_1 == 100 || LA130_1 == 103 || LA130_1 == 106 || LA130_1 == 110 || LA130_1 == 113 || LA130_1 == 121)) {
        alt130=1;
      }
 else       if ((LA130_1 == Identifier)) {
        int LA130_23=input.LA(3);
        if ((synpred190_Java())) {
          alt130=1;
        }
 else         if ((synpred191_Java())) {
          alt130=2;
        }
 else {
          if (state.backtracking > 0) {
            state.failed=true;
            return;
          }
          int nvaeMark=input.mark();
          try {
            for (int nvaeConsume=0; nvaeConsume < 3 - 1; nvaeConsume++) {
              input.consume();
            }
            NoViableAltException nvae=new NoViableAltException("",130,23,input);
            throw nvae;
          }
  finally {
            input.rewind(nvaeMark);
          }
        }
      }
 else {
        if (state.backtracking > 0) {
          state.failed=true;
          return;
        }
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",130,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else     if ((LA130_0 == 69)) {
      alt130=3;
    }
 else {
      if (state.backtracking > 0) {
        state.failed=true;
        return;
      }
      NoViableAltException nvae=new NoViableAltException("",130,0,input);
      throw nvae;
    }
switch (alt130) {
case 1:
{
        match(input,63,FOLLOW_63_in_switchLabel4450);
        if (state.failed)         return;
        pushFollow(FOLLOW_constantExpression_in_switchLabel4452);
        constantExpression();
        state._fsp--;
        if (state.failed)         return;
        match(input,46,FOLLOW_46_in_switchLabel4454);
        if (state.failed)         return;
      }
    break;
case 2:
{
    match(input,63,FOLLOW_63_in_switchLabel4464);
    if (state.failed)     return;
    pushFollow(FOLLOW_enumConstantName_in_switchLabel4466);
    enumConstantName();
    state._fsp--;
    if (state.failed)     return;
    match(input,46,FOLLOW_46_in_switchLabel4468);
    if (state.failed)     return;
  }
break;
case 3:
{
match(input,69,FOLLOW_69_in_switchLabel4478);
if (state.failed) return;
match(input,46,FOLLOW_46_in_switchLabel4480);
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,98,switchLabel_StartIndex);
}
}
}
