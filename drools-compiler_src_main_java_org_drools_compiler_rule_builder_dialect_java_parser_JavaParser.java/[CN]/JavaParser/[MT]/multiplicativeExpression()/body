{
  int multiplicativeExpression_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,123)) {
      return;
    }
{
      pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5444);
      unaryExpression();
      state._fsp--;
      if (state.failed)       return;
      loop155:       while (true) {
        int alt155=2;
        int LA155_0=input.LA(1);
        if ((LA155_0 == 26 || LA155_0 == 33 || LA155_0 == 44)) {
          alt155=1;
        }
switch (alt155) {
case 1:
{
            if (input.LA(1) == 26 || input.LA(1) == 33 || input.LA(1) == 44) {
              input.consume();
              state.errorRecovery=false;
              state.failed=false;
            }
 else {
              if (state.backtracking > 0) {
                state.failed=true;
                return;
              }
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5462);
            unaryExpression();
            state._fsp--;
            if (state.failed)             return;
          }
        break;
default :
      break loop155;
  }
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,123,multiplicativeExpression_StartIndex);
}
}
}
