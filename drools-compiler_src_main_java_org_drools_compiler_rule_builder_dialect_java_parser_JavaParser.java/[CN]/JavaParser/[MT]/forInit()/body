{
  int forInit_StartIndex=input.index();
  ParserRuleReturnScope variableModifier11=null;
  ParserRuleReturnScope type12=null;
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,100)) {
      return;
    }
    int alt137=2;
switch (input.LA(1)) {
case 53:
case 77:
{
        alt137=1;
      }
    break;
case Identifier:
{
switch (input.LA(2)) {
case 48:
{
        int LA137_26=input.LA(3);
        if ((synpred197_Java())) {
          alt137=1;
        }
 else         if ((true)) {
          alt137=2;
        }
      }
    break;
case 42:
{
    int LA137_27=input.LA(3);
    if ((synpred197_Java())) {
      alt137=1;
    }
 else     if ((true)) {
      alt137=2;
    }
  }
break;
case 54:
{
int LA137_28=input.LA(3);
if ((synpred197_Java())) {
  alt137=1;
}
 else if ((true)) {
  alt137=2;
}
}
break;
case Identifier:
{
alt137=1;
}
break;
case EOF:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 44:
case 45:
case 47:
case 49:
case 50:
case 51:
case 52:
case 56:
case 57:
case 85:
case 116:
case 117:
case 118:
{
alt137=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException("",137,3,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
break;
case 60:
case 62:
case 66:
case 71:
case 79:
case 86:
case 88:
case 99:
{
switch (input.LA(2)) {
case 54:
{
int LA137_55=input.LA(3);
if ((synpred197_Java())) {
alt137=1;
}
 else if ((true)) {
alt137=2;
}
}
break;
case Identifier:
{
alt137=1;
}
break;
case 42:
{
alt137=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
int nvaeMark=input.mark();
try {
input.consume();
NoViableAltException nvae=new NoViableAltException("",137,4,input);
throw nvae;
}
  finally {
input.rewind(nvaeMark);
}
}
}
break;
case CharacterLiteral:
case DecimalLiteral:
case FloatingPointLiteral:
case HexLiteral:
case OctalLiteral:
case StringLiteral:
case 24:
case 31:
case 35:
case 36:
case 39:
case 40:
case 48:
case 65:
case 73:
case 74:
case 76:
case 91:
case 92:
case 102:
case 105:
case 109:
case 112:
case 120:
{
alt137=2;
}
break;
default :
if (state.backtracking > 0) {
state.failed=true;
return;
}
NoViableAltException nvae=new NoViableAltException("",137,0,input);
throw nvae;
}
switch (alt137) {
case 1:
{
loop136: while (true) {
int alt136=2;
int LA136_0=input.LA(1);
if ((LA136_0 == 53 || LA136_0 == 77)) {
alt136=1;
}
switch (alt136) {
case 1:
{
pushFollow(FOLLOW_variableModifier_in_forInit4545);
variableModifier11=variableModifier();
state._fsp--;
if (state.failed) return;
if (state.backtracking == 0) {
VarDecl_stack.peek().descr.updateStart(((CommonToken)(variableModifier11 != null ? (variableModifier11.start) : null)).getStartIndex() - 1);
VarDecl_stack.peek().descr.addModifier((variableModifier11 != null ? input.toString(variableModifier11.start,variableModifier11.stop) : null));
}
}
break;
default :
break loop136;
}
}
pushFollow(FOLLOW_type_in_forInit4580);
type12=type();
state._fsp--;
if (state.failed) return;
if (state.backtracking == 0) {
VarDecl_stack.peek().descr.updateStart(((CommonToken)(type12 != null ? (type12.start) : null)).getStartIndex() - 1);
VarDecl_stack.peek().descr.setType((type12 != null ? input.toString(type12.start,type12.stop) : null));
VarDecl_stack.peek().descr.setEnd(((CommonToken)(type12 != null ? (type12.stop) : null)).getStopIndex());
}
pushFollow(FOLLOW_variableDeclarators_in_forInit4600);
variableDeclarators();
state._fsp--;
if (state.failed) return;
}
break;
case 2:
{
pushFollow(FOLLOW_expressionList_in_forInit4608);
expressionList();
state._fsp--;
if (state.failed) return;
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,100,forInit_StartIndex);
}
}
}
