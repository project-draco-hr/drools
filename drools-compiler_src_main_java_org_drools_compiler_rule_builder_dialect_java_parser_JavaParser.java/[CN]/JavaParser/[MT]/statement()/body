{
  JavaParser.statement_return retval=new JavaParser.statement_return();
  retval.start=input.LT(1);
  int statement_StartIndex=input.index();
  try {
    if (state.backtracking > 0 && alreadyParsedRule(input,83)) {
      return retval;
    }
    int alt111=20;
    alt111=dfa111.predict(input);
switch (alt111) {
case 1:
{
        pushFollow(FOLLOW_block_in_statement2923);
        block();
        state._fsp--;
        if (state.failed)         return retval;
      }
    break;
case 2:
{
    match(input,59,FOLLOW_59_in_statement2931);
    if (state.failed)     return retval;
    pushFollow(FOLLOW_expression_in_statement2933);
    expression();
    state._fsp--;
    if (state.failed)     return retval;
    int alt107=2;
    int LA107_0=input.LA(1);
    if ((LA107_0 == 46)) {
      alt107=1;
    }
switch (alt107) {
case 1:
{
        match(input,46,FOLLOW_46_in_statement2936);
        if (state.failed)         return retval;
        pushFollow(FOLLOW_expression_in_statement2938);
        expression();
        state._fsp--;
        if (state.failed)         return retval;
      }
    break;
}
match(input,47,FOLLOW_47_in_statement2942);
if (state.failed) return retval;
}
break;
case 3:
{
pushFollow(FOLLOW_ifStatement_in_statement2950);
ifStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 4:
{
pushFollow(FOLLOW_forStatement_in_statement2958);
forStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 5:
{
pushFollow(FOLLOW_whileStatement_in_statement2967);
whileStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 6:
{
match(input,70,FOLLOW_70_in_statement2975);
if (state.failed) return retval;
pushFollow(FOLLOW_statement_in_statement2977);
statement();
state._fsp--;
if (state.failed) return retval;
match(input,114,FOLLOW_114_in_statement2979);
if (state.failed) return retval;
pushFollow(FOLLOW_parExpression_in_statement2981);
parExpression();
state._fsp--;
if (state.failed) return retval;
match(input,47,FOLLOW_47_in_statement2983);
if (state.failed) return retval;
}
break;
case 7:
{
pushFollow(FOLLOW_tryStatement_in_statement2996);
tryStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 8:
{
match(input,103,FOLLOW_103_in_statement3011);
if (state.failed) return retval;
pushFollow(FOLLOW_parExpression_in_statement3013);
parExpression();
state._fsp--;
if (state.failed) return retval;
match(input,115,FOLLOW_115_in_statement3015);
if (state.failed) return retval;
pushFollow(FOLLOW_switchBlockStatementGroups_in_statement3017);
switchBlockStatementGroups();
state._fsp--;
if (state.failed) return retval;
match(input,119,FOLLOW_119_in_statement3019);
if (state.failed) return retval;
}
break;
case 9:
{
match(input,104,FOLLOW_104_in_statement3027);
if (state.failed) return retval;
pushFollow(FOLLOW_parExpression_in_statement3029);
parExpression();
state._fsp--;
if (state.failed) return retval;
pushFollow(FOLLOW_block_in_statement3031);
block();
state._fsp--;
if (state.failed) return retval;
}
break;
case 10:
{
match(input,98,FOLLOW_98_in_statement3039);
if (state.failed) return retval;
int alt108=2;
int LA108_0=input.LA(1);
if (((LA108_0 >= CharacterLiteral && LA108_0 <= DecimalLiteral) || LA108_0 == FloatingPointLiteral || (LA108_0 >= HexLiteral && LA108_0 <= Identifier) || (LA108_0 >= OctalLiteral && LA108_0 <= StringLiteral) || LA108_0 == 24 || LA108_0 == 31 || (LA108_0 >= 35 && LA108_0 <= 36) || (LA108_0 >= 39 && LA108_0 <= 40) || LA108_0 == 48 || LA108_0 == 60 || LA108_0 == 62 || (LA108_0 >= 65 && LA108_0 <= 66) || LA108_0 == 71 || (LA108_0 >= 73 && LA108_0 <= 74) || LA108_0 == 76 || LA108_0 == 79 || LA108_0 == 86 || LA108_0 == 88 || (LA108_0 >= 91 && LA108_0 <= 92) || LA108_0 == 99 || LA108_0 == 102 || LA108_0 == 105 || LA108_0 == 109 || LA108_0 == 112 || LA108_0 == 120)) {
alt108=1;
}
switch (alt108) {
case 1:
{
pushFollow(FOLLOW_expression_in_statement3041);
expression();
state._fsp--;
if (state.failed) return retval;
}
break;
}
match(input,47,FOLLOW_47_in_statement3044);
if (state.failed) return retval;
}
break;
case 11:
{
pushFollow(FOLLOW_throwStatement_in_statement3053);
throwStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 12:
{
match(input,61,FOLLOW_61_in_statement3061);
if (state.failed) return retval;
int alt109=2;
int LA109_0=input.LA(1);
if ((LA109_0 == Identifier)) {
alt109=1;
}
switch (alt109) {
case 1:
{
match(input,Identifier,FOLLOW_Identifier_in_statement3063);
if (state.failed) return retval;
}
break;
}
match(input,47,FOLLOW_47_in_statement3066);
if (state.failed) return retval;
}
break;
case 13:
{
match(input,68,FOLLOW_68_in_statement3074);
if (state.failed) return retval;
int alt110=2;
int LA110_0=input.LA(1);
if ((LA110_0 == Identifier)) {
alt110=1;
}
switch (alt110) {
case 1:
{
match(input,Identifier,FOLLOW_Identifier_in_statement3076);
if (state.failed) return retval;
}
break;
}
match(input,47,FOLLOW_47_in_statement3079);
if (state.failed) return retval;
}
break;
case 14:
{
pushFollow(FOLLOW_modifyStatement_in_statement3092);
modifyStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 15:
{
pushFollow(FOLLOW_updateStatement_in_statement3096);
updateStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 16:
{
pushFollow(FOLLOW_retractStatement_in_statement3100);
retractStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 17:
{
pushFollow(FOLLOW_insertStatement_in_statement3104);
insertStatement();
state._fsp--;
if (state.failed) return retval;
}
break;
case 18:
{
match(input,47,FOLLOW_47_in_statement3112);
if (state.failed) return retval;
}
break;
case 19:
{
pushFollow(FOLLOW_statementExpression_in_statement3120);
statementExpression();
state._fsp--;
if (state.failed) return retval;
match(input,47,FOLLOW_47_in_statement3122);
if (state.failed) return retval;
}
break;
case 20:
{
match(input,Identifier,FOLLOW_Identifier_in_statement3130);
if (state.failed) return retval;
match(input,46,FOLLOW_46_in_statement3132);
if (state.failed) return retval;
pushFollow(FOLLOW_statement_in_statement3134);
statement();
state._fsp--;
if (state.failed) return retval;
}
break;
}
retval.stop=input.LT(-1);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
if (state.backtracking > 0) {
memoize(input,83,statement_StartIndex);
}
}
return retval;
}
