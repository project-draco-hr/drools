{
  String str="";
  str+="package org.simple \n";
  str+="global java.util.List list \n";
  str+="rule xxx \n";
  str+="  timer (int:30s 10s) ";
  str+="when \n";
  str+="then \n";
  str+="  list.add(\"fired\"); \n";
  str+="end  \n";
  KieSessionConfiguration conf=KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
  conf.setOption(ClockTypeOption.get("pseudo"));
  KnowledgeBase kbase=loadKnowledgeBaseFromString(str);
  KieSession ksession=createKnowledgeSession(kbase,conf);
  final CyclicBarrier barrier=new CyclicBarrier(2);
  AgendaEventListener agendaEventListener=new AgendaEventListener(){
    public void matchCreated(    org.kie.api.event.rule.MatchCreatedEvent event){
    }
    public void matchCancelled(    org.kie.api.event.rule.MatchCancelledEvent event){
    }
    public void beforeMatchFired(    org.kie.api.event.rule.BeforeMatchFiredEvent event){
    }
    public void afterMatchFired(    org.kie.api.event.rule.AfterMatchFiredEvent event){
      try {
        barrier.await();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    public void agendaGroupPopped(    org.kie.api.event.rule.AgendaGroupPoppedEvent event){
    }
    public void agendaGroupPushed(    org.kie.api.event.rule.AgendaGroupPushedEvent event){
    }
    public void beforeRuleFlowGroupActivated(    org.kie.api.event.rule.RuleFlowGroupActivatedEvent event){
    }
    public void afterRuleFlowGroupActivated(    org.kie.api.event.rule.RuleFlowGroupActivatedEvent event){
    }
    public void beforeRuleFlowGroupDeactivated(    org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent event){
    }
    public void afterRuleFlowGroupDeactivated(    org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent event){
    }
  }
;
  ksession.addEventListener(agendaEventListener);
  final BlockingQueue<TimedRuleExecution> queue=new LinkedBlockingQueue<TimedRuleExecution>();
  ksession.setTimedRuleExecutionFilter(new TimedRuleExecutionFilter(){
    @Override public boolean accept(    Rule[] rule){
      assertEquals("xxx",rule[0].getName());
      return true;
    }
  }
);
  List list=new ArrayList();
  PseudoClockScheduler timeService=(PseudoClockScheduler)ksession.<SessionClock>getSessionClock();
  timeService.advanceTime(new Date().getTime(),TimeUnit.MILLISECONDS);
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  assertEquals(0,list.size());
  timeService.advanceTime(35,TimeUnit.SECONDS);
  barrier.await();
  barrier.reset();
  assertEquals(1,list.size());
  timeService.advanceTime(10,TimeUnit.SECONDS);
  barrier.await();
  barrier.reset();
  assertEquals(2,list.size());
  timeService.advanceTime(10,TimeUnit.SECONDS);
  barrier.await();
  barrier.reset();
  assertEquals(3,list.size());
}
