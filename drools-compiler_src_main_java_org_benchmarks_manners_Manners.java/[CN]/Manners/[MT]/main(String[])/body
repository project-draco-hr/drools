{
  try {
    Benchmark benchmark=new JessManners();
    Runtime rt=Runtime.getRuntime();
    long used1=rt.totalMemory() - rt.freeMemory();
    long time1=System.currentTimeMillis();
    benchmark.init();
    long used2=rt.totalMemory() - rt.freeMemory();
    long time2=System.currentTimeMillis();
    benchmark.assertObjects();
    long time3=System.currentTimeMillis();
    long used3=rt.totalMemory() - rt.freeMemory();
    benchmark.fireAllRules();
    long time4=System.currentTimeMillis();
    long used4=rt.totalMemory() - rt.freeMemory();
    rt.gc();
    long time5=System.currentTimeMillis();
    long used5=rt.totalMemory() - rt.freeMemory();
    System.out.println("\n\n RESULTS:\n");
    System.out.println("    - Rules parsing time : " + new Long(time2 - time1) + " ms   - Memory used:  + "+ new Long((used2 - used1) / 1024)+ " Kb\n");
    System.out.println("    - Assertion time     : " + new Long(time3 - time2) + " ms   - Memory used:  + "+ new Long((used3 - used2) / 1024)+ " Kb\n");
    System.out.println("    - Rules firing time  : " + new Long(time4 - time3) + " ms   - Memory used:  + "+ new Long((used4 - used3) / 1024)+ " Kb\n");
    System.out.println("----------------------------------------------------------------\n");
    System.out.println("    - Total time         : " + new Long(time4 - time1) + " ms   - Total memory: + "+ new Long((used4 - used1) / 1024)+ " Kb\n");
    System.out.println("    - GC Run time        : " + new Long(time5 - time4) + " ms   - Mem after GC: + "+ new Long((used5 - used1) / 1024)+ " Kb\n\n");
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
