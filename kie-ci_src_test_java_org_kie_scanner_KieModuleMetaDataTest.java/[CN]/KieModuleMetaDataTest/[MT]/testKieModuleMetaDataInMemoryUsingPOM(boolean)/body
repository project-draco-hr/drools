{
  KieServices ks=KieServices.Factory.get();
  ReleaseId dependency=ks.newReleaseId("org.drools","drools-core","5.5.0.Final");
  ReleaseId releaseId=ks.newReleaseId("org.kie","metadata-test","1.0-SNAPSHOT");
  InternalKieModule kieModule=createKieJarWithClass(ks,releaseId,useTypeDeclaration,2,7,dependency);
  String pomText=getPom(dependency);
  File pomFile=new File(System.getProperty("java.io.tmpdir"),MavenRepository.toFileName(releaseId,null) + ".pom");
  try {
    FileOutputStream fos=new FileOutputStream(pomFile);
    fos.write(pomText.getBytes());
    fos.flush();
    fos.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  MavenRepository.getMavenRepository().installArtifact(releaseId,kieModule,pomFile);
  ReleaseId releaseId2=ks.newReleaseId("org.kie","metadata-test-using-pom","1.0-SNAPSHOT");
  String pomText2=getPom(releaseId2,releaseId);
  File pomFile2=new File(System.getProperty("java.io.tmpdir"),MavenRepository.toFileName(releaseId2,null) + ".pom");
  try {
    FileOutputStream fos=new FileOutputStream(pomFile2);
    fos.write(pomText2.getBytes());
    fos.flush();
    fos.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  KieModuleMetaData kieModuleMetaData=KieModuleMetaData.Factory.newKieModuleMetaData(pomFile2);
  Collection<String> testClasses=kieModuleMetaData.getClasses("org.kie.test");
  assertEquals(1,testClasses.size());
  assertEquals("Bean",testClasses.iterator().next());
  Class<?> beanClass=kieModuleMetaData.getClass("org.kie.test","Bean");
  assertNotNull(beanClass.getMethod("getValue"));
  if (useTypeDeclaration) {
    assertTrue(kieModuleMetaData.getTypeMetaInfo(beanClass).isEvent());
  }
}
