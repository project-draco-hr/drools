{
  for (  TypeDeclarationDescr typeDeclaration : typeDeclarationDescrs) {
    Import objectImport=data.getImportByName(typeDeclaration.getTypeName());
    String objectTypeName;
    if (objectImport == null) {
      objectTypeName=typeDeclaration.getTypeName();
    }
 else {
      objectTypeName=objectImport.getName();
    }
    ObjectType objectType=this.data.getObjectTypeByFullName(objectTypeName);
    if (objectType == null) {
      objectType=new ObjectType();
      objectType.setName(typeDeclaration.getTypeName());
      objectType.setFullName(typeDeclaration.getTypeName());
      data.add(objectType);
    }
    for (    String fieldName : typeDeclaration.getFields().keySet()) {
      Field field=data.getFieldByObjectTypeAndFieldName(objectType.getFullName(),fieldName);
      if (field == null) {
        field=ObjectTypeFactory.createField(fieldName,objectType);
        field.setFieldType(typeDeclaration.getFields().get(fieldName).getPattern().getObjectType());
        data.add(field);
      }
    }
    for (    String metadata : typeDeclaration.getAnnotations().keySet()) {
      Map<String,String> values=typeDeclaration.getAnnotation(metadata).getValues();
      for (      String value : values.keySet()) {
        objectType.getMetadata().put(metadata,value);
      }
    }
  }
}
