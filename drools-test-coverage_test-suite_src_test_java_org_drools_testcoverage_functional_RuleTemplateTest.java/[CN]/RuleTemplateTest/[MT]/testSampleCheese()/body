{
  final ExternalSpreadsheetCompiler converter=new ExternalSpreadsheetCompiler();
  final KieServices kieServices=KieServices.Factory.get();
  final Resource table=kieServices.getResources().newClassPathResource("sample_cheese.xls",getClass());
  final Resource template=kieServices.getResources().newClassPathResource("sample_cheese.drt",getClass());
  String drl=null;
  try {
    drl=converter.compile(table.getInputStream(),template.getInputStream(),2,2);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Could not read spreadsheet or rules stream.",e);
  }
  final Resource drlResource=kieServices.getResources().newReaderResource(new StringReader(drl));
  drlResource.setTargetPath(TestConstants.DRL_TEST_TARGET_PATH);
  final KieBase kbase=KieBaseUtil.getKieBaseFromResources(true,drlResource);
  final Collection<KiePackage> pkgs=kbase.getKiePackages();
  Assertions.assertThat(pkgs.size()).isEqualTo(2);
  final ArrayList<String> names=new ArrayList<String>();
  for (  KiePackage kp : pkgs) {
    names.add(kp.getName());
  }
  Assertions.assertThat(names.contains(TestConstants.PACKAGE_FUNCTIONAL)).isTrue();
  Assertions.assertThat(names.contains(TestConstants.PACKAGE_TESTCOVERAGE_MODEL)).isTrue();
  final KiePackage kiePackage=(KiePackage)pkgs.toArray()[names.indexOf(TestConstants.PACKAGE_FUNCTIONAL)];
  Assertions.assertThat(kiePackage.getRules().size()).isEqualTo(2);
  final KieSession ksession=kbase.newKieSession();
  ksession.insert(new Cheese("stilton",42));
  ksession.insert(new Person("michael","stilton",42));
  final List<String> list=new ArrayList<String>();
  ksession.setGlobal("list",list);
  ksession.fireAllRules();
  LOGGER.debug(list.toString());
  ksession.dispose();
}
