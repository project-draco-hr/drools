{
  final File dir=RuleBaseAssemblerTest.getTempDirectory();
  Random rnd=new Random(System.currentTimeMillis());
  final Package p1=new Package("p1");
  final File p1f=new File(dir,rnd.nextLong() + ".pkg");
  RuleBaseAssemblerTest.writePackage(p1,p1f);
  String path=p1f.getPath();
  Properties props=new Properties();
  props.setProperty("file",path);
  RuleAgent ag=RuleAgent.newRuleAgent(props);
  RuleBase rb=ag.getRuleBase();
  assertEquals(1,rb.getPackages().length);
  assertEquals(0,rb.getPackages()[0].getGlobals().size());
  p1.addGlobal("goo",String.class);
  Thread.sleep(1000);
  RuleBaseAssemblerTest.writePackage(p1,p1f);
  RuleBase rb_=ag.getRuleBase();
  assertSame(rb,rb_);
  assertEquals(1,rb.getPackages().length);
  assertEquals(0,rb.getPackages()[0].getGlobals().size());
  Thread.sleep(1000);
  ag.refreshRuleBase();
  RuleBase rb2=ag.getRuleBase();
  assertSame(rb,rb2);
  assertEquals(1,rb2.getPackages().length);
  assertEquals(1,rb2.getPackages()[0].getGlobals().size());
  p1.addGlobal("goo2",String.class);
  System.err.println("-->WRITING CHANGE");
  Thread.sleep(1000);
  RuleBaseAssemblerTest.writePackage(p1,p1f);
  System.err.println("-->WROTE CHANGE");
  Thread.sleep(1000);
  ag.refreshRuleBase();
  RuleBase rb2_=ag.getRuleBase();
  assertSame(rb2_,rb2);
  assertEquals(1,rb2_.getPackages().length);
  assertEquals(2,rb2_.getPackages()[0].getGlobals().size());
  ag.refreshRuleBase();
  RuleBase rb3=ag.getRuleBase();
  assertSame(rb3,rb2);
  assertEquals(1,rb3.getPackages().length);
  assertEquals(2,rb3.getPackages()[0].getGlobals().size());
  ag.refreshRuleBase();
  ag.refreshRuleBase();
  assertEquals(1,rb3.getPackages().length);
  assertEquals(2,rb3.getPackages()[0].getGlobals().size());
}
