{
  File dir=RuleBaseAssemblerTest.getTempDirectory();
  Package p1=new Package("p1");
  File p1f=new File(dir,"p42_.pkg");
  RuleBaseAssemblerTest.writePackage(p1,p1f);
  String path=dir.getPath() + "/" + "p42_.pkg";
  Properties props=new Properties();
  props.setProperty("file",path);
  props.setProperty("poll","1");
  RuleAgent ag=new RuleAgent(props);
  assertTrue(ag.isPolling());
  RuleBase rb=ag.getRuleBase();
  assertEquals(1,rb.getPackages().length);
  assertEquals(0,rb.getPackages()[0].getGlobals().size());
  p1.addGlobal("goo",String.class);
  RuleBaseAssemblerTest.writePackage(p1,p1f);
  RuleBase rb_=ag.getRuleBase();
  assertSame(rb,rb_);
  assertEquals(1,rb.getPackages().length);
  assertEquals(0,rb.getPackages()[0].getGlobals().size());
  Thread.sleep(2000);
  RuleBase rb2=ag.getRuleBase();
  assertSame(rb,rb2);
  assertEquals(1,rb2.getPackages().length);
  assertEquals(1,rb2.getPackages()[0].getGlobals().size());
  p1.addGlobal("goo2",String.class);
  System.err.println("-->WRITING CHANGE");
  RuleBaseAssemblerTest.writePackage(p1,p1f);
  System.err.println("-->WROTE CHANGE");
  RuleBase rb2_=ag.getRuleBase();
  assertSame(rb2_,rb2);
  assertEquals(1,rb2_.getPackages().length);
  assertEquals(1,rb2_.getPackages()[0].getGlobals().size());
  Thread.sleep(2000);
  RuleBase rb3=ag.getRuleBase();
  assertSame(rb3,rb2);
  assertEquals(1,rb3.getPackages().length);
  assertEquals(2,rb3.getPackages()[0].getGlobals().size());
  ag.stopPolling();
}
