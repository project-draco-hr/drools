{
  final ClassWriter cw=new ClassWriter(true);
  buildClassHeader(clazz,className,cw);
  buildField(DELEGATE_FIELD_NAME,Type.getDescriptor(clazz),cw);
  Map fieldTypes=new HashMap();
  Method[] methods=clazz.getMethods();
  for (int i=0; i < methods.length; i++) {
    if ((!Modifier.isFinal(methods[i].getModifiers())) && Modifier.isPublic(methods[i].getModifiers())) {
      if ((!methods[i].getReturnType().equals(Void.TYPE)) && (methods[i].getParameterTypes().length == 0)) {
        String fieldName=methods[i].getName();
        buildField(FIELD_NAME_PREFIX + fieldName,Type.getDescriptor(methods[i].getReturnType()),cw);
        fieldTypes.put(FIELD_NAME_PREFIX + fieldName,methods[i].getReturnType());
        buildField(FIELD_NAME_PREFIX + fieldName + FIELD_SET_FLAG,Type.BOOLEAN_TYPE.getDescriptor(),cw);
        buildGetMethod(FIELD_NAME_PREFIX + fieldName,methods[i].getReturnType(),FIELD_NAME_PREFIX + fieldName + FIELD_SET_FLAG,methods[i],className,clazz,cw);
      }
 else {
        buildDelegateMethod(methods[i],clazz,className,cw);
      }
    }
  }
  buildConstructor(clazz,className,cw);
  buildUpdateProxyMethod(fieldTypes,className,cw);
  return cw.toByteArray();
}
