{
  final ClassWriter cw=new ClassWriter(true);
  buildClassHeader(clazz,className,cw);
  buildField(ShadowProxyFactory.DELEGATE_FIELD_NAME,Type.getDescriptor(clazz),cw);
  final Map fieldTypes=new HashMap();
  final Map fieldMethods=new HashMap();
  final Method[] methods=clazz.getMethods();
  for (int i=0; i < methods.length; i++) {
    if ((!Modifier.isFinal(methods[i].getModifiers())) && Modifier.isPublic(methods[i].getModifiers())) {
      if ((!methods[i].getReturnType().equals(Void.TYPE)) && (methods[i].getParameterTypes().length == 0) && ((methods[i].getName().startsWith("get")) || (methods[i].getName().startsWith("is")))) {
        final String fieldName=methods[i].getName();
        buildField(fieldName,Type.getDescriptor(methods[i].getReturnType()),cw);
        fieldMethods.put(fieldName,methods[i]);
        fieldTypes.put(fieldName,methods[i].getReturnType());
        buildSimpleGetMethod(fieldName,methods[i].getReturnType(),methods[i],className,clazz,cw);
      }
 else {
        buildDelegateMethod(methods[i],clazz,className,cw);
      }
    }
  }
  buildEagerConstructor(clazz,className,cw);
  buildEagerUpdateProxyMethod(clazz,fieldTypes,fieldMethods,className,cw);
  return cw.toByteArray();
}
