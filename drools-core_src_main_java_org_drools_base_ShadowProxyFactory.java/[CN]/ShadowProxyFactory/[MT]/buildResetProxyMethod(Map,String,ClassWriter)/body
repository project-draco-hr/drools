{
  MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"resetProxy",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{}),null,null);
  mv.visitCode();
  Label l0=new Label();
  mv.visitLabel(l0);
  for (Iterator it=fieldTypes.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry entry=(Map.Entry)it.next();
    String fieldName=FIELD_NAME_PREFIX + entry.getKey();
    String fieldFlag=fieldName + FIELD_SET_FLAG;
    Class fieldType=(Class)entry.getValue();
    Label l1=new Label();
    mv.visitLabel(l1);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    if (fieldType.isPrimitive()) {
      if (fieldType.equals(Long.TYPE)) {
        mv.visitInsn(Opcodes.LCONST_0);
      }
 else       if (fieldType.equals(Double.TYPE)) {
        mv.visitInsn(Opcodes.DCONST_0);
      }
 else       if (fieldType.equals(Float.TYPE)) {
        mv.visitInsn(Opcodes.FCONST_0);
      }
 else {
        mv.visitInsn(Opcodes.ICONST_0);
      }
    }
 else {
      mv.visitInsn(Opcodes.ACONST_NULL);
    }
    mv.visitFieldInsn(Opcodes.PUTFIELD,className,fieldName,Type.getDescriptor(fieldType));
    Label l2=new Label();
    mv.visitLabel(l2);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitInsn(Opcodes.ICONST_0);
    mv.visitFieldInsn(Opcodes.PUTFIELD,className,fieldFlag,Type.BOOLEAN_TYPE.getDescriptor());
  }
  Label l4=new Label();
  mv.visitLabel(l4);
  mv.visitInsn(Opcodes.RETURN);
  Label l5=new Label();
  mv.visitLabel(l5);
  mv.visitLocalVariable("this","L" + className + ";",null,l0,l5,0);
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
