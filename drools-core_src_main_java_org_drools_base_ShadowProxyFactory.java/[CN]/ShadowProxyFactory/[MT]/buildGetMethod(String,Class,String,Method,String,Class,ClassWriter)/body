{
  final Class[] exceptionTypes=method.getExceptionTypes();
  final String[] exceptions=getExceptionArrayAsString(exceptionTypes);
  final MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC,method.getName(),Type.getMethodDescriptor(method),null,exceptions);
  mv.visitCode();
  final Label l0=new Label();
  mv.visitLabel(l0);
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitFieldInsn(Opcodes.GETFIELD,className,fieldFlag,Type.BOOLEAN_TYPE.getDescriptor());
  final Label l1=new Label();
  mv.visitJumpInsn(Opcodes.IFNE,l1);
  final Label l3=new Label();
  mv.visitLabel(l3);
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitInsn(Opcodes.ICONST_1);
  mv.visitFieldInsn(Opcodes.PUTFIELD,className,fieldFlag,Type.BOOLEAN_TYPE.getDescriptor());
  if (Map.class.isAssignableFrom(fieldType) || Collection.class.isAssignableFrom(fieldType) || fieldType.isArray()) {
    Label l01=new Label();
    mv.visitLabel(l01);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitFieldInsn(Opcodes.GETFIELD,className,DELEGATE_FIELD_NAME,Type.getDescriptor(clazz));
    if (clazz.isInterface()) {
      mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,Type.getInternalName(clazz),method.getName(),Type.getMethodDescriptor(method));
    }
 else {
      mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(clazz),method.getName(),Type.getMethodDescriptor(method));
    }
    mv.visitVarInsn(Opcodes.ASTORE,1);
    Label l11=new Label();
    mv.visitLabel(l11);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(ShadowProxyUtils.class),"cloneObject","(Ljava/lang/Object;)Ljava/lang/Object;");
    mv.visitTypeInsn(Opcodes.CHECKCAST,Type.getInternalName(fieldType));
    mv.visitFieldInsn(Opcodes.PUTFIELD,className,fieldName,Type.getDescriptor(fieldType));
  }
 else {
    final Label l2=new Label();
    mv.visitLabel(l2);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitFieldInsn(Opcodes.GETFIELD,className,ShadowProxyFactory.DELEGATE_FIELD_NAME,Type.getDescriptor(clazz));
    if (clazz.isInterface()) {
      mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,Type.getInternalName(clazz),method.getName(),Type.getMethodDescriptor(method));
    }
 else {
      mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(clazz),method.getName(),Type.getMethodDescriptor(method));
    }
    mv.visitFieldInsn(Opcodes.PUTFIELD,className,fieldName,Type.getDescriptor(fieldType));
  }
  mv.visitLabel(l1);
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitFieldInsn(Opcodes.GETFIELD,className,fieldName,Type.getDescriptor(fieldType));
  mv.visitInsn(Type.getType(fieldType).getOpcode(Opcodes.IRETURN));
  final Label l4=new Label();
  mv.visitLabel(l4);
  mv.visitLocalVariable("this","L" + className + ";",null,l0,l4,0);
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
