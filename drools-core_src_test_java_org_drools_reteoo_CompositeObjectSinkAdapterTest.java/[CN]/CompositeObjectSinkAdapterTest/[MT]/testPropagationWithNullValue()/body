{
  final CompositeRightTupleSinkAdapter ad=new CompositeRightTupleSinkAdapter();
  FieldExtractor extractor=ClassFieldExtractorCache.getInstance().getExtractor(Cheese.class,"type",this.getClass().getClassLoader());
  final LiteralConstraint lit1=new LiteralConstraint(extractor,equals.getEvaluator(ValueType.STRING_TYPE,Operator.EQUAL),new ObjectFieldImpl("stilton"));
  final AlphaNode al1=new AlphaNode(buildContext.getNextId(),lit1,new MockObjectSource(buildContext.getNextId()),buildContext);
  final LiteralConstraint lit2=new LiteralConstraint(extractor,equals.getEvaluator(ValueType.STRING_TYPE,Operator.EQUAL),new ObjectFieldImpl("brie"));
  final AlphaNode al2=new AlphaNode(buildContext.getNextId(),lit2,new MockObjectSource(buildContext.getNextId()),buildContext);
  final LiteralConstraint lit3=new LiteralConstraint(extractor,equals.getEvaluator(ValueType.STRING_TYPE,Operator.EQUAL),new ObjectFieldImpl("muzzarela"));
  final AlphaNode al3=new AlphaNode(buildContext.getNextId(),lit3,new MockObjectSource(buildContext.getNextId()),buildContext);
  ad.addObjectSink(al1);
  ad.addObjectSink(al2);
  ad.addObjectSink(al3);
  InternalFactHandle handle=new ReteooFactHandleFactory().newFactHandle(new Cheese(),false,null);
  try {
    ad.propagateAssertFact(handle,null,null);
  }
 catch (  RuntimeException e) {
    fail("Not supposed to throw any exception: " + e.getMessage());
  }
}
