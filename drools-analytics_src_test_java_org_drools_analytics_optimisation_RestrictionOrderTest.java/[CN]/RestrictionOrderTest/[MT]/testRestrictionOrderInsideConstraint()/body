{
  StatelessSession session=getStatelessSession(this.getClass().getResourceAsStream("RestrictionOrder.drl"));
  session.setAgendaFilter(new RuleNameMatchesAgendaFilter("Optimise restrictions inside constraint"));
  Collection<Object> testData=new ArrayList<Object>();
  Pattern pattern1=new Pattern();
  testData.add(pattern1);
  OperatorDescr parent1=new OperatorDescr(OperatorDescr.Type.AND);
  LiteralRestriction r1=new LiteralRestriction();
  r1.setPatternId(pattern1.getId());
  r1.setParent(parent1);
  r1.setOperator(Operator.GREATER);
  r1.setOrderNumber(1);
  testData.add(r1);
  LiteralRestriction r2=new LiteralRestriction();
  r2.setPatternId(pattern1.getId());
  r2.setParent(parent1);
  r2.setOperator(Operator.EQUAL);
  r2.setOrderNumber(2);
  testData.add(r2);
  LiteralRestriction r3=new LiteralRestriction();
  r3.setPatternId(pattern1.getId());
  r3.setParent(parent1);
  r3.setOperator(Operator.LESS);
  r3.setOrderNumber(3);
  testData.add(r3);
  Pattern pattern2=new Pattern();
  testData.add(pattern2);
  OperatorDescr parent2=new OperatorDescr(OperatorDescr.Type.OR);
  LiteralRestriction r4=new LiteralRestriction();
  r4.setPatternId(pattern2.getId());
  r4.setParent(parent2);
  r4.setOperator(Operator.NOT_EQUAL);
  r4.setOrderNumber(1);
  testData.add(r4);
  LiteralRestriction r5=new LiteralRestriction();
  r5.setPatternId(pattern2.getId());
  r5.setParent(parent2);
  r5.setOperator(Operator.LESS_OR_EQUAL);
  r5.setOrderNumber(2);
  testData.add(r5);
  LiteralRestriction r6=new LiteralRestriction();
  r6.setPatternId(pattern2.getId());
  r6.setParent(parent2);
  r6.setOperator(Operator.NOT_EQUAL);
  r6.setOrderNumber(3);
  testData.add(r6);
  AnalyticsResult result=AnalyticsResultFactory.createAnalyticsResult();
  session.setGlobal("result",result);
  session.executeWithResults(testData);
  Iterator<AnalyticsMessageBase> iter=result.getBySeverity(Severity.NOTE).iterator();
  Map<Cause,Cause> pairs=new HashMap<Cause,Cause>();
  while (iter.hasNext()) {
    Object o=(Object)iter.next();
    if (o instanceof AnalyticsMessage) {
      Cause left=((AnalyticsMessage)o).getCauses().toArray(new Cause[2])[0];
      Cause right=((AnalyticsMessage)o).getCauses().toArray(new Cause[2])[1];
      pairs.put(left,right);
    }
  }
  assertTrue((pairs.containsKey(r1) && pairs.get(r1).equals(r2)) || pairs.containsKey(r2) && pairs.get(r2).equals(r1));
  assertTrue((pairs.containsKey(r4) && pairs.get(r4).equals(r5)) || pairs.containsKey(r5) && pairs.get(r5).equals(r4));
  assertEquals(2,pairs.size());
}
