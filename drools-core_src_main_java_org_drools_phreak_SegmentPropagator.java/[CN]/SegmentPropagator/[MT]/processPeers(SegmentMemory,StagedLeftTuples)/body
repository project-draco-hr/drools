{
  SegmentMemory firstSmem=sourceSegment.getFirst();
  if (leftTuples.getDeleteFirst() != null) {
    for (LeftTuple leftTuple=leftTuples.getDeleteFirst(); leftTuple != null; leftTuple=leftTuple.getStagedNext()) {
      SegmentMemory smem=firstSmem.getNext();
      if (smem != null) {
        for (LeftTuple peer=leftTuple.getPeer(); peer != null; peer=peer.getPeer()) {
          StagedLeftTuples stagedLeftTuples=smem.getStagedLeftTuples();
switch (peer.getStagedType()) {
case LeftTuple.INSERT:
            stagedLeftTuples.removeInsert(peer);
          break;
case LeftTuple.UPDATE:
        stagedLeftTuples.removeUpdate(peer);
      break;
  }
  stagedLeftTuples.addDelete(peer);
  smem=smem.getNext();
}
}
}
firstSmem.getStagedLeftTuples().addAllDeletes(leftTuples.getDeleteFirst());
}
if (leftTuples.getUpdateFirst() != null) {
firstSmem=sourceSegment.getFirst();
for (LeftTuple leftTuple=leftTuples.getUpdateFirst(); leftTuple != null; leftTuple=leftTuple.getStagedNext()) {
SegmentMemory smem=firstSmem.getNext();
if (smem != null) {
for (LeftTuple peer=leftTuple.getPeer(); peer != null; peer=peer.getPeer()) {
  StagedLeftTuples stagedLeftTuples=smem.getStagedLeftTuples();
switch (peer.getStagedType()) {
case LeftTuple.INSERT:
    stagedLeftTuples.removeInsert(peer);
  break;
}
stagedLeftTuples.addUpdate(peer);
smem=smem.getNext();
}
}
}
firstSmem.getStagedLeftTuples().addAllUpdates(leftTuples.getUpdateFirst());
}
if (leftTuples.getInsertFirst() != null) {
firstSmem=sourceSegment.getFirst();
for (LeftTuple leftTuple=leftTuples.getInsertFirst(); leftTuple != null; leftTuple=leftTuple.getStagedNext()) {
SegmentMemory smem=firstSmem.getNext();
if (smem != null) {
LeftTuple peer=leftTuple;
for (; smem != null; smem=smem.getNext()) {
peer=smem.getRootNode().createPeer(peer);
smem.getStagedLeftTuples().addInsert(peer);
}
}
}
firstSmem.getStagedLeftTuples().addAllInserts(leftTuples.getInsertFirst());
}
}
