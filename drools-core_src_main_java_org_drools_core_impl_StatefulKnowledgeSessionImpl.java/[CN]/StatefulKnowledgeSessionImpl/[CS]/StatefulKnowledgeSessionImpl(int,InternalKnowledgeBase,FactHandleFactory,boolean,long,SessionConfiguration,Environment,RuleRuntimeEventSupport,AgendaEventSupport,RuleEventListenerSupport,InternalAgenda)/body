{
  this.id=id;
  this.config=config;
  this.kBase=kBase;
  this.handleFactory=handleFactory;
  this.pctxFactory=kBase.getConfiguration().getComponentFactory().getPropagationContextFactory();
  this.environment=environment;
  nodeMemories=new ConcurrentNodeMemories(this.kBase);
  actionQueue=new ConcurrentLinkedQueue<WorkingMemoryAction>();
  Globals globals=(Globals)this.environment.get(EnvironmentName.GLOBALS);
  if (globals != null) {
    if (!(globals instanceof GlobalResolver)) {
      this.globalResolver=new GlobalsAdapter(globals);
    }
 else {
      this.globalResolver=(GlobalResolver)globals;
    }
  }
 else {
    this.globalResolver=new MapGlobalResolver();
  }
  this.calendars=new CalendarsImpl();
  this.dateFormats=(DateFormats)this.environment.get(EnvironmentName.DATE_FORMATS);
  if (this.dateFormats == null) {
    this.dateFormats=new DateFormatsImpl();
    this.environment.set(EnvironmentName.DATE_FORMATS,this.dateFormats);
  }
  final RuleBaseConfiguration conf=kBase.getConfiguration();
  this.sequential=conf.isSequential();
  this.evaluatingActionQueue=new AtomicBoolean(false);
  this.ruleRuntimeEventSupport=workingMemoryEventSupport;
  this.agendaEventSupport=agendaEventSupport;
  this.ruleEventListenerSupport=ruleEventListenerSupport;
  this.kieBaseEventListeners=new LinkedList();
  this.lock=new ReentrantLock();
  timerService=TimerServiceFactory.getTimerService(this.config);
  ((AcceptsTimerJobFactoryManager)timerService).setTimerJobFactoryManager(config.getTimerJobFactoryManager());
  this.propagationIdCounter=new AtomicLong(propagationContext);
  this.firing=new AtomicBoolean(false);
  initTransient();
  this.opCounter=new AtomicLong(0);
  this.lastIdleTimestamp=new AtomicLong(-1);
  if (agenda == null) {
    this.agenda=kBase.getConfiguration().getComponentFactory().getAgendaFactory().createAgenda(kBase);
  }
 else {
    this.agenda=agenda;
  }
  this.agenda.setWorkingMemory(this);
  this.processRuntime=createProcessRuntime();
  if (initInitFactHandle) {
    initInitialFact(kBase,null);
  }
}
