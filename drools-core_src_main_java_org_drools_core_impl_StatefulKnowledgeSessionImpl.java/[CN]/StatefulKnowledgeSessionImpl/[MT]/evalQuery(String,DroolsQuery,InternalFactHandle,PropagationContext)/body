{
  BaseNode[] tnodes=kBase.getReteooBuilder().getTerminalNodes(queryName);
  if (tnodes == null) {
    throw new RuntimeException("Query '" + queryName + "' does not exist");
  }
  QueryTerminalNode tnode=(QueryTerminalNode)tnodes[0];
  LeftTupleSource lts=tnode.getLeftTupleSource();
  while (lts.getType() != NodeTypeEnums.LeftInputAdapterNode) {
    lts=lts.getLeftTupleSource();
  }
  LeftInputAdapterNode lian=(LeftInputAdapterNode)lts;
  LeftInputAdapterNode.LiaNodeMemory lmem=(LeftInputAdapterNode.LiaNodeMemory)getNodeMemory((MemoryFactory)lts);
  if (lmem.getSegmentMemory() == null) {
    SegmentUtilities.createSegmentMemory(lts,this);
  }
  LeftInputAdapterNode.doInsertObject(handle,pCtx,lian,this,lmem,false,queryObject.isOpen());
  for (  PathMemory rm : lmem.getSegmentMemory().getPathMemories()) {
    RuleAgendaItem evaluator=agenda.createRuleAgendaItem(Integer.MAX_VALUE,rm,(TerminalNode)rm.getNetworkNode());
    evaluator.getRuleExecutor().setDirty(true);
    evaluator.getRuleExecutor().evaluateNetworkAndFire(this,null,0,-1);
  }
  return tnodes;
}
