{
  nodeMemories=new ConcurrentNodeMemories(this.kBase);
  Globals globals=(Globals)this.environment.get(EnvironmentName.GLOBALS);
  if (globals != null) {
    if (!(globals instanceof GlobalResolver)) {
      this.globalResolver=new GlobalsAdapter(globals);
    }
 else {
      this.globalResolver=(GlobalResolver)globals;
    }
  }
 else {
    this.globalResolver=new MapGlobalResolver();
  }
  this.calendars=new CalendarsImpl();
  this.dateFormats=(DateFormats)this.environment.get(EnvironmentName.DATE_FORMATS);
  if (this.dateFormats == null) {
    this.dateFormats=new DateFormatsImpl();
    this.environment.set(EnvironmentName.DATE_FORMATS,this.dateFormats);
  }
  final RuleBaseConfiguration conf=kBase.getConfiguration();
  this.sequential=conf.isSequential();
  this.kieBaseEventListeners=new LinkedList<KieBaseEventListener>();
  this.lock=new ReentrantLock();
  timerService=TimerServiceFactory.getTimerService(this.config);
  ((AcceptsTimerJobFactoryManager)timerService).setTimerJobFactoryManager(config.getTimerJobFactoryManager());
  this.firing=new AtomicBoolean(false);
  initTransient();
  this.opCounter=new AtomicLong(0);
  this.lastIdleTimestamp=new AtomicLong(-1);
  this.processRuntime=createProcessRuntime();
  initManagementBeans();
}
