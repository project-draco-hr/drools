{
  try {
    startOperation();
    this.kBase.readLock();
    this.lock.lock();
    LeftInputAdapterNode lian=(LeftInputAdapterNode)factHandle.getFirstLeftTuple().getTupleSink().getLeftTupleSource();
    LeftInputAdapterNode.LiaNodeMemory lmem=getNodeMemory(lian);
    SegmentMemory lsmem=lmem.getSegmentMemory();
    LeftTuple childLeftTuple=factHandle.getFirstLeftTuple();
    LeftInputAdapterNode.doDeleteObject(childLeftTuple,childLeftTuple.getPropagationContext(),lsmem,this,lian,false,lmem);
    for (    PathMemory rm : lmem.getSegmentMemory().getPathMemories()) {
      RuleAgendaItem evaluator=agenda.createRuleAgendaItem(Integer.MAX_VALUE,rm,(TerminalNode)rm.getNetworkNode());
      evaluator.getRuleExecutor().setDirty(true);
      evaluator.getRuleExecutor().evaluateNetworkAndFire(this,null,0,-1);
    }
    getFactHandleFactory().destroyFactHandle(factHandle);
  }
  finally {
    this.lock.unlock();
    this.kBase.readUnlock();
    endOperation();
  }
}
