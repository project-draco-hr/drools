{
  try {
    startOperation();
    this.lock.lock();
    agenda.executeCallable(new Callable<Void>(){
      @Override public Void call() throws Exception {
        LeftInputAdapterNode lian=factHandle.getFirstLeftTuple().getTupleSource();
        LeftInputAdapterNode.LiaNodeMemory lmem=getNodeMemory(lian);
        SegmentMemory lsmem=lmem.getSegmentMemory();
        LeftTuple childLeftTuple=factHandle.getFirstLeftTuple();
        LeftInputAdapterNode.doDeleteObject(childLeftTuple,childLeftTuple.getPropagationContext(),lsmem,StatefulKnowledgeSessionImpl.this,lian,false,lmem);
        for (        PathMemory rm : lmem.getSegmentMemory().getPathMemories()) {
          RuleAgendaItem evaluator=agenda.createRuleAgendaItem(Integer.MAX_VALUE,rm,(TerminalNode)rm.getPathEndNode());
          evaluator.getRuleExecutor().setDirty(true);
          evaluator.getRuleExecutor().evaluateNetworkAndFire(StatefulKnowledgeSessionImpl.this,null,0,-1);
        }
        getFactHandleFactory().destroyFactHandle(factHandle);
        return null;
      }
    }
);
  }
  finally {
    this.lock.unlock();
    endOperation();
  }
}
