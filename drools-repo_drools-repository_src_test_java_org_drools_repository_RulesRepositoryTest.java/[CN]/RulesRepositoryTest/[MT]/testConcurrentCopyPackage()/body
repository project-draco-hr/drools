{
  RulesRepository repo=RepositorySessionUtil.getMultiThreadedRepository();
  PackageItem source=repo.createPackage("testConcurrentCopyPackage","asset");
  AssetItem item=source.addAsset("testCopyPackage","desc");
  item.updateContent("la");
  item.checkin("");
  repo.save();
  int NUM_ITERATIONS=40;
  int NUM_SESSIONS=2;
  for (int n=0; n < NUM_ITERATIONS; n++) {
    Node folderNode=repo.getAreaNode(RulesRepository.RULE_PACKAGE_AREA);
    while (folderNode.hasNode("testConcurrentCopyPackage2")) {
      folderNode.getNode("testConcurrentCopyPackage2").remove();
      repo.save();
    }
    Thread[] threads=new Thread[NUM_SESSIONS];
    for (int i=0; i < threads.length; i++) {
      String id="session#" + i;
      ConcurrentCopySession ts=new ConcurrentCopySession(id);
      Thread t=new Thread(ts);
      t.setName(id);
      t.start();
      threads[i]=t;
    }
    for (int i=0; i < threads.length; i++) {
      threads[i].join();
    }
    folderNode.refresh(true);
    NodeIterator results=folderNode.getNodes("testConcurrentCopyPackage2");
    assertEquals(1,results.getSize());
  }
}
