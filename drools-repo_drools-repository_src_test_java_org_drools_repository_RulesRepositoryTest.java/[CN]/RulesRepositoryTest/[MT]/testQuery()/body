{
  RulesRepository repo=getRepo();
  AssetItem asset=repo.loadDefaultPackage().addAsset("testQuery","wanklerotaryengine1cc");
  asset.updateContent("testingSearchWankle");
  asset.updateSubject("testQueryXXX42");
  asset.checkin("");
  Map<String,String[]> q=new HashMap<String,String[]>();
  q.put("drools:subject",new String[]{"testQueryXXX42"});
  AssetItemIterator asit=repo.query(q,false,null);
  List<AssetItem> results=iteratorToList(asit);
  assertEquals(1,results.size());
  AssetItem as=results.get(0);
  assertEquals("testQuery",as.getName());
  asset.updateExternalSource("database");
  asset.checkin("");
  q=new HashMap<String,String[]>();
  q.put("drools:subject",new String[]{"testQueryXXX42"});
  q.put(AssetItem.SOURCE_PROPERTY_NAME,new String[]{"database"});
  results=iteratorToList(repo.query(q,true,null));
  assertEquals(1,results.size());
  as=results.get(0);
  assertEquals("testQuery",as.getName());
  q=new HashMap<String,String[]>();
  q.put("drools:subject",new String[]{"testQueryXXX42","wankle"});
  q.put(AssetItem.SOURCE_PROPERTY_NAME,new String[]{"database","wankle"});
  results=iteratorToList(repo.query(q,false,null));
  assertEquals(1,results.size());
  as=results.get(0);
  assertEquals("testQuery",as.getName());
  q=new HashMap<String,String[]>();
  q.put("drools:subject",null);
  q.put("cruddy",new String[0]);
  q.put(AssetItem.SOURCE_PROPERTY_NAME,new String[]{"database","wankle"});
  results=iteratorToList(repo.query(q,false,null));
  assertEquals(1,results.size());
  q=new HashMap<String,String[]>();
  q.put("drools:subject",new String[]{"testQueryXXX42","wankle"});
  q.put(AssetItem.SOURCE_PROPERTY_NAME,new String[]{"database","wankle"});
  results=iteratorToList(repo.query(q,false,new DateQuery[]{new DateQuery("jcr:created","1974-07-10T00:00:00.000-05:00","3074-07-10T00:00:00.000-05:00")}));
  assertEquals(1,results.size());
  as=results.get(0);
  assertEquals("testQuery",as.getName());
  q=new HashMap<String,String[]>();
  q.put("drools:subject",new String[]{"testQueryXXX42","wankle"});
  q.put(AssetItem.SOURCE_PROPERTY_NAME,new String[]{"database","wankle"});
  results=iteratorToList(repo.query(q,false,new DateQuery[]{new DateQuery("jcr:created","1974-07-10T00:00:00.000-05:00",null)}));
  assertEquals(1,results.size());
  as=results.get(0);
  assertEquals("testQuery",as.getName());
  q=new HashMap<String,String[]>();
  q.put("drools:subject",new String[]{"testQueryXXX42","wankle"});
  q.put(AssetItem.SOURCE_PROPERTY_NAME,new String[]{"database","wankle"});
  results=iteratorToList(repo.query(q,false,new DateQuery[]{new DateQuery("jcr:created",null,"3074-07-10T00:00:00.000-05:00")}));
  assertEquals(1,results.size());
  as=results.get(0);
  assertEquals("testQuery",as.getName());
  q=new HashMap<String,String[]>();
  q.put("drools:subject",new String[]{"testQueryXXX42","wankle"});
  q.put(AssetItem.SOURCE_PROPERTY_NAME,new String[]{"database","wankle"});
  results=iteratorToList(repo.query(q,false,new DateQuery[]{new DateQuery("jcr:created","3074-07-10T00:00:00.000-05:00",null)}));
  assertEquals(0,results.size());
  q=new HashMap<String,String[]>();
  q.put("drools:subject",new String[]{"testQueryXXX42","wankle"});
  q.put(AssetItem.SOURCE_PROPERTY_NAME,new String[]{"database","wankle"});
  results=iteratorToList(repo.query(q,false,new DateQuery[]{new DateQuery("jcr:created",null,"1974-07-10T00:00:00.000-05:00")}));
  assertEquals(0,results.size());
}
